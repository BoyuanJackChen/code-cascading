[
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\n\"\"\"",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\"\"\"\n\nn = int(input())\ndic = {}\nfor i in range(1, n):\n    a, b = map(int, input().split())\n    dic[(a, b)] = dic.get((a, b), 0) + 1\n    dic[(b, a)] = dic.get((b, a), 0) + 1\n\nres = 0\nfor k, v in dic.items():\n    if v == 2:\n        res += 1\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str([\n    '8',\n    '1 2',\n    '2 3',\n    '3 4',\n    '4 5',\n    '4 6',\n    '3 7',\n    '3 8',\n])) == '5'\nassert solution(str([\n    '8',\n    '1 2',\n    '2 3',\n    '3 4',\n    '4 5',\n    '4 6',\n    '3 7',\n    '3 8',\n])) == '1 8 6'\nassert solution(str([\n    '8',\n    '1 2',\n    '2 3',\n    '3 4',\n    '4 5',\n    '4 6',\n    '3 7',\n    '3 8',\n])) == '1 8 6'\nassert solution(str([\n    '8',\n    '1 2',\n    '2 3',\n    '3 4',\n    '4 5',\n    '4 6',\n    '3 7',\n    '3 8',\n])) == '1 8 6'\nassert solution(str([\n    '8',\n    '1 2',\n    '2 3',\n    '3 4',\n    '4 5',\n    '4 6',\n    '3 7',\n    '3 8',\n])) == '1 8 6'\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n''') == '5 1 8 6'\n\n'''\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '5\\n1 4 6'\nassert solution('6\\n5 7\\n3 9\\n6 4\\n9 8\\n8 5') == '7\\n5 8 9'\nassert solution('5\\n1 2\\n1 3\\n1 4\\n2 5') == '3\\n1 4 2'\nassert solution('8\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n3 8\\n4 9\\n5 8\\n6 7') == '8\\n1 3 2\\n5 8 7'\nassert solution('7\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7') == '2\\n1 3 6\\n1 4 2\\n5 7 3'\n",
        "num_ids_2": 62,
        "num_ids_4": 153
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in a:\n    for j in range(1, i + 1):\n        if i % j == 0:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n\nd = sorted(d.items())\n\nx = 0\ny = 0\n\nfor i in d:\n    if i[1] == 2:\n        x, y = i[0], i[0]\n    elif i[1] == 1:\n        x, y = i[0], i[0]\n    else:\n        break\n\nprint(x, y)\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 10 2 4 2 8 1 20 4 5\") == \"20 8\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 1 2 4\\n') == '4 3'\n\"\"\"\n\nimport collections",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\na.sort()\n\nx, y = 1, 1\n\nfor i in a:\n    if i!= x:\n        x *= i\n    if i!= y:\n        y *= i\n\nprint(x, y)\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 2 8 1 2 4 1 20 4 5') == '20 8'\nassert solution('10 1 2 4 1 20 4 5') == '20 4'\n\"\"\"\n\n\nimport sys\nimport itertools\nfrom typing import List",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''10\n10 2 8 1 2 4 1 20 4 5''') == '20 8'\n\"\"\"\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 8') == '20 8'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\n\nimport numpy as np",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n\"\"\"\n\nn, m, k = [int(i) for i in stdin.readline().split()]\na = [list(map(int, stdin.readline().split())) for _ in range(n)]\n\nmax_sum = 0\nfor i in range(n):\n    row_sum = 0\n    for j in range(m):\n        if a[i][j] % k == 0:\n            row_sum += a[i][j]\n        else:\n            row_sum += a[i][j] % k\n    if row_sum > max_sum:\n        max_sum = row_sum\n\nprint(max_sum)\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4\n\"\"\") == \"24\"\nassert solution(\"\"\"\n5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6\n\"\"\") == \"56\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4''') == '24'\nassert solution('''5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6''') == '56'\nassert solution('''5 5 4\n0 1 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6''') == '56'\n\n\"\"\"\n\n\n\"\"\"\nimport numpy as np",
        "num_ids_2": 18,
        "num_ids_4": 27
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'\nassert solution('5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6') == '56'\n\"\"\"\n\nimport sys\nimport math\n\nn, m, k = [int(num) for num in sys.stdin.readline().split()]\n\nmatrix = [[int(num) for num in sys.stdin.readline().split()] for _ in range(n)]\n\nc = [math.ceil(m / 2) for _ in range(n)]\nmax_sum = 0\nfor i in range(n):\n    for j in range(c[i]):\n        max_sum += matrix[i][j]\n        if max_sum % k!= 0:\n            max_sum -= matrix[i][j]\n\nprint(max_sum)\n",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n\nsolution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") # \"24\"\nsolution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") # \"56\"\n\"\"\"\n",
        "num_ids_2": 77,
        "num_ids_4": 124
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'\n\nassert solution('5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6') == '56'\n\"\"\"\n\nn, m, k = map(int, input().split())\narr = []\nfor _ in range(n):\n    arr.append(list(map(int, input().split())))\n\nMAX_NUM_OF_ELEMENTS = m // 2\n\nd = {}\nfor i in range(MAX_NUM_OF_ELEMENTS + 1):\n    d[i] = set()\n\nfor i in range(n):\n    num_of_elements = 0\n    sum_of_elements = 0\n    for j in range(m):\n        if num_of_elements < MAX_NUM_OF_ELEMENTS:\n            if (sum_of_elements + arr[i][j]) % k == 0:\n                num_of_elements += 1\n                sum_of_elements += arr[i][j]\n                d[num_of_elements].add(sum_of_elements)\n            else:\n                sum_of_elements += arr[i][j]\n        else:\n            break\n\nmax_sum = 0\nfor i in d.values():\n    if len(i) > 0:\n        for x in i:\n            if x > max_sum:\n                max_sum = x\n\nprint(max_sum)\n",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n\") == '24'\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n\"\"\"\nimport math\nimport sys",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 4 3 2') == '4', 'Test 1'\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == '4\\nR'\nassert solution(\"7\\n1 3 5 6 5 4 2\") == '6\\nR'\nassert solution(\"3\\n2 2 2\") == '1\\nR'\nassert solution(\"4\\n1 2 4 3\") == '4\\nLRR'\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 80
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 4 3 2\\n\") == '4\\nLRRR'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4\\nR R R'\nassert solution('7\\n1 3 5 6 5 4 2') == '6\\nL R R R'\nassert solution('3\\n2 2 2') == '1\\nR'\nassert solution('4\\n1 2 4 3') == '4\\nL L L'\n\n---",
        "num_ids_2": 47,
        "num_ids_4": 86
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nLRRR\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 4 3 2\") == 4\nassert solution(\"1 3 5 6 5 4 2\") == 6\nassert solution(\"1 3 5 6 5 4 2\") == 6\nassert solution(\"1 3 5 6 5 4 2\") == 6\nassert solution(\"1 3 5 6 5 4 2\") == 6\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 4 3 2\\n') == '4\\nLRRR'\nassert solution('7\\n1 3 5 6 5 4 2\\n') == '6\\nLRLRRR'\nassert solution('3\\n2 2 2\\n') == '1\\nR'\nassert solution('4\\n1 2 4 3\\n') == '4\\nLLRR'\n\"\"\"\n",
        "num_ids_2": 51,
        "num_ids_4": 93
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == '4\\nLRRR'\n\"\"\"\n\nn = int(input())\na = [int(_) for _ in input().split()]\n\nm = [0] * n\nr = 1\nfor i in range(1, n):\n    if a[i] >= a[i-1]:\n        m[i] = m[i-1] + 1\n        r = max(r, m[i])\n    else:\n        m[i] = 1\nprint(r)\nans = []\nfor i in range(n - 1, -1, -1):\n    if m[i] == r:\n        ans.append('L' if a[i] < a[i+1] else 'R')\n        r -= 1\nans.reverse()\nprint(''.join(ans))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4\\nLRRR'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\na.sort()\n\nk = 1\ns = [a[0]]\n\nfor i in range(1, n):\n    if s[-1] < a[i]:\n        s.append(a[i])\n        k += 1\n\nprint(k)\nfor i in range(k):\n    print('L' if s[i] == a[0] else 'R')",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nR R R\"\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nr = [0] * (n + 1)\nfor i in range(n):\n    if a[i] > a[n - i - 1]:\n        r[i] = a[n - i - 1]\n    else:\n        r[i] = a[i]\n\nk = max(r)\ns = \"\"\nfor i in range(len(r)):\n    if r[i] == k:\n        s += \"R\" if i > 0 else \"L\"\n        k -= 1\nprint(k)\nprint(s)\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 8\") == \"3\"\nassert solution(\"4\\n1 3 3 7\") == \"3\"\nassert solution(\"5\\n2 2 5 2 5\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 47
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == \"3\"\nassert solution(\"5\\n1 3 3 7\") == \"3\"\nassert solution(\"4\\n1 3 3 7\") == \"-1\"\nassert solution(\"2\\n2 8\") == \"3\"",
        "num_ids_2": 34,
        "num_ids_4": 64
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 2 5 2 5') == '3'\nassert solution('2\\n2 8') == '3'\nassert solution('6\\n1 4 4 7 4 1') == '3'\nassert solution('5\\n2 2 5 2 5') == '3'\nassert solution('5\\n1 3 3 7') == '-1'",
        "num_ids_2": 31,
        "num_ids_4": 66
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8\\n2 3 5 2 5\\n\") == \"3\"\nassert solution(\"1 3\\n2 5 2 5\\n\") == \"-1\"\nassert solution(\"1 2\\n5 5\\n\") == \"1\"\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 56
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == 3\nassert solution(\"5\\n2 2 5 2 5\") == 3\nassert solution(\"4\\n1 3 3 7\") == -1\nassert solution(\"2\\n2 8\") == 3",
        "num_ids_2": 31,
        "num_ids_4": 58
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 4 4 7 4 1') == '3'\nassert solution('2 2 5 2 5') == '3'\nassert solution('1 3 3 7') == '-1'\nassert solution('2 8') == '3'",
        "num_ids_2": 29,
        "num_ids_4": 54
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 3 7\") == 3\nassert solution(\"5\\n2 2 5 2 5\") == 3\nassert solution(\"6\\n1 4 4 7 4 1\") == 3\nassert solution(\"7\\n1 3 3 7\") == -1\nassert solution(\"8\\n2 2 5 2 5\") == 3\n",
        "num_ids_2": 29,
        "num_ids_4": 60
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 4 7 4 1\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\nassert solution(\"1 3 3 7\") == \"-1\"\nassert solution(\"2 8\") == \"3\"",
        "num_ids_2": 29,
        "num_ids_4": 53
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_data.str1) == test_data.ans1\nassert solution(test_data.str2) == test_data.ans2\nassert solution(test_data.str3) == test_data.ans3\nassert solution(test_data.str4) == test_data.ans4\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 5 2 5\") == 3\nassert solution(\"1 3 3 7\") == -1\nassert solution(\"2 8\") == 3\n",
        "num_ids_2": 24,
        "num_ids_4": 33
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"0 0 4 6\") == \"YES\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"1 1 3 5\") == \"NO\"\nassert solution(\"3 1 5 5\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 4 6\") == \"YES\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\") == \"YES\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\n",
        "num_ids_2": 50,
        "num_ids_4": 107
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == 'NO'\nassert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\") == 'YES'\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == 'YES'",
        "num_ids_2": 50,
        "num_ids_4": 82
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\") == \"YES\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\n\"\"\"\nimport math\n",
        "num_ids_2": 50,
        "num_ids_4": 75
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\") == \"YES\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\n",
        "num_ids_2": 50,
        "num_ids_4": 107
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 3 5\") == \"NO\"\nassert solution(\"3 1 5 5\") == \"YES\"\n\n\"\"\"\nimport math\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"YES\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\n",
        "num_ids_2": 50,
        "num_ids_4": 107
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 7 6 0 0 4 6\") == \"YES\"\nassert solution(\"5 2 10 5 3 1 7 6 8\") == \"YES\"\nassert solution(\"0 0 1000000 1000000 0 0 499999 1000000 500000 0 1000000 1000000\") == \"YES\"\nassert solution(\"5 2 10 5 3 1 7 6 8\") == \"NO\"\nassert solution(\"2 2 4 4\") == \"NO\"\n",
        "num_ids_2": 35,
        "num_ids_4": 81
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\") == \"YES\"\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10098') == 20\nassert solution('10') == 19\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\nprint('The code ran Correctly')\n-----",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1098\") == 20\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\nassert solution(\"11\") == 2\nassert solution(\"12\") == 3\n",
        "num_ids_2": 17,
        "num_ids_4": 33
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1098\") == 20\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1098') == 20\n\nprint(solution(input()))",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\n\nprint(\"Hooray!\")\n",
        "num_ids_2": 46,
        "num_ids_4": 71
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n5 0 0 2 4''') == '5 3 1 2 4'\nassert solution('''7\n7 0 0 1 4 0 6''') == '7 3 2 1 4 5 6'\nassert solution('''7\n7 4 0 3 0 5 1''') == '7 4 2 3 6 5 1'\n\nprint(solution(input()))\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\nm = max(a)\n\nd = {}\nfor i in range(n):\n    if a[i] == 0:\n        d[i] = []\n    else:\n        d[a[i] - 1].append(i)\n\nans = []\nfor key in d.keys():\n    if len(d[key]) == 0:\n        ans.append(key)\n    else:\n        ans.append(d[key][0] + 1)\nprint(\" \".join(map(str, ans)))\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n5 0 0 2 4') == '5 3 1 2 4'\n\"\"\"\n\nfrom math import sqrt\nfrom typing import List\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n5 0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7 0 0 1 4 0 6\\n\") == \"7 3 2 1 4 5 6\"\n\"\"\"\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 0 0 2 4\") == \"5 3 1 2 4\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n5\\n0\\n2\\n4') == '5\\n3\\n1\\n2\\n4'\nassert solution('7\\n7\\n0\\n1\\n4\\n0\\n6') == '7\\n4\\n2\\n3\\n6\\n5\\n1'\n\n\"\"\"",
        "num_ids_2": 80,
        "num_ids_4": 80
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 0 0 2 4\") == '5 3 1 2 4'\nassert solution(\"7 0 0 1 4 0 6\") == '7 3 2 1 4 5 6'\nassert solution(\"7 4 0 3 0 5 1\") == '7 4 2 3 6 5 1'\nassert solution(\"5 0 0 2 4\") == '5 3 1 2 4'",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n5 0 0 2 4') == '5 3 1 2 4'\nassert solution('7\\n7 4 0 3 0 5 1') == '7 4 2 3 6 5 1'\nassert solution('7\\n7 4 0 3 0 5 1') == '7 4 2 3 6 5 1'\n\"\"\"",
        "num_ids_2": 46,
        "num_ids_4": 71
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'NO'\nassert solution('2 1 1 2 1') == 'NO'\nassert solution('3 2 1 2 1') == 'NO'\nassert solution('3 2 1 2 3') == 'YES'\nassert solution('4 2 1 2 3') == 'YES'\n",
        "num_ids_2": 24,
        "num_ids_4": 52
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == 'YES\\n1 1 2 2'\n\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 48,
        "num_ids_4": 66
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n3 2 1 2 1\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n1 1 2 1 1\") == \"NO\"\nassert solution(\"5 2\\n1 1 2 1 2\") == \"NO\"",
        "num_ids_2": 43,
        "num_ids_4": 61
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2 2 3\\n\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\\n\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\\n\") == \"NO\"\n",
        "num_ids_2": 52,
        "num_ids_4": 72
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n\nimport re",
        "num_ids_2": 48,
        "num_ids_4": 66
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == \"NO\"\nassert solution('2 2') == \"NO\"\nassert solution('4 2') == \"YES\\n2 1 2 1\"\nassert solution('5 2') == \"NO\"\nassert solution('5 2\\n2 1 1 2 1') == \"YES\\n2 1 1 2 1\"\n",
        "num_ids_2": 21,
        "num_ids_4": 49
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == 'YES\\n1 1 2 2'\nassert solution(\"5 2\\n3 2 1 2 3\") == 'YES\\n2 1 1 2 1'\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n2 1 2 1 2\") == \"NO\"\nassert solution(\"5 2\\n2 1 1 2 2\") == \"NO\"\n\"\"\"\n",
        "num_ids_2": 48,
        "num_ids_4": 84
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n2 1 1 2 2\") == \"NO\"\n\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\na = sorted(a)\n\nfor i in range(k):\n    if i < n:\n        if a[i]!= i + 1:\n            print('NO')\n            exit()\n    else:\n        if a[i] == i + 1:\n            print('NO')\n            exit()\nprint('YES')\n\nfor i in range(k):\n    if a[i] == i + 1:\n        print(' '.join([str(i+1) for i in range(k)]))\n        break\n",
        "num_ids_2": 48,
        "num_ids_4": 84
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == '1'\nassert solution(\"11 5 1\\n11010100101\") == '3'\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\n\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == '1'\nassert solution(\"11 5 1\\n11010100101\") == '3'\n\n\"\"\"\n\n\n\nimport math\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11 5 2\") == '1'\nassert solution(\"11 5 1\") == '3'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 5 2\", \"11010100101\") == \"1\"\nassert solution(\"11 5 1\", \"11010100101\") == \"3\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 5 2\") == '1'\nassert solution(\"11 5 1\") == '3'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\nassert solution(\"11 5 10\") == \"0\"\nassert solution(\"11 5 100\") == \"1\"\n\nassert solution(\"11 5 2\") == \"1\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\nassert solution(\"11 5 3\") == \"5\"\nassert solution(\"11 5 3\") == \"5\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n\nimport collections",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 5 2\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 1 2\\n4\\n1 2 2 1\") == \"NO\"\nassert solution(\"3\\n1 1 2\\n4\\n1 2 2 1\") == \"NO\"\nassert solution(\"3\\n1 1 2\\n4\\n1 2 2 1\") == \"NO\"\n",
        "num_ids_2": 50,
        "num_ids_4": 98
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 1\\n3\\n1 2 3 2 1') == 'YES'\nassert solution('6\\n1 2 3 2 3\\n4\\n1 2 2 1\\n4\\n3\\n2 2 3\\n3') == 'NO'\n\"\"\"\n\n\nfrom itertools import combinations\n\nt = int(input())\n",
        "num_ids_2": 65,
        "num_ids_4": 65
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == 'YES\\nYES\\nNO\\nYES'\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == 'YES\\nYES\\nNO\\nYES'\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == 'YES\\nYES\\nNO\\nYES'\nassert solution(\"5\\n3\\n1 1 2\\n4\\n1 2 2 1\\n3\\n1 1 2\") == 'YES\\nNO'\nassert solution(\"2\\n2\\n2\\n2\") == 'YES'\n",
        "num_ids_2": 102,
        "num_ids_4": 191
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 2 2 1\") == \"YES\"\nassert solution(\"5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n1 2 2 1\") == \"NO\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n",
        "num_ids_2": 33,
        "num_ids_4": 49
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == 'YES'\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == 'YES'\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == 'YES'\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == 'NO'\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == 'NO'\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\n",
        "num_ids_2": 138,
        "num_ids_4": 276
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2\\n1 2 1\\n5\\n2 1 3 1\\n3\\n1 1 2\") == \"YES\"\nassert solution(\"4\\n2\\n1 2 1\\n5\\n2 1 3 1\\n3\\n1 1 2\") == \"NO\"\nassert solution(\"1\\n2\\n1 2 1\\n2\\n1 1 2\") == \"NO\"\nassert solution(\"1\\n2\\n1 2 1\\n5\\n2 1 3 1\\n3\\n1 1 2\") == \"YES\"\nassert solution(\"1\\n2\\n1 2 1\\n5\\n2 1 3 1\\n3\\n1 1 2\") == \"YES\"\n",
        "num_ids_2": 70,
        "num_ids_4": 131
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"4\\n\"\n    \"1 2 1 3\\n\"\n    \"5\\n\"\n    \"1 2 2 3 2\\n\"\n    \"3\\n\"\n    \"1 1 2\\n\"\n    \"4\\n\"\n    \"1 2 2 1\\n\"\n    \"10\\n\"\n    \"1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\n\"\n\n\n----\n\"\"\"\n\"\"\"\nT = int(stdin.readline())\n\nfor _ in range(T):\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    for i in range(n-2):\n        if a[i] == a[i+2]:\n            continue\n        elif a[i] == a[i+1] and a[i+1] == a[i+2]:\n            continue\n        else:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n\nassert solution(\"5\\n\"\n                \"1 2 1 3\\n\"\n                \"5\\n\"\n                \"1 2 2 3 2\\n\"\n                \"3\\n\"\n                \"1 1 2\\n\"\n                \"4\\n\"\n                \"1 2 2 1\\n\"\n                \"10\\n\"\n                \"1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\n\"\n\n\nassert solution(\"5\\n\"\n                \"1 2 1 3\\n\"\n                \"5\\n\"\n                \"1 2 2 3 2\\n\"\n                \"3\\n\"\n                \"1 1 2\\n\"\n                \"4\\n\"\n                \"1 2 2 1\\n\"\n                \"10\\n\"\n                \"1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\n\"\n\nassert solution(\"5\\n\"\n                \"1 2 1 3\\n\"\n                \"5\\n\"\n                \"1 2 2 3 2\\n\"\n                \"3\\n\"\n                \"1 1 2\\n\"\n                \"4\\n\"\n                \"1 2 2 1\\n\"\n                \"10\\n\"\n                \"1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\n\"\n\nassert solution(\"5\\n\"\n                \"1 2 1 3\\n\"\n                \"5\\n\"\n                \"1 2 2 3 2\\n\"\n                \"3\\n\"\n                \"1 1 2\\n\"\n                \"4\\n\"\n                \"1 2 2 1\\n\"\n                \"10\\n\"\n                \"1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\n\"",
        "num_ids_2": 12,
        "num_ids_4": 28
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 1') == 'YES'\nassert solution('5\\n1 2 2 3 2') == 'YES'\nassert solution('3\\n1 1 2') == 'NO'\nassert solution('4\\n1 2 2 1') == 'YES'\nassert solution('10\\n1 1 2 2 3 3 4 4 5 5') == 'NO'",
        "num_ids_2": 32,
        "num_ids_4": 63
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1337') == '1557'\n\n\"\"\"\nimport math\n\nstdin = []\nwhile True:\n    try:\n        stdin.append(input())\n    except EOFError:\n        break",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1337') == '1553'\nassert solution('5\\n11111') == '99999'\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1337') == '1553'\nassert solution('11111') == '99999'\nassert solution('2222') == '2222'\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1337\") == \"1557\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"33\") == \"33\"\nassert solution(\"1 1 1 1 1 1 1 1 1\") == \"33\"\nassert solution(\"9 8 7 6 5 4 3 2 1\") == \"99999\"\n\nprint(solution(input()))\n",
        "num_ids_2": 24,
        "num_ids_4": 52
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1337') == '1553'\n\"\"\"\n\n\"\"\"\nfrom typing import Dict\n\nimport collections",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1337\") == \"1557\"\n\"\"\"\n\nn = int(stdin.readline().strip())\na = stdin.readline().strip()\nb = list(map(int, stdin.readline().strip().split()))",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1337\") == \"1557\"\nassert solution(\"1111\") == \"99999\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"33\") == \"33\"\nprint('Example 1:')\nprint(solution(\"1337\"))\nprint('Example 2:')\nprint(solution(\"11111\"))\nprint('Example 3:')\nprint(solution(\"33\"))\nprint('Example 4:')\nprint(solution(\"2\"))\nprint('Example 5:')\nprint(solution(\"1 1 1 1 1 1 1 1 1\"))\n",
        "num_ids_2": 24,
        "num_ids_4": 34
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1337\") == \"1557\"\nassert solution(\"5\\n11111\") == \"99999\"\n\n\"\"\"\n\nimport sys\nimport collections",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"4\\n1337\\n1 2 5 4 6 6 3 1 9\"\n) == \"1557\"\nprint(solution(\n    \"5\\n11111\\n9 8 7 6 5 4 3 2 1\"\n))\nassert solution(\n    \"5\\n11111\\n9 8 7 6 5 4 3 2 1\"\n) == \"99999\"\nprint(solution(\n    \"2\\n33\\n1 1 1 1 1 1 1 1 1\"\n))\nassert solution(\n    \"2\\n33\\n1 1 1 1 1 1 1 1 1\"\n) == \"33\"\nprint(\"Passed!\")\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == 1\nassert solution('123 321 456') == 2\nassert solution('5 10 15') == 2\nassert solution('15 18 21') == 3\nassert solution('100 100 101') == 3\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\"\nprint(\"Test finished.\")",
        "num_ids_2": 102,
        "num_ids_4": 102
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48'",
        "num_ids_2": 110,
        "num_ids_4": 110
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2 3\\n\") == \"1\\n1 1 3\"\nassert solution(\"8\\n1 2 3\\n\") == \"1\\n1 1 3\"\nassert solution(\"5\\n1 2 3\\n\") == \"2\\n2 2 3\"\nassert solution(\"8\\n1 2 3\\n\") == \"2\\n2 2 3\"\nassert solution(\"8\\n1 2 3\\n\") == \"2\\n2 2 3\"\n",
        "num_ids_2": 43,
        "num_ids_4": 87
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\"\nprint(\"The local tests are done.\")",
        "num_ids_2": 102,
        "num_ids_4": 102
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1\\n'\nassert solution('1 2 3\\n') == '1 1 3\\n'\nassert solution('123 321 456\\n') == '1 1 3\\n'\nassert solution('5 10 15\\n') == '1 1 3\\n'\n",
        "num_ids_2": 22,
        "num_ids_4": 59
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\"\n\nprint(solution(stdin))\n",
        "num_ids_2": 110,
        "num_ids_4": 110
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46') == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48'\nprint('Test pass.')",
        "num_ids_2": 110,
        "num_ids_4": 110
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46') == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48'\n",
        "num_ids_2": 110,
        "num_ids_4": 110
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 2\\n3 5 2\\n4 1 4\") == \"0\\n1 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1 3\\n2\\n1 1 1\\n3\\n0 3 3\\n4\\n1 1 1\\n2\\n0 1",
        "num_ids_2": 1593,
        "num_ids_4": 1593
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\n\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3 3 7\") == '2'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 3\\n\") == \"0\"\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u0435 \u0432\u0441\u0435 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0438 \"human\" \u043d\u0430 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0443 \"computer\"\ufeff \u0438 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\n\nSample Input:\nI need to understand the human mind\nhumanity\n\nSample Output:\nI need to understand the computer mind\ncomputerity\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\nassert solution('5\\n1 1 1 1 1') == '0'\n\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 48
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3 3 7\") == '2'\nassert solution(\"2\\n1 100000\") == '0'\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n\n\"\"\"\n\nfrom math import inf",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == solution(\"\"\"5 2\n1 3 1\n1 5 1\"\"\")\n\nassert solution(input()) == solution(\"\"\"10 3\n4 7 2\n1 10 3\n8 9 1\"\"\")\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n",
        "num_ids_2": 46,
        "num_ids_4": 81
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == '1 2 3 0 3'\n\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == '-1'\n\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == '2 2 2 1 1 0 4 3 4 4'\n\n\n\"\"\"\nfrom collections import deque, namedtuple\nfrom typing import Deque, Tuple\n\nStudent = namedtuple('Student', ['s', 'd', 'c'])\n",
        "num_ids_2": 47,
        "num_ids_4": 82
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n",
        "num_ids_2": 46,
        "num_ids_4": 81
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5 2\n1 3 1\n1 5 1\n\"\"\") == '1 2 3 0 3'\n\nassert solution(\"\"\"\n3 2\n1 3 1\n1 2 1\n\"\"\") == '-1'\n\nassert solution(\"\"\"\n10 3\n4 7 2\n1 10 3\n8 9 1\n\"\"\") == '2 2 2 1 1 0 4 3 4 4'\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 15
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n1 3 1\\n1 5 1') == '1 2 3 0 3'\nassert solution('3 2\\n1 3 1\\n1 2 1') == '-1'\nassert solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'\n\"\"\"",
        "num_ids_2": 47,
        "num_ids_4": 82
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 2\n1 3 1\n1 2 1''') == '1 2 3 0 3'\n\nassert solution('''5 2\n1 3 1\n1 5 1''') == '-1'\n\nassert solution('''10 3\n4 7 2\n1 10 3\n8 9 1''') == '2 2 2 1 1 0 4 3 4 4'\n\nassert solution('''1 2 1\n2 2 1''') == '0'\n\nassert solution('''2 4\n1 3 1\n4 5 1''') == '0'",
        "num_ids_2": 16,
        "num_ids_4": 33
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n1 3 1\\n1 5 1') == '1 2 3 0 3'\nassert solution('3 2\\n1 3 1\\n1 2 1') == '-1'\nassert solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'\n",
        "num_ids_2": 47,
        "num_ids_4": 82
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2 1\") == \"-1\"\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\nexams = [tuple(int(x) for x in input().split()) for i in range(m)]\n\nfirst = []\nsecond = []\nthird = []\n\nfor i in range(m):\n    first.append((exams[i][0], exams[i][1], exams[i][2], i + 1))\n    second.append((exams[i][0], exams[i][2], exams[i][1], i + 1))\n    third.append((exams[i][1], exams[i][2], exams[i][0], i + 1))\n\nfirst.sort()\nsecond.sort()\nthird.sort()\n\nfirst_set = set()\nsecond_set = set()\nthird_set = set()\n\nfor i in range(m):\n    first_set.add(i + 1)\n    second_set.add(i + 1)\n    third_set.add(i + 1)\n\nindex = 0\nfinish_set = set()\nfor i in range(n):\n    curr_day = int(input())\n    finish_set.add(curr_day)\n    while index < len(first) and first[index][0] == curr_day:\n        index += 1\n        if first[index - 1][3] not in finish_set:\n            finish_set.add(first[index - 1][3])\n            first_set.remove(first[index - 1][3])\n            if first[index - 1][1] == 1:\n                second_set.remove(first[index - 1][3])\n            elif first[index - 1][2] == 1:\n                third_set.remove(first[index - 1][3])\n    while index < len(second) and second[index][0] == curr_day:\n        index += 1\n        if second[index - 1][3] not in finish_set:\n            finish_set.add(second[index - 1][3])\n            second_set.remove(second[index - 1][3])\n            if second[index - 1][2] == 1:\n                third_set.remove(second[index - 1][3])\n    while index < len(third) and third[index][0] == curr_day:\n        index += 1\n        if third[index - 1][3] not in finish_set:\n            finish_set.add(third[index - 1][3])\n            third_set.remove(third[index - 1][3])\n            if third[index - 1][1] == 1:\n                second_set.remove(third[index - 1][3])",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 7 2\\n1 10 3\\n8 9 1\\n') == '2 2 2 1 1 0 4 3 4 4'\nassert solution('3 2\\n1 3 1\\n1 2 1') == '-1'\nassert solution('3 3\\n1 3 1\\n1 2 1\\n2 2 1') == '2 2 2 1 1 0 4 3 4 4'\nassert solution('5 2\\n1 3 1\\n1 2 1\\n2 4 1') == '2 2 2 1 1 0 4 3 4'\nassert solution('5 3\\n1 3 1\\n1 2 1\\n2 4 1\\n3 5 1') == '2 2 2 1 1 0 4 3 4'\n",
        "num_ids_2": 55,
        "num_ids_4": 124
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n\n\n\n\n'''\n",
        "num_ids_2": 24,
        "num_ids_4": 35
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('120 51840') == 7\nassert solution('42 42') == 0\nassert solution('48 72') == -1\n\n\nprint('Success')\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-\"\n",
        "num_ids_2": 24,
        "num_ids_4": 34
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n",
        "num_ids_2": 24,
        "num_ids_4": 35
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 35
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"no solution\"\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12 3') == '-1'\nassert solution('12 120') == '7'\nassert solution('12 120 10') == '8'\nassert solution('12 12') == '0'\n",
        "num_ids_2": 23,
        "num_ids_4": 46
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aba') == 'abababa'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aba\") == \"abababa\"\nassert solution(\"ababac\") == \"abababa\"\nassert solution(\"ba\") == \"ba\"\nassert solution(\"a\") == \"aa\"\nassert solution(\"cat\") == \"catcat\"\n",
        "num_ids_2": 26,
        "num_ids_4": 46
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aba\", 3) == \"abaabaaba\"\nassert solution(\"cat\", 2) == \"catcat\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"abababa\"\nassert solution(\"cat\") == \"catcat\"\nassert solution(\"catxcatxcat\") == \"catxcatxcatxcatxcatxcatxcatxcatxcatxcatxcatxcat\"\nassert solution(\"abc\") == \"abcabcabc\"\nassert solution(\"abcab\") == \"abcabcabcab\"\n",
        "num_ids_2": 23,
        "num_ids_4": 71
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aba') == 'abababa'\nassert solution('cat') == 'catcat'\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == \"ababababa\"\nassert solution(\"cat\") == \"catcat\"\nassert solution(\"ab\") == \"abab\"\nassert solution(\"a\") == \"a\"\nassert solution(\"aaaaa\") == \"aaaaa\"\n",
        "num_ids_2": 24,
        "num_ids_4": 45
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aba', 3) == 'ababababa'\nassert solution('cat', 2) == 'catcat'\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(s) == t, f\"expected: {t} actual: {s}\"\n\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aba') == 'abababa'\nassert solution('cat') == 'catcat'\nassert solution('aaa') == 'aa'\nassert solution('abca') == 'abca'\nassert solution('aaa') == 'aa'\n",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aba') == 'abababa'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 1 2 2') == '3 4 1 5'\nassert solution('4 3 5 2') == '0'\nassert solution('5 1 2 4 3') == '2 1 4'\nassert solution('5 1 2 4 3') == '2 1 4'\nassert solution('5 1 2 4 3') == '2 1 4'\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n5 1 2 2') == '3\\n4 1 5'\nassert solution('5\\n2 1 2 4 3') == '0'\nassert solution('4\\n8 3 5 2') == '2\\n1 4'\nassert solution('5\\n2 1 2 4 3') == '0'\n",
        "num_ids_2": 38,
        "num_ids_4": 75
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_result\nprint(solution(input))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 1 2 4 3\") == \"3\\n4 1 5\"\nassert solution(\"4\\n8 3 5 2\") == \"2\\n1 4\"\nassert solution(\"5\\n2 1 2 4 3\") == \"0\"\n",
        "num_ids_2": 42,
        "num_ids_4": 59
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n2 5 1 2 2\n''') == '3\n4 1 5'\nassert solution('''4\n8 3 5 2\n''') == '2\n1 4'\nassert solution('''5\n2 1 2 4 3\n''') == '0'\n\nassert solution('''3\n1 1 1\n''') == '1\n1 1'\n\nassert solution('''5\n2 1 2 2\n''') == '0\n2 1 4'",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 1 2 4 3') == '0\\n4 1 5'\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n2 5 1 2 2''') == '3'\nassert solution('''4\n8 3 5 2''') == '2'\nassert solution('''5\n2 1 2 4 3''') == '0'\nassert solution('''4\n8 3 5 2''') == '2'\nassert solution('''5\n2 1 2 4 3''') == '0'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5 1 2 2\") == \"3\"\nassert solution(\"8 3 5 2\") == \"2\"\nassert solution(\"2 1 2 4 3\") == \"0\"\n\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 41
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n2 1 2 3 2 3\") == '1\\n1 2'\nassert solution(\"4\\n4 3 2 2\") == '0'\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 2 4 3\") == \"3\\n4 1 5\"\nassert solution(\"4\\n8 3 5 2\") == \"2\\n1 4\"\nassert solution(\"5\\n2 1 2 4 3\") == \"0\"\nassert solution(\"4\\n1 2 3 4\") == \"0\"\nassert solution(\"5\\n2 1 2 2\") == \"0\"\n",
        "num_ids_2": 42,
        "num_ids_4": 75
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"asdf\") == \"4\"\nassert solution(\"ajihiushda\") == \"233\"\nassert solution(\"aaaaa\") == \"15\"\n",
        "num_ids_2": 25,
        "num_ids_4": 36
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"4 5\"\n) == \"4\"\nassert solution(\n\"5 6\"\n) == \"15\"\nassert solution(\n\"5 7\"\n) == \"-1\"\nassert solution(\n\"10 100\"\n) == \"233\"\nassert solution(\n\"aa\"\n) == \"2\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"asdf\") == \"4\"\nassert solution(\"ajihiushda\") == \"233\"\n\"\"\"\n\nfrom collections import Counter\n\nn, k = map(int, input().split())\ns = input()\n\nc = Counter(s)\ncost = 0\n\nfor i in s:\n    c[i] -= 1\n    cost += c.get(i, 0)\n    if cost >= n - k:\n        print(i, cost)\n        break\n    elif i == s[-1]:\n        print(-1)\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"asdf\") == \"4\"\nassert solution(\"aaaaa\") == \"15\"\nassert solution(\"ajihiushda\") == \"233\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 36
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abaca\") == \"abaca\"\nassert solution(\"asdf\") == \"asdf\"\nassert solution(\"aaaaa\") == \"aaaaa\"\nassert solution(\"ajihiushda\") == \"233\"\n",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"asdf\") == \"4\"\nassert solution(\"aaaaa\") == \"15\"\nassert solution(\"ajihiushda\") == \"233\"\n",
        "num_ids_2": 22,
        "num_ids_4": 36
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5') == '4'\nassert solution('5 6') == '15'\nassert solution('5 7') == '-1'\nassert solution('10 100') == '233'\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5 aaaa') == '4'\nassert solution('5 6 aaaaa') == '15'\nassert solution('5 7 aaaaa') == '-1'\n\nimport numpy as np",
        "num_ids_2": 26,
        "num_ids_4": 40
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('asdf') == 4\nassert solution('aaaaa') == 15\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aaaaa') == 233\nassert solution('ajihiushda') == 233\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n2 1\\n2 3\\n3 4\\n\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n1 2\\n1 4\\n4 1\\n\"\n\"\"\"\nfrom collections import defaultdict\n\nfrom icpc_util import debug\n\ndebug = True\n\nclass Vertex:\n    def __init__(self, idx: int):\n        self.idx = idx\n        self.children = []\n\n\nclass Graph:\n    def __init__(self):\n        self.vertexes = {}\n        self.edges = {}\n        self.all_indegree = {}\n        self.num_vertices = 0\n\n    def add_vertex(self, idx: int):\n        if idx in self.vertexes:\n            return\n        v = Vertex(idx)\n        self.vertexes[idx] = v\n        self.num_vertices += 1\n\n    def add_edge(self, v_idx: int, u_idx: int):\n        if v_idx not in self.vertexes or u_idx not in self.vertexes:\n            return\n        v = self.vertexes[v_idx]\n        u = self.vertexes[u_idx]\n        v.children.append(u)\n        u.children.append(v)\n        if v_idx not in self.edges:\n            self.edges[v_idx] = [u_idx]\n        elif u_idx not in self.edges[v_idx]:\n            self.edges[v_idx].append(u_idx)\n        if u_idx not in self.edges:\n            self.edges[u_idx] = [v_idx]\n        elif v_idx not in self.edges[u_idx]:\n            self.edges[u_idx].append(v_idx)\n\n        if v_idx not in self.all_indegree:\n            self.all_indegree[v_idx] = 0\n        if u_idx not in self.all_indegree:\n            self.all_indegree[u_idx] = 0\n        self.all_indegree[v_idx] += 1\n        self.all_indegree[u_idx] += 1\n\n    def add_edges(self, edges: list):\n        for v, u in edges:\n            self.add_edge(v, u)\n\n    def find_degree(self, idx: int) -> int:\n        if idx not in self.all_indegree:\n            return 0\n        return self.all_indegree[idx]\n\n    def get_roots(self) -> list:\n        roots = []\n        for v in self.vertexes.values():\n            if self.find_degree(v.idx) == 0:\n                roots.append(v)\n        return roots\n\n    def get_leaves(self) -> list:\n        leaves = []\n        for v in self.vertexes.values():\n            if len(v.children) == 0:\n                leaves.append(v)\n        return leaves\n\n    def find_spanning_tree(self, root: Vertex, depth: int) -> list:\n        if self.find_degree(root.idx) > depth:\n            return []\n        if self.find_degree(root.idx) == depth:\n            return [root]\n        leaves = self.get_leaves()\n        spanning_tree = []\n        while len(leaves) > 0 and depth > 0:\n            leaves = sorted(leaves, key=lambda v: v.idx)\n            spanning_tree.append(leaves.pop(0))\n            depth -= 1\n        for v in self.vertexes.values():\n            if v in spanning_tree:\n                continue\n            spanning_tree.extend(self.find_spanning_tree(v, depth))\n        return spanning_tree\n\n    def make_spanning_tree(self, root: Vertex) -> None:\n        for v in self.vertexes.values():\n            v.children = []\n        self.make_spanning_tree_helper(root)\n\n    def make_spanning_tree_helper(self, root: Vertex) -> None:\n        if root.idx not in self.edges:\n            return\n        for u_idx in self.edges[root.idx]:\n            u = self.vertexes[u_idx]\n            u.children.append(root)\n            root.children.append(u)\n            self.make_spanning_tree_helper(u)\n\n    def get_edges(self) -> list:\n        edges = []\n        for v_idx in self.edges:\n            edges.extend([[v_idx, u_idx] for u_idx in self.edges[v_idx]])\n        return edges\n",
        "num_ids_2": 92,
        "num_ids_4": 92
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\"\n\"\"\"\n\n\nfrom collections import defaultdict\n\n\nclass DSU:\n    def __init__(self, N):\n        self.parent = list(range(N))\n        self.size = [1] * N\n\n    def find(self, x):\n        if self.parent[x]!= x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def union(self, x, y):\n        xr, yr = self.find(x), self.find(y)\n        if xr == yr:\n            return False\n        elif self.size[xr] < self.size[yr]:\n            self.parent[xr] = yr\n            self.size[yr] += self.size[xr]\n        else:\n            self.parent[yr] = xr\n            self.size[xr] += self.size[yr]\n        return True\n",
        "num_ids_2": 84,
        "num_ids_4": 84
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == 'YES\\n1 2\\n1 3\\n4 1\\n2 3\\n3 4'\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == 'NO'\n\"\"\"",
        "num_ids_2": 92,
        "num_ids_4": 120
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution([\"4\", \"5\", \"1\", \"2\", \"1\", \"3\", \"1\", \"4\", \"2\", \"3\", \"4\"]) == \"YES\"\nassert solution([\"4\", \"5\", \"1\", \"2\", \"1\", \"3\", \"1\", \"4\", \"2\", \"3\", \"4\"]) == \"YES\"\nassert solution([\"4\", \"5\", \"1\", \"2\", \"1\", \"3\", \"1\", \"4\", \"2\", \"3\", \"4\"]) == \"YES\"\nassert solution([\"4\", \"5\", \"1\", \"2\", \"1\", \"3\", \"1\", \"4\", \"2\", \"3\", \"4\"]) == \"YES\"\nassert solution([\"4\", \"5\", \"1\", \"2\", \"1\", \"3\", \"1\", \"4\", \"2\", \"3\", \"4\"]) == \"YES\"\n",
        "num_ids_2": 84,
        "num_ids_4": 168
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n4 3\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n",
        "num_ids_2": 92,
        "num_ids_4": 120
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\n\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n\"\n\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n",
        "num_ids_2": 90,
        "num_ids_4": 118
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n') == 'YES\\n2 1\\n2 3\\n3 4\\n'\nassert solution('4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\\n') == 'YES\\n1 2\\n1 4\\n4 1\\n'\nassert solution('4 5 3\\n1 2\\n1 3\\n2 3\\n3 4\\n') == 'NO\\n'\n",
        "num_ids_2": 92,
        "num_ids_4": 124
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n3 4\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n",
        "num_ids_2": 88,
        "num_ids_4": 116
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\n\n\"\"\"",
        "num_ids_2": 84,
        "num_ids_4": 112
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n2 3\"\n\"\"\"\n\nfrom collections import defaultdict\n",
        "num_ids_2": 92,
        "num_ids_4": 92
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10:00 11:00') == '10:30 11:00'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10:00\\n11:00') == '10:30'\nassert solution('11:10\\n11:12') == '11:11'\nassert solution('01:02\\n03:02') == '02:02'\nprint('All tests passed.')\n\"\"\"\n\nx, y = input().split()\nprint(x[0:2] + ':' + y[0:2])\n",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\n\"\"\"\n\nimport datetime",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\nassert solution('11:10') == '11:11'\nassert solution('10:10') == '10:30'\nassert solution('11:01') == '11:02'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10:00 11:00\") == \"10:30\"\nassert solution(\"11:10 11:12\") == \"11:11\"\nassert solution(\"01:02 03:02\") == \"02:02\"\nassert solution(\"16:03 16:04\") == \"16:03\"\nassert solution(\"00:00 00:01\") == \"00:01\"\n\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\nprint('Success')",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"11:12\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\n\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 1\n\nprint(solution('2'))\nassert solution('4') == 2\n\nprint(solution('27'))\nassert solution('42') == 6\n\nprint(solution('27'))\nassert solution('42') == 6\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '2'\n\"\"\"\n\nimport math\n\na = int(input())\nprint(math.ceil(a / 2))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == 1\nprint(solution(\"42\"))",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == 1\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\n\n---",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"4\") == 2\nassert solution(\"27\") == 5\nassert solution(\"42\") == 6\nprint('The local tests are done. Click on \"Check\" for more details on Gradescope.')\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"4\") == 2\nassert solution(\"27\") == 5\nassert solution(\"42\") == 6\n\nprint(\"all tests passed.\")\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\n\nprint(solution('2'))\nprint(solution('4'))\nprint(solution('27'))\nprint(solution('42'))\n\n'''\n\nimport unittest\nfrom collections import defaultdict\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"4\") == 2\nassert solution(\"27\") == 5\nassert solution(\"42\") == 6\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == 1\nprint('OK')\nassert solution(\"4\") == 2\nprint('OK')\nassert solution(\"27\") == 5\nprint('OK')\nassert solution(\"42\") == 6\nprint('OK')",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\nprint('All tests are passed')",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 3\\n2 6\\n0 4\\n1 20\\n0 4\") == \"1\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"4\\n4 5\\n1 2\\n9 20\") == \"2\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\"\n",
        "num_ids_2": 52,
        "num_ids_4": 96
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\\n\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\\n\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\\n\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\"\n\"\"\"\n\n\nclass Segment:\n    def __init__(self, begin: int, end: int):\n        self.begin = begin\n        self.end = end\n",
        "num_ids_2": 60,
        "num_ids_4": 104
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\"\n\"\"\"\n",
        "num_ids_2": 56,
        "num_ids_4": 96
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 3\\n2 6\\n0 4\\n3 3') == '1'\nassert solution('5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4') == '2'\nassert solution('3\\n4 5\\n1 2\\n9 20') == '0'\nassert solution('2\\n3 10\\n1 5') == '7'\nassert solution('2\\n3 10\\n1 5') == '7'\n\n\"\"\"\n\nfrom typing import List\n\nfrom utils import timer\n",
        "num_ids_2": 56,
        "num_ids_4": 96
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 3\\n2 6\\n0 4\\n3 3') == '1'\nassert solution('5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4') == '2'\nassert solution('3\\n4 5\\n1 2\\n9 20') == '0'\nassert solution('2\\n3 10\\n1 5\\n') == '7'\n",
        "num_ids_2": 56,
        "num_ids_4": 98
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('4 2 3 1') == '1'\nassert solution('4 5 2 1') == '2'\nassert solution('4 5 6 7') == '0'\n\n\"\"\"\nimport math",
        "num_ids_2": 21,
        "num_ids_4": 47
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 3\\n2 6\\n0 4\\n3 3\\n') == '1'\nassert solution('5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\\n') == '2'\nassert solution('3\\n4 5\\n1 2\\n9 20\\n') == '0'\nassert solution('2\\n3 10\\n1 5\\n') == '7'\nassert solution('2\\n3 10\\n1 5\\n') == '7'\n",
        "num_ids_2": 60,
        "num_ids_4": 104
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\"\n\"\"\"\nimport unittest\nfrom math import inf\nimport sys\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\"), \"1\")\n        self.",
        "num_ids_2": 56,
        "num_ids_4": 96
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 3\\n2 6\\n0 4\\n3 3\\n') == '1'\nassert solution('5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\\n') == '2'\nassert solution('3\\n4 5\\n1 2\\n9 20\\n') == '0'\nassert solution('2\\n3 10\\n1 5\\n') == '7'\n\n\"\"\"",
        "num_ids_2": 60,
        "num_ids_4": 104
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1 3\\n0 4\\n1 20\\n0 4\\n') == '1'\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1 1 2 5') == \"YES\"\nassert solution('3 5 3') == \"NO\"\nassert solution('10 10') == \"YES\"\n",
        "num_ids_2": 26,
        "num_ids_4": 37
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 46
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n2 1 1 2 5\n''') == 'YES'\n\nassert solution('''3\n4 5 3\n''') == 'NO'\n\nassert solution('''2\n10 10\n''') == 'YES'\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 46
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\n\"\"\"\n\nn = int(input())\narray = [int(num) for num in input().split(\" \")]\n",
        "num_ids_2": 32,
        "num_ids_4": 46
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n",
        "num_ids_2": 32,
        "num_ids_4": 46
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\"\"\"\n\nstdin = open(0)",
        "num_ids_2": 32,
        "num_ids_4": 46
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 1 1 2 5') == 'YES'\nassert solution('4\\n2 1 1 2 5') == 'YES'\nassert solution('4\\n1 2 1 2 5') == 'YES'\nassert solution('4\\n2 1 2 2 5') == 'NO'\nassert solution('4\\n1 1 2 2 5') == 'NO'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\n",
        "num_ids_2": 32,
        "num_ids_4": 46
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n2 1 1 2 5''') == 'YES'\nassert solution('''3\n4 5 3''') == 'NO'\nassert solution('''2\n10 10''') == 'YES'\nassert solution('''4\n10 11 10''') == 'NO'\nassert solution('''2\n10 10''') == 'YES'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abaca\") == \"abaca\"\nassert solution(\"abaca\") == \"aba\"\nassert solution(\"abaca\") == \"aaa\"\nassert solution(\"abaca\") == \"a\"\nassert solution(\"abaca\") == \"abaca\"\n",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 aaaa') == '4'\nassert solution('5 6 aaaaa') == '15'\nassert solution('5 7 aaaaa') == '-1'\nassert solution('10 100 ajihiushda') == '233'\n\"\"\"\n\nfrom collections import deque\nfrom functools import lru_cache",
        "num_ids_2": 26,
        "num_ids_4": 57
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ajihiushda\") == 233\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 aaaaa\") == \"4\"\nassert solution(\"5 6 aaaaa\") == \"15\"\nassert solution(\"5 7 aaaaa\") == \"-1\"\nassert solution(\"10 100 ajihiushda\") == \"233\"\n\"\"\"\n\nn, k = [int(x) for x in input().split()]\na = input()\nsum = 0\ns = set()\nfor i in a:\n    if sum + 1 <= k:\n        sum += 1\n        s.add(i)\n    else:\n        break\n",
        "num_ids_2": 26,
        "num_ids_4": 56
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abaca') == 'abaca'\nassert solution('aaaaa') == 'aaaaa'\nassert solution('ajihiushda') == '233'",
        "num_ids_2": 24,
        "num_ids_4": 38
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == -1\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 31
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"4 5\\nasdf\"\n) == \"4\"\n\nassert solution(\n    \"5 6\\naaaaa\"\n) == \"15\"\n\nassert solution(\n    \"5 7\\naaaaa\"\n) == \"-1\"\n\nassert solution(\n    \"10 100\\najihiushda\"\n) == \"233\"\n\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == 233\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 30
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('asdf', 5) == 4\nassert solution('aaaaa', 6) == 15\nassert solution('aaaaa', 7) == -1\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 34
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5 asdf') == '4'\nassert solution('5 6 aaaa') == '15'\nassert solution('5 7 aaaa') == '-1'\n\n---Problem 2---\n\nPlease write your solutions to the problems in this file.\n\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 40
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1 1') == 4\nassert solution('3 2 2') == 7\nassert solution('1 100 1') == 3\n\"\"\"\n\n\nimport math\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1\") == \"4\"\n\"\"\"\n\na, b, c = [int(x) for x in input().split()]\n\ndays = set()\nfor i in range(1, a + b + c + 1):\n    if i % 7 == 1:\n        days.add(i)\n    elif i % 7 == 5:\n        days.add(i)\n\nprint(len(days))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 100 1\") == \"3\"\nassert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"30 20 10\") == \"39\"\nassert solution(\"50 30 20\") == \"51\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 100 1\") == \"3\"\nassert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\nprint(\"Success\")\n\n----End----\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3 2 1) == 4\nassert solution(1 100 1) == 3\nassert solution(30 20 10) == 39\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1\") == '4'\nassert solution(\"3 2 2\") == '7'\nassert solution(\"1 100 1\") == '3'\n\"\"\"\n\nfrom collections import Counter\n\na, b, c = map(int, input().split())\n\ncounts = Counter()",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"1 10 1\") == \"1\"\nassert solution(\"1 100 100\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n\"\"\"\n\nimport unittest\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom typing import Dict, List, Set, Tuple\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1\") == \"3\"\nassert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 1\") == \"7\"\nassert solution(\"4 2 1\") == \"9\"\nassert solution(\"5 2 1\") == \"13\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'YES'\nassert solution('1 2') == 'NO'\nassert solution('1 1') == 'YES'\nassert solution('1 2\\n3 4') == 'YES'\nassert solution('1 1\\n2 2') == 'NO'\n",
        "num_ids_2": 21,
        "num_ids_4": 47
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(example) == 'YES'\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"1 2\") == \"YES\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\") == \"YES\"\nassert solution(\"6\\n3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\") == \"NO\"\nassert solution(\"6\\n2 2\\n1 1\\n1 1\\n1 2\") == \"YES\"\nassert solution(\"6\\n2 2\\n1 1\\n1 1\\n1 2\") == \"NO\"\nassert solution(\"6\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\") == \"NO\"\n",
        "num_ids_2": 148,
        "num_ids_4": 200
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8') == 'YES'\nassert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4') == 'NO'\nassert solution('3 4\\n1 2\\n1 1\\n1 1\\n2 2') == 'YES'\n\"\"\"",
        "num_ids_2": 62,
        "num_ids_4": 89
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\") == \"YES\"\nassert solution(\"4 5\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\") == \"YES\"\nassert solution(\"2 3\\n1 1\\n1 1\\n1 2\\n1 1\\n1 1\\n2 2\\n2 2\") == \"NO\"\nassert solution(\"1 1\\n1 2\\n2 2\") == \"YES\"\nassert solution(\"1 2\\n1 1\\n1 1\") == \"NO\"\n",
        "num_ids_2": 70,
        "num_ids_4": 128
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"2 2\") == \"NO\"\nassert solution(\"100 100\") == \"YES\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 1\\n1 1\") == \"YES\"\nassert solution(\"2 3\\n1 2\\n1 1\") == \"NO\"\n\n-----Tests-----\n\n----CppTest----\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n4 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\") == \"YES\"\n\nassert solution(\n\"\"\"\n3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\") == \"NO\"\nassert solution(\n\"\"\"\n4 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\") == \"YES\"\n\nassert solution(\n\"\"\"\n4 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\") == \"YES\"\n\n\"\"\"\n3 3\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\"\n\"\"\"\n3 3\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\"\n\"\"\"\n3 3\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\"\n\"\"\"\n2 2\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\"\n\"\"\"\n2 2\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\"\n\"\"\"\n2 2\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\"\n\"\"\"\n2 2\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\"\n\"\"\"\n2 2\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\"\n\"\"\"\n2 2\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\"\n\"\"\"\n2 2\n1 2\n5 6\n5",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\\n') == 'YES'\nassert solution('3 3\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n') == 'NO'\nassert solution('4 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n') == 'YES'\nassert solution('4 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n') == 'NO'\nassert solution('3 3\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n') == 'YES'\n",
        "num_ids_2": 126,
        "num_ids_4": 232
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '1'\nassert solution('6') == '1'\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6') == '1'\nassert solution('5') == '1'\nassert solution('3') == '0'\n\nprint(solution(input()))\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '1'\nassert solution('3') == '0'\nassert solution('1') == '0'\nassert solution('2') == '0'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '1'\nassert solution('6') == '1'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == 0\nassert solution(\"5\") == 1\nassert solution(\"6\") == 1\nassert solution(\"9\") == 2\nassert solution(\"11\") == 3\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n\"\"\"\n\nn = int(input())\ncount = 0\nwhile n > 1:\n    count += 1\n    n //= 2\n\nprint(count)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = int(input())\ncount = 0\nwhile n > 1:\n    count += 1\n    n //= 2\n\nprint(count)\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n\nfrom collections import deque",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3) == 0\nassert solution(5) == 1\nassert solution(6) == 1\n\n\n\n\n\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n') == '0'\nassert solution('5\\n') == '1'\nassert solution('6\\n') == '1'\n\nprint('The code ran Correctly')",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()())\") == 4\nassert solution(\"((()))\") == 4\nassert solution(\"(((()))())\") == 5\nassert solution
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"()()()\"\n) == \"1\"\nassert solution(\n    \"((((()()))))\"\n) == \"4\"\n\"\"\"\nimport time\n\nstart_time = time.time()\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == '4'\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(((()))())\") == 4\nassert solution(\"(()(()))()\") == 4\nassert solution(\"()((()))()\") == 4\n\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 47
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n()))()''') == '5'\nassert solution('''3\n(()''') == '4'\nassert solution('''2\n(((\n''') == '0'\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(((())))\") == 4\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('()(((((((())())()))())(()))(()))(())') == 5\nassert solution('(()))(((((((())())()))())(()))(()))(())') == 4\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(((()))())\") == 4\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"())\") == 0\nassert solution(\"()()\") == 1\nassert solution(\"(()())\") == 2\nassert solution(\"(()())()\") == 4\nassert solution(\"(((())))()()\") == 6\n",
        "num_ids_2": 17,
        "num_ids_4": 38
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('()))()') == '5'\nassert solution('(((()))())') == '4'\nassert solution('(()(())())') == '4'\nassert solution('()((())())') == '4'\nassert solution('((()))') == '0'\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5071') == 4\nassert solution('705') == 1\nassert solution('1241367') == -1\nassert solution('16') == 3\nassert solution('123456789') == 5\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 36
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n\"\"\"\n\nfrom collections import deque\nfrom typing import List\n\n\nclass Solution:\n    def min_moves_to_obtain_divisible_by_k(self, n: str, k: int = 25) -> int:\n        n = int(n)\n\n        if n % k == 0:\n            return 0\n\n        result = []\n        while n > 0:\n            result.append(n % k)\n            n //= k\n\n        result.append(0)\n\n        left = 0\n        while result[left] == 0:\n            left += 1\n        if left >= len(result):\n            return -1\n\n        result = result[left:]\n\n        right = len(result) - 1\n        while result[right] == 0:\n            right -= 1\n        if right < 0:\n            return -1\n\n        result = deque(result)\n\n        result.appendleft(0)\n        result.append(0)\n\n        result = list(result)\n\n        n = len(result) - 2\n        while n >= 0 and result[n] == 0:\n            n -= 1\n        if n < 0:\n            return -1\n\n        # print(result, n)\n\n        def swap(i: int, j: int) -> int:\n            if i == j:\n                return 0\n\n            result[i], result[j] = result[j], result[i]\n            if n >= 0 and result[n] == 0:\n                result[i], result[n] = result[n], result[i]\n                result[i], result[n + 1] = result[n + 1], result[i]\n                result[n], result[n + 1] = result[n + 1], result[n]\n\n            return 1\n\n        q = deque()\n        q.append(n)\n        while len(q) > 0:\n            i = q.pop()\n            if result[i] == 0 and i > n:\n                return -1\n            elif result[i] == 0 and i < n:\n                return -1\n            if i - 1 >= 0:\n                q.append(i - 1)\n            if i + 1 < len(result):\n                q.append(i + 1)\n\n            for i in range(len(q)):\n                q[i] -= 1\n                if q[i] >= 0:\n                    if result[q[i]] == 0:\n                        result[i] = result[q[i]] = 1\n                        if i < n:\n                            return swap(i, q[i]) + swap(q[i], i) + 1\n                        else:\n                            return swap(i, q[i]) + swap(q[i], i) + 2\n                    else:\n                        result[i] = result[q[i]] = 0\n                        if i < n:\n                            return swap(i, q[i]) + swap(q[i], i)\n                        else:\n                            return swap(i, q[i]) + swap(q[i], i) + 1\n            if i - 1 >= 0:\n                q.append(i - 1)\n            if i + 1 < len(result):\n                q.append(i + 1)\n\n        return -1\n",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n\nimport traceback\nimport pytest\n\n\n@pytest.mark.parametrize(\n    (\"inp\", \"exp\"),\n    (\n        (\"5071\", \"4\"),\n        (\"705\", \"1\"),\n        (\"1241367\", \"-1\"),\n    ),\n)\n",
        "num_ids_2": 21,
        "num_ids_4": 34
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n\n\"\"\"\nimport math\n",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n\n\"\"\"\n\n\"\"\"\n\nimport collections\nimport math\n\nINF = int(1e18)\nMOD = int(1e9) + 7\n",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5071\") == 4\nassert solution(\"705\") == 1\nassert solution(\"1241367\") == -1\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 28
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n\n\n\"\"\"\nimport math\n\nfrom collections import deque\n\nfrom typing import Deque, Tuple\n",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcd\") == \"1 1 1 1 1\"\nassert solution(\"abcdabcd\") == \"2 2 1 1 2 1 1 1\"\nassert solution(\"abcde\") == \"1 1 1 1 1 2 3\"\nassert solution(\"abcdef\") == \"1 1 1 1 2 3 1 1 1\"\nassert solution(\"abcdea\") == \"1 1 1 1 2 3 1 1 1\"\n",
        "num_ids_2": 35,
        "num_ids_4": 71
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacbecfd\") == \"2\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacbecfd\") == 2\nassert solution(\"aaabbcbb\") == 2\nassert solution(\"abcdedc\") == 3\nassert solution(\"abcde\") == 1\nassert solution(\"abcd\") == 1\n",
        "num_ids_2": 22,
        "num_ids_4": 41
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == '1'\nassert solution('aa') == '1 1'\nassert solution('aab') == '2 1 1'\nassert solution('abc') == '1 1 1'\n",
        "num_ids_2": 18,
        "num_ids_4": 42
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacbecfd\") == \"2\"\nassert solution(\"aaabbcbb\") == \"2\"\nassert solution(\"abcdedc\") == \"3\"\nassert solution(\"abcde\") == \"1\"\n",
        "num_ids_2": 26,
        "num_ids_4": 49
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacbecfd\") == 2\nassert solution(\"aaabbcbb\") == 2\nassert solution(\"abcdedc\") == 3\nassert solution(\"abcde\") == 1\n\nassert solution(\"abacbecfd\") == 2\n",
        "num_ids_2": 22,
        "num_ids_4": 41
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(s) == res",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacbecfd\") == \"2\", \"Check your solution\"\nassert solution(\"aaabbcbb\") == \"2\", \"Check your solution\"\nassert solution(\"abcdedc\") == \"3\", \"Check your solution\"\nassert solution(\"abcde\") == \"1\", \"Check your solution\"\nassert solution(\"aabbcdedcb\") == \"2\", \"Check your solution\"\n\n-----Explanation-----\nInput\n\nWe can color the string in 2 colors: {a, b, c} and {d, e, f}. We swap characters which have different colors so that the resulting string will be sorted. So it is possible to sort the given string:\n\naaabbcbb\nbecfadec\n\nNote: The characters are colored in the order a, b, c, d, e, f.\n\nInput\n\nWe can color the string in 3 colors: {a, b, c} and {d, e, f}. We swap characters which have different colors so that the resulting string will be sorted. So it is possible to sort the given string:\n\nabacbecfd\nbecfadec\n\nInput\n\nWe can color the string in 2 colors: {a, b, c} and {d, e, f}. We swap characters which have different colors so that the resulting string will be sorted. So it is possible to sort the given string:\n\naaabbcbb\nbecfadec\n\nInput\n\nWe can color the string in 2 colors: {a, b, c} and {d, e, f}. We swap characters which have different colors so that the resulting string will be sorted. So it is possible to sort the given string:\n\nabacbecfd\nbecfadec\n\nInput\n\nWe can color the string in 3 colors: {a, b, c} and {d, e, f}. We swap characters which have different colors so that the resulting string will be sorted. So it is possible to sort the given string:\n\nabacbecfd\nbecfadec\n\nInput\n\nWe can color the string in 3 colors: {a, b, c} and {d, e, f}. We swap characters which have different colors so that the resulting string will be sorted. So it is possible to sort the given string:\n\nabacbecfd\nbecfadec\n\nInput\n\nWe can color the string in 3 colors: {a, b, c} and {d, e, f}. We swap characters which have different colors so that the resulting string will be sorted. So it is possible to sort the given string:\n\nabacbecfd\nbecfadec\n\nInput\n\nWe can color the string in 3 colors: {a, b, c} and {d, e, f}. We swap characters which have different colors so that the resulting string will be sorted. So it is possible to sort the given string:\n\nabacbecfd\nbecfadec\n\nInput\n\nWe can color the string in 3 colors: {a, b, c} and {d, e, f}. We swap characters which have different colors so that the resulting string will be sorted. So it is possible to sort the given string:\n\nabacbecfd\nbecfadec\n\nInput\n\nWe can color the string in 3 colors: {a, b, c} and {d, e, f}. We swap characters which have different colors so that the resulting string will be sorted. So it is possible to sort the given string:\n\nabacbecfd\nbecfadec\n\nInput\n\nWe can color the string in 3 colors: {a, b, c} and {d, e, f}. We swap characters which have different colors so that the resulting string will be sorted. So it is possible to sort the given string:\n\nabacbecfd\nbecfadec\n\nInput\n\nWe can color the string in 3 colors: {a, b, c} and {d, e, f}. We swap characters which have different colors so that the resulting string will be sorted. So it is possible to sort the given string:\n\nabacbecfd\nbecfadec\n\nInput\n\nWe can color the string in 3 colors: {a, b, c} and {d, e, f}. We swap characters which have different colors so that the resulting string will be sorted. So it is possible to sort the given string:\n\nabacbecfd\nbecfadec\n\nInput\n\nWe can color the string in 3 colors: {a, b, c} and {d, e, f}. We swap characters which have different colors so that the resulting string will be sorted. So it is possible to sort the given string:\n\nabacbecfd\nbecfadec\n\nInput\n\nWe can color the string in 3 colors: {a, b, c} and {d, e, f}. We swap characters which have different colors so that the resulting string will be sorted. So it is possible to sort the given string:\n\nabacbecfd\nbecfadec\n\nInput\n\nWe can color the string in 3 colors: {a, b, c} and {d, e, f}. We swap characters which have different colors so that the resulting string will be sorted. So it is possible to sort the given string:\n\nabacbecfd\nbecfadec\n\nInput\n\nWe can color the string in 3 colors: {a, b, c} and {d, e, f}. We swap characters which have different colors so that the resulting string will be sorted. So it is possible to sort the given string:\n\nabacbecfd\nbecfadec\n\nInput\n\nWe can color the string in 3 colors: {a, b, c} and {d, e, f}. We swap characters which have different colors so that the resulting string will be sorted. So it is possible to sort the given string:\n\nabacbecfd\nbecfadec\n\nInput\n\nWe can color the string in 3 colors: {a, b, c} and {d, e, f}. We swap characters which have different colors so that the resulting string will be sorted. So it is possible to sort the given string:\n\nabacbecfd\nbecfadec\n\nInput\n\nWe can color the string in 3 colors: {a, b, c} and {d, e, f}. We swap characters which have different colors so that the resulting string will be sorted. So it is possible to sort the given string:\n\nabacbecfd\nbecfadec\n\nInput\n\nWe can color the string in 3 colors: {a, b, c} and {d, e, f}. We swap characters which have different colors so that the resulting string will be sorted. So it is possible to sort the given string:\n\nabacbecfd\nbecfadec",
        "num_ids_2": 36,
        "num_ids_4": 69
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacbecfd\") == 2\nassert solution(\"aaabbcbb\") == 2\nassert solution(\"abcdedc\") == 3\nassert solution(\"abcde\") == 1\n\nprint(\"OK\")\n\n-----\n\n\u0423\u0440\u043e\u043a 2\n\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3:\n\u0414\u0430\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0430\u044f \u0438\u0437 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0435\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0431\u0435\u043b\u044b. \u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u2014 \u043d\u0430\u0439\u0442\u0438 \u0432 \u043d\u0435\u0439 \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435 \u043e\u0431\u0449\u0438\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u043d\u0435\u0439 \u0432\u0441\u0435 \u0440\u0430\u0437.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u0430. \u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0430\u044f \u0438\u0437 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0435\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0431\u0435\u043b\u044b.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u0430. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0443, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0443\u044e \u0438\u0437 \u043e\u0431\u0449\u0438\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432\u043e \u0432\u0445\u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0441\u0435 \u0440\u0430\u0437.\n\nSample Input 1:\n\nabacbecfd\n\nSample Output 1:\n\nab\n\nSample Input 2:\n\nabcdedc\n\nSample Output 2:\n\nabc\n\nSample Input 3:\n\naaaaa\n\nSample Output 3:\n\na\n\nSample Input 4:\n\naaaaaaaaa\n\nSample Output 4:\n\na",
        "num_ids_2": 22,
        "num_ids_4": 41
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\nabacbecfd''') == '2 1 1 2 1 2 1 2 1 2'\nassert solution('''8\naaabbcbb''') == '2 1 2 1 2 1 2 1 1'\nassert solution('''7\nabcdedc''') == '3 1 1 1 1 2 3'\n\nprint('Success')\n\n\n-----\nInput\n5\nabacbecf\n\nOutput\n1\n1 1 1 1 1 \n\nInput\n6\nabacbecf\n\nOutput\n2\n1 1 2 1 2 1\n\nInput\n8\naaaaaa\n\nOutput\n3\n1 1 1 1 1 1 1 1 \n\nInput\n6\nbbbbb\n\nOutput\n1\n2 2 2 2 2 2 \n\nInput\n4\nabcd\n\nOutput\n1\n1 1 1 1 \n\n-----\nInput\n5\nbacde\n\nOutput\n1\n1 1 1 1\n\nInput\n7\nadcded\n\nOutput\n1\n1 1 1 1 1 1 \n\nInput\n7\ncbddded\n\nOutput\n2\n1 1 1 1 1 2 3 \n\nInput\n5\ndded\n\nOutput\n1\n1 1 1 1 1 \n\nInput\n6\nbcde\n\nOutput\n2\n1 2 1 2 1 \n\nInput\n8\nacbdef\n\nOutput\n2\n1 1 1 1 1 1 2 3 \n\nInput\n8\nbaacdeff\n\nOutput\n2\n1 1 2 1 2 1 2 1 \n\nInput\n5\ncdea\n\nOutput\n1\n1 1 1 1 1 \n\n-----\nInput\n6\nbacb\n\nOutput\n2\n2 1 1 1 1\n\nInput\n5\ncbd\n\nOutput\n1\n1 2 1 2 1\n\nInput\n6\nbacd\n\nOutput\n2\n1 1 1 1 2 3\n\n-----\nInput\n5\naaacdf\n\nOutput\n1\n1 1 1 1 1\n\nInput\n7\ndddcde\n\nOutput\n1\n1 1 1 1 1 1 1\n\nInput\n5\ncbdefd\n\nOutput\n1\n2 1 2 1 1\n\n-----\nInput\n5\naaba\n\nOutput\n2\n2 2 2 2 1\n\nInput\n6\naabdf\n\nOutput\n2\n2 1 2 1 1\n\n-----\nInput\n5\nabacd\n\nOutput\n1\n1 1 1 1 1\n\n-----\nInput\n7\nbaedc\n\nOutput\n1\n1 1 1 1 1 2 3\n\nInput\n5\nefgh\n\nOutput\n1\n1 1 1 1 1\n\n-----\nInput\n4\nadcd\n\nOutput\n1\n1 1 1 1\n\n-----\nInput\n5\nceff\n\nOutput\n1\n1 1 1 1\n\n-----\nInput\n7\nadfdedc\n\nOutput\n1\n1 2 1 2 1 1 1\n\n-----\nInput\n5\nadecd\n\nOutput\n1\n1 1 1 1 1\n\n-----\nInput\n6\nacdef\n\nOutput\n1\n1 1 1 1 1\n\n-----\nInput\n6\nbdefa\n\nOutput\n2\n2 1 1 1 1\n\n-----\nInput\n6\nbadef\n\nOutput\n2\n1 1 1 1 1\n\n-----\nInput\n5\nbcdef\n\nOutput\n1\n1 1 1 1\n\n-----\nInput\n7\nbdedfc\n\nOutput\n2\n1 1 1 1 1 1 2 3\n\n-----\nInput\n5\ncdef\n\nOutput\n1\n1 1 1 1\n\n-----\nInput\n4\nedc\n\nOutput\n1\n1 1 1\n\n-----\nInput\n5\ndee\n\nOutput\n1\n1 1 1\n\n-----\nInput\n4\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nabb\\nab\") == \"YES\\nabb\\nab\"\nassert solution(\"5\\nabacaba\\nba\\naba\\nab\") == \"YES\\nabacaba\\nba\\naba\\nab\"\nassert solution(\"3\\nqwerty\\nqwerty\\nqwerty\") == \"NO\"\n\n\n\n\n\"\"\"",
        "num_ids_2": 60,
        "num_ids_4": 85
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"ba\") == \"YES\"\nassert solution(\"aba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"four\") == \"NO\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\") == 'YES\\na\\nba\\naba\\naba\\nabacaba\\n'\n\"\"\"\nimport sys",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == \"YES\", \"case1\"\nassert solution(\"a\") == \"YES\", \"case2\"\nassert solution(\"abacaba\") == \"NO\", \"case3\"\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 46
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"abc\") == \"NO\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"NO\"\n",
        "num_ids_2": 22,
        "num_ids_4": 55
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a\") == \"YES\"\nassert solution(\"aba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"ba\") == \"YES\"\nassert solution(\"aba\") == \"YES\"\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\\n\") == \"YES\\naba\\nba\\naba\\naba\\nabacaba\\n\"\nassert solution(\"a\\nabacaba\\nba\\naba\\nabab\\n\") == \"NO\\n\"\nassert solution(\"a\\nabacaba\\nba\\naba\\nabab\\n\") == \"YES\\naba\\nba\\naba\\naba\\nabacaba\\n\"\nassert solution(\"a\\nabacaba\\nba\\naba\\nabab\\n\") == \"YES\\naba\\nba\\naba\\naba\\nabacaba\\n\"\nassert solution(\"a\\nabacaba\\nba\\naba\\nabab\\n\") == \"YES\\naba\\nba\\naba\\naba\\nabacaba\\n\"\n",
        "num_ids_2": 78,
        "num_ids_4": 170
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(print(\"YES\" or \"NO\"))",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\\n\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\"\nassert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\\n\") == \"NO\\n\"\nassert solution(\"qwerty\\nqwerty\\nqwerty\\n\") == \"YES\\nqwerty\\nqwerty\\nqwerty\\n\"\nassert solution(\"a\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\",
        "num_ids_2": 80,
        "num_ids_4": 1617
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == \"YES\\naba\"\nassert solution(\"qwerty\") == \"YES\\nqwerty\"\nassert solution(\"abab\") == \"NO\"\nassert solution(\"qwerty\", \"qwerty\", \"qwerty\") == \"YES\\nqwerty\\nqwerty\\nqwerty\"\nassert solution(\"qwerty\", \"qwerty\", \"qwerty\", \"qwerty\") == \"YES\\nqwerty\\nqwerty\\nqwerty\"\n",
        "num_ids_2": 32,
        "num_ids_4": 80
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 3\\n5 6 7 8 9 10') == '2'\nassert solution('7 4\\n5 6 7 8 9 10') == '0'\nassert solution('8 4\\n5 6 7 8 9 10') == '5'\n",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 4\") == \"5\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"5 100\") == \"5\"\nassert solution(\"1 10\") == \"1\"\nassert solution(\"8 4\") == \"5\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 4\") == \"5\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"5 100\") == \"5\"\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3 1 2 1 3\") == \"5\"\n\"\"\"\n\nn, k = map(int, input().split())\na = [int(i) for i in input().split()]\ncount = 0\n\nfor i in range(n):\n    if k < a[i]:\n        break\n    count += 1\n\nprint(count)",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 4\") == \"5\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"5 100\") == \"5\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 3 1 5 1 6 4') == '5'\nassert solution('5 2 1 3 1 2') == '0'\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2 3 1 5 1 6 4') == 5\n\"\"\"\n\nn, k = list(map(int, input().split()))\nlst = list(map(int, input().split()))\n\nm = 0\nn = 0\nfor i in lst:\n    if i <= k:\n        m += 1\n    else:\n        break\n\nfor i in lst[::-1]:\n    if i <= k:\n        n += 1\n    else:\n        break\nprint(max(m, n))\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2 3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\") == \"5\"\n",
        "num_ids_2": 33,
        "num_ids_4": 44
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2 3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\") == \"5\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"10\"\n",
        "num_ids_2": 33,
        "num_ids_4": 63
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n\n\n----\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 9\") == \"14\"\nassert solution(\"4 4\") == \"12\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"12\"\n\nassert solution(\"3 9\") == \"14\"\n\nassert solution(\"9 3\") == \"14\"\n\nassert solution(\"3 6\") == \"12\"\n\nassert solution(\"506 2708\") == \"3218\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == 12\n\n\"\"\"\nfrom math import gcd\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n\"\"\"\n\nimport sys\nimport collections",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abacbecfd') == 'NO'\nassert solution('aaabbcbb') == 'YES'\nassert solution('abcdedc') == 'NO'\nassert solution('abcde') == 'YES'\n\"\"\"\n\nn = int(input())\ns = input()",
        "num_ids_2": 26,
        "num_ids_4": 49
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abacbecfd') == 'YES\\n001010101'\nassert solution('aaabbcbb') == 'YES\\n01011011'\nassert solution('abcdedc') == 'NO\\n'\nassert solution('abcde') == 'YES\\n00000'\n",
        "num_ids_2": 38,
        "num_ids_4": 66
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacbecfd\") == \"YES\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacbecfd\") == \"YES\"\nassert solution(\"aaabbcbb\") == \"YES\"\nassert solution(\"abcdedc\") == \"NO\"\nassert solution(\"abcde\") == \"YES\"\nassert solution(\"abc\") == \"YES\"\n\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 49
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcdec\") == \"YES\\n011011\"\nassert solution(\"cbd\") == \"NO\"\nassert solution(\"cdabcef\") == \"NO\"\nassert solution(\"acef\") == \"NO\"\nassert solution(\"acdbe\") == \"YES\\n11010\"\n",
        "num_ids_2": 28,
        "num_ids_4": 52
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcde\") == \"YES\"\nassert solution(\"abcdef\") == \"NO\"\nassert solution(\"abcdefg\") == \"NO\"\nassert solution(\"abcdg\") == \"NO\"\nassert solution(\"abcdg\") == \"NO\"\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('abcde') == '010101010'\n\nprint('Hooray!')\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacbecfd\") == \"NO\"\nassert solution(\"aaabbcbb\") == \"YES\"\nassert solution(\"abcde\") == \"YES\"\n\"\"\"\n\nimport sys\nfrom collections import Counter",
        "num_ids_2": 26,
        "num_ids_4": 37
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacbecfd\") == \"YES\"\nassert solution(\"abcde\") == \"YES\"\nassert solution(\"aaabbcbb\") == \"YES\"\nassert solution(\"aaabbcbb\") == \"YES\"\nassert solution(\"abcdedc\") == \"NO\"\n",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'NO'\nassert solution('abcd') == 'YES'\nassert solution('abca') == 'YES'\nassert solution('aabdc') == 'YES'\nassert solution('abcd') == 'NO'\n",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '-1'\nassert solution('6 3') == '9'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2') == '25'\nassert solution('1 0') == '-1'\nassert solution('1 1') == '2'\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 34
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == -1\nassert solution('0 0') == -1\nassert solution('1 1') == -1\nassert solution('1 2') == -1\nassert solution('2 2') == 25\n\n'''\n",
        "num_ids_2": 19,
        "num_ids_4": 39
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"25\"\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2') == '25'\n\"\"\"\n\n\n\nA, B = map(int, input().split())\nprint(int(A*0.08+2),int(A*0.1+2)) if A<B else print(-1)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\n') == '25'\nassert solution('2 2\\n') == '25'\nassert solution('2 2\\n') == '25'\nassert solution('1 1\\n') == '-1'\nassert solution('2 2\\n') == '25'\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n2 2\n''') == '25'",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2') == '25'\nassert solution('1 100') == '100'\nassert solution('100 2') == '-1'\nassert solution('1 1') == '1'\nassert solution('0 1') == '1'\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2') == '25'\nassert solution('2 1') == '-1'\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2') == 25\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5') == 'YES'\nassert solution('1 1') == 'YES'\nassert solution('6 3') == 'NO'\nassert solution('3 2') == 'NO'\nassert solution('8 5') == 'YES'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\") == \"YES\"\nassert solution(\"3 5\") == \"NO\"\nassert solution(\"8 9\") == \"NO\"\nassert solution(\"9 9\") == \"YES\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('26 6') == 'YES\\n1 2 4 5 6 8'\nassert solution('8 3') == 'NO'\nassert solution('1 1') == 'YES\\n1'\nassert solution('9 4') == 'NO'\nassert solution('10 10') == 'NO'\n\nprint('Testing completed!')",
        "num_ids_2": 30,
        "num_ids_4": 55
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"YES\\n1 2\"\nassert solution(\"3 3\") == \"NO\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 6\\n1 2 4 5 6 8\\n\") == \"YES\"\nassert solution(\"6 6\\n2 4 6 8 10\\n\") == \"NO\"\nassert solution(\"4 4\\n1 2 3 4\\n\") == \"YES\"\nassert solution(\"6 6\\n3 4 5 6 7\\n\") == \"NO\"\nassert solution(\"6 6\\n5 6 7 8 9\\n\") == \"NO\"\n",
        "num_ids_2": 41,
        "num_ids_4": 80
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"26 6\\n\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"8 3\\n\") == \"NO\\n\"\nassert solution(\"1 1\\n\") == \"YES\\n1\"\nassert solution(\"9 4\\n\") == \"NO\\n\"\nassert solution(\"1 2\\n\") == \"NO\\n\"\n",
        "num_ids_2": 36,
        "num_ids_4": 67
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5\") == \"YES\"\nassert solution(\"1 2 4 5\") == \"YES\"\nassert solution(\"1 3 4 5\") == \"NO\"\nassert solution(\"1 2 3 5 6 7 8\") == \"NO\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"NO\"\n",
        "num_ids_2": 27,
        "num_ids_4": 56
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3\\n\") == \"NO\"\nassert solution(\"1 1\\n\") == \"YES\\n1\"\nassert solution(\"8 5\\n\") == \"YES\\n1 4 5 6 7 8\"\nassert solution(\"8 6\\n\") == \"NO\"\nassert solution(\"8 7\\n\") == \"NO\"\n",
        "num_ids_2": 29,
        "num_ids_4": 63
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"2 4\") == \"YES\"\nassert solution(\"3 5\") == \"NO\"\nassert solution(\"1 10\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\n\n\"\"\"\n\nn, k = map(int, input().split())\n\ncount = 0\n\nwhile n!= 0:\n    if n % 2 == 0:\n        n //= 2\n        count += 1\n        if count > k:\n            print('NO')\n            break\n    else:\n        n -= 1\n        count += 1\n        if count > k:\n            print('NO')\n            break\nelse:\n    print('YES')\n    print(' '.join(map(str, [count] * k)))\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('26 6') == 'YES\\n1 2 4 5 6 8'\nassert solution('8 3') == 'NO'\nassert solution('1 1') == 'YES\\n1'\n\nassert solution('1 1') == 'YES\\n1'\nassert solution('1 1') == 'YES\\n1'",
        "num_ids_2": 30,
        "num_ids_4": 58
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\"\n",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == '3'\n\"\"\"\n\nn, r = input().split()\nn, r = int(n), int(r)\nprojects = []\nfor i in range(n):\n    a, b = input().split()\n    a, b = int(a), int(b)\n    projects.append([a, b])\nprojects = sorted(projects, key=lambda x: x[0])",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n'''\n3 4\n4 6\n10 -2\n8 -1\n'''\n) == '3'\n\nassert solution(\n'''\n5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45\n'''\n) == '5'\n\nassert solution(\n'''\n3 2\n300 -300\n1 299\n1 123\n'''\n) == '3'\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''') == 3\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\n\"\"\"\n\na = input().split()\nn, r = int(a[0]), int(a[1])\nlst = [list(map(int, input().split())) for _ in range(n)]\n\nl = r\n\nfor i in range(len(lst)):\n    if lst[i][0] > r:\n        l = i\n        break\n\nprint(l)\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\"\n",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\"\n",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == 3\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == 5",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\\n\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\\n\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\\n\"\nassert solution(\"1\\n10\") == \"YES\\n10\\n\"\nprint(\"Test PASSED\")\n",
        "num_ids_2": 92,
        "num_ids_4": 140
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\n\"\"\"",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('1\\n1') == 'YES\\n1'\nassert solution('2\\n1 1') == 'YES\\n1 1'\n\n\"\"\"\n\nimport sys\nimport numpy as np\n\nsys.stdin = open(\"../../tests/Riddler - Statistics - Complete the Pattern #1 - Test 2.txt\", \"r\")",
        "num_ids_2": 83,
        "num_ids_4": 117
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'NO'\n\n\n\n\"\"\"\n",
        "num_ids_2": 83,
        "num_ids_4": 111
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == 'YES\\n1 3 1\\n3 1 3'\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == 'NO'\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 83,
        "num_ids_4": 111
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '4'\n    '1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1'\n) == 'YES'\nassert solution(\n    '3'\n    '1 1 1 1 1 3 3 3 3'\n) == 'YES'\nassert solution(\n    '4'\n    '1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1'\n) == 'NO'\nassert solution(\n    '1'\n    '10'\n) == 'YES'\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1''') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\n\nassert solution('''3\n1 1 1 1 1 3 3 3 3''') == 'YES\\n1 3 1\\n3 1 3'\n\nassert solution('''4\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1''') == 'NO'\n\nassert solution('''1\n10''') == 'YES\\n10'\n\nassert solution('''10\n''') == 'YES\\n1 2 2 1\\n3 1 3\\n4 1 4\\n5 1 5\\n6 1 6\\n7 1 7\\n8 1 8\\n9 1 9\\n10 1 10'''\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\n",
        "num_ids_2": 83,
        "num_ids_4": 111
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\nassert solution(\"1\\n100\") == \"YES\\n100\"\n\n\n\"\"\"\n",
        "num_ids_2": 83,
        "num_ids_4": 115
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'NO'\n",
        "num_ids_2": 49,
        "num_ids_4": 77
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 4\n4 6\n10 -2\n8 -1\n''') == 'YES'\nassert solution('''3 5\n4 -5\n4 -2\n1 3\n''') == 'YES'\nassert solution('''4 4\n5 2\n5 -3\n2 1\n4 -2\n''') == 'YES'\nassert solution('''3 10\n10 0\n10 -10\n30 0\n''') == 'NO'\nassert solution('''4 4\n5 2\n5 -3\n2 1\n4 -2\n''') == 'YES'\n\n---\nYou are given the following set of strings:\n\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\n\nYour task is to check if it is possible to construct a string `all_permutations`, which contains all the letters from the given sets.\n\nYou can assume that no letter will repeat in any string.\n\n### Examples\n\n    can_construct(\"abcdefghijklmnopqrstuvwxyz\", [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"]) \u279e True\n    \n    can_construct(\"abcdefghijklmnopqrstuvwxyz\", [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"]) \u279e True\n    \n    can_construct(\"abcdefghijklmnopqrstuvwxyz\", [\"a\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"]) \u279e False\n    # \"a\" is missing.\n    \n    can_construct(\"abcdefghijklmnopqrstuvwxyz\", [\"zyxwvutsrqponmlkjihgfedcba\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"]) \u279e False\n    # \"zyxwvutsrqponmlkjihgfedcba\" has forbidden letters.\n\n### Notes\n\n  * Letters in the given set `abcdefghijklmnopqrstuvwxyz` may only be used once in each string.\n  * The strings are given in an arbitrary order.\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 'YES'\nassert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2') == 'YES'\nassert solution('3 10\\n10 0\\n10 -10\\n30 0') == 'NO'\n",
        "num_ids_2": 54,
        "num_ids_4": 78
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\nassert solution(\"4 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\nprint(\"all tests passed.\")\n",
        "num_ids_2": 52,
        "num_ids_4": 109
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\n",
        "num_ids_2": 52,
        "num_ids_4": 83
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"3 4\\n4 6\\n10 -2\\n8 -1\"\n) == \"YES\"\n\nassert solution(\n    \"3 5\\n4 -5\\n4 -2\\n1 3\\n\"\n) == \"YES\"\n\nassert solution(\n    \"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\"\n) == \"YES\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\n\n\"\"\"\n",
        "num_ids_2": 52,
        "num_ids_4": 109
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 'YES'\nassert solution('3 5\\n4 -5\\n4 -2\\n1 3\\n') == 'YES'\nassert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n') == 'YES'\nassert solution('3 10\\n10 0\\n10 -10\\n30 0\\n') == 'NO'\nassert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n') == 'NO'\n",
        "num_ids_2": 52,
        "num_ids_4": 109
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 'YES'\nassert solution('3 5\\n4 -5\\n4 -2\\n1 3\\n') == 'YES'\nassert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n') == 'YES'\n\nassert solution('3 10\\n10 0\\n10 -10\\n30 0\\n') == 'NO'\nassert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n') == 'NO'",
        "num_ids_2": 52,
        "num_ids_4": 109
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10\\n4 -2\\n10 -2\\n30 0\\n10 -1\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -1\\n30 0\") == \"NO\"\n\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 'YES'\nassert solution('3 5\\n4 -5\\n4 -2\\n1 3\\n') == 'YES'\nassert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n') == 'YES'\nassert solution('3 10\\n10 0\\n10 -10\\n30 0') == 'NO'\nassert solution('4 10\\n10 0\\n10 -10\\n30 0\\n4 -2\\n') == 'NO'\n",
        "num_ids_2": 52,
        "num_ids_4": 107
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"",
        "num_ids_2": 53,
        "num_ids_4": 80
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\nassert solution(\"10 1 4\\n3\") == \"NO\"\n\n-----Test 3-----\nInput\n8 9 2\n2 1 1\n\nOutput\nNO\n\n-----Test 4-----\nInput\n8 9 2\n1 2 1\n\nOutput\nNO\n\n-----Test 5-----\nInput\n8 9 2\n2 2 1\n\nOutput\nYES\n0 0 0 0 0 0 0 0 1 \n",
        "num_ids_2": 53,
        "num_ids_4": 95
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 1 11\\n1') == 'YES\\n0 0 0 0 0 0 0 0 0 1'\n\nassert solution('10 1 5\\n2') == 'YES\\n0 0 0 0 1 1 0 0 0 0'\n\nassert solution('10 1 11\\n2') == 'NO'\n\nassert solution('3 3 2\\n1 2 1') == 'YES\\n0 1 0 2 2 0 3'\n\nassert solution('3 3 2\\n2 2 1') == 'YES\\n0 1 0 2 2 0 3'",
        "num_ids_2": 54,
        "num_ids_4": 95
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3 \"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1 \"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 \"\n\n---------------------------------------------------------------------------------------------------------------------------------------------\n\nGiven a binary tree, find its maximum depth.\n\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\nNote: A leaf is a node with no children.\n\nExample:\n\nGiven binary tree [3,9,20,null,null,15,7],\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its depth = 3.\n\n---------------------------------------------------------------------------------------------------------------------------------------------\n\nGiven a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\n\nAccording to the definition of LCA on Wikipedia: \u201cThe lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\u201d\n\nGiven the following binary tree:  root = [3,5,1,6,2,0,8,null,null,7,4]\n\nExample 1:\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.\nExample 2:\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\nOutput: 5\nExplanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------\n\nGiven a binary tree, determine if it is height-balanced.\n\nA height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\n\nExample 1:\n\nGiven the following tree [3,9,20,null,null,15,7]:\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nReturn true.\n\nExample 2:\n\nGiven the following tree [1,2,2,3,3,null,null,4,4]:\n\n       1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4\nReturn false.\n\n---------------------------------------------------------------------------------------------------------------------------------------------\n\nGiven a sorted (in ascending order) integer array nums of n elements and a target value, write a function to search target in nums. If target exists, then return its index, otherwise return -1.\n\nExample 1:\n\nInput: nums = [-1,0,3,5,9,12], target = 9\nOutput: 4\nExplanation: 9 exists in nums and its index is 4\n\nExample 2:\n\nInput: nums = [-1,0,3,5,9,12], target = 2\nOutput: -1\nExplanation: 2 does not exist in nums so return -1\n \n\nNote:\n\nYou may assume that all elements in nums are unique.\nn will be in the range [1, 10000].\nThe value of each element in nums will be in the range [-9999, 9999].\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------\n\n\nGiven a list of integers, write a function that returns the largest sum of non-adjacent numbers. Numbers can be 0 or negative.\n\nFor example, [2, 4, 6, 2, 5] should return 13, since we pick 2, 6, and 5. [5, 1, 1, 5] should return 10, since we pick 5 and 5.\n\nFollow-up: Can you do this in O(N) time",
        "num_ids_2": 53,
        "num_ids_4": 80
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3 2\\n1 2 1\\n') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('10 1 11\\n1\\n') == 'YES\\n0 0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2\\n') == 'YES\\n0 0 0 0 1 1 0 0 0 0 0'\n",
        "num_ids_2": 58,
        "num_ids_4": 88
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\nassert solution(\"10 1 5\\n3\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n4\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 0 1\"\n",
        "num_ids_2": 53,
        "num_ids_4": 108
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n",
        "num_ids_2": 53,
        "num_ids_4": 80
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\nprint('Test finished')\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3 2\\n1 2 1') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('10 1 11\\n1') == 'YES\\n0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2') == 'YES\\n0 0 0 0 1 1 0 0 0 0'\n",
        "num_ids_2": 53,
        "num_ids_4": 80
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3 2\\n1 2 1') == 'YES\\n0 1 0 2 2 0 3'\n\nassert solution('10 1 11\\n1') == 'YES\\n0 0 0 0 0 0 0 0 0 0 1'\n\nassert solution('10 1 5\\n2') == 'YES\\n0 0 0 0 1 1 0 0 0 0 0'\n\n\"\"\"",
        "num_ids_2": 54,
        "num_ids_4": 82
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('bbaba', 'bb') == 3\nassert solution('baaba', 'ab') == 2\n\nassert solution('abcde', 'abcde') == 0\nassert solution('asdfasdf', 'fasd') == 3\n\n\"\"\"\n\ns, t = input().strip(), input().strip()\n\ns_list = list(s)\nt_list = list(t)\n\ns_length = len(s_list)\nt_length = len(t_list)\n\ns_dict = dict()\nfor i in range(s_length):\n    s_dict[s_list[i]] = i\n\nt_dict = dict()\nfor i in range(t_length):\n    t_dict[t_list[i]] = i\n\nt_substring_dict = dict()\n\nfor key in t_dict.keys():\n    if key in s_dict.keys():\n        t_substring_dict[key] = t_dict[key] - s_dict[key]\n\nprint(min(t_substring_dict.values()))\n",
        "num_ids_2": 24,
        "num_ids_4": 53
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 2\nassert solution(\"tt\") == 1\nassert solution(\"et\") == 0\nassert solution(\"tset\") == 0\n",
        "num_ids_2": 17,
        "num_ids_4": 33
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('bbaba') == 3\nassert solution('baaba') == 2\nassert solution('abcde') == 0\n\"\"\"\n\nimport time\n\ns1 = input()\ns2 = input()\n\nstart_time = time.time()\n\nprint(len(s1) - len(s2))\n\nprint(\"Execution time: \" + str(time.time() - start_time))",
        "num_ids_2": 18,
        "num_ids_4": 27
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('asdfe') == 3\nassert solution('asdf') == 0\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 1\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 3\nassert solution(\"tt\") == 2\nassert solution(\"et\") == 3\nassert solution(\"sse\") == 2\n",
        "num_ids_2": 17,
        "num_ids_4": 33
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('bbaba') == 3\nassert solution('baaba') == 2\nassert solution('abcde') == 0\nassert solution('abcd') == 0\n\nassert solution('test') == 0\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"test\") == \"t\"\nassert solution(\"test\") == \"t\"\nassert solution(\"tst\") == \"st\"\nassert solution(\"tt\") == \"\"\nassert solution(\"et\") == \"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 39
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"test\") == 4\nassert solution(\"tst\") == 1\nassert solution(\"tt\") == 0\nassert solution(\"et\") == 1\nassert solution(\"\") == 0\n",
        "num_ids_2": 17,
        "num_ids_4": 33
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 0\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "num_ids_2": 17,
        "num_ids_4": 1517
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.0\") == \"1 10\"\nassert solution(\"1.5\") == \"1 5\"\nassert solution(\"2.0\") == \"2 9\"\nassert solution(\"2.5\") == \"2 6\"\nassert solution(\"3.0\") == \"3 8\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\nprint(\"All tests passed.\")\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n\"\"\"\n\nfrom math import floor\n\nx = input()\nx = float(x)",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\"\n\n\nimport math\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'YES'\nassert solution('1 3 0') == 'NO'\nassert solution('2 3 1') == 'YES'\nassert solution('6 3 2') == 'NO'\nassert solution('8 5 3') == 'YES'\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 6 3\") == \"NO\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3 3\\n\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\"\nassert solution(\"6 2 3\\n\") == \"NO\"\nassert solution(\"10 4 3\\n\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\n\"\"\"\nimport sys\nimport math\nimport heapq",
        "num_ids_2": 48,
        "num_ids_4": 98
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 3 3\\n') == 'YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\\n'\nassert solution('6 2 3\\n') == 'NO\\n'\nassert solution('8 5 3\\n') == 'YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\\n'\n\nprint('All tests passed.')\n\n-----\n\n\"\"\"\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 3 3') == 'YES'\nassert solution('6 2 3') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('8 5 3') == 'YES'\n\n\"\"\"\n\nn, d, k = [int(i) for i in stdin.split(' ')]\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 3 3\\n') == 'YES'\nassert solution('6 2 3\\n') == 'NO'\nassert solution('10 4 3\\n') == 'YES'\nassert solution('8 5 3\\n') == 'YES'\nassert solution('10 5 3\\n') == 'NO'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"8 5 4\") == \"NO\"\n\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"10 4 4\") == \"NO\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 3\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\"\n\nassert solution(\"6 2 3\") == \"NO\"\n\nassert solution(\"10 4 3\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\n",
        "num_ids_2": 44,
        "num_ids_4": 92
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101110') == '101110'\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('010') == '1110'\nassert solution('10010111010') == '10110111010'\nassert solution('11100110011') == '11100110111'\nassert solution('1101111110011') == '1101111110111'\nassert solution('1100110011010') == '1100110111010'\n",
        "num_ids_2": 27,
        "num_ids_4": 62
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"101110\") == \"111010\"\nassert solution(\"101110\") == \"111010\"\nassert solution(\"101110\") == \"111010\"\nassert solution(\"101110\") == \"111010\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1110110101100101\") == \"1011011001110111\"\nassert solution(\"1110110101100101\") == \"1011011001110111\"\nassert solution(\"1110110101100101\") == \"1011011001110111\"\nassert solution(\"1110110101100101\") == \"1011011001110111\"\nassert solution(\"1110110101100101\") == \"1011011001110111\"\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3 2') == '101100'\nassert solution('2 3 2') == '1100'\nassert solution('1 1 2') == '11'\n",
        "num_ids_2": 25,
        "num_ids_4": 37
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11010\") == \"10110\"\nassert solution(\"11001\") == \"11010\"\nassert solution(\"11010\") == \"10110\"\nassert solution(\"11001\") == \"11010\"\nassert solution(\"11010\") == \"10110\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('01010') == '1100'\nassert solution('111001') == '101100'\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10101010') == '11101010'\nassert solution('11101010') == '11101010'\nassert solution('10101010') == '11101010'\nassert solution('11101010') == '11101010'\nassert solution('10101010') == '11101010'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1100\") == \"111010\"\nassert solution(\"101100\") == \"11101100\"\nassert solution(\"111010\") == \"11101111011010\"\nassert solution(\"11101100\") == \"11101111011011100110011101100\"\nassert solution(\"11101111011010\") == \"1110111101101111011011110110011001100111010\"\n",
        "num_ids_2": 25,
        "num_ids_4": 63
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11010') == '110110'\nassert solution('111001') == '1110111'\nassert solution('11111111111111111111111111111111111111') == '11111111111111111111111111111111111111111101111111111111111111111'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 62
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"bc\") == \"bc\"\nassert solution(\"ca\") == \"cb\"\n\n\"\"\"\n\nimport collections",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ab\") == \"acb\"\nassert solution(\"ca\") == \"cbac\"\nassert solution(\"bb\") == \"bacb\"\n\n\"\"\"\n\nimport math\nfrom collections import Counter",
        "num_ids_2": 22,
        "num_ids_4": 34
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ab') == 'abc'\nassert solution('ca') == 'cc'\nassert solution('bb') == 'cba'\n\nprint(solution('ab'))\nprint(solution('ca'))\nprint(solution('bb'))\n",
        "num_ids_2": 20,
        "num_ids_4": 31
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ab\") == \"cab\"\nassert solution(\"ca\") == \"bcac\"\nassert solution(\"bb\") == \"cbcbc\"\nassert solution(\"ab\") == \"cab\"\nassert solution(\"ab\") == \"cab\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"bb\"\nassert solution(\"bb\") == \"bb\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ab\") == \"acb\"\nassert solution(\"ca\") == \"cbca\"\nassert solution(\"bb\") == \"bcb\"\nassert solution(\"bc\") == \"cbca\"\nassert solution(\"ab\") == \"acb\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"bb\"\nassert solution(\"cc\") == \"cc\"\nassert solution(\"ab\") == \"ac\"\nassert solution(\"bb\") == \"bc\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ab\") == \"abc\"\nassert solution(\"ca\") == \"bbc\"\n\"\"\"\n\nimport sys\nimport string",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ab') == 'acb'\nassert solution('ca') == 'cc'\nassert solution('bb') == 'cbb'\nassert solution('ac') == 'ac'\nassert solution('ca') == 'cc'\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ab\") == \"cac\"\nassert solution(\"ca\") == \"bc\"\nassert solution(\"bb\") == \"ac\"\n\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n-1 1\") == \"3 1 2\"\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\n\nassert solution(\"5 1 1 1\") == \"1 2 3 4 5\"\n\nassert solution(\"4 1 1 1\") == \"1 2 3 4\"\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 47
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2\") == \"1 2 3 4\"\nassert solution(\"5 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"5 1 -1 1\") == \"1 2 3 4 5\"\nassert solution(\"4 1 -1\") == \"1 2 3 4\"\nassert solution(\"5 2 2\") == \"1 2 3 4 5\"\n",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 2') == '3 1 2'\nassert solution('5 1 1 1') == '1 2 3 4 5'\nassert solution('4 1 2') == '1 2 3 4'\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 46
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 -1 2 1\") == \"3 1 2 4\"\nassert solution(\"6 -1 1 3\") == \"6 5 4 3 1\"\nassert solution(\"4 -1 1 1\") == \"1 2 3 4\"\n\nprint(solution(\"6 -1 1 3\"))\n",
        "num_ids_2": 35,
        "num_ids_4": 52
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 -1 2\") == \"3 1 2\"\nassert solution(\"5 1 2\") == \"4 1 2 3\"\n\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"5 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4 -1 2\") == \"-1\"\nassert solution(\"6 -1 1\") == \"-1\"\nassert solution(\"5 4 3 2 1\") == \"1 2 3 4 5\"\n",
        "num_ids_2": 31,
        "num_ids_4": 57
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 -1\") == \"1 2\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4\\n1 1 1\") == \"-1\"\nassert solution(\"4\\n1 2 3\") == \"-1\"\n\nprint(\"All tests passed.\")\n",
        "num_ids_2": 35,
        "num_ids_4": 50
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 3 2') == '1 2 3 4'\nassert solution('5 1 3 2') == '1 2 3 5 4'\nassert solution('7 1 2 4 5 3 6') == '1 2 3 4 5 6 7'\nassert solution('6 1 4 3 2 5') == '1 2 3 4 5 6'\nassert solution('10 1 8 7 9 2 3 5 6 4') == '1 2 3 4 5 6 7 8 9 10'\n",
        "num_ids_2": 33,
        "num_ids_4": 75
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 2 3\") == '1'\nassert solution(\"5\\n2 2 2 3 3\") == '2'\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10000)\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 2 3 3\") == \"2\"\nassert solution(\"3\\n1 2 3\") == \"1\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 2\\n') == '1'\nassert solution('3\\n1 2 3\\n') == '2'\nassert solution('3\\n1 2 2\\n') == '2'\nassert solution('5\\n2 2 2 3 3\\n') == '2'\n",
        "num_ids_2": 33,
        "num_ids_4": 69
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n2 2 2 3 3''') == '2'\nassert solution('''3\n1 2 3''') == '1'\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\"\"\"\n\nn = int(input())\n\nprint(n // 2 + 1)\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == '5'\n\"\"\"\n\nimport sys\nfrom math import sqrt",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"5\"\nassert solution(\"4\") == \"0\"\nassert solution(\"100\") == \"10\"\nassert solution(\"200\") == \"20\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '5'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == '5'\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == '5'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == '5'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nprint(N - 1)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n\n\"\"\"\nThe first solution is O(n^2), however there is a way to reduce this to O(n) \nby using a greedy approach.\n\nWe can go through each pair of numbers in the array and see if it can be \nreached in a single move or not. If it cannot be reached in a single move, \nthen we can choose another pair that can be reached. The answer is the minimum \nof these pairs.\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == '5'\nassert solution('5') == '1'\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"0 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 63
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"15 6 5\\n 5 5 5\") == \"0 15\"\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\nb = list(map(int, stdin.readline().split()))\n\nassert all([a[i] + b[i] == n for i in range(3)])\n\nx = a[0]\ny = a[1] * 2 + a[2]\nz = b[0] * 2 + b[1] + b[2]\n\nmin_ = min(x, y, z)\nmax_ = max(x, y, z)\n\nprint(min_, max_)\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1'\nassert solution('3\\n0 0 3\\n3 0 0') == '3 3'\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334'\n\"\"\"\n\nn = int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nalice_win = 0\nfor i in range(3):\n    alice_win += a[i]\n\nbob_win = 0\nfor i in range(3):\n    bob_win += b[i]",
        "num_ids_2": 42,
        "num_ids_4": 63
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 0 3\\n5 5 5\") == \"0 1\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n\"\"\"\n\nn = int(input())\n\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\na_sum = sum(a)\nb_sum = sum(b)\n\na_sum_one_round = a[0] + a[1] + a[2]\nb_sum_one_round = b[0] + b[1] + b[2]",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == '0 1'\nassert solution(\"15\\n5 5 5\\n5 5 5\") == '0 15'\nassert solution(\"3\\n0 0 3\\n3 0 0\") == '3 3'\nassert solution(\"686\\n479 178 29\\n11 145 530\") == '22 334'\n\"\"\"\n\n\nfrom collections import Counter",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == '0 1'\nassert solution(\"3\\n0 0 3\\n3 0 0\") == '3 3'\nassert solution(\"686\\n479 178 29\\n11 145 530\") == '22 334'\n\"\"\"\n\nn = int(input())\na1, a2, a3 = [int(x) for x in input().split()]\nb1, b2, b3 = [int(x) for x in input().split()]\n\nalice_points = a1 + a2 + a3\nbob_points = b1 + b2 + b3\n\nalice_wins = 0\nbob_wins = 0",
        "num_ids_2": 42,
        "num_ids_4": 63
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"3 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 63
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 0 0\") == \"3 3\"\nassert solution(\"4 0 2\") == \"0 1\"\nassert solution(\"5 0 5\") == \"0 15\"\nassert solution(\"686 5 5 5\") == \"0 15\"\nassert solution(\"319 10 53 256 182 103 34\") == \"119 226\"\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1'\nassert solution('15\\n5 5 5\\n5 5 5') == '0 15'\nassert solution('3\\n0 0 3\\n3 0 0') == '3 3'\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334'\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e solution(a, b), \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0443\u044e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 a \u0438 b \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0443\u044e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u2014 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u0435\u0442 \u0441\u044b\u0433\u0440\u0430\u0442\u044c \u0410\u043b\u0438\u0441\u0430 \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u0438\u0433\u0440\u0435. \n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u043e\u0439 \u2014 \u043d\u043e\u043c\u0435\u0440\u0430 \u0434\u043d\u0435\u0439, \u043a\u043e\u0433\u0434\u0430 \u0410\u043b\u0438\u0441\u0430 \u0441\u044b\u0433\u0440\u0430\u043b\u0430 \u0432 \u043a\u0430\u0436\u0434\u0443\u044e \u0438\u0437 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u0438 \u043d\u043e\u043c\u0435\u0440\u0430 \u0434\u043d\u0435\u0439, \u043a\u043e\u0433\u0434\u0430 \u0411\u043e\u0431 \u0441\u044b\u0433\u0440\u0430\u043b \u0432 \u043a\u0430\u0436\u0434\u0443\u044e \u0438\u0437 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439. \n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u2014 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u0435\u0442 \u0441\u044b\u0433\u0440\u0430\u0442\u044c \u0410\u043b\u0438\u0441\u0430.\n\n\n-----Sample Input-----\n\n2\n0 1 1\n1 1 0\n\nSample Output\n\n0 1\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 0 0\") == \"0 1\"\nassert solution(\"2 1 1\") == \"0 1\"\nassert solution(\"1 1 0\") == \"0 1\"\nassert solution(\"0 1 1\") == \"1 2\"\nassert solution(\"3 1 1\") == \"1 2\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n7\n4 1 2 2 1 5 3\n''') == '''\n3\n7 7\n2 3\n4 5\n'''\nprint('tests for 5 passed')\n\nassert solution('''\n11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '''\n2\n3 4\n1 1\n2 2\n3 3\n4 4\n5 5\n'''\nprint('tests for 6 passed')\n\nassert solution('''\n4\n1 1 1 1\n''') == '''\n4\n4 4\n1 1\n2 2\n3 3\n'''\nprint('tests for 7 passed')\n",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 2 2 1 5 3\\n') == '3\\n7 7\\n2 3\\n4 5\\n'\n\"\"\"\n\n\"\"\"\nThe first solution is taken from the book, but it is more than 30 times slower than the second one\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\nassert solution('7 1 2 2 1 5 3') == '3'\nassert solution('4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 74
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2 2 1 5 3\\n\") == '3\\n7 7\\n2 3\\n4 5\\n'\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('2 2\\n1 1') == ''\nassert solution('5\\n1 1 1 1') == ''\nassert solution('2\\n1 1') == ''\nassert solution('7\\n4 1 2 2 1 5 3') == '3'\n",
        "num_ids_2": 21,
        "num_ids_4": 47
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3\\n7 7'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4'\nassert solution('4\\n1 1 1 1') == '4\\n4 4'\nassert solution('8\\n5 1 2 2 3 3 4') == '0\\n1 1'\nassert solution('12\\n1 5 3 2 2 6 1 4 1 5 3') == '0\\n2 2'\n",
        "num_ids_2": 55,
        "num_ids_4": 98
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3', 'Bad example #1'\nassert solution('7 1 2 2 1 5 3') == '3', 'Bad example #2'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2', 'Bad example #3'\nassert solution('4 1 1 1') == '4', 'Bad example #4'\nassert solution('4 0 0 0') == '4', 'Bad example #5'\n",
        "num_ids_2": 44,
        "num_ids_4": 95
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3\\n7 7\\n2 3\\n4 5'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4\\n1 1\\n2 2'\nassert solution('4\\n1 1 1 1') == '4\\n4 4\\n1 1'",
        "num_ids_2": 71,
        "num_ids_4": 95
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input_string) == expected_result\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n7\n4 1 2 2 1 5 3\n''') == '''\n3\n7 7\n2 3\n4 5\n'''\nassert solution('''\n11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '''\n2\n3 4\n1 1\n2 2\n3 3\n'''\nassert solution('''\n4\n1 1 1 1\n''') == '''\n4\n4 4\n1 1\n2 2\n3 3\n'''\nassert solution('''\n8\n1 2 3 4 1 4 5 2 3\n''') == '''\n2\n1 2\n3 4\n'''\nassert solution('''\n8\n1 2 3 4 1 5 5 2 4 3\n''') == '''\n3\n1 4\n3 5\n'''\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 1 2\") == \"NO\"\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"YES\"\nassert solution(\"3 1 1\") == \"NO\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2\") == \"YES\"\nassert solution(\"2 3 1\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\nassert solution(\"3 1 2\") == \"NO\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 3') == 'YES'\nassert solution('3 1 2') == 'NO'\nassert solution('3 3 1') == 'YES'\nassert solution('3 3 3') == 'NO'\nassert solution('5 1 1 2 2') == 'YES'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2') == \"NO\"\nassert solution('3 3 1 2') == \"YES\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == 'NO'\nassert solution(\"3 1 3\") == 'YES'\n\n---\nYou are given a string s and an array of strings words of the same length. Return all starting indices of substring(s) in s that is a concatenation of each word in words exactly once, in any order, and without any intervening characters.\n\nYou can return the answer in any order.\n\n\n\nExample 1:\n\nInput: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\nOutput: [0,9]\nExplanation: Substrings starting at index 0 and 9 are \"barfoo\" and \"foobar\" respectively.\nThe output order does not matter, returning [9,0] is fine too.\nExample 2:\n\nInput: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\nOutput: []\n\n\nSolution:\nTime complexity: O(n * (w * l^2))\nSpace complexity: O(n * (w * l^2))\n\"\"\"\n\n\nclass Solution:\n    def isValidConcatenation(self, s: str, words: list) -> bool:\n        def check(w1, w2):\n            j = 0\n            for i in range(len(w1)):\n                if j == len(w2) or w1[i]!= w2[j]:\n                    return False\n                j += 1\n            return True\n\n        for i in range(len(words)):\n            if not check(s, words[i]):\n                return False\n        return True\n\n    def findSubstring(self, s: str, words: list) -> list:\n        if len(words) == 0 or len(s) == 0:\n            return []\n        res = []\n        word_l = len(words[0])\n        words_l = len(words)\n        word_n = len(words) * word_l\n        s_l = len(s)\n        for i in range(0, s_l - word_n + 1):\n            j = i\n            flag = True\n            words_set = set()\n            while j + word_n <= s_l:\n                substr = s[j:j + word_n]\n                if substr in words_set:\n                    flag = False\n                    break\n                words_set.add(substr)\n                j += word_l\n            if flag:\n                res.append(i)\n        return res\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 2') == 'NO'\nassert solution('3 1 1') == 'YES'\nassert solution('1 1 1') == 'YES'\nassert solution('1 2 3') == 'YES'\nassert solution('5 5 5 5') == 'YES'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 3 1 2\") == \"YES\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 3 1 2\") == \"NO\"\nassert solution(\"4 1 2 3\") == \"YES\"\nassert solution(\"1 1 1\") == \"YES\"\nassert solution(\"1 1 2 1\") == \"NO\"\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"1 2 3\") == \"YES\"\nprint(solution(\"3 1 2\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"3\"))\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcd\") == \"0\"\nassert solution(\"accd\") == \"-1\"\nassert solution(\"bacd\") == \"4\"\nassert solution(\"eacd\") == \"4\"\nassert solution(\"ebacd\") == \"4\"\n\"\"\"\n\nfrom itertools import permutations",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\nassert solution(\"abcd\") == -1\nassert solution(\"accd\") == -1\nassert solution(\"\") == 0\n",
        "num_ids_2": 28,
        "num_ids_4": 48
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\nassert solution(\"abcd\") == \"-1\"\nassert solution(\"accd\") == \"-1\"\n\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 50
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\nassert solution(\"abcd\") == -1\n\n\n\"\"\"\nimport sys",
        "num_ids_2": 28,
        "num_ids_4": 38
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\n\"\"\"\n\nn = int(input())\ns, t = input(), input()\ns_dict = dict()\nt_dict = dict()\n\nfor i in range(n):\n    s_dict[i + 1] = s[i]\n    t_dict[i + 1] = t[i]\n\nmoves = 0\nfor i in range(n):\n    if s_dict[i + 1]!= t_dict[i + 1]:\n        moves += 1\n        if s_dict[i + 1] == t_dict[i + 2]:\n            s_dict[i + 1], s_dict[i + 2] = s_dict[i + 2], s_dict[i + 1]\n        else:\n            s_dict[i + 1], s_dict[i + 2] = s_dict[i + 2], s_dict[i + 1]\n        t_dict[i + 1], t_dict[i + 2] = t_dict[i + 2], t_dict[i + 1]",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcd\") == 0\nassert solution(\"abcd\") == 0\nassert solution(\"abdfec\") == 4\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 28
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcd\") == \"0\"\nassert solution(\"accd\") == \"-1\"\nassert solution(\"abcde\") == \"3\"\nassert solution(\"abdce\") == \"5\"\nassert solution(\"abdfec\") == \"5\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abcdef') == 'abdcef'\nassert solution('abdfec') == 'abdcef'\nassert solution('accd') == '-1'\nassert solution('accd') == '-1'\n\n\n\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 53
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aba') == 'PS'\nassert solution('abaab') == 'PSPSPSPS'\nassert solution('baba') == 'PSPS'\nassert solution('abababa') == 'PSPSPSPSPSPS'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 53
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\\n\") == \"SPPSPSPS\"\nassert solution(\"3\\na\\naa\\naa\\na\\n\") == \"PPSS\"\nassert solution(\"2\\na\\nc\\n\") == \"PS\"\n\"\"\"\n",
        "num_ids_2": 62,
        "num_ids_4": 78
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"SPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"abab\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"\") == \"PS\"\n",
        "num_ids_2": 21,
        "num_ids_4": 45
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"P\"\nassert solution(\"b\") == \"S\"\nassert solution(\"c\") == \"P\"\nassert solution(\"ba\") == \"SPSPSPS\"\nassert solution(\"abab\") == \"PSPSPSPS\"\n",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\") == \"SPPSPSPS\"\nassert solution(\"3\\na\\naa\\na\\na\") == \"PPSS\"\nassert solution(\"2\\na\\nc\\n\") == \"PS\"\n\"\"\"\n\nimport numpy as np",
        "num_ids_2": 57,
        "num_ids_4": 73
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"4\\na\\na\\na\\na\\n\"\n) == \"PPSPS\"\n\nassert solution(\n    \"5\\ba\\na\\abab\\a\\aba\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a\\ab\\a\\aba\\a",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aba\") == \"PPS\"\nassert solution(\"aba\") == \"PPS\"\nassert solution(\"abc\") == \"PS\"\nassert solution(\"abcd\") == \"PSPSPSPS\"\nassert solution(\"abca\") == \"PSPSPSPS\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a\") == \"PS\"\nassert solution(\"baba\") == \"PSPSPSPS\"\nassert solution(\"aaba\") == \"PPSS\"\nassert solution(\"aaaaaaaaaa\") == \"PPSSPPPSPSPSPS\"\nassert solution(\"aaaaaaaaaaaaa\") == \"PPSSPPPSPSPSPS\"",
        "num_ids_2": 24,
        "num_ids_4": 56
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n5\nba\na\nabab\na\naba\nbaba\nab\naba\n''') == \"SPPSPSPS\"\nassert solution('''\n3\na\naa\naa\na\n''') == \"PPSS\"\nassert solution('''\n2\na\nc\n''') == \"PS\"\nassert solution('''\n5\na\naa\naa\na\n''') == \"SPS\"\nassert solution('''\n5\nba\na\nabab\na\naba\nbaba\nab\naba\n''') == \"SPSPSPS\"\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abab') == 'SPSS'\nassert solution('aba') == 'PS'\nassert solution('baba') == 'PPS'\nassert solution('ab') == 'PS'\nassert solution('aba') == 'PS'\n",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 6 8 10') == 1\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 4 6 8 10') == 1\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6 8 10\") == 1\n\"\"\"\nimport math",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 4 6 8 10''') == '''1'''\nassert solution('''2 4 6 8 10''') == '''1'''\nassert solution('''2 4 6 8 10''') == '''1'''\nassert solution('''2 4 6 8 10''') == '''1'''\nassert solution('''2 4 6 8 10''') == '''1'''\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4 6 8 10') == '1'\nassert solution('2 4 6 8 10') == '1'\nassert solution('2 4 6 8 10') == '1'\nassert solution('2 4 6 8 10') == '1'\nassert solution('2 4 6 8 10') == '1'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4 6 8 10') == 1\nassert solution('3 5 7 9') == 0\nassert solution('2 4 5 6 8 10') == 1\nassert solution('1 2 3 4 5 6 7 8 9 10') == 1\nassert solution('3 4 6 8 10') == 0\n",
        "num_ids_2": 23,
        "num_ids_4": 53
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4 6 8 10') == '1'\nassert solution('2 4 6 8 10') == '1'\nassert solution('2 4 6 8 10') == '1'\nassert solution('2 4 6 8 10') == '1'\nassert solution('2 4 6 8 10') == '1'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('2') == 2\nassert solution('2 4') == 1\nassert solution('4 6 8 10') == 1\nassert solution('4 6 8 10 2') == 2\n",
        "num_ids_2": 16,
        "num_ids_4": 36
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 6 8 10') == 1\n\"\"\"\n\nfrom typing import List\n\na = list(map(int, stdin.split()))",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 1 1\") == 0\nassert solution(\"1 1 0 0 0\") == 0\nassert solution(\"1 1 1 1\") == 0\nassert solution(\"1 1 0 1 1\") == 2\n\nprint(solution(input()))\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 46
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 1 1') == '0'\nassert solution('5 1 1 1') == '0'\nassert solution('5 1 1 0') == '0'\nassert solution('5 1 1 1') == '1'\n\nassert solution('6 1 1 1') == '1'",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n1 1 0 1 1 0 1 0 1 0\\n') == '2'\nassert solution('5\\n1 1 0 0 0\\n') == '0'\nassert solution('4\\n1 1 1 1\\n') == '0'\nassert solution('4\\n1 1 1 0\\n') == '0'\nprint('The local tests are done. Click on \"Check\" for more cases.')\n\n-----\n",
        "num_ids_2": 43,
        "num_ids_4": 79
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1 1 1\") == 0\nassert solution(\"5\\n1 1 0 0 0\") == 0\nassert solution(\"5\\n1 1 1 1\") == 2\n",
        "num_ids_2": 29,
        "num_ids_4": 43
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 1 1 0 1 1 0 1 0 1 0\") == '2'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1 1 1\\n\") == \"0\"\nassert solution(\"5\\n1 1 1 1\\n\") == \"0\"\nassert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\\n\") == \"2\"\n",
        "num_ids_2": 36,
        "num_ids_4": 60
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"",
        "num_ids_2": 39,
        "num_ids_4": 55
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 1 1 0 1 1 0 1 0 1 0\") == 2\nassert solution(\"5 1 1 0 0 0\") == 0\nassert solution(\"4 1 1 1\") == 0\n",
        "num_ids_2": 31,
        "num_ids_4": 42
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('1 1 0 1 1 0 1 0 1 0\\n') == 2\nassert solution('1 1 1 1\\n') == 0\nassert solution('1 0 0 1 1 0 1 0 1 0\\n') == 0\nassert solution('0 0 1 1 0 1 1 1 1\\n') == 0\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 27,
        "num_ids_4": 59
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 1 1 0 1 1 0 1 0 1 0\") == 2\nassert solution(\"5 1 1 0 0 0\") == 0\nassert solution(\"4 1 1 1\") == 0\n",
        "num_ids_2": 31,
        "num_ids_4": 42
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 3 4 5') == '2'\nassert solution('6\\n6 90 12 18 30 18') == '4'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 4 5\\n') == '1'\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == '2'\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == 3\nassert solution('5') == 5\nassert solution('10') == 10\n\nassert solution('5\\n1 2 3 4 5') == 2\nassert solution('5\\n2 4 6 8 10') == 2\n",
        "num_ids_2": 16,
        "num_ids_4": 39
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n1 2 3 4 5\n''') == '1'\nassert solution('''6\n6 90 12 18 30 18\n''') == '4'\nassert solution('''2\n6 9\n''') == '2'\n\n'''\nfrom itertools import combinations\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3 4') == '1\\n1\\n1\\n1'\nassert solution('5\\n1 2 3 4 5') == '2\\n1\\n1\\n1\\n1'\nassert solution('6\\n6 90 12 18 30 18') == '4\\n1\\n1\\n1\\n1'\n\n\"\"\"",
        "num_ids_2": 54,
        "num_ids_4": 84
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 3 4 5') == '1'\nassert solution('6\\n6 90 12 18 30 18') == '4'",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 4 5') == '2'\nassert solution('6\\n6 90 12 18 30 18') == '4'\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 90 12 18 30 18') == '4'\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\n\ncount = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        if a[i] % a[j] == 0:\n            count += 1\nprint(count)\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n1 2 3 4 5''') == \"1\"\nassert solution('''6\n6 90 12 18 30 18''') == \"4\"\nassert solution('''5\n1 2 3 4 5''') == \"1\"\nassert solution('''6\n6 90 12 18 30 18''') == \"4\"\nassert solution('''4\n1 2 3 4\n3 3 3 3''') == \"3\"",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 4 3 3 2') == 2\nassert solution('100') == 1\nassert solution('1 1 1 1 1 1') == 1\n\n-----End-----\n'''\n\nimport math\nimport sys",
        "num_ids_2": 21,
        "num_ids_4": 34
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\n1 2 4 3 3 2') == 2\n\"\"\"\n\nn = int(input())\ncoins = list(map(int, input().split()))\n\ncoins.sort()\nmin_coins = 0\n\nfor i in range(n):\n    if i == 0:\n        min_coins += 1\n    else:\n        if coins[i]!= coins[i-1]:\n            min_coins += 1\nprint(min_coins)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == '2'\nassert solution(\"3\\n1 2 3\") == '1'\n\"\"\"\n\nimport sys",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n1 2 4 3 3 2') == 2\nassert solution('1\\n100') == 1\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n1 2 4 3 3 2') == 2\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 4 3 3 2\") == \"2\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n1 2 3 3\n''') == '2'\n\nassert solution('''3\n1 1 1\n''') == '1'\n\nassert solution('''3\n1 2 3\n''') == '2'\n\nassert solution('''5\n2 1 1 2 2\n''') == '2'\n\nassert solution('''4\n1 1 1 2\n''') == '3'",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 3 3 2\") == 2\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 2 4 3 3 2\") == 2\n\"\"\"\n\na = int(input())\nb = list(map(int, input().split()))",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == \"3\"\nassert solution(\"5 3\\n0 0 0 0 1\") == \"2\"\nassert solution(\"5 10\\n0 0 0 0 0\") == \"-1\"\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == \"3\"\n\"\"\"\nimport sys\nimport collections\n\nassert not solution(sys.argv[1:]) == -1",
        "num_ids_2": 37,
        "num_ids_4": 78
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == 3\n\nassert solution(\"5 3\\n0 0 0 0 1\") == 2\n\nassert solution(\"5 10\\n0 0 0 0 0\") == -1\n\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == 3\n\n\"\"\"\n\nn, r = map(int, stdin.readline().split())\nhouse = list(map(int, stdin.readline().split()))",
        "num_ids_2": 33,
        "num_ids_4": 71
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 2\\n0 1 1 0 0 1') == '3'\nassert solution('5 3\\n0 0 0 0 1') == '2'\nassert solution('5 10\\n0 0 0 0 0') == '-1'\nassert solution('10 3\\n0 0 0 0 0\\n1 0 0 1 1\\n0 0 1 1 0\\n0 0 1 1 0') == '3'\n\"\"\"\n\nn, r = map(int, stdin.readline().split())\nhouse = [int(x) for x in stdin.readline().split()]\n\nheaters = [0] * n\n\nfor i in range(n):\n    if house[i] == 1:\n        heaters[i] = r\n\nfor i in range(r - 1):\n    last_index = 0\n    index = 0\n    for j in range(n):\n        if heaters[j] > 0:\n            if heaters[j] > heaters[index] and index == 0:\n                index = j\n            elif heaters[j] > heaters[index]:\n                index = j\n            last_index = j\n    if last_index!= 0:\n        heaters[index] += 1\n        for j in range(index + 1, last_index + 1):\n            heaters[j] = 1\n    else:\n        break\n\nprint(n - sum(heaters))\n",
        "num_ids_2": 37,
        "num_ids_4": 95
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 0 0 0 1\") == 3\nassert solution(\"5 3\\n0 0 1 1 0 1\") == 2\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == 3\nassert solution(\"10 10\\n0 0 0 0 0 0 0 0 0 0 1\") == -1\nassert solution(\"10 10\\n0 0 0 0 0 0 0 0 0 0 0 1\") == -1",
        "num_ids_2": 33,
        "num_ids_4": 77
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n6 2\n0 1 1 0 0 1\n''') == '3'\n\nassert solution('''\n5 3\n0 0 0 0 1\n''') == '2'\n\nassert solution('''\n5 10\n0 0 0 0 0\n''') == '-1'\n\nassert solution('''\n10 3\n0 0 1 1 0 1 0 0 0 1\n''') == '3'\n\n\n----\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 2\\n0 1 1 0 0 1') == '3'\nassert solution('5 3\\n0 0 0 0 1') == '2'\nassert solution('5 10\\n0 0 0 0 0') == '-1'\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1') == '3'",
        "num_ids_2": 37,
        "num_ids_4": 79
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == 3\nassert solution(\"5 3\\n1 0 0 0 1\") == 2\nassert solution(\"5 10\\n0 0 0 0 0\") == -1\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == 3\n\n\"\"\"\n\nfrom collections import deque\n",
        "num_ids_2": 33,
        "num_ids_4": 71
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''6 2\n0 1 1 0 0 1\n''') == '3'\n\nassert solution('''5 3\n0 0 0 0 1\n''') == '2'\n\nassert solution('''5 10\n0 0 0 0 0\n''') == '-1'\n\nassert solution('''10 3\n0 0 1 1 0 1 0 0 0 1\n''') == '3'\nprint('The local tests are done. Click on \"Check\" for more real tests.')",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 3\\n0 0 0 0 0 0\\n\") == '3'\nassert solution(\"5 10\\n0 0 0 0 0 0\\n\") == '-1'\nassert solution(\"6 2\\n0 1 1 0 0 1\\n\") == '3'\nassert solution(\"7 2\\n0 1 1 1 0 0 1\\n\") == '2'\nassert solution(\"8 2\\n0 1 1 1 1 0 0 1\\n\") == '4'\n",
        "num_ids_2": 43,
        "num_ids_4": 86
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 2\\n0 1 1 0 0 1') == 3\n\nassert solution('5 3\\n0 0 0 0 1') == 2\n\nassert solution('5 10\\n0 0 0 0 0') == -1\n\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1') == 3\nassert solution('10 2\\n0 0 0 0 1') == 2\n\nprint('Success')\n",
        "num_ids_2": 33,
        "num_ids_4": 71
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\nassert solution('6') == '3'\nassert solution('9') == '4'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == 3\n\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '3'\nassert solution('7') == '5'\nassert solution('12') == '7'\n\"\"\"\nimport math\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3) == '3'\nassert solution(10) == '4'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n') == '3'\nassert solution('1\\n') == '0'\nassert solution('2\\n') == '2'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3) == 3\nassert solution(5) == 3\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == 3\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"0\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3\"\n\nassert solution(\"4\") == \"1\"\n\nassert solution(\"10\") == \"7\"\n\n\"\"\"\n\nimport sys\n\n\"\"\"\n\n1. Open file in read mode.\n2. Read the whole file in one go.\n3. Close file.\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3) == 3\nassert solution(12) == 2\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"(((())\") == 3\nassert solution(\"()())\") == 0\nassert solution(\"((())\") == 0\nassert solution(\"(()(\") == 1\nassert solution(\"(()())\") == 1\n",
        "num_ids_2": 19,
        "num_ids_4": 38
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 0\nassert solution('()') == 1\nassert solution(')(') == 0\nassert solution('()()') == 1\nassert solution('((()))') == 1\n",
        "num_ids_2": 16,
        "num_ids_4": 33
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"((()))\") == 1\nassert solution(\"())\") == 0\nassert solution(\"()\") == 0\nassert solution(\"(((()())())())\") == 1\nassert solution(\"(((((((())))))\") == 2\n",
        "num_ids_2": 18,
        "num_ids_4": 39
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"()()\") == 0\nassert solution(\"(()())\") == 0\nassert solution(\"(()())()\") == 0\nassert solution(\"()(())\") == 0\nassert solution(\"((()(())()))\") == 0\n",
        "num_ids_2": 19,
        "num_ids_4": 40
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"(((())\") == 3\nassert solution(\"(())((()())\") == 1\nassert solution(\"(((())))(\") == 1\n\nprint(\"All tests passed.\")\n",
        "num_ids_2": 23,
        "num_ids_4": 35
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"()()\") == 0\nassert solution(\"()(()))\") == 2\nassert solution(\"))(\") == 0\nassert solution(\"(\") == 1\nassert solution(\"(((()()())())()())\") == 4\n",
        "num_ids_2": 20,
        "num_ids_4": 37
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('(((())') == 3\n\nassert solution('()()()') == 0\n\nassert solution('))((((') == 0\n\nassert solution('))((') == 3\n\nassert solution(')(') == 0\n\n\"\"\"\n\"\"\"\nSolution 1\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"(((()))\") == 3\nassert solution(\"(())\") == 0\nassert solution(\"))()((\") == 0\nassert solution(\"(\") == 1\nassert solution(\")\") == 1\n",
        "num_ids_2": 20,
        "num_ids_4": 38
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('(((())') == 3\nassert solution('()())()') == 3\nassert solution(')(') == 0\nassert solution(')())()(') == 3\nassert solution('))()())') == 0",
        "num_ids_2": 20,
        "num_ids_4": 39
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"()()\") == 1\nassert solution(\"()()))(((())\") == 2\nassert solution(\"))(((((\") == 3\nassert solution(\"(()())\") == 2\nassert solution(\"()((()))(()()(((()()(()))()(()()(()()(()))(()()((()()(())()(())()(())((()))()(()())(())()(())()(()((())(())()(())((()))((()((()((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"baaba\") == 2\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('bbaba') == 3\nassert solution('ab') == 1\nassert solution('') == 0\n\nsolution('')\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 25
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('asdfasdf') == 3\nassert solution('bbaba') == 3\nassert solution('aabbcc') == 2\nassert solution('zzzzz') == 0\n\nprint('Test finished.')\n\n\n-----",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaaabbbbbbaaaaaaa\") == 8\nassert solution(\"bbbb\") == 0\nassert solution(\"ab\") == 1\n\nstdin = \"\"\"fadddfc\ndf\n\"\"\"\nassert solution(stdin) == 4\n",
        "num_ids_2": 23,
        "num_ids_4": 40
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"\") == 0\nassert solution(\"tst\") == 1\nassert solution(\"tt\") == 1\nassert solution(\"et\") == 1\n",
        "num_ids_2": 15,
        "num_ids_4": 32
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"bbaba\") == 3, \"WA\"\nassert solution(\"bb\") == 0, \"WA\"\nassert solution(\"asdfasdf\") == 3, \"WA\"\nassert solution(\"abcde\") == 0, \"WA\"\nassert solution(\"aaabbbccc\") == 6, \"WA\"\n",
        "num_ids_2": 25,
        "num_ids_4": 53
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 3\nassert solution(\"baba\") == 2\nassert solution(\"aaba\") == 2\nassert solution(\"a\") == 1",
        "num_ids_2": 17,
        "num_ids_4": 35
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"test\") == 3\n\"\"\"\n\ns = list(stdin)\nt = list(stdin)\n\nwhile t:\n    for i in range(len(s)):\n        if s[i] == t[0]:\n            s.pop(i)\n            s.pop(i)\n            break\n    t.pop(0)\n\nprint(len(s))\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcd\") == 1\nassert solution(\"abcda\") == 0\nassert solution(\"abcde\") == 0\nassert solution(\"\") == 0\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == 10\n",
        "num_ids_2": 18,
        "num_ids_4": 34
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 2\nassert solution(\"tt\") == 0\nassert solution(\"et\") == 1\n\n\"\"\"\n\n\nimport unittest\n",
        "num_ids_2": 17,
        "num_ids_4": 33
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 1 1\") == 2\n\"\"\"\n\na, b, c, d = map(int, stdin.split(' '))\n\nmax_p = 0\n\nfor i in range(a, b + 1):\n    for j in range(c, d + 1):\n        p = i * j\n        if p > max_p:\n            max_p = p\n\nprint(max_p)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 1 1') == '2'\nassert solution('2 1 1 1') == '2'\nassert solution('1 2 1 1') == '2'\nassert solution('2 2 1 1') == '4'\nassert solution('2 2 2 1') == '4'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5,5,5,5) == 5\nassert solution(1,2,1,1) == 2\n\nprint(solution(input()))\n\n\"\"\"\n\n\"\"\"\n\nWrite a program that takes an integer n as input and adds all numbers from 1 to n.\n\n-----Constraints-----\n - n is an integer within the range [1..100,000]\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn\n\n-----Output-----\nPrint the sum of all integers from 1 to n.\n\n-----Sample Input-----\n5\n\n-----Sample Output-----\n15\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 1\") == 2\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1 2 1 1''') == 2\nassert solution('''1 2 1 1''') == 2\nassert solution('''1 2 1 1''') == 2\nassert solution('''1 2 1 1''') == 2\nassert solution('''1 2 1 1''') == 2\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 1 1') == 2\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a=1, b=2, c=1, d=1) == 2\nassert solution(a=2, b=1, c=1, d=1) == 2\nassert solution(a=1, b=1, c=1, d=1) == 1\nassert solution(a=1, b=1, c=1, d=2) == 1\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 2 2\\n') == '2'\n\nassert solution('2\\n1 1\\n') == '0'\n\nassert solution('4\\n4 4\\n') == '1'\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 50
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n9 1 4 4 6 7') == '2'\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n9 1 4 4 6 7\") == \"2\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 2 6 1') == '2'\nassert solution('8 9 10 3 1') == '0'\nassert solution('6 1 2 3 4 5') == '2'\n\"\"\"\nimport sys\nfrom typing import List",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n8\n9 1 4 4 6 7\n''') == '2'\nprint('Test pass.')\n\n---\n\nPython 3.8.1\n\nprint(\n    solution(\n        input()\n    )\n)\n\nTest pass.\n\n---\n\n'''",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 1 4 4 6 7\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 2 3\") == \"2\"\nassert solution(\"5 1 3 2 3\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n5 3') == '2'\n\"\"\"\n\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 1 1 1 1\\n1 1 1 1 1 1\") == \"2\"\n\nassert solution(\"4 1 1 1 1 1\\n1 1 1 1 1 1\") == \"3\"\n\nassert solution(\"9 1 4 4 6 7\\n1 1 1 1 1 1\") == \"2\"\n\nassert solution(\"6 1 1 1 1 1\\n1 1 1 1 1 1\") == \"2\"\n\nassert solution(\"9 1 1 1 1 1\\n1 1 1 1 1 1\") == \"0\"",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 2 3') == '2'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == '3'\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == 3\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 24 21 23\") == 3\n\"\"\"\n\n\nimport sys\n\n\nn, h, l, r = map(int, sys.stdin.readline().split())\narr = list(map(int, sys.stdin.readline().split()))\n\n\nans = 0\nfor i in range(n):\n    a = arr[i]\n    if a > l and a < r:\n        ans += 1\nprint(ans)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 24 21 23\\n16 17 14 20 20 11 22') == '3'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == '3'\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\n\"\"\"\nfrom collections import namedtuple\n\nPoint = namedtuple('Point', ['x', 'y'])\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 24 21 23\\n16 17 14 20 20 11 22') == '3'\nprint(solution(stdin))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 24 21 23') == '3'\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\nassert solution(\"16 17 14 20 20 11 22\") == \"3\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49\\n') == '4'\nassert solution('5\\n2 10 50 110 250\\n') == '1'\nassert solution('6\\n4 7 12 100 150 199\\n') == '3'\n\n\"\"\"\n",
        "num_ids_2": 43,
        "num_ids_4": 63
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49') == '4'\nassert solution('5\\n2 10 50 110 250') == '1'\nassert solution('6\\n4 7 12 100 150 199') == '3'\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 57
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 57
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 10 50 110 250\") == \"1\"\nassert solution(\"6 4 7 12 100 150 199\") == \"3\"\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49') == '4'\nassert solution('5\\n2 10 50 110 250') == '1'\nassert solution('6\\n4 7 12 100 150 199') == '3'\n\"\"\"\n\nimport sys\nfrom bisect import bisect",
        "num_ids_2": 39,
        "num_ids_4": 57
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\\n\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\"\n",
        "num_ids_2": 43,
        "num_ids_4": 63
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49') == '4'\nassert solution('5\\n2 10 50 110 250') == '1'\nassert solution('6\\n4 7 12 100 150 199') == '3'\n",
        "num_ids_2": 39,
        "num_ids_4": 57
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == 4\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49') == '4'\nassert solution('5\\n2 10 50 110 250') == '1'\nassert solution('6\\n4 7 12 100 150 199') == '3'",
        "num_ids_2": 39,
        "num_ids_4": 57
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == 4\nassert solution(\"5\\n2 10 50 110 250\") == 1\nassert solution(\"6\\n4 7 12 100 150 199\") == 3\n\n\"\"\"",
        "num_ids_2": 35,
        "num_ids_4": 51
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5\n2 4 8 3 6\n\"\"\") == '1 2'\nassert solution(\"\"\"\n5\n5 2 11 3 7\n\"\"\") == '2 4'\nassert solution(\"\"\"\n6\n2 5 10 1 10 2\n\"\"\") == '1 4'\n",
        "num_ids_2": 10,
        "num_ids_4": 15
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\nassert solution(\"5\\n5 2 11 3 7\") == \"2 4\"\nassert solution(\"6\\n2 5 10 1 10 2\") == \"1 4\"\n\"\"\"\nfrom math import gcd\nfrom functools import reduce",
        "num_ids_2": 36,
        "num_ids_4": 55
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 11 3 7\") == \"1 2\"\nassert solution(\"6 5 10 1 10 2\") == \"1 4\"\nprint(solution(input()))\n\n\n-----Explanation-----\nInput:\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 10^6$) \u2014 the number of elements in $a$.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^7$), where $a_i$ is the $i$-th element of $a$.\n\nOutput:\nPrint two integers $i$ and $j$ ($1 \\le i < j \\le n$) such that the value of $lcm(a_i, a_j)$ is minimum among all valid pairs $i, j$. If there are multiple answers, you can print any.\n\nOne such pair is (1, 2), because 2 is the only element that is divisible by both 2 and 5, and 1 is the minimum number among all divisors of 2.\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 4 8 3 6\") == \"1 2\"\nassert solution(\"7\\n2 5 10 1 10 2\") == \"2 4\"\nassert solution(\"11\\n2 5 10 1 10 2\") == \"1 4\"\n\"\"\"\nimport sys\nfrom typing import List, Tuple",
        "num_ids_2": 37,
        "num_ids_4": 56
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 11 3 7\") == \"1 2\"\nassert solution(\"6 2 11 3 7\") == \"1 4\"\nassert solution(\"2 4 8 3 6\") == \"1 2\"\n\n----\nimport math\n\nn = int(input())\na = list(map(int, input().split()))\nlcm = a[0]\nfor i in range(n):\n    lcm = math.gcd(lcm, a[i])\nfor i in range(n):\n    for j in range(i, n):\n        if math.gcd(a[i], a[j])!= lcm:\n            print(i + 1, j + 1)\n            break\n\n----\n",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 8 7') == '4'\nassert solution('3 4 8 10') == '3 4'\nassert solution('4 8 12 13') == '4 1'\nassert solution('4 8 12 15') == '1 2'\nassert solution('5 8 15 17') == '5 1'\n\n\"\"\"\n\nfrom fractions import gcd\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\nassert solution(\"6\\n2 5 10 1 10 2\") == \"1 4\"\n\nprint(\"Success\")\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 3 6 7 8') == '1 2'\n\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\nassert solution('6\\n2 5 10 1 10 2') == '1 4'\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '0'\nassert solution('121') == '021'\nassert solution('10011') == '10110'\nassert solution('110010111') == '111011011'\nassert solution('12210011101010') == '122110111101010'\n",
        "num_ids_2": 20,
        "num_ids_4": 48
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100101\") == \"101110\"\nassert solution(\"11101010\") == \"1011010\"\nassert solution(\"10111010\") == \"1011010\"\nassert solution(\"11101101010\") == \"10111010\"\nassert solution(\"11101101010\") == \"10111010\"\n",
        "num_ids_2": 26,
        "num_ids_4": 55
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"123\") == \"132\"\nassert solution(\"2\") == \"0\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"120110\") == \"120120\"\nassert solution(\"211200\") == \"211200\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"010\"\nassert solution(\"2\") == \"1010\"\nassert solution(\"11\") == \"101010\"\nassert solution(\"10\") == \"101010\"\nassert solution(\"111\") == \"101101010\"\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('121') == '021'\nassert solution('211200') == '211200'\nassert solution('120110') == '120120'\nassert solution('111110') == '111120'\nassert solution('111011') == '111012'\n",
        "num_ids_2": 22,
        "num_ids_4": 48
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"0\") == \"0\"\nassert solution(\"211200\") == \"211200\"\nassert solution(\"011110\") == \"011110\"\nassert solution(\"011110\") == \"011110\"\n\n\"\"\"\n\nfrom sys import stdin\nimport math\n",
        "num_ids_2": 20,
        "num_ids_4": 46
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('2112') == '1221'\nassert solution('02112') == '1221'\nassert solution('21122112') == '1212212'\nassert solution('22212211221') == '12212212212'\n",
        "num_ids_2": 20,
        "num_ids_4": 47
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('121') == '021'\nassert solution('001100') == '111000'\nassert solution('011110') == '111010'\nassert solution('101010') == '111010'\nassert solution('110110') == '111010'\n",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('121') == '021'\nassert solution('1211') == '12121'\nassert solution('211200') == '211220'\nassert solution('121') == '021'\nassert solution('1211') == '12121'\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\nprint('Success')\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 3\\n2 3\") == \"2\"\n\"\"\"\n\nimport math",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n0\n1\n2''') == '4'\nassert solution('''3\n0\n1\n1''') == '4'\nassert solution('''3\n0\n2\n2''') == '1'\nassert solution('''6\n1\n2\n2\n4\n4\n3''') == '4'\nassert solution('''6\n3\n2\n2\n4\n4\n3''') == '1'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n3\\n\") == \"6\"\nassert solution(\"4 1\\n4\\n\") == \"4\"\nassert solution(\"5 2\\n2\\n4\\n6\\n8\\n10\\n\") == \"12\"\n\n\"\"\"\n\nimport unittest\n",
        "num_ids_2": 32,
        "num_ids_4": 60
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n6 1\n3\n''') == '4'\nassert solution('''\n4 2\n0\n1\n2\n''') == '0'\nassert solution('''\n4 2\n0\n1\n1\n''') == '0'\nassert solution('''\n4 2\n1\n1\n0\n''') == '2'\n\nprint('Success')\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 1\\n3\") == \"4\"\nassert solution(\"6 1\\n3\\n3\\n3\\n3\") == \"8\"\nassert solution(\"5 5\\n3\\n3\\n3\\n3\\n3\") == \"5\"\n\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 37,
        "num_ids_4": 63
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1\\n3\\n') == '3'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readlines()\n\nN, M = list(map(int, input[0].split()))\na = list(map(int, input[1:]))",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\\n3\\n\") == \"6\\n\"\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2 4\\n\") == \"2\"\n\"\"\"\n\n\"\"\"\nGiven a point on the number line, you are required to find the minimum possible absolute value of the coordinate of the point after taking K moves in the positive or negative direction.\nNote: You are allowed to move in the positive direction only.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nX K D\n\n-----Output-----\nPrint the minimum possible absolute value of the coordinate of the destination.\n\n-----Sample Input-----\n3 2 4\n\n-----Sample Output-----\n2\n\nTakahashi is now at coordinate 3. It is optimal to move from coordinate 3 to (3 + 4 =) 7 or (3 - 4 =) 1, which both have absolute value of 2.\n\"\"\"\n\n\"\"\"\nimport re\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 2 4') == '2'\n\"\"\"\n\nfrom math import gcd\nfrom typing import List\n\nclass Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return f'{self.x} {self.y}'\n\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        return Vector(self.x * other, self.y * other)\n\n    def __abs__(self):\n        return abs(self.x) + abs(self.y)\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __ne__(self, other):\n        return self.x!= other.x or self.y!= other.y\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 2 4') == '2'\nassert solution('1 1 1') == '0'\nassert solution('10000000 1 10000000 1000000') == '1'\nassert solution('-10000000 -1 10000000 -1000000') == '-1'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 60
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 4\") == \"2\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"2 2 4\") == \"2\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"1 9 1\") == \"0\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 2 4') == '2'\nassert solution('3 5 8') == '3'\nassert solution('1 4 2') == '1'\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3\\n4 5 6') == '1\\n1'\n\nassert solution('-1 -2 3\\n4 -5 6') == '-2\\n-2'\n\nassert solution('0 -0 3\\n0 0 6') == '0\\n0'\n",
        "num_ids_2": 45,
        "num_ids_4": 66
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 2 4') == '2'\nassert solution('1 3 5') == '0'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11') == '2'\nassert solution('14') == '0'\nassert solution('61441') == '2'\nassert solution('571576') == '10'\nprint('All tests passed.')\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == 1\nassert solution('2') == 0\nassert solution('3') == 0\nassert solution('4') == 0\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == 2\nassert solution('61441') == 10\nassert solution('2128506') == 3\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 27
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == 1\nassert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 10\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 33
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"61441\") == 2\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(11) == 2\nassert solution(14) == 0\nassert solution(61441) == 2\nassert solution(2128506) == 3\n\"\"\"\nimport math\n\nn = int(input())\n\nprint(math.floor(math.sqrt(n)))",
        "num_ids_2": 16,
        "num_ids_4": 35
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 10\nassert solution('571576') == 3\n\"\"\"\n\nimport math\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 35
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\") == 2\nassert solution(\"14\") == 0\nassert solution(\"61441\") == 2\nassert solution(\"571576\") == 10\n",
        "num_ids_2": 16,
        "num_ids_4": 35
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11') == 2\nassert solution('61441') == 3\nassert solution('2128506') == 10\nprint('all tests passed')\n",
        "num_ids_2": 17,
        "num_ids_4": 27
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\") == 2\nassert solution(\"14\") == 0\nassert solution(\"61441\") == 3\nassert solution(\"571576\") == 10\n",
        "num_ids_2": 16,
        "num_ids_4": 35
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == 27\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('3') == 27\nassert solution('23') == 1021\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 25
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(expected)\n\n---\n\nInput\n20\n\nOutput\n3072\n\n---\n\nInput\n40\n\nOutput\n2660700\n\n---\n\nInput\n2\n\nOutput\n9\n\n---\n\nInput\n4\n\nOutput\n15\n\n---\n\nInput\n8\n\nOutput\n777777\n\n---\n\nInput\n10\n\nOutput\n12345678910111213141516171819\n\"\"\"\n\nimport math",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6') == 6 * 5 * 4 * 3 * 2 * 1\n\"\"\"\n\na = int(input())\n\noutput = 1\nfor x in range(1, a+1):\n    output *= x\n\nprint(output)\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == 25\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"27\"\n\"\"\"\n\na = int(input())\nnums = [1, 4, 16, 64, 256, 1024, 4096, 16384, 65536, 262144]\n\nprint(nums[a - 1])\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3) == 27\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(3)) == '27'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '1'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '6'\nassert solution('4') == '24'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"27\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\nassert solution('48') == '0'\nassert solution('927') == '1'\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13') == 1\nassert solution('927') == 1\nassert solution('48') == 0\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 25
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(13) == \"1\"\nassert solution(927) == \"1\"\nassert solution(48) == \"0\"\n\"\"\"\n\na = int(input())",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\nassert solution('76') == '0'\nassert solution('230') == '1'\n\"\"\"\n\nimport sys",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('13') == 1\nassert solution('927') == 1\nassert solution('48') == 0\nprint('all tests passed...')\n",
        "num_ids_2": 17,
        "num_ids_4": 25
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('13') == '1'\n\"\"\"\n\na = int(input())\nprint(int(a / 100 in range(13, 20) or a / 10 in range(13, 20) or a / 1 in range(13, 20)))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13') == '1'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('927') == '1'\nassert solution('48') == '0'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13') == '1'\n\"\"\"\n\n\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2 3 1') == 4\n\n-----Test input-----\n\n1\n2 1\n\n-----Expected output-----\n\n1\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"4\\n2 5 3 1\"\n) == \"4\"\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5 3 1') == 4\nprint(solution('2 5 3 1'))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 5 3 1') == 4\n\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 3 1') == 4\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 3 1\") == \"4\"\nprint(solution(\"4 2 3 1\"))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5 3 1') == '4'\n\nassert solution('1 2 3 4') == '0'\n\nassert solution('2 2 2') == '0'\n\nassert solution('0 0 0 0') == '0'\n\nassert solution('1 1 1 1') == '0'\n\nprint(solution(input()))\n\n-----\n1\n\n0\n\n0\n\n0\n\n\n-----\n2\n\n2 1 1\n\n0\n\n2\n\n0\n\n-----\n3\n\n2 5 3 1\n\n4\n\n2\n\n0\n\n-----\n4\n\n2 5 3 1\n\n4\n\n2\n\n0\n\n-----\n5\n\n0 5 3 1\n\n4\n\n2\n\n0\n\n-----\n6\n\n0 0 0 0\n\n0\n\n0\n\n0\n\n-----\n7\n\n0 0 0 0 0\n\n0\n\n0\n\n0\n\n0\n\n-----\n8\n\n0 0 0 0 0 0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n-----\n9\n\n0 0 0 0 0 0 0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n",
        "num_ids_2": 26,
        "num_ids_4": 51
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 3 1\") == 4\n\nprint(solution(input()))\n\"\"\"\n\nn = int(input())\n\ns = input()\n\ns_list = list(map(int, s.split()))\n\nmax_xor = 0\n\nfor i in range(n):\n    xor = 0\n    for j in range(i, n):\n        xor ^= s_list[j]\n        if xor > max_xor:\n            max_xor = xor\n\nprint(max_xor)",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 5 1\") == 4\n\n-----Test 2-----\nInput\n1\n7\n\nOutput\n6\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 3 1\") == 4\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"",
        "num_ids_2": 22,
        "num_ids_4": 51
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5\\n8 7') == '2'\nassert solution('8 1') == '8'\nassert solution('6 10') == '1'\nassert solution('999999733 999999732') == '999999733'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 51
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\n\"\"\"\n\nfrom sys import stdin\nfrom itertools import combinations",
        "num_ids_2": 66,
        "num_ids_4": 132
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\n",
        "num_ids_2": 22,
        "num_ids_4": 51
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733') == '2\\n8\\n1\\n999999733\\n1'\n\"\"\"\n",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 7') == '2'\nassert solution('8 1') == '8'\nassert solution('6 10') == '1'\nassert solution('999999733 999999732') == '999999733'\nassert solution('999999733 999999733') == '1'\n\"\"\"\nimport sys\nimport math\nsys.setrecursionlimit(5*10**6)\n",
        "num_ids_2": 22,
        "num_ids_4": 51
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 7') == '2'\nassert solution('8 1') == '8'\nassert solution('6 10') == '1'\nassert solution('999999733 999999732') == '999999733'\nassert solution('999999733 999999733') == '1'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 22,
        "num_ids_4": 51
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\n",
        "num_ids_2": 66,
        "num_ids_4": 132
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\") == 1\n\"\"\"\nimport sys\nfrom collections import Counter",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\nprint('Test pass.')",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\\n\") == \"1\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2') == 1\n\"\"\"\n\nimport unittest\n\nclass SolutionTest(unittest.TestCase):\n    def test_1(self):\n        pass\n\nunittest.main()\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"./sample_input.txt\") == \"1\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\"\"\"\n\nN, M = map(int, stdin.readline().split())\nswitches = {index: 0 for index in range(1, N + 1)}\nbulbs = {index: 0 for index in range(1, M + 1)}\n\nfor _ in range(N):\n    switch_input = list(map(int, stdin.readline().split()))\n    for i in range(len(switch_input) - 1):\n        switches[switch_input[i + 1]] += switch_input[i]\n\nfor i in range(1, M + 1):\n    bulbs[i] += switches[i] % 2\n\nprint(sum([1 for i in bulbs.values() if i == M]))\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\"\"\"\n\nN, M = map(int, input().split())\nprint(f\"N: {N}, M: {M}\")\n\ndp = {}\ndp[(0, 0)] = 1\nfor i in range(N):\n    dp[(i + 1, 0)] = 0\nfor i in range(M):\n    k, *states = map(int, input().split())\n    print(f\"k: {k}, states: {states}\")\n    dp[(0, i + 1)] = 0\n    for j in range(N):\n        for k in range(j + 1):\n            dp[(j + 1, i + 1)] += dp[(j, i)] if (k + j) % 2 == 0 and k < j and states[k] == 1 else dp[(j, i)] * 0.5\nprint(f\"{dp[(N, M)]}\")\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 9 0\") == \"5.0\"\n\nassert solution(\"1 1 1 1\") == \"0.0\"\n\nassert solution(\"0 1 1 1\") == \"1.0\"\n\nassert solution(\"3 3 3 3\") == \"0.0\"\n\"\"\"\n\nimport math\nimport sys\n\na, b, h, m = map(int, sys.stdin.read().split())\nprint(math.sqrt((a**2+b**2)*math.cos(math.radians(h))*math.cos(math.radians(m))))\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\"\n\nA, B, H, M = (int(i) for i in stdin.split())\n\nx1 = (A+B)/2\ny1 = A/2\n\nx2 = x1 + (B*0.6)\ny2 = (A+B)/2 + B/2\n\nx3 = x1 + (B*0.6)\ny3 = (A+B)/2 - B/2\n\nx = x2 - x1\ny = y2 - y1",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 9 0') == '5.0'\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\n\n\"\"\"\n\nfrom math import pi\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4') == '8'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == \"8\"\nassert solution(\"3 1\\n1 1 1\") == \"6\"\nassert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\"\n",
        "num_ids_2": 34,
        "num_ids_4": 62
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4\") == \"8\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == \"8\"\nassert solution(\"3 1\\n1 1 1\") == \"6\"\nassert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 34,
        "num_ids_4": 62
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"5 4\n1 4 5 60 4\"\"\") == \"8\"\n\nassert solution(\"\"\"3 1\n1 1 1\"\"\") == \"6\"\n\nassert solution(\"\"\"15 2\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\"\"\") == \"97\"\n\"\"\"\"\"\"\n\n\"\"\"\nhttps://stepik.org/lesson/324755/step/12?unit=307930\n\"\"\"\n\"\"\"\n\u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c: O(n log n) (O(n) \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0432\u044b\u0431\u043e\u0440\u0430)\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b:\n\u041f\u0440\u0438\u043c\u0435\u0440 1.\n\u0412\u0432\u043e\u0434:\n4 5\n1 4 5 60 4\n\u0412\u044b\u0432\u043e\u0434:\n8\n\n\u041f\u0440\u0438\u043c\u0435\u0440 2.\n\u0412\u0432\u043e\u0434:\n3 1\n1 1 1\n\u0412\u044b\u0432\u043e\u0434:\n6\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(a='7 5 3 4 5 6 8', m=5) == 7\nassert solution(a='1 2 3 4 5 6 7 8 9', m=3) == 9\nassert solution(a='4 1 5 3 7 8 4 6 2 9', m=6) == 8\nassert solution(a='4 1 5 3 7 8 4 6 2 9', m=6) == 8\n\n\"\"\"\nimport sys\n",
        "num_ids_2": 42,
        "num_ids_4": 88
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"8\"\nassert solution(\"1 1\\n1\") == \"6\"\nassert solution(\"3 1\\n1 1 1\") == \"6\"\n",
        "num_ids_2": 42,
        "num_ids_4": 58
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 4 5 60 4\") == 8\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == '8'\n\"\"\"\n\nfrom typing import List, Set\n\nMAX_INT = 2 ** 31 - 1\nMIN_INT = -2 ** 31\n\n\nclass Solution:\n    def median(self, seq: List[int], l: int, r: int) -> int:\n        if l == r:\n            return seq[l]\n\n        if l + 1 == r:\n            return min(seq[l], seq[r])\n\n        mid = (l + r) // 2\n        left_arr = self.median(seq, l, mid)\n        right_arr = self.median(seq, mid + 1, r)\n        return self.merge_arr(left_arr, right_arr)\n\n    def merge_arr(self, arr1: List[int], arr2: List[int]) -> int:\n        if len(arr1) == 0:\n            return arr2[0]\n\n        if len(arr2) == 0:\n            return arr1[0]\n\n        if len(arr1) == 1:\n            return min(arr1[0], arr2[0])\n\n        if len(arr2) == 1:\n            return min(arr1[0], arr2[0])\n\n        return self.get_median_value(arr1, arr2)\n\n    def get_median_value(self, arr1: List[int], arr2: List[int]) -> int:\n        i = 0\n        j = 0\n        median_value = 0\n\n        while i < len(arr1) and j < len(arr2):\n            if arr1[i] < arr2[j]:\n                median_value = arr1[i]\n                i += 1\n            else:\n                median_value = arr2[j]\n                j += 1\n\n        if i == len(arr1):\n            median_value = arr2[j]\n        elif j == len(arr2):\n            median_value = arr1[i]\n\n        return median_value\n\n    def find_pairs_count(self, arr: List[int], m: int) -> int:\n        arr.sort()\n        return self.count_pairs_with_median(arr, m, len(arr))\n\n    def count_pairs_with_median(self, arr: List[int], m: int, n: int) -> int:\n        if n == 0:\n            return 0\n\n        if n == 1:\n            if m == arr[0]:\n                return 1\n            return 0\n\n        if m == arr[n - 1]:\n            return 1\n\n        l = 0\n        r = n - 1\n        median = self.median(arr, l, r)\n\n        if median == m:\n            return 1\n\n        if median < m:\n            l = n - 1\n            while l > 0:\n                l -= 1\n                r = n - 1\n                median = self.median(arr, l, r)\n                if median == m:\n                    return 1\n                if median > m:\n                    return 0\n\n        if median > m:\n            r = n - 1\n            while r > 0:\n                r -= 1\n                median = self.median(arr, l, r)\n                if median == m:\n                    return 1\n                if median < m:\n                    return 0\n\n        return self.count_pairs_with_median(arr, m, n - 1) + self.count_pairs_with_median(arr, m, n - 1)\n\n    def find_pairs(self, arr: List[int], m: int) -> int:\n        arr.sort()\n        return self.count_pairs_with_median(arr, m, len(arr))\n\n    def count_pairs_with_median_fast(self, arr: List[int], m: int) -> int:\n        if len(arr) == 0:\n            return 0\n\n        if len(arr) == 1:\n            if m == arr[0]:\n                return 1\n            return 0\n\n        l = 0\n        r = len(arr) - 1\n\n        if m < arr[r]:\n            return 0\n\n        if m > arr[l]:\n            return self.count_pairs_with_median_fast(arr[:r], m)\n\n        while l < r:\n            median = (l + r) // 2\n            if arr[median] == m:\n                return 1\n\n            if m < arr[median]:\n                r = median - 1\n            else:\n                l = median + 1\n\n        return self.count_pairs_with_median_fast(arr[:l], m) + self.count_pairs_with_median_fast(arr[l:], m)\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == \"8\"\n\"\"\"\n\nimport collections\nfrom typing import List\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'",
        "num_ids_2": 84,
        "num_ids_4": 102
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 4\\n1 3\\n1 2\\n2 3') == '6'",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n",
        "num_ids_2": 84,
        "num_ids_4": 102
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n''') == '6\\n2\\n1 4'\n\nassert solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''') == '7\\n2\\n3 2'\n\nassert solution('''1 0\n1000000\n''') == '0\\n0'\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5') == '6\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n\nprint(solution(input()))\n",
        "num_ids_2": 80,
        "num_ids_4": 98
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == '6\\n2\\n1 4'\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == '7\\n2\\n3 2'\nassert solution(\"1 0\\n1000000\\n\") == '0\\n0'\n",
        "num_ids_2": 88,
        "num_ids_4": 108
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\") == \"6\\n2\\n1 4\\n\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\\n\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\\n\"\nassert solution(\"1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1",
        "num_ids_2": 84,
        "num_ids_4": 1061
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n\n\"\"\"",
        "num_ids_2": 84,
        "num_ids_4": 102
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n",
        "num_ids_2": 84,
        "num_ids_4": 102
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5') == '7\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4') == '7\\n2\\n3 2'\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\nassert solution(\"abd\") == \"No\"\n\nprint(\"Successfully submitted\")\n",
        "num_ids_2": 23,
        "num_ids_4": 34
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abc\") == \"Yes\"\nassert solution(\"abce\") == \"No\"\nassert solution(\"abcde\") == \"No\"\nassert solution(\"abcd\") == \"Yes\"\nassert solution(\"ab\") == \"No\"\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nfced\\nxyz\\nr\") == \"Yes\\nYes\\nYes\\n\"\nassert solution(\"4\\nfced\\nxyz\\nr\") == \"Yes\\nYes\\nYes\\n\"\nassert solution(\"4\\nfced\\nxyz\\nr\") == \"Yes\\nYes\\nYes\\n\"\nassert solution(\"4\\nfced\\nxyz\\nr\") == \"Yes\\nYes\\nYes\\n\"\n\nassert solution(\"3\\nfced\\nxyz\\nr\") == \"Yes\\nYes\\nYes\\n\"\n",
        "num_ids_2": 56,
        "num_ids_4": 112
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"Yes\"\nassert solution(\"abcd\") == \"No\"\nassert solution(\"abcdefghijklmnopqrstuvwxyzabcd\") == \"No\"\nassert solution(\"fcedxyzr\") == \"Yes\"\nassert solution(\"fcedxyz\") == \"Yes\"\n",
        "num_ids_2": 34,
        "num_ids_4": 73
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\nfced\\nxyz\\nr\\ndabcef\\naz\\naa\\nbad\\nbabc\\n\") == 'Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo'\nassert solution(\"8\\nfced\\nxyz\\nr\\ndabcef\\naz\\naa\\nbad\\nbabc\\n\") == 'Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo'\n",
        "num_ids_2": 120,
        "num_ids_4": 120
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"fced\\nxyz\\nr\") == \"Yes\\nYes\\nYes\"\n\"\"\"\n\n\nfrom typing import List\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('fced\\n') == 'Yes'\nassert solution('xyz\\n') == 'Yes'\nassert solution('r\\n') == 'Yes'\nassert solution('dabcef\\n') == 'No'\n",
        "num_ids_2": 21,
        "num_ids_4": 46
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == '6\\n2\\n4 1'\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == '7\\n2\\n3 2'\nassert solution(\"1 0\\n1000000\") == '0\\n0'\n",
        "num_ids_2": 84,
        "num_ids_4": 102
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5') == '7\\n2\\n4 1'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n",
        "num_ids_2": 80,
        "num_ids_4": 140
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n",
        "num_ids_2": 84,
        "num_ids_4": 102
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '7\\n2\\n4 1'\nassert solution('1 0\\n1000000') == '0\\n0'\nassert solution('1 1\\n1000000') == '0\\n0'\n\n\"\"\"\n\nimport math\nimport sys\n\nMAX_INT = 2 ** 31\nMIN_INT = -(2 ** 31)\n\nn, m = [int(i) for i in input().split()]\narr = [int(i) for i in input().split()]\nsegments = []\nfor _ in range(m):\n    segments.append([int(i) for i in input().split()])\n\nresult, count = -MAX_INT, 0\nmax_value = -MAX_INT\nfor i in range(m):\n    left, right = segments[i][0], segments[i][1]\n    if left > n or right > n:\n        continue\n\n    min_value, max_value = MAX_INT, 0\n    for j in range(left, right + 1):\n        max_value = max(max_value, arr[j])\n        min_value = min(min_value, arr[j])\n    result = max(result, max_value - min_value)\n    count += 1\n\nprint(result)\nprint(count)\nfor i in range(count):\n    print(i, end=' ')",
        "num_ids_2": 60,
        "num_ids_4": 78
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n2 2\\n2 3\\n2 4\") == \"7\"\nassert solution(\"5 4\\n3 1\\n4 2\\n4 3\\n3 4\") == \"6\"\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"7\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"",
        "num_ids_2": 84,
        "num_ids_4": 102
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5') == '6\\n2\\n4 1'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\n",
        "num_ids_2": 80,
        "num_ids_4": 140
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == '6\\n2\\n4 1'\nassert solution(\"2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == '7\\n2\\n3 2'\nassert solution(\"1000000\\n\") == '0\\n0'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----BASIC CHALLENGE-----\nYou are given an array $a = [a_0, a_1,..., a_n]$ consisting of $n$ integers. You are also given a set of $m$ segments. The $j$-th segment is $[l_j, r_j]$, where $1 \\le l_j \\le r_j \\le n$. You can choose some subset of the given segments and decrease values on each of the chosen segments by one. For example, if the initial array $a = [0, 0, 0, 0, 0]$ and the given segments are $[1; 3]$ and $[2; 4]$ then you can choose both of them and the array will become $b = [-1, -2, -2, -1, 0]$.\n\nYou have to choose some subset of the given segments (each segment can be chosen at most once) in such a way that if you apply this subset of segments to the array $a$ and obtain the array $b$ then the value $\\max\\limits_{i=1}^{n}b_i - \\min\\limits_{i=1}^{n}b_i$ will be maximum possible.\n\nNote that you can choose the empty set.\n\nIf there are multiple answers, you can print any.\n\nIf you are Python programmer, consider using PyPy instead of Python when you submit your code.\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $m$ ($1 \\le n \\le 10^5, 0 \\le m \\le 300$) \u2014 the length of the array $a$ and the number of segments, respectively.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-10^6 \\le a_i \\le 10^6$), where $a_i$ is the value of the $i$-th element of the array $a$.\n\nThe third line of the input contains $m$ lines, each containing two integers $l_j$ and $r_j$ ($1 \\le l_j \\le r_j \\le n$), where $l_j$ and $r_j$ are the ends of the $j$-th segment.\n\n\n-----Output-----\n\nIn the first line of the output print one integer $d$ \u2014 the maximum possible value $\\max\\limits_{i=1}^{n}b_i - \\min\\limits_{i=1}^{n}b_i$ if $b$ is the array obtained by applying some subset of the given segments to the array $a$.\n\nIn the second line of the output print one integer $q$ ($0 \\le q \\le m$) \u2014 the number of segments you apply.\n\nIn the third line print $q$ distinct integers $c_1, c_2, \\dots, c_q$ in any order ($1 \\le c_k \\le m$) \u2014 indices of segments you apply to the array $a$ in such a way that the value $\\max\\limits_{i=1}^{n}b_i - \\min\\limits_{i=1}^{n}b_i$ of the obtained array $b$ is maximum possible.\n\nIf there are multiple answers, you can print any.\n\n\n-----Examples-----\nInput\n5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n\nOutput\n6\n2\n4 1 \n\nInput\n5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n\nOutput\n7\n2\n3 2 \n\nInput\n1 0\n1000000\n\nOutput\n0\n0\n\n\n-----Note-----\n\nIn the first example the obtained array $b$ will be $[0, -4, 1, 1, 2]$ so the answer is $6$.\n\nIn the second example the obtained array $b$ will be $[2, -3, 1, -1, 4]$ so the answer is $7$.\n\nIn the third example you cannot do anything so the answer is $0$.\n",
        "num_ids_2": 76,
        "num_ids_4": 92
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == '6\\n2\\n4 1'\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == '7\\n2\\n3 2'\nassert solution(\"1 0\\n1000000\\n\") == '0\\n0'\n",
        "num_ids_2": 88,
        "num_ids_4": 108
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n4 1'\nassert solution('6 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n",
        "num_ids_2": 84,
        "num_ids_4": 102
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4\\nLRRR'\nassert solution('7\\n1 3 5 6 7 4 2') == '7\\nLRLRLLL'\nassert solution('3\\n1 2 3') == '3\\nLLL'\nassert solution('4\\n1 2 4 3') == '4\\nLLRL'",
        "num_ids_2": 48,
        "num_ids_4": 87
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"LLL\", \"case1, expected 'LLL' got {}\".format(solution(\"4\\n1 2 3 4\"))\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"LLLRLLL\", \"case2, expected 'LLLRLLL' got {}\".format(solution(\"7\\n1 3 5 6 7 4 2\"))\nassert solution(\"3\\n1 2 3\") == \"LLL\", \"case3, expected 'LLL' got {}\".format(solution(\"3\\n1 2 3\"))\nassert solution(\"4\\n1 2 4 3\") == \"LLRL\", \"case4, expected 'LLRL' got {}\".format(solution(\"4\\n1 2 4 3\"))\n\"\"\"\n",
        "num_ids_2": 94,
        "num_ids_4": 176
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4\\nLRRR'\nassert solution('7\\n1 3 5 6 7 4 2') == '7\\nLRLRLLL'\nassert solution('3\\n1 2 3') == '3\\nLLL'\n\nassert solution('4\\n1 2 4 3') == '4\\nLLRL'\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 87
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4\\nLRRR'\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4\\nLRRR'\nassert solution('7\\n1 3 5 6 7 4 2') == '7\\nLRLRLLL'\nassert solution('3\\n1 2 3') == '3\\nLLL'\nassert solution('4\\n1 2 4 3') == '4\\nLLRL'\n",
        "num_ids_2": 48,
        "num_ids_4": 87
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"LLL\"\nassert solution(\"2\\n1 5 4 3\") == \"4\"\nassert solution(\"4\\n1 2 3 4\") == \"LLRL\"\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 49
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\"\n\"\"\"\n\n\nimport math\nimport sys\n",
        "num_ids_2": 48,
        "num_ids_4": 87
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 5 2 3\") == \"LRLRLLL\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\"\n\"\"\"\n",
        "num_ids_2": 48,
        "num_ids_4": 87
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1 2 3 4') == '4'\nassert solution('1 2 5 3 4') == '4'\nassert solution('6 5 4 3 2 4 3') == '2'\n\"\"\"\n\n\"\"\"\nimport numpy as np",
        "num_ids_2": 28,
        "num_ids_4": 44
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 2 3 4\") == 4\nassert solution(\"1 2 5 3 4\") == 4\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 5 3 4') == '4'\nassert solution('2\\n1 2') == '2'\nassert solution('7\\n6 5 4 3 2 4 3') == '2'\n",
        "num_ids_2": 31,
        "num_ids_4": 50
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 5 3 4') == 4\nassert solution('1 2 5 3 4') == 4\nassert solution('1 2 5 3 4') == 4\nassert solution('1 2 5 3 4') == 4\nassert solution('1 2 5 3 4') == 4\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\nassert solution(\"2\\n1 2\") == \"2\"\n\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 50
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 5 3 4') == 4\nassert solution('1 2 5 3 4 2') == 2\nassert solution('1 2 5 3 4 3') == 2\nassert solution('1 2 5 3 4 2 3') == 2\nassert solution('1 2 5 3 4 2 3 4') == 2\n\nprint(solution(input()))",
        "num_ids_2": 25,
        "num_ids_4": 52
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 50
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 5 3 4') == 4\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 5 3 4') == 4\nassert solution('2\\n1 2') == 2\nassert solution('7\\n6 5 4 3 2 4 3') == 2\nassert solution('5\\n1 2 3 4') == 4\n\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 58
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == 4\nassert solution(\"1 2\") == 2\nassert solution(\"2\\n1 2\") == 2\n\"\"\"\nfrom typing import List\n\nimport sys\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n1 2 3 4 5\") == \"0\"\nassert solution(\"4 5\\n1 2 3 4 5\\n1 2 3 3 3\") == \"0\"\nassert solution(\"4 5\\n1 2 3 4 4\") == \"1\"\nassert solution(\"4 5\\n1 1 1 4 4\") == \"2\"\nassert solution(\"4 5\\n1 1 2 3 4\") == \"2\"\n",
        "num_ids_2": 43,
        "num_ids_4": 79
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\\n\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\\n\") == \"2\"\nassert solution(\"5 3\\n1 2 3 3 3\\n\") == \"0\"\n\nprint(solution(\"5 3\\n1 2 2 4 5\\n\"))\nprint(solution(\"5 3\\n1 2 3 3 3\\n\"))\nprint(solution(\"5 3\\n1 2 3 3 3\\n\"))\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 60
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"2\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\nassert solution(\"5 2\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 2\\n1 2 3 4 5\") == \"2\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"5 3\\n1 2 2 4 5\"\n) == \"1\"\n\nassert solution(\n    \"5 3\\n1 2 3 3 3\"\n) == \"0\"\n\nassert solution(\n    \"5 3\\n1 2 3 4 5\"\n) == \"2\"\n\nassert solution(\n    \"5 3\\n1 2 2 4 5\"\n) == \"1\"\n\nassert solution(\n    \"5 3\\n1 2 3 3 3\"\n) == \"0\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 2 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 2 3 3\") == \"0\"\nassert solution(\"1 2 2 3 4 5\") == \"1\"\n\"\"\"\n\nimport sys\n\nn, k = [int(v) for v in input().split()]\na = [int(v) for v in input().split()]\n\nd = {v: i for i, v in enumerate(a)}\n\nans = 0\n\nfor v in sorted(d.values(), reverse=True):\n    ans += n - v\n    n = v\n    if n >= k:\n        break\n\nprint(ans)\n",
        "num_ids_2": 28,
        "num_ids_4": 57
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"1 5 2 2 3\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"0\"\nassert solution
        "num_ids_2": 25,
        "num_ids_4": 1648
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"4 3\") == \"1\"\nassert solution(\"4 3\") == \"1\"\nassert solution(\"4 3\") == \"1\"\nassert solution(\"5 3\") == \"2\"\n\n\"\"\"\nimport sys\nimport numpy as np\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('1 1 1 1') == '0'\nassert solution('1 2 3 5') == '2'\nassert solution('1 2 3 2') == '1'\n",
        "num_ids_2": 19,
        "num_ids_4": 45
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1 1') == '0'\nassert solution('1 2 2 3 3') == '1'\n\"\"\"\n\nimport sys\n\na = list(map(int, sys.stdin.readline().split()))\nk = a.pop(0)\nn = a.pop(0)\n\narray = set(a)\n",
        "num_ids_2": 22,
        "num_ids_4": 36
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 3 4') == '4'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 3\\n\") == \"3\"\n\"\"\"\n\na, b, n = map(int, input().split())\nprint(sum(1 for _ in range(n) if _ % 2 == 0))\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 3 4\\n') == '4'\n\"\"\"\n\na, b, n = list(map(int, input().split()))\ns = 0\nfor i in range(n):\n    if i % 2 == 0:\n        s += a\n    else:\n        s += b\nprint(s)\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\"\n\n\n\n\"\"\"\nfrom operator import add, sub",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 3 4') == '4'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\"\n\nfrom functools import reduce",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''8 3 4''') == 4\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3 4\\n\") == '4'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3 4') == '4'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '-1'\nassert solution('2\\n1') == '-1'\nassert solution('3\\n1') == '-1'\nassert solution('4\\n1') == '-1'\n",
        "num_ids_2": 22,
        "num_ids_4": 50
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n1\\n2\") == \"48\"\nassert solution(\"8\\n2\\n3\\n1\\n4\\n6\\n8\") == \"4\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n8\\n8 2 12 6 4 24 16 3\\n1\\n2\") == '48'\n\nassert solution(\"1\\n2\\n2\") == '-1'\n\nassert solution(\"1\\n8\\n2 4 6 8 10 12 14 16 18 20\\n1\\n2\") == '4'\n\nassert solution(\"1\\n8\\n2 4 6 8 10 12 14 16 18 20\\n1\\n3\") == '-1'\n\nassert solution(\"1\\n8\\n2 4 6 8 10 12 14 16 18 20\\n1\\n7\") == '-1'",
        "num_ids_2": 46,
        "num_ids_4": 109
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1\\n2\\n') == '-1'\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\n8 2 12 6 4 24 16 3') == '48\\n'\nassert solution('2\\n1\\n2') == '-1\\n'\nassert solution('1\\n1\\n2') == '2\\n'\n\"\"\"\n\nimport sys",
        "num_ids_2": 41,
        "num_ids_4": 59
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '1'\nassert solution('1\\n2') == '2'\nassert solution('2\\n1') == '1'\nassert solution('2\\n2') == '1'\n",
        "num_ids_2": 21,
        "num_ids_4": 47
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n8\\n8 2 12 6 4 24 16 3\") == \"48\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n2\\n1 2\\n1 2\\n1 2\\n1 2\\n2 3') == '3\\n1\\n1\\n1\\n1\\n1\\n-1'\nassert solution('3\\n2\\n2\\n1 2\\n1 2\\n2 3') == '2\\n1\\n1\\n-1'\n\n---------------------------------------------------------------------------------------------\n\n-----Test 1-----\ninput\n3\n8\n8 2 12 6 4 24 16 3\n5\n2\n2 3\n2 3\n2 3\n\noutput\n48\n4\n1\n\n-----Test 2-----\ninput\n1\n2\n2\n1 2\n1 2\n2 3\n\noutput\n-1\n\n-----Test 3-----\ninput\n1\n3\n2\n2\n1 2\n2 3\n\noutput\n-1\n\n-----Test 4-----\ninput\n4\n8\n8 2 12 6 4 24 16 3\n3\n2\n2 3\n2 3\n\noutput\n48\n4\n1\n\n-----Test 5-----\ninput\n1\n8\n8 2 12 6 4 24 16 3\n\noutput\n48\n4\n1\n\"\"\"\n\nfrom math import sqrt",
        "num_ids_2": 90,
        "num_ids_4": 90
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n8 2 12 6 4 24 16 3') == '48\\n4'\nassert solution('2\\n1\\n2') == '-1'\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1\\n2\") == \"48\"\nassert solution(\"2\\n8\\n8 2 12 6 4 24 16 3\") == \"4\"\nassert solution(\"2\\n8\\n4 4 3 4 2 2 2 2 3\") == \"4\"\nassert solution(\"2\\n8\\n2 2 4 4 4 4 4 4 8\") == \"-1\"\nassert solution(\"2\\n8\\n8 2 12 6 4 24 16 3\") == \"4\"\n",
        "num_ids_2": 39,
        "num_ids_4": 87
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 6 6 6 6\") == '1'\nassert solution(\"5 5 5 5 6\") == '1'\nassert solution(\"2 4 2 4 4\") == '2'\n\"\"\"\n\nimport sys\n\na = list(map(int, sys.stdin.readline().split()))\nn = a[0]\nl = sorted(set(a))\nres = []\nfor i in l:\n    count = a.count(i)\n    while count!= 0:\n        res.append(i)\n        count -= 1\nprint(len(res))\nprint(*res)\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 5 5 1 6 1\\n\") == \"3\\n5 6 1\\n\"\nassert solution(\"5\\n2 4 2 4 4\\n\") == \"2\\n2 4\\n\"\n\"\"\"\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n4 4 4 4 4\\n\") == \"1 4\"\nassert solution(\"5\\n1 5 1 6 1\\n\") == \"3 5 6\"\nassert solution(\"6\\n2 4 2 4 2 4\\n\") == \"2 2 4 4\"\nassert solution(\"5\\n6 6 6 6 6\\n\") == \"1 6\"\nassert solution(\"5\\n6 6 6 6\\n\") == \"1 6\"\n",
        "num_ids_2": 41,
        "num_ids_4": 84
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"4\\n2 4 4 4\") == \"2\\n2 4\"\nassert solution(\"3\\n2 4 6\") == \"1\\n2 4 6\"\n\n\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 60
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 6 6 6 6\") == \"1\"\nassert solution(\"1 5 5 1 6 1\") == \"3\"\nassert solution(\"2 4 2 4 4\") == \"2\"\nassert solution(\"5 6 6 6 6\") == \"1\"\nassert solution(\"1 2 3 4 4 4 4 5\") == \"1\"\n\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 29,
        "num_ids_4": 57
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 5 5 1 6 1\") == \"3\\n5 6 1\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"5\\n2 4 2 4 4\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\n\"\"\"\nimport sys\nfrom collections import Counter\n",
        "num_ids_2": 43,
        "num_ids_4": 84
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n6 6 6 6 6') == '1\\n6'\nassert solution('5\\n2 4 2 4 4') == '2\\n2 4'\nassert solution('5\\n6 6 6 6 6') == '1\\n6'\nassert solution('5\\n6\\n6 6 6 6') == '2\\n6'\nassert solution('5\\n1 5\\n5 1') == '2\\n1'\n",
        "num_ids_2": 41,
        "num_ids_4": 83
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 5 5 1 6 1\") == \"3\\n5 6 1\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"5\\n2 4 2 4 4\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\n\"\"\"",
        "num_ids_2": 43,
        "num_ids_4": 84
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"5\\n1 5 5 1 6 1\") == \"3\\n5 6 1\"\nassert solution(\"5\\n2 4 2 4 4\") == \"2\\n2 4\"\n\n\"\"\"\n\nn = int(input())\na = set(map(int, input().split()))\n\nprint(len(a))\nprint(' '.join(map(str, sorted(a))))\n",
        "num_ids_2": 43,
        "num_ids_4": 64
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 6 6 6 6\") == \"1 6\"\n\nassert solution(\"1 5 5 1 6 1\") == \"3 5 6 1\"\n\nassert solution(\"2 4 2 4 4\") == \"2 4\"\n\nassert solution(\"5 6 6 6 6\") == \"1 6\"\n\nassert solution(\"6 6 6 6 6\") == \"1 6\"",
        "num_ids_2": 33,
        "num_ids_4": 63
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"432\") == \"435\"\n\n\"\"\"\n\nfrom math import ceil",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(432) == 435\nassert solution(99) == 103\nassert solution(237) == 237\nassert solution(42) == 44\n\n\n'''\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n\nprint(solution(\"432\"))\nprint(solution(\"99\"))\nprint(solution(\"237\"))\nprint(solution(\"42\"))\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\nprint('The local tests are done. Click on \"Check\" for more details.')\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n\nprint(solution('432'))\nprint(solution('99'))\nprint(solution('237'))\nprint(solution('42'))\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\nassert solution(\"432\") == \"435\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aba') == 'aba'\nassert solution('abab') == 'aba'\nassert solution('abc') == 'abac'\nassert solution('aaaa') == 'aaaa'\nassert solution('abac') == 'abac'\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"abac\"\n) == \"aac\"\nassert solution(\n    \"abc\"\n) == \"b\"\nassert solution(\n    \"abba\"\n) == \"aba\"\nassert solution(\n    \"ecoosdcefr\"\n) == \"codeforces\"\nassert solution(\n    \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abac') == 'aac'\nassert solution('abc') == 'b'\nassert solution('abba') == 'aba'\n\"\"\"\n\n\n\"\"\"\nQuestion:\n\nGiven a string s and a non-empty string p, find all the start indices of p's anagrams in s.\n\nStrings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.\n\nThe order of output does not matter.\n\nExample 1:\n\nInput:\ns: \"cbaebabacd\" p: \"abc\"\n\nOutput:\n[0, 6]\n\nExplanation:\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\nExample 2:\n\nInput:\ns: \"abab\" p: \"ab\"\n\nOutput:\n[0, 1, 2]\n\nExplanation:\nThe substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\".\n\"\"\"\n\n\"\"\"\nQuestion:\n\nGiven a string s and a non-empty string p, find all the start indices of p's anagrams in s.\n\nStrings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.\n\nThe order of output does not matter.\n\nExample 1:\n\nInput:\ns: \"cbaebabacd\" p: \"abc\"\n\nOutput:\n[0, 6]\n\nExplanation:\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\n\n\"\"\"\n\n\"\"\"\nQuestion:\n\nGiven a string s, return the number of different non-empty palindromic subsequences in s. Since the answer may be too large, return it modulo 10^9 + 7.\n\nA subsequence of a string is obtained by deleting 0 or more characters from it without changing the order of the remaining ones.\n\nA sequence is palindromic if it is equal to the sequence reversed.\n\nTwo sequences a_1, a_2,... and b_1, b_2,... are different if there is some i for which a_i!= b_i.\n\nExample 1:\n\nInput: \ns = \"bccb\"\n\nOutput: 6\nExplanation: \nThe 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.\nNote that 'bcb' is not a valid subsequence because the order is changed.\n\nExample 2:\n\nInput: \ns = \"abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadc",
        "num_ids_2": 22,
        "num_ids_4": 32
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abac') == 'aac'\nassert solution('abc') == 'b'\nassert solution('abba') == 'aba'\nassert solution('ecoosdcefr') == 'codeforces'\n",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abac') == 'aac'\nassert solution('abc') == 'b'\nassert solution('abba') == 'aba'\nassert solution('ecoosdcefr') == 'codeforces'\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abac') == 'aac'\nassert solution('abc') == 'b'\nassert solution('abba') == 'aba'\nassert solution('ecoosdcefr') == 'codeforces'\n\"\"\"\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abac') == 'aac'\nassert solution('abc') == 'b'\nassert solution('abba') == 'aba'\nassert solution('ecoosdcefr') == 'codeforces'\nassert solution('aaac') == 'aac'\n",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\n\n\n\n\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"a\"\nassert solution(\"27\") == \"aa\"\nassert solution(\"703\") == \"aaa\"\nassert solution(\"18279\") == \"aaaa\"\nassert solution(\"475255\") == \"aaaaa\"",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == 'b'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 'b'\n\"\"\"\n\nn = int(input())\nchars = [chr(97 + i) for i in range(26)]\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'a'\nassert solution('2') == 'b'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == 'b'\n\"\"\"\n\nfrom collections import defaultdict\n\nN = int(stdin.readline().rstrip())",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n8\n\"\"\"\n    ) == \"b\"\n    assert solution(\n\"\"\"\n67\n\"\"\"\n    ) == \"acz\"\n    assert solution(\n\"\"\"\n28\n\"\"\"\n    ) == \"yy\"\n    assert solution(\n\"\"\"\n63\n\"\"\"\n    ) == \"zzz\"\n    assert solution(\n\"\"\"\n529\n\"\"\"\n    ) == \"aaaaa\"\n    ",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 'b'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == 'b'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == 'b'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"b\"\nprint(solution(\"2\"))\n\n\"\"\"\n\n\"\"\"\nmy solution\n\nfrom itertools import count",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('a') == 1\nassert solution('a b') == 1\nassert solution('a b c') == 2\nassert solution('a b c d') == 2\n",
        "num_ids_2": 16,
        "num_ids_4": 35
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"to be or not to be\") == \"TB oR nOT tB\"\nassert solution(\"aa bb aa aa bb bb\") == \"A AAAB AAAB c\"\nassert solution(\"aa bb aa aa bb bb\") == \"AB aa AB bb\"\n",
        "num_ids_2": 46,
        "num_ids_4": 71
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\nto be or not to be\") == \"12\"\n\nassert solution(\"10\\na ab a a b ab a a b c\") == \"13\"\n\nassert solution(\"6\\naa bb aa aa bb bb\") == \"11\"\n\n\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 62
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\n",
        "num_ids_2": 30,
        "num_ids_4": 48
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('to be or not to be') == '12'\nassert solution('aa bb aa aa bb bb') == '11'\nassert solution('a ab a a b ab a a b c') == '13'\n",
        "num_ids_2": 35,
        "num_ids_4": 54
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('t') == 't'\nassert solution('to be or not to be') == 'TB or not TB'\nassert solution('a ab a a b ab a a b c') == 'AB aa AB bb'\nassert solution('aa bb aa aa bb bb') == 'AB aa AB bb'\n",
        "num_ids_2": 18,
        "num_ids_4": 60
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('to be or not to be') == '12'\nassert solution('a ab a a b ab a a b c') == '13'\nassert solution('aa bb aa aa bb bb') == '11'\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 54
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a ab a a b ab a a b c\") == \"a AAAB AAAB c\"\nassert solution(\"aa bb aa aa bb bb\") == \"AB aa AB bb\"",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('to be or not to be') == 12\nassert solution('a ab a a b ab a a b c') == 13\nassert solution('aa bb aa aa bb bb') == 11\n",
        "num_ids_2": 30,
        "num_ids_4": 48
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('to be or not to be') == 12\nassert solution('a ab a a b ab a a b c') == 13\nassert solution('aa bb aa aa bb bb') == 11\nassert solution('ab aa ab bb') == 11\n",
        "num_ids_2": 30,
        "num_ids_4": 61
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n1 2 3 4 5\") == \"7\\n1 1\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"8\\n2 2\"\nassert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\nassert solution(\"7 2\\n1 2 1 2 1 2\") == \"6\\n2 1 2 1 2\"\n",
        "num_ids_2": 44,
        "num_ids_4": 96
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 2000 2000 2\") == \"4000\\n2 2\"\n\"\"\"",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''8 3\n5 4 2 6 5 1 9 2\n''') == \"20\"\nassert solution('''5 1\n1 1 1 1 1\n''') == \"1\"\nassert solution('''4 2\n1 2000 2000 2\n''') == \"4000\"\nassert solution('''5 2\n1 2000 2\n''') == \"2000\"\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str([5, 4, 2, 6, 5, 1, 9, 2])) == str([5, 4, 2])\nassert solution(str([5, 4, 2, 6, 5, 1, 9, 2])) == str([2, 3, 2])\nassert solution(str([5, 4, 2, 6, 5, 1, 9, 2])) == str([5, 4, 2])\nassert solution(str([1, 2000, 2000, 2])) == str([2000, 2])\nassert solution(str([1, 2000, 2000, 2])) == str([2, 3, 2])\n",
        "num_ids_2": 64,
        "num_ids_4": 118
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\\n2 2\"\n\"\"\"\n\n\"\"\"\n\u041f\u043e\u043b\u0438\u043a\u0430\u0440\u043f \u0440\u0435\u0448\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0442\u0430\u043a: \u043e\u043d \u0437\u043d\u0430\u0435\u0442 \u0440\u0430\u0437\u043c\u0435\u0440 \u043b\u0438\u0441\u0442\u0430, \u0430 \u0437\u0430\u0442\u0435\u043c \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u0438\u0437 \u043d\u0435\u0433\u043e \u0438 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u0441\u0435\u0431\u0435 \u0434\u0440\u0443\u0433\u043e\u0435 \u043f\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u043f\u0440\u0430\u0432\u0438\u043b\u0443:\n\n\u0417\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0434\u0435\u043d\u044c \u0435\u043c\u0443 \u0434\u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u043d\u0435\u0433\u043e (\u043f\u0435\u0440\u0432\u044b\u0439 \u0434\u0435\u043d\u044c \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 \u043d\u0443\u043b\u044f), \u0435\u0441\u043b\u0438 \u043e\u043d \u0443\u043c\u0435\u0435\u0442 \u0440\u0430\u0441\u043f\u043e\u043b\u0430\u0433\u0430\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u0434\u0435\u043d\u044c \u0432 \u043b\u0438\u0441\u0442\u0435 \u043d\u0430 \u0441\u0432\u043e\u0451\u043c \u043c\u0435\u0441\u0442\u0435, \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u0432 \u043b\u0438\u0441\u0442\u0435 \u0447\u0438\u0441\u043b\u043e \u0438 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u043e \u043d\u043e\u0432\u043e\u0439.\n\n\u0414\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043b\u0438 \u0443 \u043f\u043e\u043b\u0438\u043a\u0430\u0440\u043f\u0430 \u0432 \u043a\u043e\u043d\u0446\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0434\u043d\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u043e \u0432 \u043a\u043e\u043d\u0446\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0430?\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 $n$ \u0438 $k$, \u0437\u0430\u0434\u0430\u044e\u0449\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043b\u0438\u0441\u0442\u0430 \u0438 \u0447\u0438\u0441\u043b\u043e \u0434\u043d\u0435\u0439, \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0435 \u0442\u0435\u043c, \u0447\u0442\u043e \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u044b\u0447\u0435\u0442\u0430\u043d\u0438\u044f \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u043b\u0438\u0441\u0442\u0430.\n\n\u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u2014 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043f\u043e\u043b\u0438\u043a\u0430\u0440\u043f \u0443\u043c\u0435\u0435\u0442 \u0440\u0430\u0441\u043f\u043e\u043b\u0430\u0433\u0430\u0442\u044c \u0432 \u043b\u0438\u0441\u0442\u0435 \u043d\u0430 \u0441\u0432\u043e\u0451\u043c \u043c\u0435\u0441\u0442\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u044b\u0447\u0435\u0442\u0430\u0442\u044c \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u043b\u0438\u0441\u0442\u0430 \u0434\u043e \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u043d\u0435\u0439.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b:\n\n\u0422\u0435\u0441\u0442 1\n>>> solution(\"8 3\\n5 4 2 6 5 1 9 2\",)\n40\n>>> solution(\"5 1\\n1 1 1 1 1\",)\n1\n>>> solution(\"4 2\\n1 2000 2000 2\",)\n4000\n\u0422\u0435\u0441\u0442 2\n>>> solution(\"10 3\\n8 1 2 3 4 5 6 7 8 9 10\",)\n10\n>>> solution(\"6 3\\n2 5 4 6 1 2 3\",)\n10\n\u0422\u0435\u0441\u0442 3\n>>> solution(\"15 1\\n1\",)\n15\n\n\"\"\"\n",
        "num_ids_2": 47,
        "num_ids_4": 68
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n8 3\n5 4 2 6 5 1 9 2\n\"\"\"\n) == \"20\"\nassert solution(\n\"\"\"\n5 1\n1 1 1 1 1\n\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"\n4 2\n1 2000 2000 2\n\"\"\"\n) == \"4000\"\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\\n2 2\"\n\"\"\"",
        "num_ids_2": 47,
        "num_ids_4": 68
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2') == '20\\n3 2 3'\nassert solution('5 1\\n1 1 1 1 1') == '1\\n5'\n",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2') == '20\\n3 2 3'\nassert solution('5 1\\n1 1 1 1 1') == '1\\n5'\nassert solution('4 2\\n1 2000 2000 2') == '4000\\n2 2'\n",
        "num_ids_2": 47,
        "num_ids_4": 68
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2\\n') == '20\\n3 2 3'\nassert solution('5 1\\n1 1 1 1 1\\n') == '1\\n5'\nassert solution('4 2\\n1 2000 2000 2\\n') == '4000\\n2 2'\n",
        "num_ids_2": 51,
        "num_ids_4": 74
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -2 3 -9 2\") == \"3\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 77
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 -2 3 -9 2') == '1'\n\nassert solution('5 -2 3 -9 2') == '0'\n\nassert solution('9 -1 1 -1 1 -1 1 1 -1 -1') == '3'\n\nassert solution('8 -5 -11 -15 10 5 4 -4') == '3'\n",
        "num_ids_2": 32,
        "num_ids_4": 77
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"4\\n1 -5 3 2\"\n    ) == \"1\"\nassert solution(\n    \"5\\n4 -2 3 -9 2\"\n    ) == \"0\"\nassert solution(\n    \"9\\n-1 1 -1 1 -1 1 1 -1 -1\"\n    ) == \"6\"\nassert solution(\n    \"8\\n16 -5 -11 -15 10 5 4 -4\"\n    ) == \"3\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -11 -15 10 5 4 -4\") == \"3\"",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 -5 3 2\") == \"1\"\nassert solution(\"5 -2 3 -9 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nnums = [int(i) for i in sys.stdin.readline().split()]\nnums.insert(0,0)\nnums.append(0)\n\nprint(nums)\n\ncnt = 0\nn = len(nums)\ni = 0\nresult = 0\nwhile i < n:\n    if nums[i] == 0 and nums[i + 1]!= 0:\n        nums[i + 1] -= 1\n        cnt += 1\n        result = max(result, cnt)\n        i += 1\n    elif nums[i] == 0 and nums[i + 1] == 0:\n        i += 1\n    else:\n        i += 1\n\nprint(result)\n",
        "num_ids_2": 30,
        "num_ids_4": 75
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 -2 3 -9 2') == '1'\nassert solution('5 -2 3 -9 2') == '0'\nassert solution('9 -1 1 -1 1 -1 1 1 -1 -1') == '6'\nassert solution('8 -5 -11 -15 10 5 4 -4') == '3'\n",
        "num_ids_2": 32,
        "num_ids_4": 77
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -5 3 2\") == \"0\"\nassert solution(\"8 -2 3 -9 2\") == \"3\"\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 46
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 -5 3 2\") == \"1\"\nassert solution(\"5 -2 3 -9 2\") == \"0\"\nassert solution(\"-1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"16 -5 -11 -15 10 5 4 -4\") == \"3\"\n\n\n\n\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 74
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\n\nassert solution(\"5 -2 3 -9 2\") == \"0\"\n\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\ns = sum(a)\n",
        "num_ids_2": 32,
        "num_ids_4": 56
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -11 -15 10 5 4 -4\") == \"3\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\n",
        "num_ids_2": 35,
        "num_ids_4": 59
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 100\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"2 1000000000\") == \"2\"\nassert solution(\"1 000000000 1000000000\") == \"2000000000\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 100\") == \"0\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"5 5\") == \"10\"\n\nprint(\"tests passed\")",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n2\\n10\\n1000000000\\n2000000000\"\nprint('The local tests are done. Click on \"Check\" for more details about implementation on HackerRank')\n\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 100\\n2 200\") == \"2\\n50\"\nassert solution(\"3 100\\n4 200\") == \"4\\n100\"\nassert solution(\"2 100\\n3 200\") == \"2\\n10\"\nassert solution(\"1 100\\n1 200\") == \"1\\n0\"\nassert solution(\"1 100\\n1 200\\n1 300\") == \"1\\n0\\n2\"\n\nprint('The local tests are done. Click on \"Check\" for more details about writing your own tests.')\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 100\") == \"0\\n2\\n2\\n3\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3\\n2') == '0'\nassert solution('1 100\\n2 2') == '2'\nassert solution('1 1000000000\\n2 1000000000') == '2000000000'\n",
        "num_ids_2": 29,
        "num_ids_4": 47
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\"\"\") == '0\\n2\\n10\\n1000000000\\n2000000000'\n\"\"\"\nfrom typing import Tuple\n\n\nclass Solution:\n    def solve(self, _input: List[str]) -> None:\n        pass\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000''') == '''0\n2\n10\n1000000000\n2000000000'''\nassert solution('''5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000''') == '''0\n2\n10\n1000000000\n2000000000'''\nassert solution('''1\n100\n2 2''') == '''0\n2'''\nassert solution('''1\n100\n2 2''') == '''0\n2'''\nassert solution('''2\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000''') == '''0\n2\n10\n1000000000\n2000000000'''",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000') == '0\\n2\\n10\\n1000000000\\n2000000000'\nassert solution('1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000') == '0\\n2\\n10\\n1000000000\\n2000000000'\nassert solution('1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000') == '0\\n2\\n10\\n1000000000\\n2000000000'\nassert solution('1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000') == '0\\n2\\n10\\n1000000000\\n2000000000'\nassert solution('1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000') == '0\\n2\\n10\\n1000000000\\n2000000000'\n",
        "num_ids_2": 92,
        "num_ids_4": 184
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 100\") == \"4\\n0\"\nassert solution(\"4 2\") == \"2\\n0\"\nassert solution(\"5 100\") == \"4\\n2\"\nassert solution(\"5 1000000000\") == \"5\\n2000000000\"\nassert solution(\"5 1000000000 1000000000\") == \"5\\n1000000000\"\n",
        "num_ids_2": 28,
        "num_ids_4": 58
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\"\n\nimport sys\nimport os",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('101') == '4'\n\n\"\"\"\n\n\"\"\"\nThe first line contains an integer K.\n\"\"\"\nK = int(input())\n\n\"\"\"\nThe second line contains K integers, one per line.\n\"\"\"\nline = input()\nnum_list = [int(x) for x in line.split(' ')]\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\") == \"1\"\nassert solution
        "num_ids_2": 1830,
        "num_ids_4": 1830
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('101') == '4'\n\"\"\"\n\nK = int(stdin.readline())",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('101') == '4'\nprint(solution(stdin))\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('101') == '4'\nassert solution('1010') == '3'\nassert solution('10101010') == '-1'\n",
        "num_ids_2": 21,
        "num_ids_4": 34
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('101') == '4'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('101') == 4\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\"\n\nimport sys\n\nK = int(input())\n\nn = 0\n\nfor line in sys.stdin:\n    if int(line) % K == 0:\n        print(n)\n        break\n    n += 1",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '-1'\nassert solution('101') == '4'\nassert solution('101010') == '10'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4\") == \"4\"\nassert solution(\"7 6\") == \"1\"\nassert solution(\"7 3\") == \"3\"\nassert solution(\"7 5\") == \"2\"\nassert solution(\"7 7\") == \"1\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"1\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"5 1\") == \"0\"\nassert solution(\"15 8\") == \"48\"\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\") == \"0\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"15 8\") == \"48\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\", \"2 4 5 3 1\") == \"4\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == '1'\nassert solution(\"5 5\") == '1'\nassert solution(\"15 8\") == '48'\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 64
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('2 4 5 3 1') == '4'\nassert solution('5 5') == '1'\nassert solution('15 8') == '48'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 36\\n5 5 5 5 5\") == \"2\"\n",
        "num_ids_2": 38,
        "num_ids_4": 74
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 10\\n5 5 5 5 5\\n\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == \"1\"\nassert solution(\"5 16\\n5 5 5 5 5\\n\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == '4'\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\") == '1'\nassert solution(\"5 26\\n5 5 5 5 5\") == '-1'\n\"\"\"\n\nn, m = map(int, input().split())\ncups = list(map(int, input().split()))",
        "num_ids_2": 38,
        "num_ids_4": 75
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\\n\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\\n\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == \"-1\"\n\n\"\"\"\n\nn, m = map(int, input().split())\nc = list(map(int, input().split()))\nd = [0] * n\nd[0] = c[0]\n\nfor i in range(1, n):\n    d[i] = max(0, c[i] - 1) + d[i - 1]\nprint(d[n - 1] if d[n - 1] <= m else -1)\n",
        "num_ids_2": 42,
        "num_ids_4": 82
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\"\"\"\n\n\"\"\"\n\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u0441\u0442\u0440\u043e\u043a\u0443. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u043e\u043c. \n\u041f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c \u2014 \u044d\u0442\u043e \u0441\u043b\u043e\u0432\u043e \u0438\u043b\u0438 \u0444\u0440\u0430\u0437\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e \u0447\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u0441\u043b\u0435\u0432\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u043e \u0438 \u0441\u043f\u0440\u0430\u0432\u0430 \u043d\u0430\u043b\u0435\u0432\u043e.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u0442\u0440\u043e\u043a\u0430 \"\u043f\u043e \u0434\u0435\u0440\u0435\u0432\u0443 \u043d\u0435 \u0432\u0435\u0440\u043d\u043e \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u0442\u044c\u0441\u044f\" \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u043e\u043c.\n\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 True, \u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u043e\u043c, \u0438\u043d\u0430\u0447\u0435 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 False.\n\nSample Input:\n\u043f\u043e \u0434\u0435\u0440\u0435\u0432\u0443 \u043d\u0435 \u0432\u0435\u0440\u043d\u043e \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u0442\u044c\u0441\u044f\n\nSample Output:\nTrue\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('5 8') == '4'\nassert solution('5 15') == '2'\nassert solution('5 26') == '-1'\nassert solution('7 10') == '2'\n",
        "num_ids_2": 19,
        "num_ids_4": 42
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"1\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"7 16\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"7 26\\n5 5 5 5 5\") == \"2\"\n\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == '4'\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\") == '-1'\nassert solution(\"5 16\\n5 5 5 5 5\") == '2'\nassert solution(\"5 26\\n5 5 5 5 5\") == '-1'\nprint('All tests passed!')\n",
        "num_ids_2": 38,
        "num_ids_4": 75
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == '4'\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\") == '-1'\nassert solution(\"5 26\\n5 5 5 5 5\") == '2'\nassert solution(\"5 16\\n5 5 5 5 5\") == '1'\n",
        "num_ids_2": 38,
        "num_ids_4": 75
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 74
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"5 1 3 6 9 12\") == \"1\"\nassert solution(\"1 3 6 9 12\") == \"1\"\nassert solution(\"14 5 1\") == \"-1\"\n",
        "num_ids_2": 24,
        "num_ids_4": 53
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n21 14 10\\n') == '3'\nassert solution('2\\n500 500\\n') == '0'\nassert solution('3\\n14 5 1\\n') == '-1'\nassert solution('5\\n1 3 6 9 12\\n') == '1'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 33,
        "num_ids_4": 70
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"4\n24 21 14 10\"\"\") == '3'\nassert solution(\"\"\"2\n500 500\"\"\") == '0'\nassert solution(\"\"\"5\n1 3 6 9 12\"\"\") == '-1'\nassert solution(\"\"\"5\n14 5 1\"\"\") == '1'\nassert solution(\"\"\"5\n14 10 14 14\"\"\") == '0'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n24 21 14 10''') == '3'\nassert solution('''2\n500 500''') == '0'\nassert solution('''3\n14 5 1''') == '-1'\nassert solution('''5\n1 3 6 9 12''') == '1'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n24 21 14 10\") == \"3\"\nassert solution(\"2\\n500 500\") == \"0\"\nassert solution(\"3\\n14 5 1\") == \"-1\"\nassert solution(\"5\\n1 3 6 9 12\") == \"1\"\nprint(\"PASSED\")\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n24 21 14 10\") == \"3\"\nassert solution(\"2\\n500 500\") == \"0\"\nassert solution(\"5\\n1 3 6 9 12\") == \"-1\"\nassert solution(\"3\\n14 5 1\") == \"1\"\n\n\nimport sys",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n24 21 14 10') == '3'\nassert solution('2\\n500 500') == '0'\nassert solution('3\\n14 5 1') == '-1'\nassert solution('5\\n1 3 6 9 12') == '1'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 63
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 24 21 14 10\") == \"3\"\nassert solution(\"5 500 500\") == \"0\"\nassert solution(\"3 14 5 1\") == \"1\"\nassert solution(\"5 1 3 6 9 12\") == \"1\"\n\n\"\"\"\n\nfrom math import gcd",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3 6 9 12\") == \"3\"\nassert solution(\"5\\n1 3 6 9 12\") == \"1\"\nassert solution(\"2\\n500 500\") == \"0\"\nassert solution(\"3\\n14 5 1\") == \"-1\"\nassert solution(\"5\\n1 3 6 9 12\") == \"1\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nd = 0\nfor i in range(n):\n    d += a[i + 1] - a[i]\n    if i >= 2:\n        if d == a[i + 1] - a[i - 1]:\n            break\n",
        "num_ids_2": 34,
        "num_ids_4": 63
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"14 5 1\") == \"-1\"\nassert solution(\"5 1 3 6 9 12\") == \"1\"\n",
        "num_ids_2": 24,
        "num_ids_4": 51
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n1 2 15 15 15\\n') == 5\nassert solution('6 1\\n36 4 1 25 9 16\\n') == 2\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\\n\") == 5\nassert solution(\"6 1\\n36 4 1 25 9 16\\n\") == 2\nassert solution(\"4 4\\n1 10 100 1000\\n\") == 4\n\n\"\"\"\n\n\nfrom math import ceil\n",
        "num_ids_2": 37,
        "num_ids_4": 54
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1\\n36 4 1 25 9 16\\n\") == \"2\"\nassert solution(\"6 2\\n1 10 100 1000\\n\") == \"4\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 3\nn, k = [int(x) for x in sys.argv[1].split(' ')]\narr = [int(x) for x in sys.argv[2].split(' ')]\n\narr.sort()\n\narr_diff = [abs(arr[i] - arr[i + 1]) for i in range(n - 1)]\narr_diff.sort()\n\nprint(arr_diff[k - 1])",
        "num_ids_2": 40,
        "num_ids_4": 51
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 10 100 1000\") == \"4\"\nassert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\n\n\"\"\"",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\\n\") == \"5\"\n\nassert solution(\"6 1\\n36 4 1 25 9 16\\n\") == \"2\"\n\nassert solution(\"4 4\\n1 10 100 1000\\n\") == \"4\"\n",
        "num_ids_2": 41,
        "num_ids_4": 60
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n1 2 15 15 15\\n') == '5'",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 2\n1 2 15 15 15''') == '5'\nassert solution('''5 2\n1 2 15 15 15''') == '5'\n\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import List, Dict, Tuple\nfrom collections import defaultdict\nfrom math import inf\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n4 2\n1 2 3 4\n''') == '4'\nprint('Test 1 OK')\n\nassert solution('''\n4 2\n1 10 100 1000\n''') == '4'\nprint('Test 2 OK')\n\nassert solution('''\n6 1\n36 4 1 25 9 16\n''') == '2'\nprint('Test 3 OK')\n\nassert solution('''\n6 1\n1 10 100 1000\n''') == '2'\nprint('Test 4 OK')\n\nassert solution('''\n4 2\n1 2 3 4\n''') == '4'\nprint('Test 5 OK')",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n\") == \"2\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 10 100 1000\") == \"4\"\nassert solution(\"5 2\\n36 4 1 25 9 16\") == \"2\"\n\"\"\"\n\nimport sys\nfrom collections import deque\nfrom math import ceil\n\nsys.stdin = open(\"./input.txt\", \"r\")\n\nn, k = [int(x) for x in input().split()]\np = [int(x) for x in input().split()]\n\np.sort()\n\npq = deque(p)\nres = 0\n\nfor i in range(k):\n    pq = deque(sorted(pq))\n    max_diff = pq[0] - pq[-1]\n    if max_diff > 5:\n        pq.rotate(ceil((max_diff - 5) / 2))\n    elif max_diff < 5:\n        pq.rotate(ceil(abs(5 - max_diff) / 2))\n    res += pq.popleft()\n\nprint(res)\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\n-----\n'''",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == '8'\n\"\"\"\n\nimport sys\nimport typing\nimport collections",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == '8'\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == '8'\nassert solution('1 2 3\\n4 5 6') == '5'\nassert solution('4 5\\n2 3 6 9') == '-1'\nassert solution('6 3 2\\n1 2') == '-1'\n",
        "num_ids_2": 35,
        "num_ids_4": 70
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == '8'\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\n\nimport sys\n\n_, k, m, *a = sys.stdin.readlines()",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_1(self):\n        self.assertEqual(solution('5 10 7\\n8 10 3 6'), '8')\n\n    def test_2(self):\n        self.assertEqual(solution('5 10 7\\n8 10 3 6'), '8')\n\n    def test_3(self):\n        self.assertEqual(solution('5 10 7\\n8 10 3 6'), '8')\n\n    def test_4(self):\n        self.assertEqual(solution('5 10 7\\n8 10 3 6'), '8')",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\\n\") == \"8\"\nprint(\"PASSED\")\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == '8'\n\"\"\"\n\nN, K, M = map(int, stdin.readline().split())\narr = list(map(int, stdin.readline().split()))",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\"\nassert solution(\"5 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\"\nassert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\"\nassert solution(\"5 2 4\\n3\\n1\\n3\\n2\\n\") == \"No\"\nassert solution(\"6 3 4\\n5\\n1\\n3\\n2\\n\") == \"No\"\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\"\nassert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\"\nassert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\"\nassert solution(\"5 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\"\nassert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\"",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n6 3 4\n3\n1\n3\n2\n''') == '\\n'.join([\n    'No',\n    'No',\n    'Yes',\n    'No',\n    'No',\n    'No'\n])\n\n'''\nhttps://www.codewars.com/kata/5ae6cc06c47fb8bfca0000e3/train/python\n\nYou have a sequence of numbers, and you\u2019ve been tasked with finding the missing number in this sequence.\n\nYou\u2019ll be given an array of numbers in random order, ranging from 0 to 100.\n\nFind the missing number, and return it.\n\nYou should try solving this on your own before looking at the solution.\n\nExample\n\nFor sequence = [0, 1, 3, 6, 4, 2, 7, 15], the output should be\nmissingNumber(sequence) = 8.\n'''",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3 3 4\n3\n1\n3\n2\n''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\nassert solution('''\n6 3 4\n3\n1\n3\n2\n''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\nassert solution('''\n5 1 1\n1\n2\n2\n3\n3\n''') == 'Yes\\nYes\\nYes\\nNo\\nNo'\nassert solution('''\n6 3 4\n3\n1\n3\n2\n''') == 'No\\nNo\\nYes\\nNo\\nNo'\nassert solution('''\n6 1 1\n1\n2\n2\n3\n3\n''') == 'Yes\\nYes\\nYes\\nYes\\nYes'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == 'No\\nNo\\nYes\\nNo\\nNo'\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n5 3 3\n1\n1\n3\n3\n4\n\"\"\"\n) == \"\"\"\nNo\nNo\nYes\nNo\nNo\n\"\"\"\n\nassert solution(\n\"\"\"\n6 3 4\n3\n1\n3\n2\n\"\"\"\n) == \"\"\"\nNo\nNo\nYes\nNo\nNo\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 4\\n2\\n1\\n3\\n3\") == \"No\"\nassert solution(\"4 2 4\\n2\\n1\\n3\\n1\") == \"No\"\nassert solution(\"4 2 4\\n2\\n1\\n3\\n3\") == \"Yes\"\nassert solution(\"4 2 4\\n1\\n2\\n3\\n3\") == \"No\"\nassert solution(\"4 2 4\\n2\\n1\\n3\\n3\") == \"No\"\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 3 4\n3\n1\n3\n2''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\nassert solution('''6 3 4\n3\n1\n3\n2\n''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\nassert solution('''6 3 4\n3\n1\n3\n2\n3''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\nassert solution('''5 5 4\n3\n1\n3\n2\n2''') == 'No\\nNo\\nYes\\nNo\\nNo'\nassert solution('''6 5 4\n4\n1\n3\n2\n3\n3''') == 'No\\nNo\\nYes\\nNo\\nNo'\n\n'''\n3 5 4\n3\n1\n3\n2\n3\n4\n\n'''\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n1 1\\n0 1') == 'YES\\n00'\n\nassert solution('3 4\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1') == 'YES\\n010\\n0000'\n\nassert solution('3 3\\n0 0 0\\n1 0 1\\n1 1 0') == 'NO'\n",
        "num_ids_2": 59,
        "num_ids_4": 85
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n1 1\\n0 1\\n') == 'YES\\n00\\n10'\nassert solution('3 4\\n0 0 0\\n1 0 1\\n1 1 0\\n') == 'YES\\n010\\n0000'\nassert solution('3 3\\n0 0 0\\n1 0 1\\n1 1 0\\n') == 'NO'\nassert solution('3 3\\n0 0 0\\n1 1 1\\n1 1 0\\n') == 'NO'\n\nimport sys; sys.setrecursionlimit(10**9)\nimport sys; input = sys.stdin.readline\nn, m = [int(x) for x in input().split()]\n\na = [[int(x) for x in input().split()] for _ in range(n)]\nb = [[int(x) for x in input().split()] for _ in range(m)]",
        "num_ids_2": 61,
        "num_ids_4": 117
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\n\nimport fileinput\nfrom math import factorial",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'YES\\n11\\n11101101\\n1\\n010'\nassert solution('1\\n1\\n0') == 'YES\\n11\\n11101101\\n1\\n010'\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\n\"\"\"",
        "num_ids_2": 57,
        "num_ids_4": 83
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\n",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n1 1\\n0 1') == 'YES\\n00\\n10'\nassert solution('3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1') == 'YES\\n010\\n0000'\nassert solution('3 3\\n0 0 0\\n1 0 1\\n1 1 0') == 'NO'\n",
        "num_ids_2": 60,
        "num_ids_4": 86
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\n",
        "num_ids_2": 60,
        "num_ids_4": 86
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\"\n\nassert solution(\"3 4\\n0 0 0\\n0 0 0\\n1 1 1\\n\") == \"YES\\n010\\n0000\"\n\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\\n\") == \"NO\"\n",
        "num_ids_2": 56,
        "num_ids_4": 84
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\nassert solution(\"436\") == \"Yes\"\n\nprint(solution(\"373\"))\nprint(solution(\"121\"))\nprint(solution(\"436\"))\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == \"Yes\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\nassert solution(\"436\") == \"Yes\"\n\"\"\"\nimport math",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"373\") == 'Yes'\nassert solution(\"121\") == 'No'\nassert solution(\"436\") == 'Yes'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"36\") == \"Yes\"\nassert solution(\"4\") == \"No\"\nassert solution(\"4367\") == \"Yes\"\nassert solution(\"123\") == \"No\"\nassert solution(\"1234\") == \"Yes\"\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"121\") == \"No\"\nassert solution(\"121\") == \"No\"\nassert solution(\"436\") == \"Yes\"\nassert solution(\"436\") == \"Yes\"\nassert solution(\"121\") == \"No\"\n\n'''",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"23\") == \"Yes\"\nassert solution(\"11\") == \"No\"\nassert solution(\"27\") == \"Yes\"\nassert solution(\"225\") == \"Yes\"\nassert solution(\"5\") == \"No\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"121\") == \"Yes\"\nassert solution(\"1234\") == \"No\"\nassert solution(\"12\") == \"Yes\"\nassert solution(\"123\") == \"No\"\nassert solution(\"435\") == \"Yes\"\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\nassert solution(\"436\") == \"Yes\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == 5\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\"\"\"\n\nfrom typing import List, Set",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 2 1\n0 1 0 1 0''') == '5'\nassert solution('''6 2 1\n1 0 0 1 0 1''') == '3'\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\"\"\"\n\nn, b, a = [int(x) for x in stdin.split()]\ns = [int(x) for x in stdin.split()][1:]\n\nn_battery, n_acc = 0, 0\nfor i in range(len(s)):\n    if s[i] == 1:\n        n_battery += 1\n        n_acc = 0\n    else:\n        n_acc += 1\n        n_battery = 0\n\n    if n_battery > b or n_acc > a:\n        n_battery, n_acc = 0, 0\n\nprint(n - len(s))\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\\n\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\\n\") == \"3\"\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.readlines()\nn, b, a = list(map(int, stdin[0].split()))\ns = list(map(int, stdin[1].split()))",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == '5'\n\"\"\"\nimport sys\nfrom collections import deque\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == 5\n\"\"\"\nimport sys\nimport os\n\nsys.path.append(os.path.join(os.path.dirname(__file__), '..'))\nfrom utils.decorators import *\n\n\n@timing\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 51
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(8-7+6-5+4-3+2-1-0) == 4\nassert solution('2+2') == -46\nassert solution('112-37') == 375\n",
        "num_ids_2": 35,
        "num_ids_4": 45
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"0\"\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\"\"\"\nimport re\n",
        "num_ids_2": 38,
        "num_ids_4": 50
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\n\"\"\"\nimport re\n",
        "num_ids_2": 38,
        "num_ids_4": 50
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n\"\"\"\n\nfrom operator import add, sub\nfrom typing import Tuple\n",
        "num_ids_2": 39,
        "num_ids_4": 51
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-\"+str(-46)\nassert solution(\"112-37\") == \"375\"\n\n\n\nimport sys\nimport math\nimport io",
        "num_ids_2": 42,
        "num_ids_4": 54
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 51
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\nassert solution(\"123-17\") == \"150\"\nassert solution(\"-1-1\") == \"-2\"\n",
        "num_ids_2": 38,
        "num_ids_4": 62
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 51
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n\") == \"YES\\n3 1\\n1 3\\n3 2\\n2 3\\n4 1\\n1 4\\n3 1\\n2 4\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n2 3\\n4 2\\n3 3\\n2 2\\n4 1\\n1 3\\n3 2\\n2 3\\n4 1\\n1 4\\n3 1\\n2 4\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n2 3\")\nassert solution(\"13 4\\n\") == \"YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n2 3\\n4 2\\n3 3\\n2 2\\n4 1\\n1 3\\n3 2\\n2 3\\n4 1\\n1 4\\n3 1\\n2 4\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n2 3\")\n",
        "num_ids_2": 298,
        "num_ids_4": 298
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 3''') == '''YES\n3 1\n1 3\n3 2'''\nassert solution('''10 4''') == '''YES\n2 1\n1 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1'''\nassert solution('''13 4''') == '''NO'''\nassert solution('''1 1''') == '''NO'''\nassert solution('''1 2''') == '''YES\n2 1\n1 2'''\n",
        "num_ids_2": 28,
        "num_ids_4": 60
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n\") == \"YES\\n3 1\\n1 3\\n3 2\\n2 3\\n\"\nassert solution(\"10 4\\n\") == \"YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n\"\nassert solution(\"13 4\\n\") == \"NO\\n\"\n",
        "num_ids_2": 86,
        "num_ids_4": 101
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n') == 'YES\\n3 1\\n1 3\\n3 2\\n2 3\\n'\nassert solution('10 4\\n') == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n'\n",
        "num_ids_2": 86,
        "num_ids_4": 86
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 2\\n1 2\") == \"YES\\n3 1\\n1 3\"\nassert solution(\"10 4\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n\") == \"YES\\n2 1\\n1 3\"\nassert solution(\"13 4\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n\") == \"NO\"\n\nprint(solution(stdin))\n",
        "num_ids_2": 96,
        "num_ids_4": 149
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n\"\"\"\n\nn, k = map(int, input().split())",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3') == 'YES'\nassert solution('10 4') == 'YES'\nassert solution('13 4') == 'NO'\nassert solution('1 2') == 'YES'\nassert solution('3 3') == 'NO'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n3 1\\n1 3\\n2 3\\n2 1\\n') == 'YES\\n3 1\\n1 3\\n3 2\\n2 3\\n2 1\\n', 'Wrong'\nassert solution('10 4\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n') == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n', 'Wrong'\nassert solution('13 4\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n') == 'NO\\n', 'Wrong'\nprint('Test passed')\n\n\"\"\"\n\nimport time",
        "num_ids_2": 146,
        "num_ids_4": 205
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"YES\\n3 1\\n1 3\"\nassert solution(\"10 4\") == \"YES\\n2 1\\n1 4\"\nassert solution(\"13 4\") == \"NO\"",
        "num_ids_2": 38,
        "num_ids_4": 49
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str([5, 1, 3, 10, 1])) == 18\nassert solution(str([6, 1, 5, 10, 10])) == -1\nassert solution(str([5, 1, 3, 10, 1])) == 18\nassert solution(str([5, 1, 3, 10, 1])) == 18\nassert solution(str([5, 1, 3, 10, 1])) == 18\n",
        "num_ids_2": 39,
        "num_ids_4": 77
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 5\\n1 100 1 1\\n\") == 100\n\n\"\"\"\n\nimport sys\nfrom itertools import islice",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1') == '18'\n\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\") == \"10\"\nassert solution(\"4 3 1\") == \"100\"",
        "num_ids_2": 26,
        "num_ids_4": 38
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 5\\n1 100 1 1\\n\") == \"100\"\nassert solution(\"5 2 3\\n5 1 3 10 1\\n\") == \"18\"\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '4 1 3\\n1 1 2 3') == '3'\nassert solution(\n    '4 1 3\\n1 10 10 1') == '10'\nassert solution(\n    '3 1 3\\n1 2 2') == '-1'\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1\\n') == '18'\nassert solution('6 1 5\\n10 30 30 70 10 10\\n') == '-1'\nassert solution('4 3 1\\n1 100 1 1\\n') == '100'\n",
        "num_ids_2": 44,
        "num_ids_4": 64
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 3\\n10 30 30 70 10 10') == '100'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\nassert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"100\"\n\"\"\"\n\nn, k, x = (int(i) for i in input().split())\na = [int(i) for i in input().split()]",
        "num_ids_2": 37,
        "num_ids_4": 57
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1\\n') == '18'\nassert solution('6 1 5\\n10 30 30 70 10 10\\n') == '-1'\nassert solution('4 3 1\\n1 100 1 1\\n') == '100'\n",
        "num_ids_2": 44,
        "num_ids_4": 64
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"01110\") == 4\nassert solution(\"10110\") == 4\n\nassert solution(\"11010\") == 4\nassert solution(\"11010\") == 4\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0111') == 3\n\nassert solution('101010') == 0\n\nassert solution('00100') == 3\n\nassert solution('11111') == 2\n\nassert solution('11110') == 1",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('00100') == 3\nassert solution('101010') == 8\nassert solution('111010') == 9\nassert solution('111011100100') == 11\nassert solution('1011011100100') == 15\n",
        "num_ids_2": 18,
        "num_ids_4": 39
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"01110\") == 4\nassert solution(\"111111\") == 12\nassert solution(\"1110\") == 4\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"101\") == 3\nassert solution(\"101010\") == 10\nassert solution(\"101101010\") == 18\nassert solution(\"11101101010\") == 43\n",
        "num_ids_2": 17,
        "num_ids_4": 38
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('00100') == 3\nassert solution('01110') == 0\nassert solution('10011') == 21\nassert solution('10011') == 21\n\nassert solution('11101') == 9\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11') == '1'\nassert solution('00') == '0'\nassert solution('1111') == '1'\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0100\") == 1\nassert solution(\"11010\") == 3\nassert solution(\"11100\") == 4\nassert solution(\"11110\") == 4\nassert solution(\"111110\") == 5\n",
        "num_ids_2": 17,
        "num_ids_4": 35
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"000010000100\") == 15\nassert solution(\"0011\") == 4\n",
        "num_ids_2": 19,
        "num_ids_4": 28
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"010\") == \"4\"\nassert solution(\"100\") == \"1\"\nassert solution(\"11110\") == \"21\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 31
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"azzel\", \"apple\") == \"Yes\"\nassert solution(\"abc\", \"bca\") == \"No\"\n\n----\nimport collections\n\nfor line in stdin.readlines():\n    s, t = line.strip(), line.strip()\n    counts_s, counts_t = collections.Counter(s), collections.Counter(t)\n    if counts_s == counts_t:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"cat\") == \"No\"\n\"\"\"\n\nfrom itertools import groupby\n",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('azzel') == 'apple'\n\n\"\"\"\n\n\"\"\"\nimport unittest\nimport sys\nimport re",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"asfdsafd\") == \"No\"\nassert solution(\"aaaaa\") == \"No\"\n\"\"\"\n\nS, T = input().split()",
        "num_ids_2": 21,
        "num_ids_4": 46
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"azzel\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"amazing\") == \"Yes\"\nassert solution(\"crying\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"aa\") == \"No\"\nassert solution(\"aazzel\") == \"No\"",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"No\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"azzel\"\n) == \"Yes\"\nassert solution(\n    \"apple\"\n) == \"Yes\"\nassert solution(\n    \"bazzel\"\n) == \"No\"\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12 3 2 4 8 10 5\") == \"11 7 9\"\nassert solution(\"12 3 2 4 8 10 5 1\") == \"11 8 9\"\n\"\"\"\n\nimport itertools\n\nC = list(map(int, input().split()))\nA = list(map(int, input().split()))\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"14\"\nassert solution(\"3 3\") == \"5\"\nassert solution(\"5 2\") == \"14\"\nassert solution(\"5 1\") == \"11\"\nassert solution(\"3 2\") == \"9\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2 1 3 4 5\") == \"4\"\nassert solution(\"10 2 5 6 7 8 9 10\") == \"10\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"10\"\nassert solution(\"10 1 9 9 10\") == \"10\"\n\n\"\"\"\n\nimport collections\nfrom typing import Dict\n",
        "num_ids_2": 32,
        "num_ids_4": 65
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5 1 2 3 4 1 0 6 1 3 2\") == \"50\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1\\n5\\n1\\n2\\n3\\n4\\n1\\n3\") == \"YES\\n1\"\nassert solution(\"5\\n1\\n5\\n1\\n2\\n3\\n4\\n2\\n3\") == \"NO\"\n\"\"\"\n\na, b, c, d, e, f, g, h = map(int, input().split())",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 100 50\") == \"100\"\nassert solution(\"3 100 50 20\") == \"200\"\nassert solution(\"5 20 20 20 20\") == \"50\"\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 25,
        "num_ids_4": 39
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 2 3 4\") == \"0\"\nassert solution(\"6 3 2 7 5 4 1\") == \"24\"\nassert solution(\"4 4 2 1\") == \"4\"\nassert solution(\"6 3 2 7 5 4 1\") == \"22\"\nassert solution(\"5 1 2 3 4\") == \"0\"\n",
        "num_ids_2": 30,
        "num_ids_4": 59
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 3 2 4\") == \"3 4\"\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1000 1 0 1 0 1 0 0 1 0\") == \"10\"\nassert solution(\"2 10 1 0 1 0 1 0 0 1 0\") == \"0\"\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2 10 3\") == \"8\", 'wrong result'\nassert solution(\"10 3 1 10 2\") == \"10\", 'wrong result'\nassert solution(\"1 1 1 1 1\") == \"0\", 'wrong result'\nassert solution(\"10 10\") == \"0\", 'wrong result'\n\"\"\"\n\n\nimport sys\nfrom typing import List, Tuple, Dict, Set\n",
        "num_ids_2": 36,
        "num_ids_4": 69
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 700\\n3 500\\n5 800') == '3'\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 200\n100 200\n100 100\n100 100\n100 100\n''') == '5'\nassert solution('''3 700\n3 500\n5 800\n''') == '3'\nassert solution('''2 700\n3 500\n5 800\n''') == '3'\n\n-----\nWhat is the minimum number of problems that Takahashi needs to solve in order to have a total score of 700 or more points?\n'''",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 200\\n100 500\\n200 800\\n100 300\\n200 700\") == \"3\"\n\"\"\"\n\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\nassert solution(\"2 1000\\n3 500\\n5 800\") == \"2\"\nassert solution(\"1 100\\n2 100\\n3 100\") == \"1\"\nassert solution(\"2 300\\n3 500\\n5 800\") == \"2\"\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 300\\n200 300\") == \"3\"\nassert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 300\\n3 500\\n5 800\") == '3'\nassert solution(\"1 1000\") == '6'\nassert solution(\"2 700\\n3 500\\n5 800\") == '3'\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 49
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\nfrom sys import stdin\n\nd, g = map(int, stdin.readline().split())\ntakahashi = [None] * (d + 1)\ntakahashi[1] = [0, 0]\n\nfor _ in range(d):\n    p, c = map(int, stdin.readline().split())\n    takahashi[p][0] = takahashi[p][1] = c\n\nfor i in range(2, d + 1):\n    takahashi[i][0] = max(takahashi[i][0], takahashi[i - 1][0] + takahashi[i][1], takahashi[i - 1][1] + takahashi[i][0])\n    takahashi[i][1] = max(takahashi[i][1], takahashi[i - 1][0] + takahashi[i][0], takahashi[i - 1][1] + takahashi[i][1])\n\nprint(max(0, takahashi[d][0] - g, takahashi[d][1] - g))\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == '3'\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\nassert solution(\"5 500\\n10 300\\n2 200\") == \"5\"\nassert solution(\"3 300\\n4 200\\n3 300\") == \"5\"\n\n-----Notes-----\n- The solution in this problem is to always solve X + Y + Z +... + K problems, where X is the minimum number of problems solved to get G or more points, and Y is the number of 100-point problems solved to get the base score (A) + the perfect bonus (B) and Z is the number of 200-point problems solved to get the base score (A) + the perfect bonus (B).\n- There is always a minimum number of problems that can be solved to get G or more points.\n- If K = 0, then Y = 0.\n- All numbers in the input are integers.\n\n\"\"\"\n\n\"\"\"\n2021-08-24\n\nDaily Coding Problem #440\n\nThought:\n\n- Top-down approach.\n- When K = 0, Y = 0.\n- We keep track of \"t\" (total score) and \"b\" (base score) to save time.\n- If we solve all problems with 100 points, then we need to get all B and t = A + B to get G.\n- If we solve all problems with 200 points, then we need to get all B and t = A + B + C to get G.\n\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6') == '2'\nassert solution('8\\n4 8 8 7 8 4 4 5') == '2'\nassert solution('9\\n2 3 4 2 2 3 2 2 4') == '3'\n",
        "num_ids_2": 39,
        "num_ids_4": 60
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n",
        "num_ids_2": 39,
        "num_ids_4": 60
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n\"\"\"\n\n\"\"\"\nFirst solution\n",
        "num_ids_2": 39,
        "num_ids_4": 60
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5 4 5 5 5 6\") == 2\nassert solution(\"8 4 8 7 8 4 4 5\") == 2\nassert solution(\"9 2 3 4 2 2 3 2 2 4\") == 3\n\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 46
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6\\n') == '2'\nassert solution('8\\n4 8 8 7 8 4 4 5\\n') == '2'\nassert solution('9\\n2 3 4 2 2 3 2 2 4\\n') == '3'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 43,
        "num_ids_4": 66
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 60
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n7\n5 5 4 5 5 5 6\n\"\"\") == 2\nassert solution(\"\"\"\n8\n4 8 8 7 8 4 4 5\n\"\"\") == 2\nassert solution(\"\"\"\n9\n2 3 4 2 2 3 2 2 4\n\"\"\") == 3\nassert solution(\"\"\"\n7\n5 5 4 5 5 5 6\n7\n5 5 5 5 5 6 6\n8\n5 5 5 5 5 6 6\n9\n2 2 2 2 2 2 2 2 2\n\"\"\") == 3\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"7\n5 5 4 5 5 5 6\"\"\") == \"2\"\nassert solution(\"\"\"8\n4 8 8 7 8 4 4 5\"\"\") == \"2\"\nassert solution(\"\"\"9\n2 3 4 2 2 3 2 2 4\"\"\") == \"3\"\n\nassert solution(\"\"\"7\n5 5 4 5 5 5 6\"\"\") == \"2\"\nassert solution(\"\"\"8\n4 8 8 7 8 4 4 5\"\"\") == \"2\"\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\nassert solution(\"7\\n2 3 4 2 2 3 2 2 4\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\") == \"0\"\n",
        "num_ids_2": 39,
        "num_ids_4": 81
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n\n\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 60
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 3 10 1\") == \"18\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1\\n') == 18\nassert solution('6 1 5\\n10 30 30 70 10 10\\n') == -1\nassert solution('4 3 1\\n1 100 1 1\\n') == 100\n\"\"\"\n\nfrom collections import defaultdict, deque",
        "num_ids_2": 40,
        "num_ids_4": 58
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 4\") == \"8\"\nassert solution(\"4 1 3\") == \"8\"\nassert solution(\"5 2 5\") == \"8\"\n\"\"\"\nfrom typing import List, Dict, Tuple, Set\nfrom collections import namedtuple\n\nfrom termcolor import colored\n\nfrom utils import print_v\n\n\nPicture = namedtuple(\"Picture\", \"id_, beauty\")\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 5\\n10 30 30 70 10 10\") == \"18\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 1 5\n10 30 30 70 10 10''') == '''-1'''\nassert solution('''5 2 3\n5 1 3 10 1\n''') == '''18'''\n\n'''\n7 7 0\n5 1 5 10 2 1 10 1\n'''\n\nassert solution('''7 7 0\n5 1 5 10 2 1 10 1''') == '''-1'''\n\n'''\n9 4 5\n5 1 5 10 2 1 10 1\n'''\nassert solution('''9 4 5\n5 1 5 10 2 1 10 1''') == '''18'''\n\nassert solution('''3 2 1\n1 100 1 1\n''') == '''100'''",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"100\"\n\"\"\"\n\nfrom math import ceil\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 1\\n1 100 1 1\\n') == 100\nassert solution('5 2 3\\n5 1 3 10 1\\n') == 18\nassert solution('5 2 3\\n5 2 3 10 1\\n') == 18\nassert solution('5 2 3\\n5 3 3 10 1\\n') == -1\nassert solution('5 2 3\\n5 1 3 10 1\\n') == 18\n",
        "num_ids_2": 37,
        "num_ids_4": 76
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 5\\n1 100 1 1\") == 100\nassert solution(\"5 2 3\\n5 1 3 10 1\") == 18\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == -1\nprint(\"All cases passed\")\n",
        "num_ids_2": 33,
        "num_ids_4": 52
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\\n\") == \"18\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\\n\") == \"100\"\n\"\"\"\n\nfrom math import inf",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == b\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('0') == ''\nassert solution('11') == 'Yes'\nassert solution('100') == 'No'\n",
        "num_ids_2": 16,
        "num_ids_4": 34
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11\\n') == 'Yes'\nassert solution('100\\n') == 'No'\nassert solution('1\\n') == 'Yes'\nassert solution('0\\n') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == 'No'\nassert solution('3') == 'Yes'\nassert solution('4') == 'Yes'\nassert solution('5') == 'Yes'\nassert solution('6') == 'Yes'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11') == 'Yes'\nassert solution('5') == 'No'\nassert solution('6') == 'Yes'\nassert solution('20') == 'No'\nassert solution('100') == 'No'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2\") == \"No\"\nassert solution(\"8\\n2\") == \"Yes\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11\\n') == 'Yes'\nassert solution('3\\n') == 'No'\n\n-------Problem-----\nYou have been given two integers, n and m, and a positive integer, k. You have k friends who are willing to give you n dollars worth of cakes, but the cakes have to be arranged in a circle, so that the ith friend gets the ith cake.\n\nYou will also have m dollars of dough, which you can buy from the shop. Can you find a way to get the cakes arranged in a circle, with m dollars of dough?\n\n-----Constraints-----\n - n and m are positive integers, with n <= k and m >= 0.\n - n, m, and k are integers.\n - k is positive and even.\n\n-----Input-----\nThe first line of input contains an integer t (1 <= t <= 1000) \u2014 the number of test cases.\n\nEach of the next t lines contains two integers n and m (1 <= n, m <= 1000) \u2014 the number of cakes and the number of dough.\n\n-----Output-----\nFor each test case print YES, if you can find a way to arrange the cakes in a circle with m dough and n cakes, or NO, if you cannot.\n\n------Sample Input-----\n3\n1 1\n1 2\n3 3\n2 1\n2 2\n\n------Sample Output-----\nNO\nYES\nYES\n\n------Explanation-----\nIn the first test case we have only one friend who can give you one cake and one dough.\n\nIn the second test case we have two friends who can give you one cake and one dough each.\n\nIn the third test case we have three friends who can give you three cakes and no dough.\n\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''11''') == 'Yes'\nassert solution('''10''') == 'Yes'\nassert solution('''9''') == 'Yes'\nassert solution('''8''') == 'No'\nassert solution('''7''') == 'No'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"Yes\"\nassert solution(\"15\") == \"Yes\"\nassert solution(\"100\") == \"No\"\nassert solution(\"4\") == \"Yes\"\nassert solution(\"15\") == \"Yes\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == 'Yes'\n\"\"\"\n\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n\") == \"2 2 6\"\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 1 5\\n2 3 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\n\"\"\"\nimport os\nimport sys\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n\") == \"2 2 6\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\nassert solution(\"1\\n1 1 1\") == \"1 1 1\"\nassert solution(\"1\\n2 1 5\") == \"1 2 5\"\nassert solution(\"2\\n2 3 5\") == \"2 2 6\"\n\"\"\"\n\nn = int(input())\nx = []\ny = []\nh = []\n\nfor i in range(n):\n    xyh = [int(i) for i in input().split(' ')]\n    x.append(xyh[0])\n    y.append(xyh[1])\n    h.append(xyh[2])\n\nx_min = min(x)\nx_max = max(x)\ny_min = min(y)\ny_max = max(y)\nh_min = min(h)\n\nx_min_2 = x_min - (x_max - x_min)\ny_min_2 = y_min - (y_max - y_min)\n\nmax_h = 0\n\nfor i in range(n):\n    if h[i] > max_h:\n        max_h = h[i]\n\nfor i in range(n):\n    altitude = max(h[i] - (x[i] - x_min_2) - (y[i] - y_min_2), 0)\n    print(\"{0} {1} {2}\".format(x[i], y[i], altitude))\n",
        "num_ids_2": 49,
        "num_ids_4": 83
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n\") == \"2 2 6\"\n\"\"\"\nimport sys",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n') == '2 2 6'\nassert solution('5\\n2 1 2\\n1 2 3\\n1 1 4\\n3 1 2\\n3 1 1\\n') == '1 1 4'\n\"\"\"\n\n\"\"\"\nI think the problem is asking for a pyramid that has a center of (0,0) and height of 6.\n\nLet (x_i,y_i) be the center of the pyramid. \nThe height of the pyramid is max(h_i - |x_i - 0| - |y_i - 0|, 0). \nSo, the pyramid's height is 6. \n\nSo, the center is (0,0) and the height is 6.\n\"\"\"\n\nimport sys",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n\") == \"2 2 6\"\n\"\"\"\nimport unittest\n\nclass Solution(object):\n    def __init__(self, stdin):\n        self.x = {}\n        self.y = {}\n        self.h = {}\n        self.n = int(stdin)\n        self.x_y_h = {}\n\n    def solve(self):\n        pass\n\nclass TestCase(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n')\n\n    def test_solve(self):\n        self.assertEqual(self.solution.solve(), \"2 2 6\")",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == '2 2 6'\nassert solution(\"1 1 1\\n1 1 1\") == '1 1 1'\n\nassert solution(\"3 3 3\\n1 1 1\\n1 2 1\\n1 3 1\") == '0 0 1'\nassert solution(\"4 4 4\\n2 2 2\\n1 2 2\\n2 1 2\\n3 2 2\") == '0 0 2'\nassert solution(\"5 5 5\\n1 1 1\\n1 2 1\\n1 3 1\\n1 4 1\\n1 5 1\") == '0 0 1'\n",
        "num_ids_2": 48,
        "num_ids_4": 111
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('redcoder') == '1'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"redcoder\") == 1\nassert solution(\"redocder\") == 2\nassert solution(\"redcoderr\") == 3\nassert solution(\"redcodefr\") == 4\n\n'''",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"redcoder\") == 1\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution( \"abcba\" ) == 2\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"radar\") == 1\nassert solution(\"radar\") == 1\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('code') == 'cod'\nassert solution('aab') == 'aba'\nassert solution('abc') == 'abc'\nassert solution('a') == 'a'\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"redcoder\") == \"1\"\nassert solution(\"palindrome\") == \"0\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"redcoder\") == 1\nassert solution(\"pobel\") == 3\nassert solution(\"qqq\") == 0\nassert solution(\"abc\") == 0\n\"\"\"\n\n\"\"\"\n---SOLUTION---\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 37
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('redcoder') == '1'",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"11\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"8\") == \"Yes\"\nassert solution(\"3\") == \"No\"\nassert solution(\"4\") == \"No\"\nassert solution(\"1\") == \"Yes\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == \"Yes\"\nassert solution('1') == \"Yes\"\nassert solution('100') == \"No\"\nassert solution('1000') == \"No\"\n\nhttps://www.codewars.com/kata/526571aae218b8ee490006f4/train/python\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10') == 'Yes'\nassert solution('1') == 'No'\nassert solution('4') == 'No'\n\"\"\"\n\nfrom math import floor",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"No\"\nassert solution(\"3\") == \"Yes\"\nassert solution(\"4\") == \"No\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == 'Yes'\nassert solution('7') == 'No'\nassert solution('15') == 'Yes'\nassert solution('32') == 'Yes'\nassert solution('98') == 'No'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == 'Yes'\nassert solution(\"20\") == 'No'\nassert solution(\"50\") == 'Yes'\nassert solution(\"100\") == 'No'\nassert solution(\"150\") == 'No'\n\nprint('All tests passed.')",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == 'Yes'\nassert solution('8') == 'No'\nassert solution('15') == 'No'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == 'Yes'\n\n'''\nfrom collections import Counter",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"20\") == \"No\"\nassert solution(\"23\") == \"Yes\"\nassert solution(\"4\") == \"No\"\nassert solution(\"123\") == \"No\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 9 7 5\\n\") == \"5\"\nprint(solution(\"4 4 9 7 5\\n\"))",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4 9 7 5') == '5'\n\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\nprint(solution(\"4 4 9 7 5\"))",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 9 7 5\\n\") == \"5\"\n\"\"\"\n\nfrom math import factorial",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\"\n\nimport math",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n4 4 9 7 5') == '5'\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n4 4 9 7 5\") == \"5\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1,1,1) == \"0\"\nassert solution(1,1,2) == \"1\"\nassert solution(1,2,1) == \"1\"\nassert solution(1,2,3) == \"0\"\nassert solution(2,2,3) == \"0\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4 9 7 5') == '5'\n\"\"\"\n\n\"\"\"\nhttps://app.codility.com/demo/results/training7C6M8U-JHU/",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 5\\n') == '10'\nassert solution('3 5\\n') == '-1'\n\n\"\"\"\n\n\"\"\"\n>>> for i in range(1, 21):\n...     for j in range(1, 21):\n...         if i * j == 42:\n...             return '42'\n...     else:\n...         return '42'\nTraceback (most recent call last):\n  File \"main.py\", line 2, in <module>\n    for i in range(1, 21):\nTypeError:'return' outside function\n\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\") == \"10\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\") == 10\nprint(solution(\"2 5\"))\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n\na, b = map(int, stdin.split())\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\") == \"10\"\nprint(solution(\"2 5\"))\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 5') == '10'\nassert solution('7 7') == '-1'\nassert solution('2 1') == '-1'\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 35
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 5''') == '10'\nassert solution('''2 3''') == '-1'\nassert solution('''8 5''') == '40'\n\"\"\"\n\na, b = map(int, input().split())\ntry:\n    print(a*b)\nexcept:\n    print(-1)",
        "num_ids_2": 29,
        "num_ids_4": 43
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == '5'\n\"\"\"\n\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 5\n10 12 1 2 14''') == \"5\"\n\"\"\"\n\n\"\"\"\n[1] * (m + 1)\n[1, m]\n[1, m] + [m + 1]\n[1, m] + [m + 1] + [2 m]\n[1, m] + [m + 1] + [2 m] + [3 m]\n[1, m] + [m + 1] + [2 m] + [3 m] + [4 m]\n[1, m] + [m + 1] + [2 m] + [3 m] + [4 m] + [5 m]\n[1, m] + [m + 1] + [2 m] + [3 m] + [4 m] + [5 m] + [6 m]\n[1, m] + [m + 1] + [2 m] + [3 m] + [4 m] + [5 m] + [6 m] + [7 m]\n[1, m] + [m + 1] + [2 m] + [3 m] + [4 m] + [5 m] + [6 m] + [7 m] + [8 m]\n[1, m] + [m + 1] + [2 m] + [3 m] + [4 m] + [5 m] + [6 m] + [7 m] + [8 m] + [9 m]\n[1, m] + [m + 1] + [2 m] + [3 m] + [4 m] + [5 m] + [6 m] + [7 m] + [8 m] + [9 m] + [10 m]\n[1, m] + [m + 1] + [2 m] + [3 m] + [4 m] + [5 m] + [6 m] + [7 m] + [8 m] + [9 m] + [10 m] + [11 m]\n[1, m] + [m + 1] + [2 m] + [3 m] + [4 m] + [5 m] + [6 m] + [7 m] + [8 m] + [9 m] + [10 m] + [11 m] + [12 m]\n[1, m] + [m + 1] + [2 m] + [3 m] + [4 m] + [5 m] + [6 m] + [7 m] + [8 m] + [9 m] + [10 m] + [11 m] + [12 m] + [13 m]\n[1, m] + [m + 1] + [2 m] + [3 m] + [4 m] + [5 m] + [6 m] + [7 m] + [8 m] + [9 m] + [10 m] + [11 m] + [12 m] + [13 m] + [14 m]\n[1, m] + [m + 1] + [2 m] + [3 m] + [4 m] + [5 m] + [6 m] + [7 m] + [8 m] + [9 m] + [10 m] + [11 m] + [12 m] + [13 m] + [14 m] + [15 m]\n[1, m] + [m + 1] + [2 m] + [3 m] + [4 m] + [5 m] + [6 m] + [7 m] + [8 m] + [9 m] + [10 m] + [11 m] + [12 m] + [13 m] + [14 m] + [15 m] + [16 m]\n[1, m] + [m + 1] + [2 m] + [3 m] + [4 m] + [5 m] + [6 m] + [7 m] + [8 m] + [9 m] + [10 m] + [11 m] + [12 m] + [13 m] + [14 m] + [15 m] + [16 m] + [17 m]\n[1, m] + [m + 1] + [2 m] + [3 m] + [4 m] + [5 m] + [6 m] + [7 m] + [8 m] + [9 m] + [10 m] + [11 m] + [12 m] + [13 m] + [14 m] + [15 m] + [16 m] + [17 m] + [18 m]\n[1, m] + [m + 1] + [2 m] + [3 m] + [4 m] + [5 m] + [6 m] + [7 m] + [8 m] + [9 m] + [10 m] + [11 m] + [12 m] + [13 m] + [14 m] + [15 m] + [16 m] + [17 m] + [18 m] + [19 m]\n[1, m] + [m + 1] + [2 m] + [3 m] + [4 m] + [5 m] + [6 m] + [7 m] + [8 m] + [9 m] + [10 m] + [11 m] + [12 m] + [13 m] + [14 m] + [15 m] + [16 m] + [17 m] + [18 m] + [19 m] + [20 m]\n[1, m] + [m + 1] + [2 m] + [3 m] + [4 m] + [5 m] + [6 m] + [7 m] + [8 m] + [9 m] + [10 m] + [11 m] + [12 m] + [13 m] + [14 m] + [15 m] + [16 m] + [17 m] + [18 m] + [19 m] + [20 m] + [21 m]\n[1, m] + [m + 1] + [2 m] + [3 m] + [4 m] + [5 m] + [6 m] + [7 m] + [8 m] + [9 m] + [10 m] + [11 m] + [12 m] + [13 m] + [14 m] + [15 m] + [16 m] + [17 m] + [18 m] + [19 m] + [20 m] + [21 m] + [22 m]\n[1, m] + [m + 1] + [2 m] + [3 m] + [4 m] + [5 m] + [6 m] + [7 m] + [8 m] + [9 m] + [10 m] + [11 m] + [12 m] + [13 m] + [14 m] + [15 m] + [16 m] + [17 m] + [18 m] + [19 m] + [20 m] + [21 m] + [22 m] + [23 m]\n[1, m] + [m + 1] + [2 m] + [3 m] + [4 m] + [5 m] + [6 m] + [7 m] + [8 m] + [9 m] + [10 m] + [11 m",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 12 1 2 14\") == \"5\"\n\n\"\"\"\n\nimport sys\n\n\"\"\"\nThoughts:\n\nUse binary search to find the number of moves\n\n1) From the input, create two arrays, one of the values and one of the coordinates.\n2) Use binary search to find the minimum number of moves for each coordinate\n3) Return the minimum of these numbers\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"2 5\\n10 12 1 2 14\"\n) == \"5\"\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 10\\n1 2 3 4 5\\n\") == \"5\"\nassert solution(\"4 9\\n4 3 1 2\\n\") == \"5\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n2 3 1 4\") == \"3\"\nassert solution(\"4 3\\n2 3 1 4\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, m = map(int, stdin.split())\n        x = list(map(int, stdin.split()))\n        res = 0\n        for i in range(m):\n            res += max(abs(x[i] - (x[i] + 1)), abs(x[i] - (x[i] - 1)))\n        return str(res)\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 2 3 4') == '3'\nassert solution('4 2\\n1 2 3 4') == '3'\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\nassert solution('1 10\\n2 3 4 5 6 7 8 9') == '6'\n\n\"\"\"\n\nimport unittest\nfrom collections import deque\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        def is_goal():\n            return set(pieces) == set(target)\n\n        n, m = stdin.split()\n        pieces = list(map(int, stdin.split()[1:]))\n        pieces.sort()\n        target = list(range(int(n)))\n\n        queue = deque([(0, 0)])\n        visited = {0}\n        while queue:\n            i, j = queue.popleft()\n            if is_goal():\n                return j\n\n            for p in pieces:\n                if p + i < len(target) and p + i not in visited:\n                    queue.append((p + i, j + 1))\n                    visited.add(p + i)\n                if i > 0 and -p - i < len(target) and -p - i not in visited:\n                    queue.append((-p - i, j + 1))\n                    visited.add(-p - i)\n\n        return 'IMPOSSIBLE'\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        pass\n\n    def tearDown(self) -> None:\n        pass\n\n    def test_solution(self):\n        assert Solution().solution('2 5\\n10 12 1 2 14') == '5'\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\") == \"11\"\nassert solution(\"4 6 3\") == \"1011\"\nassert solution(\"5 6 2\") == \"111100\"\n\nimport sys\n",
        "num_ids_2": 25,
        "num_ids_4": 38
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5') == '2\\n1110\\n1011'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\\n1011\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1\\n101001\\n\"\n",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3') == '2\\n1110\\n1011'\nassert solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3') == '1\\n101001\\n111100'\nassert solution('5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5') == '2\\n111100\\n110110'\n",
        "num_ids_2": 80,
        "num_ids_4": 125
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n') == '2\\n1110\\n1011\\n'\nassert solution('5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n') == '1\\n101001\\n'\nassert solution('4 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n') == '2\\n111100\\n110110\\n'\n",
        "num_ids_2": 92,
        "num_ids_4": 141
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"2\\n111100\\n110110\"\n\n\"\"\"\n\nn, m, k = map(int, input().split())\nroads = []\nfor _ in range(m):\n    a, b = map(int, input().split())\n    roads.append((a, b))\noptions = []\nfor _ in range(k):\n    options.append([int(x) - 1 for x in input().split()])",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"2\"\n\n\"\"\"",
        "num_ids_2": 64,
        "num_ids_4": 100
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"2\"\n\n\"\"\"",
        "num_ids_2": 64,
        "num_ids_4": 100
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"2\"\n",
        "num_ids_2": 64,
        "num_ids_4": 100
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n\n\"\"\"\n\nimport math\nimport unittest\nfrom unittest.mock import patch\nfrom typing import List",
        "num_ids_2": 32,
        "num_ids_4": 61
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5\n2 1 1 2 5\n''') == 'YES'\nassert solution('''\n3\n4 5 3\n''') == 'YES'\nassert solution('''\n2\n10 10\n''') == 'YES'\nassert solution('''\n3\n1 2 3\n''') == 'NO'\nassert solution('''\n5\n2 2 2 2 5\n''') == 'NO'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1 2 5\\n3 4\\n\") == \"YES\"\nassert solution(\"3 1 2\\n4 5\\n\") == \"YES\"\nassert solution(\"3 1 2\\n4 5\\n\") == \"YES\"\n\"\"\"\nimport math",
        "num_ids_2": 38,
        "num_ids_4": 56
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n2 1 1 2 5\n''') == 'YES'\nassert solution('''3\n4 5 3\n''') == 'YES'\nassert solution('''2\n10 10\n''') == 'YES'\nassert solution('''3\n1 2 3\n''') == 'NO'\nassert solution('''2\n10 10\n''') == 'YES'\n\n\n\n-----Solution-----\n\n'''\n\n\u0412\u043e\u0442 \u0447\u0442\u043e \u043c\u044b \u0432\u0438\u0434\u0438\u043c \u0432 \u0440\u0435\u0448\u0435\u043d\u0438\u0438:\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0443\u0441\u043b\u043e\u0432\u0438\u044f:\n\n\u0412\u0441\u0435 \u0447\u0430\u0441\u0442\u0438 \u0441\u0442\u0435\u043d\u044b \u0438\u043c\u0435\u044e\u0442 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u0443\u044e \u0432\u044b\u0441\u043e\u0442\u0443, \u0443 \u043d\u0438\u0445 \u043d\u0435\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u043c\u0435\u0441\u0442\u0430, \u043a\u0443\u0434\u0430 \u043c\u043e\u0436\u043d\u043e \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u044b\u0445 \u0431\u043b\u043e\u043a\u043e\u0432 \u0438 \u0432\u0441\u0435 \u0447\u0430\u0441\u0442\u0438 \u0441\u0442\u0435\u043d\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e\u0442\u0441\u044f \u043f\u043e \u043a\u0440\u0430\u0439\u043d\u0435\u0439 \u043c\u0435\u0440\u0435 \u0432 \u043e\u0434\u043d\u0443 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c.\n\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0437\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043e \u043d\u0430\u043a\u0438\u0434\u044b\u0432\u0430\u0442\u044c \u0431\u043b\u043e\u043a\u0438 \u043f\u043e \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u0438, \u0442.\u0435. \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0440\u044f\u0434 \u0438\u043b\u0438 \u0440\u044f\u0434\u043e\u043c \u0441\u0442\u043e\u044f\u0442 \u0442\u0440\u0438 \u0431\u043b\u043e\u043a\u0430 \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0438\u0437 \u043d\u0438\u0445 \u0441\u0442\u043e\u0438\u0442 \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0438\u0437 \u043a\u0440\u0430\u0435\u0432 \u0441\u0442\u0435\u043d\u044b.\n\n\u0412 \u0442\u0440\u0435\u0442\u044c\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043d\u0430\u0448\u0435\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0437\u0430\u043f\u0440\u043e\u0441, \u0447\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u0438\u0431\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0431\u0438\u0442\u043a\u043e\u0439\u043d\u044b, \u043b\u0438\u0431\u043e \u0437\u0430\u043f\u0440\u0435\u0442\u0438\u0442\u044c \u043d\u0430\u043a\u0438\u0434\u044b\u0432\u0430\u0442\u044c \u043f\u0440\u044f\u043c\u044b\u0435 \u0438\u043b\u0438 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u0431\u043b\u043e\u043a\u0438. \u0417\u0430\u0442\u0435\u043c \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043e\u043d \u0432\u0432\u0435\u043b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u0431\u0443\u0434\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043e \u043a\u0430\u043a\u043e\u0439 \u0431\u043b\u043e\u043a \u0432\u044b\u0431\u0440\u0430\u043d \u0434\u043b\u044f \u0432\u0441\u0442\u0430\u0432\u043a\u0438 \u0438\u043b\u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u0430 \u043e\u0448\u0438\u0431\u043a\u0430.\n\n\u0427\u0442\u043e\u0431\u044b \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u043b\u043e\u0441\u044c \u0431\u044b, \u043d\u0443\u0436\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c, \u0434\u0430\u0432 \u043c\u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0431\u0438\u0442\u043a\u043e\u0439\u043d, \u0430 \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u043b\u043e\u0436\u0438\u0442\u044c \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0432\u0441\u0435\u0445 \u0431\u043b\u043e\u043a\u043e\u0432.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u0432\u0432\u0435\u0434\u0435\u043d\u043e \u043b\u0438\u0431\u043e \"3\", \u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f 5 \u0431\u0438\u0442\u043a\u043e\u0439\u043d, \u043c\u044b \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0432\u0435\u0440\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u043e\u0431\u0449\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0431\u043b\u043e\u043a\u043e\u0432. \u041d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u0435\u0434\u0438\u043d\u0438\u0446\u044b, \u043c\u044b \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0434\u0438\u043d \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0431\u0438\u0442\u043a\u043e\u0439\u043d \u0438 \u043c\u044b \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043d\u0430 2. \u041f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 2, \u043a\u043e\u0433\u0434\u0430 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u0432\u0442\u043e\u0440\u043e\u0439 \u0431\u043b\u043e\u043a, \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c \u0435\u0433\u043e \u043d\u0430 1, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043c\u044b \u0432\u044b\u0431\u0440\u0430\u043b\u0438 \u0432\u0442\u043e\u0440\u043e\u0439 \u0431\u043b\u043e\u043a, \ufffd",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"5\n2 1 1 2 5\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"3\n1 2 3\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"2\n10 10\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"3\n1 2 3\n\"\"\") == \"NO\"",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n1 2 3') == 'YES'\nassert solution('2\\n10 10') == 'YES'\nassert solution('3\\n1 2 3') == 'NO'",
        "num_ids_2": 32,
        "num_ids_4": 61
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == 'YES'\nassert solution(\"3\\n4 5 3\") == 'YES'\nassert solution(\"2\\n10 10\") == 'YES'\nassert solution(\"3\\n1 2 3\") == 'NO'\nassert solution(\"2\\n1 2\") == 'NO'\n",
        "num_ids_2": 32,
        "num_ids_4": 61
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"5\\n2 1 1 2 5\"\n) == \"YES\"\nassert solution(\n    \"3\\n4 5 3\"\n) == \"YES\"\nassert solution(\n    \"2\\n10 10\"\n) == \"YES\"\nassert solution(\n    \"3\\n1 2 3\"\n) == \"NO\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n",
        "num_ids_2": 32,
        "num_ids_4": 61
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"",
        "num_ids_2": 32,
        "num_ids_4": 61
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100 4\", \"1\") == \"1\"\nassert solution(\"1000 6\", \"1\") == \"1\"\nassert solution(\"1000 6\", \"-100 -200 -300 125 77 -4\") == \"4999999999996\"\nassert solution(\"1000 6\", \"1 -1 2 -3 4 -5\") == \"5\"\nassert solution(\"1000 6\", \"0 0 0 0 0\") == \"4999999999996\"\n",
        "num_ids_2": 28,
        "num_ids_4": 76
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nh, n = [int(i) for i in stdin.readline().split()]\nd = [int(i) for i in stdin.readline().split()]\n\nhp = h\n\nwhile True:\n    last_hp = hp\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            break\n    if hp <= 0:\n        break\n    hp = last_hp\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n1000 6\n-100 -200 -300 125 77 -4\n\"\"\") == \"9\"\nassert solution(\n\"\"\"\n1000000000000 5\n-1 0 0 0 0\n\"\"\") == \"4999999999996\"\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\n\n\"\"\"\nfrom math import ceil\n\nH, n = map(int, input().split())\nd = list(map(int, input().split()))\n\nhp = H\nresult = 0\n\nwhile hp > 0:\n    hp = hp + d[ceil(result % n)]\n    result += 1\n    if hp <= 0:\n        break\n\nprint(result - 1 if hp <= 0 else -1)\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 4\\n-3 -6 5 4\") == \"-1\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 6\", \"-100 -200 -300 125 77 -4\") == '9'\nassert solution(\"1000000000000 5\", \"-1 0 0 0 0\") == '4999999999996'\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\nassert solution(\"10 4\\n-3 -6 5 4\") == \"-1\"\n",
        "num_ids_2": 48,
        "num_ids_4": 67
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == '9'\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == '4999999999996'\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('BBAABBBA') == 'BB'\nassert solution('AA') == 'AA'\nassert solution('ABACAB') == 'AB'\nassert solution('ZZZAA') == 'ZZ'",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABCD\") == 'AB'\nassert solution(\"ABCDE\") == 'AB'\nassert solution(\"ABCDEF\") == 'AC'\nassert solution(\"ABCDEFGH\") == 'AB'\nassert solution(\"ABCDEFG\") == 'AC'\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AAAAABBA\") == \"AAAA\"\nassert solution(\"ABACABA\") == \"AB\"\nassert solution(\"AZ\") == \"AA\"\nassert solution(\"AZAAAA\") == \"AA\"\nassert solution(\"AZAAAABB\") == \"BB\"\n",
        "num_ids_2": 24,
        "num_ids_4": 45
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\nassert solution(\"AAA\") == \"AA\"\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_examples(self):\n        self.assertEqual(solution(\"ABACABA\"), \"AB\")\n        self.assertEqual(solution(\"ZZZAA\"), \"ZZ\")\n        self.",
        "num_ids_2": 24,
        "num_ids_4": 34
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(TEST_1) == \"AB\"\nassert solution(TEST_2) == \"AB\"\nassert solution(TEST_3) == \"AB\"\nassert solution(TEST_4) == \"AB\"\nassert solution(TEST_5) == \"ZZ\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BBAABBBA\") == \"BB\"\nassert solution(\"AZAAAZAAA\") == \"AZ\"\nassert solution(\"ABAC\") == \"AB\"\nassert solution(\"AZA\") == \"AZ\"\nassert solution(\"BAA\") == \"AB\"\n",
        "num_ids_2": 26,
        "num_ids_4": 48
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'\nprint('Test pass.')",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('AABB') == 'AA'\nassert solution('ABCABCABC') == 'ABC'\nassert solution('ABBBCCCBCBA') == 'ABC'\nassert solution('BBBABBBA') == 'BB'\nassert solution('ABBABBB') == 'AB'\n\nprint('Success')\n",
        "num_ids_2": 23,
        "num_ids_4": 50
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"ab\"\nassert solution(\"\") == \"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 43
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"west\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"b\"\n",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"where\") == \"here\"\nassert solution(\"a\") == \"\"\nassert solution(\"ab\") == 1\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\n\n\"\"\"\n\n\nimport copy",
        "num_ids_2": 18,
        "num_ids_4": 39
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"west\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"ab\"\n\n\"\"\"\nimport pytest\n\n@pytest.mark.parametrize(\"stdin, expected\", [\n    (\"test\", \"est\"),\n    (\"west\", \"est\"),\n    (\"codeforces\", \"es\"),\n    (\"yes\", \"es\"),\n    (\"b\", \"ab\"),\n])\n",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"test\") == 2\nassert solution(\"west\") == 1\nassert solution(\"codeforces\") == 9\nassert solution(\"yes\") == 1\nassert solution(\"b\") == 1\n\"\"\"\n\ns = input()\nt = input()",
        "num_ids_2": 16,
        "num_ids_4": 35
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('test') == 2\nassert solution('codeforces') == 9\nassert solution('yes') == 7\nassert solution('b') == 1\nassert solution('ab') == 1\n\n\"\"\"\nfrom typing import List, Tuple\n",
        "num_ids_2": 19,
        "num_ids_4": 35
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"test\") == \"est\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"b\"\nassert solution(\"ab\") == 1\n",
        "num_ids_2": 23,
        "num_ids_4": 43
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('codeforces') == 'es'\nassert solution('yes') == 'es'\nassert solution('b') == 'b'\nassert solution('ab') == 1\nassert solution('codeforcesyes') == 9\n",
        "num_ids_2": 23,
        "num_ids_4": 41
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"west\") == \"wet\"\nassert solution(\"codeforces\") == \"sforces\"\nassert solution(\"yes\") == \"yes\"\nassert solution(\"b\") == \"b\"\n\"\"\"\n\nimport unittest\n\nclass Solution(unittest.TestCase):\n\n    def __init__(self, *args, **kwargs):\n        super(Solution, self).__init__(*args, **kwargs)\n        self.s = None\n\n    def solution(self, s: str) -> int:\n        self.s = s\n        return self.solution_helper(len(s))\n\n    def solution_helper(self, n: int) -> int:\n        if n < 3:\n            return n\n        \n        s = self.s\n        if len(s) == 0:\n            return n + 2\n        if s[0] == s[1]:\n            return self.solution_helper(n-1)\n        else:\n            return self.solution_helper(n-1) + 1\n        \n\n    def test_solution_1(self):\n        self.",
        "num_ids_2": 21,
        "num_ids_4": 45
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n1 7 11\\n') == '2'\n\"\"\"\n\nimport sys\nfrom typing import List, Dict, Tuple\n\nDEBUG = False\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"2\"\n\"\"\"\n\nfrom functools import lru_cache",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == 2\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 7 11\\n') == '2'\n\"\"\"\n\nimport sys\nimport bisect",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n1 7 11\n''') == '2'\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n1 7 11\\n') == '2'\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected_result\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 7 11\\n') == '2'\n\n\"\"\"\nfrom __future__ import annotations\n\nfrom collections import Counter\nfrom math import inf\nfrom typing import List, Tuple\n\nfrom modules.utils.utils import get_nums_lines\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aka') == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('tactcoa') == 'Yes'\nassert solution('hannah') == 'Yes'\nassert solution('noon') == 'Yes'\nassert solution('robert') == 'No'\nassert solution('abcba') == 'Yes'\n",
        "num_ids_2": 24,
        "num_ids_4": 45
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('akasaka') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('akasaka') == 'Yes'\nassert solution('tattarrattat') == 'Yes'\nassert solution('mm') == 'Yes'\nassert solution('noon') == 'Yes'\nassert solution('racecar') == 'Yes'\n",
        "num_ids_2": 26,
        "num_ids_4": 46
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"akasaka\") == 'Yes'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('akasaka') == 'Yes'\nassert solution('a') == 'No'\nassert solution('aa') == 'Yes'\nassert solution('aaa') == 'Yes'\nassert solution('aaaa') == 'Yes'\n",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aba\") == \"Yes\"\nassert solution(\"aaa\") == \"Yes\"\nassert solution(\"ababababababababababababababa\") == \"Yes\"\nassert solution(\"akasaka\") == \"Yes\"\nassert solution(\"abcd\") == \"No\"\n\"\"\"\nimport sys\nimport re\n",
        "num_ids_2": 20,
        "num_ids_4": 55
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('akasaka') == 'Yes'\nassert solution('sasas') == 'No'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aba') == 'Yes'\nassert solution('abca') == 'Yes'\nassert solution('abcb') == 'No'\n",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aka\") == \"Yes\"\nassert solution(\"banana\") == \"Yes\"\nassert solution(\"bab\") == \"No\"\nassert solution(\"abba\") == \"Yes\"\nassert solution(\"bob\") == \"No\"\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"198 1.10\") == \"217\"\nassert solution(\"1 0.01\") == \"1\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\n\na, b = map(float, stdin.strip().split(' '))\nprint(int(a * b))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == answer\n\n\"\"\"\n\nA = int(stdin.readline().split()[0])\nB = float(stdin.readline().split()[1])\n\nprint(int(A * B))\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\n\nimport math\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1.5') == '1'\n'''\n\nfrom decimal import Decimal\n\nA, B = list(map(Decimal, input().split()))\n\nprint(int(A*B))\n\nprint(int(A*B*100) % 100)\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"198 1.10\") == \"217\"\nprint(\"OK\")\n\n---\n\nWe have 198 \\times 1.10 = 217.8. After truncating the fractional part, we have the answer: 217.\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('198 1.10') == '217'\nprint(solution('198 1.10'))\n\n-----\n1 2.8\n3 4.2\n5 6.5\n7 8.9\n9 10.1\n\n-----\n8 1.6\n2 3.4\n4 5.5\n6 7.7\n8 9.9\n10 11.1\n\n-----\n15 1.05\n2 3.55\n4 5.6\n6 7.75\n8 9.9\n10 11.1\n12 13.15\n14 16.2\n\n-----\n10 7.9\n2 8.1\n4 9.3\n6 10.5\n8 11.8\n10 12.2\n12 13.4\n14 16.7\n16 19.1\n18 21.3\n20 23.6\n22 25.9\n\n-----\n4 2.8\n5 3.4\n6 5.5\n7 7.7\n8 9.9\n9 10.1\n\n-----\n24 2.05\n2 4.55\n4 6.6\n6 8.75\n8 10.9\n10 12.2\n12 13.4\n14 16.7\n16 19.1\n18 21.3\n20 23.6\n22 25.9\n\n-----\n25 1.05\n2 3.55\n4 5.6\n6 7.75\n8 9.9\n9 10.1\n\n-----\n8 2.8\n4 5.4\n6 7.5\n8 9.8\n10 11.1\n\n-----\n1 2.8\n3 4.2\n5 6.5\n7 8.9\n9 10.1\n\n-----\n15 1.05\n2 3.55\n4 5.6\n6 7.75\n8 9.9\n10 11.1\n12 13.15\n14 16.2\n16 19.1\n18 21.3\n20 23.6\n22 25.9\n\n-----\n10 7.9\n2 8.1\n4 9.3\n6 10.5\n8 11.8\n10 12.2\n12 13.4\n14 16.7\n16 19.1\n18 21.3\n20 23.6\n22 25.9\n\n-----\n4 2.8\n5 3.4\n6 5.5\n7 7.7\n8 9.9\n9 10.1\n\n-----\n24 2.05\n2 4.55\n4 6.6\n6 8.75\n8 10.9\n10 12.2\n12 13.4\n14 16.7\n16 19.1\n18 21.3\n20 23.6\n22 25.9\n\n-----\n25 1.05\n2 3.55\n4 5.6\n6 7.75\n8 9.9\n9 10.1\n\n-----\n8 2.8\n4 5.4\n6 7.5\n8 9.8\n10 11.1\n\n-----\n1 2.8\n3 4.2\n5 6.5\n7 8.9\n9 10.1\n\n-----\n15 1.05\n2 3.55\n4 5.6\n6 7.75\n8 9.9\n10 11.1\n12 13.15\n14 16.2\n16 19.1\n18 21.3\n20 23.6\n22 25.9\n\n-----\n10 7.9\n2 8.1\n4 9.3\n6 10.5\n8 11.8\n10 12.2\n12 13.4\n14 16.7\n16 19.1\n18 21.3\n20 23.6\n22 25.9\n\n-----\n4 2.8\n5 3.4\n6 5.5\n7 7.7\n8 9.9\n9 10.1\n\n-----\n24 2.05\n2 4.55\n4 6.6\n6 8.75\n8 10.9\n10 12.2\n12 13.4\n14 16.7\n16 19.1\n18 21.3\n20 23.6\n22 25.9\n\n-----\n25 1.05\n2 3.55\n4 5.6\n6 7.75\n8 9.9\n9 10.1\n\n-----\n8 2.8\n4 5.4\n6 7.5\n8 9.8\n10 11.1\n\n-----\n1 2.8\n3 4.2\n5 6.5\n7 8.9\n9 10.1\n\n-----\n15 1.05\n2 3.55\n4 5.6\n6 7.75\n8 9.9\n10 11.1\n12 13.15\n14 16.2\n16 19.1\n18 21.3\n20 23.6\n22 25.9\n\n-----\n10 7.9\n2 8.1\n4 9.3\n6 10.5\n8 11.8\n10 12.2\n12 13.4\n14 16.7\n16 19.1\n18 21.3\n20 23.6\n22 25.9\n\n-----\n4 2.8\n5 3.4\n6 5.5\n7 7.7\n8 9.9\n9 10.1\n\n-----\n24 2.05\n2 4.55\n4 6.6\n6 8.75\n8 10.9\n10 12.2\n12 13.4\n14 16.7\n16 19.1\n18 21.3\n20 23.6\n22 25.9\n\n-----\n25 1.05\n2 3.55\n4 5.6\n6 7.75\n8 9.9\n9 10.1\n\n-----\n8 2.8\n4 5.4\n6 7.5\n8 9.8\n10 11.1\n\n-----\n1 2.8\n3 4.2\n5 6.5\n7 8.9\n9 10.1\n\n-----\n15 1.05\n2 3.55\n4 5.6\n6 7.75\n8 9.9\n10 11.1\n12 13.15\n14 16.2\n16 19.1\n18 21.3\n20 23.6\n22 25.9\n\n-----\n10 7.9\n2 8.1\n4 9.3\n6 10.5\n8 11.8\n10 12.2\n12 13.4\n14 16.7\n16 19.1\n18 21.3\n20 23.6\n22 25.9\n\n-----\n4 2.8\n5 3.4\n6 5.5\n7 7.7\n8 9.9\n9 10.1\n\n-----\n24 2.05\n2 4.55\n4 6.6\n6 8.75\n8 10.9\n10 12.2\n12 13.4\n14 16.7\n16 19.1\n18 21.3\n20 23.6\n22 25.9\n\n-----\n25 1.05\n2 3.55\n4 5.6\n6 7.75\n8 9.9\n9 10.1\n\n-----\n8 2.8\n4 5.4\n6 7.5\n8 9.8\n10 11.1\n\n-----\n1 2.8\n3 4.2\n5 6.5\n7 8.9\n9 10.1\n\n-----\n15 1.05\n2 3.55\n4 5.6\n6 7.75\n8 9.9\n10 11.1\n12 13.15\n14 16.2\n16 19.1\n18 21.3\n20 23.6\n22 25.9\n\n-----\n10 7.9\n2 8.1\n4 9.3\n6 10.5\n8 11.8\n10 12.2\n12 13.4\n14 16.7\n16 19.1\n18 21.3\n20 23.6\n22 25.9\n\n-----\n4 2.8\n5 3.4\n6 5.5\n7 7.7\n8 9.9\n9 10.1\n\n-----\n24 2.05\n2 4.55\n4 6.6\n6 8.75\n8 10.9\n10 12.2\n12 13.4\n14 16.7\n16 19.1\n18 21.3\n20 23.6\n22 25.9\n\n-----\n25 1.05\n2 3.55\n4 5.6\n6 7",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('198 1.10') == '217'\n\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"\n\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2000000000\") == \"999999999\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\"\nassert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\"\nassert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\"\nassert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\"\nassert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\"\n",
        "num_ids_2": 58,
        "num_ids_4": 116
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2') == '0'\nassert solution('7\\n1') == '3'\nassert solution('7\\n2') == '0'\nassert solution('1\\n1') == '1'\nassert solution('2\\n1') == '1'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\") == \"0\"\nassert solution(\"2\\n1\") == \"0\"\nassert solution(\"3\\n2\") == \"0\"\nassert solution(\"4\\n3\") == \"0\"\nassert solution(\"5\\n4\") == \"0\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n1\\n2\\n3\\n2000000000\\n763243547\\n') == '3\\n0\\n0\\n1\\n999999999\\n381621773'\n\"\"\"",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == '3'\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(3)) == str(3)\nassert solution(str(6)) == str(3)\n\nassert solution(str(7)) == str(2)\nassert solution(str(1)) == str(1)\n\nassert solution(str(2)) == str(0)\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\n1\\n2\\n3\\n2000000000\\n763243547') == '3\\n0\\n0\\n1\\n999999999\\n381621773'\nassert solution('6\\n4\\n5\\n3') == '1\\n0\\n0\\n1\\n999999999\\n381621773'\n",
        "num_ids_2": 88,
        "num_ids_4": 88
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\\n\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"1\"\n\n\"\"\"\n",
        "num_ids_2": 80,
        "num_ids_4": 80
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n1 5\\n5 6\\n6 1\") == \"0\"\n\"\"\"\nfrom collections import defaultdict",
        "num_ids_2": 76,
        "num_ids_4": 116
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1') == \"3\"\nassert solution('5 4 5\\n1 2\\n2 3\\n3 4\\n4 1') == \"1\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2') == ''\nassert solution('2 3') == '0'\nassert solution('1 2\\n3 4') == '0'\nassert solution('1 2\\n3 4\\n5 6\\n7 8') == '3'\n\"\"\"\n\nfrom collections import defaultdict, deque\nimport sys\n",
        "num_ids_2": 17,
        "num_ids_4": 43
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == '3'\n\"\"\"\n\n\"\"\"\n:param n: the number of cities\n:param m: the number of roads\n:param s: the index of the capital\n:return: the minimum number of extra roads needed to make all the cities reachable from city s\n\"\"\"\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\nassert solution(\"4 2\\n1 2\\n2 3\\n3 4\") == \"0\"",
        "num_ids_2": 76,
        "num_ids_4": 99
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4 2\\n1 2\\n3 2\\n2 3') == '0'\nassert solution('3 2 1\\n2 3') == '1'\nassert solution('2 3 1\\n1 3') == '1'\nassert solution('3 3 1\\n2 3') == '0'\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 72
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == '3'\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == '1'\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\nassert solution(\"5 5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\") == \"0\"\nassert solution(\"5 5 6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 76,
        "num_ids_4": 140
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 2 1\") == \"4\"\nassert solution(\"6 1 1 4 4 4\") == \"5\"\nassert solution(\"5 5 5 5 5 5\") == \"10\"\nassert solution(\"3 2 1 3\") == \"4\"\nassert solution(\"15 1 15 1 15 1\") == \"15\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"2\"\n\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 52
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\ndata = sys.stdin.readline().split()\ndata = list(map(int, data))\n\nsorted_data = sorted(data)\nmax_value = max(sorted_data)\nanswer = 1\n\nwhile True:\n    if max_value in data:\n        data.remove(max_value)\n        answer += 1\n    else:\n        break\n\nprint(answer)",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 1 4\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 2 1') == '4'\nassert solution('6 1 1 4 4 4') == '5'\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3 2 4 1') == '4'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('7\\n6 5 3 3 4 6 4') == '5'\nassert solution('8\\n1 2 3 4 5 6 7 8') == '8'\nassert solution('9\\n9 8 7 6 5 4 3 2 1') == '9'\n\"\"\"\n\nimport sys",
        "num_ids_2": 34,
        "num_ids_4": 73
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\n\"\"\"\n\nimport sys\nfrom collections import Counter\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 2 4 1\") == 4\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n1 2\\n2 3\\n3 4\\n4 5') == '0000400005'\n\"\"\"\n\nimport sys\n\n_, N, M = map(int, sys.stdin.readline().split())",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\":\\n2 3\\n1 32\\n2 63\\n1 12\\n\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\n-------------",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 32\\n2 63\\n1 12') == '000001000002\\n000002000001\\n000001000001'\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"\nimport sys\nimport collections",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n2 3\n1 32\n2 63\n1 12\n''') == '000001000002\\n000002000001\\n000001000001'\n\nstdin = '''\n2 3\n1 32\n2 63\n1 12\n'''\n\nassert solution(stdin) == '000001000002\\n000002000001\\n000001000001'\n\n'''\nfrom typing import List\nimport math\n\nn, m = map(int, stdin.readline().strip().split())\n\nprefectures: List[int] = []\ncities: List[List[int]] = []\n\nfor i in range(n):\n    prefectures.append(i)\n\nfor i in range(m):\n    y, p = map(int, stdin.readline().strip().split())\n    cities.append([p, y])",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\n-----\n8\n3 2\n3 3\n4 1\n5 8\n6 3\n2 2\n4 5\n\n-----\n8\n2 3\n1 32\n2 63\n1 12\n\n-----\n5\n1 2\n1 3\n1 4\n1 5\n1 6\n\n-----\n2\n1 2\n1 3\n\n-----\n4\n1 4\n1 5\n1 6\n1 7\n\n-----\n3\n1 4\n1 5\n1 6\n1 7\n1 8\n\n-----\n3\n1 2\n1 3\n\n-----\n5\n1 3\n1 4\n1 5\n1 6\n1 7\n\n-----\n3\n1 4\n1 5\n1 6\n\n-----\n7\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n\n-----\n4\n1 2\n1 3\n1 4\n\n-----\n6\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n\n-----\n6\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n\n-----\n4\n1 2\n1 3\n1 4\n\n-----\n5\n1 3\n1 4\n1 5\n1 6\n\n-----\n5\n1 3\n1 4\n1 5\n1 6\n1 7\n\n-----\n5\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n\n-----\n8\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n\n-----\n3\n1 2\n1 3\n\n-----\n3\n1 2\n1 3\n\n-----\n5\n1 2\n1 3\n1 4\n1 5\n1 6\n\n-----\n5\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n\n-----\n7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n\n-----\n8\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n\n-----\n8\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n\n-----\n5\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n\n-----\n4\n1 2\n1 3\n1 4\n1 5\n1 6\n\n-----\n4\n1 2\n1 3\n1 4\n1 5\n\n-----\n4\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n\n-----\n4\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n\n-----\n8\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n\n-----\n8\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n1 20\n1 21\n1 22\n1 23\n1 24\n1 25\n1 26\n1 27\n1 28\n1 29\n1 30\n1 31\n1 32\n1 33\n1 34\n1 35\n1 36\n1 37\n1 38\n1 39\n1 40\n1 41\n1 42\n1 43\n1 44\n1 45\n1 46\n1 47\n1 48\n1 49\n1 50\n1 51\n1 52\n1 53\n1 54\n1 55\n1 56\n1 57\n1 58\n1 59\n1 60\n1 61\n1 62\n1 63\n1 64\n1 65\n1 66\n1 67\n1 68\n1 69\n1 70\n1 71\n1 72\n1 73\n1 74\n1 75\n1 76\n1 77\n1 78\n1 79\n1 80\n1 81\n1 82\n1 83\n1 84\n1 85\n1 86\n1 87\n1 88\n1 89\n1 90\n1 91\n1 92\n1 93\n1 94\n1 95\n1 96\n1 97\n1 98\n1 99\n1 100\n1 101\n1 102\n1 103\n1 104\n1 105\n1 106\n1 107\n1 108\n1 109\n1 110\n1 111\n1 112\n1 113\n1 114\n1 115\n1 116\n1 117\n1 118\n1 119\n1 120\n1 121\n1 122\n1 123\n1 124\n1 125\n1 126\n1 127\n1 128\n1 129\n1 130\n1 131\n1 132\n1 133\n1 134\n1 135\n1 136\n1 137\n1 138\n1 139\n1 140\n1 141\n1 142\n1 143\n1 144\n1 145\n1 146\n1 147\n1 148\n1 149\n1 150\n1 151\n1 152\n1 153\n1 154\n1 155\n1 156\n1 157\n1 158\n1 159\n1 160\n1 161\n1 162\n1 163\n1 164\n1 165\n1 166\n1 167\n1 168\n1 169\n1 170\n1 171\n1 172\n1 173\n1 174\n1 175\n1 176\n1 177\n1 178\n1 179\n1 180\n1 181\n1 182\n1 183\n1 184\n1 185\n1 186\n1 187\n1 188\n1 189\n1 190\n1 191\n1 192\n1 193\n1 194\n1 195\n1 196\n1 197\n1 198\n1 199\n1 200\n1 201\n1 202\n1 203\n1 204\n1 205\n1 206\n1 207\n1 208\n1 209\n1 210\n1 211\n1 212\n1 213\n1 214\n1 215\n1 216\n1 217\n1 218\n1 219\n1 220\n1 221\n1 222\n1 223\n1 224\n1 225\n1 226\n1 227\n1 228\n1 229\n1 230\n1 231\n1 232\n1 233\n1 234\n1 235\n1 236\n1 237\n1 238\n1 239\n1 240\n1 241\n1 242\n1 243\n1 244\n1 245\n1 246\n1 247\n1 248\n1 249\n1 250\n1 251\n1 252\n1 253\n1 254\n1 255\n1 256\n1 257\n1 258\n1 259\n1 260\n1 261\n1 262\n1 263\n1 264\n1 265\n1 266\n1 267\n1 268",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n    2 3\n    1 32\n    2 63\n    1 12\n    \"\"\"[1:-1]\n) == \"\"\"\n    000001000002\n    000002000001\n    000001000001\n\"\"\"\n\nassert solution(\n    \"\"\"\n    10 5\n    1 31\n    2 32\n    1 12\n    2 32\n    1 15\n    2 32\n    1 17\n    2 32\n    1 22\n    2 32\n    \"\"\"[1:-1]\n) == \"\"\"\n    000002000001\n    000001000002\n    000001000001\n    000002000001\n    000001000002\n    000001000001\n    000002000001\n    000001000002\n    000001000001\n    000002000001\n    000001000002\n    \"\"\"[1:-1]\n)",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n1 32\\n2 63\\n1 12') == '000001000002\\n000002000001\\n000001000001'\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 10 8 40') == 2\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\n\"\"\"\n\nfrom collections import deque\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 10 8 40\") == \"2\"\nassert solution(\"4 50 70 20 40\") == \"20\"\nassert solution(\"8 90 20 30 40\") == \"0\"\nassert solution(\"10 20 10 30 50 10 20 10 30\") == \"0\"\n\"\"\"\nfrom collections import deque\nfrom math import inf\nfrom typing import Dict\n",
        "num_ids_2": 27,
        "num_ids_4": 59
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10 8 40\") == 2\n\"\"\"\n\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\nassert solution(\"2\\n10 8 40\") == \"2\"\nassert solution(\"4\\n8 16 32\") == \"8\"\n\"\"\"\nfrom typing import List\n\nimport sys\n",
        "num_ids_2": 31,
        "num_ids_4": 46
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10 8 40\") == \"2\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 10 8 40\") == '2'\n\n\"\"\"\n\nfrom typing import List\nimport sys\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10 8 40\\n\") == 2\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"?(___):-___>___\") == \"010\"\nassert solution(\"?(____/___+__/____):-__<____,_,_<____,_,_<___,_,_<___,_,_<___,_,_<__,_,_<____,_,_<___,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_<____,_,_<___,_,_<__,_,_",
        "num_ids_2": 1575,
        "num_ids_4": 1575
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('?(_____/____________+_____/__________*_________/_____+_____/-_*__/__________________):-_________<__________') == '122345'\nassert solution('?(_________+_______/_________*__________/_____+_____/-_*__/__________________):-_________<__________') == '2'\nassert solution('?(_________+_______/_________*__________/_____+_____/-_*__/__________________):-_________<__________') == 'false'\nassert solution('?(_________+_______/_________*__________/_____+_____/-_*__/__________________):-_________<__________') == 'false'\nassert solution('?(_________+_______/_________*__________/_____+_____/-_*__/__________________):-_________<__________') == 'false'\n",
        "num_ids_2": 82,
        "num_ids_4": 160
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('?(__+___+__-___):-___>__') == '01010'\nassert solution('?(__+___+__-___):-___>__,__<___,___<____,____<_____,_____<______,______<_______') == '0250341'\n\n\"\"\"\n",
        "num_ids_2": 69,
        "num_ids_4": 69
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('?(__+___+__-___):-___>__.') == '0101'\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"?(_-_/___*__):-___>__. \") == \"0010\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__. \") == \"false\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______. \") == \"0250341\"\n\nassert solution(\"?(__+___+__-___):-___>__. \") == \"0101\"\n\"\"\"",
        "num_ids_2": 52,
        "num_ids_4": 128
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"?(_-_/___*__):-___>__.\\n\") == \"0010\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__.\\n\") == \"false\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n\") == \"0250341\"\nassert solution(\"?(__+___+__-___):-___>__.\\n\") == \"0101\"\n\n\"\"\"\n",
        "num_ids_2": 54,
        "num_ids_4": 132
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('?(__+___+__-___):-___>__.') == '0101'\nassert solution('?(__+___+__-___):-___>__,_____<__.') == 'false'\nassert solution('?(__+___+__-___):-___>__,_____<__,_____<__.') == 'false'\nassert solution('?(__+___+__-___):-___>__,_____<__,_____<______.') == 'false'\nassert solution('?(__+___+__-___):-___>__,_____<__,_____<_______.') == 'false'\n",
        "num_ids_2": 53,
        "num_ids_4": 117
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"?(_-_/___*__):-___>__.\\n\") == \"0010\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__.\\n\") == \"false\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n\") == \"0250341\"\nassert solution(\"?(__+___+__-___):-___>__.\\n\") == \"0101\"\n\nprint(solution(stdin))\n",
        "num_ids_2": 54,
        "num_ids_4": 132
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('?(_-_-_)-(__+_)') == '0101'\nassert solution('?(_-_-_)-(__+_)') == '0101'\nassert solution('?(_-_-_)-(__+_)') == '0101'\nassert solution('?(_-_-_)-(__+_)') == '0101'\nassert solution('?(_-_-_)-(__+_)') == '0101'",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('?(____-___):-____>__') == '0250341'\n\"\"\"\n\nimport math\nimport sys\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\n",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\n",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\n",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 11') == 3\nassert solution('3 4 1000000000000000000') == 0\nassert solution('3 4 2') == 5\n",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\n",
        "num_ids_2": 20,
        "num_ids_4": 31
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 11\") == 3\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0",
        "num_ids_2": 20,
        "num_ids_4": 31
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\n\n\"\"\"\n\n\nimport collections",
        "num_ids_2": 20,
        "num_ids_4": 31
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 3 11\n2 1 5\n7 10 0\n12 6 4''') == 3\n\nassert solution('''3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1''') == 5\n\nassert solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1''') == 0\n\nassert solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n1 1 100 1\n1 1 100 1''') == 0\n\nassert solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n1 1 100 1\n1 1 100 1\n1 1 100 1\n1 1 100 1\n1 1 100 1\n1 1 100 1\n1 1 100 1''') == 0",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"1 3 3 3\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\n\n\n\n------The_brain_of_this_thing-------\n\n\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e \u0432\u0445\u043e\u0434\u043d\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c \n3 3 11 \n2 1 5\n7 10 0\n12 6 4\n\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435:\n3 \n\n\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e \u0432\u0445\u043e\u0434\u043d\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c \n3 4 1000000000000000000 \n1 3 3 3 \n0 3 3 2 \n3 0 1 1 \n\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435:\n0\n\n\n\u041d\u0443\u0436\u043d\u043e \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0443\u0442\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u043d\u043e\u043b\u044c, \u0435\u0441\u043b\u0438 \u043c\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441 \u043c\u0430\u0442\u0440\u0438\u0446\u0435\u0439 3x3 \u0438 \u0438\u043c\u0435\u0435\u043c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e 3.\n\n\u0414\u0430\u043b\u0435\u0435 \u043d\u0430\u0434\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u0443\u0442\u044c \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0441 \u0434\u0432\u0443\u043c\u044f \u0438\u0441\u043a\u043e\u043c\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u0432\u0442\u043e\u0440\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0443\u0442\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0432 \u0447\u0438\u0441\u043b\u0430, \u043f\u043e\u043b\u0443\u0447\u0438\u0432 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e.\n\n\u0417\u0430\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043f\u0443\u0442\u044c \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441 \u0442\u0440\u0435\u043c\u044f \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e. \n\n\u0412 \u0438\u0442\u043e\u0433\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c\u0441\u044f 3 \u0438\u0437 \u043d\u0438\u0445.\n\n\u0412\u044b\u0445\u043e\u0434:\n3\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('codeforces') =='secrofedoc'\nassert solution('rocesfedoc') == 'orcesfedoc'\nassert solution('rocesfedoc') == 'rocesfedoc'\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"plmaetwoxesisiht\") == \"thisisexampletwo\"\nassert solution(\"z\") == \"z\"\nassert solution(\"rocesfedoc\") == \"codeforces\"\n\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 63
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n'''\n\nimport math",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_stdin_1) == test_stdout_1\nassert solution(test_stdin_2) == test_stdout_2\nassert solution(test_stdin_3) == test_stdout_3\nassert solution(test_stdin_4) == test_stdout_4\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"rocesfedoc\") == \"codeforces\"\nassert solution(\"secrofedoc\") == \"orcesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('codeforces') =='secrofedoc'\nassert solution('rocesfedoc') == 'orcesfedoc'\nassert solution('thisisexampletwo') == 'thisisexampletwo'\nassert solution('z') == 'z'\nassert solution('x') == 'x'\n",
        "num_ids_2": 32,
        "num_ids_4": 60
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"rocesfedoc\") == \"orcesfedoc\"\nassert solution(\"a\") == \"a\"\nassert solution(\"abcd\") == \"abcd\"\nassert solution(\"abcdce\") == \"abcdce\"\n",
        "num_ids_2": 32,
        "num_ids_4": 54
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n'''\n\nfrom math import floor\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 14\\n') == '19'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 14') == '19'\n\"\"\"\nimport sys\n\na, b = map(int, sys.stdin.readline().split())\nprint(a + b)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\"\"\"\n\nimport math\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 14') == 19\n\"\"\"\n\nimport math\n\na, b = input().split()\n\nprint(math.ceil(int(a) + int(b)))\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 14\") == \"19\"\n\"\"\"\n\na, b = map(int, input().split())\nprint(a + b)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\nprint(solution(stdin.readline()))\n\n\"\"\"\n\nimport sys\nimport re\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 14') == 19\nassert solution('381 492') == 873\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\n'''\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2+3') == '++++>'\nassert solution('9-7') == '+++++++++>'\nassert solution('6+3') == '+++++>'\nassert solution('6+3') == '+++++>'\nassert solution('6+3') == '+++++>'\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"++++++++++++++++++++++++++++++++++++++++++++++++.\"\n) == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\"\n\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2+3') == '++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.'\nassert solution('9-7') == '+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.'\n\n'''\n",
        "num_ids_2": 65,
        "num_ids_4": 65
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"+5+2\") == \"++++++++\\n>++++++++\\n>++++++++\\n>++++++++\\n++++++++++++++++++.\\n\"\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\"\"\"\n",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\n'''",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11+101\") == \"11101\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"++++>\") == \"+\"\nassert solution(\"<[-]<\") == \"-\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1122334455667') == '7'\nassert solution('112233445566788') == '8'\nassert solution('112233445566788899') == '9'\n\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 45
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"12345\"\nassert solution(\"112123123412345$\\dots$\") == \"12345\"\n\"\"\"\n\n\"\"\"\n---SOLUTION---\n\"\"\"\n\nq = int(input())\n\nfor _ in range(q):\n    k = int(input())\n    n = 0\n    k %= 10\n    while k!= 0:\n        n *= 10\n        n += k % 10\n        k //= 10\n    print(n)\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2132\\n506\\n999999999999999999\\n1000000000000000000\\n') == '8\\n2\\n4\\n1'\n\"\"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5 56\") == \"1 2 3 4 5 56\"\nassert solution(\"1 2 3 4 5 50\") == \"2 2 4 4 5\"\nassert solution(\"1 2 3 4 5 10\") == \"4 4\"\nassert solution(\"1 2 3 4 5 50 56\") == \"4 4 4 4\"\nassert solution(\"1 2 3 4 5 20 56\") == \"2 2 2 2\"\n\"\"\"\nimport re",
        "num_ids_2": 39,
        "num_ids_4": 74
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"1\"\n\"\"\"\n\nfrom collections import deque\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_stdin_1) == test_stdout_1\nprint(solution(stdin))\n\"\"\"\nimport itertools",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11223344556677\") == \"0\"\nassert solution(\"111122334455667788\") == \"7\"\nassert solution(\"11112233445566778899\") == \"8\"\n\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 50
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345\"\nassert solution(\"11$\\dots$\") == \"11\"\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('112123123412345$') == '1'\nassert solution('1232123123412345$') == '2'\nassert solution('123212312341234512345612345671234567812345678912345678910') == '0'\nassert solution('112123412341234512345612345671234567812345678912345678910') == '1'\nassert solution('112123412341234512345671234567123456712345678912345678910') == '2'\n",
        "num_ids_2": 33,
        "num_ids_4": 99
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"11212312341234512345612345671234567812345678912345678910\"\n\n\n\n\"\"\"\n\nfrom sys import stdin\nimport re",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('575') == '4'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8') == '0'\nassert solution('57') == '4'\nassert solution('575') == '4'\n\"\"\"\n\nimport unittest\nimport sys\n\n\"\"\"\n9/19/2021\nReview\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"575\") == \"4\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3557') == '4'\nassert solution('575') == '4'\nassert solution('123') == '0'\nassert solution('1234') == '0'\nassert solution('9') == '1'\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('575') == '4'\nassert solution('54') == '1'\nassert solution('42') == '0'\nassert solution('21') == '0'\nassert solution('33') == '1'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('575') == '4'\nassert solution('10') == '0'\nassert solution('1') == '0'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"575\") == \"4\"\nassert solution(\"525\") == \"2\"\nassert solution(\"275\") == \"1\"\nassert solution(\"225\") == \"1\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('575') == 4\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1234') == 0\nassert solution('75') == 1\nassert solution('1') == 0\nassert solution('5') == 1\n\n\"\"\"\n\nimport sys\n\nstdin = list(map(int, sys.stdin.readlines()))\nn = stdin[0]\nseven_five_three_count = 0",
        "num_ids_2": 17,
        "num_ids_4": 33
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(12)) == \"1\"\nassert solution(str(15)) == \"0\"\nassert solution(str(1234567891011)) == \"55\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 41
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"010\") == 1\nassert solution(\"010\") == 2\nassert solution(\"111\") == 0\nassert solution(\"000\") == 1\n\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1110') == 1\nassert solution('100010') == 5\nassert solution('110110') == 2\nassert solution('110111') == 1\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"010\") == 1\nassert solution(\"011\") == 2\nassert solution(\"110\") == 1\nassert solution(\"111\") == 2\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1101010') == 5\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"101010\") == 1\nassert solution(\"0101010\") == 2\nassert solution(\"1101010\") == 2\nassert solution(\"1110010\") == 3\n\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 39
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"010\") == 1\nassert solution(\"110\") == 0\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"011\") == 1\n\n-----------------------------------------------------\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100') == 1\nassert solution('010') == 2\nassert solution('110') == 1\nassert solution('101') == 1\nassert solution('011') == 2\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('011') == 1\nassert solution('110') == 2\nassert solution('100') == 1\nassert solution('010') == 2\nassert solution('101') == 2\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\") == 2\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('5\\n6 7 9 10 31') == 'APPROVED'\n\n-----\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n5 7 9 10') == 'APPROVED'\nassert solution('5 7\\n5 7 9 10') == 'DENIED'\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\"\nimport math\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6 7 9 10 31\") == \"APPROVED\"\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"APPROVED\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n6 7 9 10 31') == 'APPROVED'\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n6 7 9 10 31') == 'APPROVED'\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 6 7 8 9 10\") == \"APPROVED\"\nassert solution(\"4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\") == \"DENIED\"\nassert solution(\"4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\") == \"DENIED\"\n\"\"\"",
        "num_ids_2": 125,
        "num_ids_4": 332
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\"\n\n\"\"\"\n\ubb38\uc81c\nN\uc7a5\uc758 \uce74\ub4dc\uac00 \uc788\ub2e4.\n\uce74\ub4dc\uac00 \ud558\ub098 \uc788\uc744 \ub54c\ub294 \uc804\ubd80 \ubc00\uc5b4\ubc84\ub9b0\ub2e4.\n\ud558\ub098\uc758 \uce74\ub4dc\ub97c \uace8\ub790\uc744 \ub54c, \ucd5c\ub300\ud55c \ub9ce\uc774 \uc4f8 \uc218 \uc788\ub294 \ud589\uc704\ub97c \uc5f0\uc18d\ud574\uc11c \ucde8\ud560 \uc218 \uc788\ub294\uc9c0 \uacc4\uc0b0\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc2dc\uc624.\n\n\uce74\ub4dc\ub97c \ubc00\uc5b4\ubc84\ub9ac\ub294 \uba85\ub839\uc740 \uc22b\uc790 A\ub97c \uc785\ub825\ubc1b\uc558\uc744 \ub54c,\n\uce74\ub4dc\ub97c A\ub9cc\ud07c \ubc00\uc5b4\ubc84\ub9ac\ub294 \ud589\uc704\ub97c \ucd94\uac00\ub85c \ud560 \uc218 \uc788\ub2e4.\n\ud558\ub098\uc758 \uce74\ub4dc\ub97c \ub2e4\ub978 \uce74\ub4dc\ubcf4\ub2e4 \uc791\uc740 \uc218\ub85c \ubc00\uc5b4\ubc84\ub9b0\ub2e4.\n\uce74\ub4dc\ub97c \ubc00\uc5b4\ubc84\ub9ac\ub294 \ud589\uc704\ub294 \uc5f0\uc18d\ud574\uc11c \uc911\ubcf5\ub420 \uc218 \uc5c6\ub2e4.\n\n\uc785\ub825\n\uccab\uc9f8 \uc904\uc5d0 \uba87 \uc7a5\uc758 \uce74\ub4dc\uac00 \uc788\ub294\uc9c0 \uc22b\uc790 N(1 \\leq N \\leq 1,000)\uacfc M(1 \\leq M \\leq 3,000)\uc774 \uacf5\ubc31\uc744 \uc0ac\uc774\ub85c \ub450\uace0 \uc8fc\uc5b4\uc9c4\ub2e4.\n\ub2e4\uc74c N\uac1c\uc758 \uc904\uc5d0 \uc22b\uc790 A_i (1 \\leq A_i \\leq 1,000)\uac00 \uacf5\ubc31\uc744 \uc0ac\uc774\ub85c \ub450\uace0 \uc8fc\uc5b4\uc9c4\ub2e4.\n\uce74\ub4dc\ub97c \ubc00\uc5b4\ubc84\ub9ac\ub294 \uc5f0\uc18d\uc73c\ub85c \uc911\ubcf5\ub420 \uc218 \uc5c6\ub294 \ud589\uc704\ub97c \ucd94\uac00\ub85c \uc8fc\uc5b4\uc9c4\ub2e4.\n\n\ucd9c\ub825\n\uac01 \ud589\uc704\ubcc4\ub85c \ubc00\uc5b4\ubc84\ub9b0 \uc218\uc758 \ud569\uc744 \ucd9c\ub825\ud558\uba74 \ub41c\ub2e4.\n\"\"\"\n\n\"\"\"\n\ud480\uc774\n\uadf8\ub9ac\ub514\n\"\"\"\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\nA = [int(sys.stdin.readline()) for i in range(N)]\nd = [0] * M\nfor i in range(N):\n    for j in range(M):\n        if (i + 1) % (2 ** (j + 1)) == 0:\n            d[j] += A[i]\n\nprint(' '.join(map(str, d)))\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10 55\") == \"APPROVED\"\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"LLRUURRRUDD\") == \"Yes\"\nassert solution(\"LLRUURRRUDRD\") == \"Yes\"\nassert solution(\"LLRUURRRUUUDRRRUDRDRDRD\") == \"Yes\"\nassert solution(\"LLRUURRRUUUDRRRUDRDRDRD\") == \"Yes\"\n",
        "num_ids_2": 29,
        "num_ids_4": 69
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RDRDULU\") == \"No\"\nassert solution(\"DRURURDRDRDUURRDRDRDU\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 48
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('DRDULRU') == 'Yes'\nassert solution('DRLUDRU') == 'Yes'\nassert solution('RUDLUDRU') == 'Yes'\nassert solution('DRDDRDDRDRU') == 'No'\nassert solution('DRDDRDRDRUD') == 'No'\n",
        "num_ids_2": 27,
        "num_ids_4": 57
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RLU') == 'No'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RDRDUL\") == \"Yes\"\nassert solution(\"RUULDRD\") == \"Yes\"\nassert solution(\"RDRDULU\") == \"Yes\"\nassert solution(\"RDULRUUD\") == \"Yes\"\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin=\"RUDLUDR\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('DRURURDDRURDRDRDRDRURDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDR') == \"Yes\"\nassert solution('RUDRDUDRLDRRUDRDRLDRDUDRRUDRDUDRDRLDRDRDRDRLDRDRDRDR') == \"No\"\nassert solution('LDRUDRRUDRDUDRDRLDRRUDRDRUDDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDR') == \"Yes\"\nassert solution('RDRDRUDDRDRDRDUDRRDRDDRLDRDDRUDRLDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDR') == \"Yes\"\nassert solution
        "num_ids_2": 79,
        "num_ids_4": 171
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RUDLUDR\") == 'Yes'\n\nassert solution(\"URDRUDR\") == 'Yes'\n\nassert solution(\"RDRDRD\") == 'No'\n\nassert solution(\"RDRLDRDRDRDRDU\") == 'Yes'\n\nassert solution
        "num_ids_2": 26,
        "num_ids_4": 57
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2\\n4\\n3\\n5') == '7'\nassert solution('3\\n4\\n2\\n4\\n3\\n5') == '11'\nassert solution('5\\n3\\n2\\n4\\n3\\n5') == '7'\nassert solution('5\\n5\\n2\\n4\\n3\\n5') == '9'\nassert solution('6\\n5\\n2\\n4\\n3\\n5') == '9'\n",
        "num_ids_2": 47,
        "num_ids_4": 97
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2\\n4\\n3\\n5') == '7'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\\n\") == \"7\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 2 4 3 5') == '7'\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n    5\n    3\n    2\n    4\n    3\n    5\n    \"\"\") == '7'\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\nassert solution(\"100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\") == \"72\"\n",
        "num_ids_2": 125,
        "num_ids_4": 125
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\n\"\"\"\n\nimport numpy as np\n\nN, A, B, C, D, E = map(int, input().split())",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\n\"\"\"\n\nimport sys\n\nN, A, B, C, D, E = [int(x) for x in sys.stdin.readline().split(\" \")]\n\nn = N\nans = 0\nwhile True:\n    if n == 1:\n        break\n    if n % 2 == 1:\n        ans += A\n        n -= 1\n    else:\n        ans += B\n        n //= 2\n    ans += C\n    n -= D\n    ans += E\n    n -= E\n\nprint(ans)\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == 2\n\"\"\"\nimport unittest\nfrom typing import List",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == 2\n\"\"\"\n\nimport sys\nimport typing as t\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 2\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '2'\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n') == '2'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\n1') == '10\\n0'\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"2\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2\") == \"5\"\n\"\"\"\n\nimport sys\nfrom collections import Counter",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == 2\nassert solution('3') == 2\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == '2'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20\") == \"23\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '3'\nassert solution('4') == '5'\nassert solution('7') == '11'\nassert solution('20') == '23'\nassert solution('30') == '31'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n20\n''') == '23'\n\nassert solution('''\n\n20\n\n''') == '23'\n\nassert solution('''\n\n20\n\n''') == '23'\n\nassert solution('''\n\n20\n\n''') == '23'\n\nassert solution('''\n\n20\n\n''') == '23'",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20\") == \"23\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == output()\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '5'\nassert solution('5') == '5'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"3 10\") == \"3\"\nassert solution(\"3 10 11\") == \"3\"\nassert solution(\"3 10 11 20\") == \"3\"\nassert solution(\"3 10 11 20 19\") == \"3\"\n",
        "num_ids_2": 21,
        "num_ids_4": 46
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20\") == \"23\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20\") == \"23\"\n\n\"\"\"\n\n\"\"\"\nSOLUTION",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('20') == '23'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 1 3 2\") == '1'\nassert solution(\"8\\n3 5 7 2 9 7 7 7\") == '3'\nassert solution(\"10\\n2 5 7 9 4 9 3 8 7 9\") == '4'\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 58
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\"\n\nn = int(stdin.readline().strip())\nseq = list(map(int, stdin.readline().split()))\n\nseq_set = set(seq)\nseq_set.remove(min(seq_set))\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '0'\nassert solution('1 1 1 1') == '1'\nassert solution('2 3 4 1') == '0'\nassert solution('1 1 1 2 2') == '1'\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 47
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 3 2\") == \"1\"\nassert solution(\"3 3 3 2\") == \"0\"\nassert solution(\"3 3 3 3\") == \"0\"\nassert solution(\"2 2 2 2\") == \"0\"\n\n\"\"\"\n\n\"\"\"\n/\\/\\/\\/ if the sequence is not /\\/\\/\\/, replace one of its elements, so the sequence becomes /\\/\\/\\/.\nWe are looking for the most frequent pair of numbers that appear in the sequence.\n\n1. Create a dictionary, where each number is a key, and each key has the value 1.\n2. For each pair of numbers, if the key exists in the dictionary, increment its value by 1.\n3. If the pair of numbers is not in the dictionary, add the pair to the dictionary and set the value to 1.\n4. At the end of the loop, return the dictionary with the most frequent pair of numbers.\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('10 1 3 2') == ''\nassert solution('3 1 3 2') == '1'\nassert solution('3 1 3 3 2') == '0'\nassert solution('3 2 3 3 2') == '1'\n",
        "num_ids_2": 19,
        "num_ids_4": 46
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\"\n\nfrom __future__ import annotations\n\nimport sys\n\nINPUT_LINES = iter(sys.stdin.read().splitlines())\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n3 1 3 2''') == '1'\n\n\"\"\"\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 100 90 80\") == '23'\n\"\"\"\nfrom collections import deque\n\nassert solution(\"5 100 90 80\") == '23'\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input_string) == output_string\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\"\n\nfrom typing import List, Set\n\nimport unittest\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        n, a, b, c = [int(s) for s in stdin.split()]\n        costs = {(a, b, c): 0}\n        for l in range(1, n + 1):\n            for l2 in range(l, n + 1):\n                for l3 in range(l2, n + 1):\n                    l2cost, l3cost = costs[(l, l2, l3)]\n                    cost = l2cost + l3cost + max(0, (a * l + b * l2 + c * l3) - (a * l2 + b * l + c * l3))\n                    if cost < costs.get((l, l2, l3), float('inf')):\n                        costs[(l, l2, l3)] = cost\n        return str(costs[(1, n, n)])\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test_solution(self):\n        self.assertEqual(\n            \"23\",\n            self.solution.solve(stdin=\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\")\n        )\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"5 100 90 80\\n98\\n40\\n30\\n21\\n80\\n\"\n) == \"23\"\n\n\"\"\"\n\n\nimport math",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('abcdefg') == 'cdefgab'\nassert solution('ZYXWVU') == 'YXWVUC'\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 42
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\n\"\"\"\n\n\"\"\"\nAUTHOR\nLinh Tran\nLinh.A.T@outlook.com\n\nDESCRIPTION\nA solution to the problem \"Shift each character of S by N in alphabetical order\"\n\nINPUT\nA string of uppercase English letters\nAn integer N\n\nOUTPUT\nThe string resulting from shifting each character of S by N in alphabetical order.\n\nTIME COMPLEXITY\nO(n)\n\nAuxiliary SPACE COMPLEXITY\nO(n)\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABCXYZ\", 2) == \"CDEZAB\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABXYZ') == 'CDEZAB'\n\"\"\"\n\nimport math\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    'ABCXYZ'\n) == 'CDEZAB'\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(A) == B\nassert solution(ABCXYZ) == CDEZAB\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"\n\"\"\"\n\n\nfrom math import gcd",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\nassert solution('1 2750131') == '199999'\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5 2 3 1 2') == '2 3 1 4 5'\nassert solution('1 1 1 1 1') == '2 3 5 7'\nassert solution('2 3') == '3 2'\nassert solution('3 3') == '3 1'\nassert solution('5 5') == '5 5'\n",
        "num_ids_2": 36,
        "num_ids_4": 60
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\nassert solution('1 2750131 199999') == '199999'",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\n\"\"\"\n\nfrom math import sqrt\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5 2 3 2 4\\n') == '3 4 2'\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\"\nassert solution(\"5 1\\n2 1 3 5 4\") == \"21112\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\nassert solution(\"5 1\\n2 4 5 3 1\") == \"21112\"\n\nprint(\"Successfully passed!\")\n\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 79
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n2 4 5 3 1\") == '11111'\nassert solution(\"5 1\\n2 1 3 5 4\") == '21112'\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == '1121122'\n\nassert solution(\"5 1\\n2 4 5 3 1\") == '21112'\nassert solution(\"5 2\\n2 4 5 3 1\") == '11111'",
        "num_ids_2": 38,
        "num_ids_4": 79
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\nassert solution(\"6 2\") == \"111111\"\nassert solution(\"7 2\") == \"222222\"\n",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\n\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n2 4 5 3 1') == '111111'\nassert solution('5 1\\n2 1 3 5 4') == '221122'\nassert solution('7 1\\n7 2 1 3 5 4 6') == '1121122'\n",
        "num_ids_2": 39,
        "num_ids_4": 61
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\"\nassert solution(\"5 1\\n2 1 3 5 4\") == \"21112\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\nassert solution(\"5 1\\n2 4 5 3 1\") == \"21112\"\n\nimport sys\ninput = sys.stdin.readline",
        "num_ids_2": 38,
        "num_ids_4": 79
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\"\nassert solution(\"5 1\\n2 1 3 5 4\") == \"21112\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"",
        "num_ids_2": 38,
        "num_ids_4": 60
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5, 2) == \"11111\"\nassert solution(5, 1) == \"21112\"\nassert solution(7, 1) == \"1121122\"\nassert solution(7, 4) == \"22112\"\nassert solution(5, 1) == \"21112\"\n\n\n-----\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 5\") == \"1\"\nassert solution(\"2 3 1\") == \"0\"\nassert solution(\"1 1 1 1 1\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"0\"\nassert solution(\"1 2 3 5 4\") == \"1\"\n",
        "num_ids_2": 24,
        "num_ids_4": 52
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == 2\nassert solution(\"2\\n1 2\") == 2\nassert solution(\"4\\n1 3 3 7\") == 4\n\"\"\"\n\nimport math\nimport sys\n\nMOD = int(1e9) + 7\n\nn = int(input())\nnums = list(map(int, input().split()))",
        "num_ids_2": 27,
        "num_ids_4": 41
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n1 2 1 2 3\n''') == 2\n\nassert solution('''3\n1 2 1\n''') == 2\n\nassert solution('''4\n1 3 3 7\n''') == 4\n\nassert solution('''5\n1 2 1 2 3\n''') == 2\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('6\\n1 3 3 7') == 4\nassert solution('3\\n1 3 7') == 4\n\nassert solution('') == ''\nassert solution('5\\n1 3 3 7') == 4",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 1 2 3') == 2\n\n\"\"\"\n\nn = int(stdin.readline())\n\na = [int(x) for x in stdin.readline().split()]\n\na = [0] + a + [max(a) + 1]\n\nb = []\n\nfor i in range(n + 1):\n    b.append(i)\n\nres = 0\n\nfor i in range(1, n + 1):\n    if a[i] == a[i - 1]:\n        b[i] = b[i - 1]\n    else:\n        if b[i] == b[i - 1]:\n            b[i] += 1\n\nfor i in range(1, n):\n    if b[i] == b[i + 1]:\n        res += 1\n\nprint(res % 1000000007)",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 1 2 3') == '2'\n\n\"\"\"\nfrom collections import defaultdict",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 1 2 3') == 2\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\nd = {a[i]: i for i in range(n)}\n\ncounter = {}\ni = 0\nwhile i < n - 1:\n    if a[i] == a[i + 1]:\n        i += 1\n    elif a[i] > a[i + 1]:\n        counter[a[i + 1]] = counter.get(a[i + 1], 0) + 1\n        i += 2\n    else:\n        counter[a[i]] = counter.get(a[i], 0) + 1\n        i += 2",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 2 1') == 4\nassert solution('1 2 3 4') == 2\nassert solution('100 1') == 2\nassert solution('100 1 3') == 2\nassert solution('100 1 3 5') == 2\n",
        "num_ids_2": 22,
        "num_ids_4": 41
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 1 2 3') == 2\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 1 1 1023\") == \"0\"\nassert solution(\"4 7 1 5 4 9\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 59
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"16\") == \"1\"\nassert solution(\"1 1 1 1023\") == \"0\"\n\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 53
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"16\") == \"1\"\nassert solution(\"1 1 1 1023\") == \"0\"\n",
        "num_ids_2": 29,
        "num_ids_4": 53
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 4 7 1 5 4 9\") == '1'\nassert solution(\"5 4 7 1 5 4 9\") == '2'\nassert solution(\"1 2 3 4 5\") == '0'\nassert solution(\"1 1 1 1023\") == '0'\nassert solution(\"4 7 1 5 4 9\") == '1'\n\n\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 60
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 1 1 1023\") == \"0\"\nassert solution(\"16\") == \"1\"\n\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 53
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 1 1 1023\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 43
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n4 7 1 5 4 9\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\") == \"2\"\nassert solution(\"1\\n16\") == \"1\"\nassert solution(\"4\\n1 1 1 1023\") == \"0\"\n\"\"\"\n\nn = int(input())\nsequence = list(map(int, input().split()))\n\ncurr_sum = 0\ncount = 0\nfor num in sequence:\n    if (num + curr_sum) & 1:\n        curr_sum += num\n        count += 1\nprint(count)",
        "num_ids_2": 35,
        "num_ids_4": 65
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 1 5 4 9\") == '1'\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7 1 5 4 9\") == '1'\nassert solution(\"1 2 3 4 5\") == '2'\nassert solution(\"1 2 3 4 5\") == '2'\nassert solution(\"1 2 3 4 5\") == '2'",
        "num_ids_2": 29,
        "num_ids_4": 57
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution([\"4\", \"7\", \"1\", \"5\", \"4\", \"9\"]) == \"1\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"01101110\") == 5\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11110') == '1'\nassert solution('101010') == '1'\nassert solution('110110') == '2'\nassert solution('111110') == '2'\nassert solution('111010') == '3'\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0011\") == 4\n\"\"\"\n\nimport sys",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11011100\") == \"4\"\nassert solution(\"11\") == \"0\"\nassert solution(\"10011100\") == \"5\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 34
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('111011100') == 4\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1100') == '4'\nassert solution('11110') == '4'\nassert solution('111101100') == '2'\nassert solution('1111011011110111110') == '11'\nassert solution('1111101111111111') == '1'\n\nprint(solution(stdin))\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 49
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"001100\") == 4\n\nassert solution(\"011111\") == 4\nassert solution(\"111011\") == 4\nassert solution(\"110111\") == 5\nassert solution(\"110110\") == 5\n\"\"\"\n\nimport math\n\nstdin = input()\nprint(int(math.sqrt(len(stdin)))**2)\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0011') == '4'\n\n\"\"\"\n\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.red = None\n        self.blue = None\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101010\") == \"8\"\nassert solution(\"111000110110\") == \"9\"\n\"\"\"\n\nimport unittest\nimport sys\n\nclass TestStringMethods(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"101010\"), \"8\")\n        self.assertEqual(solution(\"111000110110\"), \"9\")",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11101111001111111111011111111111\") == \"7\"\nassert solution(\"1111111111111111111111111111111111\") == \"1\"\nassert solution(\"111111111111111111111111111111111\") == \"0\"\nassert solution(\"11101111111111111111011111111111\") == \"4\"\nassert solution(\"11101111011111111111111111110111\") == \"0\"\n\nprint(\"All tests passed.\")\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 75
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == '2'\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == 2\n\"\"\"\n\nimport math",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == '2'\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n\nN, M = [int(x) for x in stdin.readline().strip().split()]\nIDCards = [list(map(int, stdin.readline().strip().split())) for _ in range(M)]",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n1 3') == '1'\nassert solution('1 2\\n1 3\\n2 4') == '2'\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 42
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n\nfrom collections import Counter\n\nn, m = map(int, stdin.readline().split())\nl = [0] * (n + m + 1)\nfor _ in range(n):\n    a, b = map(int, stdin.readline().split())\n    l[a] = b\n\nfor i in range(n + 1, n + m + 1):\n    l[i] = 0\n\nd = Counter(l)\n\ncount = 0\nfor i in d:\n    if d[i] == 0:\n        continue\n    if d[i + 1]!= 0 or d[i - 1]!= 0:\n        count += 1\n\nprint(count)\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n1 2 2 1''') == '2'\nassert solution('''5\n1 2 3 4 5''') == '0'\nassert solution('''3\n1 3 2''') == '0'\nassert solution('''3\n2 2 1''') == '1'\nassert solution('''3\n1 1 1''') == '0'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 2 1') == '2'\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 2 1\") == 2\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 2 1') == '2'\nassert solution('4\\n4 4 2 1') == '0'\nassert solution('4\\n5 5 6 6') == '3'\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 2 1') == '2'\n\n\"\"\"\n\nimport math\n\nn = int(input())\nh = [int(s) for s in input().split(' ')]\nh_min = math.inf\nh_max = -math.inf\nfor i in range(len(h)):\n    h_min = min(h_min, h[i])\n    h_max = max(h_max, h[i])\n\ncount = 0\nfor i in range(len(h)):\n    if h[i] == h_max:\n        count += 1\nprint(count)",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\nprint('Passed')\n\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n",
        "num_ids_2": 33,
        "num_ids_4": 50
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n",
        "num_ids_2": 33,
        "num_ids_4": 50
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n5 10\n2 1 -3\n''') == '3'\nassert solution('''\n5 10\n2 1 -3\n''') == '4'\nassert solution('''\n2 4\n-1 1\n''') == '4'\n",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\nassert solution(\"4 10\\n-1 1\") == \"4\"\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 50
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 5\n2 1 -3''') == '3'\nassert solution('''2 4\n-1 1''') == '4'\nassert solution('''4 10\n2 4 1 2''') == '2'\n\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"",
        "num_ids_2": 33,
        "num_ids_4": 50
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 -1\") == \"3\"\nassert solution(\"2 3\\n2 1\") == \"0\"\nassert solution(\"2 3\\n2 -3\") == \"0\"\n\"\"\"\nfrom collections import Counter",
        "num_ids_2": 31,
        "num_ids_4": 47
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10\\n2 4 1 2\") == \"2\"\nassert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\nassert solution(\"2 4\\n1 1\") == \"4\"\n\n\"\"\"\nimport sys\nfrom typing import List\n",
        "num_ids_2": 34,
        "num_ids_4": 66
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"",
        "num_ids_2": 33,
        "num_ids_4": 50
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"6\\n4 8 6 3 12 9\"\n) == \"9 3 6 12 4 8\"\n\nassert solution(\n\"4\\n42 28 84 126\"\n) == \"126 42 84 28\"\n\nassert solution(\n\"2\\n1000000000000000000 3000000000000000000\"\n) == \"3000000000000000000 1000000000000000000\"\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\"\"\"\nimport math\n",
        "num_ids_2": 36,
        "num_ids_4": 55
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n4 8 6 3 12 9') == '9 3 6 12 4 8'\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\n\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\n\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\n---\n\nPolycarp likes to play with numbers. He takes some integer number $x$, writes it down on the board, and then performs with it $n - 1$ operations of the two kinds:   divide the number $x$ by $3$ ($x$ must be divisible by $3$);  multiply the number $x$ by $2$. \n\nAfter each operation, Polycarp writes down the result on the board and replaces $x$ by the result. So there will be $n$ numbers on the board after all.\n\nYou are given a sequence of length $n$ \u2014 the numbers that Polycarp wrote down. This sequence is given in arbitrary order, i.e. the order of the sequence can mismatch the order of the numbers written on the board.\n\nYour problem is to rearrange (reorder) elements of this sequence in such a way that it can match possible Polycarp's game in the order of the numbers written on the board. I.e. each next number will be exactly two times of the previous number or exactly one third of previous number.\n\nIt is guaranteed that the answer exists.\n\n\n-----Input-----\n\nThe first line of the input contatins an integer number $n$ ($2 \\le n \\le 100$) \u2014 the number of the elements in the sequence. The second line of the input contains $n$ integer numbers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 3 \\cdot 10^{18}$) \u2014 rearranged (reordered) sequence that Polycarp can wrote down on the board.\n\n\n-----Output-----\n\nPrint $n$ integer numbers \u2014 rearranged (reordered) input sequence that can be the sequence that Polycarp could write down on the board.\n\nIt is guaranteed that the answer exists.\n\n\n-----Examples-----\nInput\n6\n4 8 6 3 12 9\n\nOutput\n9 3 6 12 4 8 \n\nInput\n4\n42 28 84 126\n\nOutput\n126 42 84 28 \n\nInput\n2\n1000000000000000000 3000000000000000000\n\nOutput\n3000000000000000000 1000000000000000000 \n\n\n\n-----Note-----\n\nIn the first example the given sequence can be rearranged in the following way: $[9, 3, 6, 12, 4, 8]$. It can match possible Polycarp's game which started with $x = 9$.\n",
        "num_ids_2": 36,
        "num_ids_4": 55
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n",
        "num_ids_2": 42,
        "num_ids_4": 64
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8 6 3 12 9\\n\") == \"9 3 6 12 4 8\\n\"\nassert solution(\"42 28 84 126\\n\") == \"126 42 84 28\\n\"\nassert solution(\"1000000000000000000 3000000000000000000\\n\") == \"3000000000000000000 1000000000000000000\\n\"\n\n\n\n\"\"\"\n",
        "num_ids_2": 44,
        "num_ids_4": 67
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\nout = []\nfor i in range(n):\n    if arr[i] % 3 == 0:\n        out.append(arr[i]//3)\n    else:\n        out.append(arr[i] * 2)\nprint(\" \".join(map(str, out)))\n",
        "num_ids_2": 42,
        "num_ids_4": 64
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\nassert solution(\"4\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\n\n-----Test data-----\n\n1) Sample test\n2) Test 1\n3) Test 2\n4) Test 3\n5) Test 4\n6) Test 5\n7) Test 6\n8) Test 7\n9) Test 8\n10) Test 9\n11) Test 10\n12) Test 11\n13) Test 12\n14) Test 13\n15) Test 14\n16) Test 15\n17) Test 16\n18) Test 17\n19) Test 18\n20) Test 19\n21) Test 20\n22) Test 21\n23) Test 22\n24) Test 23\n25) Test 24\n26) Test 25\n27) Test 26\n28) Test 27\n29) Test 28\n30) Test 29\n31) Test 30\n32) Test 31\n33) Test 32\n34) Test 33\n35) Test 34\n36) Test 35\n37) Test 36\n38) Test 37\n39) Test 38\n40) Test 39\n41) Test 40\n42) Test 41\n43) Test 42\n44) Test 43\n45) Test 44\n46) Test 45\n47) Test 46\n48) Test 47\n49) Test 48\n50) Test 49\n51) Test 50\n52) Test 51\n53) Test 52\n54) Test 53\n55) Test 54\n56) Test 55\n57) Test 56\n58) Test 57\n59) Test 58\n60) Test 59\n61) Test 60\n62) Test 61\n63) Test 62\n64) Test 63\n65) Test 64\n66) Test 65\n67) Test 66\n68) Test 67\n69) Test 68\n70) Test 69\n71) Test 70\n72) Test 71\n73) Test 72\n74) Test 73\n75) Test 74\n76) Test 75\n77) Test 76\n78) Test 77\n79) Test 78\n80) Test 79\n81) Test 80\n82) Test 81\n83) Test 82\n84) Test 83\n85) Test 84\n86) Test 85\n87) Test 86\n88) Test 87\n89) Test 88\n90) Test 89\n91) Test 90\n92) Test 91\n93) Test 92\n94) Test 93\n95) Test 94\n96) Test 95\n97) Test 96\n98) Test 97\n99) Test 98\n100) Test 99\n101) Test 100\n102) Test 101\n103) Test 102\n104) Test 103\n105) Test 104\n106) Test 105\n107) Test 106\n108) Test 107\n109) Test 108\n110) Test 109\n111) Test 110\n112) Test 111\n113) Test 112\n114) Test 113\n115) Test 114\n116) Test 115\n117) Test 116\n118) Test 117\n119) Test 118\n120) Test 119\n121) Test 120\n122) Test 121\n123) Test 122\n124) Test 123\n125) Test 124\n126) Test 125\n127) Test 126\n128) Test 127\n129) Test 128\n130) Test 129\n131) Test 130\n132) Test 131\n133) Test 132\n134) Test 133\n135) Test 134\n136) Test 135\n137) Test 136\n138) Test 137\n139) Test 138\n140) Test 139\n141) Test 140\n142) Test 141\n143) Test 142\n144) Test 143\n145) Test 144\n146) Test 145\n147) Test 146\n148) Test 147\n149) Test 148\n150) Test 149\n151) Test 150\n152) Test 151\n153) Test 152\n154) Test 153\n155) Test 154\n156) Test 155\n157) Test 156\n158) Test 157\n159) Test 158\n160) Test 159\n161) Test 160\n162) Test 161\n163) Test 162\n164) Test 163\n165) Test 164\n166) Test 165\n167) Test 166\n168) Test 167\n169) Test 168\n170) Test 169\n171) Test 170\n172) Test 171\n173) Test 172\n174) Test 173\n175) Test 174\n176) Test 175\n177) Test 176\n178) Test 177\n179) Test 178\n180) Test 179\n181) Test 180\n182) Test 181\n183) Test 182\n184) Test 183\n185) Test 184\n186) Test 185\n187) Test 186\n188) Test 187\n189) Test 188\n190) Test 189\n191) Test 190\n192) Test 191\n193) Test 192\n194) Test 193\n195) Test 194\n196) Test 195\n197) Test 196\n198) Test 197\n199) Test 198\n200) Test 199\n201) Test 200\n202) Test 201\n203) Test 202\n204) Test 203\n205) Test 204\n206) Test 205\n207) Test 206\n208) Test 207\n209) Test 208\n210) Test 209\n211) Test 210\n212) Test 211\n213) Test 212\n214) Test 213\n215) Test 214\n216) Test 215\n217) Test 216\n218) Test 217\n219) Test 218\n220) Test 219\n221) Test 220\n222) Test 221\n223) Test 222\n224) Test 223\n225) Test 224\n226) Test 225\n227) Test 226\n228) Test 227\n229) Test 228\n230) Test 229\n231) Test 230\n232) Test 231\n233) Test 232\n234) Test 233\n235) Test 234\n236) Test 235\n237) Test 236\n238) Test 237\n239) Test 238\n240) Test 239\n241) Test 240\n242) Test 241\n243) Test 242\n244) Test 243\n245) Test 244\n246) Test 245\n247) Test 246\n248) Test 247\n249) Test 248\n250) Test 249\n251) Test 250\n252) Test 251\n253) Test 252\n254) Test 253\n255) Test 254\n256) Test 255\n257) Test 256\n258) Test 257\n259) Test 258\n260) Test 259\n261) Test 260\n262) Test 261\n263) Test 262\n264) Test 263\n265) Test 264\n266) Test 265\n267) Test 266\n268) Test 267\n269) Test 268\n270) Test 269\n271) Test 270\n272) Test 271\n273) Test 272\n274) Test 273\n275) Test 274\n276) Test 275\n277) Test 276\n278) Test 277\n279) Test 278\n280) Test 279\n281",
        "num_ids_2": 42,
        "num_ids_4": 86
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8 6 3 12 9') == '9 3 6 12 4 8'\nassert solution('42 28 84 126') == '126 42 84 28'\n\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 1 2 7 10 12') == '3'\nassert solution('5 -1 2 5 8 11') == '1'\n\n\"\"\"\nfrom typing import List, Tuple\nfrom collections import namedtuple\n\nPoint = namedtuple(\"Point\", \"x y\")\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5 4 7 10 12') == '3'\nassert solution('1 2 5 8 11') == '1'\n\n\"\"\"\n\n\nfrom itertools import combinations\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 5 8 11\") == \"1\"\nassert solution(\"5 -1 2 5 8 11\") == \"1\"\nassert solution(\"5 -1 2 5 8 -1\") == \"1\"\nassert solution(\"5 1 2 5 8 -1\") == \"1\"\nassert solution(\"5 1 2 5 8 -1\") == \"1\"\n",
        "num_ids_2": 30,
        "num_ids_4": 63
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 4 7 10 12\") == \"3\"\nassert solution(\"-1 2 5 8 11\") == \"1\"\n\n\"\"\"\n\nimport math",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\\n8\"\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7 8 10\") == \"3\"\nassert solution(\"1 2 5 8 11\") == \"1\"\nassert solution(\"1 2 5 8 11\") == \"1\"\nassert solution(\"1 2 5 8 11\") == \"1\"\nassert solution(\"1 2 5 8 11\") == \"1\"\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\n\"\"\"\n\nn = int(input())\n\narr = list(map(int, input().split()))\n\narr.sort()",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 4 7 10 12\") == \"3\"\nassert solution(\"-1 2 5 8 11\") == \"1\"\n\n-----\n<div>\n<p>Here we have a description for a theorem of the code Jam 2019 Qualification Round. This is a popular mathematical problem that was asked in the Code Jam 2019. The problem is as follows:</p>\n<p>There are $n$ distinct points on a coordinate line, the coordinate of $i$-th point equals to $x_i$. Choose a subset of the given set of points such that the distance between each pair of points in a subset is an integral power of two. It is necessary to consider each pair of points, not only adjacent. Note that any subset containing one element satisfies the condition above. Among all these subsets, choose a subset with maximum possible size.</p>\n<p>In other words, you have to choose the maximum possible number of points $x_{i_1}, x_{i_2}, \\dots, x_{i_m}$ such that for each pair $x_{i_j}$, $x_{i_k}$ it is true that $|x_{i_j} - x_{i_k}| = 2^d$ where $d$ is some non-negative integer number (not necessarily the same for each pair of points).</p>\n<p>Input</p>\n<p>The first line contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of points.</p>\n<p>The second line contains $n$ pairwise distinct integers $x_1, x_2, \\dots, x_n$ ($-10^9 \\le x_i \\le 10^9$) \u2014 the coordinates of points.</p>\n<p>Output</p>\n<p>In the first line print $m$ \u2014 the maximum possible number of points in a subset that satisfies the conditions described above. </p>\n<p>In the second line print $m$ integers \u2014 the coordinates of points in the subset you have chosen. </p>\n<p>If there are multiple answers, print any of them.</p>\n<p>Note: The result may contain several lines. In each line, print exactly one integer $x$, where $x$ is an element of the given set.</p>\n<p>It is guaranteed that the given set of points can't contain points with the same coordinates (there's no point to find the biggest subset of points having all distinct coordinates).</p>\n<p>Input:</p>\n<pre>\n6\n3 5 4 7 10 12\n</pre>\n<p>Output:</p>\n<pre>\n3\n7 3 5\n</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div>\n<div>\n<p>We want to solve the following problem:</p>\n<p>Let $n$ points on a line be given in the input:</p>\n<p>$n$ points $x_1, x_2, \\dots, x_n$ ($-10^9 \\le x_i \\le 10^9$) \u2014 coordinates of points.</p>\n<p>The distance between two points $x_i$ and $x_j$ is equal to $|x_i - x_j|$ where $|x|$ is a modulus of a point $x$: $|x| \\le 10^9$. It is also true that $|x| = 1$ for any point $x$.</p>\n<p>We want to choose a subset of the given set of points such that the distance between each pair of points in a subset is an integral power of two.</p>\n<p>You have to consider each pair of points, not only adjacent.</p>\n<p>The result may contain several lines. In each line, print exactly one integer $x$, where $x$ is an element of the given set.</p>\n<p>It is guaranteed that the given set of points can't contain points with the same coordinates (there's no point to find the biggest subset of points having all distinct coordinates).</p>\n<p>Input</p>\n<p>The first line contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of points. </p>\n<p>The second line contains $n$ pairwise distinct integers $x_1, x_2, \\dots, x_n$ ($-10^9 \\le x_i \\le 10^9$) \u2014 the coordinates of points.</p>\n<p>Output</p>\n<p>In the first line print $m$ \u2014 the maximum possible number of points in a subset that satisfies the conditions described above. </p>\n<p>In the second line print $m$ integers \u2014 the coordinates of points in the subset you have chosen. </p>\n<p>If there are multiple answers, print any of them.</p>\n<p>Note: The result may contain several lines. In each line, print exactly one integer $x$, where $x$ is an element of the given set.</p>\n<p>It is guaranteed that the given set of points can't contain points with the same coordinates (there's no point to find the biggest subset of points having all distinct coordinates).</p>\n<p>Input:</p>\n<pre>\n6\n3 5 4 7 10 12\n</pre>\n<p>Output:</p>\n<pre>\n3\n7 3 5\n</pre>\n<p",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 4 7 10 12\") == \"3\"\n\"\"\"\n\nn = int(input())\nA = list(map(int, input().split()))\n\nt = 0\na = A[0]\nb = A[1]\n\nfor i in A:\n    if i <= a:\n        a = i\n    if i >= b:\n        b = i\n\nwhile (b - a) >> t:\n    t += 1\n\nprint(t)\nprint(*A)\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\n-----\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '2 3 3'\n) == '0 2'\n\"\"\"\n\na, b, k = map(int, stdin.split())\nprint(a, b, k)\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 3\\n') == '0 2'\nprint('Passed')\n\n\"\"\"\n\nfrom math import ceil, gcd\nfrom typing import List, Tuple\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 3\\n') == '0 2'\nprint(solution('2 3 3\\n'))\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 3 3''') == '0 2'\nassert solution('''1 1 1''') == '0 0'\nassert solution('''0 0 0''') == '0 0'\n'''\nimport sys",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 3 3''') == '0 2'\nassert solution('''3 5 2''') == '2 2'\nassert solution('''1 1 1''') == '0 0'\nassert solution('''10 1000000000 1''') == '0 0'\nassert solution('''10 1 1''') == '10 10'\n",
        "num_ids_2": 32,
        "num_ids_4": 65
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\nfrom sys import stdin\nfrom typing import List, Tuple\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\n\nimport sys\nimport re\n\nstdin = sys.stdin\n\nstdout = sys.stdout\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nK = int(stdin.readline())\n\nprint(A - B * K, A + B * K)",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"103\") == \"3\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('101') == '1'\nassert solution('102') == '2'\nassert solution('103') == '3'",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('103') == '3'\nassert solution('101') == '1'\n\"\"\"\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('101') == '1'\nassert solution('102') == '2'\nassert solution('103') == '3'\n\"\"\"\n\nimport math\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\"\"\"\nimport sys\n\nX = int(sys.stdin.readline())",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"103\") == \"3\"\n\"\"\"\n\nX = int(input())",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('101') == '1'\nassert solution('103') == '3'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100') == '3'\nassert solution('101') == '3'\nassert solution('102') == '2'\nassert solution('103') == '1'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('103') == '3'\nassert solution('110') == '1'\nassert solution('111') == '1'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"103\") == \"3\"\nassert solution(\"1\") == \"0\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n6\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n30\n32\n34\n36\n38\n40\n42\n44\n46\n48\n50\n52\n54\n56\n58\n60\n62\n64\n66\n68\n70\n72\n74\n76\n78\n80\n82\n84\n86\n88\n90\n92\n94\n96\n98\n100\n102\n104\n106\n108\n110\n112\n114\n116\n118\n120\n122\n124\n126\n128\n130\n132\n134\n136\n138\n140\n142\n144\n146\n148\n150\n152\n154\n156\n158\n160\n162\n164\n166\n168\n170\n172\n174\n176\n178\n180\n182\n184\n186\n188\n190\n192\n194\n196\n198\n200''') == '9'\nassert solution('''3\n6\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n30\n32\n34\n36\n38\n40\n42\n44\n46\n48\n50\n52\n54\n56\n58\n60\n62\n64\n66\n68\n70\n72\n74\n76\n78\n80\n82\n84\n86\n88\n90\n92\n94\n96\n98\n100\n102\n104\n106\n108\n110\n112\n114\n116\n118\n120\n122\n124\n126\n128\n130\n132\n134\n136\n138\n140\n142\n144\n146\n148\n150\n152\n154\n156\n158\n160\n162\n164\n166\n168\n170\n172\n174\n176\n178\n180\n182\n184\n186\n188\n190\n192\n194\n196\n198\n200''') == '5'\nassert solution('''2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n30\n32\n34\n36\n38\n40\n42\n44\n46\n48\n50\n52\n54\n56\n58\n60\n62\n64\n66\n68\n70\n72\n74\n76\n78\n80\n82\n84\n86\n88\n90\n92\n94\n96\n98\n100\n102\n104\n106\n108\n110\n112\n114\n116\n118\n120\n122\n124\n126\n128\n130\n132\n134\n136\n138\n140\n142\n144\n146\n148\n150\n152\n154\n156\n158\n160\n162\n164\n166\n168\n170\n172\n174\n176\n178\n180\n182\n184\n186\n188\n190\n192\n194\n196\n198\n200''') == '1'\n\n\"\"\"\nSample Input\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n30\n32\n34\n36\n38\n40\n42\n44\n46\n48\n50\n52\n54\n56\n58\n60\n62\n64\n66\n68\n70\n72\n74\n76\n78\n80\n82\n84\n86\n88\n90\n92\n94\n96\n98\n100\n102\n104\n106\n108\n110\n112\n114\n116\n118\n120\n122\n124\n126\n128\n130\n132\n134\n136\n138\n140\n142\n144\n146\n148\n150\n152\n154\n156\n158\n160\n162\n164\n166\n168\n170\n172\n174\n176\n178\n180\n182\n184\n186\n188\n190\n192\n194\n196\n198\n\nSample Output\n9\n5\n1\n\nExplanation\nThe n_th term of the sequence is given by:\n\nn_th term = gcd(n_th-1, n_th-2, n_th-3,....n_th-n+1)\n\nSince all the terms of the sequence are positive numbers,\nthe gcd of all the numbers in the sequence is the lcm of all the numbers in the sequence.\n\nThus the output is given by:\n\n(n_th-1)+(n_th-2)+(n_th-3)+(n_th-4)+(...+n_th-n+1)\n\nAs mentioned above, we get:\n\nn_th-1 + n_th-2 + n_th-3 + n_th-4 +... + n_th-n + 1\n\n=> gcd(n_th-1, n_th-2, n_th-3, n_th-4,..., n_th-n+1)\n\nSince gcd(n_th-1, n_th-2, n_th-3, n_th-4,..., n_th-n+1) = gcd(n_th-1, n_th-2, n_th-3, n_th-4,..., n_th-n+1)\n\n=> (n_th-1)(n_th-2)(n_th-3)(n_th-4)...(n_th-n+1)\n\n=> n_th-1 * n_th-2 * n_th-3 * n_th-4... * n_th-n+1\n\n=> n_th-1 * n_th-2 * n_th-3 * n_th-4... * n_th-n+1\n\n=> n_th-1 * n_th-2 * n_th-3 * n_th-4... * n_th-n+1\n\n=> n_th-1 * n_th-2 * n_th-3 * n_th-4... * n_th-n+1\n\n=> n_th-1 * n_th-2 * n_th-3 * n_th-4... * n_th-n+1\n\n=> n_th-1 * n_th-2 * n_th-3 * n_th-4... * n_th-n+1\n\n=> n_th-1 * n_th-2 * n_th-3 * n_th-4... * n_th-n+1\n\n=> n_th-1 * n_th-2 * n_th-3 * n_th-4... * n_th-n+1\n\n=> n_th-1 * n_th-2 * n_th-3 * n_th-4... * n_th-n+1\n\n=> n_th-1 * n_th-2 * n_th-3 * n_th-4... * n_th-n+1\n\n=> n_th-1 * n_th-2 * n_th-3 * n_th-4... * n_th-n+1\n\n=> n_th-1 * n_th-2 * n_th-3 * n_th-4... * n_th-n+1\n\n=> n_th-1 * n_th-2 * n_th-3 * n_th-4... * n_th-n+1\n\n=> n_th-1 * n_th-2 * n_th-3 * n_th-4... * n_th-n+1\n\n=> n_th-1 * n_th-2 * n_th-3 * n_th-4... * n_th-n+1\n\n=> n_th-1 * n_th-2 * n_th",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n') == '9'\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('2\\n') == ''\nassert solution('3\\n') == ''\nassert solution('4\\n') == ''\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"9\"\n\"\"\"\n\nK = int(stdin.readline())\n\ngreatest_common_divisor = 0\n\nfor i in range(1, K+1):\n    for j in range(1, K+1):\n        for k in range(1, K+1):\n            greatest_common_divisor = greatest_common_divisor + gcd(i, j, k)\n\nprint(greatest_common_divisor)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '9'\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"9\"\nassert solution(\"2\") == \"6\"\nassert solution(\"4\") == \"16\"\n\"\"\"\nimport math\n\nK = int(stdin.readline())\n\nprint((math.factorial(K) * math.factorial(K) * math.factorial(K)) // (math.factorial(2) * math.factorial(K - 2) * math.factorial(K - 2)))\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"9\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"9\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == '9'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1\\n2\\n1\\n2\\n') == '9'\n\"\"\"\n\nk = int(input())\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n3 4 6') == '10'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == 10\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0441\u043b\u0435\u0448 \"\\\ufeff\".\nSample Input:\n\n\\w denotes word character\nNo slashes here\nSample Output:\n\n\\w denotes word character\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0443 \"\u043d\u0435\" \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438 \"\u043d\u0435\" \u0441\u043b\u0435\u0432\u0430 \u0438 \u0441\u043f\u0440\u0430\u0432\u0430 \u043e\u0442 \u044d\u0442\u043e\u0439 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0438.\nSample Input:\n\n\u042d\u0442\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0432\u0430\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u043e\u0432\u0430\u0440\u043e\u0432\nSample Output:\n\n\u042d\u0442\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0432\u0430\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u043e\u0432\u0430\u0440\u043e\u0432\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0434\u0432\u0435 \u0431\u0443\u043a\u0432\u044b \"z\", \u043c\u0435\u0436\u0434\u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0440\u043e\u0432\u043d\u043e \u0442\u0440\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u0430.\nSample Input:\n\nzzz\nzzxzz\nzz\nzxz\nzzxzxxz\nSample Output:\n\nzzz\nzzxzz\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0441\u043b\u043e\u0432\u043e, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0438\u0437 \u0434\u0432\u0443\u0445 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u0447\u0430\u0441\u0442\u0435\u0439 (\u0442\u0430\u043d\u0434\u0435\u043c\u043d\u044b\u0439 \u043f\u043e\u0432\u0442\u043e\u0440).\nSample Input:\n\nblabla is a tandem repetition\n123123 is good too\ngo go\naaa\nSample Output:\n\nblabla is a tandem repetition\n123123 is good too\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0441\u043b\u043e\u0432\u043e, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0438\u0437 \u0434\u0432\u0443\u0445 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u0447\u0430\u0441\u0442\u0435\u0439 (\u0442\u0430\u043d\u0434\u0435\u043c\u043d\u044b\u0439 \u043f\u043e\u0432\u0442\u043e\u0440).\nSample Input:\n\nblabla is a tandem repetition\n123123 is good too\ngo go\naaa\nSample Output:\n\nblabla is a tandem repetition\n123123 is good too\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0441\u043b\u043e\u0432\u043e, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0438\u0437 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043d\u0438\u0436\u043d\u0435\u0433\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430.\nSample Input:\n\nHeLlO WoRlD\nhELlo wORlD\nnOtHEx1ngHeLlO\nSample Output:\n\nHeLlO WoRlD\nhELlo wORlD\nnOtHEx1ngHeLlO\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435.\nSample Input:\n\nHeLlO WoRlD\nhELlo wORlD\nnOtHEx1ngHeLlO\nSample Output:\n\nHELLO\nHELLO\nNOTHEX1NG\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0441\u043b\u043e\u0432\u043e, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0438\u0437 \u0432\u0435\u0440\u0445\u043d\u0435\u0433\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430 \u0438 \u043d\u0438\u0436\u043d\u0435\u0433\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430.\nSample Input:\n\nHELlO WoRlD\nhELlO wORlD\nnOtHEx1ngHeLlO\nSample Output:\n\nHELLO\nHELLO\nNOTHEX1NG\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0441\u043b\u043e\u0432\u043e, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0438\u0437 \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0431\u0443\u043a\u0432 \u0438 \u0441\u043b\u043e\u0432\u0430 \u0438\u0437 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u044b \u0441\u0442\u0440\u043e\u043a.\nSample Input:\n\na, aa, aaa, aaaa, aaaaa, aaaaaa, aaaaaaa, aaaaaaaa\nSample Output:\n\na, aa, aaa, aaaa, aaaaa, aaaaaa, aaaaaaa, aaaaaaaa\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0438 \u0440\u0430\u0437\u043d\u043e\u0433\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430.\nSample Input:\n\nabBAcC\nAaAaAaA\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 6') == 10\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().split()))\narr.sort(reverse=True)\n\nans = 0\nfor i in arr:\n    ans += i\n    ans %= i\nprint(ans)",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 6\\n') == 10\n\n\"\"\"\n\nfrom itertools import accumulate",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3 4 6\") == 10\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n4 6') == '10'\n\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n3 4 6''') == 10\n\"\"\"",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n3 4 6') == '10'\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n4 6') == 10\n'''\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 6\") == 10\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == 'Yes'\nprint(solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\"))\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n3\n1 2\n6 6\n4 4\n3 3\n3 2\n\"\"\") == \"Yes\"\n\nassert solution(\n\"\"\"\n5\n1 2\n6 6\n4 4\n3 3\n3 2\n\"\"\") == \"No\"\n\nassert solution(\n\"\"\"\n3\n1 2\n1 2\n1 2\n\"\"\") == \"Yes\"\n\nassert solution(\n\"\"\"\n5\n1 2\n6 6\n4 4\n3 3\n3 2\n\"\"\") == \"No\"\n\nassert solution(\n\"\"\"\n5\n1 1\n2 2\n3 3\n4 4\n5 5\n\"\"\") == \"Yes\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n1 2\n6 6\n4 4\n3 3\n3 2''') == 'Yes'\nassert solution('''10\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10''') == 'No'\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\"\nimport sys\n\nfrom typing import List\n\nfrom pii_manager import PiiManager\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"Yes\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\nassert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\n\"\"\"",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n1 3\") == \"Yes\"\nassert solution(\"5\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"No\"\n\"\"\"\n\nN = int(stdin.readline())\nL = []\nfor i in range(N):\n    D = list(map(int, stdin.readline().split()))\n    L.append(D)\n\nS = set()\nfor i in range(N-2):\n    for j in range(i+1, N-1):\n        if L[i][0] == L[j][0] and L[i][1] == L[j][1]:\n            S.add(f\"{L[i][0]} {L[i][1]}\")\n        if L[i][0] == L[j][1] and L[i][1] == L[j][0]:\n            S.add(f\"{L[i][0]} {L[i][1]}\")\n        if L[i+1][0] == L[j][0] and L[i+1][1] == L[j][1]:\n            S.add(f\"{L[i+1][0]} {L[i+1][1]}\")\n        if L[i+1][0] == L[j][1] and L[i+1][1] == L[j][0]:\n            S.add(f\"{L[i+1][0]} {L[i+1][1]}\")\n        if L[i+2][0] == L[j][0] and L[i+2][1] == L[j][1]:\n            S.add(f\"{L[i+2][0]} {L[i+2][1]}\")\n        if L[i+2][0] == L[j][1] and L[i+2][1] == L[j][0]:\n            S.add(f\"{L[i+2][0]} {L[i+2][1]}\")",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1 2\\n3 3\\n1 2\\n3 2\\n4 4\\n5 5\\n1 2\\n3 2\\n4 4\\n5 5\\n1 2\\n3 2\\n4 4\\n5 5\\n1 2\\n3 2\\n4 4\\n5 5\\n1 2\\n3 2\\n4 4\\n5 5\") == 'No'\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 99,
        "num_ids_4": 99
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'No'\nassert solution('5\\n1 2\\n6 6\\n4 4\\n3 3') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n') == '4'\n\"\"\"\n\nimport math\n\na = int(input())\nprint(int(math.sqrt(a) // 1))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"4\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '9'\nassert solution('4') == '16'\n\"\"\"\n\nfrom math import pi\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"4\"\nprint(solution(\"2\"))\n\n'''\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n\") == 4\n\n\"\"\"\n\nfrom math import pi",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(2) == 4\n\"\"\"\n\nfrom math import pi\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"4\"\n\"\"\"\n\nimport math",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '1'\nassert solution('2') == '4'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == 4\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == 3\nassert solution(\"4\") == 1\nassert solution(\"5\") == 2\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 8 5 1\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 5 6') == 'Yes'\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 8 5 1\") == \"Yes\"\nassert solution(\"5 4 3 2\") == \"No\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 8 5 1') == 'Yes'\nassert solution('4 8 5 1') == 'No'\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"4\\n3 8 5 1\"\n) == \"Yes\"\nassert solution(\n    \"4\\n3 8 7 1\"\n) == \"No\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8 5 1\\n') == 'Yes'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\n3 8 5 1''') == 'Yes'\nassert solution('''3\n8 5 4 2''') == 'No'\n\n-----\n3 3 1\n'') == 'Yes'\nassert solution('''4\n3 8 5 1''') == 'No'\nassert solution('''4\n3 8 5 1''') == 'No'\nassert solution('''2\n1 100 100''') == 'No'\n\n-----\n3 2 1\n'') == 'Yes'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(expected_result)\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\n\nimport itertools",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\nassert solution(\"2 2\\n1 7\\n0 7\") == \"1\"\nassert solution(\"2 3\\n1 7\\n1 7\") == \"-1\"\nassert solution(\"1 3\\n1 7\\n1 7\") == \"1\"\n\"\"\"\nimport re\n",
        "num_ids_2": 42,
        "num_ids_4": 80
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\"\n\nimport numpy as np",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"9\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n') == 9\n\"\"\"\n\n\"\"\"\nProblem 2:\nGiven an integer N and an array of integers A sorted in non-decreasing order, find the first index K where A[K] >= N.\nIf A[K] < N for all valid K, output -1.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^9\n - 1 \\leq A[i] \\leq 10^9\n - A is sorted in non-decreasing order\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA[0], A[1],..., A[A.length - 1]\n\n-----Output-----\nPrint the first index K where A[K] >= N.\nIf A[K] < N for all valid K, output -1.\n\n-----Sample Input-----\n5\n3 4 1 6 1\n\n-----Sample Output-----\n2\n\"\"\"\n\n\"\"\"\nProblem 2:\nGiven an array A of N integers, find the number of triangles of which exactly three numbers are removed, such that the remaining three numbers of the triangles are sorted in non-decreasing order.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - -10^9 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA[0], A[1],..., A[A.length - 1]\n\n-----Output-----\nPrint the number of triangles of which exactly three numbers are removed, such that the remaining three numbers of the triangles are sorted in non-decreasing order.\n\n-----Sample Input-----\n5\n-2 4 1 2 1\n\n-----Sample Output-----\n2\n\nThe triangles of which exactly three numbers are removed are:\n(1, 1, 2), (1, 2, 1)\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"9\"\nprint(\"Passed!\")",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"9\"\n\"\"\"\n\nimport math\n\nN, K = map(int, input().split())\n\nanswer = 0\nfor i in range(1, N + 1):\n    for j in range(i, N + 1):\n        for k in range(j, N + 1):\n            if i % K == 0 and j % K == 0 and k % K == 0:\n                answer += 1\n\nprint(answer)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2') == '9'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2') == '9'\n\"\"\"\n\nfrom itertools import product",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"9\"\nassert solution(\"6 7\") == \"13\"\nassert solution(\"3 3\") == \"1\"\n\n\"\"\"\n\nimport math",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('2 2') == '6'\nassert solution('2 1') == '3'\nassert solution('3 2') == '9'\nassert solution('3 1') == '4'\n",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n') == '9'\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == 9\n\"\"\"\n\nfrom itertools import product, count",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '10'\nassert solution('10') == '1010'\nassert solution('100') == '10100'\nassert solution('1000') == '101000'\n\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"-9\") == \"1011\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"-9\") == \"1011\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9') == '1011'\nassert solution('-9') == '1011'\nassert solution('0') == '0'\nassert solution('-0') == '0'\n\n-----\n5. Longest Palindromic Substring\n\nGiven a string S, find the longest palindromic substring in S.\nSubstring of string S:\nS[i...j] where 0 <= i <= j < len(S).\nNote:\n- There is no restriction on how you extend the definition of palindrome to make it work for the empty string.\n- If there are multiple longest palindromic substrings, return the substring which occurs first.\n- Input Format\n\nThe only argument given is the string S.\nOutput Format\n\nReturn the longest palindromic substring of S.\nConstraints\n\n1 <= |S| <= 10^6\n\nSample Input 0\n\naaaabaaa\nSample Output 0\n\naaaa\n\n-----\n6. Longest Palindromic Substring\n\nGiven a string S, find the longest palindromic substring in S.\nSubstring of string S:\nS[i...j] where 0 <= i <= j < len(S).\nNote:\n- There is no restriction on how you extend the definition of palindrome to make it work for the empty string.\n- If there are multiple longest palindromic substrings, return the one which occurs first.\n- If S = S[::-1], the answer is S itself.\n- If S is already palindrome, the answer is S itself.\nInput Format\n\nThe only argument given is the string S.\nOutput Format\n\nReturn the longest palindromic substring of S.\nConstraints\n\n1 <= |S| <= 10^6\n\nSample Input 0\n\naaaabaaa\nSample Output 0\n\naaaa\n\n-----\n7. Longest Palindromic Substring\n\nGiven a string S, find the longest palindromic substring in S.\nSubstring of string S:\nS[i...j] where 0 <= i <= j < len(S).\nNote:\n- There is no restriction on how you extend the definition of palindrome to make it work for the empty string.\n- If there are multiple longest palindromic substrings, return the one which occurs first.\n- If S = S[::-1], the answer is S itself.\n- If S is already palindrome, the answer is S itself.\nInput Format\n\nThe only argument given is the string S.\nOutput Format\n\nReturn the longest palindromic substring of S.\nConstraints\n\n1 <= |S| <= 10^6\n\nSample Input 0\n\naaaabaaa\nSample Output 0\n\naaaa\n\n-----\n8. Longest Palindromic Substring\n\nGiven a string S, find the longest palindromic substring in S.\nSubstring of string S:\nS[i...j] where 0 <= i <= j < len(S).\nNote:\n- There is no restriction on how you extend the definition of palindrome to make it work for the empty string.\n- If there are multiple longest palindromic substrings, return the one which occurs first.\n- If S = S[::-1], the answer is S itself.\n- If S is already palindrome, the answer is S itself.\nInput Format\n\nThe only argument given is the string S.\nOutput Format\n\nReturn the longest palindromic substring of S.\nConstraints\n\n1 <= |S| <= 10^6\n\nSample Input 0\n\naaaabaaa\nSample Output 0\n\naaaa\n\n-----\n9. Longest Palindromic Substring\n\nGiven a string S, find the longest palindromic substring in S.\nSubstring of string S:\nS[i...j] where 0 <= i <= j < len(S).\nNote:\n- There is no restriction on how you extend the definition of palindrome to make it work for the empty string.\n- If there are multiple longest palindromic substrings, return the one which occurs first.\n- If S = S[::-1], the answer is S itself.\n- If S is already palindrome, the answer is S itself.\nInput Format\n\nThe only argument given is the string S.\nOutput Format\n\nReturn the longest palindromic substring of S.\nConstraints\n\n1 <= |S| <= 10^6\n\nSample Input 0\n\naaaabaaa\nSample Output 0\n\naaaa\n\n-----\n10. Longest Palindromic Substring\n\nGiven a string S, find the longest palindromic substring in S.\nSubstring of string S:\nS[i...j] where 0 <= i <= j < len(S).\nNote:\n- There is no restriction on how you extend the definition of palindrome to make it work for the empty string.\n- If there are multiple longest palindromic substrings, return the one which occurs first.\n- If S = S[::-1], the answer is S itself.\n- If S is already palindrome, the answer is S itself.\nInput Format\n\nThe only argument given is the string S.\nOutput Format\n\nReturn the longest palindromic substring of S.\nConstraints\n\n1 <= |S| <= 10^6\n\nSample Input 0\n\naaaabaaa\nSample Output 0\n\naaaa\n\n-----\n11. Longest Palindromic Substring\n\nGiven a string S, find the longest palindromic substring in S.\nSubstring of string S:\nS[i...j] where 0 <= i <= j < len(S).\nNote:\n- There is no restriction on how you extend the definition of palindrome to make it work for the empty string.\n- If there are multiple longest palindromic substrings, return the one which occurs first.\n- If S = S[::-1], the answer is S itself.\n- If S is already palindrome, the answer is S itself.\nInput Format\n\nThe only argument given is the string S.\nOutput Format\n\nReturn the longest palindromic substring of S.\nConstraints\n\n1 <= |S| <= 10^6\n\nSample Input 0\n\naaaabaaa\nSample Output 0\n\naaaa\n\n-----\n12. Longest Palindromic Substring\n\nGiven a string S, find the longest palindromic substring in S.\nSubstring of string S:\nS[i...j] where 0 <= i <= j < len(S).\nNote:\n- There is no restriction on how you extend the definition of palindrome to make it work for the empty string.\n- If there are multiple longest palindromic substrings, return the one which occurs first.\n- If S = S[::-1], the answer is S itself.\n- If S is already palindrome, the answer is S itself.\nInput Format\n\nThe only argument given is the string S.\nOutput Format\n\nReturn the longest palindromic substring of S.\nConstraints\n\n1 <= |S| <= 10^6\n\nSample Input 0\n\naaaabaaa\nSample Output 0\n\naaaa\n\n-----\n13. Longest Palindromic Substring\n\nGiven a string S, find the longest palindromic substring in S.\nSubstring of string S:\nS[i...j] where 0 <= i <= j < len(S).\nNote:\n- There is no restriction on how you extend the definition of palindrome to make it work for the empty string.\n- If there are multiple longest palindromic substrings, return the one which occurs first.\n- If S =",
        "num_ids_2": 23,
        "num_ids_4": 44
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"-9\") == \"1011\"\nassert solution(\"9\") == \"1111\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"10\"\nassert solution(\"3\") == \"11\"\nassert solution(\"10\") == \"1010\"\nassert solution(\"11\") == \"1011\"\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"-9\") == \"1011\"\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '10'\nassert solution('-2') == '1010'\nassert solution('-9') == '1011'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"-9\") == \"1011\"\n\"\"\"\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '10'\nassert solution('5') == '101'\nassert solution('9') == '1011'\nassert solution('-9') == '1011'\n\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 5\\n4 9\\n2 4') == '12'\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 9\\n2 4') == '12'\n\"\"\"\n\nimport sys\nfrom typing import List",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n2 4\\n3 6\\n4 8\\n7 1\\n6 4\") == \"12\"\n\"\"\"\n\nn, m = list(map(int, input().split()))\na = [list(map(int, input().split())) for _ in range(n)]\n\n\"\"\"\n\u03a3a_i = sum(A_i)\n\nb = []\nfor i in range(m):\n    b.append([])\n    for j in range(n):\n        b[i].append(sum([a[j][k] for k in range(n) if k!= j]))\n\nb = [sum(b[i]) for i in range(m)]\n\nmin_b = min(b)\n\nans = 0\nfor i in range(m):\n    if b[i] <= min_b:\n        ans += a[i][i]\n\nprint(ans)\n\"\"\"\n\nfrom itertools import combinations\n\ncombs = list(combinations(range(n), m))\n\nb = []\nfor i in range(m):\n    b.append([])\n    for j in range(n):\n        b[i].append(sum([a[j][k] for k in range(n) if k!= j]))\n\nb = [sum(b[i]) for i in range(m)]\n\nmin_b = min(b)\n\nans = 0\nfor i in range(m):\n    if b[i] <= min_b:\n        for j in range(n):\n            if j == i:\n                continue\n            ans += a[i][j]\n\nprint(ans)\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5\\n4 9\\n2 4\\n') == 12\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\nl = []\nfor i in range(n):\n    a, b = map(int, sys.stdin.readline().split())\n    l.append([a, b])\n\nprint(l)",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(sample_input) == '12'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\\n\") == \"12\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\n2 4\\n') == '12'\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\n\"\"\"\nn = int(stdin.readline())\nl = list(map(int, stdin.readline().split()))\n\ndp = [1 for i in range(n)]\ncount = 0\nfor i in range(1,n):\n    for j in range(i):\n        if l[i] > l[j]:\n            dp[i] = max(dp[i],dp[j]+1)\nprint(max(dp))\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == 2\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n10 4 8 7 3\") == 2\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n10 4 8 7 3') == 2\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10 4 8 7 3\") == \"2\"\nprint(\"Passed\")\n\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == '2'\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n5 2 3 6') == '2'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"3\\n1 2 3\\n\"\n) == \"3\"\nassert solution(\n\"5\\n1 2 3 4 5\\n\"\n) == \"3\"\nassert solution(\n\"1\\n1\\n\"\n) == \"1\"\nassert solution(\n\"3\\n3 2 3\\n\"\n) == \"0\"\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n1 2 2 4 5\\n') == 1\nassert solution('5 3\\n1 2 3 3 3\\n') == 0\nassert solution('5 3\\n1 2 3 4 5\\n') == 2\n\nprint('The solution is correct!')\n\n-----\n'''\nfrom collections import Counter\n",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 2 4 5') == 1\nassert solution('1 2 2 3 5') == 2\nassert solution('1 2 2 2 3 5') == 0\nassert solution('1 2 2 2 3 5 5') == 0\n",
        "num_ids_2": 20,
        "num_ids_4": 45
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"1 2 1 2\") == \"0\"\n\"\"\"\n\nfrom math import ceil\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == '1'\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 3\n1 2 2 4 5\n''') == '1'\n\nassert solution('''5 3\n1 2 3 4 5\n''') == '2'\n\nassert solution('''5 3\n1 2 2 4 5\n''') == '1'\n\nassert solution('''5 3\n1 2 3 4 3\n''') == '0'\n\nassert solution('''5 3\n1 2 2 4 5\n''') == '1'",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n2 4 7 2\\n\") == \"0\\n\"\nassert solution(\"3 1\\n1 1 1\\n\") == \"0\\n\"\nassert solution(\"5 1\\n3 3 3 3 3\\n\") == \"2\\n\"\nassert solution(\"3 1\\n1 1 1\\n\") == \"0\\n\"\nassert solution(\"2 1\\n1 1\\n\") == \"1\\n\"\n",
        "num_ids_2": 41,
        "num_ids_4": 83
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5 1 2 3') == '0'\nassert solution('4 3 2 3 3') == '1'\nassert solution('6 3 2 1 2 1') == '2'\nassert solution('10 3 1 2 3 4 5 6 7 8 9 10') == '8'\nassert solution('10 4 1 2 3 4 5 6 7 8 9 10') == '2'\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 28,
        "num_ids_4": 64
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n5 5\") == \"0\"\n\"\"\"\n\nfrom math import floor\nimport time\nfrom collections import Counter",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2') == 2\nassert solution('5 2') == 1\nassert solution('10 2') == 4\nassert solution('10 1') == 0\nassert solution('10 3') == 2\n\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 5\\n1 2 2 4 2 3') == 3\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 2 4 2 3\") == 3\n\"\"\"\nfrom collections import deque\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 2 4 2 3\") == 3\nassert solution(\"1 2 2 3 1 1 1 3\") == 4\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 5\\n1 2 2 4 2 3') == '3'\nassert solution('7 5\\n3 3 2 1 1 1 3') == '4'\nprint(solution('6 5\\n1 2 2 4 2 3') == '3')\nprint(solution('7 5\\n3 3 2 1 1 1 3') == '4')\n\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == expected_result\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 2 4 2 3\\n\") == 3\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 5\\n3 3 2 1 1 1 3') == '4'\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 4 3\") == '3'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 2 2 4 2 3') == '3'\n\nassert solution('4 5\\n1 2 2 4 2 3') == '3'\nassert solution('4 5\\n1 3 2 4 2 3') == '3'\nassert solution('4 5\\n1 3 3 2 4 2') == '2'\nassert solution('4 5\\n1 3 3 3 2 4') == '2'",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1\\n3\\n7\\n2\\n\") == \"9\\n1000\\n42000000000000\"\n\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n1 1 3\\n7 3 2\\n1 1 1\\n1000000000000 42 88\\n\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88''') == '''10\n9\n1000\n42000000000000'''\n\n\"\"\"\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == [10, 9, 1000, 42000000000000]\nprint(\"You're all set!\")",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n10 5 7\\n2 10 3\\n10 7 2\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\n\"\"\"\n\nfrom typing import Tuple",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\n''') == '''\n10\n9\n1000\n42000000000000\n'''\n\nprint(solution(stdin))\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6\\n3 4 5\") == \"2\"\nassert solution(\"3 5\\n3 4 5\") == \"2\"\nassert solution(\"3 10\\n3 4 5\") == \"1\"\nassert solution(\"3 9\\n3 4 5\") == \"0\"\nassert solution(\"3 10\\n1 2 3\") == \"0\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6\\n3 4 5\") == \"2\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 6\n3 4 5''') == '2'\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 6') == '2'\nassert solution('3 6') == '2'\nassert solution('3 7') == '3'\nassert solution('3 7') == '3'\nassert solution('3 7') == '3'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n3 6\n3 4 5\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n2 10\n10 20\n\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"\n3 6\n3 4 5\n\"\"\"\n) == \"2\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6\\n3 4 5\") == \"2\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 6\n3 4 5\n''') == 2\n\n-----Test Input-----\n3 6\n3 4 5\n\n-----Test Output-----\n2\n'''\nfrom collections import Counter\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 6''') == 2",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\") == \"2\"\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\nhoge\\nenglish\\nhoge\\nenigma') == 'No'\n\"\"\"\n\nimport sys\nfrom collections import OrderedDict\n\nclass Shiritori:\n    def __init__(self):\n        self.N = int(input())\n        self.W = OrderedDict()\n        for _ in range(self.N):\n            w = input()\n            if w not in self.W:\n                self.W[w] = 0\n            self.W[w] += 1\n\n    def solution(self) -> str:\n        for w, times in self.W.items():\n            if times >= 2:\n                return 'No'\n            if self.W[w[:-1]] == 1:\n                return 'No'\n            if w[-1]!= w[0]:\n                return 'No'\n        return 'Yes'",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n4\nhoge\nenglish\nhoge\nenigma\n''') == 'No'",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\nassert solution(\"3\\nhoge\\nhoge\\nhoge\") == \"Yes\"\nassert solution(\"4\\nhoge\\nenglish\\nenigma\\nhoge\") == \"No\"\n\"\"\"",
        "num_ids_2": 46,
        "num_ids_4": 70
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\"\n\n\"\"\"\nSolution:\n\u4e00\u884c\u305a\u3064\u5165\u529b\u3057\u3066\u5168\u3066\u7a7a\u767d\u533a\u5207\u308a\u3067\u683c\u7d0d\u3059\u308b\n\"\"\"\n\nimport sys\n\nwords = [\n    w.strip()\n    for w in sys.stdin\n]\nprint(\"Yes\" if len(words) == len(set(words)) else \"No\")\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\nassert solution(\"4\\nhugle\\nenglis\\nhugle\\nenigma\") == \"No\"\nassert solution(\"4\\nhoge\\nenglih\\nhoge\\nenigma\") == \"Yes\"",
        "num_ids_2": 51,
        "num_ids_4": 77
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == 'No'\nassert solution(\"2\\ngo\\ngo\") == 'Yes'\n\"\"\"\n\nfrom collections import deque\n\nn = int(input())\nw_d = deque()\n\nfor _ in range(n):\n    w_d.append(input())\n\nans = 'Yes'\nfor i in range(n):\n    if len(w_d) < i+1:\n        break\n    w = w_d.popleft()\n    if i == 0:\n        w_d.append(w)\n        continue\n    else:\n        if w in w_d:\n            ans = 'No'\n            break\n        if w[0] == w_d[i-1][-1]:\n            w_d.append(w)\n        else:\n            ans = 'No'\n            break\n\nprint(ans)\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\n\"\"\"\nfrom typing import List\nimport sys\n\nclass Solution:\n    def shiritori(self, input: List[str]) -> str:\n        stack = []\n        for w in input:\n            if not stack:\n                stack.append(w)\n                continue\n            if w == stack[-1][-1]:\n                stack.append(w)\n            else:\n                print('no')\n                return 'No'\n\n        print('yes')\n        return 'Yes'",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\": hoge hoge\\nenglish english\") == \"Yes\"\nassert solution(\": english english\\nenglish english\") == \"Yes\"\nassert solution(\": hoge hoge\\nenglish english\") == \"No\"\nassert solution(\": hoge hoge\\nenglish english\") == \"No\"\n",
        "num_ids_2": 34,
        "num_ids_4": 70
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3') == 6\n\n\"\"\"\n\na, b = map(int, stdin.split())",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\n') == '6'\n\n-------------------------\n\nn, m = list(map(int, stdin.readline().strip().split()))\n\ns = min(n, m)",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 3\n''') == '6'\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3') == '6'\nassert solution('4 6') == '8'\nassert solution('4 1') == '1'\nassert solution('4 1') == '1'\nassert solution('10 1') == '10'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3') == '6'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '2 3'\n) == '6'\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 5\") == \"4\"\nassert solution(\"2 5\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3') == '6'\nassert solution('5 4') == '10'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"6\"\n\"\"\"\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n\") == 6\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('hello') == 'xxx'\nassert solution('abc') == 'xxx'\nassert solution('abca') == 'xxx'\nassert solution('sardine') == 'xxxxxxx'\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"sardine\"\n    ) == \"xxxxxxx\"\n\"\"\"\nimport unittest\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\nassert solution('5\\n1 2 1 3 1') == 'No'\nassert solution('3\\n1 3 1') == 'No'\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 49
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n1 2 1 1 3''') == 'Yes'\nassert solution('''5\n1 2 1 3 1''') == 'No'\nassert solution('''5\n3 1 2 3 4''') == 'No'\n'''",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n1 1 1\n1 1 2\n1 2 2\n''') == 'Yes'\nassert solution('''5\n1 2 1 1 3\n''') == 'Yes'\nassert solution('''5\n1 2 3 1 1\n''') == 'No'\nassert solution('''5\n1 2 3 4 1\n''') == 'No'\n\nassert solution('''5\n1 2 3 4 2\n''') == 'Yes'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 1 1 3\\n\") == \"Yes\"\nassert solution(\"4\\n1 1 1 2\\n\") == \"Yes\"\nassert solution(\"2\\n1 1\\n\") == \"Yes\"\nassert solution(\"1\\n1\\n\") == \"No\"\nassert solution(\"2\\n3 4\\n\") == \"No\"\n",
        "num_ids_2": 37,
        "num_ids_4": 68
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\nassert solution('5\\n3 2 2 1 1') == 'No'\nassert solution('7\\n3 1 1 2 3 1 4') == 'Yes'\nassert solution('10\\n5 1 2 1 1 3 5 3 1 4') == 'Yes'\nassert solution('5\\n3 1 2 3 4') == 'No'\n",
        "num_ids_2": 34,
        "num_ids_4": 75
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2\\n1 1\\n0 2\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 2 1 1 3\") == 'Yes'\nassert solution(\"10 1 1 1 1 1 1 1 1 1 1 1 1 1\") == 'No'\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == 'Yes'\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 61
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 3 -10\n1 2 3\n3 2 1\n1 2 2''') == \"1\"\n\"\"\"\n\nn, m, c = (int(i) for i in stdin.split())\narr = [list(map(int, input().split())) for _ in range(n)]\narr = sorted(arr, key=lambda arr: sum(i[0] * i[1] for i in arr))\n\nanswer = 0\nfor i in range(n):\n    a, b, c = arr[i]\n    if a * b + c >= 0:\n        answer += 1\n\nprint(answer)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\"\n\n\"\"\"\nSolution:\n\nN, M, C = map(int, stdin.readline().split())",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\") == \"1\"\n\"\"\"\nimport sys\n\nassert len(sys.argv) == 2\nlines = sys.argv[1].split('\\n')\nassert len(lines) == 2\n\nA, B, C = [int(e) for e in lines[0].split()]\nassert -100 <= A <= 100 and -100 <= B <= 100 and -100 <= C <= 100\n\nlst = [int(e) for e in lines[1].split()]\nassert len(lst) == A + B + C\n",
        "num_ids_2": 34,
        "num_ids_4": 64
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 -10\") == 1\n\"\"\"\n\n\"\"\"\nN, M, C = map(int, stdin.readline().strip().split())\n\nsources = []\nfor _ in range(N):\n    sources.append(tuple(map(int, stdin.readline().strip().split())))",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\") == \"1\"\n\"\"\"\n\nn, m, c = map(int, input().split())\na, b, c = [0] * n, [0] * n, [0] * n\nfor i in range(n):\n    a[i], b[i], c[i] = map(int, input().split())\ntotal = 0\nfor i in range(n):\n    total += a[i] * b[i] + c[i]\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == '1'\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"2 3 -10\n1 2 3\n3 2 1\n1 2 2\n\"\"\") == \"1\"\n\n\"\"\"\nIt's the same as problem #420.\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100') == '100'\nassert solution('1500') == '500'\nassert solution('1900') == '100'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000') == 1\nassert solution('1800') == 2\nassert solution('2000') == 0\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1900\") == \"100\"\n\n\"\"\"\n\nimport os\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000') == '1'\nassert solution('1001') == '0'\nassert solution('1900') == '100'\nassert solution('2000') == '200'\nassert solution('3001') == '100'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '1000'\nassert solution('100') == '0'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"4\"\n) == \"1\"\nassert solution(\n    \"1\"\n) == \"0\"\nassert solution(\n    \"3\"\n) == \"1\"\nassert solution(\n    \"5\"\n) == \"1\"\nassert solution(\n    \"8\"\n) == \"3\"\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1900\") == \"100\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1900) == 100\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000\") == 1000\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1900') == 100\n\"\"\"\n\nimport sys\n\nn = sys.stdin.readline().rstrip()\nprint(int(int(n) / 1000))\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\\n\") == 9\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n3 5 2\\n4 5') == '9'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 2\\n4 5\") == \"9\"\nprint(solution(\"3 5 2\\n4 5\"), end=\" \")\n\n-----\n3 5 2\n4 5\n\n5\n\"\"\"\n\nfrom functools import reduce\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 2\\n4 5\") == \"9\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 2\\n4 5\") == \"9\"\n\n-----\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n3 2\") == 9\n\"\"\"\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 2\\n4 5\") == \"9\"\n\"\"\"\n\nN = int(input())\nA = list(map(int, input().split(\" \")))\nB = list(map(int, input().split(\" \")))\n\nresult = 0\ntown_num = len(A) - 1\nfor i in range(N):\n    if i == 0:\n        result += A[i] * B[i]\n        continue\n    result += (A[i] - A[i - 1]) * B[i]\n    if A[i] - A[i - 1] > 0:\n        result += A[i] - A[i - 1] * (B[i] - 1)\n\nprint(result)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 2\\n4 5\") == 9\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected_result\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\\n\") == 'No War'\nassert solution(\"3 2 10 20\\n8 15 13\\n16 22\\n\") == 'No War'\n\"\"\"\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\\n\") == \"No War\"\nassert solution(\"1 1 1 1\\n2 2 2 2\\n3 3 3 3\\n\") == \"War\"\n\n\"\"\"\n\nimport math",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == 'War'\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\\n\") == 'No War'\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n2\\n3\") == '6'\n\"\"\"\nfrom collections import defaultdict\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2\\n3\") == '6'\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1\\n2\\n3\") == \"6\"\n\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2\\n3\\n\") == \"6\"\nassert solution(\"2\\n4\\n6\\n\") == \"9\"\nassert solution(\"2\\n3\\n5\\n\") == \"12\"\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\":\\n2\\n3\") == \"6\"\nassert solution(\":\\n1\\n1\\n\") == \"10\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n2\\n3\\n\") == \"6\"\n\n\"\"\"\nimport math",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\n3\\n\") == \"6\"\nassert solution(\"3\\n1\\n2\\n\") == \"5\"\n\n-----\n4\n3\n1\n5\n\n-----\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n-----\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n2\\n3') == '6'\nprint('Test passed\\n')\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3\\n\") == \"6\"\nassert solution(\"2\\n3\\n4\\n\") == \"9\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '0'\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\n\"\"\"\nfrom sys import stdin",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 3') == '0'\n\nassert solution('4\\n1 2 3 4') == '1'\n\nassert solution('3\\n1 2 3') == '0'\n\nassert solution('4\\n1 2 3 4') == '1'\n\nassert solution('5\\n1 2 3 4 5') == '2'\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 62
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == '0'\nassert solution(\"1 2\") == '1'\nassert solution(\"1 1\") == '0'\nassert solution
        "num_ids_2": 23,
        "num_ids_4": 1755
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3\\n') == '0'\n\"\"\"\n\nimport sys\nimport unittest",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3') == '0'\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"2\\n1 2\") == \"1\"\nassert solution(\"3\\n1 2 3\") == \"0\"\nassert solution(\"1\\n1\\n1\") == \"0\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 28,
        "num_ids_4": 57
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"0\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"0\"\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"3 3\n3 2 1\n1 2 3\n4 5 6\"\"\") == '6'\n\nassert solution(\n\"\"\"4 3\n1 6 3 4\n5 10 7 8\n9 2 11 12\n\"\"\") == '2'\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n1 2 3\\n4 5 6\\n7 8 9') == '6'\nassert solution('4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12') == '0'\nassert solution('3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '2'\n\"\"\"\n",
        "num_ids_2": 57,
        "num_ids_4": 86
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == \"2\"\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == '6'\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == '2'\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == '0'\n\"\"\"\n\nimport numpy as np\n",
        "num_ids_2": 55,
        "num_ids_4": 84
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == '6'\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == '2'\n\n\"\"\"\n\nfrom typing import Dict\n\n\nclass Matrix:\n    def __init__(self, n: int, m: int, array: Dict[int, int]):\n        self.n = n\n        self.m = m\n        self.array = array\n        self.possible_moves = [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]\n\n    def min_moves(self):\n        count = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i == self.n - 1:\n                    if self.array[i][j]!= (self.n * self.m) - 1:\n                        count += abs(self.array[i][j] - (self.n * self.m - 1))\n                        self.array[i][j] = (self.n * self.m) - 1\n                    elif self.array[i][j] == (self.n * self.m) - 1:\n                        continue\n                else:\n                    if self.array[i][j]!= (i * self.m + j):\n                        count += abs(self.array[i][j] - (i * self.m + j))\n                        self.array[i][j] = (i * self.m + j)\n        return count\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n\") == '6'\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == '2'\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\\n\") == \"6\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n\") == \"0\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == \"2\"\n",
        "num_ids_2": 51,
        "num_ids_4": 82
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 3\n3 2 1\n1 2 3\n4 5 6''') == '6'\nassert solution('''4 3\n1 2 3\n4 5 6\n7 8 9\n10 11 12''') == '0'\nassert solution('''3 4\n1 6 3 4\n5 10 7 8\n9 2 11 12''') == '2'",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\n\"\"\"\n\nfrom sys import stdin\n\nN, M = map(int, stdin.readline().split())\nA = [[int(i) for i in stdin.readline().split()] for j in range(N)]\n\nmoves = 0\nfor i in range(M):\n    moves += (i + 1) * M - A[N - 1][i]\n\nprint(moves)",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 3\\n3 2 1\\n1 2 3\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\n",
        "num_ids_2": 50,
        "num_ids_4": 79
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 10 5 3\") == '3'\nassert solution(\"2 1 100\") == '99'\nassert solution(\"6 10 3 5 14 7\") == '4'\n\"\"\"\n\nn = int(input())\nstdin = [int(x) for x in input().split()]\n\nteams = []\nfor i in range(1, n+1, 2):\n    teams.append(i)\n    teams.append(i)\n\nsolve = []\nfor i in stdin:\n    solve.append(i-1)\n\nproblems = []\nfor i in range(len(teams)):\n    problems.append(solve[teams[i]-1])\n\nsolve = []\nfor i in problems:\n    solve.append(sum(i))\n\nprint(min(solve))\n",
        "num_ids_2": 25,
        "num_ids_4": 40
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1 3 2 3 2 4 5 5 5\") == \"5\"\nassert solution(\"9\\n10 10 10 10 10 10 10 10 10\") == \"10\"\nassert solution(\"6\\n1 100 1 100 1 100 1 100\") == \"99\"\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 62
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == '5'\nassert solution(\"2\\n1 100\") == '99'\nassert solution(\"2\\n1 1\") == '1'",
        "num_ids_2": 32,
        "num_ids_4": 46
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\n\"\"\"\nimport numpy as np\n\nn = int(input())\nskills = np.array(list(map(int, input().split()))).reshape(n, 1)\n\nprint(np.sum(np.sum(skills == np.roll(skills, 1, axis=1), axis=0) // 2))\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 10 2 3 14 5\") == \"5\"\nassert solution(\"2 1 100\") == \"99\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 100 2 2 3') == '99'\nassert solution('2\\n1 100') == '99'\nassert solution('2\\n1 100\\n1 100') == '1'\n",
        "num_ids_2": 31,
        "num_ids_4": 49
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n\n'''\n\n\nimport itertools\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 0 1 0 1\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\n",
        "num_ids_2": 35,
        "num_ids_4": 69
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 0 1 1') == '2'\nassert solution('4\\n1 0 1 0') == '1'\nassert solution('4\\n0 1 0 1') == '2'\nassert solution('4\\n0 0 0 1') == '0'\n\nassert solution('5\\n1 0 1 1 1') == '2'\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n0 1 0 1 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n0 0 0\\n\") == \"0\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 73
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 0 1 0 1') == '2'\nassert solution('6\\n0 1 0 1 1 0') == '2'\nassert solution('7\\n1 0 1 1 1 0 1') == '3'\nassert solution('3\\n0 0 0') == '0'\n",
        "num_ids_2": 35,
        "num_ids_4": 69
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 0 1 0 1\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\nassert solution(\"3\\n1 0 1\") == \"0\"\n",
        "num_ids_2": 35,
        "num_ids_4": 69
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 0 1 1\\n\") == \"2\"\nassert solution(\"6\\n1 0 1 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\nassert solution(\"1\\n0\\n\") == \"0\"",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2 3 4 5 6 7') == '2'\nassert solution('1 1 1 1 1 1 1 1') == '0'\nassert solution('0 1 0 1 0 1 0 1') == '2'\n",
        "num_ids_2": 18,
        "num_ids_4": 51
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 0 1 0 1\\n') == '2'\nassert solution('6\\n0 1 0 1 1 0\\n') == '2'\nassert solution('7\\n1 0 1 1 1 0 1\\n') == '3'\nassert solution('3\\n0 0 0\\n') == '0'\n",
        "num_ids_2": 39,
        "num_ids_4": 77
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n",
        "num_ids_2": 39,
        "num_ids_4": 77
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\nassert solution(\"4\\n0 0 0 0\\n\") == \"0\"\n",
        "num_ids_2": 39,
        "num_ids_4": 77
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == '4'\nassert solution('10') == '3'\nassert solution('12') == '5'\nassert solution('4') == '0'\n\"\"\"\nimport math",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('1') == 0\nassert solution('2') == 0\nassert solution('3') == 0\nassert solution('4') == 1\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\") == \"0\"\nprint(\"All tests passed.\")",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6') == 1\nassert solution('4') == 0\n\"\"\"\n\na = int(input())",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '2'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1) == 1\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"brie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == \"3\"\nprint(solution(input()))\n\n\"\"\"\n\nclass Solution(object):\n    def __init__(self, input_str):\n        self.cheeses = []\n        for line in input_str.splitlines():\n            self.cheeses.append(line.split())\n        self.cheese_names = [cheese[0] for cheese in self.cheeses]\n        self.cheese_types = [cheese[1] for cheese in self.cheeses]\n\n    def solve(self):\n        count_soft = 0\n        count_hard = 0\n        for cheese in self.cheese_names:\n            if cheese[0].upper() == cheese[0]:\n                count_hard += 1\n            else:\n                count_soft += 1\n        return count_hard if count_hard > count_soft else count_soft\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"brie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == \"3\"\nprint('OK')\n\nprint(solution(\"brie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\"))\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == 4\nassert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ngouda hard\\ncheddar hard\\nswiss hard\") == 3\n\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u0435\u043b \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0432 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0442\u0441\u044f \u0432 \u043d\u0451\u043c \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0430.\n\n\u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0433\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u043c\u0435\u0442\u043e\u0434 sort \u0441\u043f\u0438\u0441\u043a\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u0435\u043b, \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043a\u0430\u0436\u0434\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e.\n\nSample Input 1:\n\n5\n2\n2\n2\n2\n4\nSample Output 1:\n\n2\n2\nSample Input 2:\n\n5\n1\n2\n2\n2\n4\nSample Output 2:\n\n2\n1\n\"\"\"",
        "num_ids_2": 91,
        "num_ids_4": 91
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard') == '4'\n\"\"\"\n\nimport itertools\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == \"3\"\n\"\"\"",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('brie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n') == '3'\n\"\"\"\n\nn = int(input())\n\nsoft = 0\nhard = 0\n\nfor i in range(n):\n    cheese = input().split()\n    if cheese[1] == \"soft\":\n        soft += 1\n    else:\n        hard += 1\n\nprint(soft)\nprint(hard)",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\n brie soft\\n camembert soft\\n feta soft\\n goat soft\\n muenster soft\\n asiago hard\\n cheddar hard\\n gouda hard\\n swiss hard\") == \"3\"\nassert solution(\"6\\n parmesan hard\\n emmental hard\\n edam hard\\n colby hard\\n gruyere hard\\n asiago hard\") == \"4\"\n\n-----Notes-----\nIt is important to understand what kind of cheese you are looking for, if its type is hard or soft, how to split it by type, and how to find the count of each type.\n\n- You must remove any whitespace in the input.\n- If the cheese name is longer than 10 characters, cut the name to 10 characters, and add \"...\" at the end.\n- If the cheese type is \"soft\", you must count both \"soft\" and \"soft cheese\".\n- If the cheese type is \"hard\", you must count only \"hard\".\n\n\"\"\"\n",
        "num_ids_2": 99,
        "num_ids_4": 99
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n') == '3\\n'\nassert solution('6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\\n') == '4\\n'\n\nprint(solution(stdin))\n",
        "num_ids_2": 103,
        "num_ids_4": 103
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2 1\") == \"1 0 0 2\"\nassert solution(\"7 2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"\n\n\"\"\"",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('0 1 2 1') == '1 0 0 2'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"\nprint(\"Passed\")\n\n\"\"\"",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 1 1 3\\n3 2 1 1\") == '0 0 0 1 0 2 4'\nassert solution(\"7\\n2 4 3 5 6 5 1\") == '0 0 0 1 0 2 4'\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\nb = list(map(int, stdin.readline().split()))\n\nb.sort()\n\nans = [0] * n\nfor i in range(n):\n    ans[a[i] % n] = b[i]\n\nprint(*ans)\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\") == \"0 0 0 1 0 2 4\"\n\n'''\n\nimport sys",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 2 1') == '1 0 0 2'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\n\"\"\"\n\n\"\"\"\n\u041f\u0440\u0438\u043c\u0435\u0440\n5\n0 1 2 3 4\n0 3 4 4 3\n\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442\n1 0 0 2 3 \n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nc = []\n\nfor i in range(n):\n    c.append((a[i] + b[i]) % n)\n\nprint(*c)\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"\n\nprint(\"Success\")\n\n\n\n-----\n\n\"\"\"\n",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 1 1 3 3\\n2 3 1 1 1') == '0 0 0 1 0 2 4'\nassert solution('7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1') == '0 0 0 1 0 2 4'",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0\") == 0\nassert solution(\"1\") == 1\nassert solution(\"0 1 1 0\") == 0\nassert solution(\"1 0 1 0\") == 1\nassert solution(\"0 1 1 1\") == 1\n",
        "num_ids_2": 16,
        "num_ids_4": 38
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"00100110011010\") == \"0\"\nassert solution(\"01100110011010\") == \"1\"\nassert solution(\"101110011010\") == \"1\"\nassert solution(\"01101110011010\") == \"0\"\n\"\"\"\nimport sys\n\nassert len(sys.argv) == 2\n",
        "num_ids_2": 28,
        "num_ids_4": 55
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 1 1 0') == '0'\nassert solution('1 1 1 1') == '1'\nassert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1",
        "num_ids_2": 26,
        "num_ids_4": 46
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0110111010\") == \"0\"\nassert solution(\"1011110101\") == \"1\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 1 1 0') == '0'\nassert solution('1 0 1 0') == '1'\nassert solution('1 0 1 1') == '1'\nassert solution('0 0 0 1') == '0'\n\nprint(solution(stdin.rstrip()))\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(0) == 0\nassert solution(1) == 1\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == 0\nassert solution('11') == 1\nassert solution('01') == 1\nassert solution('10') == 0\nassert solution('11') == 1\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"010\") == 0\nassert solution(\"011\") == 1\nassert solution(\"100\") == 1\nassert solution(\"101\") == 1\nassert solution(\"110\") == 0\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(open('input.txt').readlines()) == open('output.txt').readlines()\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0\\n1\\n1\\n0\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"100 100 100\") == \"Yes\"\nassert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"999 1 1\") == \"No\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000 15 80') == 'Yes'\nassert solution('1234 234 1234') == 'No'\nassert solution('0 100 2') == 'Yes'\nassert solution('0 100 0') == 'Yes'\nassert solution('100 0 2') == 'No'\n",
        "num_ids_2": 26,
        "num_ids_4": 50
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1000 15 80') == \"Yes\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\n\nfrom math import *\n\nD, T, S = [int(s) for s in stdin.split()]",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000 15 80') == 'Yes'\nassert solution('2000 3 3') == 'No'",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000 15 80') == 'Yes'\nassert solution('1 1 1') == 'No'\nassert solution('100 200 200') == 'Yes'\nassert solution('50 50 50') == 'No'\nassert solution('0 1 1') == 'No'\n\n\"\"\"\n\nimport math\n\nD, T, S = [int(x) for x in input().split()]\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'Yes'\n\n-----\n\nThe key to this problem is figuring out when you have a 3x3 bingo board and whether you can fill it with numbers.  The best way to do this is to draw out a picture of the board and see what the different combinations look like.  We can draw out the bingo board and then build out some functions to find how many combinations you can have, and then we can figure out when we have a 3x3 bingo board.\n\nboard = [[0, 0, 0],\n         [0, 0, 0],\n         [0, 0, 0]]",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('84 97 66') == 'Yes'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.read()",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == \"Yes\"\nassert solution('84 97 66') == \"Yes\"\nassert solution('79 89 11') == \"No\"\nassert solution('61 59 7') == \"No\"\n'''\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\nassert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\nassert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\nassert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\nassert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\n",
        "num_ids_2": 92,
        "num_ids_4": 184
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == 'Yes'\n\n\"\"\"",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\nassert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\nassert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\nassert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\nassert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\n",
        "num_ids_2": 92,
        "num_ids_4": 184
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('84 97 66') == 'Yes'\n\n-----Explanation-----\nWe have a 3x3 grid with numbers 84, 97, 66. We will mark the numbers that the MC has chosen at the beginning.\n\nThe diagonal from the top-left to the bottom-right will always be 3 numbers. If we have a bingo, this diagonal is always the same numbers.\n\nAll numbers in the grid are unique, so we will always have a bingo when 3 numbers have the same values.\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\n\n\"\"\"\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\n\"\"\"\n\nfrom sys import stdin\nfrom collections import deque",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1\\n2 3') == '2'\nassert solution('3 4\\n1 2\\n2 3') == '1'\nassert solution('5 1\\n4') == '-1'\n\"\"\"\n\nimport unittest\nimport sys",
        "num_ids_2": 34,
        "num_ids_4": 49
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1\\n5 1') == '5'\nassert solution('5 1\\n4 1') == '-1'\nassert solution('2 2\\n2 1') == '2'\n\nprint(solution(input()))\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 46
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"3\"\nassert solution(\"3 2\\n1 2\\n2 3\\n3 3\\n3 3\") == \"2\"\nassert solution(\"3 2\\n1 2\\n2 3\\n3 3\\n3 3\\n1 1\\n2 3\\n3 3\") == \"1\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 46,
        "num_ids_4": 85
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\"\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"41 2\\n5 6\"\n) == \"30\"\n\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\nprint(\"Test pass.\")\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == '-1'\nassert solution('4 2\\n1 3\\n2 5') == '-1'\nassert solution('4 2\\n1 3\\n2 6') == '-1'\nassert solution('4 2\\n1 3\\n2 7') == '10'\nassert solution('4 2\\n1 3\\n2 8') == '10'\n",
        "num_ids_2": 40,
        "num_ids_4": 79
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('41 2\\n5 6') == '30'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5\\n2 3 1') == '5'\nassert solution('4 4\\n1 3 2 4') == '-1'\n\"\"\"\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [0 for i in range(n + 1)]\nans = 0\nfor i in range(n):\n    dp[i + 1] = max(dp[i] + a[i], dp[i + 1])\n    ans = max(ans, dp[i + 1])\n\nprint(-1 if ans > m else ans)\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 5\") == \"5\"\nassert solution(\"1 10\") == \"10\"\nassert solution(\"2 10\") == \"20\"\nassert solution(\"3 10\") == \"30\"\nassert solution(\"4 10\") == \"40\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 5\\n') == '5'\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 5') == '5'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 5') == '1'\n\"\"\"\n\nimport sys",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''0 5\n''') == '5'\nassert solution('''0 0\n''') == '1'\nassert solution('''0 1\n''') == '2'\nassert solution('''1 1\n''') == '2'\nassert solution('''1 2\n''') == '3'\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''0 2\n''') == '5'\nassert solution('''0 1\n''') == '1'\nassert solution('''0 1\n''') == '1'\nassert solution('''0 1\n''') == '1'\nassert solution('''0 1\n''') == '1'\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 5\\n\") == \"5\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 5\\n\") == \"5\"\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''0 2''') == '4'\n\nassert solution('''0 1''') == '1'\n\nassert solution('''1 1''') == '2'\n\nassert solution('''2 1''') == '3'\n\nassert solution('''2 2''') == '5'",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n7 6 8\") == 2\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n') == '1'\nassert solution('1 2 3 4\\n') == '1'\nassert solution('1 2 3 4 5\\n') == '1'\nassert solution('1 2 3 4 5 6\\n') == '1'\n",
        "num_ids_2": 22,
        "num_ids_4": 53
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n7 6 8') == '2'\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n7 6 8\\n') == '2'\n\"\"\"\n\nimport sys",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 6 8\\n\") == 2\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '3\\n7 6 8\\n'\n) == '2'\n\nprint(solution(\n    '3\\n7 6 8\\n'\n))",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5\n    1 2 3 4 5\"\"\") == \"1\"\nassert solution(\"\"\"6\n    1 2 3 4 5 6\"\"\") == \"6\"\nassert solution(\"\"\"5\n    2 4 7 10\"\"\") == \"2\"\nassert solution(\"\"\"6\n    2 4 7 10\"\"\") == \"2\"\nassert solution(\"\"\"10\n    2 4 7 10 1 1 2 2 3 5 6\"\"\") == \"2\"\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 8\") == \"2\"\n\"\"\"\n\nfrom functools import reduce\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 6 8\\n') == '2'\n\"\"\"\n\nfrom sys import stdin\nfrom math import gcd",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 4\") == \"2\"\n\"\"\"\n\nfrom typing import List, Union\nfrom functools import reduce\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n2 3 1''') == '3 1 2'\nassert solution('''5\n5 3 7 9 2''') == '9 2 5 3 7'\nassert solution('''5\n3 9 2 5 6''') == '9 2 5 3 6'\nassert solution('''5\n3 9 2 5 7''') == '9 2 5 3 7'\n\n'''\nL = [int(line) for line in stdin.split()]\nans = []\nwhile L:\n    num = L.pop(0)\n    while ans and ans[-1] > num:\n        L.append(ans.pop())\n    ans.append(num)\nwhile ans:\n    print(ans.pop(), end=' ')\n'''\n\n'''\nclass Solution:\n    def reconstructOrder(self, nums: List[int]) -> List[int]:\n        \n        sorted_nums = sorted(nums)\n        res = []\n        \n        while sorted_nums:\n            num = sorted_nums.pop(0)\n            while num in sorted_nums:\n                num = sorted_nums.pop(0)\n            res.append(num)\n        \n        return res\n'''",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\n\"\"\"\n\nfrom collections import Counter\n\nnum_students = int(stdin.readline())\nstudents = stdin.readline().split(' ')\ncounter = Counter(students)\nordered_students = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\nprint(*[i[0] for i in ordered_students])\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 1') == '3 1 2'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2 1') == '3 1 2'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n') == '1 2'\nassert solution('2 3 1\\n') == '2 3 1'\nassert solution('3 1 2\\n') == '3 1 2'\nassert solution('3 2 1\\n') == '3 2 1'\n",
        "num_ids_2": 22,
        "num_ids_4": 54
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2 3 1') == '3 1 2'\n\n------------",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n2 3 1''') == '3 1 2'\n\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List\n\n\nclass Solution:\n    def reconstruct_order(self, nums: List[int]) -> str:\n        counter = Counter(nums)\n        previous = None\n        stack = []\n        for i in range(len(nums)):\n            current = nums[i]\n            if current == previous:\n                continue\n            if counter[current] == 1:\n                stack.append(current)\n                del counter[current]\n            elif counter[current] > 1:\n                counter[current] -= 1\n            else:\n                stack.append(current)\n            previous = current\n        return''.join(str(x) for x in stack)\n\n\nsolution = Solution()\n\nassert solution('3\\n2 3 1') == '3 1 2'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 1 4\") == \"4 3 1 2\"\nassert solution(\"5\\n2 3 1 5 4\") == \"5 4 1 2 3\"\nassert solution(\"3\\n2 3 1\") == \"3 1 2\"\n\nimport unittest\nfrom sys import stdin\n\nclass TestFunc(unittest.TestCase):\n    def test_1(self):\n        stdin = \"3\\n2 3 1\"\n        stdout = \"3 1 2\"\n        self.assertEqual(solution(stdin), stdout)\n\n    def test_2(self):\n        stdin = \"5\\n2 3 1 5 4\"\n        stdout = \"5 4 1 2 3\"\n        self.assertEqual(solution(stdin), stdout)\n\n    def test_3(self):\n        stdin = \"3\\n2 3 1\"\n        stdout = \"3 1 2\"\n        self.",
        "num_ids_2": 40,
        "num_ids_4": 57
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 7 100') == '9'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\"\n\nfrom typing import List, Tuple\n\nINPUT_SEPARATOR: str =''\n\nA_INDEX: int = 0\nB_INDEX: int = 1\nX_INDEX: int = 2\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 7 100') == '9'\n\"\"\"\n\nfrom math import log10",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''10 7 100''') == '9'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\"\n\nimport re",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"5 7 6\") == \"0\"\nassert solution(\"1 100 1000\") == \"1\"\nassert solution(\"1 10 9\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\n\"\"\"\n\na, b, x = map(int, input().split())\n\nmoney = x\n\nfor i in range(9, 1, -1):\n    while money - (a * i + b * len(str(i))) >= 0:\n        money -= a * i + b * len(str(i))\n    money = x\nprint(money)\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"10 7 100\"\n) == \"9\"\n\"\"\"\n\nimport sys\n\n_A, _B, _X = map(int, sys.stdin.readline().split())\n_N = 10 ** 9\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"10 1 1000000000\") == \"0\"\nassert solution(\"10 1 0\") == \"0\"\n\n\"\"\"\n\n\"\"\"\nCompile and run this file with the command:\npython3 -m kata solution\n\"\"\"\n\nimport sys",
        "num_ids_2": 25,
        "num_ids_4": 37
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\n\"\"\"\n\nimport sys\n\nA, B, X = map(int, sys.stdin.readline().strip().split())",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n 1\") == \"1\"\nassert solution(\"2 2\\n 1 1\") == \"0\"\nassert solution(\"3 4\\n 1 1 1 1\") == \"1\"\nassert solution(\"3 3\\n 2 1 1\") == \"1\"\nassert solution(\"3 3\\n 2 2 2\") == \"2\"\n",
        "num_ids_2": 29,
        "num_ids_4": 62
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\nprint(solution(stdin))\n\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == 2\n\"\"\"\nimport sys",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1\\n2\\n') == '1'\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\"\"\"\n\nn, k = input().split()\nh = input().split()\n\ncount = 0\nfor i in range(len(h)):\n    if int(h[i]) >= int(k):\n        count += 1\n\nprint(count)\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, m = [int(x) for x in stdin.split(' ')]\n        l = list(map(int, stdin.split('\\n')[1:]))\n        count = 0\n        most = 0\n        for x in l:\n            if x > most:\n                most = x\n                count = 1\n            elif x == most:\n                count += 1\n        return \"Yes\" if count >= (n / (4 * m)) else \"No\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n\nfrom typing import List, Dict, Tuple, NamedTuple\nimport sys\nfrom collections import defaultdict, Counter, deque\n\n\nclass Item(NamedTuple):\n    votes: int\n    i: int\n\n\nclass Poll:\n    def __init__(self, stdin):\n        self.n_items, self.n_select = [int(i) for i in stdin.split()]\n        self.items = [Item(int(i), idx) for idx, i in enumerate(stdin.split())]\n        self.items = sorted(self.items, key=lambda x: (-x.votes, x.i))\n\n    def most_popular(self):\n        return self.items[:self.n_select]\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4 2 1\") == \"Yes\"\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\n\"\"\"\n\nimport sys\nimport math\nfrom collections import Counter\nfrom collections import namedtuple\n\nTestCase = namedtuple('TestCase', ['N', 'M', 'A'])\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == \"Yes\"\nprint(solution(input()))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == 'Yes'\n\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 2\\n..#\\n###\\n') == 5\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\n\n------Problem 2------\nIn this problem, we consider an array of non-negative integers. We will study the following problem:\nThe array of integers is given. Let's say that we are considering the left end of an interval [a, b] (left end means the lower bound). We need to determine, for each element of the array, the amount of elements to the right of the interval, that is, such elements that have value of a <= value <= b. For example, given the array [3, 2, 5, 1, 4], the intervals are:\n[3, 3]\n[3, 3]\n[2, 3]\n[2, 4]\n[2, 4]\n[2, 5]\n[2, 5]\n[1, 3]\n[1, 4]\n[1, 5]\n[1, 5]\n[1, 5]\n[1, 5]\nThe amount of elements to the right of the interval is as follows: [3, 3] = 0; [2, 3] = 1; [2, 4] = 1; [2, 5] = 3; [1, 3] = 1; [1, 4] = 2; [1, 5] = 3; [1, 5] = 4; [1, 5] = 2; [1, 5] = 1.\nYour task is to determine, for each element of the array, the amount of elements to the right of the interval.\n\n-----Constraints-----\n - 1 \\leq n \\leq 10^6\n - 1 \\leq a[i] \\leq b[i] \\leq 10^9\n\n-----Input-----\nThe first line of input contains two integers n and m (1 \\leq n \\leq 10^6, 0 \\leq m \\leq n-1) \u2014 the number of elements and the maximum index in the array, respectively. The next line contains n integers a[1], a[2],..., a[n] (0 \\leq a[i] \\leq 10^9) \u2014 the elements of the array. The last line contains two integers b[1] and b[2],..., b[m] (1 \\leq b[i] \\leq 10^9) \u2014 the minimum value and the maximum value of the interval (the left end of the interval).\n\n-----Output-----\nPrint n integers, each equal to the amount of elements to the right of the interval, as described above.\n\n-----Sample Input-----\n5 3\n1 2 3 4 5\n2 5 1 4 3\n\n-----Sample Output-----\n0\n1\n1\n0\n0\n\nThe amount of elements to the right of the interval are:\n0 (for the interval [1, 2], no element lies in the interval)\n1 (for the interval [1, 2], the only element [2] lies in the interval)\n1 (for the interval [1, 2], the only element [2] lies in the interval)\n0 (for the interval [2, 5], no element lies in the interval)\n0 (for the interval [2, 5], the only element [5] lies in the interval)\n\n------Problem 3------\nIn this problem, we consider a sequence of non-negative integers. We will study the following problem:\nThe sequence of integers is given. Let's say that we are considering the right end of an interval [a, b] (right end means the higher bound). We need to determine, for each element of the sequence, the amount of elements to the left of the interval, that is, such elements that have value of a <= value <= b. For example, given the sequence [3, 2, 5, 1, 4], the intervals are:\n[3, 3]\n[3, 3]\n[2, 3]\n[2, 4]\n[2, 4]\n[2, 5]\n[2, 5]\n[1, 3]\n[1, 4]\n[1, 5]\n[1, 5]\n[1, 5]\n[1, 5]\nThe amount of elements to the left of the interval is as follows: [3, 3] = 0; [2, 3] = 0; [2, 4] = 0; [2, 5] = 1; [1, 3] = 1; [1, 4] = 1; [1, 5] = 1; [1, 5] = 1; [1, 5] = 1; [1, 5] = 1.\nYour task is to determine, for each element of the sequence, the amount of elements to the left of the interval.\n\n-----Constraints-----\n - 1 \\leq n \\leq 10^6\n - 1 \\leq a[i] \\leq b[i] \\leq 10^9\n\n-----Input-----\nThe first line of input contains two integers n and m (1 \\leq n \\leq 10^6, 0 \\leq m \\leq n-1) \u2014 the number of elements and the maximum index in the sequence, respectively. The next line contains n integers a[1], a[2],..., a[n] (0 \\leq a[i] \\leq 10^9) \u2014 the elements of the array. The last line contains two integers b[1] and b[2],..., b[m] (1 \\leq b[i] \\leq 10^9) \u2014 the minimum value and the maximum value of the interval (the right end of the interval).\n\n-----Output-----\nPrint n integers, each equal to the amount of elements to the left of the interval, as described above.\n\n-----Sample Input-----\n5 3\n1 2 3 4 5\n2 5 1 4 3\n\n-----Sample Output-----\n0\n0\n0\n0\n0\n\nThe amount of elements to the left of the interval are:\n0 (for the interval [1, 2], no element lies in the interval)\n0 (for the interval [1, 2], no element lies in the interval)\n0 (for the interval [1, 2], no element lies in the interval)\n0 (for the interval [2, 5], no element lies in the interval)\n0 (for the interval [2, 5], no element lies in the interval)\n\n------Problem 4------\nIn this problem, we consider a sequence of non-negative integers. We will study the following problem:\nThe sequence of integers is given. Let's say that we are considering the left end of an interval [a, b] (left end means the lower bound). We need to determine, for each element of the sequence, the amount of elements to the right of the interval, that is, such elements that have value of a <= value <= b. For example, given the sequence [3, 2, 5, 1, 4], the intervals are:\n[3, 3]\n[3, 3]\n[2, 3]\n[2, 4]\n[2, 4]\n[2, 5]\n[2, 5]\n[1, 3]\n[1, 4]\n[1, 5]\n[1, 5]\n[",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == 5\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\\n\") == 5\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 2\\n..#\\n###') == '5'\n\n-------\n2 3 2\n..#\n###\n4 1 2\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == 5\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 2\\n..#\\n###') == '5'\nassert solution('1 1 1\\n...') == '1'\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\\n\") == \"5\"\nassert solution(\"1 1 1\\n\") == \"1\"\nassert solution(\"5 1 1\\n.##\\n.##\\n\") == \"4\"\nassert solution(\"4 3 4\\n.#.\\n##.\\n###\\n\") == \"0\"\nassert solution(\"2 2 2\\n..\\n..\\n\") == \"1\"\n",
        "num_ids_2": 35,
        "num_ids_4": 82
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nfrom itertools import product",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2020 2040') == '2'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nl, r = [int(x) for x in stdin.readline().split()]\nmin_ = -1\nfor i in range(l, r):\n    for j in range(i + 1, r + 1):\n        if i * j % 2019 == 0:\n            if min_ == -1:\n                min_ = i * j\n            else:\n                min_ = min(min_, i * j)\n\nprint(min_)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2020 2040\") == 2\n\"\"\"\n\nl, r = map(int, stdin.split())\nprint((l * r) % 2019)",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\n\nimport sys\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport math",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\nL, R = map(int, stdin.split())\n\ni, j = 0, 0\nfor k in range(R):\n    if (2020*k)%2019 > L:\n        i = k\n    if (2020*k)%2019 == L:\n        j = k\n\nprint(min(i, j)*max(i, j))",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2020 2040\") == 2\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2020 2040') == '2'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2020 2040') == 2\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2020 2040') == '2'\n\"\"\"\n\nfrom math import gcd\n\nL, R = [int(i) for i in stdin.split(' ')]\n\nx, y = L, R\n\ngcd_nums = gcd(x, y)\n\nwhile gcd_nums > 1:\n    x = x / gcd_nums\n    y = y / gcd_nums\n\n    gcd_nums = gcd(x, y)\n\nprint((x * y) % 2019)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2020 2040') == '2'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('AtCoder') == 'AC'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('Atcoder') == 'WA'\nassert solution('AtCoderABC') == 'AC'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('AcC') == 'AC'\nassert solution('AtCoder') == 'AC'\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 35
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"c\") == \"WA\"\nassert solution(\"ABC\") == \"AC\"\nassert solution(\"bc\") == \"WA\"\nassert solution(\"Atcoder\") == \"WA\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('abCd') == 'WA'\nassert solution('aCcDe') == 'AC'\n\"\"\"\n\nimport unittest\n",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('AtCoder') == 'AC'\n\n---",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(TEST_STDIN) == TEST_STDOUT\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1214') == '2'\nassert solution('1234') == '4'\nassert solution('1') == '1'\nassert solution('9') == '9'\nassert solution('2') == '2'\n",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"1234\") == \"4\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"1234\") == \"4\"\nassert solution(\"567\") == \"6\"\nassert solution(\"89\") == \"9\"\nassert solution(\"1\") == \"1\"\n",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1234') == '4'\nassert solution('1214') == '2'\n\"\"\"\n\nimport math",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1214) == 2\n\"\"\"\n\nimport math\n\nS = input().strip()\nK = int(input())\n\ntotal_time = len(S) * 5\n\nfor i in range(math.ceil(total_time / (10 ** 15))):\n    if i * 10 ** 15 >= total_time:\n        break\n    if S[i] == '2':\n        S = S[:i] + '22' + S[i + 1:]\n    elif S[i] == '3':\n        S = S[:i] + '333' + S[i + 1:]\n    elif S[i] == '4':\n        S = S[:i] + '4444' + S[i + 1:]\n    elif S[i] == '5':\n        S = S[:i] + '55555' + S[i + 1:]\n    elif S[i] == '6':\n        S = S[:i] + '666666' + S[i + 1:]\n    elif S[i] == '7':\n        S = S[:i] + '77777' + S[i + 1:]\n    elif S[i] == '8':\n        S = S[:i] + '88888' + S[i + 1:]\n    elif S[i] == '9':\n        S = S[:i] + '999999999' + S[i + 1:]\n\nprint(S[K - 1])\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1214') == '2'\nassert solution('22144444') == '4'\nassert solution('32221444444444') == '0'\n",
        "num_ids_2": 24,
        "num_ids_4": 39
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1214) == 2\nassert solution(1) == 1",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1214) == '2'\nprint(solution(1214))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1214') == '2'\nassert solution('1224') == '4'\n\"\"\"\n\nfrom typing import Dict, List",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\nassert solution(\"5 1 2 3 4\") == \"NO\"\n\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n2 3 4 1\n''') == 'YES'\nassert solution('''5\n4 3 1 2\n''') == 'NO'\nassert solution('''5\n1 3 1 4 2\n''') == 'YES'\nassert solution('''5\n5 4 3 2 1\n''') == 'NO'\nassert solution('''5\n5 1 4 2 3\n''') == 'YES'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5\n5 2 3 4 1\n''') == 'YES'\nassert solution('''\n8\n2 4 6 8 1 3 5 7\n''') == 'NO'\n\n\"\"\"\n\n\"\"\"\n\"\"\"\nSolution:\n\n1. construct a graph from the input\n2. check if the graph has cycle\n3. if yes, then return \"NO\"\n4. return \"YES\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3 4 1\") == 'YES'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'YES'\nassert solution('5 2 3 4 1') == 'YES'\nassert solution('5 4 2 3 1') == 'NO'\nassert solution('1 2 3 4 5') == 'NO'\nassert solution('1 3 2 4 5') == 'YES'\n",
        "num_ids_2": 24,
        "num_ids_4": 52
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n5 2 3 4 1\") == \"YES\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n5 2 3 4 1\") == \"YES\"\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'\nassert solution('201920181') == '4'\n\nprint(solution(stdin))\n",
        "num_ids_2": 21,
        "num_ids_4": 47
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"1000000000000000000000000000000000\") == 33",
        "num_ids_2": 17,
        "num_ids_4": 29
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"201920181\") == \"4\"\n\"\"\"\n\n\"\"\"\ns = \"3121\"\ns = \"6\"\ns = \"201920181\"",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"201920181\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\nassert solution(\"201920181\") == \"4\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n",
        "num_ids_2": 21,
        "num_ids_4": 47
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\nassert solution(\"201920181\") == \"4\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 21,
        "num_ids_4": 47
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"201920181\") == 4\n",
        "num_ids_2": 17,
        "num_ids_4": 27
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\n\"\"\"\n\nfrom itertools import groupby\n",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"201920181\") == \"4\"\nassert solution(\"3121\") == \"2\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\nassert solution(\"2020\") == \"0\"\n",
        "num_ids_2": 22,
        "num_ids_4": 47
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\n",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\") == 2\nassert solution(\"13 37 39\") == 2\nassert solution(\"0 0 0 0\") == 0\nassert solution(\"1 2 -1\") == 3\nassert solution(\"-6 -12 6\") == 3\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 2\\n2 4\") == \"2\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == \"3\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\nassert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\n",
        "num_ids_2": 41,
        "num_ids_4": 87
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 -1\\n-6 -12 6\\n\") == \"3\"\nassert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"",
        "num_ids_2": 51,
        "num_ids_4": 97
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"2\"\nassert solution(\"4\\n-1 2 3 4\") == \"0\"\nassert solution(\"4\\n1 2 -1 4\") == \"2\"\n\nprint(solution(\"4\\n1 2 3 4\"))",
        "num_ids_2": 33,
        "num_ids_4": 50
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 48,
        "num_ids_4": 72
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\n\"\"\"\n\nfrom collections import Counter\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nc = []\nfor i in range(n):\n    c.append(a[i] * b[i])\n\nc = Counter(c)\nprint(max(c.values()))\n",
        "num_ids_2": 44,
        "num_ids_4": 66
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"13 37 39\") == \"2\"\nassert solution(\"0 0 0 0\") == \"0\"\nassert solution(\"1 2 3 4\") == \"0\"\n\nassert solution(\"1 2 -1\") == \"2\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\\n0 -1 2\") == \"2\"\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == \"3\"\nprint(\"Test finished.\")\n\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 44,
        "num_ids_4": 89
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == \"3\"\n\nprint(\"Success\")",
        "num_ids_2": 44,
        "num_ids_4": 89
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"10\"\nassert solution(\"abc???????\") == \"0\"\n",
        "num_ids_2": 27,
        "num_ids_4": 52
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"codeforces\"\n) == \"5\"\nassert solution(\n    \"dodivthree\"\n) == \"7 8\"\nassert solution(\n    \"bambarbia\"\n) == \"0\"\nassert solution(\n    \"hellocode\"\n) == \"10\"\nassert solution(\n    \"??????test\"\n) == \"10\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('codeforces') == 5\nassert solution('dodivthree') == 7\nassert solution('abaca?b') == 5\nassert solution('zabbbcc') == 5\nassert solution('hellocode') == 0\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"code??????\") == \"10\"\nassert solution(\"??????test\") == \"10\"\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 52
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('codeforces') == 5\n\nassert solution('dodivthree') == 7\n\nassert solution('bambarbia') == 0\n\nassert solution('hellocode') == 0\n",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\nstdin_test_1 = 'abaca?b'\nassert solution(stdin_test_1) == '5'\nstdin_test_2 = 'zabbbcc'\nassert solution(stdin_test_2) == '5'\nstdin_test_3 = 'bambarbia'\nassert solution(stdin_test_3) == '0'\nstdin_test_4 = 'code??????'\nassert solution(stdin_test_4) == '10'\nstdin_test_5 = '??????test'\n",
        "num_ids_2": 23,
        "num_ids_4": 53
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == '5'\nassert solution(\"dodivthree\") == '7 8'\nassert solution(\"bambarbia\") == '0'\nassert solution(\"hellocode\") == '10'\nassert solution(\"????\") == '0'\n",
        "num_ids_2": 27,
        "num_ids_4": 52
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"hellocode\") == \"0\"\nassert solution(\"bambarbia\") == \"10\"\nassert solution(\"code??????\") == \"10\"\n",
        "num_ids_2": 27,
        "num_ids_4": 52
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('codeforces') == 5\nassert solution('dodivthree') == 7\nassert solution('bambarbia') == 0\nassert solution('hellocode') == 0\nassert solution('abbcc') == 2\n",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == 5\nassert solution(\"dodivthree\") == 7\nassert solution(\"bambarbia\") == 0\nassert solution(\"hellocode\") == 0\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\nassert solution('7 1 2 2 1 5 3') == '3'\nassert solution('4 1 1 1') == '4'\n\n\"\"\"\n\nimport math\nimport sys",
        "num_ids_2": 42,
        "num_ids_4": 71
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''7\n4 1 2 2 1 5 3''') == '3\n\nassert solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5''') == '2\n\nassert solution('''4\n1 1 1 1''') == '4\n\nassert solution('''4\n3 3 3 3''') == '1 1'\n\nprint('Success')",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\n\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\n\nassert solution(\"7 4 1 2 2 1 5 3\") == \"3\"\n",
        "num_ids_2": 42,
        "num_ids_4": 59
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4'\nassert solution('4\\n1 1 1 1') == '4\\n4 4'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4'\nassert solution('7\\n4 1 2 2 1 5 3') == '3'\n",
        "num_ids_2": 51,
        "num_ids_4": 103
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"7\n4 1 2 2 1 5 3\n\"\"\") == \"\"\"3\n7 7\n2 3\n4 5\"\"\"\n\nassert solution(\"\"\"11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n\"\"\") == \"\"\"2\n3 4\n1 1\n2 2\n3 3\"\"\"\n\nassert solution(\"\"\"4\n1 1 1 1\n\"\"\") == \"\"\"4\n4 4\n1 1\n2 2\n3 3\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3\\n7 7'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4'\nassert solution('4\\n1 1 1 1') == '4\\n4 4'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4'",
        "num_ids_2": 55,
        "num_ids_4": 107
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\nprint('The local tests are done. Click on \"Check\" for more details on Pylint')\n",
        "num_ids_2": 55,
        "num_ids_4": 107
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"4\\n1 1 1 1\") == \"4\"\nassert solution(\"2\\n2 2\") == \"1 1\"\n",
        "num_ids_2": 47,
        "num_ids_4": 78
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == '3'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\\n\") == \"2\\n3 4\\n1 1\\n2 2\\n3 3\"\n\n\"\"\"",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_str) == test_ans\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n3 7 19 3 3') == '0'\nassert solution('4 2\\n2 78 4 10') == '12'\nassert solution('6 11\\n45 1 10 12 11 7') == '7'\n",
        "num_ids_2": 35,
        "num_ids_4": 54
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 11\\n45 1 10 12 11 7\") == 7\nassert solution(\"4 2\\n2 78 4 10\") == 12\nassert solution(\"5 2\\n3 7 19 3 3\") == 0\n\"\"\"\n\nn, k = [int(n) for n in stdin.split('\\n')[0].split()]\n\narr = [int(n) for n in stdin.split('\\n')[1].split()]\n\ncount = 0\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if (arr[i] + arr[j]) % k == 0:\n            count += 1\n\nprint(count)\n",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"\nassert solution(\"5 3\\n3 7 19 3 3\") == \"0\"\n",
        "num_ids_2": 35,
        "num_ids_4": 53
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 11\\n45 1 10 12 11 7') == '7'\nassert solution('4 2\\n2 78 4 10') == '12'\nassert solution('5 2\\n3 7 19 3 3') == '0'\n\nstdin = \"\"\"6 11\n45 1 10 12 11 7\n4 2\n2 78 4 10\n3 7 19 3 3\n4 2\n2 78 4 10\n3 7 19 3 3\n\"\"\"\n\"\"\"\na = [int(x) for x in stdin.split('\\n')[0].split()]\nb = int(stdin.split('\\n')[1])",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('5 2') == '0'\nassert solution('3 7 19 3 3') == '0'\nassert solution('4 2') == '12'\n\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 44
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5 11\n3 7 19 3 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n4 2\n2 78 4 10\n\"\"\") == \"12\"\n\nassert solution(\"\"\"\n5 2\n3 7 19 3 3\n\"\"\") == \"0\"\n\n\"\"\"\n\n\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1:\n\n\u0414\u0430\u043d \u043c\u0430\u0441\u0441\u0438\u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 N \u0438 \u0447\u0438\u0441\u043b\u043e K, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430. \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0440 \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u044d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f\n\n-----Input-----\n\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 N \u0438 K \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0438 \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430.\n\n\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 N \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u0430.\n\n-----Output-----\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0440 \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u044d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f.\n\n-----Examples-----\nInput\n5 11\n3 7 19 3 3\n\nOutput\n7\n\nInput\n4 2\n2 78 4 10\n\nOutput\n12\n\nInput\n5 2\n3 7 19 3 3\n\nOutput\n0\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 15
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4 2\n2 78 4 10\n\"\"\") == '12'\n\nassert solution(\"\"\"\n5 2\n3 7 19 3 3\n\"\"\") == '0'\n\nassert solution(\"\"\"\n5 1\n3 7 19 3 3\n\"\"\") == '0'\n\nassert solution(\"\"\"\n5 3\n3 7 19 3 3\n\"\"\") == '7'\n\nassert solution(\"\"\"\n4 3\n2 78 4 10\n\"\"\") == '6'\n",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"4 2\n2 78 4 10\n\"\"\") == \"12\"\nassert solution(\"\"\"5 2\n3 7 19 3 3\n\"\"\") == \"0\"\nassert solution(\"\"\"6 11\n45 1 10 12 11 7\n\"\"\") == \"7\"\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n2 78 4 10\\n') == 12\nassert solution('5 2\\n3 7 19 3 3\\n') == 0\nassert solution('6 11\\n45 1 10 12 11 7\\n') == 7\n\"\"\"\n\nfrom typing import List, Tuple, Union, Iterable, Set, Dict, cast\nimport collections\nimport string\n",
        "num_ids_2": 35,
        "num_ids_4": 54
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 5') == '9'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\nprint(\"Test PASSED\")\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5') == '9'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\nprint(\"PASSED\")\n\n-----Test Case 1-----\n-----Sample Input-----\n3\n2 5\n\n-----Sample Output-----\n9\n\n-----Test Case 2-----\n-----Sample Input-----\n5\n3 10 2 3 9\n\n-----Sample Output-----\n13\n\n-----Test Case 3-----\n-----Sample Input-----\n5\n5 10 2 3 9\n\n-----Sample Output-----\n15\n\n-----Test Case 4-----\n-----Sample Input-----\n7\n1 3 -1 3 -1 2 3\n\n-----Sample Output-----\n10\n\n-----Test Case 5-----\n-----Sample Input-----\n6\n1 2 3 4 2 1\n\n-----Sample Output-----\n10\n\n-----Test Case 6-----\n-----Sample Input-----\n8\n-1 -2 -3 1 -4 3 -5 3\n\n-----Sample Output-----\n0\n\n-----Test Case 7-----\n-----Sample Input-----\n4\n5 6 7\n\n-----Sample Output-----\n14\n\n-----Test Case 8-----\n-----Sample Input-----\n3\n5 7\n\n-----Sample Output-----\n10\n\n-----Test Case 9-----\n-----Sample Input-----\n4\n1 2 3 4\n\n-----Sample Output-----\n10\n\n-----Test Case 10-----\n-----Sample Input-----\n7\n3 9 2 7 6 4 8\n\n-----Sample Output-----\n19\n\n-----Test Case 11-----\n-----Sample Input-----\n6\n1 9 7 2 3 8\n\n-----Sample Output-----\n15\n\n-----Test Case 12-----\n-----Sample Input-----\n5\n1 2 3 4 5\n\n-----Sample Output-----\n15\n\n-----Test Case 13-----\n-----Sample Input-----\n7\n7 6 5 4 3 2 1\n\n-----Sample Output-----\n21\n\n-----Test Case 14-----\n-----Sample Input-----\n4\n1 2 3 4\n\n-----Sample Output-----\n10\n\n-----Test Case 15-----\n-----Sample Input-----\n8\n5 6 7 8 9 10 1 2 3 4\n\n-----Sample Output-----\n40\n\n-----Test Case 16-----\n-----Sample Input-----\n9\n4 5 6 7 8 9 10 1 2 3\n\n-----Sample Output-----\n45\n\n-----Test Case 17-----\n-----Sample Input-----\n10\n1 2 3 4 5 6 7 8 9 10\n\n-----Sample Output-----\n55\n\n-----Test Case 18-----\n-----Sample Input-----\n12\n1 2 3 4 5 6 7 8 9 10 11 12 1\n\n-----Sample Output-----\n55\n\n-----Test Case 19-----\n-----Sample Input-----\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13 1\n\n-----Sample Output-----\n55\n\n-----Test Case 20-----\n-----Sample Input-----\n14\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 1\n\n-----Sample Output-----\n55\n\n-----Test Case 21-----\n-----Sample Input-----\n16\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 1\n\n-----Sample Output-----\n55\n\n-----Test Case 22-----\n-----Sample Input-----\n18\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 1\n\n-----Sample Output-----\n55\n\n-----Test Case 23-----\n-----Sample Input-----\n20\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1\n\n-----Sample Output-----\n55\n\n-----Test Case 24-----\n-----Sample Input-----\n22\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 1\n\n-----Sample Output-----\n55\n\n-----Test Case 25-----\n-----Sample Input-----\n25\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 25 1\n\n-----Sample Output-----\n55\n\n-----Test Case 26-----\n-----Sample Input-----\n26\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 26 1\n\n-----Sample Output-----\n55\n\n-----Test Case 27-----\n-----Sample Input-----\n28\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 1\n\n-----Sample Output-----\n55\n\n-----Test Case 28-----\n-----Sample Input-----\n1\n5\n\n-----Sample Output-----\n5\n\n-----Test Case 29-----\n-----Sample Input-----\n2\n3 5\n\n-----Sample Output-----\n7\n\n-----Test Case 30-----\n-----Sample Input-----\n3\n5 1\n\n-----Sample Output-----\n6\n\n-----Test Case 31-----\n-----Sample Input-----\n5\n5 6\n\n-----Sample Output-----\n11\n\n-----Test Case 32-----\n-----Sample Input-----\n3\n1 2 3\n\n-----Sample Output-----\n3\n\n-----Test Case 33-----\n-----Sample Input-----\n3\n1 2 3\n\n-----Sample Output-----\n3\n\n-----Test Case 34-----\n-----Sample Input-----\n2\n4 5\n\n-----Sample Output-----\n9\n\n-----Test Case 35-----\n-----Sample Input-----\n7\n1 2 3 4 5 6 7\n\n-----Sample Output-----\n21\n\n-----Test Case 36-----\n-----Sample Input-----\n2\n1 2\n\n-----Sample Output-----\n2\n\n-----Test Case 37-----\n-----Sample Input-----\n3\n1 2 3\n\n-----Sample Output-----\n6\n\n-----Test Case 38-----\n-----Sample Input-----\n4\n1 2 3 4\n\n-----Sample Output-----\n10\n\n-----Test Case 39-----\n-----Sample Input-----\n2\n3 4\n\n-----Sample Output-----\n8\n\n-----Test Case 40-----\n-----Sample Input-----\n3\n3 4 2\n\n-----Sample Output-----\n8\n\n-----Test Case 41-----\n-----Sample Input-----\n2\n3 4\n\n-----Sample Output-----\n8\n\n-----Test Case 42-----\n-----Sample Input-----\n4\n5 4 6 7\n\n-----Sample Output-----\n20\n\n-----Test Case 43-----\n-----Sample Input-----\n3\n1 2 3\n\n-----Sample Output-----\n6\n\n-----Test Case 44-----\n-----Sample Input-----\n4\n1 2 3 4\n\n-----Sample Output-----\n10\n\n-----Test Case 45-----\n-----Sample Input-----\n2\n1 2\n\n-----Sample Output-----\n2\n\n-----Test Case 46-----\n-----Sample Input-----\n2\n1 3\n\n-----Sample Output-----\n3\n\n-----Test Case 47-----\n-----Sample Input-----\n2\n2 3\n\n-----Sample Output-----\n5\n\n-----Test Case 48-----\n-----Sample Input-----\n7\n1 3 5 2 4 6 7\n\n-----Sample Output-----\n18\n\n-----Test Case 49-----\n-----Sample Input-----\n3\n1 3 5\n\n-----Sample Output-----\n6\n\n-----Test Case 50-----\n-----Sample Input-----\n5\n1 5 7 2 4 6\n\n-----Sample Output-----\n13\n\n-----Test Case 51-----\n-----Sample Input-----\n3\n2 1 3\n\n-----Sample Output-----\n6\n\n-----Test Case 52-----\n-----Sample Input-----\n3\n2 3 1\n\n-----Sample Output-----\n6\n\n-----Test Case 53-----\n-----Sample Input-----\n3\n1 3 2\n\n-----Sample Output-----\n5\n\n-----Test Case 54-----\n-----Sample Input-----\n5\n1 3 2 5 4\n\n-----Sample Output-----\n13\n\n-----Test Case 55-----\n-----Sample Input-----\n5\n1 5 2 3 4\n\n-----Sample Output-----\n13\n\n-----Test Case 56-----\n-----Sample Input-----\n3\n2 1 3\n\n-----Sample Output-----\n6\n\n-----Test Case 57-----\n-----Sample Input-----\n3\n3 1 2\n\n-----Sample Output-----\n6\n\n-----Test Case 58-----\n-----Sample Input-----\n3\n1 3 2\n\n-----Sample Output-----\n5\n\n-----Test Case 59-----\n-----Sample Input-----\n4\n1 2 3 4\n\n-----Sample Output-----\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\n\"\"\"\n\nimport sys\nfrom typing import List\n\nclass Solution:\n    def max_sum(self, stdin: str) -> str:\n        n = int(stdin.readline())\n        sequence: List[int] = list(map(int, stdin.readline().split()))\n\n        max_ = 0\n        for i in range(n - 1):\n            if (sequence[i] > sequence[i + 1]):\n                sequence[i + 1] = sequence[i]\n\n        for i in range(n - 1):\n            if (sequence[i] > sequence[i + 1]):\n                if (sequence[i] + sequence[i + 1] > max_):\n                    max_ = sequence[i] + sequence[i + 1]\n\n        return str(max_)",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2 5') == '9'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\n\"\"\"\n\nfrom typing import List, Dict\nfrom itertools import product\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 5\") == 9\n\"\"\"\n\nfrom functools import lru_cache\n\nclass MaxSum:\n    \"\"\"\n    >>> max_sum = MaxSum(\"3\\n1 1 1\")\n    >>> max_sum.solution()\n    4\n    \"\"\"\n    def __init__(self, stdin: str) -> None:\n        self.n = int(stdin.split('\\n')[0])\n        self.items = list(map(int, stdin.split('\\n')[1].split()))\n\n    def solution(self) -> int:\n        result = 0\n\n        for i in range(self.n):\n            current_item = self.items[i]\n            for j in range(i+1, self.n):\n                if self.items[j] > current_item:\n                    current_item = self.items[j]\n\n            result += current_item\n\n        return result",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 5\") == 9\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 5\\n\") == 9\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1') == '0'\nassert solution('2 1 2 1') == '1'\nassert solution('2 1 2 2') == '0'\nassert solution('3 1 3 1') == '110'\n",
        "num_ids_2": 21,
        "num_ids_4": 47
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\n\nSolution #2\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10'\n) == '110'\n\"\"\"\n\nimport sys",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\n\nn, m, q = [int(i) for i in stdin.readline().split()]\na = [int(i) for i in stdin.readline().split()]\na.append(m)\na.sort()\n\nans = 0\ni = 0\nwhile i < len(a) - 1:\n    j = i + 1\n    while a[j] - a[i] <= m:\n        j += 1\n    ans = max(ans, q[i] + q[j])\n    i = j\nprint(ans)\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\n\"\"\"\n\nwith open('input.txt') as f:\n    inputs = f.read().strip().split('\\n')\n    n, m, q = list(map(int, inputs[0].split()))\n    a = inputs[1::2]\n    b = inputs[2::2]\n    c = [int(inputs[i]) for i in range(3, 3*q + 3, 3)]\n    d = [int(inputs[i]) for i in range(4, 3*q + 4, 3)]\n    # a = ['1', '2', '3', '4']\n    # b = ['1', '2', '3']\n    # c = [3, 2, 1]\n    # d = [100, 10, 10]\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 4 3\n1 3 3 100\n1 2 2 10\n2 3 2 10''') == '110'\nprint('Passed')\n\n\"\"\"\nimport sys",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n2\n1 4\n''') == '4'\n\nassert solution('''\n2\n2 1\n''') == '0'\n\nassert solution('''\n2\n1 4\n''') == '4'\n\nassert solution('''\n3\n1 2 3\n''') == '2'\n\nassert solution('''\n1\n2\n''') == '0'",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 4 6 3\\n') == '5'\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 4 6 3\\n') == '5'\n\"\"\"\n\nimport math",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\n\"\"\"\n\"\"\"\nFind the maximum difference between the maximum and minimum element.\n\nSample Input\n7\n9 5 7 10 12 14 13\nSample Output\n7\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n1 4 6 3''') == '5'\nassert solution('''6\n-100 -10 0 0 1 1''') == '10'\nassert solution('''5\n-1 -1 -1 0 1 2''') == '1'\n\n###############################################################################",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 4 6 3\") == '5'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\n\"\"\"\n\n\"\"\"\nSOLUTION\n\nThe maximum difference between the 2 largest elements should be the difference between the 2 smallest elements.\nThe maximum difference should be between the 2 smallest elements.\nSo, what we need to do is to sort the array and then find the 2 smallest elements and the 2 largest ones.\n\nTime Complexity: O(N log N)\nSpace Complexity: O(1)\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\nassert solution(\"5\\n3 4 2 1 5\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n\nimport math\n\nN = int(stdin.readline())\n\nx_list = [float(x) for x in stdin.readline().strip().split()]\ny_list = [float(y) for y in stdin.readline().strip().split()]\n\ndist = 0\n\nfor i in range(N):\n    dist += math.sqrt((x_list[i] - x_list[0]) ** 2 + (y_list[i] - y_list[0]) ** 2)\n\nprint(dist/math.factorial(N))\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == '2.0'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n0 0\\n1 0\\n0 1') == '2.2761423749'\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == '2.2761423749'\nassert solution(\"4\\n1 1\\n2 1\\n3 2\\n3 2\") == '2.0'\n\"\"\"\n\nimport math\n\nimport pytest\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.276142\"\nassert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.276142\"\nassert solution(\"5\\n0 0\\n1 0\\n0 1\\n1 1\") == \"2.641276\"\nassert solution(\"7\\n0 0\\n1 0\\n0 1\\n1 1\\n2 2\") == \"3.046771\"\nassert solution(\"9\\n0 0\\n1 0\\n0 1\\n1 1\\n2 2\\n3 3\\n0 0\\n1 1\\n0 2\") == \"3.592681\"\n",
        "num_ids_2": 50,
        "num_ids_4": 114
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3, [0, 0, 1, 0], [1, 0, 0, 1]) == \"2.276142...\"\nassert solution(4, [0, 0, 1, 0], [1, 0, 0, 1]) == \"3.60555127546...\"\nassert solution(7, [0, 0, 1, 0, 0, 1, 0], [1, 0, 0, 1, 0, 0, 1]) == \"4.85425806673...\"\nassert solution(5, [0, 0, 1, 0, 0], [1, 0, 0, 1, 0]) == \"4.85425806673...\"\nassert solution(5, [0, 0, 0, 0, 0], [1, 0, 0, 1, 0]) == \"3.60555127546...\"\n",
        "num_ids_2": 65,
        "num_ids_4": 151
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == '2.2761423749'\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == '2.2761423749'\n\"\"\"\n\nimport math",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n\nimport math",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1\\n2 2\\n3 3\\n4 4\") == '2.23606797749979'\n\"\"\"\n\nimport math",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12 4\") == \"4\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12 4') == '4'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12 4\") == \"4\"\nassert solution(\"2 2\") == \"2\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12 4') == '4'\n\n---\nIf there is only one solution, print it out, otherwise, print \"No solution.\"\n\nWe define the total length as the sum of the widths of the two curtains.\n\nIf there is no solution, print \"No solution.\"\n\nIf there are two solutions:\n\nPrint the shorter one, then the longer one.\nIf there are more than two solutions:\n\nPrint \"Multiple solutions.\"\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn through it such that the sum of the lengths of the two vertical lines is exactly B.\n\n---\nGiven three integers A, B, C, determine if it is possible to construct a window of width A that has two vertical lines drawn",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12 4\") == \"4\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12 4\") == 4\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12 4') == '4'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12 4\") == \"4\"\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12 4\") == \"4\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(12, 4) == 4\nprint(solution(12, 4))\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10000') == '3'\n\"\"\"\n\nN = int(stdin.readline().strip())\n\nf = {}\n\nfor a in range(1, N + 1):\n    for b in range(1, N + 1):\n        if len(str(a)) > len(str(b)):\n            f[(a, b)] = len(str(a))\n        else:\n            f[(a, b)] = len(str(b))\n\nprint(min(f.values()))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5') == '3'\n\"\"\"\n\n\"\"\"\nSolution:",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10000') == '3'\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10000\") == 3\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100\") == \"100\"\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\n'''",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10000') == '3'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10000\") == 3\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n2 1 3\\n3 1 2\\n\") == \"1\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n3 4\n2 1 3\n3 1 2 3\n2 3 2''') == '1'\nprint(\"Passed\")\n\n-----Explanation-----\n1.\n3 4\n2 1 3\n3 1 2 3\n2 3 2\n2 2 1 3 2 2 2 2\n\n2.\n2 3 2\n\n2.\n\n3.\n\n''')",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 3\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 2\\n3 1 2 3\") == 1\n\"\"\"\n\n\"\"\"\nSample Input 1\n4 5\n2 1 3 1\n2 1 2 2\n3 2 3\n1 2 1\n2 3 3\n1 1 4\n1 3 5\n2 1 4\n1 1 2\n2 2 1\n1 2 3\n2 1 4\n2 3 5\n1 4 6\n1 3 7\n2 4 8\n3 4 9\n4 4 10\n3 3 11\n2 3 12\n1 3 13\n2 3 14\n2 4 15\n1 4 16\n2 3 17\n3 4 18\n4 4 19\n1 3 20\n2 4 21\n3 4 22\n2 3 23\n1 4 24\n3 4 25\n3 4 26\n2 4 27\n1 4 28\n3 4 29\n2 4 30\n1 4 31\n1 4 32\n2 4 33\n1 4 34\n2 4 35\n2 4 36\n2 4 37\n1 4 38\n1 4 39\n1 4 40\n2 4 41\n1 4 42\n2 4 43\n2 4 44\n2 4 45\n1 4 46\n1 4 47\n1 4 48\n1 4 49\n1 4 50\n1 4 51\n1 4 52\n1 4 53\n1 4 54\n1 4 55\n1 4 56\n1 4 57\n2 4 58\n1 4 59\n2 4 60\n1 4 61\n1 4 62\n2 4 63\n1 4 64\n1 4 65\n2 4 66\n1 4 67\n1 4 68\n1 4 69\n1 4 70\n1 4 71\n2 4 72\n1 4 73\n1 4 74\n1 4 75\n1 4 76\n1 4 77\n1 4 78\n1 4 79\n1 4 80\n1 4 81\n1 4 82\n1 4 83\n1 4 84\n1 4 85\n1 4 86\n1 4 87\n1 4 88\n1 4 89\n1 4 90\n1 4 91\n1 4 92\n1 4 93\n1 4 94\n1 4 95\n1 4 96\n1 4 97\n2 4 98\n1 4 99\n1 4 100\n1 4 101\n2 4 102\n1 4 103\n1 4 104\n1 4 105\n1 4 106\n1 4 107\n2 4 108\n1 4 109\n2 4 110\n1 4 111\n1 4 112\n1 4 113\n1 4 114\n1 4 115\n1 4 116\n1 4 117\n1 4 118\n1 4 119\n1 4 120\n1 4 121\n1 4 122\n1 4 123\n1 4 124\n2 4 125\n1 4 126\n1 4 127\n1 4 128\n1 4 129\n1 4 130\n1 4 131\n1 4 132\n1 4 133\n1 4 134\n1 4 135\n1 4 136\n1 4 137\n1 4 138\n1 4 139\n1 4 140\n1 4 141\n1 4 142\n1 4 143\n1 4 144\n1 4 145\n1 4 146\n1 4 147\n1 4 148\n1 4 149\n1 4 150\n1 4 151\n1 4 152\n1 4 153\n1 4 154\n1 4 155\n1 4 156\n1 4 157\n1 4 158\n1 4 159\n1 4 160\n1 4 161\n1 4 162\n1 4 163\n1 4 164\n1 4 165\n1 4 166\n1 4 167\n1 4 168\n1 4 169\n1 4 170\n1 4 171\n1 4 172\n1 4 173\n1 4 174\n1 4 175\n1 4 176\n1 4 177\n1 4 178\n1 4 179\n1 4 180\n1 4 181\n1 4 182\n1 4 183\n1 4 184\n1 4 185\n1 4 186\n1 4 187\n1 4 188\n1 4 189\n1 4 190\n1 4 191\n1 4 192\n1 4 193\n1 4 194\n1 4 195\n1 4 196\n1 4 197\n1 4 198\n1 4 199\n1 4 200\n1 4 201\n1 4 202\n1 4 203\n1 4 204\n1 4 205\n1 4 206\n1 4 207\n1 4 208\n1 4 209\n1 4 210\n1 4 211\n1 4 212\n1 4 213\n1 4 214\n1 4 215\n1 4 216\n1 4 217\n1 4 218\n1 4 219\n1 4 220\n1 4 221\n1 4 222\n1 4 223\n1 4 224\n1 4 225\n1 4 226\n1 4 227\n1 4 228\n1 4 229\n1 4 230\n1 4 231\n1 4 232\n1 4 233\n1 4 234\n1 4 235\n1 4 236\n1 4 237\n1 4 238\n1 4 239\n1 4 240\n1 4 241\n1 4 242\n1 4 243\n1 4 244\n1 4 245\n1 4 246\n1 4 247\n1 4 248\n1 4 249\n1 4 250\n1 4 251\n1 4 252\n1 4 253\n1 4 254\n1 4 255\n1 4 256\n1 4 257\n1 4 258\n1 4 259\n1 4 260\n1 4 261\n1 4 262\n1 4 263\n1 4 264\n1 4 265\n1 4 266\n1 4 267\n1 4 268\n1 4 269\n1 4 270\n1 4 271\n1 4 272\n1 4 273\n1 4 274\n1 4 275\n1 4 276\n1 4 277\n1 4 278\n1 4 279\n1 4 280\n1 4 281\n1 4 282\n1 4 283\n1 4 284\n1 4 285\n1 4 286\n1 4 287\n1 4 288\n1 4 289\n1 4 290\n1 4 291\n1 4 292\n1 4 293\n1 4 294\n1 4 295\n1 4 296\n1 4 297\n1 4 298\n1 4 299\n1 4 300\n1 4 301\n1 4 302\n1 4 303\n1 4 304\n1 4 305\n1 4 306\n1 4 307\n1 4 308\n1 4 309\n1 4 310\n1 4 311\n1 4 312\n1 4 313\n1 4 314\n1 4 315\n1 4 316\n1 4 317\n1 4 318\n1 4 319\n1 4 320\n1 4 321\n1 4 322\n1 4 323\n1 4 324\n1 4 325\n1 4 326\n1 4 327\n1 4 328\n1 4 329\n1 4 330\n1 4 331\n1 4 332\n1 4 333\n1 4 334\n1 4 335\n1 4 336\n1 4 337\n1 4 338\n1 4 339\n1 4 340\n1 4 341\n1 4 342\n1 4 343\n1 4 344\n1 4 345\n1 4 346\n1 4 347\n1 4 348\n1 4 349\n1 4 350\n1 4 351\n1 4 352\n1 4 353\n1 4 354\n1 4 355\n1 4 356\n1 4 357\n1 4 358\n1 4 359\n1 4 360\n1 4 361\n1 4 362\n1 4 363\n1 4 364\n1 4 365\n1 4 366\n1 4 367\n1 4 368\n1 4 369\n1 4 370\n1 4 371\n1 4 372\n1 4 373\n1 4 374\n1 4 375\n1 4 376\n1 4 377\n1 4 378\n1 4 379\n1 4 380\n1 4 381\n1 4 382\n1 4 383\n1 4 384\n1 4 385\n1 4 386\n1 4 387\n1 4 388\n1 4 389\n1 4 390\n1 4 391\n1 4 392\n1 4 393\n1 4 394\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == output()\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 4\\n1 1 2 3\\n2 3 2') == '1'\nassert solution('3 4\\n1 1 2 3\\n2 3 2\\n2 3 2') == '2'\n\n'''\n\nimport math\nimport sys",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 4\n2 1 3\n3 1 2 3\n2 3 2''') == '1'\n\"\"\"\nfrom collections import Counter",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 4\n2 1 3\n3 1 2 3''') == '1'\nassert solution('''3 4\n2 1 3\n3 1 2 3''') == '1'\nassert solution('''3 4\n2 3 2''') == '0'\nassert solution('''4 4\n1 1 1 1\n1 2 2 2\n1 3 3 3\n1 4 4 4\n''') == '4'\nassert solution('''3 4\n2 1 3\n3 1 2 3\n2 3 2''') == '0'\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\n2 1 3 4 5\\n3 1 2 3\\n2 3 2') == '1'\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\na = []\nfor _ in range(n):\n    t = list(map(int, sys.stdin.readline().split()))\n    a.append(t)",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4\\n2 1 3\\n3 1 2 3') == '1'\nassert solution('3 4\\n2 3 2\\n2 3 2') == '2'\n\"\"\"\n\nfrom collections import Counter\nimport sys",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n') == '0.5'\nassert solution('1\\n') == '0.5'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n') == '0.5'\n\"\"\"\n\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '0.5'\nassert solution('5') == '0.25'\nassert solution('6') == '0.375'\n\nprint('all tests passed.')\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n') == '0.5'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '0.5'\nassert solution('1') == '0.5'\nassert solution('2') == '0.25'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n') == '0.5'\nprint(solution('4\\n'))",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n') == '0.5'",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"0.5\"\n\n\"\"\"\n\nimport unittest\nimport random\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        for _ in range(100):\n            n = random.randint(1,100)\n            expected = n / 2\n            res = solution(str(n))\n            assert abs(float(res) - expected) <= 1e-6",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '0.5'\nassert solution('1') == '0.5'\nassert solution('8') == '0.25'\nassert solution('5') == '0.2'\nassert solution('4') == '0.5'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n\") == \"0.5\"\n\"\"\"\nimport math\nfrom decimal import Decimal\n\ninput_n = int(input())",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\n\nassert solution(\"5\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\nassert solution(\"8\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n2\\n1 1\\n2\\n2 0\") == \"3\"\n\n\"\"\"\n\nn = int(input())\n\nd = {}\n\nfor i in range(n):\n    a, x, y = input().split()\n    a = int(a)\n    x = int(x)\n    y = int(y)\n    if not d.get(a):\n        d[a] = {}\n    d[a][x] = y\n\nfor a in d:\n    if len(d[a]) < 2:\n        continue\n    if len(d[a]) > 2:\n        print(0)\n        continue\n    if d[a].keys() == set([1,2]):\n        print(2)\n        continue\n    if d[a].keys() == set([1,3]):\n        print(2)\n        continue\n    if d[a].keys() == set([2,3]):\n        print(2)\n        continue\n    print(0)\n",
        "num_ids_2": 62,
        "num_ids_4": 107
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == 2\n\"\"\"\n\nimport sys",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '2'\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\nassert solution(\"4\\n2\\n1 2\\n2 3\\n3 1\\n1 1\\n2 1\") == \"3\"\n",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\n\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0') == '2'\nassert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0') == '2'\nassert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0') == '2'\nassert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0') == '2'\nassert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0') == '2'\n\n\"\"\"\nimport re",
        "num_ids_2": 62,
        "num_ids_4": 124
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1\\n1\\n1 0\\n1 1\\n2 1\\n2 1\\n1 0\") == \"5\"\nassert solution(\"5\\n2 1\\n1\\n1 1\\n2 1\\n2 1\\n1 0\") == \"2\"\nassert solution(\"3\\n1\\n2 1\\n2 1\") == \"2\"\n\"\"\"\n\nimport sys\nimport os\nimport time",
        "num_ids_2": 70,
        "num_ids_4": 91
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\nassert solution(\"5\\n1\\n2 3\\n3\\n2 2\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\",
        "num_ids_2": 1572,
        "num_ids_4": 1572
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\n\"\"\"\n\nimport os",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\nassert solution('kitten') == 'kitten'\n\"\"\"\n\nfrom __future__ import annotations\n\nK = int(input())\nS = input()",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '7\\nnikoandsolstice\\n'\n) == 'nikoand...'\nassert solution(\n    '5\\nzinglang'\n) == 'zinglang'\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"andsofustt\") == \"ands...\"\nassert solution(\"hola\") == \"hola\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 42
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\nassert solution('mathematics') =='mathematics'\nassert solution('mathematicssssssssssssssssss') =='mathematicssssssssssssssssss'\nassert solution('thefringeisatlan') == 'thefringeisatlan'\nassert solution('thefringeisatlanand') == 'thefringeisatlanand'\n",
        "num_ids_2": 31,
        "num_ids_4": 81
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"abcdefghij\") == \"ab...eghij\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aaa') == 'aaas'\nassert solution('aaas') == 'aaas'\nassert solution('aaaa') == 'aaaaes'\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('apple') == 'apples'\nassert solution('banana') == 'bananas'\nassert solution('pineapple') == 'pineapples'\nassert solution('orange') == 'oranges'\nassert solution('melon') =='melons'\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('apple') == 'apples'\nassert solution('banana') == 'bananas'\nassert solution('cherry') == 'cherries'\nassert solution('orange') == 'oranges'\nassert solution('grape') == 'grapes'\n",
        "num_ids_2": 23,
        "num_ids_4": 46
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"cat\") == \"cats\"\nassert solution(\"dog\") == \"dogs\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('apple') == 'apples'\nassert solution('banana') == 'bananas'\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('apple') == 'apples'\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\"\n\n\"\"\"\nimport re",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('apple') == 'apples'\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"atcoder\") == \"atcodes\"\nassert solution(\"atcoderc\") == \"atcoders\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 38
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('aba') == 'aba'\nassert solution('aab') == 'aab'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\nprint(solution(stdin))\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1\\n3\\n2\\n1\\n2\\n3\\n4\") == '2'\nassert solution(\"4 2\\n1\\n1\\n1\\n3\\n2\\n1\\n2\\n3\\n4\") == '2'\nassert solution(\"4 2\\n1\\n3\\n2\\n1\\n2\\n3\\n4\") == '1'\n\"\"\"\n",
        "num_ids_2": 70,
        "num_ids_4": 102
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == 1\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\n\n-------------\n\nThe Snuke problem is similar to the Zebra problem. We have a group of snakes that live in a town. They all have different kinds of snacks. The number of each snake\u2019s kind is given. We want to find how many snacks are left uneaten in the town.\n\nLet us consider the following example, where we have three types of snacks: Snack A, Snack B, and Snack C. The number of Snakes who eat Snack A, Snack B, and Snack C is given: N A_1, A_2, \\cdots, A_K B_1, B_2, \\cdots, B_K C_1, C_2, \\cdots, C_K\n\nIn this example, there are two Snakes who eat Snack A and Snack B, so there are not left. Similarly, three Snakes who eat Snack A, Snack B, and Snack C will all die because there are no Snacks left.\n\nIn this problem, there will always be some Snakes who eat Snacks. Find the number of Snakes who die.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq K \\leq 100\n - 1 \\leq A_i \\leq N\n - 1 \\leq B_i \\leq N\n - 1 \\leq C_i \\leq N\n - A_i \\neq B_i\n - A_i \\neq C_i\n - B_i \\neq C_i\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN A_1, A_2, \\cdots, A_K B_1, B_2, \\cdots, B_K C_1, C_2, \\cdots, C_K\n\n-----Output-----\nPrint the number of Snakes who die.\n\n-----Sample Input-----\n3\n1 1 2 1\n1 2 2 3\n1 2 3 3\n\n-----Sample Output-----\n0\n\n-------------\n\nThe Snakes are given in the following format:\n- Each Snake has a length L.\n- If a Snake eats Snack S_i, then its length becomes L + S_i.\nWe want to find out the minimum length among Snakes. A Snake dies when its length becomes zero.\n\nWe have the following example:\nA Snake with length L has length L.\nA Snake with length L + Snack 1 has length L + Snack 1.\nA Snake with length L + Snack 2 has length L + Snack 2.\nA Snake with length L + Snack 3 has length L + Snack 3.\nIf a Snake eats Snack S_i, then its length becomes L + S_i.\n\nThe number of Snakes who eat Snack S_i is given: N_1, N_2, \\cdots, N_K\n\nIn this example, there are three Snakes who eat Snack 1, so there are no Snakes who die.\nIn this example, there are three Snakes who eat Snacks 2 and 3, so there is one Snake who dies.\nIn this example, there are three Snakes who eat Snacks 2 and 3, so there is one Snake who dies.\n\nIn this problem, there will always be some Snakes who eat Snacks. Find the number of Snakes who die.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq K \\leq 100\n - 1 \\leq S_i \\leq N\n - 1 \\leq N_1, N_2, \\cdots, N_K \\leq 10\n - 1 \\leq S_i \\leq N_i\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN_1\nN_2\n\\cdots\nN_K\nS_1\nS_2\n\\cdots\nS_K\n\n-----Output-----\nPrint the number of Snakes who die.\n\n-----Sample Input-----\n3 1\n2\n1 2\n3\n3\n\n-----Sample Output-----\n1\n\n-------------\n\"\"\"\n\nimport math",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n3\\n1 3\\n2 4\\n3 5') == '2'\n\"\"\"\n\nimport sys\nfrom typing import List\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 2\n2\n1 3\n1\n3''') == '1'\nassert solution('''3 2\n2\n1 3\n1\n3''') == '2'\n\n---\nLines: 2\nTime:.02\nMemory:.01\n---\n\n\"\"\"\n\nimport math\nimport math\nimport os\nimport random\nimport re\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3 2\n2\n1 3\n1\n3\"\"\") == \"1\"\nassert solution(\"\"\"3 2\n2\n1 3\n1\n3\"\"\") == \"1\"\nassert solution(\"\"\"3 2\n2\n2\n3\n1\"\"\") == \"0\"\nassert solution(\"\"\"3 2\n1\n3\n2\"\"\") == \"0\"\nassert solution(\"\"\"3 2\n1\n3\n1\"\"\") == \"0\"\n\n\"\"\"\nn, k = [int(s) for s in stdin.readline().strip().split()]\nsnacks = []\nfor _ in range(k):\n    snacks.append([int(s) for s in stdin.readline().strip().split()])\n\nsnacks.sort(key=lambda x: len(x))\n\nsnacks = snacks[::-1]\n\nans = 0\nfor i in range(len(snacks)):\n    if len(snacks[i]) == 1:\n        ans += 1\n    else:\n        snacks[i] = snacks[i][1:]\n        snacks[i].append(snacks[i][0])\n        snacks[i].sort()\n\nprint(ans)\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\"\n\nimport math\n\nN, K = [int(x) for x in input().split()]\nsnaketable = []\nfor i in range(K):\n    snaketable.append([int(x) for x in input().split()])",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 2\n2\n1 3\n1''') == '1'\n\n'''\n\ucd5c\ub300 10\uac1c \uc904 \ucd9c\ub825\n\n\ucd5c\ub300 100\uac1c \uc904 \uc785\ub825\n\n\ucd9c\ub825 \ucd5c\ub300 100\uac1c \uc904\n'''\n\n'''\n\uc22b\uc790\ub97c \ud558\ub098\uc529 \ub9ac\uc2a4\ud2b8\uc5d0 \uc800\uc7a5\ud558\ub294 \uacbd\uc6b0\n\n1 -> [1]\n2 -> [1, 2]\n3 -> [1, 2, 3]\n4 -> [1, 2, 3, 4]\n5 -> [1, 2, 3, 4, 5]\n...\n\n1 -> [1]\n2 -> [1, 2]\n3 -> [1, 2, 3]\n...\n\nN -> [1, 2, 3,..., N]\n\n\uc774\ub807\uac8c \ud558\uba74 \uc778\ub371\uc2a4\ub97c \uc798 \uc54c \uc218 \uc788\uc744 \uac83 \uac19\ub2e4.\n\n'''\n\n'''\n[\ubb38\uc81c]\n\uac00\uc7a5 \uc9e7\uc740 \uae38\uc774\uc758 \uc8fc\uc0ac\uc704\ub97c \uad74\ub824\uc57c \ud55c\ub2e4.\n\n[\ucd9c\ub825\uacb0\uacfc]\n\uc8fc\uc0ac\uc704 \uac8c\uc784\uc744 N\uc7a5 \uc2dc\ud0a4\ub824\uba74 \uba87 \ucd08\uac00 \uac78\ub9ac\ub294\uc9c0 \ucd9c\ub825\ud574\uc57c \ud55c\ub2e4.\n\n[\uc81c\uc57d\uc0ac\ud56d]\n1. N\uc740 10 \uc774\uc0c1 10,000 \uc774\ud558\uc774\ub2e4.\n\n2. \uc8fc\uc0ac\uc704\uc758 \uac00\uc9d3\uc218\ub294 \ucd5c\ub300 1,000\uac1c\ub97c \ub118\uc9c0 \uc54a\ub294\ub2e4.\n\n3. \uc8fc\uc0ac\uc704\uc5d0 \uc4f0\uc778 \uc22b\uc790\ub294 \ucd5c\ub300 1,000\uac1c\ub97c \ub118\uc9c0 \uc54a\ub294\ub2e4.\n\n[\uc608\uc81c]\n\uc8fc\uc0ac\uc704 \uc138 \uac1c\ub85c \ucd5c\uc18c 10\ucd08\uac00 \uac78\ub9ac\ub294 \ucf00\uc774\uc2a4\ub97c \ucc3e\uc544\ubcf4\uc790.\n\n\uc8fc\uc0ac\uc704 \uac8c\uc784\uc744 \ud55c \uc8fc\uc0ac\uc704\ub97c \ub193\uc740 \uc0ac\ub78c\uc774 \uc21c\uc11c\ub97c \uc815\ud574\uc11c \ub450 \uc0ac\ub78c\uc774 \uac01\uac01 \uc8fc\uc0ac\uc704\ub97c \ub358\uc84c\uc744 \ub54c, \uc2dc\uac04\uc774 \uac00\uc7a5 \uc9e7\uc740 \uacbd\uc6b0\ub97c \ucc3e\uc544\ubcf4\uc790.\n\n\ucc98\uc74c \uc8fc\uc0ac\uc704\ub294 1, 2, 3, 4, 5, 6\uc774 \uc4f0\uc774\uace0, \ucc98\uc74c \uc0ac\ub78c\uc774 \uc8fc\uc0ac\uc704\ub97c \ubc1b\uc73c\uba74 2, 3, 4, 5, 6, 1\uc774 \uc4f0\uc778\ub2e4.\n\n\ucc98\uc74c \uc0ac\ub78c\uc774 \ub450 \ubc88\uc9f8 \uc8fc\uc0ac\uc704\ub97c \ubc1b\uc73c\uba74 2, 3, 4, 1, 5, 6\uc774 \uc4f0\uc778\ub2e4.\n\n\ucc98\uc74c \uc0ac\ub78c\uc774 \uc138 \ubc88\uc9f8 \uc8fc\uc0ac\uc704\ub97c \ubc1b\uc73c\uba74 3, 4, 5, 6, 1, 2\uac00 \uc4f0\uc778\ub2e4.\n\n\ub9c8\ucc2c\uac00\uc9c0\ub85c \ucc98\uc74c \uc0ac\ub78c\uc774 \ub124 \ubc88\uc9f8 \uc8fc\uc0ac\uc704\ub97c \ubc1b\uc73c\uba74 4, 1, 5, 2, 6, 3\uc774 \uc4f0\uc778\ub2e4.\n\n\ub610\ud55c \ucc98\uc74c \uc0ac\ub78c\uc774 \ub2e4\uc12f \ubc88\uc9f8 \uc8fc\uc0ac\uc704\ub97c \ubc1b\uc73c\uba74 5, 2, 6, 3, 4, 1\uc774 \uc4f0\uc778\ub2e4.\n\n\ub9c8\ucc2c\uac00\uc9c0\ub85c \ucc98\uc74c \uc0ac\ub78c\uc774 \uc5ec\uc12f \ubc88\uc9f8 \uc8fc\uc0ac\uc704\ub97c \ubc1b\uc73c\uba74 6, 3, 4, 1, 2, 5\uac00 \uc4f0\uc778\ub2e4.\n\n\uc774\ub807\uac8c \uac01 \uc0ac\ub78c\uc774 \ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc8fc\uc0ac\uc704\ub97c \ubc1b\uc740 \uacbd\uc6b0 \ucd5c\uc18c \uc2dc\uac04\uc744 \uad6c\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc2dc\uc624.\n\n\uccab\uc9f8 \uc904\uc5d0 \uc0ac\ub78c\uc758 \uc218 N\uacfc \uc8fc\uc0ac\uc704\uc758 \uac00\uc9d3 \uc218 K\uac00 \uc8fc\uc5b4\uc9c4\ub2e4. (1 \\leq N \\leq 1,000, 1 \\leq K \\leq 1,000)\n\n\ub458\uc9f8 \uc904\ubd80\ud130 N\uac1c\uc758 \uc904\uc5d0 \uac01 \uc0ac\ub78c\uc774 \ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc8fc\uc0ac\uc704\ub97c \ubc1b\uc740 \uacbd\uc6b0\ub97c \ub098\ud0c0\ub0b4\ub294 \uc22b\uc790\uac00 \uc8fc\uc5b4\uc9c4\ub2e4.\n\n\ub9c8\uc9c0\ub9c9 \uc0ac\ub78c\uc774 \ubc1b\uc740 \uc8fc\uc0ac\uc704\ub294 K\ubc88 \ubc18\ubcf5\ud574\uc11c \uc8fc\uc5b4\uc9c0\uba70, \uac19\uc740 \uc22b\uc790",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aabbbbaaca') == '5'\n\"\"\"\n\nimport unittest\nfrom typing import List, Dict",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aabbbbaaca') == 5\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aabbbbaaca') == '5'\n\nprint(solution('aabbbbaaca'))\n'''",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aabbbbaaca') == '5'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_0) == test_output_0\nprint(\"Test PASSED\")\n\n------Solution-------\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aabbbbaaca\") == 5\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abbbbaaca\") == \"5\"\n\"\"\"\n\nn = int(input())\ns = input()",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcda\") == \"aabcd\"\nassert solution(\"abbcd\") == \"aabbc\"\nassert solution(\"aaaaa\") == \"a\"\nassert solution(\"aaaaaa\") == \"a\"\nassert solution(\"abcaaa\") == \"abcaa\"\n\n\"\"\"\n\nimport sys\n\nfrom collections import defaultdict",
        "num_ids_2": 26,
        "num_ids_4": 48
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aabbbbaaca') == 5\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('4 4 4') == '0'\nassert solution('5 5 5') == '0'\nassert solution('5 5 2') == '3'\nassert solution('2 2 2') == '0'\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5 2 4\") == 3\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5 2 4\") == 3\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\") == '2'\nassert solution(\"4\\n9 8 7 6\") == '5'\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n5 2 4\") == '3'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n5 2 4\") == '3'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5 2 4\") == 3\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1 3\") == 2\n\"\"\"\n\n\"\"\"\nPROBLEM STATEMENT:\n\nYou are given an array A having N integers. You need to find the maximum sum of the subarrays of A having the same value of the first element.\n\nNOTE: You can only traverse the array once.\n\nInput Format\n\nThe first line contains an integer N, the number of elements in the array.\nThe next line contains N space separated integers denoting the elements of the array A.\n\nConstraints\n\n1 \\leq N \\leq 10^5\n1 \\leq A[i] \\leq 10^6\n\nOutput Format\n\nPrint a single integer denoting the maximum sum of the subarrays of A having the same value of the first element.\n\nSample Input\n\n5\n1 1 1 1 2\nSample Output\n\n2\nExplanation\n\nHere is one way to have the maximum sum:\n\nSubarray having 1 with sum 2\nSubarray having 1 with sum 1\nSubarray having 1 with sum 1\nSubarray having 1 with sum 1\nSubarray having 2 with sum 2\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 1 1 3''') == '2'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1 1 3') == '2'\nassert solution('2 1 1 3') == '2'\nassert solution('1 2 1 3') == '2'\nassert solution('1 2 2 3') == '5'\nassert solution('1 2 3 1 3') == '5'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1 1 3') == '2'\nassert solution('1 0 0 3') == '0'\nassert solution('1 0 0 1') == '1'\nassert solution('0 1 1 1') == '1'\n\"\"\"\n\n\"\"\"\nTop solution is not working in Python.\nProblem: when A is the only card with 1, there is no way to produce max sum of (A + 1) * (A - 1).\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1 1 3') == '2'\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 3\") == \"2\"\nassert solution(\"2 1 1 3\") == \"1\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"2 1 1 3\") == \"2\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 1 3') == '2'",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1 3\") == \"2\"\n\"\"\"\n\nA, B, C, K = [int(i) for i in input().split()]\nA -= 1\nB -= 1\nC -= 1\nK -= 1\n\nK_v = 0\nmax_v = 0\nfor i in range(K):\n    if i % 3 == 0:\n        K_v += 1\n    elif i % 3 == 1:\n        max_v += K_v\n    else:\n        max_v += K_v - 1\n\nprint(max_v)\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\n\"\"\"\n    INSIGHTS:\n        1. This is a knapsack problem\n        2. This problem is about counting\n        3. This problem is about counting\n        4. This problem is about counting\n        5. This problem is about counting\n        6. This problem is about counting\n    \n    Intuition:\n        1. 1. The maximum sum of the cards can be either 0, 1, 2,..., k - 1, or k (depending on which cards we pick up).\n        2. All of these summations can be done with the same computation. We compute the summation from 0 to k-1 and then add k.\n        3. For example, if we have A cards, the maximum sum of the numbers written on the cards is k (if we pick up all of them), which is the maximum possible sum of the numbers written on the cards.\n        4. To compute the maximum sum of the numbers written on the cards, we need to compute the maximum sum of the numbers written on the cards where we choose between choosing the first card or the second card.\n        5. We can use a similar approach in which we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose between choosing the first card and choosing the second card where we compute the maximum sum of the numbers written on the cards where we choose",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 8\\n') == 'Yes'\nassert solution('7 8\\n') == 'No'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 8') == 'Yes'\n\nassert solution('2 3') == 'No'\n\nassert solution('4 0') == 'No'\n\nassert solution('0 10') == 'No'\n\nassert solution('3 10') == 'No'",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 8\\n\") == \"Yes\"\nassert solution(\"3 9\\n\") == \"No\"\nassert solution(\"1 1\\n\") == \"Yes\"\nassert solution(\"1 2\\n\") == \"No\"\nassert solution(\"2 2\\n\") == \"Yes\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 8''') == 'Yes'\nassert solution('''3 5''') == 'No'\nassert solution('''7 9''') == 'Yes'\nassert solution('''10 10''') == 'Yes'\nassert solution('''15 15''') == 'Yes'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 8\\n') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"1 4\") == \"No\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 8\\n\") == \"Yes\"\nassert solution(\"2 7\\n\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8\") == \"Yes\"\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 8\\n') == 'Yes'\n\n\"\"\"\n\nimport re\nfrom collections import Counter\n\ninput_str = stdin.read()\nX, Y = map(int, re.findall(r'\\d+', input_str))\n\ncrane = Counter('crane')\nturtle = Counter('turtle')\n\nfor x, y in zip(range(1, X + 1), range(1, Y + 1)):\n    crane[x] += 1\n    turtle[y] += 1\n    if all(counter == Y for counter in [crane, turtle]):\n        print('Yes')\n        exit()\nprint('No')\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\n1 2\n1 3\n2 3\n''') == '2'\n\n-----Note-----\n - This is a variation of the problem \"Paths with Sum\".\n - See Problem `PathsWithSum` for more details.\n'''",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\\n3 4\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\\n\") == \"2\"\n\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(stdin))\n'''\n\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"2 2\\n1 1\\n1 1\") == \"0\"\nassert solution(\"2 2\\n1 1\\n1 2\") == \"2\"\n\n-------------------\n\nimport sys\n\nn, m = [int(x) for x in sys.stdin.readline().split()]\nadj = [[int(x) for x in line.split()] for line in sys.stdin.readlines()]\n\nedges = []\nfor i in range(1, n + 1):\n    for j in range(i, n + 1):\n        if adj[i-1][j-1] == 1 and (i, j) not in edges:\n            edges.append((i, j))\n\nedges.sort()",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\n1 2\n1 3\n2 3\n''') == '2'\n\n\"\"\"\n\n\"\"\"\n\nimport math",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n1 2\\n1 3\\n2 3\\n') == '2'\nassert solution('4 3\\n1 2\\n1 3\\n2 3\\n') == '1'\nassert solution('5 4\\n1 2\\n2 3\\n2 4\\n4 5\\n') == '0'\nassert solution('4 3\\n1 3\\n2 3\\n2 4\\n4 5\\n') == '0'\nassert solution('6 6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n') == '1'\n",
        "num_ids_2": 50,
        "num_ids_4": 108
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2\\n1 3\\n2 3\\n\") == \"2\"\nassert solution(\"4 4\\n1 2\\n1 3\\n2 3\\n4 3\\n\") == \"0\"\nassert solution(\"3 2\\n1 2\\n1 3\\n\") == \"1\"\nassert solution(\"3 3\\n1 2\\n1 3\\n2 3\\n\") == \"2\"\n\"\"\"",
        "num_ids_2": 54,
        "num_ids_4": 100
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3\\n1 2\\n2 3\\n') == '2'\n\n-------\n\"\"\"\n\n\"\"\"\n>>> solution('1 3\\n1 2\\n2 3\\n')\n2\n>>> solution('1 3\\n1 2\\n2 3\\n')\n2\n>>> solution('1 2\\n1 3\\n1 4\\n')\n3\n>>> solution('1 2\\n1 3\\n1 4\\n')\n3\n>>> solution('1 3\\n1 2\\n2 3\\n')\n2\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 -1\\n1 4 1 1') == '15'\nassert solution('5 2\\n-2 2 -1 3 1') == '2'\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"18\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n\") == \"18\"\n\"\"\"\n\nfrom functools import reduce\nimport math",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n') == '18'\n\"\"\"\n\nimport sys\nimport numpy as np",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"18\"\n\"\"\"\n\n\"\"\"\nThe idea is to find the min and max of the apples that have to be in the final apple pie. The min of the final apple pie will be the min of the remaining apples, and the max of the final apple pie will be the max of the remaining apples.\n\nI think the DP approach would be faster than the brute force approach.\n\"\"\"\n\nfrom math import inf\nfrom typing import List, Set\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6') == '18'\n\"\"\"\n\nimport sys\n\ntests = int(sys.stdin.readline())\nfor _ in range(tests):\n    N, L = map(int, sys.stdin.readline().split())\n    flavors = [0] * (N+1)\n    for i in range(1, N+1):\n        flavors[i] = int(sys.stdin.readline())\n    # print(flavors)\n    min_diff = None\n    for i in range(N):\n        for j in range(i, N):\n            diff = abs(flavors[i] + flavors[j] - L)\n            if min_diff is None or diff < min_diff:\n                min_diff = diff\n    print(min_diff)\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2') == '18'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n') == '18'\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"18\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"18\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\nn, l = list(map(int, sys.stdin.readline().split()))\n\napples = defaultdict(int)\n\nfor i in range(1, n+1):\n    apples[i] = l + i - 1\n\nsorted_apples = sorted(apples, key=apples.get, reverse=False)\n\nprint(sorted_apples)\n\nresult = 0\n\nfor i in range(len(sorted_apples)):\n    result += apples[sorted_apples[i]]\n\nprint(result)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"15\") == \"60\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('15') == '60'\n\n\"\"\"\n\n\n\n\"\"\"\nAssignments - 5\n\n\"\"\"\n\n\"\"\"\nGiven a positive integer N, write a program to find the sum of all positive integers less than or equal to N that have \nat least one divisor in the set {2, 3,..., N}.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^6\n\n-----Input-----\nThe first line of input contains T denoting the number of test cases. \nThe first line of each test case contains an integer N.\n\n-----Output-----\nPrint the sum of all such integers.\n\n-----Sample Input-----\n5\n1\n3\n4\n5\n8\n\n-----Sample Output-----\n9\n5\n15\n22\n32\n\n\"\"\"\n\n\"\"\"\nAssignments - 5\n\n\"\"\"\n\n\"\"\"\nGiven an array of positive integers, find and print the maximum sum of \nsubsequence of three numbers in the array such that elements in the subsequence \nare consecutive elements of the array. For example, for the array given below, \nthe subsequences are {1, 2, 3}, {1, 2, 4} and {2, 3, 4}, with maximum sum of 9.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^6\n\n-----Input-----\nThe first line of input contains an integer T denoting the number of test cases. \nThe first line of each test case contains an integer N. \nThe next line contains N distinct integers denoting the array elements.\n\n-----Output-----\nPrint the maximum sum of all such subsequences in all test cases.\n\n-----Sample Input-----\n2\n3\n2 1 3\n4\n2 4 5 3\n\n-----Sample Output-----\n9\n10\n\"\"\"\n\n\"\"\"\nAssignments - 5\n\n\"\"\"\n\n\"\"\"\nGiven two integers X and N, you need to find the Ath Fibonacci number modulo 109 + 7. \nA Fibonacci number is defined as follows:\n\nF[1] = 1\nF[2] = 1\nF[i] = F[i - 1] + F[i - 2], for i > 2.\nF[x] = F[x - 1] ^ F[x - 2], for x > 2.\n\nThe first few terms of F are:\n\nF[1] = 1\nF[2] = 1\nF[3] = 2\nF[4] = 3\nF[5] = 5\nF[6] = 8\nF[7] = 13\nF[8] = 21\nF[9] = 34\nF[10] = 55\nF[11] = 89\nF[12] = 144\nF[13] = 233\nF[14] = 377\nF[15] = 610\nF[16] = 987\nF[17] = 1597\nF[18] = 2584\nF[19] = 4181\nF[20] = 6765\n\nInput Format\nThe first and only line of input contains two space separated integers X and N.\n\nOutput Format\nPrint the Ath Fibonacci number modulo 109 + 7.\n\nConstraints\n1 <= N <= 10^9\n\nExample\nSample Input\n1 1\nSample Output\n1\n\"\"\"\n\n\"\"\"\nAssignments - 5\n\n\"\"\"\n\n\"\"\"\nGiven an integer N. The task is to find the sum of the digits of the first N Fibonacci numbers modulo 109 + 7.\n\n-----Constraints-----\n - 1 <= N <= 10^9\n\n-----Input-----\nThe first and only line of input contains an integer N.\n\n-----Output-----\nPrint the sum of the digits of the first N Fibonacci numbers modulo 109 + 7.\n\n-----Sample Input-----\n6\nSample Output\n2\n\"\"\"\n\n\"\"\"\nAssignments - 5\n\n\"\"\"\n\n\"\"\"\nGiven a positive integer N. The task is to find the sum of digits of the first N Fibonacci numbers modulo 109 + 7.\n\n-----Constraints-----\n - 1 <= N <= 10^9\n\n-----Input-----\nThe first and only line of input contains an integer N.\n\n-----Output-----\nPrint the sum of the digits of the first N Fibonacci numbers modulo 109 + 7.\n\n-----Sample Input-----\n7\nSample Output\n2\n\"\"\"\n\n\"\"\"\nAssignments - 5\n\n\"\"\"\n\n\"\"\"\nGiven an array of integers A. The task is to find the number of subsequences of A of size N such that the \nfibonacci numbers of the subsequences are consecutive integers.\n\n-----Constraints-----\n - 1 <= N <= A.length <= 1000\n\n-----Input-----\nThe first and only line of input contains an integer N, the length of the array. The next line contains N space \nseparated integers denoting the array elements.\n\n-----Output-----\nPrint the number of subsequences of A of size N such that the fibonacci numbers of the subsequences are consecutive \nintegers.\n\n-----Sample Input-----\n2\n1 2\nSample Output\n1\n\n\"\"\"\n\n\"\"\"\nAssignments - 5\n\n\"\"\"\n\n\"\"\"\nGiven an array of integers A and an integer B. You need to count the number of subarrays having their sum divisible by B.\n\n-----Constraints-----\n - 1 <= N <= 10^5\n - 1 <= A[i] <= 10^5\n - 2 <= B <= 10^5\n\n-----Input-----\nThe first and only line of input contains two space separated integers N and B.\nThe next line contains N space separated integers denoting the array A.\n\n-----Output-----\nPrint the required answer.\n\n-----Sample Input-----\n5 3\n1 3 2 6 7\nSample Output\n4\n\n\"\"\"\n\n\"\"\"\nAssignments - 5\n\n\"\"\"\n\n\"\"\"\nGiven an array of integers A of size N. The task is to find the sum of the maximum sum subsequence modulo M where M \nis the size of the array.\n\n-----Constraints-----\n - 1 <= N <= 10^5\n - 1 <= A[i] <= 10^5\n - 2 <= M <= 10^3\n\n-----Input-----\nThe first and only line of input contains an integer N, the size of the array. The next line contains N space \nseparated integers denoting the array A.\n\n-----Output-----\nPrint the required answer.\n\n-----Sample Input-----\n5\n1 2 3 4 5\nSample Output\n16\n\n\"\"\"\n\n\"\"\"\nAssignments - 5\n\n\"\"\"\n\n\"\"\"\nGiven a non negative integer number num. For every numbers i in the range 0 \u2264 i \u2264 num calculate the number of 1's \nin their binary representation and return them as an array.\n\n-----Constraints-----\n - 0 <= num <= 10^7\n\n-----Input-----\nThe first and only line of input contains an integer N, the number of test cases. \nThe next N lines contains an integer, the number to calculate 1's for.\n\n-----Output-----\nPrint the number of 1's for every test case in a new line.\n\n-----Sample Input-----\n3\n2\n5\n10\n\n-----Sample Output-----\n1\n2\n3\n\n\"\"\"\n\n\"\"\"\nAssignments - 5\n\n\"\"\"\n\n\"\"\"\nGiven a string S consisting of lowercase Latin letters. \nYour task is to find the number of longest increasing and decreasing substrings of S.\n\n-----Constraints-----\n - S contains only lowercase Latin letters.\n\n-----Input-----\nThe first and only line of input contains",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('15') == '60'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('15\\n') == '60'\nprint(solution(stdin.read()))\n\n\"\"\"\n\n\"\"\"\n2021.3.14\n\nGiven:\n - n: the number of lines\n - k: the number of characters per line\n - m: the number of lines of code\n - x: the number of spaces between characters\n\nFind:\n - the number of possible lines of code \n - the number of spaces between each character\n - the number of spaces between each character in each line\n\n-----Constraints-----\n - 1 \\leq n \\leq 10^6\n - 1 \\leq k \\leq 10^6\n - 1 \\leq m \\leq 10^6\n - 0 \\leq x \\leq 10^6\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn k m x\n\n-----Output-----\nPrint the number of lines of code, the number of spaces between each character, and the number of spaces between each character in each line.\n\n-----Sample Input-----\n5 3 3 2\n\n-----Sample Output-----\n3\n2 2\n3 1\n2 2\n\nThe first line has 3 characters, 2 spaces, and 2 lines.\nThe second line has 5 characters, 4 spaces, and 2 lines.\nThe third line has 3 characters, 3 spaces, and 1 line.\nThe fourth line has 5 characters, 2 spaces, and 2 lines.\nThe fifth line has 3 characters, 2 spaces, and 2 lines.\nThe number of characters in the first line is 3+2+2 = 5.\nThe number of characters in the second line is 5+4+2 = 13.\nThe number of characters in the third line is 3+3+1 = 6.\nThe number of characters in the fourth line is 5+2+2 = 9.\nThe number of characters in the fifth line is 3+2+2 = 7.\nThe number of spaces between each character in the first line is 2.\nThe number of spaces between each character in the second line is 4.\nThe number of spaces between each character in the third line is 3.\nThe number of spaces between each character in the fourth line is 2.\nThe number of spaces between each character in the fifth line is 2.\nThe number of spaces between each character in the sixth line is 2.\nThe number of lines in the first line is 1.\nThe number of lines in the second line is 2.\nThe number of lines in the third line is 1.\nThe number of lines in the fourth line is 2.\nThe number of lines in the fifth line is 1.\nThe number of lines in the sixth line is 2.\nThe number of spaces between each character in the first line is 2.\nThe number of spaces between each character in the second line is 2.\nThe number of spaces between each character in the third line is 2.\nThe number of spaces between each character in the fourth line is 2.\nThe number of spaces between each character in the fifth line is 2.\nThe number of spaces between each character in the sixth line is 2.\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('15') == '60'\nassert solution('1') == '1'\nassert solution('2') == '1'\n\nassert solution('3') == '1'\nassert solution('4') == '2'",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\"\nfrom sys import stdin\n\nN = int(stdin.readline().rstrip())\ni, n = 1, 1\nwhile i <= N:\n    if i % 3 == 0 and i % 5 == 0:\n        n += i\n    elif i % 3 == 0:\n        n += i\n    elif i % 5 == 0:\n        n += i\n    else:\n        n += i\n    i += 1\nprint(n)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('15') == '60'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\n\"\"\"\nfrom math import inf",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\n---- Problem ----\n\nIn a town, there are N people labelled from 1 to N.  There is a rumor that one of these people is secretly the town judge.\nIf the town judge exists, then:\nThe town judge trusts nobody.\nEverybody (except for the town judge) trusts the town judge.\nThere is exactly one person that satisfies properties 1 and 2.\nYou are given trust, an array of pairs trust[i] = [a, b] representing that the person labelled a trusts the person labelled b.\nIf the town judge exists and can be identified, return the label of the town judge.  Otherwise, return -1.\n\n\n-------- Example --------\n\nInput: N = 2, trust = [[1,2]]\nOutput: 2\n\n\n-------- Example --------\n\nInput: N = 3, trust = [[1,3],[2,3]]\nOutput: 3\n\n\n-------- Example --------\n\nInput: N = 3, trust = [[1,3],[2,3],[3,1]]\nOutput: -1\n\n-------- Example --------\n\nInput: N = 3, trust = [[1,2],[2,3]]\nOutput: -1\n\n-------- Example --------\n\nInput: N = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]]\nOutput: 3\n\n-------- Example --------\n\nInput: N = 3, trust = [[1,2],[2,3]]\nOutput: -1\n\n\n\n--------- Expected Output --------\n4\n5\n\n------BRIEF DESCRIPTION ------\nThere is exactly one person that satisfies properties 1 and 2.\n\nEach person lies between 1 and N, and trusts at most one person.\n\nThe town judge trusts no one.\n\nEvery person trusts the town judge.\n\nThe town judge trusts himself.\n\nThere is exactly one person that satisfies properties 1 and 2.\n\n------ Hints ------\n\n- Write a function that will return the index of the person who is the town judge.\n- The trust graph may have cycles.\n- The trust graph may have multiple people with the same degree of trust.\n\n------ Complexity ------\n\nTime: O(N)\nSpace: O(N)\n\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def findJudge(self, N: int, trust: List[List[int]]) -> int:\n        if N == 1:\n            return 1\n        if N == 2 and len(trust) == 1:\n            return 2\n\n        count = {}\n        for i in trust:\n            count[i[0]] = count.get(i[0], 0) + 1\n            count[i[1]] = count.get(i[1], 0) - 1\n\n        for k in count:\n            if count[k] == N - 1 and k!= N - 1:\n                return k\n\n        return -1",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\nassert solution('1 5\\n7 10 12 7 13') == '12'\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '6 5\\n4 7 10 6 5'\n) == '8'\n\n\"\"\"\nfrom math import inf",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\n\"\"\"\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\n\nX, N = map(int, stdin.readline().split())\nA = [int(i) for i in stdin.readline().split()]\n\nS = set(A)\nfor n in range(1, 10001):\n    if n not in S:\n        print(n)\n        break",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n2 1') == '1'\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\"\n\nH, W = map(int, input().split(' '))\nh, w = map(int, input().split(' '))\n\nprint(min(H - h, W - w))\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n2 1\") == '1'\n\"\"\"\n\nimport math\nfrom typing import List",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n2 2\\n3 3\") == \"4\\n3\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 2\n2 1''') == \"1\"\nassert solution('''5 5\n5 5''') == \"0\"\nassert solution('''5 6\n5 5''') == \"1\"\nassert solution('''2 5\n5 2''') == \"0\"\n'''\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n2 1') == '1'\n\n------MEMOIZATION------\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n2 1') == '1'\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) > 1\nH, W = map(int, sys.argv[1:])\n\nfor _ in range(H):\n    for _ in range(W):\n        stdin = sys.stdin.readline().strip()\n        if stdin:\n            h, w = map(int, stdin.split(' '))\n            print(W*h + w)\n        else:\n            break\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\"\n\nimport sys\nimport math\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4\", \"3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\", \"3 7 5 1 10 3 20\") == \"-\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input) == expected_result\n\n-----\n\"\"\"\nimport heapq\nfrom typing import List\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-\"\n\n'''\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'\nassert solution('7 4\\n3 5 1 10 3 20') == '-1'\nassert solution('7 4\\n3 7 5 1 10 3') == '-1'\nassert solution('7 2\\n3 7 5 1 10 3') == '-1'\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 81
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'\n\nprint(solution(input()))\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\n\"\"\"\nimport numpy as np\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '-1'\n\nassert solution('3 2') == '-1'\n\nassert solution('3 1') == '-1'\n\nassert solution('4 3') == '3'\n\nassert solution('10 5') == '6'",
        "num_ids_2": 23,
        "num_ids_4": 46
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 2\n1 2 3''') == '-1'\nassert solution('''7 2\n3 7 5 1 10 3 20''') == '6'\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 2\\n3 7 5 1 10 3 20') == '-1'\n\"\"\"\n\n\nfrom collections import Counter\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\n\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\n\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"\n",
        "num_ids_2": 70,
        "num_ids_4": 100
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n.*..\\n.*.\\n*.*\\n..*\\n***\\n.*.\\n.*.\") == '2 2 1\\n3 3 1'\nassert solution(\"4 3\\n.*..\\n.*.\\n*.*\\n..*\\n***\\n.*.\\n.*.\") == '-1'\n",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == '3\\n3 4 1\\n3 5 2\\n3 5 1\\n'\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == '-1\\n'\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == '-1\\n'\n",
        "num_ids_2": 90,
        "num_ids_4": 128
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\".*...\") == '3'\nassert solution(\"..**...\") == '3'\nassert solution(\"**..*.*\") == '3'\nassert solution(\"...**...\") == '3'\nassert solution(\"......\") == '3'\n",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\nassert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"3 3\\n.*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\n",
        "num_ids_2": 70,
        "num_ids_4": 116
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\".*...\\n******\\n.*...\") == \"3\"\n\nassert solution(\".*...\\n******\\n.*...\") == \"3\"\n\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\") == \"3\"\n\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\") == \"3\"\n\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\") == \"3\"",
        "num_ids_2": 40,
        "num_ids_4": 104
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 6\") == \"4\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2 2\") == \"2\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\n",
        "num_ids_2": 70,
        "num_ids_4": 140
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........') == '3\\n3 4 1\\n3 5 2\\n3 5 1\\n'\n\nassert solution('....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........') == '-1'\n\nassert solution('....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........') == '-1'\n\nassert solution('....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........') == '3\\n3 4 1\\n3 5 2\\n3 5 1\\n'\n\nassert solution('....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........') == '3\\n3 4 1\\n3 5 2\\n3 5 1\\n'\n",
        "num_ids_2": 88,
        "num_ids_4": 176
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........') == '3\\n3 4 1\\n3 5 2\\n3 5 1'\nassert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....') == '-1'\nassert solution('5 5\\n.*...\\n***..\\n.****\\n..**.\\n.....') == '-1'\nassert solution('3 3\\n*.*\\n.*.\\n*.*') == '-1'\nassert solution('3 3\\n*.*\\n.*.\\n*.*') == '-1'\n",
        "num_ids_2": 86,
        "num_ids_4": 142
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aaa') == 'abc'\nassert solution('aabc') == 'ab'\nassert solution('good') == 'g'\nassert solution('aa') == ''\nassert solution('aaaa') == ''\n",
        "num_ids_2": 21,
        "num_ids_4": 39
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aaa') == 3\nassert solution('xyz') == 2\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('good') == '0'\nassert solution('aabc') == '2'\nassert solution('aaa') == '3'\nassert solution('aaaa') == '0'\n\"\"\"\n\nfrom collections import Counter\n\nn = int(input())\ns = list(input())\n\na = Counter(s).most_common()\nb = []\nfor i in range(1, len(a)):\n    if a[i][1] % 2 == 1:\n        b.append(a[i][0])",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('good') == 0\nassert solution('aabc') == 2\nassert solution('aaa') == 3\n\nassert solution(stdin.strip()) == 3\n\n-----\n3\naaaa\n\n-----\n4\naaa\n\n-----\n4\naabc\n\n----\n4\naabcc\n\n----\n5\naaaaa\n\n----\n5\naaabbbcc\n\n----\n5\naaabbbccd\n\n----\n5\naaabbbccde\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naaabbbccdefg\n\n----\n5\naa",
        "num_ids_2": 17,
        "num_ids_4": 36
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"good\") == 0\nassert solution(\"string\") == 1\nassert solution(\"xyyx\") == 2\nassert solution(\"aaa\") == 3\nassert solution(\"aabc\") == 2\n",
        "num_ids_2": 16,
        "num_ids_4": 33
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aaaa') == 0\nassert solution('aa') == 1\nassert solution('a') == 0\nassert solution('bb') == 1\nassert solution('aab') == 2\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a\") == \"a\"\nassert solution(\"ab\") == \"ba\"\nassert solution(\"aa\") == \"bb\"\nassert solution(\"ba\") == \"\"\nassert solution(\"baa\") == \"b\"\n",
        "num_ids_2": 20,
        "num_ids_4": 38
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n\nprint(solution(\"aaaaa\"))\n\n\"\"\"\n\nimport string\nimport numpy as np\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"good\") == '0'\nassert solution(\"aabc\") == '2'\nassert solution(\"aaa\") == '3'\nassert solution(\"ab\") == ''\nassert solution(\"aaaaa\") == '0'\n",
        "num_ids_2": 21,
        "num_ids_4": 39
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"good\") == 0\nassert solution(\"aabc\") == 2\nassert solution(\"aaa\") == 3\n\nprint(solution(input()))\n",
        "num_ids_2": 17,
        "num_ids_4": 25
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == answer\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 2\\n1 3\\n2 3\\n') == '1010'\nassert solution('4 3\\n1 2\\n1 3\\n2 3\\n') == 'YES\\n101011010'\n\"\"\"\n",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == \"YES\\n10100\"\n\n\"\"\"",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1') == 'YES\\n10100'\n\"\"\"\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"6 5\n1 5\n2 1\n1 4\n3 1\n6 1\"\"\") == 'YES\\n10100'\nassert solution(\"\"\"6 8\n1 6\n2 1\n1 5\n3 1\n4 1\n5 1\n5 6\n6 1\"\"\") == 'YES\\n10100'\n\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n4 5\n1 2\n1 3\n1 4\n2 3\n3 4\n''') == 'YES\\n10100'\n\n'''\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n5 2\\n2 4\\n4 5\") == \"YES\\n10100\"\n\nassert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n5 2\\n2 4\\n4 5\") == \"NO\\n\"\n\nassert solution(\"3 3\\n1 2\\n1 3\\n2 3\\n\") == \"NO\\n\"\n\nassert solution(\"3 2\\n1 2\\n2 3\\n1 3\\n\") == \"YES\\n101\"\n\"\"\"\n",
        "num_ids_2": 76,
        "num_ids_4": 131
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin_lines) == output\n\n\"\"\"\n\n\nfrom collections import defaultdict",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == \"YES\\n10100\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1'\n) == 'YES\\n10100'\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('1\\n5\\n') == 2\nassert solution('1\\n2\\n') == 0\nassert solution('1\\n5\\n2\\n') == 1\nassert solution('1\\n5\\n2\\n3\\n') == 3\n",
        "num_ids_2": 21,
        "num_ids_4": 50
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5\\n1 2\\n5 5') == '2\\n3 4'\nassert solution('1 7\\n1 7') == '0'\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 7\\n1 2\\n5 5\") == \"2\\n3 4\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\n2 2\\n1 2\\n5 5\\n') == 2\nassert solution('1 7\\n1 7\\n') == 0\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"1 1\\n1 1\") == \"0\"\nassert solution(\"1 7\\n1 7\") == \"0\"\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 72
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\n\n\"\"\"\n\nfrom typing import List, Set",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 5\n2 2\n1 2\n5 5''') == '2\nassert solution('''1 7\n1 7''') == '0\nassert solution('''1 1\n1 1''') == '0\n\n'''\nfrom typing import List\nimport unittest\n\n\nclass Solution:\n    def __init__(self, n: int, m: int, lrs: List[List[int]]) -> None:\n        self.n = n\n        self.m = m\n        self.lrs = lrs\n\n    def solution(self, stdin: str) -> str:\n        pass\n\n    def test_solution(self):\n        pass\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == '2\\n3 4'\nassert solution(\"1 7\\n1 7\") == '0'\n\"\"\"\n\nimport sys",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 5\n2 2\n1 2\n5 5''') == '2\nassert solution('''1 7\n1 7''') == '0\nassert solution('''1 1\n1 7''') == '0\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 9 2 3\") == 2\n\"\"\"\n\nimport sys\n\nA, B, C, D = [int(x) for x in sys.stdin.read().split('\\n')[:-1]]\n\nsum_ = 0\nfor i in range(A, B + 1):\n    if i % C == 0 or i % D == 0:\n        continue\n    sum_ += 1\n\nprint(sum_)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 9 2 3''') == 2\n\nassert solution('''4 9 2 3''') == 2\n\nassert solution('''4 9 2 3''') == 2\n\nassert solution('''4 9 2 3''') == 2\n\nassert solution('''4 9 2 3''') == 2",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 9 2 3') == '2'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 9 2 3') == 2\n\"\"\"\n\na,b,c,d = [int(x) for x in stdin.split()]\n\ncount = 0\nfor i in range(a,b+1):\n    if i % c == 0 or i % d == 0:\n        continue\n    else:\n        count += 1\nprint(count)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 9 2 3\") == 2\n\"\"\"\n\nA, B, C, D = map(int, input().split())\ncount = 0\nfor x in range(A, B + 1):\n    if x % C!= 0 and x % D!= 0:\n        count += 1\nprint(count)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 9 2 3') == '2'\nassert solution('1 4 2 3') == '0'\n\"\"\"\n\nA, B, C, D = [int(s) for s in input().split()]\ncount = 0\nfor i in range(A, B+1):\n    if i % C!= 0 and i % D!= 0:\n        count += 1\n\nprint(count)\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 9 2 3') == 2\n\"\"\"\n\n\nfrom math import gcd\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 9 2 3\") == \"2\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"10 5 1 1\") == \"1\"\n\n------\n\n>>> reduce(lambda x, y: y%x, [a, b, c, d])\n0\n>>> reduce(lambda x, y: x*y, [a, b, c, d])\na*b*c*d\n\n-----\n\n>>> def solution(A, B, C, D):\n...     return reduce(lambda x, y: x*y, range(A, B+1)) - (reduce(lambda x, y: x*y, range(C, D+1)) if (C>=1 and D>=1) else 0)\n>>> solution(4,9,2,3)\n2\n>>> solution(1,1,1,1)\n0\n>>> solution(10, 5, 1, 1)\n1\n>>> solution(100, 500, 10, 1)\n459060\n>>> solution(10, 500, 10, 1)\n459060\n>>> solution(100, 500, 10, 1)\n459060\n>>> solution(10, 100, 10, 1)\n459060\n>>> solution(100, 100, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(10, 50, 10, 1)\n459060\n>>> solution(",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 9 2 3\") == 2\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('2 3 4') == 2\nassert solution('3 4 6') == 1\nassert solution('6 8 3 4') == 1\n'''\nfrom sys import stdin\n\nA, B, C, D = map(int, stdin.readline().split())\n\nprint((B-A+1) - ((C+1)//2) - ((D+1)//2))\n",
        "num_ids_2": 18,
        "num_ids_4": 39
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nprint(\"all tests passed.\")\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('123456789') == 'Yes'\n\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('123456789') == \"Yes\"\nprint(solution('123456789'))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"12345678\") == \"No\"\nassert solution(\"1234\") == \"No\"\nassert solution(\"1234a\") == \"No\"\nassert solution(\"1234b\") == \"No\"\n",
        "num_ids_2": 25,
        "num_ids_4": 48
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('123456789') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('123456789') == 'Yes'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"11111111111\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"3\"\nassert solution(\"12\") == \"4\"\nassert solution(\"9\") == \"3\"\nassert solution(\"128\") == \"10\"\nassert solution(\"5\") == \"2\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('127') == '4'\n\"\"\"\n\nimport sys\nimport itertools\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\"\n\n\"\"\"\n-----Implementation of Binary Search Algorithm-----\nUse binary search to find the minimum number of operations required to withdraw exactly N yen.\n\n-----Complexity-----\nTime: O(log(n))\nSpace: O(1)\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\"\n\nN = input()\nN = int(N)\n\ncount = 1\nlimit = 1\nwhile N > limit:\n    N -= limit\n    count += 1\n    limit *= 6\n\nprint(count)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"127\") == \"4\"\n\nprint(solution(\"127\"))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '127'\n) == '4'\n\"\"\"\n\nimport math",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"127\") == \"4\"\nassert solution(\"6\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == '3'\nassert solution('1') == '0'\nassert solution('100') == '6'\nassert solution('20') == '2'\nassert solution('50') == '5'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('127\\n') == '4'\nassert solution('11\\n') == '0'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\nnum_list = [0]\n\nfor i in range(1, N+1):\n    num_list.append(int(i))",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('127\\n') == '4'\n\"\"\"\n\nimport math\n\nN = input()\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('kyoto') == 'tokyo'\nassert solution('tokyo') == 'kyoto'\n\n---\n>>> for i in range(len(s)):\n...     s = s[-1] + s[:-1]\n... \n>>> for i in range(len(t)):\n...     t = t[-1] + t[:-1]\n... \n>>> s == t\nTrue\n\n---\n>>> \n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('horse') == 'ose'\nassert solution('world') == 'rld'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_0) == test_0_result\nassert solution(test_1) == test_1_result\n\"\"\"\n\n\ntest_0 = 'kyoto'\ntest_0_result = 'tokyo'\n\ntest_1 = 'tokyo'\ntest_1_result = 'kyoto'",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"hello\") == \"olleh\"\nassert solution(\"world\") == \"dlrow\"\nassert solution(\"\") == \"\"\nassert solution(\"1234\") == \"4321\"\nassert solution(\"2134\") == \"1243\"\n",
        "num_ids_2": 23,
        "num_ids_4": 42
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"kyoto\") == \"tokyo\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"kyoto\") == \"tokyo\"\nassert solution(\"tokyo\") == \"kyoto\"\nassert solution(\"a\") == \"a\"\nassert solution(\"aaa\") == \"aaa\"\nassert solution(\"kyoto\") == \"tokyo\"\n",
        "num_ids_2": 26,
        "num_ids_4": 46
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Hello\") == \"elloH\"\nassert solution(\"Python\") == \"Ponytho\"\n\"\"\"\n\nS = input()\nT = input()",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"kyoto\") == \"tokyo\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"kyoto\") == \"tokyo\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"cabacc\") == 1\nassert solution(\"abc\") == 0\n\"\"\"\n\nS = input()\nT = input()\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"cabacc\") == 1\n\"\"\"\n\nS, T = input().split()\ni = 0\nmin_changes = len(S)\nwhile i < len(T):\n    if T[i]!= S[i]:\n        min_changes -= 1\n    i += 1\nprint(min_changes)",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"cabacc\") == 1\nprint(\"Test 1\")\nassert solution(\"abc\") == 0\nprint(\"Test 2\")\n\"\"\"\n\nimport sys\n\ns = sys.stdin.readline().strip()\nt = sys.stdin.readline().strip()\n\ncount = 0\nfor i in range(len(s)):\n    if s[i]!= t[i]:\n        count += 1\n\nprint(count)\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abcde') == 0\nassert solution('abcdef') == 1\nassert solution('cde') == 1\nassert solution('abcdea') == 2\nassert solution('abcdee') == 2\n",
        "num_ids_2": 18,
        "num_ids_4": 37
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cabacc\") == 1\nassert solution(\"abc\") == 0\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(a) == b\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('cabacc') == '1'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('cabacc') == 1",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('cabacc') == 1\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"cabacc\") == 1\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 12 2') == '2'\n\"\"\"\n\nfrom typing import List\n\nfrom binarysearch import solution\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 1') == '1'\nassert solution('4 6 10') == '4'\nassert solution('8 12 2') == '2'\nassert solution('7 8 3') == '7'\nassert solution('15 32 4') == '15'\n\"\"\"\n\nimport heapq\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 12 2\\n') == '2'\n\"\"\"\n\na, b, k = map(int, input().split())",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 12 2\\n\") == \"2\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == '1'\nassert solution('1 2 3') == '3'\nassert solution('2 4 6') == '4'\nassert solution('9 27 4') == '9'\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 12 2\\n\") == \"2\"\n\n------",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 12 2\") == \"2\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 12 2\") == \"2\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 12 2\") == \"2\"\nprint(\"Test passed\")",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 12 2\") == \"2\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20\") == \"2020\"\n\"\"\"\n\nx = int(stdin.readline().strip())\n\nmax_happiness = 0",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000') == '1000'\nassert solution('1010') == '1100'\nassert solution('10005') == '11010'\nassert solution('100000000') == '100000000'\nassert solution('0') == '0'\n",
        "num_ids_2": 21,
        "num_ids_4": 45
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1024\") == \"2020\"\nprint(solution(\"1024\"))\n\"\"\"\n\nX = int(stdin.readline())",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1024') == '2020'",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1024\") == \"2020\"\n\n\"\"\"\n\nimport math\nimport sys\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1024') == '2020'",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == '20'\nassert solution('100') == '200'\nassert solution('1000') == '2000'\nassert solution('10000') == '20000'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\"\n\nimport math",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\n\"\"\"\nimport sys",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"2\\n\"\n\"1 4\"\n) == \"5\"\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2\n1 4\n''') == '5'\n\n\"\"\"\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2\n1 4''') == '5'\n\"\"\"\nimport math\nn = int(input())\nx = list(map(int, input().split()))\nx.sort()",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 4') == '5'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\nprint(solution(input()))",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1') == '4'\nassert solution('3 2 3') == '6'\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1\\n4') == 5\n\"\"\"\n\nfrom math import sqrt",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 4') == '5'\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\nprint('Test passed')\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"2\"\nassert solution(\"5\\n3 9 1 4 8\") == \"6\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 10') == 3\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 10\n''') == '3'",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 10''') == '3'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10\") == \"3\"\nprint(solution(\"4 10\"))\n\"\"\"\n\na, b = map(int, stdin.split())\nprint(b//a)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 10') == '3'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10\") == \"3\"\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\">4 2\") == 2\nassert solution(\"2 2\") == 1\n\"\"\"\n\na, b = [int(n) for n in stdin.split()]\nprint(a + b - 1)\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10\") == \"3\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 10\\n') == '3'\n\"\"\"\n\na, b = [int(x) for x in stdin.split(' ')]\nprint(int((b-1)/a) + 1)\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 10\") == 3\nassert solution(\"2 10\") == 1\nassert solution(\"6 6\") == 0\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 27
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"CSS\") == \"2\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('CSS') == '2'\nassert solution('CSR') == '0'\n\"\"\"\n\nimport sys",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('CSS') == '2'\nassert solution('CSR') == '2'\nassert solution('RSS') == '0'\nassert solution('CCS') == '3'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"CSR\") == 2\n\"\"\"\n\ns = stdin.readline()\nt = stdin.readline()\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('CSS') == '2'\nassert solution('CSR') == '2'\n\n---",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''CSS\nCSR''') == '2'",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    'CSS'\n) == 2\nassert solution(\n    'CSR'\n) == 0\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"CSS\") == 2\nassert solution(\"CSR\") == 0\nassert solution(\"RRR\") == 3\nassert solution(\"CCS\") == 1\nassert solution(\"SSS\") == 3\n",
        "num_ids_2": 17,
        "num_ids_4": 35
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('CSS') == 2\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"CSS\\n\"\n    \"CSR\"\n) == \"2\"\n\n-------\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open('./sample/input.txt')) == 2\nassert solution(open('./sample/sample.txt')) == 1\nassert solution(open('./sample/sample2.txt')) == 2\n",
        "num_ids_2": 34,
        "num_ids_4": 52
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 3 5 4 2') == '2'",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3 5 4\") == \"2\"\nassert solution(\"4\\n1 1 3 5\") == \"0\"\nassert solution(\"2\\n3 5 7 8\") == \"0\"\n\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == \"2\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 1 3 5 4 2') == '2'\n\nprint(solution(stdin))\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 1 2 4') == '2'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == 2\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n 1 3 5 2\") == \"2\"\n\"\"\"\n\nn = int(stdin.readline())\narr = list(map(int, stdin.readline().split()))\n\nmin_num = min(arr)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 5 4 2\") == \"2\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"5.480\"\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\") == \"6.720\"\n\"\"\"\n",
        "num_ids_2": 140,
        "num_ids_4": 287
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == '5.410'\n\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == '5.620'\n\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == '5.480'\n\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == '6.040'\n\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == '6.720'\n\n\"\"\"\n",
        "num_ids_2": 140,
        "num_ids_4": 271
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"6.040\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.720\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.720\"\n",
        "num_ids_2": 140,
        "num_ids_4": 271
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == '5.410'\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == '5.620'\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == '6.040'\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == '6.720'\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == '6.720'",
        "num_ids_2": 140,
        "num_ids_4": 271
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('2.06') == '5.41'\nassert solution('2.14 2.06') == '5.41'\nassert solution('2.16 1.46') == '5.62'\nassert solution('2.14 0.70') == '5.41'\n",
        "num_ids_2": 22,
        "num_ids_4": 56
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\n\"\"\"\n",
        "num_ids_2": 87,
        "num_ids_4": 87
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"5.480\"\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\") == \"6.720\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.040\"\n",
        "num_ids_2": 140,
        "num_ids_4": 287
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\n-2.14 2.06\n-1.14 2.04\n-2.16 1.46\n-2.14 0.70\n-1.42 0.40\n-0.94 -0.48\n-1.42 -1.28\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\n2.26 1.44\n2.28 0.64\n2.30 -0.30\n1.58 0.66\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\n6.98 2.06\n6.40 1.12\n5.98 0.24\n5.54 -0.60\n7.16 0.30\n7.82 1.24\n8.34 0.24\n8.74 -0.76\") == \"5.480\"\nassert solution(\"5\n10.44 2.06\n10.90 0.80\n11.48 -0.48\n12.06 0.76\n12.54 2.06\") == \"6.040\"\nassert solution(\"8\n16.94 2.42\n15.72 2.38\n14.82 1.58\n14.88 0.50\n15.76 -0.16\n16.86 -0.20\n17.00 0.88\n16.40 0.92\") == \"6.040\"\n",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\\n') == '5.410'\nassert solution('5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\\n') == '5.620'\nassert solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\\n') == '5.480'\nassert solution('5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\\n') == '6.040'\nassert solution('8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\\n') == '6.720'\n\nsolution(\"\"\"\n4\n3.78 1.22\n5.66 3.66\n5.22 2.93\n5.67 4.39\n5.66 2.28\n\"\"\") == '3.04'\n\nsolution(\"\"\"\n6\n8.95 1.36\n9.36 1.03\n8.17 0.79\n8.17 0.36\n8.28 0.79\n8.35 0.94\n8.39 0.35\n\"\"\") == '5.10'\n\nsolution(\"\"\"\n3\n0.64 1.08\n1.39 1.07\n1.28 0.24\n\"\"\") == '0.76'\n\nsolution(\"\"\"\n5\n5.68 3.00\n6.06 2.30\n5.53 1.36\n5.87 1.54\n5.53 1.36\n\"\"\") == '6.53'\n\nsolution(\"\"\"\n8\n9.19 2.15\n9.08 2.35\n9.25 2.45\n9.15 2.45\n9.27 2.46\n9.45 3.02\n9.23 3.06\n9.23 3.06\n\"\"\") == '6.28'\n\nsolution(\"\"\"\n7\n9.02 2.43\n8.39 1.53\n8.26 2.54\n8.39 1.53\n9.03 2.32\n8.70 1.12\n9.08 2.46\n9.03 2.32\n\"\"\") == '6.53'\n\nsolution(\"\"\"\n6\n9.50 2.51\n9.90 2.58\n9.50 2.51\n9.80 2.58\n9.60 2.51\n9.70 2.40\n9.70 2.40\n\"\"\") == '6.04'\n\nsolution(\"\"\"\n5\n9.27 1.13\n9.34 1.06\n8.84 0.75\n8.82 0.75\n8.86 0.66\n\"\"\") == '5.80'\n\nsolution(\"\"\"\n7\n8.32 0.48\n8.26 1.34\n8.32 0.48\n8.30 0.33\n8.44 1.24\n8.34 0.48\n8.37 0.48\n\"\"\") == '6.08'\n\nsolution(\"\"\"\n8\n8.10 1.07\n8.01 2.28\n8.44 2.71\n8.84 2.71\n8.44 2.71\n8.08 1.07\n8.66 2.21\n8.58 2.21\n\"\"\") == '6.54'\n\nsolution(\"\"\"\n5\n9.20 2.38\n8.78 2.29\n9.44 2.43\n9.26 2.43\n8.97 2.19\n\"\"\") == '6.48'\n\nsolution(\"\"\"\n8\n8.74 2.76\n8.88 2.76\n9.10 2.76\n9.39 2.76\n8.20 2.76\n8.20 2.76\n8.55 2.76\n8.40 2.76\n\"\"\") == '6.64'\n\nsolution(\"\"\"\n8\n8.34 2.76\n8.39 2.76\n8.74 2.76\n8.67 2.76\n8.44 2.76\n8.44 2.76\n8.44 2.76\n8.84 2.76\n\"\"\") == '6.64'\n\nsolution(\"\"\"\n8\n8.70 2.76\n8.23 2.76\n8.76 2.76\n8.46 2.76\n8.81 2.76\n8.11 2.76\n8.11 2.76\n8.11 2.76\n\"\"\") == '6.64'\n\nsolution(\"\"\"\n6\n9.09 2.76\n8.96 2.76\n9.53 2.76\n9.58 2.76\n9.44 2.76\n9.44 2.76\n\"\"\") == '6.64'\n\nsolution(\"\"\"\n6\n9.19 2.76\n8.96 2.76\n9.53 2.76\n9.58 2.76\n9.44 2.76\n9.44 2.76\n\"\"\") == '6.64'\n\nsolution(\"\"\"\n6\n9.75 2.76\n9.24 2.76\n9.46 2.76\n9.55 2.76\n9.43 2.76\n9.43 2.76\n\"\"\") == '6.64'\n\nsolution(\"\"\"\n6\n8.60 2.76\n9.09 2.76\n9.53 2.76\n9.58 2.76\n9.44 2.76\n9.44 2.76\n\"\"\") == '6.64'\n\nsolution(\"\"\"\n4\n9.22 2.76\n9.23 2.76\n9.64 2.76\n9.67 2.76\n\"\"\")",
        "num_ids_2": 144,
        "num_ids_4": 279
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n'\n'-2.14 2.06\\n'\n'-1.14 2.04\\n'\n'-2.16 1.46\\n'\n'-2.14 0.70\\n'\n'-1.42 0.40\\n'\n'-0.94 -0.48\\n'\n'-1.42 -1.28\\n'\n'-2.16 -1.62\\n') == '5.410'\nassert solution('5\\n'\n'2.26 1.44\\n'\n'2.28 0.64\\n'\n'2.30 -0.30\\n'\n'1.58 0.66\\n'\n'3.24 0.66\\n') == '5.620'\nassert solution('8\\n'\n'6.98 2.06\\n'\n'6.40 1.12\\n'\n'5.98 0.24\\n'\n'5.54 -0.60\\n'\n'7.16 0.30\\n'\n'7.82 1.24\\n'\n'8.34 0.24\\n'\n'8.74 -0.76\\n') == '5.480'\nassert solution('8\\n'\n'16.94 2.42\\n'\n'15.72 2.38\\n'\n'14.82 1.58\\n'\n'14.88 0.50\\n'\n'15.76 -0.16\\n'\n'16.86 -0.20\\n'\n'17.00 0.88\\n'\n'16.40 0.92\\n') == '6.040'\nassert solution('7\\n'\n'20.62 3.00\\n'\n'21.06 2.28\\n'\n'21.56 1.36\\n'\n'21.66 0.56\\n'\n'21.64 -0.52\\n'\n'22.14 2.32\\n'\n'22.62 3.04\\n') == '6.720'\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\ndp = [0 for i in range(n + 1)]\ndp[0] = 0\n\nfor i in range(1, n + 1):\n    max_value = 0\n    for j in range(1, i + 1):\n        max_value = max(max_value, dp[i - j] + a[j - 1])\n    dp[i] = max_value\n\nprint(dp[n])\n",
        "num_ids_2": 38,
        "num_ids_4": 74
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n1 3 4 2 1 4 2') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '-1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"2\"\n",
        "num_ids_2": 38,
        "num_ids_4": 74
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\"\"\"\n\nimport sys\nfrom typing import List\n\nsys.setrecursionlimit(10 ** 7)\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == '4'\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\") == '-1'\nassert solution(\"5 26\\n5 5 5 5 5\") == '-1'\nassert solution(\"5 16\\n5 5 5 5 5\") == '2'\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8\") == \"4\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 15\") == \"1\"\nassert solution(\"5 26\") == \"-1\"\n\n-----",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(int(input()))\n\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == '4'\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\") == '1'\nassert solution(\"5 26\\n5 5 5 5 5\") == '-1'\n\nprint(solution(stdin))\n\n\"\"\"\nfrom typing import List\nimport itertools",
        "num_ids_2": 38,
        "num_ids_4": 75
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 3\\n1 2 3 2 4 3 1') == '1 2 3'\nassert solution('10 4\\n1 3 1 3 10 3 7 7 12 3') == '7 3 1 3'\nassert solution('15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1') == '1 1'\n",
        "num_ids_2": 48,
        "num_ids_4": 77
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\") == \"1 1\"\n\n\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 48,
        "num_ids_4": 76
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 2 4 3 1') == '1 2 3'\nassert solution('1 3 1 3 10 3 7 7 12 3') == '7 3 1 3'\nassert solution('1 2 1 1 1 2 1 1 2 1 2 1 1 1 1') == '1 1'\n",
        "num_ids_2": 40,
        "num_ids_4": 65
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\") == \"1 1\"\n\"\"\"\n\nfrom __future__ import annotations",
        "num_ids_2": 48,
        "num_ids_4": 77
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\nassert solution(\"10 4\") == \"7 3 1 3\"\nassert solution(\"15 2\") == \"1 1\"\n",
        "num_ids_2": 27,
        "num_ids_4": 39
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"1 1\"\nassert solution(\"7 3\") == \"1 2 3\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7 3\n1 2 3 2 4 3 1''') == '1 2 3'\nassert solution('''10 4\n1 3 1 3 10 3 7 7 12 3''') == '7 3 1 3'\nassert solution('''15 2\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1''') == '1 1'\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n7 3\n1 2 3 2 4 3 1\n''') == '1 2 3'\nassert solution('''\n10 4\n1 3 1 3 10 3 7 7 12 3\n''') == '7 3 1 3'\nassert solution('''\n15 2\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\n''') == '1 1'\n",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3\\n1 2 3 2 4 3 1') == '1 2 3'\nassert solution('10 4\\n1 3 1 3 10 3 7 7 12 3') == '7 3 1 3'\nassert solution('15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1') == '1 1'\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 76
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''7 3\n1 2 3 2 4 3 1''') == '1 2 3'\nassert solution('''10 4\n1 3 1 3 10 3 7 7 12 3''') == '7 3 1 3'\nassert solution('''15 2\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1''') == '1 1'\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == '5'\nassert solution('2 4\\n1 2 3 4\\n10 3 7 3') == '0'\nassert solution('6 1\\n3\\n6\\n2\\n5\\n1\\n4') == '3'\n\"\"\"\n\nimport sys\nimport numpy as np",
        "num_ids_2": 50,
        "num_ids_4": 79
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\\n\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 50,
        "num_ids_4": 81
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\\n\") == \"3\"\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"",
        "num_ids_2": 50,
        "num_ids_4": 79
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n",
        "num_ids_2": 50,
        "num_ids_4": 79
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n",
        "num_ids_2": 50,
        "num_ids_4": 79
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\\n\") == \"3\"\n",
        "num_ids_2": 50,
        "num_ids_4": 81
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n\n\"\"\"",
        "num_ids_2": 50,
        "num_ids_4": 79
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 2\n9 9\n10 8\n5 3\n4 3''') == '5'\nassert solution('''2 4\n1 2 3 4\n10 3 7 3''') == '0'\nassert solution('''6 1\n3\n6\n2\n5\n1\n4''') == '3'\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == '5'\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == '0'\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == '3'\n\n\"\"\"\n\nimport collections\nimport functools\nimport itertools\nimport math\nimport re\nfrom typing import List\n",
        "num_ids_2": 50,
        "num_ids_4": 79
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"xxx\") == \"0\"\nassert solution(\"xxxx\") == \"0\"\nassert solution(\"xiii\") == \"1\"\nassert solution(\"xxii\") == \"1\"\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('xxxi') == '1'\nassert solution('exxxii') == '0'\n\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xxxx\") == 0\nassert solution(\"xxxxx\") == 1\nassert solution(\"xxxxxx\") == 2\nassert solution(\"xxxxxxx\") == 3\nassert solution(\"xxxxxxx\") == 1\n",
        "num_ids_2": 17,
        "num_ids_4": 35
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"exxxii\") == \"exxii\"\nassert solution(\"exxxiii\") == \"exxiii\"\nassert solution(\"xxxiix\") == \"xxix\"\nassert solution(\"xxxxix\") == \"xxix\"\nassert solution(\"xxxxxi\") == \"xxix\"\n",
        "num_ids_2": 28,
        "num_ids_4": 53
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\nprint(\"Passed\")\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 34
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('xxxiii') == '1'\nassert solution('xxoxx') == '0'\nassert solution('xxxxxxxxxx') == '8'\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 23,
        "num_ids_4": 34
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 23,
        "num_ids_4": 34
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 34
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\n\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"exxxii\") == 1\nassert solution(\"xxxxx\") == 0\nassert solution(\"xxxxxxxxxx\") == 8\n\"\"\"\n\nimport re",
        "num_ids_2": 19,
        "num_ids_4": 28
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == 48\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '48'\nassert solution('7') == '1003'\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n') == '6'\nassert solution('4\\n') == '24'\n\"\"\"\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '48'\nassert solution('8') == '512'\nassert solution('10') == '360'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == 48\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3) == 36\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n') == '28'\nassert solution('4\\n') == '12'\nassert solution('2\\n') == '3'\nassert solution('1\\n') == '1'\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"48\"\n\"\"\"\nimport sys\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n') == '48'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"48\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5') == 'unsafe'\n\"\"\"\n\na, b = map(int, input().split())",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5') == 'unsafe'\nassert solution('3 5') =='safe'\n\"\"\"\n\nS, W = map(int, input().split())",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5') == 'unsafe'\n\n---\n\n-\n-\n-\n-\n-",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\n') == 'unsafe'\n\n-----Solution-----\n\"\"\"\n\nS, W = [int(x) for x in stdin.split()]",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"unsafe\"\nassert solution(\"1 1\") == \"safe\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\nassert solution(\"4 3\") == \"safe\"\nassert solution(\"20 3\") == \"safe\"\nassert solution(\"20 5\") == \"unsafe\"\n\"\"\"\n\nS, W = input().split()\nW = int(W)\nS = int(S)",
        "num_ids_2": 23,
        "num_ids_4": 46
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5') == 'unsafe'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n'''\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5') == 'unsafe'\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\"\n\nA, B, C = input().split()\nA = int(A)\nB = int(B)\nC = int(C)",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 5\\n') == '6'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 5') == '6'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 5\") == '6'\nassert solution(\"6 7 5\") == '22'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 5') == '6'\n\n\"\"\"\nimport math\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 5') == '6'",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nprint('Hooray!')\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nprint(\"Teste 1\")\nassert solution(\"2 3 4\") == \"4\"\nprint(\"Teste 2\")\nassert solution(\"1 1 1\") == \"0\"\nprint(\"Teste 3\")\nassert solution(\"1 1 1 2\") == \"2\"\nprint(\"Teste 4\")\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 6\") == '6'\n\"\"\"\n\nimport sys\n\nprint(round(abs(int(sys.stdin.readline().rstrip()) ** 2 - int(sys.stdin.readline().rstrip()) ** 2 - int(sys.stdin.readline().rstrip()) ** 2) ** 0.5))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\n\nimport sys\nimport itertools\n\ninput = sys.stdin.readlines()\ninput_list = list()\nfor line in input:\n    line = line.rstrip('\\n')\n    input_list.append(list(map(int, line.split())))",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 11 4\") == \"4\"\nassert solution(\"3 10 5\") == \"3\"\nassert solution(\"1 1 1\") == \"1\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\n\na, b, c = list(map(int, input().split()))\ncount = 0\nwhile a >= b and a > 0:\n    a -= c\n    count += 1\nprint(count)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 11 4\\n\") == \"4\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 11 4\\n') == 4\nassert solution('1 1 1\\n') == 0\nassert solution('10 1 10\\n') == 1\nassert solution('10 10 10\\n') == 10\nassert solution('10 10 10\\n') == 10\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3\\n') == '1'\nassert solution('1 2 10\\n') == '0'\nassert solution('3 3 3\\n') == '0'\nassert solution('100 100 100\\n') == '0'\nassert solution('2 100 100\\n') == '1'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 11 4\\n') == '4'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\n\n\"\"\"\nfrom collections import Counter\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 5') == 10\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5') == '10'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5') == '10'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == expected_result, \"Not solved yet\"\nprint(solution(input()))\n\n\"\"\"\n\n\"\"\"\na = list(map(int, input().split()))\na = [i for i in a if i%2 == 0]\nprint(a)\n\"\"\"\n\"\"\"\na, b = map(int, input().split())\nb = list(map(int, input().split()))\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\"\"\"\n\n\"\"\"\na, b = map(int, input().split())\nc = input()\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\"\"\"\n\n\"\"\"\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\"\"\"\n\n\"\"\"\na, b = map(int, input().split())\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\"\"\"\n\n\"\"\"\na, b = map(int, input().split())\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\"\"\"\n\n\"\"\"\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\"\"\"\n\n\"\"\"\na, b = map(int, input().split())\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\"\"\"\n\n\"\"\"\na, b = map(int, input().split())\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\na, b = map(int, input().split())\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\"\"\"\n\n\"\"\"\na, b = map(int, input().split())\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\na, b = map(int, input().split())\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\"\"\"\n\n\"\"\"\na, b = map(int, input().split())\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\na, b = map(int, input().split())\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\"\"\"\n\n\"\"\"\na, b = map(int, input().split())\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\na, b = map(int, input().split())\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\"\"\"\n\n\"\"\"\na, b = map(int, input().split())\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\na, b = map(int, input().split())\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\"\"\"\n\n\"\"\"\na, b = map(int, input().split())\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\na, b = map(int, input().split())\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\"\"\"\n\n\"\"\"\na, b = map(int, input().split())\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\na, b = map(int, input().split())\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\"\"\"\n\n\"\"\"\na, b = map(int, input().split())\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\na, b = map(int, input().split())\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\"\"\"\n\n\"\"\"\na, b = map(int, input().split())\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\na, b = map(int, input().split())\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\"\"\"\n\n\"\"\"\na, b = map(int, input().split())\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\na, b = map(int, input().split())\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\"\"\"\n\n\"\"\"\na, b = map(int, input().split())\nprint(a*b)\n\na = int(input())\nb = list(map(int, input().split()))\nprint(a*b)\n\na = int(input())\nb = list(map(int, input",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5') == '10'\n\nassert solution('1 1') == '1'\n\nassert solution('2 100') == '200'\n\n\"\"\"\n\n\"\"\"\nfrom collections import Counter\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 5') == 10\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5\\n') == '10'\n\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 5\\n') == '10'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 5') == '10'\n'''",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 5 7''') == '10'\nprint(solution(stdin_lines))\n\n'''\n\n\uccab \uc904\uc5d0\ub294 \ub450 \uc815\uc218 A, B, T\uc774 \uc8fc\uc5b4\uc9c4\ub2e4.\nA\ub294 \uc77c\uc815 \uc2dc\uac04 \uc720\uc9c0\ud55c\ub2e4. \n\ub450 \ubc88\uc9f8 \uc904\uc5d0\ub294 \uadf8 \uc774\ud6c4 \uba87 \uac1c\uc758 \uc2dc\uac04\uc5d0 B \uac1c\uc758 \ucd08\ucf5c\ub9bf\uc744 \ub9cc\ub4e4 \uc218 \uc788\ub294\uc9c0 \ucd9c\ub825\ud55c\ub2e4.\n\ub9cc\ub4e4 \uc218 \uc788\ub294 \ucd08\ucf5c\ub9bf \uac1c\uc218\uac00 \ucd5c\ub300\uac00 \ub418\ub3c4\ub85d \ud558\ub77c\ub294 \ubb38\uc81c\uc774\ub2e4.\n\n\ud480\uc774\nA, B, T\uc744 \uc785\ub825 \ubc1b\ub294\ub2e4.\n\uc774\ud6c4 A\ub85c \uc2dc\uac04\uc744 \ub298\ub824\uac00\uba74\uc11c B\ub97c \ub9cc\ub4e0\ub2e4.\n\n\ub2e8, \ucd5c\ub300\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub294 \ucd08\ucf5c\ub9bf\uc758 \uac1c\uc218\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\n\uc785\ub825\n5 7 3\n\n\ucd9c\ub825\n5\n\n'''\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5 7\\n') == '10'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\"\n\nA, B, T = [int(n) for n in stdin.split()]",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 7') == '10'\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5 7\\n') == 10\nprint(solution(stdin.read()))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 7') == '10'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 7\") == \"10\"\nprint(solution(\"3 5 7\"))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3, 5, 7) == 10\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n1') == '3'\nassert solution('1\\n1\\n1\\n1') == '5'\nassert solution('1\\n1\\n1\\n1\\n1') == '10'\nassert solution('1\\n2\\n3\\n4\\n5') == '9'\n",
        "num_ids_2": 24,
        "num_ids_4": 65
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('500 600') == 'OK'\n\n\"\"\"\n\nK, A, B = [int(x) for x in stdin.split(' ')]",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 500 600\") == \"OK\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n500 600') == 'OK'\n\"\"\"\n\nimport math",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n500 600\\n') == 'OK'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 500') == 'NG'\nassert solution('3 499') == 'NG'\nassert solution('4 501') == 'NG'\nassert solution('5 500') == 'OK'\nassert solution('3 500') == 'NG'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n500 600\") == \"OK\"\nassert solution(\"7\\n500 601\") == \"NG\"\nassert solution(\"7\\n100 100\") == \"OK\"\nassert solution(\"7\\n100 101\") == \"NG\"\nassert solution(\"7\\n100 200\") == \"OK\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('123\\n456\\n789') == 'OK'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\n7 10') == 'NG'\nassert solution('7 13\\n100 150') == 'NG'\nassert solution('7 13\\n700 150') == 'OK'\nassert solution('7 13\\n300 100') == 'NG'\nassert solution('7 13\\n100 200') == 'NG'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('500 600\\n') == \"OK\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''8 3\n''') == '2.6666666667'\nassert solution('''8 3\n''') == '2.6666666667'\n\n-----Test Case-----\nTest 1\n\n-----Correctness-----\nExample of input and output:\n\nTest 1\n>>> 3 3\n2.0\n>>> 2 2\n1.0\n>>> 4 4\n2.0\n>>> 3 3\n1.0\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 3\\n\") == \"2.6666666667\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 3') == '2.6666666667'\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 2\") == \"0.5\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"8 3\") == \"2.6666...\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 3\\n') == '2.6666666667'\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3\") == \"2.6666...\"\n\"\"\"\nT, X = map(float, input().split())\nprint(\"{:.3f}\".format(T / X))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3\\n') == '2.6666666667'\n\n---",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a) == b\n\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n') == '4.333333333'\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3\\n') == '2.6666666667'\n\"\"\"\n\nfrom collections import deque\n\nt, x = map(int, input().split())\n\nqueue = deque([t, x])\n\ncount = 0\nwhile queue:\n    q = queue.popleft()\n    if q > 0:\n        count += 1\n        queue.append(q - 1)\n\nprint(count)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2 5') == '1'\nassert solution('8 5 2') == '0'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 5') == '1'\nassert solution('5 4 3') == '0'\nassert solution('5 5 5') == '0'\nassert solution('1 2 3') == '0'\nassert solution('4 5 6') == '1'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 4 3\") == \"1\"\nassert solution(\"5 4 3\") == \"1\"\nassert solution(\"5 5 5\") == \"0\"\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"6 4 3\"\n) == \"1\"\nassert solution(\n    \"1 1 1\"\n) == \"0\"\nassert solution(\n    \"3 2 3\"\n) == \"0\"\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n\nA, B, C = [int(x) for x in stdin.split()]",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''6 4 3''') == '1'\nassert solution('''1 2 3''') == '0'\n\"\"\"\nimport sys\n\nA = int(sys.stdin.readline().strip())\nB = int(sys.stdin.readline().strip())\nC = int(sys.stdin.readline().strip())",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 4 3\") == 1\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"6 4 3\"\n) == \"1\"\n\"\"\"\n\nA, B, C = map(int, stdin.split())",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3 2\") == \"3\"\n\"\"\"\nfrom itertools import permutations\n\nn = int(input())\np_list = list(map(int, input().split()))\nq_list = list(map(int, input().split()))\n\np_list_perms = list(permutations(p_list, n))\nq_list_perms = list(permutations(q_list, n))\n\nmin_diff = len(p_list_perms) + len(q_list_perms)\n\nfor i in range(len(p_list_perms)):\n    for j in range(len(q_list_perms)):\n        if p_list_perms[i] < q_list_perms[j]:\n            min_diff = min(min_diff, i - j)\n\nprint(min_diff)",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 3 2') == '3'\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 3 2\") == \"3\"\nassert solution(\"3\\n3 1 2\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\n\"\"\"\n\nfrom itertools import permutations\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 2\") == \"3\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 3 2\n3 1 2\n''') == '3'\n\nassert solution('''\n2\n1 2\n2 1\n''') == '1'\n\nassert solution('''\n2\n2 1\n1 2\n''') == '0'\n\nassert solution('''\n3\n2 1\n3 1\n''') == '1'\n\nassert solution('''\n3\n3 2 1\n1 2 3\n''') == '2'",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 3 2') == '3'\nassert solution('3\\n3 1 2') == '0'\nassert solution('3\\n1 3 3') == '2'\n\"\"\"\n\nimport unittest\n",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 3 2\") == \"3\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\n\"\"\"\nfrom typing import List, Set, Dict\nfrom operator import lt, le, ge, gt\nfrom itertools import permutations\n\n\"\"\"\nDetermine if a sequence X is lexicographically smaller than Y if and only if there exists an integer k such that X_i = Y_i~(1 \\leq i < k) and X_k < Y_k.\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 3 2\\n2 3 1\") == '3'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\"\n\n\nimport unittest\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ATCODER\") == 3\nprint(solution(\"ATCODER\"))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\"\nimport sys\n\nassert sys.version_info >= (3, 7)\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ACGT\") == 4\nassert solution(\"TTACG\") == 3\nassert solution(\"AACAA\") == 3\n\n\"\"\"\n\nimport re\nimport sys",
        "num_ids_2": 19,
        "num_ids_4": 29
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ACG\") == \"A\"\nassert solution(\"ATCODER\") == \"ATC\"\nassert solution(\"ATC\") == \"ATC\"\nassert solution(\"ATCOD\") == \"ATC\"\nassert solution(\"ATCODER\") == \"ATC\"\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ATCODER') == 'ATC'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11\") == \"9\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n11') == '9'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == 9\n\"\"\"\n\nimport unittest\n\n\nclass Solution:\n    def solution(self, n: str) -> str:\n        n = int(n)\n        odd = 0\n        for i in range(1, n + 1):\n            if len(str(i)) % 2 == 1:\n                odd += 1\n        return odd\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution()\n\n    def test_solution(self) -> None:\n        self.assertEqual(self.solution('11'), 9)\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11') == '9'\nassert solution('5') == '1'\nassert solution('10') == '0'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\") == \"9\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"6\"\nassert solution(\"6\") == \"5\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11') == '9'\nprint('Test passed')\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\") == \"9\"\nprint(solution(\"11\"))",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(11) == 9\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11') == '9'\n\"\"\"\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\") == \"9\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nimport sys",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('a') == 1\nassert solution('aab') == 2\nassert solution('abcdefg') == 3\nassert solution('ab') == 0\nassert solution('abcd') == 2\n\n-----\nThe idea is very simple, we need to find the longest prefix shared by both strings and then we calculate the number of insertion and deletion to reach to the prefix. We keep incrementing both count of insertion and deletion untill both count are equal.\n\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 35
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"cupofcoffee\") == \"hottea\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cupofcoffee\") == 4\nassert solution(\"cupofhottea\") == 4\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('cupofcoffee') == '4'\nassert solution('cupofhottea') == '0'\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('cupofcoffee') == 4\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\nassert solution(\"pikachu\") == \"xkcdpwu\"\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"cupofcoffee\") == \"hottea\"\nassert solution(\"cupofhottea\") == \"coffee\"\nassert solution(\"cuphottea\") == \"cophottea\"\nassert solution(\"cuuphottea\") == \"cuphottea\"\n\nprint(\"Success\")\n\n\"\"\"\n\nfrom typing import Counter\n",
        "num_ids_2": 30,
        "num_ids_4": 63
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 7\\n\") == \"5 6 7 8 9\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 7\\n') == '5 6 7 8 9'\n\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\nprint(\"PASSED\")\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 7') == '5 6 7 8 9'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\n\"\"\"\n\n\"\"\"\nYou are given an array of n integers, a1, a2,..., an.\nA subsequence slice (i, j) is called arithmetic if the sequence:\n ai, ai + 1,..., aj is arithmetic.\n\nReturn the number of arithmetic slices in the array.\n\n-----\n\nint[] A = {1, 3, 5};\n\nThe three arithmetic slices are:\n - (0, 1): 1 + 3 = 4\n - (1, 2): 3 + 5 = 8\n - (2, 3): 5 + 1 = 6\n\nThe solution is 3.\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\nassert solution(\"3 8\") == \"6 7 8 9\"\nassert solution(\"1 2\") == \"1 2\"\nassert solution(\"2 1\") == \"2 1\"\nassert solution(\"3 6\") == \"3 6 7 8 9\"\n",
        "num_ids_2": 29,
        "num_ids_4": 53
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('25') == 'No'\nassert solution('30') == 'Yes'\n\nimport sys\n\nfrom typing import Dict, List\n\nlines: List[str] = sys.stdin.readlines()\nx: int = int(lines[0])",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"30\") == \"Yes\"\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('25') == 'No'",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"25\") == \"No\"\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"25\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''25''') == 'No'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('25') == 'No'\nassert solution('30') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"25\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == 'Yes'\nassert solution('23') == 'No'\nassert solution('-3') == 'No'\nassert solution('20') == 'Yes'\nassert solution('0') == 'No'\n\n'''",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"30\") == \"Yes\"\nassert solution(\"15\") == \"No\"\nassert solution(\"24\") == \"No\"\nassert solution(\"1\") == \"Yes\"\nassert solution(\"-5\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"3 2\n1 2\n5 5\n-2 8\n\"\"\"\n) == \"1\"\n\"\"\"\nimport math\nimport numpy as np",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == '1'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 2\n1 2\n5 5\n-2 8''') == '1'\n\n\"\"\"\n\nfrom sys import stdin\n\nstdin = stdin.read().splitlines()\nN, D = list(map(int, stdin[0].split(' ')))\npoints = [tuple(map(int, stdin[1 + i].split(' '))) for i in range(N)]\nprint(sum(1 for i in range(N) for j in range(i + 1, N) if sum((points[i][k] - points[j][k]) ** 2 for k in range(D)) ** 0.5 % 1 == 0))\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\"\"\"\n\nn, d = map(int, input().split())\npoints = [list(map(int, input().split())) for _ in range(n)]\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1\\n'\n\"\"\"\n\n\nimport math",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n1 1\\n5 5\\n-2 8') == '1'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\"\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 2\\n5 5\\n-2 8\") == \"1\"\n\"\"\"\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\"\n\"\"\"\n\nfrom math import sqrt\n\nnumber_of_points, max_dimension = [int(i) for i in stdin.split()]\n\npoints_array = []\nfor i in range(number_of_points):\n    points_array.append([int(i) for i in stdin.split()])\n\npoints_array.sort(key=lambda x: x[0])\n\ncount = 0\n\nfor i in range(number_of_points):\n    for j in range(i + 1, number_of_points):\n        if all(int(sqrt(abs(i - j) ** 2 + abs(points_array[i][d] - points_array[j][d]) ** 2)) == 0 for d in range(1, max_dimension)):\n            count += 1\n\nprint(count)\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1234\") == \"Good\"\nassert solution(\"1112\") == \"Bad\"\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3776\") == 'Bad'\nassert solution(\"1234\") == 'Good'\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1113') == 'Bad'\nassert solution('3776') == 'Bad'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"4556\") == \"Good\"\n\nprint(\"All tests passed.\")\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1234') == \"Good\"\nassert solution('2222') == \"Bad\"\nassert solution('1237') == \"Bad\"\n\n-----",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3776') == \"Good\"\nassert solution('1234') == \"Bad\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1234') == \"Bad\"\nassert solution('2222') == \"Bad\"\nassert solution('2333') == \"Good\"\nassert solution('4444') == \"Bad\"\nassert solution('2111') == \"Bad\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3776') == 'Bad'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1234\") == \"Good\"\nassert solution(\"2341\") == \"Bad\"\nassert solution(\"12ddd\") == \"Bad\"\nassert solution(\"12d4\") == \"Bad\"\nassert solution(\"12dd\") == \"Bad\"\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n'''2\n3 4'''\n) == '3.5'\nassert solution(\n'''2\n3 5'''\n) == '4.0'\nassert solution(\n'''2\n7 3'''\n) == '5.5'\nassert solution(\n'''2\n4 1'''\n) == '4.5'\nassert solution(\n'''2\n100 99'''\n) == '99.5'\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4') == '3.5'\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n') == '3.5'\n\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n\") == '2.5'\nassert solution(\"3 4\\n\") == '3.5'\n\"\"\"\n\n\"\"\"\n---SOLUTION---\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == \"3.5\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3') == '3.5'\n\"\"\"\n\nN = int(input())\npots = list(map(float, input().split()))",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n2\n3 4\n''') == '3.5'\n\nassert solution('''\n2\n3 4\n''') == '3.5'\n\nassert solution('''\n2\n3 4\n''') == '3.5'\n\nassert solution('''\n1\n100\n''') == '100'\n\nassert solution('''\n3\n1 2 3\n''') == '2.5'",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4') == '3.5'\n\"\"\"\n\n\"\"\"\nLet N be number of ingredients and P be number of times we put ingredients in pot.\nYou can always put P ingredients in pot, so you will have to choose between P and P-1 elements in a vector.\nNow what will be the values of vector after you put P-1 times in pot?\nLet's say that you put (P-1) ingredients in pot.\nNow after this, you have two choices:\n1. You can add the first ingredient in the vector you had before and the first ingredient you will have after P-1 times.\n2. You can add the second ingredient in the vector you had before and the second ingredient you will have after P-1 times.\nSo you have 2(P-1) choices, so (P-1) + 2(P-1) = 2P - 2.\nSo the values of vector after (P-1) times will be:\n(P-1) - 1\n(P-1) + 1\n(P-1) - 2\n(P-1) + 2\n...\n\nNow I calculate values of vector after P-1 times using vector v:\nv = (P-1) - 1\nv = v + 1\nv = (P-1) - 2\nv = v + 2\n...\nNow I take values of vector v and add them to the values of vector after (P-1) times.\n\nSo, after P-1 times the values will be:\n(P-1) - 1 + v_1\n(P-1) - 1 + v_2\n...\n\nNow I add all values and I will have the answer.\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5\\n1 2 3 4 5') == '5.5'\nassert solution('5\\n1 2 3 4 5') == '5.5'\nassert solution('5\\n1 2 3 4 5') == '5.5'\nassert solution('5\\n1 2 3 4 5') == '5.5'\n",
        "num_ids_2": 27,
        "num_ids_4": 65
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5') == '4.5'\nassert solution('3 4') == '3.5'\n\"\"\"\nimport math\n\nN = int(input())\nv = list(map(int, input().split()))\n\nprint(math.floor(sum(v) / (2 * N - 1)))\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == \"14\"\n\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n3 1 2\\n2 5 4\\n3 6\\n\") == 14\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2\\n2 5 4\\n3 6') == '14'\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nN = int(sys.argv[1])\n\ndishes = []\nfor i in range(N):\n    dishes.append(int(sys.stdin.readline().rstrip()))\n\ntotal_satisfaction = 0\n\nfor i in range(N):\n    total_satisfaction += dishes[i]\n    if i < N - 1:\n        total_satisfaction += (dishes[i + 1] + 1) * dishes[i]\n\nprint(total_satisfaction)\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14\n\n\"\"\"\n\nN = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nsm = 0\npre = -1\nfor i in range(len(A)):\n    if pre!= A[i]:\n        sm += B[i]\n        pre = A[i]\n    else:\n        sm += B[i] + C[i]\n\nprint(sm)\n\nassert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\") == 14\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == 14\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'''3\n1 2 3\n2 5 4\n3 6\n''') == '14'\n\n-------------------------------------------------------\n\nTakahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\nThe i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\nWhen he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\nAdditionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\nFind the sum of the satisfaction points he gained.\n\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 20\n - 1 \\leq A_i \\leq N\n - A_1, A_2,..., A_N are all different.\n - 1 \\leq B_i \\leq 50\n - 1 \\leq C_i \\leq 50\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2... A_N\nB_1 B_2... B_N\nC_1 C_2... C_{N-1}\n\n-----Output-----\nPrint the sum of the satisfaction points Takahashi gained, as an integer.\n\n-----Sample Input-----\n3\n3 1 2\n2 5 4\n3 6\n\n-----Sample Output-----\n14\n\nTakahashi gained 14 satisfaction points in total, as follows:\n - First, he ate Dish 3 and gained 4 satisfaction points.\n - Next, he ate Dish 1 and gained 2 satisfaction points.\n - Lastly, he ate Dish 2 and gained 5 + 3 = 8 satisfaction points.\n\n-------------------------------------------------------\n\nTakahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\nThe i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\nWhen he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\nAdditionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\nFind the sum of the satisfaction points he gained.\n\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 20\n - 1 \\leq A_i \\leq N\n - A_1, A_2,..., A_N are all different.\n - 1 \\leq B_i \\leq 50\n - 1 \\leq C_i \\leq 50\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2... A_N\nB_1 B_2... B_N\nC_1 C_2... C_{N-1}\n\n-----Output-----\nPrint the sum of the satisfaction points Takahashi gained, as an integer.\n\n-----Sample Input-----\n3\n3 1 2\n2 5 4\n3 6\n\n-----Sample Output-----\n14\n\nTakahashi gained 14 satisfaction points in total, as follows:\n - First, he ate Dish 3 and gained 4 satisfaction points.\n - Next, he ate Dish 1 and gained 2 satisfaction points.\n - Lastly, he ate Dish 2 and gained 5 + 3 = 8 satisfaction points.\n\n-------------------------------------------------------\n\nTakahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\nThe i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\nWhen he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\nAdditionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\nFind the sum of the satisfaction points he gained.\n\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 20\n - 1 \\leq A_i \\leq N\n - A_1, A_2,..., A_N are all different.\n - 1 \\leq B_i \\leq 50\n - 1 \\leq C_i \\leq 50\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2... A_N\nB_1 B_2... B_N\nC_1 C_2... C_{N-1}\n\n-----Output-----\nPrint the sum of the satisfaction points Takahashi gained, as an integer.\n\n-----Sample Input-----\n3\n3 1 2\n2 5 4\n3 6\n\n-----Sample Output-----\n14\n\nTakahashi gained 14 satisfaction points in total, as follows:\n - First, he ate Dish 3 and gained 4 satisfaction points.\n - Next, he ate Dish 1 and gained 2 satisfaction points.\n - Lastly, he ate Dish 2 and gained 5 + 3 = 8 satisfaction points.\n\n-------------------------------------------------------\n\nTakahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\nThe i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\nWhen he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\nAdditionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\nFind the sum of the satisfaction points he gained.\n\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 20\n - 1 \\leq A_i \\leq N\n - A_1, A_2,..., A_N are all different.\n - 1 \\leq B_i \\leq 50\n - 1 \\leq C_i \\leq 50\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2... A_N\nB_1 B_2... B_N\nC_1 C_2... C_{N-1}\n\n-----Output-----\nPrint the sum of the satisfaction points Takahashi gained, as an integer.\n\n-----Sample Input-----\n3\n3 1 2\n2 5 4\n3 6\n\n-----Sample Output-----\n14\n\nTakahashi gained 14 satisfaction points in total, as follows:\n - First, he ate Dish 3 and gained 4 satisfaction points.\n - Next, he ate Dish 1 and gained 2 satisfaction points.\n - Lastly, he ate Dish 2 and gained 5 + 3 = 8 satisfaction points.\n\n-------------------------------------------------------\n\nTakah",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\") == 14\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n3 1 2\n2 5 4\n3 6''') == '14'\n\nassert solution('''2\n3 1 2\n1 2\n3''') == '7'\n\n\"\"\"\n<\u601d\u8def>\ndp[i][j] := \u7b2ci\u500b\u304c\u540c\u3058\u98df\u3079\u7269\u3068\u3057\u3066\u540c\u3058\u6570\u306b\u306a\u308b\u307e\u3067\u306b\u5fc5\u8981\u306a\u6700\u5c0f\u70b9\u6570\ni\u756a\u76ee\u98df\u3079\u3066 j-1\u756a\u76ee\u98df\u3079\u305f\u3068\u304d\u306e\u70b9\u6570\ni\u756a\u76ee\u98df\u3079\u3066 j\u756a\u76ee\u98df\u3079\u305f\u3068\u304d\u306e\u70b9\u6570\ni\u756a\u76ee\u98df\u3079\u3066 j+1\u756a\u76ee\u98df\u3079\u305f\u3068\u304d\u306e\u70b9\u6570\ndp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1]) + points[i]\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abc') == 1\nassert solution('abcd') == 0\nassert solution('abcbcd') == 1\nassert solution('abcabc') == 2\nassert solution('abcabcdede') == 3\n",
        "num_ids_2": 17,
        "num_ids_4": 36
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABABCAB') == 3\nassert solution('ABACBABC') == 4\nassert solution('CBABCBAB') == 2\nassert solution('CBABCBAA') == 2\nassert solution('CBABCBA') == 2\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nfrom typing import List\nimport sys\n\nclass Solution:\n    def __init__(self):\n        self.cache = {}\n        self.s = \"\"\n        self.count = 0\n        self.a = \"ABC\"\n        self.b = \"BABC\"\n        self.c = \"BCAB\"\n        self.m = 3\n        self.n = 3\n\n    def init(self, input: str):\n        self.s = input\n\n    def solution(self, input: str) -> str:\n        self.init(input)\n        self.count = self.search(self.a)\n        self.count += self.search(self.b)\n        self.count += self.search(self.c)\n        return str(self.count)\n\n    def search(self, pattern: str):\n        m = len(pattern)\n        n = len(self.s)\n        self.cache = {}\n        count = 0\n        \n        for i in range(n-m+1):\n            for j in range(m):\n                if self.s[i+j]!= pattern[j]:\n                    break\n                j += 1\n            if j == m:\n                self.cache[self.s[i:i+m]] = True\n                count += 1\n        \n        return count\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(TestCase01.stdin) == TestCase01.result\nassert solution(TestCase02.stdin) == TestCase02.result\nassert solution(TestCase03.stdin) == TestCase03.result\nassert solution(TestCase04.stdin) == TestCase04.result\nassert solution(TestCase05.stdin) == TestCase05.result\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nABCDE\") == \"ABC\\nCDE\"\n\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/52c2dd5e21b8d98f8a000099/train/python\n\nGiven an integer n.\n\nWithout using strings, count the number of digits in n.\n\nExample\n\nFor n = 29, the output should be\ncountDigits(n) = 2;\n\nFor n = 92, the output should be\ncountDigits(n) = 3;\n\nFor n = 234, the output should be\ncountDigits(n) = 3.\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ZABCDBABCQ') == 2\n\n---Tests---\n---Test 1---\nInput:\n10\nZABCDBABCQ\n\nOutput:\n2\n\n---Test 2---\nInput:\n3\nABCABC\n\nOutput:\n2\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1112221111\") == 4\nassert solution(\"1112221112221111\") == 8\nassert solution
        "num_ids_2": 25,
        "num_ids_4": 1855
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('ABC') == 1\nassert solution('ABBC') == 2\nassert solution('ABABC') == 2\nassert solution('AZABBABC') == 4\n",
        "num_ids_2": 16,
        "num_ids_4": 35
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ZABCDBABCQ\") == 2\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\ns = sys.stdin.readline().strip()\n\nsubseqs = 0\nfor i in range(len(s)-2):\n    if s[i:i+3] == \"ABC\":\n        subseqs += 1\n\nprint(subseqs)\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\n\"\"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == '2'\n\"\"\"\n\nimport collections\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == '2'\n\"\"\"\n\nN = int(stdin.readline())\nans = 0\n\nfor i in range(N):\n    if (stdin.readline().count('A')+stdin.readline().count('R')+stdin.readline().count('C')+stdin.readline().count('H') > 0):\n        ans += 1\n\nprint(ans)",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n\nfrom typing import Iterator\n\nfrom utils import timing\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"Yes\"\n\n\"\"\"\n\nimport sys\nimport re",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n3 3\\n1 2\\n4 1') == 'No'\nassert solution('2 2\\n1 1') == 'Yes'\nassert solution('2 2\\n1 2') == 'Yes'\n\n---Sample Output---\nYes\n---SOLUTIONS---\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 53
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n0\\n1\\n0') == 'Yes'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3') == 'Yes'\nassert solution('1 1') == 'No'\n\"\"\"\n\nimport sys\n\nn, m = [int(x) for x in input().split(' ')]\n\npassed = 0\nfor _ in range(n):\n    i = int(sys.stdin.readline())\n    if i >= m:\n        passed += 1",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\n\"\"\"\n\n\nimport math",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 2\\n2 3\\n3 1') == 'Yes'\n\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"Yes\"\n\nimport numpy as np\nimport pandas as pd\nimport re\n\ntest_cases = pd.read_csv(\n    \"data/aoc_2020_07_input.txt\",\n    header=None,\n    delimiter=\"\\n\",\n    names=[\"test_case\"],\n    dtype={\"test_case\": str},\n)\n\nfor test_case, _ in test_cases.iterrows():\n    pass\n\ntest_case = test_cases.loc[0].values[0]",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\") == \"Yes\"\n\n\"\"\"\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"1 1\") == \"No\"\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"Yes\"\n\"\"\"\n\nimport sys\n\nN, M = list(map(int, sys.stdin.readline().strip().split()))\n\nfor i in range(M):\n    if sys.stdin.readline().strip() == \"Yes\":\n        print(\"Yes\")\n        break\nelse:\n    print(\"No\")\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"sipuu\") == \"No\"\nassert solution(\"sipppuu\") == \"Yes\"\nassert solution(\"sipppuuuu\") == \"No\"\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 51
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"sippuu\") == 'Yes'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\n\"\"\"\n\nimport unittest\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('sippuu') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('sippud') == 'No'\nassert solution('siabc') == 'Yes'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 35
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('sippuu') == 'Yes'",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('sippuuuu') == 'No'\nassert solution('siupuu') == 'No'\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 37
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"sippuuuu\") == \"No\"\nassert solution(\"xxyxx\") == \"Yes\"\nassert solution(\"xxxxx\") == \"No\"\nassert solution(\"sippyuu\") == \"Yes\"\n",
        "num_ids_2": 25,
        "num_ids_4": 48
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('sipppuu') == 'No'\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"3 70\\n7 60\\n1 80\\n4 50\"\n) == \"4\"\n\n\"\"\"\nimport math",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\\n\") == \"4\"\nassert solution(\"1 100\\n\") == \"TLE\"\n\"\"\"\n\n\"\"\"\n-----Solution-----\nThis problem is pretty straight forward:\n\n- We have n = 3\n- There are 3 routes to take, i.e. (c_1, t_1), (c_2, t_2), (c_3, t_3)\n- We want to find the minimum cost of one of these routes that does not take longer than t = 100\n- We can solve this in O(n) time, since there are n routes to take\n- We can solve this in O(n) space, since we're only using a single variable to keep track of the minimum\n\nWhat I did here is to set up three variables to keep track of the minimum cost of the three routes\n- cost(0) = cost(1) = cost(2) = float('inf')\n- route(0) = route(1) = route(2) = 0\n- Because we want to take the minimum cost route, we start from the beginning\n- We also want to keep track of the time, t, and use that to compare the current time we're at\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50\\n') == '4'\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('7 7') == '7'\nassert solution('1 1') == 'TLE'\n\"\"\"\n\nimport sys",
        "num_ids_2": 19,
        "num_ids_4": 31
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50') == '4'\n\"\"\"\n\nimport sys",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 60\\n1 80\\n4 50\\n') == '4'\nassert solution('3 70\\n7 60\\n1 80\\n4 50\\n') == 'TLE'\nassert solution('3 10\\n7 5\\n1 11\\n4 9\\n') == 'TLE'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 47,
        "num_ids_4": 73
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\\n\") == \"4\"\nprint(\"Success\")\n\n---------------------------------------OUTPUT---------------------------------------\nSuccess\n\n---------------------------------------Explanation---------------------------------------\nThe first route gets him home at cost 7.\nThe second route takes longer than time T = 70.\nThe third route gets him home at cost 4.\nThus, the cost 4 of the third route is the minimum.\n\n\n\"\"\"\n\nimport sys\n\nN, T = map(int, sys.stdin.readline().split())\nroutes = []\nfor i in range(N):\n    routes.append(list(map(int, sys.stdin.readline().split())))\nroutes.sort(key = lambda x: x[1])\nj = 0\nans = 0\nfor i in range(N):\n    if routes[i][1] <= T:\n        ans += routes[i][0]\n        T -= routes[i][1]\n    else:\n        j = i\n        break\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\\n\") == \"4\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 60\\n1 80\\n4 50\") == '4'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50') == '4'\n\"\"\"\nimport sys\nfrom functools import reduce\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2 9\\n') == '8'\n\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 9\\n') == '8'\nprint('Teste 2.1: ', solution('4 2 9\\n') == '8')\nprint('Teste 2.2: ', solution('1 1 1\\n') == '1')\nprint('Teste 2.3: ', solution('2 0 2\\n') == '0')\nprint('Teste 2.4: ', solution('5 5 5\\n') == '0')\nprint('Teste 2.5: ', solution('20 20 20\\n') == '0')\nprint('Teste 2.6: ', solution('10 10 10\\n') == '10')\nprint('Teste 2.7: ', solution('9 10 9\\n') == '10')\nprint('Teste 2.8: ', solution('20 20 20\\n') == '0')\nprint('Teste 2.9: ', solution('5 5 0\\n') == '0')\nprint('Teste 2.10: ', solution('10 10 10\\n') == '10')\nprint('Teste 2.11: ', solution('15 10 15\\n') == '15')\nprint('Teste 2.12: ', solution('20 20 20\\n') == '20')\nprint('Teste 2.13: ', solution('10 20 10\\n') == '10')\nprint('Teste 2.14: ', solution('15 20 15\\n') == '15')\nprint('Teste 2.15: ', solution('20 10 15\\n') == '15')\nprint('Teste 2.16: ', solution('10 10 10\\n') == '10')\nprint('Teste 2.17: ', solution('15 10 15\\n') == '15')\nprint('Teste 2.18: ', solution('15 20 15\\n') == '15')\nprint('Teste 2.19: ', solution('15 20 15\\n') == '15')\nprint('Teste 2.20: ', solution('15 20 15\\n') == '15')\nprint('Teste 2.21: ', solution('15 20 15\\n') == '15')\nprint('Teste 2.22: ', solution('20 10 15\\n') == '15')\nprint('Teste 2.23: ', solution('20 10 15\\n') == '15')\nprint('Teste 2.24: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.25: ', solution('20 20 15\\n') == '15')\nprint('Teste 2.26: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.27: ', solution('15 20 15\\n') == '15')\nprint('Teste 2.28: ', solution('15 20 15\\n') == '15')\nprint('Teste 2.29: ', solution('15 20 15\\n') == '15')\nprint('Teste 2.30: ', solution('20 15 15\\n') == '15')\nprint('Teste 2.31: ', solution('20 15 15\\n') == '15')\nprint('Teste 2.32: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.33: ', solution('20 15 15\\n') == '15')\nprint('Teste 2.34: ', solution('20 15 15\\n') == '15')\nprint('Teste 2.35: ', solution('20 15 15\\n') == '15')\nprint('Teste 2.36: ', solution('20 15 15\\n') == '15')\nprint('Teste 2.37: ', solution('20 15 15\\n') == '15')\nprint('Teste 2.38: ', solution('20 15 15\\n') == '15')\nprint('Teste 2.39: ', solution('20 15 15\\n') == '15')\nprint('Teste 2.40: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.41: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.42: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.43: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.44: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.45: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.46: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.47: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.48: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.49: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.50: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.51: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.52: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.53: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.54: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.55: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.56: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.57: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.58: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.59: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.60: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.61: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.62: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.63: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.64: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.65: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.66: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.67: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.68: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.69: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.70: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.71: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.72: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.73: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.74: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.75: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.76: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.77: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.78: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.79: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.80: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.81: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.82: ', solution('15 15 15\\n') == '15')\nprint('Teste 2.83: ', solution",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 9\") == \"8\"\nprint(solution(\"4 2 9\"))\n'''",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 9\") == \"8\"\nassert solution(\"4 2 1\") == \"2\"\nassert solution(\"20 5 5\") == \"20\"\nassert solution(\"20 5 0\") == \"0\"\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 9') == '8'\n\n\"\"\"\n\n\"\"\"\n\u7d66\u5b9a\u7b54\u6848\n\ntoyota = int(stdin[0])\nprice = int(stdin[1])\ntaxi = int(stdin[2])",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\"\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2 9') == '8'\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 9') == 8\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 9') == '8'\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\n\n\"\"\"\n\nimport sys\nfrom functools import reduce",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\ncornistnt\\npeanutbomb\\nconstraint') == 1\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\nacornistnt\\npeanutbomb\\nconstraint') == 1\nassert solution('2\\nharry\\nrithm\\nrithmatics') == 1\nassert solution('1\\nrithm\\nrithmatics') == 0\nassert solution('0\\n') == 0",
        "num_ids_2": 45,
        "num_ids_4": 72
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('acornistnt') == 1\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n\"\n    \"banana\\n\"\n    \"abnba\\n\") == \"2\"\nassert solution(\"3\\n\"\n    \"a\\n\"\n    \"b\\n\"\n    \"c\\n\") == \"0\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\nacornistnt\\npeanutbomb\\nconstraint') == '1'\n\nIf you test your code on the HackerRank platform, the following code will not execute.\n\n----",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n'''",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\nabcdefg\\nxyz\\nabcdefg\\nxyz') == '6'\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\"\"\"\nfrom itertools import permutations\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n1231234567891234567891234567890''') == '1\\n2\\n5\\n8\\n0'\n\nassert solution('''2\n1231234567891234567891234567890''') == '1\\n2\\n8\\n0'\n\nassert solution('''2\n1\n3\n10''') == '1\\n2\\n8\\n0'\n\nassert solution('''1\n0''') == '0'\n\nassert solution('''2\n111111111111111111111111111111111''') == '9\\n9\\n9\\n9\\n9'",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('112123123412345') == '1'\nassert solution('12121212121212121212') == '0'\nassert solution('123456789101112131415') == '9'\nassert solution('111111111111111111111111111111111') == '0'\nassert solution('1111111111111111111111111111111111111111111111111111111111111111111111111') == '0'\n",
        "num_ids_2": 34,
        "num_ids_4": 70
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"112123123412345$\\\\dots$\") == \"11111111111122222222333\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nq = int(sys.argv[1])",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('112123123412345$\\dots$') == '112123123412345'\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('112123123412345$\\dots$') == '112123123412345'\n\"\"\"\n\nimport collections\nimport sys\nimport itertools\n\n_sys_input = input\nsys.stdin = open('../inputs/input_inp.txt')\n\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"112123123412345$\\dots$\") == '1'\nassert solution(\"11111111111111111111111111111$\\dots$\") == '0'\nassert solution(\"1121312312341234512345612345671234567812345678912345678910\") == '2'\n\"\"\"\n\n\n\n\n\n\n\n\"\"\"\nAssume the sequence of consecutive positive integers begins with $1$ and is infinitely long. The $i$-th element of the sequence is written as $a_i = i + 1$, i.e. the first element of the sequence is $1$, the second element is $2$, and so on.\n\nYour task is to answer $q$ independent queries. In the $i$-th query you are given one integer $k_i$ ($1 \\le k_i \\le 10^9$). Calculate the $m^th$ element of the sequence, i.e. the $m$-th element that is greater than or equal to $k_i$. It is guaranteed that such an element exists.\n\nInput\nOne line of input containing three integers $q$, $m$ and $k$: the number of queries, the position of the element and the element value itself.\n\nOutput\nOne line of output containing one integer $x$ \u2014 the $m^th$ element of the sequence that is greater than or equal to $k_i$.\n\nExamples\nInput\n4 1 1\n4 2 2\n5 1 1\n5 4 4\nOutput\n2\n4\n0\n0\n\nInput\n2 1 2\n1 100 100\n100 100 100\nOutput\n101\n1000000001\n\"\"\"\n\n\n\n\n\n\n\n\"\"\"\nAssume that the sequence of consecutive positive integers begins with $1$ and is infinitely long. The $i$-th element of the sequence is written as $a_i = i + 1$, i.e. the first element of the sequence is $1$, the second element is $2$, and so on.\n\nYour task is to answer $q$ independent queries. In the $i$-th query you are given one integer $k_i$ ($1 \\le k_i \\le 10^9$). Calculate the $m^th$ element of the sequence, i.e. the $m$-th element that is greater than or equal to $k_i$. It is guaranteed that such an element exists.\n\nInput\nOne line of input containing three integers $q$, $m$ and $k$: the number of queries, the position of the element and the element value itself.\n\nOutput\nOne line of output containing one integer $x$ \u2014 the $m^th$ element of the sequence that is greater than or equal to $k_i$.\n\nExamples\nInput\n4 1 1\n4 2 2\n5 1 1\n5 4 4\nOutput\n2\n4\n0\n0\n\"\"\"\n\n\n\n\n\n\n\"\"\"\n1 3 6 6 8 6\n5 5 5 5 5\n\"\"\"\n\n\n\n\n\n\"\"\"\nGiven two sequences of length $n$, $a_1,..., a_n$ and $b_1,..., b_n$, print a sequence $c_1,..., c_n$ where $c_i = a_i + b_i$, for each $i$ ($1 \\le i \\le n$).\n\nInput\nThe first line contains two space-separated integers $n$ and $k$ (1 \\le n, k \\le 10^6$).\n\nThe next $n$ lines contain $n$ space-separated integers $a_i$ ($1 \\le a_i \\le 10^6$) and the last $n$ lines contain $n$ space-separated integers $b_i$ ($1 \\le b_i \\le 10^6$).\n\nOutput\nPrint $n$ lines, each containing $k$ space-separated integers: $c_i$ ($1 \\le c_i \\le 10^6$).\n\nExamples\nInput\n4 5\n1 2 3 4\n5 1 2 3 4\n4 5\n1 2 3 4\n5 1 2 3 4\n2 5\n1 2 3 4\n5 1 2 3 4\nOutput\n3 4 4 6 8 10\n6 6 6 6 6\n6 6 6 6 6\n\"\"\"\n\n\n\n\n\n\n\"\"\"\nGiven three sequences of length $n$, $a_1,..., a_n$ and $b_1,..., b_n$ and $c_1,..., c_n$, print a sequence $d_1,..., d_n$ where $d_i = a_i - b_i$ and $d_i = a_i - c_i$, for each $i$ ($1 \\le i \\le n$).\n\nInput\nThe first line contains three space-separated integers $n$, $m$ and $k$ (1 \\le n, m, k \\le 10^5$).\n\nThe next $n$ lines each contain $n$ space-separated integers $a_i$ ($1 \\le a_i \\le 10^6$) and the last $n$ lines each contain $n$ space-separated integers $b_i$ ($1 \\le b_i \\le 10^6$) and the last $n$ lines each contain $n$ space-separated integers $c_i$ ($1 \\le c_i \\le 10^6$).\n\nOutput\nPrint $n$ lines, each containing $k$ space-separated integers: $d_i$ ($1 \\le d_i \\le 10^6$).\n\nExamples\nInput\n5 5 4\n1 2 3 4 5\n5 1 2 3 4\n4 5\n1 2 3 4 5\n5 1 2 3 4\n2 5\n1 2 3 4 5\n5 1 2 3 4\n2 5\n1 2 3 4 5\n5 1 2 3 4\nOutput\n3 -3 1 0 2 0\n4 -4 -3 3 -2 0\n2 0 0 -3 -4 3\n0 -4 -3 0 0 3\n0 0 0 0 0 4\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\nIn this Kata, you will be given an array of strings. You will also be given a number of indexes which will be passed as strings. You must print the string at those indexes.\n\nFor example:\n\ns = \"abcd\"\nindexes = \"1\", \"1\", \"0\"\nprint s[int(indexes[0])] + s[int(indexes[1])] + s[int(indexes[2])]",
        "num_ids_2": 42,
        "num_ids_4": 75
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345123456712345671234567812345678912345678910\"\n\"\"\"\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1\\n3\\n20\\n38\\n56\\n\") == \"1\\n2\\n5\\n2\\n0\"\n\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345\"\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('112123123412345$\\dots$') == '1'\nassert solution('11212312341234512345612345671234567812345678912345678910') == '5'\nassert solution('11212312341234512345612345671234567812345678912345678910') == '2'\nassert solution('11212312341234512345612345671234567812345678912345678910') == '0'\n\n\"\"\"\nimport collections\nimport re\n",
        "num_ids_2": 52,
        "num_ids_4": 116
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2\\n1 2 1 1 2\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n1 4\\n4 3\\n3 5\\n3 6') == '2\\n1 2 1 1 2'\nassert solution('4 2\\n3 1\\n1 4\\n1 2') == '1\\n1 1 1'\n\nprint('Hooray!')\n",
        "num_ids_2": 62,
        "num_ids_4": 62
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''6 2\n1 4\n4 3\n3 5\n3 6\n5 2''') == '2\\n1 2 1 1 2'\nassert solution('''10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9''') == '3\\n1 1 2 3 2 3 1 3 1'\nassert solution('''4 2\n3 1\n1 4\n1 2''') == '1\\n1 1 1'\nassert solution('''7 3\n3 1\n2 4\n2 5\n3 6\n1 7\n4 2\n5 6\n''') == '4\\n1 2 3 2 4 1 4'\nassert solution('''4 2\n3 1\n1 4\n1 2''') == '1\\n1 1 1'\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2\\n1 2 1 1 2\"\nassert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"1\\n1 2 1 1 2\"\nassert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"1\\n1 2 1 1 2\"\nassert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"1\\n1 2 1 1 2\"\nassert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"1\\n1 2 1 1 2\"\n",
        "num_ids_2": 76,
        "num_ids_4": 152
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3\\n1 1 2 3 2 3 1 3 1\"\n\"\"\"\n\nimport sys\nimport numpy as np\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n3 1\\n1 4\\n1 2\\n1 3\\n') == '1 2 1 1 2'\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3\\n1 1 2 3 2 3 1 3 1\"\nassert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\") == \"1 2 1 1 2\"\n\n\"\"\"\n\n\nimport sys\nimport itertools\nfrom typing import List, Tuple",
        "num_ids_2": 89,
        "num_ids_4": 89
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2') == '2\\n1 2 1 1 2'\n\"\"\"\n\n\nimport sys\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n2 5\") == \"1 1 2 3 2 3 1 3 1\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3 1 1 1 2 3 2 3 1 3 1\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 92,
        "num_ids_4": 92
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n\") == \"1\\n1 1 2 3 2 3 1 3 1\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\nassert solution('7\\n4 3 7 1 4 3 3') == '3 6'\n",
        "num_ids_2": 39,
        "num_ids_4": 59
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '4\\n1 2 4 4'\n) == '2 4'\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\nassert solution('7\\n4 3 7 1 4 3 3') == '3 6'\n\"\"\"\n\nfrom collections import Counter\n\nn = int(input())\nfriends = list(map(int, input().split()))\n\ncounter = Counter(friends)\n\nmin_num = 0\nmax_num = 0",
        "num_ids_2": 39,
        "num_ids_4": 59
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\nassert solution(\"8\\n1 1 8 8 8 4 4 4 4\") == \"2 4\"\nprint(\"Passed!\")\n",
        "num_ids_2": 39,
        "num_ids_4": 81
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 4 4\") == '2 4'\n\"\"\"\n\nimport sys\nimport math\nfrom collections import deque\n\nn = int(sys.stdin.readline())\nx = list(map(int, sys.stdin.readline().split()))\n\nqueue = deque(range(1, n + 1))\n\nmin_ = math.inf\nmax_ = -math.inf\n\nfor i in x:\n    if i == queue[0]:\n        queue.popleft()\n        continue\n    elif i == queue[-1]:\n        queue.pop()\n        continue\n    queue.remove(i)\n    queue.append(i)\n    min_ = min(min_, len(queue))\n    max_ = max(max_, len(queue))\n\nprint(min_, max_)\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\nassert solution('7\\n4 3 7 1 4 3 3') == '3 6'\n",
        "num_ids_2": 39,
        "num_ids_4": 59
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 4 4\") == '2 4'\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == '3 8'\nassert solution(\"7\\n4 3 7 1 4 3 3\") == '3 6'\n\"\"\"\n\nfrom collections import deque\n",
        "num_ids_2": 39,
        "num_ids_4": 59
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\n\"\"\"\n\n\"\"\"\nhttps://github.com/checkio-mission-easy/checkio-mission-easy\n\nThe International Olympiad is currently going on. This year, n groups of students participated in the Olympiad. Each group contains exactly one student. The students are numbered from 1 to n. There are two types of the Olympiad, the first and the second one.\n\nThe first type of the Olympiad takes place at a football stadium. The first stage consists of the following n stages:\n\n1. Group 1 competes in the first stage.\n2. Group 2 competes in the first stage.\n3. Group 3 competes in the first stage.\n4. Group 4 competes in the first stage.\n5. Group 5 competes in the first stage.\n\nThe second type of the Olympiad takes place at a track. The first stage consists of the following n stages:\n\n1. Group 1 competes in the first stage.\n2. Group 2 competes in the first stage.\n3. Group 3 competes in the first stage.\n4. Group 4 competes in the first stage.\n5. Group 5 competes in the second stage.\n\nThe second stage consists of the following n stages:\n\n1. Group 1 competes in the first stage.\n2. Group 2 competes in the first stage.\n3. Group 3 competes in the first stage.\n4. Group 4 competes in the first stage.\n5. Group 5 competes in the second stage.\n\nThe final stage is a competition between the winners of the second stage in the first type of the Olympiad and the winners of the first stage in the second type of the Olympiad. The final result will be decided according to the following rules:\n\n1. If the group of the first stage won in the first type of the Olympiad and won in the second type of the Olympiad, then this group wins.\n2. If the group of the first stage won in the first type of the Olympiad, but the group of the second stage won in the second type of the Olympiad, then the group of the first stage wins.\n3. If the group of the first stage won in the first type of the Olympiad, but the group of the second stage won in the first type of the Olympiad, then the group of the second stage wins.\n4. If the group of the first stage won in the first type of the Olympiad and the group of the second stage won in the first type of the Olympiad, then this group wins.\n\nThe first group in the first stage of the first type of the Olympiad is always the first group in the array of the students that participated in the Olympiad.\n\"\"\"\n\nfrom typing import List, Tuple\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 2 4 4') == '2 4'\nassert solution('9 1 1 8 8 8 4 4 4 4') == '3 8'\nassert solution('7 4 3 1 4 3 3') == '3 6'\n\"\"\"\nfrom typing import List, Dict, Tuple, Optional\n",
        "num_ids_2": 35,
        "num_ids_4": 52
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"2 4\"\n\n\"\"\"\n\nimport math\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\nassert solution(\"3\\n2 3\\n3 1\\n1 2\") == \"3 1 2\"\nassert solution(\"3\\n1 2\\n3 1\") == \"1 2 3\"\n",
        "num_ids_2": 58,
        "num_ids_4": 78
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5\n3 5\n1 4\n2 4\n1 5\n2 3\n\"\"\") == \"3 2 4 1 5\"\nassert solution(\"\"\"6\n3 1\n1 2\n1 3\n1 4\n1 5\n2 6\n\"\"\") == \"3 1 2 6 5 4\"\nassert solution(\"\"\"6\n1 3\n2 6\n3 1\n3 4\n3 5\n4 5\n5 6\n\"\"\") == \"1 2 3 4 6 5\"\nassert solution(\"\"\"8\n2 1\n2 6\n2 7\n3 1\n3 8\n4 5\n5 6\n6 7\n7 8\n\"\"\") == \"2 1 3 6 8 7 4 5\"",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2 3\\n3 1\\n1 2\\n') == '3 1 2'\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3') == '3 2 4 1 5'\nassert solution('4\\n3 1\\n1 2\\n2 3') == '3 1 2 4'",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 5\\n1 2\\n2 3\\n1 3') == '3 2 1'\nassert solution('5\\n3 5\\n1 2\\n2 4\\n1 4') == '3 2 1 4 5'\nassert solution('6\\n3 4\\n1 2\\n2 5\\n1 5\\n2 3') == '3 1 2 5 4'\n\"\"\"\nimport collections",
        "num_ids_2": 58,
        "num_ids_4": 92
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3''') == '3 2 4 1 5'\n\nassert solution('''3\n2 3\n3 1\n1 2''') == '3 1 2'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\nassert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\n\n\"\"\"\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3\\n3 1\\n1 2\") == \"3 1 2\"\n\"\"\"\nfrom itertools import permutations\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\nassert solution(\"3\\n2 3\\n3 1\\n1 2\") == \"3 1 2\"\n\"\"\"",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5\n3 5\n1 4\n2 4\n1 5\n2 3\"\"\") == \"3 2 4 1 5\"\nassert solution(\"\"\"5\n3 5\n1 4\n2 4\n1 5\n2 3\"\"\") == \"3 2 4 1 5\"\nassert solution(\"\"\"4\n1 3\n1 4\n3 2\n4 2\"\"\") == \"3 2 1 4\"\nassert solution(\"\"\"3\n1 2\n1 3\n2 3\"\"\") == \"3 1 2\"\nassert solution(\"\"\"2\n1 2\n1 3\"\"\") == \"3 1 2\"\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == 3\nassert solution(\"10\\n
        "num_ids_2": 1610,
        "num_ids_4": 1610
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 10 17 12 15 2\") == 3\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == 1\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == 10\n",
        "num_ids_2": 33,
        "num_ids_4": 69
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n1 1000 10000 10 100 1000000000\") == '3'\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == '10'\nassert solution(\"6\\n1 10000 10000 10000 10000 10000\") == '1'\n",
        "num_ids_2": 65,
        "num_ids_4": 83
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 10 17 12 15 2\") == 3\nassert solution(\"1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == 10\nassert solution(\"1 1000 10000 10 100 1000000000\") == 1\nassert solution(\"1 1000 10000 10 100 1000000000 10 100 1000000000 100\") == 1\nassert solution(\"1 1000000000 100 100 1000000000 100 100 1000000000 100 10 10 10 10\") == 1\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 73
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"3\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"3\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\"\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\\n\") == \"3\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 13",
        "num_ids_2": 1610,
        "num_ids_4": 1610
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''6\n1 10 17 12 15 2''') == '3'\n\nassert solution('''10\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337''') == '10'\n\nassert solution('''6\n1 1000 10000 10 100 1000000000''') == '1'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(solution)\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 10 17 12 15 2') == '3'\nassert solution
        "num_ids_2": 1610,
        "num_ids_4": 1610
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == '10'\nassert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\n",
        "num_ids_2": 53,
        "num_ids_4": 72
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4 -1\\n5 2\\n0 1\\n1 2\\n2 0\"\nassert solution(\"1 5 3 2\\n1 5 4 3\\n1 5 2 1\\n1 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"0\"\nassert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4 -1\\n5 2\\n0 1\\n1 2\\n2 0\"\nassert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4 -1\\n5 2\\n0 1\\n1 2\\n2 0\"\nassert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4 -1\\n5 2\\n0 1\\n1 2\\n2 0\"\n",
        "num_ids_2": 104,
        "num_ids_4": 226
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\nassert solution(\"10 1 100 100\\n100 2 100 100\") == \"0\"\nassert solution(\"10 1 1 100\\n1 1 1 1\") == \"-1\"\n\"\"\"\n",
        "num_ids_2": 78,
        "num_ids_4": 97
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n4\\n1\\n2\\n3') == 4\nassert solution('4\\n4\\n4\\n4\\n0') == -1\nassert solution('5\\n4\\n4\\n4\\n0') == 0\nassert solution('3\\n2\\n3\\n4\\n0') == 1\nassert solution('10\\n3\\n2\\n1\\n0') == 2\n",
        "num_ids_2": 41,
        "num_ids_4": 81
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == '4\\n-1\\n5\\n2\\n0\\n1'\n",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4 -1 0 1'\nassert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '-1'\nassert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '5'\nassert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '2'\n\n\"\"\"\n",
        "num_ids_2": 91,
        "num_ids_4": 177
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('15 5 3 2') == '4'\nassert solution('15 5 4 3') == '-1'\nassert solution('15 5 2 1') == '5'\nassert solution('15 5 5 1') == '2'\nassert solution('16 7 5 2') == '0'\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4\\n-1\\n5\\n2\\n0\\n1'\nassert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\\n21 5 8 2\\n15 5 4 3\\n20 5 7 3') == '4\\n-1\\n5\\n2\\n0\\n1'\nassert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\\n21 5 8 2\\n15 5 4 3\\n20 5 7 3\\n21 5 8 2\\n15 5 4 3') == '4\\n-1\\n5\\n2\\n0\\n1'\nassert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\\n21 5 8 2\\n15 5 4 3\\n20 5 7 3\\n21 5 8 2\\n15 5 4 3\\n20 5 7 3\\n21 5 8 2\\n15 5 4 3\\n20 5 7 3\\n21 5 8 2\\n15 5 4 3') == '4\\n-1\\n5\\n2\\n0\\n1'\nassert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\\n21 5 8 2\\n15 5 4 3\\n20 5 7 3\\n21 5 8 2\\n15 5 4 3\\n20 5 7 3\\n21 5 8 2\\n15 5 4 3\\n20 5 7 3\\n21 5 8 2\\n15 5 4 3\\n20 5 7 3\\n21 5 8 2\\n15 5 4 3\\n20 5 7 3\\n21 5 8 2\\n15 5 4 3') == '4\\n-1\\n5\\n2\\n0\\n1'\n",
        "num_ids_2": 136,
        "num_ids_4": 350
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 3 2\\n4 5 4 3\\n4 5 2 1\\n4 5 5 1\\n1 1 1 1\\n\") == '-1\\n1'\n\"\"\"",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\n",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5 2 1\") == \"1\"\nassert solution(\"7 5 3 2\") == \"1\"\nassert solution(\"7 5 3 1\") == \"1\"\nassert solution(\"7 5 4 3\") == \"1\"\nassert solution(\"7 5 5 3\") == \"1\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ac?b?c\") == 24\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ac?b?c') == '24'\nassert solution('a???c') == '2835'\nassert solution('cccbbbaaa') == '0'\nassert solution('ac?b?c') == '24'\nassert solution('???a?b?') == '2835'\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ac?b?c') == '24'\nassert solution('a???c') == '2835'\nassert solution('???') == '6'\nassert solution('????') == '0'\nassert solution('???a??b??c') == '0'",
        "num_ids_2": 27,
        "num_ids_4": 48
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\nassert solution(\"???????\") == \"2835\"\nassert solution(\"cccbbbaaa\") == \"0\"\nassert solution(\"a???c\") == \"46\"\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ac?b?c') == '24'\nassert solution('??????') == '2835'\nassert solution('a???c') == '46'\n",
        "num_ids_2": 26,
        "num_ids_4": 38
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ac?b?c') == '24'\nassert solution('??????') == '2835'\nassert solution('a???c') == '46'\n",
        "num_ids_2": 26,
        "num_ids_4": 38
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\nassert solution(\"???\") == \"2835\"\nassert solution(\"a?c\") == \"46\"\nassert solution(\"a?b?c\") == \"46\"\nassert solution(\"a???c\") == \"46\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ac?b?c') == '24'\nassert solution('a??b??c') == '2835'\nassert solution('??????????') == '1168995'\nassert solution('??a?b?c') == '2835'\nassert solution('????????a?b??') == '1168995'\n",
        "num_ids_2": 29,
        "num_ids_4": 58
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\nassert solution(\"ac??b?c\") == \"2835\"\nassert solution(\"a?c\") == \"46\"\nassert solution(\"a?c?a?\") == \"49\"\nassert solution(\"a?b?c\") == \"4\"\n",
        "num_ids_2": 29,
        "num_ids_4": 56
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ac?b?c') == '24'\nassert solution('aaaaaaaa') == '40960'\nassert solution('ac?b?c') == '24'\nassert solution('aaaaaaaa') == '40960'\nassert solution('ac?b?c') == '24'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 0\\n1 3 3 7\\n2 3 5\\n2 1 1\\n1 3 10\\n1 4 7\\n1 5 15\\n') == '16'\nassert solution('5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\\n') == '18'\n\n\"\"\"\n",
        "num_ids_2": 84,
        "num_ids_4": 84
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 0\\n1 3 3 7') == '16'\nassert solution('5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15') == '18'\n\n\"\"\"\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n1 3 3\\n2 3 5\\n2 1 1\") == \"5\"\nassert solution(\"4 0\\n1 3 3 7\") == \"16\"\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open(\"test_00.txt\").read()) == \"14\"\nassert solution(open(\"test_01.txt\").read()) == \"17\"\nassert solution(open(\"test_02.txt\").read()) == \"16\"\nassert solution(open(\"test_03.txt\").read()) == \"24\"\nassert solution(open(\"test_04.txt\").read()) == \"26\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 3 3 7\\n2 3 5\\n2 1 1\\n1 3 10\") == \"5\"\n\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\\n2 1 1\\n2 2 2\\n2 3 4\\n2 4 6\") == \"8\"\n\nprint(\"Success\")\n\n\n-----#-----#-----#-----#-----#-----#-----#-----#-----#-----#-----#-----#-----#-----#-----#-----#-----#-----#-----#-----#-----#\n\nIn the code line `ans = 0` on line `for u, v, w in edges:` you can see the variable `u` is not being used, but Python variables must always have an initial value.\n\nWhy does this happen? When a variable is assigned in for-loop, its value is evaluated at the beginning of the loop and stored in the variable.\n\nThis means if you are using a variable in for-loop, you do not need to use variable in subsequent loop as it's value will be always the same.\n\nLet's modify the code:",
        "num_ids_2": 90,
        "num_ids_4": 90
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 3 3\\n2 3 5\\n2 1 1') == '5'\nassert solution('4 0\\n1 3 3 7') == '16'\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\\n2 3 5\\n2 1 1\") == \"5\"\nassert solution(\"1 2 3\\n1 2 1\\n2 3 1\") == \"5\"\n\"\"\"\n\nimport sys\nimport numpy as np\n\nlines = sys.stdin.readlines()\nn, m = [int(x) for x in lines[0].split()]\nvertices = [int(x) for x in lines[1].split()]\n\nmatrix = np.zeros([n, n])\nfor line in lines[2:]:\n    line = line.split()\n    x, y, w = int(line[0]), int(line[1]), int(line[2])\n    matrix[x - 1, y - 1] = w",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 3 3 7\\n2 3 5\\n2 1 1\") == \"5\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\"\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n",
        "num_ids_2": 65,
        "num_ids_4": 65
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\\n\") == \"18\"\nassert solution(\"4 0\\n1 3 3 7\") == \"16\"\n\n\n-----Tests-----\n\n-----Benchmark-----\n\npython3 -m timeit -n 100 -s \"import a_task_3\" \"a_task_3.solution(open('inputs/task_3_input_1.txt', 'r').read())\"\npython3 -m timeit -n 100 -s \"import a_task_3\" \"a_task_3.solution(open('inputs/task_3_input_2.txt', 'r').read())\"\npython3 -m timeit -n 100 -s \"import a_task_3\" \"a_task_3.solution(open('inputs/task_3_input_3.txt', 'r').read())\"",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input) == expected_result\n\n\"\"\"\n\nfrom collections import defaultdict\n\nn, m = [int(x) for x in input().split()]\nnums = [int(x) for x in input().split()]\nedges = [[int(x) for x in input().split()] for i in range(m)]",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2''') == '14'\nassert solution('''10 1 1\n0 9\n0 5''') == '45'\nassert solution('''10 1 1\n0 9\n1 5''') == '-1'''",
        "num_ids_2": 18,
        "num_ids_4": 27
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\\n\") == \"-1\"\nassert solution(\"10 1 1\\n0 9\\n1 5\\n\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\\n\") == \"45\"",
        "num_ids_2": 60,
        "num_ids_4": 104
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 1 1\\n0 9\\n0 5\\n\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\\n\") == \"45\"\nassert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n\") == \"14\"\nassert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n\") == \"14\"\n\"\"\"",
        "num_ids_2": 44,
        "num_ids_4": 120
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n') == '14'\n\nassert solution('10 1 1\\n0 9\\n0 5\\n') == '45'\nassert solution('10 1 1\\n0 9\\n1 5\\n') == '-1'\n",
        "num_ids_2": 60,
        "num_ids_4": 83
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(10, 2, 4) == 14\nassert solution(10, 1, 1) == 45\nassert solution(10, 1, 1) == -1",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\"\n) == '14'\n\nassert solution(\n\"10 1 1\\n0 9\\n0 5\"\n) == '45'\n\nassert solution(\n\"10 1 1\\n0 9\\n1 5\"\n) == '-1'\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\") == \"-1\"\nassert solution(\"10 1 1\\n0 9\\n0 5\\n9 10\") == \"24\"\nassert solution(\"10 1 1\\n0 9\\n0 5\\n9 10\\n0 6\\n0 7\") == \"44\"\n",
        "num_ids_2": 56,
        "num_ids_4": 100
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n\") == '14'\n\nassert solution(\"10 1 1\\n0 9\\n0 5\\n\") == '45'\n\nassert solution(\"10 1 1\\n0 9\\n1 5\\n\") == '-1'",
        "num_ids_2": 60,
        "num_ids_4": 83
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 1 1\\n0 9\\n0 5\") == \"-1\"\n\"\"\"\nfrom collections import defaultdict\nimport heapq\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"5 7 8\") == \"No\"\n\"\"\"\n\na, b, c = [int(n) for n in stdin.split()]",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 7 5') == 'Yes'\nassert solution('5 5 7') == 'Yes'\nassert solution('3 3 3') == 'No'\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"5 5 5\") == \"No\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"7 7 7\") == \"No\"\n\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3\\n4 5 6') == 'Yes'\nassert solution('1 1 1\\n4 5 6') == 'No'\nassert solution('1 2 2\\n1 1 1') == 'Yes'\nassert solution('1 1 1\\n1 1 1') == 'No'\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"5 5 5\") == \"No\"\nassert solution(\"1 1 1\") == \"Yes\"\n\n------------------------------------------------------------------------------------------------------------------------\nIf the given triple is poor, print Yes; otherwise, print No.\nInput\n\nA B C\n\nOutput\n\nYes\n\nor\n\nNo\n\nThe three numbers are not the same, so the triple is not poor.\n------------------------------------------------------------------------------------------------------------------------\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 7 5') == 'Yes'\nassert solution('9 9 9') == 'No'\nassert solution('5 5 5') == 'No'\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7 5\") == 'Yes'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\n\n----\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\n\"\"\"\nimport math\n\nfrom numpy import array, flip\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2\\n') == '1'\nassert solution('1\\n2\\n3\\n') == '2'\n\n-----\na = {\n    '1': 10,\n    '2': 20,\n    '3': 30,\n    '4': 40\n}\n\nfor k, v in a.items():\n    print(k, v)\n\n\n\n-----\n\nn = int(stdin.readline())\n\nl = list(map(int, stdin.readline().split()))\n\nh = list(map(int, stdin.readline().split()))\n\na = []\nfor i in range(n):\n    a.append(h[i]/l[i])\n\na.sort()\n\nprint(a[0])\n\n-----\n\na = int(input())\nh = list(map(int, input().split()))\nl = list(map(int, input().split()))\nfor i in range(a):\n    print((h[i]/l[i])//1)\n\n\n-----\n\nn = int(input())\nl = list(map(int, input().split()))\nh = list(map(int, input().split()))\nl.sort()\nh.sort()\nfor i in range(n):\n    print((h[i]/l[i])//1)\n\n\n-----\n\nn = int(input())\nl = list(map(int, input().split()))\nh = list(map(int, input().split()))\nl.sort()\nh.sort()\nfor i in range(n):\n    print((h[i]/l[i])//1)\n\n\n\n-----\n\nn = int(input())\nh = list(map(int, input().split()))\nl = list(map(int, input().split()))\nfor i in range(n):\n    print((h[i]/l[i])//1)\n\n\n-----\n\nn = int(input())\nl = list(map(int, input().split()))\nh = list(map(int, input().split()))\nfor i in range(n):\n    print((h[i]/l[i])//1)\n\n\n\n-----\n\nimport sys\n\na = int(sys.stdin.readline())\nh = list(map(int, sys.stdin.readline().split()))\nl = list(map(int, sys.stdin.readline().split()))\nh.sort()\nl.sort()\nfor i in range(a):\n    print((h[i]/l[i])//1)\n\n\n-----\n\nimport sys\n\na = int(sys.stdin.readline())\nh = list(map(int, sys.stdin.readline().split()))\nl = list(map(int, sys.stdin.readline().split()))\nh.sort()\nl.sort()\nfor i in range(a):\n    print((h[i]/l[i])//1)\n\n\n\n-----\n\nn = int(input())\nh = list(map(int, input().split()))\nl = list(map(int, input().split()))\nfor i in range(n):\n    print((h[i]/l[i])//1)\n\n\n-----\n\nn = int(input())\nh = list(map(int, input().split()))\nl = list(map(int, input().split()))\nfor i in range(n):\n    print((h[i]/l[i])//1)\n",
        "num_ids_2": 20,
        "num_ids_4": 53
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n12 5\\n1000 2000') == '1'\nassert solution('2\\n12 5\\n3000 2000') == '0'\n\nprint(solution(stdin))\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12 5\\n1000 2000\") == '1'\nassert solution(\"2\\n100 200\") == '1'\n\"\"\"\nimport sys",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12 5\\n1000 2000') == '1'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5\\n100 200 300 400 500\\n1 2 3 4 5\\n\") == \"1\"\nassert solution(\"1 2 3 4 5\\n100 200 300 400 500\\n1 2 3 4 5\\n\") == \"1\"\n\"\"\"\nimport math\nimport sys",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n5\\n2 1 4 5') == '1'\nassert solution('3\\n10\\n10 5 2 3') == '0'\n\"\"\"\n\nimport sys",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n12 5\\n1000 2000') == '1'\n\"\"\"\n\n\"\"\"\ni = 1\n    while i < 1000:\n        print(f'{i:.0f}')\n        i += 1\n\"\"\"\n\nimport numpy as np\n\nn = int(input())\na, t = map(int, input().split())\nh = list(map(int, input().split()))\n\nresult = []\nfor i in range(n):\n    result.append(np.round(a-t*0.006*h[i], 0))\n\nresult = np.round(a-t*0.006*np.array(h), 0)\nmin_value = min(result)\nindex = np.where(result==min_value)\nprint(index[0][0]+1)",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n12 5\\n1000 2000\\n') == '1'\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n\") == \"1\"\n\"\"\"\n\nimport collections\n\nn, m = [int(c) for c in stdin.readline().split()]\na = [int(c) for c in stdin.readline().split()]\nb = [int(c) for c in stdin.readline().split()]\n\nans = 0\n\ncnt = collections.Counter(a+b)\nfor i in range(m, n+1):\n    ans += cnt[i]\n\nprint(ans)\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"1\"\n\n-------\n--------\n--------\n------\n-------\n-------\n--------\n--------\n--------\n--------\n--------\n------\n-----\n----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n') == '1'\n\"\"\"\n\nN, M = input().split()\ncount = 0",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"1\"\n\nassert solution(\"2 4\") == \"2\"\n\nassert solution(\"1 2\") == \"0\"\n\nassert solution(\"1 2\") == \"1\"\n\nassert solution(\"2 2\") == \"0\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\") == \"1\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"4 2\") == \"1\"\n\n\"\"\"\n\n\nimport sys\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1') == '1'\nassert solution('2 2') == '0'\nassert solution('2 3') == '2'\nassert solution('1 1') == '1'\n\"\"\"\n\nfrom math import factorial",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('2 1') == '1'\nassert solution('2 2') == '1'\nassert solution('2 3') == '3'\n",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"1\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"1\"\n\n\"\"\"\n\nimport math",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"CAGCCTA\") == \"4\"\nassert solution(\"GTATACCGTT\") == \"0\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 40
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\":\\n3 7\\n2 3\\n1 8\\n\") == \"2\\n0\\n3\"\nassert solution(\":\\n3 7\\n2 3\\n1 8\\n\") == \"2\\n0\\n3\"\n\"\"\"\n\nfrom math import ceil, log2\n\n\"\"\"\n1. Build a tree with the string S as the root node.\n2. For each query, traverse from the root node and count the number of times AC occurs as a substring.\n\"\"\"\n\n\"\"\"\nTime: O(N * Q * Log(N))\nSpace: O(N)\n\"\"\"",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"AACCGTT\") == \"3\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ACACTACG\\n3 7\\n2 3\\n1 8\") == \"2\\n0\\n3\"\n\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"CATGTCATGATGTATGCCATATTATTTTATCATATGATGATTTTAT\") == \"4\"\nassert solution(\"ATATATA\") == \"0\"\nassert solution
        "num_ids_2": 49,
        "num_ids_4": 1561
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ACACTACG\", 3, 7) == 2\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''8 3\nACACTACG\n3 7\n2 3\n1 8''') == '2\\n0\\n3'\nprint('Success')",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"ACTACG\") == \"0\"\nassert solution(\"ATCODER\") == \"3\"\n\nstdin = input()\nprint(solution(stdin))\n",
        "num_ids_2": 25,
        "num_ids_4": 38
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n50 100 80 120 80') == 210\nprint(solution(stdin))\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n50 100 80 120 80\\n') == '210'\n\"\"\"\nfrom functools import reduce\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(5)) == 210\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\\n\") == 210\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n10 20 30 40\") == \"40\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\n\n\"\"\"\n\nfrom __future__ import annotations\nimport sys\n\ninput = sys.stdin.readline\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\\n\") == \"210\"\n\"\"\"\n\nimport re\n\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\nprint(sum(arr[:k]))\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'''\n3\n1 2 3\n''') == '6'\nassert solution(\n'''\n5\n1 2 3 4 5\n''') == '10'\nassert solution(\n'''\n5\n5 5 5 5\n''') == '0'\n\nprint('Success')\n\nfrom collections import Counter\n\nn, k = map(int, input().split())\nprices = list(map(int, input().split()))\n\ntotal = 0\ncounter = Counter(prices)\nprices = sorted(prices)\nfor p in prices:\n    total += counter[p]\n    if total >= k:\n        break\n\nprint(total)\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\n\"\"\"\n\nN, K = map(int, input().split())\nprice = [int(i) for i in input().split()]\nprint(sum(min(price[i], price[j]) for i in range(K) for j in range(i + 1, N) if i!= j))",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 3\n50 100 80 120 80''') == 210\n\"\"\"\n\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3 4') == '4'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3 4') == '4'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 4') == 4\n\"\"\"\n\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3 4') == '4'\nassert solution('3 3 3') == '9'\n\"\"\"\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"10 10 10\") == \"0\"\nassert solution(\"1 1 1\") == \"1\"\n\n\"\"\"\n\nimport unittest\nimport math\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == '0'\nassert solution('1 3 4') == '4'\nassert solution('1 3 4') == '4'\nassert solution('1 3 4') == '4'\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"3 4 1\") == \"5\"\nassert solution(\"10 10 10\") == \"14\"\nassert solution(\"10 10 1\") == \"15\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"2 2 2\") == \"4\"\nassert solution(\"100 100 100\") == \"200\"\nassert solution(\"1 100 100\") == \"200\"\nassert solution(\"1 1 1\") == \"3\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5') == '0'\n\"\"\"\n\nX, A = map(int, input().split())\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n') == '0\\n'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5') == '0'\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5') == '0'\nassert solution('5 5') == '10'\n\nprint(\"Passed\")\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\") == '0'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\") == \"0\"\nassert solution(\"5 5\") == \"10\"\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(4 9) == 0\nassert solution(3 5) == 10\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5\\n') == '0'\nprint('Test Successful')\n\n----OUTPUT:----\nTest Successful\n\n----INPUT:----\n4 2\n\n----OUTPUT:----\n10\n\n----INPUT:----\n7 4\n\n----OUTPUT:----\n0",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\"\n\nfrom typing import List, Tuple",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 4') == '1'\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4\") == \"1\"\nprint(\"test passed\")\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 4') == '1'\nprint('All tests passed.')\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\"\n\n\"\"\"\n----- 2nd solution-----",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 4') == '1'\nassert solution('12 3') == '3'\nassert solution('0 3') == '0'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 4') == '1'\n\"\"\"\n\n\"\"\"\nSolution 1\n\nline = stdin.strip()\nline = line.split()\nn = int(line[0])\nk = int(line[1])\n\nmin_abs = abs(n - k)\nmin_abs_index = 0",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 4\\n') == '1'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 4') == '1'\n\"\"\"\n\n\"\"\"\n    Theorem:\n    N = x - K | x - K | x + K\n    N = 2x - 2K | x - K | x + K\n    N = 2x - 2K | x + K | x - K\n\n    x = 2K + (2K - K) | 2K - K | 2K + K\n\n    x = 2K + K | K | 2K\n\n    K = 0\n    if x < 0:\n        return \"impossible\"\n    else:\n        return x\n\"\"\"\n\n\"\"\"\n    Theorem:\n    N = x - K | x - K | x + K\n    N = 2x - 2K | x - K | x + K\n    N = 2x - 2K | x + K | x - K\n\n    x = 2K + (2K - K) | 2K - K | 2K + K\n\n    x = 2K + K | K | 2K\n\n    K = 0\n    if x < 0:\n        return \"impossible\"\n    else:\n        return x\n\"\"\"\n\nimport math\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 4') == '1'\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3\\n1 2 3') == 'win'\nassert solution('1 1 1\\n1 2 3') == 'bust'\nassert solution('1 1 2\\n1 1 2') == 'bust'\n\"\"\"\n",
        "num_ids_2": 35,
        "num_ids_4": 53
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\"\"\"\n\n##############################################\n##############################################",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('2 8 10') == 'bust'\nassert solution('10 11 12') == 'bust'\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 38
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\"\"\"\n\nA_1, A_2, A_3 = [int(i) for i in stdin.split()]",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 7 9') == 'win'\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 7 9\\n') == 'win'\nassert solution('1 2 3\\n') == 'bust'\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\"\"\"\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('1 1 1') == 'bust'\nassert solution('6 6 8') == 'win'\nassert solution('6 5 7') == 'bust'\nassert solution('5 6 8') == 'bust'\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7 9\") == 'win'\nassert solution(\"4 5 6\") == 'bust'\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n\n\"\"\"\nThe following approach does not work:\n\nN = int(stdin.readline())\n\ni = 1\nwhile i * 2 < N:\n    i *= 2\n\nwhile i * 2 <= N:\n    while i % 2 == 0:\n        if i >= N:\n            return i\n        i += 1\n    i += 1\n\nreturn i\n\"\"\"\n\n\"\"\"\nWe can convert the problem to find the largest even number divisible by 2\nthat is smaller than N.\n\nIn particular, we can use binary search to find the largest even number\ndivisible by 2 that is smaller than N.\n\nThen, we can check whether N is divisible by N.\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '6'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == '10'\n\"\"\"\n\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '6'\nassert solution('5') == '10'\nassert solution('10') == '20'\n\"\"\"\n\n\"\"\"\nThe naive approach is to test every positive integer and if any integer \nis divisible by both 2 and N then print that number.\n\nTASK:\nIf we have a minimum number divisible by both 2 and 3, then the answer is \nminimum number divisible by both 2 and 3.\n\nIf any number is divisible by both 2 and 3, then no number less than that is\ndivisible by both 2 and 3.\n\nSo, we need to find the minimum number divisible by both 2 and 3.\n\nSo, we can use binary search to find the answer.\n\nThe minimum number divisible by both 2 and 3 is equal to a number divisible \nby both 2, 3 and 4.\n\nNow, what is the minimum number divisible by both 2 and 3?\n\nThe minimum number divisible by both 2 and 3 is equal to a number divisible \nby 2, 3, 4 and 5.\n\nNow, what is the minimum number divisible by both 2 and 3?\n\nThe minimum number divisible by both 2 and 3 is equal to a number divisible \nby 2, 3, 4, 5 and 6.\n\nNow, what is the minimum number divisible by both 2 and 3?\n\nThe minimum number divisible by both 2 and 3 is equal to a number divisible \nby 2, 3, 4, 5, 6 and 7.\n\nNow, what is the minimum number divisible by both 2 and 3?\n\nThe minimum number divisible by both 2 and 3 is equal to a number divisible \nby 2, 3, 4, 5, 6, 7 and 8.\n\nSo, we have found the minimum number divisible by both 2 and 3.\n\nSo, the answer is the minimum number divisible by both 2 and 3.\n\"\"\"\n\nfrom typing import List\nimport math\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '6'\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3) == 6\n\n\"\"\"\n\nimport math",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '6'\nassert solution('7') == '14'\nassert solution('12') == '24'\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\nfrom math import gcd\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == 6\n\n-------\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(123) == '12'\nassert solution(9) == '6'\n\"\"\"\n\nimport math\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2\") == \"2\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n3 4\") == \"2\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\\n3 5\") == \"2\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input) == expected_result\n\n------\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n') == '2'\nassert solution('3 3\\n') == '0'\nassert solution('6 4\\n') == '2'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2\") == \"2\"\n\"\"\"\n\nn, d = map(int, stdin.readline().split())\nprint(n//(d+1))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"4 2\") == \"3\"\nassert solution(\"7 6\") == \"2\"\nassert solution(\"1 5\") == \"5\"\nassert solution(\"3 10\") == \"1\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 2\") == \"2\"\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 2') == 2\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"2\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('16') == 'pon'\nassert solution('3') == 'bon'\nassert solution('0') == 'hon'\nassert solution('1') == 'pon'\nassert solution('2') == 'hon'\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('16') == 'pon'\nassert solution('10') == 'bon'\nassert solution('100') == 'hon'\nassert solution('555') == 'hon'\nassert solution('121') == 'hon'\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\"\n\nimport re\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"123\") == \"bon\"\nassert solution(\"8\") == \"pon\"\nassert solution(\"00\") == \"hon\"\n\n---\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\"\n\nn = input()",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('16') == \"pon\"\nprint(solution('16'))\n\n\nn2 4 5 7 9\n0 1 6 8\n3\n\n2 4 5 7 9\n0 1 6 8\n3\n\n2 4 5 7 9\n0 1 6 8\n3\n\"\"\"\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"18\") == \"bon\"\nassert solution(\"1\") == \"hon\"\nassert solution(\"9\") == \"hon\"\nassert solution(\"2\") == \"pon\"\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"16\") == \"pon\"\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('16') == 'pon'\n\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n3\n3 1 2\n''') == '11'",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\\n\") == \"11\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\\n\") == 11\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\") == 11\nprint(solution(\"3 1 2\"))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2') == '11'",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == 11\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 2\\n') == 11\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\") == \"11\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1 2\\n') == 11\nassert solution('3 5 7\\n') == 46\n\"\"\"\n\nfrom math import comb\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == 11\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readlines()\n\nn = int(input[0].strip(\"\\n\"))\nd = list(map(int, input[1].split()))\n\nsum = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        sum += d[i] * d[j]\n\nprint(sum)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n4\\n3') == '4'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\"\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n3\n1\n4\n3\n\"\"\") == '4\\n3\\n4'\nassert solution(\n\"\"\"\n2\n1\n4\n3\n\"\"\") == '4\\n4'\nassert solution(\n\"\"\"\n2\n1\n4\n2\n\"\"\") == '4\\n4'\nassert solution(\n\"\"\"\n2\n3\n4\n2\n\"\"\") == '4\\n4'\nassert solution(\n\"\"\"\n2\n3\n2\n4\n\"\"\") == '4\\n4'\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n5\") == \"5\\n5\\n5\\n5\\n5\"\n\"\"\"",
        "num_ids_2": 62,
        "num_ids_4": 62
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1\\n4\\n3\\n') == '4\\n3\\n4\\n'\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1\\n4\\n3\\n') == '4\\n3\\n4\\n'\n\nprint(solution(stdin))\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == '4\\n3\\n4'\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('2\\n1\\n4') == '3\\n4'\nassert solution('2\\n2\\n4') == '3\\n4'\n",
        "num_ids_2": 27,
        "num_ids_4": 46
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3') == '9'",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"9\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n\") == \"9\"\n\n'''\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a) == b\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n') == '9'\n\"\"\"\n\nimport sys\n\na, b = map(int, sys.stdin.readline().split())\n\nprint(a + (a - 1) * (a - 2) // 2 + b * (b - 1) * (b - 2) // 2)\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\") == \"9\"\n\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solve(self, A: int, B: int) -> int:\n        if A == B:\n            return (A + 1) * (A + 2) // 2\n\n        if B == 0:\n            return 1\n\n        return self.solve(A, B - 1) + self.solve(A, B - 2) + self.solve(A - 1, B - 1)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n') == '9'\n\"\"\"\nfrom collections import deque\n\ninput = int(input())\nbutton_a = int(input())\nbutton_b = int(input())",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n') == '9'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n\") == \"9\"\nassert solution(\"1 1\\n\") == \"2\"\nassert solution(\"5 5\\n\") == \"10\"\nassert solution(\"1 2\\n\") == \"3\"\nassert solution(\"1 2\\n\") == \"3\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3') == '9'\n\"\"\"\n\n\"\"\"\n\uc81c\uc57d\uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uc774\uc720\ub85c \ub0b4 \ud480\uc774\uac00 \ub9de\ucd94\uc9c0 \ubabb\ud558\uc600\ub2e4.\n\uc774\ub7f0 \uc81c\uc57d\uc870\uac74\uc744 \uc8fc\uc5b4\uc8fc\uba74 \uc5b4\ub5bb\uac8c \ud574\uc57c\ud560\uae4c\uc694?\n\uc81c\uc57d\uc870\uac74\uc744 \uc8fc\uba74 \ubb34\uc5c7\uc744 \ud574\uc57c\ud558\ub294\uac00\uc694?\n\n\uc815\ub9d0 \uc81c\uc57d\uc870\uac74\uc774 \ud544\uc694\ud55c \uacbd\uc6b0\ub294 \uc81c\ud55c\uc774 \uc5c6\ub294 \ubb38\uc81c\ub77c \uc0dd\uac01\ud558\uba74 \uc88b\ub2e4.\n\uc81c\ud55c\uc870\uac74\uc740 \ubb34\uc5c7\uc774 \ud544\uc694\ud55c\uac00\uc694?\n\n\ucd5c\ub300 \uac12\uc744 \ucc3e\ub294 \ubb38\uc81c\uc774\uae30 \ub54c\ubb38\uc5d0 \ud480\ub9ac\ub294 \uac83\uc740 \uc88b\uc9c0 \uc54a\ub2e4.\n\n\ub098\ub294 \uadf8\ub7f4 \ud544\uc694\uac00 \uc5c6\uc774 \ubb38\uc81c\ub97c \ud480\uba74 \uacb0\uacfc\uac00 \uc815\ub2f5\uc774 \ub098\uc624\ub3c4\ub85d \ud588\ub2e4.\n\uc989, \ubb38\uc81c\ub97c \ud480 \ub54c\uc5d0 \uc8fc\uc5b4\uc9c4 \uc81c\uc57d\uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uacbd\uc6b0\uc5d0\ub9cc \uc8fc\uc5b4\uc9c4 \ud615\ud0dc\uc758 \uc5f0\uc0b0\uc744 \uc218\ud589\ud55c\ub2e4\ub294 \uac83\uc774\ub2e4.\n\n\uc8fc\uc5b4\uc9c4 \uc81c\uc57d\uc870\uac74\uc774 \ud544\uc694\ud55c \uacbd\uc6b0\ub294 \uc544\ubb34\ub9ac \ubb34\uc2dc\ud574\ub3c4 \uad1c\ucc2e\ub2e4.\n\uc5ed\uc2dc \uc81c\ud55c \uc870\uac74\uc774 \uc5c6\ub294 \ubb38\uc81c\ub77c \uc0dd\uac01\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4.\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"5 3\\n-30 -10 10 20 50\"\n) == \"40\"\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 3\n-30 -10 10 20 50''') == '40'\nprint('PASSED')\n\n'''\nInput:\n2 1\n3\n1 2 1\n\nOutput:\n4\n'''\n\nassert solution('''5 3\n-30 -10 10 20 50''') == '4'\nprint('PASSED')\n\n'''\nInput:\n2 1\n2\n2 2\n\nOutput:\n0\n'''\n\nassert solution('''5 3\n-30 -10 10 20 50''') == '0'\nprint('PASSED')\n\n'''\nInput:\n5 1\n-1 1 2 3 4\n\nOutput:\n0\n'''\n\nassert solution('''5 3\n-30 -10 10 20 50''') == '0'\nprint('PASSED')\n\n'''\nInput:\n5 1\n-30 -10 10 20 50\n\nOutput:\n10\n'''\n\nassert solution('''5 3\n-30 -10 10 20 50''') == '10'\nprint('PASSED')\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n-1 1\") == \"0\"\nassert solution(\"1 1\\n1\") == \"0\"\nassert solution(\"4 1\\n3 2 4 1\") == \"5\"\nassert solution(\"10 4\\n-1 1 2 1 2 1 2 1 2 1\") == \"11\"\n\n\"\"\"\n\nimport math\nimport sys\n",
        "num_ids_2": 30,
        "num_ids_4": 71
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\"\"\"\n\nimport math\n\nN, K = map(int, stdin.split())\nc = list(map(int, stdin.split()))\nc.sort()\n\ntime = 0\nfor i in range(K):\n    time += math.ceil(c[i] / (c[i] - c[i - 1]))\nprint(time)\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '5 3\\n-30 -10 10 20 50'\n) == '40'\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 3 2 5') == '4'\n\nassert solution('4 2\\n1 3 5 2') == '2'\n\nassert solution('5 3\\n-30 -10 10 20 50') == '40'\n\nassert solution('5 3\\n10 30 10 20 50') == '10'\n\nassert solution('5 4\\n10 10 10 10 10') == '10'",
        "num_ids_2": 34,
        "num_ids_4": 72
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"3\\n4 -3 0 1\"\n) == '3'\n\"\"\"\n\n\"\"\"\n---SOLUTION---\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2\\n-10 -2\") == \"10\"\nassert solution(\"3 2\\n1 2 3\") == \"0\"\nassert solution(\"1 1\\n1\") == \"0\"\nassert solution(\"7 8\\n1 2 3 4 5 6 7\") == \"0\"\nassert solution(\"1 10\\n1\") == \"0\"\n",
        "num_ids_2": 33,
        "num_ids_4": 67
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\"\"\"\n\n\nimport sys\nimport math\nfrom typing import List\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 13\\n\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 13\") == \"2\"\n\n\"\"\"\n\nimport sys\n\na, b = (int(i) for i in sys.stdin.read().split())\nprint(max(0, b - a))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 13\") == \"2\"\n\"\"\"\n\na, b = input().split()\nprint(sum(map(lambda x: x - 1, range(int(a) + 1, int(b) + 1))))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''8 13''') == '2'\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 15') == '2'\nassert solution('8 13') == '2'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 13') == '2'\n\"\"\"\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 13') == '2'\n\"\"\"\n\nimport sys\nimport re\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 13') == '2'\n\"\"\"\n\nimport sys\n\na, b = map(int, sys.stdin.readline().split())\n\nprint(b-a-1)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 13') == '2'\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(5000)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12 13\") == \"2\"\n\"\"\"\n\nnums = list(map(int, stdin.split(' ')))\n\nprint(sum(range(nums[0], nums[1]+1)))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 4\") == '3'\nassert solution(\"1 2\") == '2'\n\"\"\"\n\nh, a = list(map(int, input().split()))\n\nh -= a\n\nwhile h >= 0:\n    h -= a\n    h += a\n\nprint(h // a)\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 4\") == \"3\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 4\\n') == '3'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 4\") == \"3\"\nassert solution(\"100 4\") == \"4\"\nassert solution(\"1 1\") == \"1\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"10 4\"\n) == \"3\"\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 4\\n') == '3'\nassert solution('5 4\\n') == '3'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input) == output\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 4\") == '3'\nassert solution(\"10 20\") == '2'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4\") == 3\nassert solution(\"1 1\") == 0\nassert solution(\"100 100\") == 0\nassert solution(\"10 100\") == 1\nassert solution(\"100 1000\") == 1\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 4\\n') == '3'\n\"\"\"\n\nimport sys\n\nH, A = [int(x) for x in sys.stdin.readline().rstrip().split()]\n\nh = A\ncount = 0\nwhile h > 0:\n    h -= A\n    count += 1\n\nprint(count)",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 75 25 100') == '50'\nassert solution('0 10 0 20') == '20'\nassert solution('50 51 51 52') == '100'\nassert solution('50 51 52 53') == '100'\n\"\"\"\n\n\"\"\"\n\na, b, c, d = map(int, stdin.read().split())\n\na_time = min(a, c)\nb_time = max(b, d)\n\nprint(b_time - a_time)\n\n\"\"\"\n\na, b, c, d = map(int, input().split())\n\na_time = min(a, c)\nb_time = max(b, d)\n\nprint(b_time - a_time)\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 75 25 100\") == 50\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 75 25 100') == '50'",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('0 25 100') == '50'\n\"\"\"\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 75 25 100') == \"50\"\n\"\"\"\n\nA, B, C, D = map(int, stdin.split())\nprint(B-A+D-C)\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"100 75 25 0\") == \"50\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 75 25 100') == '50'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(105) == 1\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('105') == '1'\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\"\n\nfrom math import ceil, sqrt",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"105\") == 1\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"105\") == 1\n\"\"\"\n\nn = int(input())",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"105\") == 1\n\"\"\"\n\nN = int(stdin.readline())\ncount = 0\nfor i in range(1, N + 1):\n    if i % 2!= 0 and len(list(filter(lambda x: i % x == 0, range(1, i)))) == 8:\n        count += 1\nprint(count)\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"105\") == 1\n\"\"\"\n\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(105) == 1\n\"\"\"\n\n\"\"\"\nYou want to put a new apple onto the board in such a way that its total distance from the other apples is minimized.\n\nHow many ways can you do it?\n\n1. There are no apples on the board.\n2. There is only one apple on the board.\n3. There are two apples on the board.\n\nIn the first two cases, you can put the new apple on any place and then, if you want to minimize the total distance, you can swap the existing apples with the new one.\n\nIn the last case, you can put the new apple on the first position, then if you want to minimize the total distance, you can swap the first and the second positions.\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('105\\n') == '1'\nassert solution('100\\n') == '0'\nassert solution('3\\n') == '0'\nassert solution('2\\n') == '0'\nassert solution('1\\n') == '1'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"105\\n\") == \"1\\n\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '7 3\\n2 2\\n3 3\\n'\n) == '1'\n\n\"\"\"\n\nfrom collections import Counter\nimport math",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\") == '1'\n\"\"\"\n\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3\\n2 2 3') == '1'\nassert solution('10 4\\n2 2 3 4 5 6 7 8 9 10') == '0'\nassert solution('3 1\\n1 1') == '0'\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 54
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\\n2 2 3\") == \"1\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\\n2 2 3\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 3') == '1'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\\n2 2\\n3\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"111\") == \"111\"\nassert solution(\"1010\") == \"1010\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('111') == '111'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"111\"\n) == \"111\"\n\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('111') == '111'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n\nN = int(stdin.readline())\nfor i in range(1, N + 1):\n    if i % 10 == N % 10:\n        print(i)\n        break\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1000') == '1000'\nassert solution('1010') == '990'\nassert solution('1111') == '999'\nassert solution('10101010') == '990'\n\n---\n### Solution\n\nAs far as I can tell, this solution is not the most efficient way to solve this problem.\nHowever, I don't have time to find a more efficient one.\n\n---\n### Discussion\n\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 39
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(111)) == str(111)",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 6 3') == '5'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\"\n\nfrom typing import List\nimport unittest\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"5\"\nassert solution(\"1 6 3\") == \"5\"\nassert solution(\"1 2 1\") == \"4\"\nassert solution(\"1 2 3 4\") == \"8\"\nassert solution(\"1 2 3 4 5\") == \"10\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1 6 3''') == '5'\nassert solution('''3 2 1''') == '3'\nassert solution('''5 5 3''') == '4'\nassert solution('''2 2 2''') == '1'\nassert solution('''1 5 4''') == '3'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 6 3\\n') == '5'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\"\n\nimport sys\n\nA = list(map(int, sys.stdin.readline().strip().split()))\nN = A[0]\nK = A[1]\nC = A[2]\n\ndp = [[0] * (K + 1) for _ in range(N + 1)]\n\nfor i in range(1, N + 1):\n    for j in range(1, K + 1):\n        if j < i:\n            dp[i][j] = dp[i - 1][j]\n        else:\n            dp[i][j] = min(dp[i - 1][j - i] + C, dp[i - 1][j])\n\nprint(dp[N][K])\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('1 2') == '0'\nassert solution('1 2 3') == '0'\nassert solution('1 2 3 4') == '0'\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8') == '5'\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\") == \"5\"\nassert solution(\"4\") == \"5\"\nassert solution(\"2\") == \"5\"\nassert solution(\"1\") == \"5\"\nassert solution(\"4\") == \"5\"\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(8) == 5\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8') == '5'\nassert solution('4') == '2'\nassert solution('2') == '1'\nassert solution('1') == '1'\n\nassert solution('8') == '5'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin='8') == '5'\nprint(solution(stdin='8'))\n\n----------------------------------------------------\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8') == '5'\nassert solution('4') == '5'\nassert solution('2') == '5'\nassert solution('1') == '5'\nassert solution('8') == '5'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(s) == m\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\") == \"5\"\nprint(\"PASSED\")\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8') == '5'\nassert solution('4') == '5'\nassert solution('1') == '5'\nassert solution('2') == '5'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8') == '5'\nassert solution('7') == '3'\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"5 10 10 20\") == \"Yes\"\nassert solution(\"1 1 1 1\") == \"Yes\"\nassert solution(\"5 2 1 2\") == \"No\"\nassert solution(\"5 5 5 5\") == \"No\"\n\n'''\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 3 4 2''') == 'No'\nassert solution('''10 9 10 10''') == 'Yes'\n'''\n'''\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"20 20 20 20\") == \"Yes\"\nassert solution(\"50 50 50 50\") == \"Yes\"\nassert solution(\"1 100 1 100\") == \"No\"\nassert solution(\"1 1 1 1\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"10 10 10 9\") == \"No\"\nassert solution(\"10 10 10 10\") == \"No\"\nassert solution(\"10 9 9 10\") == \"No\"\nassert solution(\"10 10 10 9\") == \"No\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 9 10 10') == 'No'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\\n\") == \"5\"\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 1\\n2 2\") == \"2\"\nassert solution(\"1\\n10\\n2\") == \"10\"\n\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\nprint(\"PASSED\")",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 4 1 2\\n5 8 9 7\") == \"8\"\n\"\"\"\n\nfrom typing import List, Tuple\n\nfrom utils import timing\n\n_INPUT_LINES = int(input())\n_INPUT_STR = input()\n_INPUT_ARRAY = list(map(int, _INPUT_STR.split()))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10 5\\n6 3 4\") == \"5\"\nassert solution(\"3\\n10 2 5\") == \"5\"\n\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\\n1 2 3\") == \"10\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\nline = sys.stdin.readline().strip().split(\" \")\nvalues = [int(v) for v in line[:n]]\ncosts = [int(c) for c in line[n:]]\n\nsum_of_values = sum(values)\nsum_of_costs = sum(costs)\n\nmax_diff = sum_of_values - sum_of_costs",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n3 4\\n1 2 3 4 5 6') == '15'\nassert solution('5\\n10 2 5\\n6 3 4') == '10'\nassert solution('7\\n1 2 3 4 5 6 7\\n1 1 1 1 1 1 1') == '6'\nassert solution('3\\n1 1 1\\n1 2 3') == '4'\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 90
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\\n\"\nassert solution(\"4 4\\n#.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\\n\"\nassert solution(\"4 4\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\\n\"\nassert solution(\"4 4\\n....\\n#.#\\n##.#\\n.#.#\") == \"###\\n###\\n.##\\n\"\n\n\"\"\"",
        "num_ids_2": 70,
        "num_ids_4": 136
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 4\n##.#\n....\n##.#\n.#.#''') == '###\\n###\\n.##'\n\n'''\nYou have been given a game grid of H \u00d7 W squares.\nThere is a frog placed on a random square of the grid.\nThe grid represents a river, and the frog moves across the river by jumping over one or several squares to reach a new square.\nAt each square the frog can jump over one or several other squares.\nLet A be the set of squares that can be jumped over in one move.\nThe frog has lost the game if it cannot reach the square (H, W).\n\nFind the minimum number of moves that the frog needs to make in order to reach the destination.\n\nInput\nThe first line of the input contains two numbers H and W (1\u2009\u2264\u2009H,\u2009W\u2009\u2264\u2009100) \u2014 the number of rows and the number of columns of the game grid.\n\nNext H lines contain W characters. Each of these lines represents a row of the game grid.\nEach character is either a space or a period.\n\nOutput\nPrint one number \u2014 the minimum number of moves that the frog needs to make in order to reach the destination.\n\nExamples\n3 3\n..\n.#\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4\\n##.#\\n....\\n##.#\\n.#.#') == '###\\n###\\n.##'\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 4\n##.#\n....\n##.#\n.#.#''') == '###\\n###\\n.##\\n'\nassert solution('''2 2\n.#\n.#''') == '.#\\n'\nassert solution('''2 2\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4\\n#.#\\n...\") == \"#.#\\n.##\"\nassert solution(\"4 4\\n#.#\\n#.#\\n...\") == \"#.#\\n#.#\"\nassert solution(\"4 4\\n##.#\\n#.#.\\n...\") == \"#.#\\n#.#\"\nassert solution(\"4 4\\n.#.#\\n#.#.\\n...\") == \"###\"\nassert solution(\"4 4\\n#.#\\n...\\n#.#\") == \"###\"\n",
        "num_ids_2": 48,
        "num_ids_4": 98
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\n\"\"\"\n\nimport sys\n\nlines = [line.strip() for line in sys.stdin.readlines()]\nH, W = [int(x) for x in lines[0].split()]\ngrid = {(i, j) for i in range(H) for j in range(W)}\n\nsquares = {(i, j) for i, j in grid if lines[i + 1][j] == \"#\"}\n\nfor line in lines[1:H + 1]:\n    for j in range(W):\n        if line[j] == \"#\":\n            grid.remove((i, j))\n            squares.remove((i, j))\n            break\n\nwhile True:\n    for i, j in grid:\n        if (i, j) in squares and (i + 1, j) in squares and (i - 1, j) in squares and (i, j + 1) in squares and (i, j - 1) in squares:\n            grid.remove((i, j))\n            squares.remove((i, j))\n            break\n    else:\n        break\n\nprint(\"\\n\".join(\"\".join(\"#\" if (i, j) in squares else \".\" for j in range(W)) for i in range(H)))\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4 4\n##.#\n....\n##.#\n.#.#\n\"\"\") == \"\"\"\n3 3\n.#.\n.#.\n.#.\"\"\"\nassert solution(\"\"\"\n4 4\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\nassert solution(\"3 4\\n###\\n#.#\\n###\\n\") == \"###\\n###\\n#.#\"\nassert solution(\"1 1\\n#\") == \"#\"\n\"\"\"\n\nimport collections",
        "num_ids_2": 63,
        "num_ids_4": 76
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\nassert solution(\"4 4\\n.#.#\\n....\\n.#.#\\n.#.#\") == \"###\\n###\\n.##\"\n\n----------------------\n\nimport sys",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n\") == \"6.28318530717958623200\"\n\"\"\"\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\n\n\"\"\"\n\nfrom math import *\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n') == '6.28318530717958623200'\nassert solution('1\\n2\\n') == '5.6594939759036144579'\n\n-----Explanation-----\nSince this problem only asks for the solution within a certain range, we only need to check the absolute error between the input and the solution.\nThe solution is based on the circumference formula: 2 * pi * r.\n\n-----Test Case-----\nInput Format\n\nThe first line of input is an integer R.\n\nConstraints\n\n1 \\leq R \\leq 100\n\nOutput Format\n\nOutput the circumference of the circle.\n\nSample Input 0\n\n1\n\nSample Output 0\n\n6.28318530717958623200\n\nExplanation 0\n\nThe input is R = 1, and 1 is the radius of a circle of circumference 6.28318530717958623200.\n\n\nSample Input 1\n\n2\n\nSample Output 1\n\n5.6594939759036144579\n\nExplanation 1\n\nThe input is R = 2, and 2 is the radius of a circle of circumference 5.6594939759036144579.\n\n\"\"\"\n\n\"\"\"\nSolution Approach\n\n1. Calculate the circumference.\n2. Raise it to the power of n, where n is the number of repetitions.\n3. Calculate the remainder.\n4. Divide the result by the circumference.\n5. Convert the result to a decimal number.\n\nTo calculate the circumference, we can use the formula for a circle.\n\nThe circumference of a circle of radius r is 2 * PI * r.\n\nUsing the formula for the circumference of a circle of radius r, we can calculate the circumference as follows:\n\ncircumference = 2 * PI * r\n\nWhere r is the radius of a circle of radius r.\n\nTo raise the circumference to the power of n, we can use the formula for raising a number to a power:\n\ncircumference = circumference ** n\n\nWhere n is the power.\n\nTo calculate the remainder, we can use the formula for the remainder:\n\nremainder = circumference % 1\n\nNote that the remainder is always a decimal number, so we can use the modulus operator to determine the remainder.\n\nTo find the value of the remainder, we can use the modulus operator.\n\nremainder = circumference % 1\n\nTo find the value of the remainder, we can use the modulus operator.\n\nremainder = circumference % 1\n\nThe remainder is the value we need to keep track of, and the value we need to subtract the remainder from.\n\n\"\"\"",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(1)) == '6.28318530717958623200'\nassert solution('1') == '6.28318530717958623200'\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\nassert solution(\"2\") == \"12.566370614359172953850\"\nassert solution(\"100\") == \"39813.27423381213835457569\"\nassert solution(\"200\") == \"784813.02504760452598\"\nassert solution(\"100\") == \"39813.27423381213835457569\"\n\"\"\"\n\n\"\"\"\nSOLUTION:\n\nimport math\n\nr = int(stdin.readline())\nprint(2 * math.pi * r)\n\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 79
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '6.28318530717958623200'\nassert solution('10') == '100.465248872194043735'\nassert solution('1000') == '3.1415926535897932384626'\n\"\"\"\n\nimport math",
        "num_ids_2": 37,
        "num_ids_4": 57
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\nassert solution(\"1.1\") == \"6.28318530717958623200\"\nassert solution(\"1.2\") == \"6.28318530717958623200\"\nassert solution(\"1.23\") == \"6.28318530717958623200\"\nassert solution(\"1.2345\") == \"6.28318530717958623200\"\n",
        "num_ids_2": 38,
        "num_ids_4": 78
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '6.28318530717958623200'\nassert solution('2') == '12.566370614359172953850'\nassert solution('3') == '19.433962264150943702741'\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 59
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"HSSS\") == \"No\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ASSA') == 'Yes'\nassert solution('AACCC') == 'No'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ASSAS\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ASSA') == 'Yes'\nassert solution('ABBA') == 'No'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ASSA') == 'Yes'\nassert solution('ASDAS') == 'No'\nassert solution('ASDA') == 'No'\n\"\"\"\n\n\"\"\"\nSolution:\n\n- input\n- check the number of unique characters\n- find the first unique character, and remove it\n- check the number of unique characters\n- repeat above steps until the length of the string is 2\n\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 34
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ASSA') == 'Yes'\nassert solution('QWEE') == 'No'\nassert solution('LOLO') == 'No'",
        "num_ids_2": 23,
        "num_ids_4": 35
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ASSS') == 'Yes'\nassert solution('ASSD') == 'No'\nassert solution('ASSS') == 'Yes'\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ASSS') == 'Yes'\nassert solution('AAAB') == 'No'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ASSA') == \"Yes\"\nassert solution('ASAA') == \"No\"\nassert solution('AASS') == \"Yes\"\nassert solution('AAAB') == \"No\"\nassert solution('AASSS') == \"Yes\"\n\n\"\"\"\n\nimport unittest\n\n\nclass SolutionTest(unittest.TestCase):\n    def test_solution(self):\n        ",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"-13 3\") == \"-10\"\nassert solution(\"-13 -3\") == \"3\"\nassert solution(\"1 -2\") == \"-1\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 37
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"-13 3\") == '-10'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a, b) == c\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 0') == 0\nassert solution('1 0') == 0\nassert solution('0 1') == 1\nassert solution('1 1') == 1\nassert solution('0 9') == 9\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('-13 3') == '-10'\n\"\"\"\n\nA, B = map(int, stdin.split())\n\nprint(-max(A-B, A+B, A*B))\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('-13 3') == '-10'\n\"\"\"\n\na, b = map(int, input().split())\n\nprint(max(a + b, a - b, a * b))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"-13 3\") == \"-10\"\nassert solution(\"-13 -3\") == \"-16\"\nassert solution(\"-13 *3\") == \"-39\"\nassert solution(\"-13/3\") == \"-39\"\nassert solution(\"13/3\") == \"39/3\"\n",
        "num_ids_2": 25,
        "num_ids_4": 51
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(solution(str(input())))\nprint('Correct')\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n6 5 6 8\") == 3\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1 1') == '0'\nassert solution('1 2 3 4 5') == '3'\nassert solution('1 2 1 3') == '1'\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 6 5 6 8\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\"\n\nfrom collections import deque\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 6 5 6 8') == '3'\nassert solution('4 6 8 7 2') == '1'\nassert solution('4 6 8 5 4') == '1'\n\"\"\"\n\n\"\"\"\nimport sys\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n6 5 6 8') == 3\n\n\"\"\"\nimport sys\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n\"\"\"\n\nN = int(input())\n\nH = list(map(int, input().split()))\n\ncount = 0\n\nfor i in range(N):\n    if i == 0:\n        if H[i] <= H[i+1]:\n            count += 1\n    elif i == N-1:\n        if H[i-1] <= H[i]:\n            count += 1\n    else:\n        if H[i-1] <= H[i] and H[i] <= H[i+1]:\n            count += 1\n\nprint(count)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\n",
        "num_ids_2": 45,
        "num_ids_4": 65
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 1 1 1') == '4\\n1 1 1 1'\nassert solution('7\\n1 2 3 1 2 3 4') == '2\\n3 4'\nassert solution('5\\n1 2 1 2 1') == '3\\n2 2 1'\nassert solution('5\\n1 2 1 2 1') == '3\\n2 2 1'",
        "num_ids_2": 45,
        "num_ids_4": 89
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(output())\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"7\\n1 2 3 1 2 3 4\"\n) == \"2\"\n\nassert solution(\n    \"4\\n1 1 1 1\"\n) == \"4\"\nassert solution(\n    \"5\\n1 2 1 2 1\"\n) == \"1\"\nassert solution(\n    \"5\\n1 2 1 2 1\"\n) == \"1\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\n\nprint(solution(\"5\\n1 2 1 2 1\"))",
        "num_ids_2": 45,
        "num_ids_4": 65
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3 4') == '1 2 3 4'\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n2 2 1\"",
        "num_ids_2": 45,
        "num_ids_4": 67
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\n",
        "num_ids_2": 45,
        "num_ids_4": 65
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 1 2 3 4') == '2'\nassert solution('1 1 1 1') == '4'\nassert solution('1 2 3 4 5') == '1'",
        "num_ids_2": 29,
        "num_ids_4": 43
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\n\n\"\"\"\n",
        "num_ids_2": 45,
        "num_ids_4": 65
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"3\"\nassert solution(\"21\") == \"4\"\nassert solution(\"999999999\") == \"333333333\"\nassert solution(\"999999984\") == \"333333328\"",
        "num_ids_2": 20,
        "num_ids_4": 49
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n6\\n7\\n21\\n28\\n999999999\\n999999984') == '1\\n2\\n1\\n7\\n4\\n333333333\\n333333328'\n\n\"\"\"",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2\\n1') == '1'\nassert solution('3\\n1') == '1'\nassert solution('1\\n2') == '1'\nassert solution('1\\n3') == '2'\n",
        "num_ids_2": 21,
        "num_ids_4": 47
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == 1\nassert solution(\"6\") == 2\nassert solution(\"7\") == 1\nassert solution(\"21\") == 7\nassert solution(\"28\") == 4\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n6\") == \"1\"\nassert solution(\"7\\n21\") == \"4\"\nassert solution(\"999999999\\n999999984\") == \"333333333\"\nassert solution(\"7\\n6\\n7\\n21\") == \"2\\n1\\n1\\n7\"\nassert solution(\"4\\n4\\n4\\n4\") == \"333333328\"",
        "num_ids_2": 26,
        "num_ids_4": 74
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"1\") == \"2\"\nassert solution(\"7\") == \"4\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3) == 1\nassert solution(6) == 2\nassert solution(7) == 1\nassert solution(21) == 7\nassert solution(28) == 4\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n6') == '1'\nassert solution('7\\n21') == '4'\nassert solution('1\\n2') == '2'\nassert solution('7\\n28') == '3'\nassert solution('2\\n1') == '1'",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3\") == \"1\"\nassert solution(\"2\\n6\") == \"2\"\nassert solution(\"2\\n7\") == \"1\"\nassert solution(\"3\\n21\") == \"4\"\nassert solution(\"7\\n999999999\") == \"333333328\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n6\") == \"1\"\nassert solution(\"7\\n21\") == \"2\"\nassert solution(\"7\\n28\") == \"1\"\nassert solution(\"10\\n1130359523\") == \"1130359523\"\n\n-----Tests-----\n\nsolution(\"1\\n2\") == \"1\"\nsolution(\"3\\n4\") == \"3\"\nsolution(\"7\\n9\") == \"1\"\nsolution(\"10\\n99999\") == \"999999\"\nsolution(\"8\\n111000\") == \"111000\"\nsolution(\"13\\n17\") == \"1\"\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 60
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('512 4') == '50'\n\"\"\"\nimport math",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str([512,4])) == str([50,1])\nassert solution(str([1000000000,9])) == str([1])\nassert solution(str([0,1])) == str([0])\nassert solution(str([20,0])) == str([10])\n",
        "num_ids_2": 36,
        "num_ids_4": 68
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\"\"\"\nfrom math import ceil",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"512 4\") == \"50\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\"\"\"\n\nimport collections\nfrom collections import Counter\nimport re",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"512 4\") == \"50\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"",
        "num_ids_2": 48,
        "num_ids_4": 67
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5') == '2\\n5 5'\nassert solution('3\\n5 1 4') == '2\\n4 5'\nassert solution('7\\n2 2 3 2 1 2 2') == '7\\n1 2 2 2 2 3 2'\n\n-----Solution-----\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 95
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\n\n'''\nimport sys\nimport math\n\nn = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().split()))\n\nmin_diff = math.inf\nmin_diff_arr = []\nfor i in range(n):\n    j = i\n    while j <= i + n - 1:\n        min_diff = min(min_diff, abs(arr[j] - arr[j - i]))\n        j += 1\n    if min_diff!= math.inf:\n        min_diff_arr.append(min_diff)\n\nprint(n - max(min_diff_arr))\nprint(*[arr[i] for i in range(n) if i + min_diff_arr.index(min(min_diff_arr)) == min_diff_arr.index(min(min_diff_arr))])\n",
        "num_ids_2": 48,
        "num_ids_4": 67
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5') == '2\\n5 5'\nassert solution('3\\n5 1 4') == '2\\n4 5'\n\nprint(solution(input()))",
        "num_ids_2": 48,
        "num_ids_4": 67
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7\n4 3 5 1 2 2 1''') == '5', 'Test 1'\nassert solution('''5\n3 7 5 1 5''') == '2 1 1 2 3', 'Test 2'\nassert solution('''3\n5 1 4''') == '2 4 5', 'Test 3'\nassert solution('''7\n2 2 3 2 1 2 2''') == '7 1 2 2 2 2 3', 'Test 4'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n5 5\"\nassert solution(\"7\\n2 2 3 2 1 2 2\") == \"7\\n1 2 2 2 2 3 2\"",
        "num_ids_2": 48,
        "num_ids_4": 95
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"",
        "num_ids_2": 47,
        "num_ids_4": 66
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5') == '2\\n5 5'\nassert solution('3\\n5 1 4') == '2\\n4 5'\nassert solution('7\\n2 2 3 2 1 2 2') == '7\\n1 2 2 2 2 3 2'\n",
        "num_ids_2": 48,
        "num_ids_4": 95
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\nassert solution(\"7\\n2 2 3 2 1 2 2\") == \"7\\n1 2 2 2 2 3 2\"\n\n\"\"\"\nfrom typing import Dict, List, Set, Tuple",
        "num_ids_2": 48,
        "num_ids_4": 95
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\nassert solution(\"7\\n2 2 3 2 1 2 2\") == \"7\\n1 2 2 2 2 3 2\"\n\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 95
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == '2'\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == '-1'\n\n\n\"\"\"",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == '2'\nassert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == '-1'\n\"\"\"\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == '2'\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 16\n10 8\n7 4\n3 1\n5 4''') == '2'\n\nassert solution('''4 16\n10 8\n7 4\n3 1\n5 4''') == '-1'\n\nassert solution('''4 16\n10 8\n7 4\n3 1\n5 4''') == '2'\n\nassert solution('''4 16\n10 8\n7 4\n3 1\n5 4''') == '-1'\n\nassert solution('''4 16\n10 8\n7 4\n3 1\n5 4''') == '2'",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"-\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"2\"\n\"\"\"",
        "num_ids_2": 57,
        "num_ids_4": 86
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"0\"",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-\"\n\"\"\"\n\nimport sys\n\nlines = sys.stdin.readlines()\n\nn, m = list(map(int, lines[0].split()))\n\nsongs = []\nfor i in range(1, len(lines)):\n    songs.append(list(map(int, lines[i].split())))\n\ndp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\nfor i in range(n):\n    for j in range(m + 1):\n        if j >= songs[i][1]:\n            dp[i + 1][j] = max(dp[i][j - songs[i][1]] + songs[i][0], dp[i][j])\n        else:\n            dp[i + 1][j] = dp[i][j]\n\ni = n\nj = m\nwhile dp[i][j]!= 0:\n    if dp[i][j] == dp[i - 1][j]:\n        i -= 1\n    else:\n        j -= songs[i - 1][1]\n        i -= 1\n\nprint(i)\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == b\nassert solution(a) == b\n\"\"\"\n\nimport sys\n\nn, m = map(int, input().split())\ns = []\nfor _ in range(n):\n    a, b = map(int, input().split())\n    s.append((a, b))",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '-1'\n\"\"\"\n\nimport sys\n\nINPUT_LINES = list(sys.stdin.read().splitlines())\nINPUT_LINE_COUNT = len(INPUT_LINES)\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport collections",
        "num_ids_2": 28,
        "num_ids_4": 55
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 3\\n 6 1 1\\n 6 6 1\\n 5 2 2') == 'tleelte'\nassert solution('4 5 3\\n 6 1 1\\n 6 6 1') == 'qwerty'\nassert solution('4 5 3\\n 6 1 1\\n 6 6 1') == 'vvvvvv'\nassert solution('4 5 3\\n 6 1 1\\n 6 6 1') == 'abcde'\n",
        "num_ids_2": 53,
        "num_ids_4": 100
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 5 3\") == \"tleel\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5 3\") == \"tleel\"\n\"\"\"\n\n\"\"\"\nAnother solution\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 5 3') == 'tleel'\nassert solution('6 1 1') == 'qwerty'\nassert solution('6 6 1') == 'vvvvvv'\nassert solution('5 2 2') == 'abcde'",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5 3\") == \"tleel\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5 3\\n6 1 1\\n6 6 1\") == \"tleelte\\nqwerty\\nvvvvvv\"\n\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5 3\") == \"tleel\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\") == \"tleelte\"\n\"\"\"\n\nfrom typing import List\n\nimport math\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5 3\") == \"tleel\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 12 6\") == 12\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20 12 6') == '12'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nn, x, t = [int(num) for num in stdin.split('\\n')]\n\nprint(n * (t // x) + t % x if t % x else n * (t // x))\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 12 6\") == '12'\nassert solution(\"20 3 5\") == '5'\nassert solution(\"20 12 3\") == '8'\n\"\"\"\n\nimport sys\n\nN, X, T = map(int, sys.stdin.readline().split())",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20 12 6') == '12'\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 12 6\") == \"12\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('20 12 6') == '12'\nassert solution('15 11 5') == '4'\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20 12 6') == '12'\n\"\"\"\n\nn, x, t = map(int, input().split(' '))",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(solution(str(input())))\nprint(str(solution(str(input()))))\n\nhttps://www.codewars.com/kata/57bc8ca45e814dacd80000a7/train/python\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('20 12 6\\n') == '12'\n'''\n\nfrom math import ceil",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"3\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\n3\\n5\\n1\\n9\\n2\\n4\\n6\\n8\\n') == '2'\nassert solution('8\\n3\\n5\\n1\\n9\\n2\\n4\\n6\\n8\\n') == '2'\n\n----- Note -----\nThis solution is not the best solution.\nBut you can try to solve this task in your own way and report it on discussion board.\n\"\"\"",
        "num_ids_2": 72,
        "num_ids_4": 72
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n3\n2\n1\n1\n2''') == '1'\nassert solution('''8\n2\n2\n1\n1\n1\n1\n1\n1''') == '0'\nassert solution('''10\n2\n4\n1\n2\n3\n2\n3\n4\n4''') == '3'\nassert solution('''9\n4\n4\n4\n4\n3\n3\n2\n1\n2''') == '3'\nassert solution('''10\n3\n4\n5\n2\n1\n1\n1\n2\n3''') == '2'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n') == '4'\nassert solution('8\\n') == '2'\nassert solution('5\\n') == '2'\nassert solution('3\\n') == '1'\nassert solution('1\\n') == '0'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n3\\n2\\n2\\n1\\n1') == '3'\n\"\"\"\nimport sys\n\nn = int(input())",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\") == \"2\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8\\n') == '2'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '5'\n\"\"\"\n\nN = int(input())",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"8\") == \"2\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 2''') == '3'\nassert solution('''1 3''') == '3'\nassert solution('''2 1''') == '1'\nassert solution('''5 4''') == '3'\nassert solution('''100 100''') == '100'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == 1\nassert solution(\"7 3\") == 2\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3\") == \"3\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"4 2\") == \"1\"\n\n-------",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3') == '3'\nassert solution('5 5') == '4'\n\n----------------------",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3\") == \"3\"\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5') == '3'\nassert solution('1 3') == '3'\nassert solution('10 100') == '10'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3\") == \"3\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3\\n\") == \"3\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3') == '3'\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3') == '3'\nassert solution('3 7') == '3'\nassert solution('5 10') == '2'\nassert solution('1 4') == '4'\nassert solution('5 25') == '3'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_stdin.get_ints()) == test_stdin.get_output()\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 12') == '16'\nassert solution('10 20') == '10'\nassert solution('9 2') == '1'\nassert solution('18 20') == '12'\n\"\"\"\n\nimport math\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 12\") == \"16\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 12\") == \"16\"\nassert solution(\"12 4\") == \"8\"\nassert solution(\"4 4\") == \"0\"\nassert solution(\"1 2\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 12') == '16'\n\"\"\"\n\na, b = map(int, input().split(' '))",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 12''') == '16'\n'''",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 12\") == \"16\"\n\n'''\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 12\") == \"16\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 12') == '16'\nprint(solution(stdin))\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 12\\n') == '16'\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\nassert solution('chokubai') == 'No'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\nassert solution(\"chokuda\") == \"No\"\n\n\"\"\"\n\nS = stdin.readline().strip()\nT = stdin.readline().strip()\n\nfor i in range(len(S)):\n    if S[i:] + S[:i] == T:\n        print(\"Yes\")\n        break\nelse:\n    print(\"No\")\n",
        "num_ids_2": 26,
        "num_ids_4": 38
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\nassert solution(\"xzc\") == \"No\"\nassert solution(\"y\") == \"No\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 48
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'\n\"\"\"\n\nimport sys\n\nS = sys.stdin.readline().rstrip()\nT = sys.stdin.readline().rstrip()",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\nassert solution(\"jere\") == \"No\"\nassert solution(\"flaflaf\") == \"No\"",
        "num_ids_2": 26,
        "num_ids_4": 50
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\n\"\"\"\n\n\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\nassert solution('konnichiwa') == 'No'\n\"\"\"\n\ns, t = input().split()\nprint('Yes' if t[-1] == s[-1] else 'No')\n",
        "num_ids_2": 26,
        "num_ids_4": 40
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 16') == '9'\n\"\"\"\n\nimport sys\n\nA, B = map(int, sys.stdin.readline().split())",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 16\\n\") == \"9\"\nprint(\"Tests passed.\")\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == IMPOSSIBLE\nassert solution('1 2\\n') == IMPOSSIBLE\nassert solution('1 5\\n') == IMPOSSIBLE\nassert solution('2 16\\n') == 9\nassert solution('5 8\\n') == 4\n",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 16\\n') == '9\\n'\nprint(solution(stdin))\n\"\"\"\n\nimport sys\n\na, b = sys.stdin.readline().split()\n\nc = abs(int(a) - int(b))",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n2 16\n''') == '9'\n\n'''\n---\n\nLOL\n\n'''",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 16') == '9'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\") == \"2\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 16') == '9'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 16') == '9'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 16\\n\") == \"9\"\n\"\"\"\n\nimport math\nfrom typing import List",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('117') == 'Yes'\n\"\"\"\n\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"117\") == \"Yes\"\n\nassert solution(\"16\") == \"No\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('117') == 'Yes'\nassert solution('811') == 'No'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"117\") == \"Yes\"\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(117) == \"Yes\"\n\"\"\"\n\nstdin = input().split()\n\nfor i in stdin:\n    if '7' in i:\n        print('Yes')\n    else:\n        print('No')\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"117\") == \"Yes\"\nassert solution(\"415\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('117') == 'Yes'\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(117) == \"Yes\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('117') == 'Yes'\nassert solution('101') == 'No'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"117\") == \"Yes\"\nassert solution(\"14\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12') == 'Yes'\nassert solution('10') == 'No'\n\"\"\"\n\nimport math",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12\") == \"Yes\"\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(12) == \"Yes\"\nassert solution(15) == \"No\"\nassert solution(21) == \"Yes\"\nassert solution(100) == \"No\"\nassert solution(18) == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12') == 'Yes'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('101\\n12') == 'Yes'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n\nimport math",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12') == \"Yes\"\nassert solution('11') == \"No\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\"\n\nfrom math import gcd\n\nINPUT_1 = \"0 0 0 1\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\"\nimport sys\nimport math\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0 0 1\") == \"1 1 -1 0\"\nassert solution(\"1 2 3 4\") == \"1 2 3 4\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\"\n\nfrom sys import stdin\nfrom itertools import permutations",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 0 1\") == \"1 1 -1 0\"\n\"\"\"\n\n\nimport sys\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 0 1\") == \"1 1 -1 0\"\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0 0 1\") == \"1 -1 1 0\"\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n\"\"\"\n\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('red blue') == '2 4'\n\nIf you solution is right, the given sample will print 2 4, as expected.\n\nCopyright to \u00a9 2020 BrainFights Inc. All rights reserved\n\n'''\n\nS, T = input().split()\nA, B = map(int, input().split())\nU = input()\n\ns, t = 0, 0\nfor i in range(A):\n    if S in str(i):\n        s += 1\n    if T in str(i):\n        t += 1\nfor i in range(B):\n    if U in str(i):\n        s -= 1\n    if U in str(i):\n        t -= 1\nprint(s, t)",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n\nfrom typing import List, NamedTuple\nimport sys\n\nMAX_N = 10\n\nclass Input(NamedTuple):\n    color_s: str\n    color_t: str\n    num_s: int\n    num_t: int\n    color_u: str",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n\nS, T = [int(x) for x in input().split()]\nA, B = [int(x) for x in input().split()]\nU = input()",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n\nS, T = input().split()\nA, B = input().split()\nA, B = int(A), int(B)\nU = input()\n\nprint(str(A) +'' + str(B))",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('red blue') == '2 4'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n\ns, t = input().split()\nA, B = map(int, input().split())\nu = input()\n\nS = A * len(s)\nT = B * len(t)\nU = A * len(u)\n\nans = S + T - U\n\nprint(ans, end=\" \")\nprint(S, T, U)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n-----\nWe have A balls with the string S written on each of them and B balls with the string T written on each of them.\n\nFrom these balls, Takahashi chooses one with the string U written on it and throws it away.\n\nFind the number of balls with the string S and balls with the string T that we have now.\n\n-----Constraints-----\n - S, T, and U are strings consisting of lowercase English letters.\n - The lengths of S and T are each between 1 and 10 (inclusive).\n - S \\not= T\n - S=U or T=U.\n - 1 \\leq A,B \\leq 10\n - A and B are integers.\n\n-----Input-----\nred blue\n3 4\nred\n\n-----Output-----\n2 4\n\"\"\"\n\ns, t = input().split()\n\ns_1 = 0\nt_1 = 0\n\nfor _ in range(int(input())):\n    ball_1 = input()\n    if ball_1 == s:\n        s_1 += 1\n    elif ball_1 == t:\n        t_1 += 1\n\nprint(s_1, t_1, sep=' ')\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('red blue') == '2 4'\n\"\"\"\n\nS, T = [i for i in input().split()]\nA, B = [int(i) for i in input().split()]\nU = input()\n\nans = 0\n\nfor i in range(A):\n    if S == U:\n        ans += 1\n\nfor i in range(B):\n    if T == U:\n        ans += 1\n\nprint(ans, ans)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\nprint('Hooray!')\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abcabc') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"abcde\") == \"No\"\n\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == 'Yes'\n\"\"\"\n\nn = int(input().rstrip('\\n'))\ns = input().rstrip('\\n')\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"abcabcabc\") == \"Yes\"\nassert solution(\"abcabcabcabc\") == \"No\"\nassert solution(\"abcabcabcabccba\") == \"Yes\"\n",
        "num_ids_2": 21,
        "num_ids_4": 46
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\n\n\"\"\"\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"abcabc\"), \"Yes\")\n        self.assertEqual(solution(\"abac\"), \"No\")\n        self.assertEqual(solution(\"abcde\"), \"No\")\n        self.assertEqual(solution(\"abcab\"), \"Yes\")\n        self.",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\nassert solution(\"abcabcabc\") == \"Yes\"\nassert solution(\"abcdabcd\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 36
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == expected_result_1, \"Wrong result for input {}\".format(test_input_1)\nassert solution(test_input_2) == expected_result_2, \"Wrong result for input {}\".format(test_input_2)\n\nprint(\"All tests passed.\")\n\n\"\"\"\n\ntest_input_1 = \"\"\"\n6\nabcabc\n\"\"\"\n\ntest_input_2 = \"\"\"\n6\nababab\n\"\"\"\n\nexpected_result_1 = \"\"\"\nYes\n\"\"\"\n\nexpected_result_2 = \"\"\"\nNo\n\"\"\"\n",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == 'Yes'",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\nassert solution(\"abcabcdef\") == \"No\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"No\"\n\n\"\"\"\n\n\"\"\"\nSolution:\n\ns = \"abc\"\ns += s\nprint(s)\n\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 46
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1 2\") == \"3.0 0\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\nprint(solution(\"2 3 1 2\"))\n\"\"\"\n\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 1 2\") == '3.0'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 1 2') == '3.0 0'\n\n-----Explanation-----\nThe area of the first part is 3.0 units.\nThe area of the second part is 0.0 units.\nThere are no other ways to cut the rectangle.\n\"\"\"\nimport sys\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 1 2') == '3.0'\nassert solution('2 2 1 2') == '0'\nassert solution('2 5 1 1') == '4'\nassert solution('1 1 1 1') == '1'\nassert solution('3 3 1 1') == '0'\n\n\"\"\"\n\nimport math",
        "num_ids_2": 28,
        "num_ids_4": 54
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\n\"\"\"\n\n\"\"\"\nsolution:\nAs it turns out, the problem is actually asking for the maximum area of a rectangle given a point (x,y) that lies within the rectangle or on its border.\nTo find the area, we take the sum of the absolute value of the horizontal and vertical distances between (x,y) and any of the vertices. If we take the minimum of the two, we get the maximum area.\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\nassert solution(\"10 10 1 1\") == \"6.250010 6.250010\"\n\n------Comments------\n\n\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1.0 1'\nassert solution('2 3 1 2') == '3.0 0'\nassert solution('2 3 1 1') == '0.0 1'\nassert solution('2 3 1 3') == '1.0 0'\n",
        "num_ids_2": 22,
        "num_ids_4": 54
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\n\n\"\"\"\n\nW, H, x, y = map(int, stdin.split())",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''6\nG W Y P Y W''') == 'Four'\n\"\"\"\n\nimport sys\nfrom collections import Counter",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n'''",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"G W Y P Y W\") == \"Four\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 P Y\") == \"Four\"\n\"\"\"\n\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = sys.stdin.readline().strip().split()",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\nG W Y P Y W\") == \"Four\"\n\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\nG W Y P Y W\") == \"Four\"\n\nsolution(stdin)\n\"\"\"\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 P P P P\") == \"Four\"\nassert solution(\"4 G G G G\") == \"Four\"\nassert solution(\"4 W W W W\") == \"Four\"\nassert solution(\"4 Y Y Y Y\") == \"Four\"\nassert solution(\"5 P P P P\") == \"Three\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 W Y P Y W') == 'Four'\nassert solution('3 W G Y P Y W') == 'Four'\nassert solution('6 W W W W G G') == 'Four'\nassert solution('1 G Y P Y W') == 'Four'\nassert solution('6 W W W W G G') == 'Four'\n",
        "num_ids_2": 31,
        "num_ids_4": 62
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\nG W Y P Y W\") == \"Four\"\nassert solution(\"4\\nP P P P\") == \"Three\"\n\"\"\"\nimport sys\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"G W Y P Y W\") == \"Four\"\nassert solution(\"G W Y P Y\") == \"Four\"\nassert solution(\"G W Y P\") == \"Four\"\nassert solution(\"G W Y\") == \"Four\"\nassert solution(\"G W\") == \"Four\"\n",
        "num_ids_2": 29,
        "num_ids_4": 54
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3 2\\n2 3 1 3 4 2\") == '6'\nassert solution(\"5 3 3\\n1 2 4 2 3\") == '2'\nassert solution(\"5 5 6\\n1 2 6 10 3\") == '2'",
        "num_ids_2": 39,
        "num_ids_4": 58
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 3 3\n1 2 4 2 3\n''') == 2\n\n'''\n[Analysis]\n1. Use DP, but no need to store any information from the beginning.\n2. Only need to know how many doors with durability equals to 0 at the end of each round.\n3. f[i][d] is the number of doors with durability equals to 0 at the end of the i-th round, given that you can try to break the first i doors.\n4. f[i][d] = f[i-1][0] + f[i-1][d-1]\n\nTime complexity: O(n*d)\nSpace complexity: O(n)\n'''\n\nfrom typing import List\n\n\nclass Solution:\n    def solution(self, n: int, x: int, y: int) -> int:\n        f = [[0 for _ in range(d + 1)] for d in range(n + 1)]\n        for i in range(1, n + 1):\n            f[i][0] = f[i - 1][0] + f[i - 1][d - 1]\n            f[i][d] = f[i - 1][0] + f[i - 1][d - 1]\n            for d in range(1, i):\n                f[i][d] = f[i - 1][0] + f[i - 1][d - 1] + f[i - 1][d]\n            for d in range(max(0, i - x), min(i, y) + 1):\n                f[i][d] = f[i - 1][0] + f[i - 1][d - 1] + f[i - 1][d]\n        return f[n][0]\n\n\nimport sys",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 6 2\") == 3\nassert solution(\"7 6 3\") == 1\nassert solution(\"7 5 3\") == 0\nassert solution(\"6 6 3\") == 1\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\\n1 2 3 4 2\") == \"6\"\nassert solution(\"5 3 3\\n1 2 4 2 3\") == \"2\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3 2\\n2 3 1 3 4 2\") == \"6\"\nassert solution(\"5 3 3\\n1 2 4 2 3\") == \"2\"\nassert solution(\"5 5 6\\n1 2 6 10 3\") == \"2\"\n\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 58
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 1 3 4 2') == 6\nassert solution('2 3 3 4 2') == 2\nassert solution('5 3 3') == 2\nassert solution('5 5 6') == 2\n\"\"\"\nfrom collections import Counter\n",
        "num_ids_2": 25,
        "num_ids_4": 45
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3 2\\n2 3 1 3 4 2\") == 6\nassert solution(\"5 3 3\\n1 2 4 2 3\") == 2\nassert solution(\"5 5 6\\n1 2 6 10 3\") == 2\n\"\"\"",
        "num_ids_2": 35,
        "num_ids_4": 52
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 3 2\\n2 3 1 3 4 2\\n') == '6'\nassert solution('5 3 3\\n1 2 4 2 3\\n') == '2'\n\n\"\"\"\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 3\\n1 2 6 10 3') == 2\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3 3\\n1 2 6 10 3') == 2\n\"\"\"\n\nimport sys\nfrom copy import deepcopy",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4 2 6 2\\n4 5 4 1 3\\n') == '7'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nc = 0\n\nfor i in range(n):\n    if a[i] + b[i] > max(a) + max(b):\n        c += 1\n\nprint(c)\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 2 6 2\\n4 5 4 1 3\") == \"7\"\n\nimport re\nimport sys\nimport copy\nimport operator",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\") == 7\n\"\"\"\n\n\nn = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 8 2 6 2\\n4 5 4 1 3') == 7\nassert solution('4 8 2 6 2\\n1 3 2 4') == 0\nassert solution('5\\n4 8 2 6 2\\n4 5 4 1 3') == 7\nassert solution('3\\n1 3 2 4') == 0\n\n\"\"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 73
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 3 2 4\\n1 3 2 4') == '7'\n\n-----\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8 2 6 2') == '7'\nassert solution('4 5 4 1 3') == '0'\nprint(solution(stdin))\n\n\"\"\"\n\n\nfrom collections import deque\nfrom typing import List\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'''\n5\n4 8 2 6 2\n4 5 4 1 3\n''') == '7'\n\nassert solution(\n'''\n5\n1 3 2 4 2\n1 3 2 4 5\n''') == '0'\n\nassert solution(\n'''\n5\n4 3 2 6 2\n4 3 2 6 5\n''') == '1'\n\nassert solution(\n'''\n5\n4 3 2 6 2\n4 3 2 6 4\n''') == '1'\n\nassert solution(\n'''\n5\n4 3 2 6 2\n4 3 2 5 6\n''') == '0'",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n4 8 2 6 2\\n4 5 4 1 3') == '7'\nassert solution('4\\n1 3 2 4\\n1 3 2 4') == '0'\n\nfrom collections import Counter",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8 2 6 2\") == \"7\"\nassert solution(\"1 3 2 4\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\") == \"7\"\n\"\"\"\n\nimport sys\nfrom itertools import combinations\n\nassert len(sys.argv) == 2\nlines = [line.split() for line in open(sys.argv[1]).readlines()]\n\nn = int(lines[0][0])\na = [int(i) for i in lines[0][1:]]\nb = [int(i) for i in lines[1][1:]]\n\nprint(sum([max(a[i], b[i]) > min(a[i], b[i]) for i in range(n)]))\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n'''\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(1, n + 1):\n    if i % 2 == 0:\n        a = [i if j % 2 == 1 else j for j in a]\n    else:\n        a = [j if i % 2 == 1 else i for j in a]\nprint(' '.join(map(str, a)))\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 2 4 5 10\n''') == '1 1 3 5 9'\n\nassert solution('''\n10\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\n''') == '9999 9 50605065 1 5 89 5 999999999 60506055 999999999'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\"\n\n\nfrom typing import List\nimport math\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str([1, 2, 4, 5, 10])) == [2, 2, 4, 5, 10]\n\nassert solution(str([1, 2, 4, 5, 10])) == [2, 2, 4, 5, 10]\n\"\"\"\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n\"\"\"\n",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == '1 1 3 5 9'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nb = []\n\nfor i in range(n):\n    if a[i] == 1:\n        b.append(2)\n    elif a[i] == 2:\n        b.append(1)\n    elif a[i] == 3:\n        b.append(4)\n    elif a[i] == 4:\n        b.append(3)\n    elif a[i] == 5:\n        b.append(6)\n    elif a[i] == 6:\n        b.append(5)\n    elif a[i] == 10 ** 9:\n        b.append(10 ** 9)\n    elif a[i] == 10 ** 9 - 1:\n        b.append(10 ** 9)\n\nprint(*b, sep=\" \")\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 4 5 10') == '1 1 3 5 9'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 4 5 10') == '1 1 3 5 9'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"\n\n\"\"\"\n\nfrom collections import defaultdict\n",
        "num_ids_2": 98,
        "num_ids_4": 98
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4') == '0'\nassert solution('5 5\\n1 2\\n1 3\\n2 4\\n3 5\\n4 1') == '2'\nassert solution('5 5\\n1 2\\n1 3\\n2 4\\n3 5\\n4 1\\n5 1') == '1'\nassert solution('5 5\\n1 2\\n1 3\\n2 4\\n3 5\\n4 1\\n5 1\\n1 2') == '2'\n",
        "num_ids_2": 23,
        "num_ids_4": 89
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"\n",
        "num_ids_2": 98,
        "num_ids_4": 98
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2') == ''\n\n'''\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\n\n'''\n\n\n\n'''\n\nDefinition for a undirected graph node\nclass UndirectedGraphNode:\n    def __init__(self, x):\n        self.label = x\n        self.neighbors = []\n\nclass Solution:\n    \"\"\"\n    @param: graph: a list of Undirected graph node\n    @param: values: a hash mapping, <UndirectedGraphNode, (int)value>\n    @param: node: an Undirected graph node\n    @param: target: An integer\n    @return: a node\n    \"\"\"\n    def searchNode(self, graph, values, node, target):\n        # write your code here\n        if node.label == target:\n            return node\n        for neighbor in node.neighbors:\n            if neighbor.label in values:\n                if values[neighbor.label] == target:\n                    return neighbor\n                continue\n            else:\n                values[neighbor.label] = 1\n                result = self.searchNode(graph, values, neighbor, target)\n                if result:\n                    return result\n                del values[neighbor.label]\n\n    def searchNode2(self, graph, values, node, target):\n        # write your code here\n        if node.label == target:\n            return node\n        queue = []\n        queue.append(node)\n        while queue:\n            head = queue.pop(0)\n            for neighbor in head.neighbors:\n                if neighbor.label in values:\n                    if values[neighbor.label] == target:\n                        return neighbor\n                else:\n                    values[neighbor.label] = 1\n                    queue.append(neighbor)\n\n\n\n'''\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\\n\") == '1'\n\"\"\"\n\nfrom collections import deque\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"\n\n\n\n\n\"\"\"",
        "num_ids_2": 98,
        "num_ids_4": 98
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"7 8\n1 2\n1 3\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n5 6\n6 7\n1 6\n2 7\n3 7\n4 6\n5 7\n\"\"\") == \"2\"\nassert solution(\"\"\"2 2\n1 2\n2 1\n1 2\n\"\"\") == \"0\"\nassert solution(\"\"\"7 8\n1 2\n1 3\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n5 6\n6 7\n1 6\n2 7\n3 7\n4 6\n5 7\n\"\"\") == \"0\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"5 4\\n1 2\\n3 4\\n5 4\\n3 5\"\n) == \"1\"\n\nassert solution(\n    \"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\"\n) == \"2\"\n\n\"\"\"\n\nimport sys\nimport collections\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n1 2\\n3 4\\n5 4\\n3 5') == '1'\nassert solution('17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6') == '2'\n\"\"\"\n\nimport sys\nimport collections\n\nsys.setrecursionlimit(100_000)",
        "num_ids_2": 98,
        "num_ids_4": 98
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == '1'\n\"\"\"\n\nimport sys",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5') == '1'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5') == '4'\nassert solution('3\\n1 1 2\\n2 3\\n1 3') == '0'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5') == '4'\n\"\"\"",
        "num_ids_2": 66,
        "num_ids_4": 122
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == '1'\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n2 4\\n2 5\") == '4'\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == '0'\n",
        "num_ids_2": 66,
        "num_ids_4": 89
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5\n2 0 0 1 2\n1 2\n2 3\n2 4\n2 5\n''') == '1'\n\nassert solution('''\n5\n1 0 0 0 2\n1 2\n2 3\n2 4\n2 5\n''') == '4'\n\nassert solution('''\n3\n1 1 2\n2 3\n1 3\n''') == '0'\n\nassert solution('''\n3\n1 1 2\n2 3\n1 3\n''') == '0'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\\n\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\\n\") == \"0\"\n",
        "num_ids_2": 70,
        "num_ids_4": 95
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 66,
        "num_ids_4": 99
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5') == '1'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5') == '4'\nassert solution('5\\n1 0 0 0 2\\n2 3\\n1 3\\n2 4\\n2 5') == '0'",
        "num_ids_2": 66,
        "num_ids_4": 99
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 0 0 0 2\\n2 3\\n1 3\\n2 4\\n2 5\\n\") == \"1\"\nassert solution(\"5\\n1 2\\n2 3\\n2 4\\n2 5\\n\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\\n\") == \"0\"\n\"\"\"\nimport sys",
        "num_ids_2": 63,
        "num_ids_4": 88
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\\n\") == '1'\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == '4'\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == '0'\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == '0'\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == '0'\n",
        "num_ids_2": 70,
        "num_ids_4": 140
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ab\") == \"bc\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"b\") == \"b\"\nassert solution(\"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\") == \"z\"\nassert solution(\"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
        "num_ids_2": 20,
        "num_ids_4": 55
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"az\") == \"ba\"\nassert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"sji\"\nassert solution(\"tvqhwp\") == \"tvqhzp\"\nassert solution(\"nijfvj\") == \"vj\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 53
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\nassert solution(\"nijfvj\") == \"qvhwp\"\n\"\"\"\n\nimport math\nfrom typing import List",
        "num_ids_2": 29,
        "num_ids_4": 45
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\nassert solution(\"nijfvj\") == \"tvqhwp\"\nassert solution(\"gjptjf\") == \"fhplvw\"\n\n\"\"\"\n\n\"\"\"\nimport math\nfrom collections import Counter\n\nk = int(input())\ns = input()\nt = input()\n\nres = []\nfor i in range(0, 2 ** (k - 1)):\n    mask = bin(2 ** (k - 1) + i)[3:]\n    while len(mask) < k:\n        mask = \"0\" + mask\n    res.append(s + \"\".join(chr(ord(c) ^ (2 ** (k - 1) - 1 + i)) for c in t))\n\ncount = Counter(res)\nn = count.most_common(1)[0][1]\nres = [k for k, v in count.items() if v == n]\nres.sort()\n\nprint(res[len(res) // 2])\n\"\"\"\n\n\"\"\"\nk = int(input())\ns = input()\nt = input()\nres = []\nfor i in range(0, 2 ** (k - 1)):\n    mask = bin(2 ** (k - 1) + i)[3:]\n    while len(mask) < k:\n        mask = \"0\" + mask\n    res.append(s + \"\".join(chr(ord(c) ^ (2 ** (k - 1) - 1 + i)) for c in t))\n\ncount = Counter(res)\nres = [k for k, v in count.items() if v == count.most_common(1)[0][1]]\nres.sort()\n\nprint(res[len(res) // 2])\n\"\"\"\n\nk = int(input())\ns = input()\nt = input()\n\nc = 0\nl = 0\nfor i in range(0, len(s)):\n    if s[i] < t[i]:\n        c += 1\n    if s[i] > t[i]:\n        l += 1",
        "num_ids_2": 29,
        "num_ids_4": 64
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"ijf\") == \"qoz\"\nassert solution(\"nij\") == \"qvz\"\nassert solution(\"vf\") == \"q\"",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\nassert solution(\"nijfvj\") == \"qvztv\"",
        "num_ids_2": 20,
        "num_ids_4": 49
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"abcd\") == \"abcd\"\nassert solution(\"abcde\") == \"abcde\"\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"az\") == \"ba\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"fogk\") == \"tvz\"\n\nassert solution(\"nijfvj\") == \"qvz\"\nassert solution(\"tvqhwp\") == \"qzw\"",
        "num_ids_2": 20,
        "num_ids_4": 48
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bf\"\nassert solution(\"bfh\") == \"bf\"\nassert solution(\"mj\") == \"mj\"\nassert solution(\"mn\") == \"mn\"\n\n\"\"\"\n\nimport sys\n\nk = int(sys.stdin.readline())\ns = sys.stdin.readline()\nt = sys.stdin.readline()\n\ns_list = sorted([a for a in s if a not in t])",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcd\") == \"bc\"\n\nprint(solution(\"abcd\"))\n\n-----Test data\n-----\n\nabcd\nedcb\nefgf\nabef\ncdeb\nbdfh\n\n-----",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\nassert solution(\"2 1\\n10 10\") == \"YES\\n1\"\nassert solution(\"2 2\\n10 10\") == \"YES\\n2\"\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 82
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\\n\") == \"YES\\n1 2 5\"\nassert solution(\"4 4\\n20 10 40 30\\n\") == \"YES\\n1 2 3 4\"\n\n\"\"\"\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\nassert solution(\"4 4\\n10 20 40 30\") == \"NO\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 41,
        "num_ids_4": 81
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 64
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 3\\n15 13 15 15 12\") == \"NO\"\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 3\n15 13 15 15 12\n''') == 'YES\\n1 2 5'\n\nassert solution('''5 4\n20 10 40 30\n''') == 'NO'\n\nassert solution('''4 4\n20 10 40 30\n''') == 'YES\\n1 2 3 4'\n\nprint('Success')\n\n\"\"\"\nclass Solution:\n    def solve(self, n, k, a):\n        \"\"\"\n        Write your code here\n        \"\"\"\n\"\"\"\nSolution Part 2:\n        \"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\\n\") == \"YES\\n1 2 5\\n\"\nassert solution(\"5 4\\n15 13 15 15 12\\n\") == \"NO\\n\"\nassert solution(\"4 4\\n20 10 40 30\\n\") == \"YES\\n1 2 3 4\\n\"\n\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def __init__(self, input_string: str):\n        self.n = int(input_string.split(\" \")[0])\n        self.k = int(input_string.split(\" \")[1])\n\n        self.nums = [int(x) for x in input_string.split(\" \")[2:]]\n\n    def run(self):\n        result = self.solution()\n        return result\n\n    def solution(self) -> str:\n        pass\n",
        "num_ids_2": 49,
        "num_ids_4": 76
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n\n\"\"\"\n\n\n\n\"\"\"\n## SOLUTION 1",
        "num_ids_2": 41,
        "num_ids_4": 64
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'NO'\nassert solution('15 13 15 15 12') == 'YES\\n1 2 5'\nassert solution('15 13 15 15 12') == 'YES\\n1 2 5'\nassert solution('15 13 15 15 12') == 'YES\\n1 2 5'\nassert solution('15 13 15 15 12') == 'YES\\n1 2 5'\n",
        "num_ids_2": 29,
        "num_ids_4": 67
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n15 13 15 15 12') == \"YES\\n1 2 5\"\nassert solution('5 4\\n15 13 15 15 12') == \"NO\"\nassert solution('4 4\\n20 10 40 30') == \"YES\\n1 2 3 4\"\n\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 64
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"1 2 4 0 2\") == \"NO\\n0 0 0 1 0\"\n\"\"\"\n\n\nfrom typing import List\n\nn = int(input())\na = list(map(int, input().split()))\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"9\\n1 2 4 0 2\") == \"NO\"\n",
        "num_ids_2": 64,
        "num_ids_4": 81
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1 3 6 8 2 9 0 10') == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution('1 2 4 0 2') == 'NO'\nassert solution('10 5 2 3 1 4 9 8 7 6') == 'YES\\n1 0 0 0 1 1 0 1 1 1'\n\n----\n\n\n3\n1 1 1\n3\n1 1 1\n3\n1 2 3",
        "num_ids_2": 43,
        "num_ids_4": 74
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'NO'\nassert solution('1 2 4') == 'YES\\n0 0 1 0 0 1 0 1 0'\nassert solution('2 3 4 5') == 'NO'\nassert solution('0 1') == 'YES\\n0 1 0'\n\nfor i in range(int(stdin)):\n    print(solution(stdin))",
        "num_ids_2": 33,
        "num_ids_4": 62
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9\\n5 1 3 6 8 2 9 0 10') == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution('9\\n4 2 5 3 7 0 10 9') == 'YES\\n1 1 1 1 1 0 0 0 0'\nassert solution('9\\n4 2 5 0 7 3 10 9') == 'YES\\n1 1 0 1 0 1 0 1 0'\nassert solution('9\\n3 0 2 9 9') == 'NO'\nassert solution('9\\n3 0 2 9 0') == 'NO'\n",
        "num_ids_2": 63,
        "num_ids_4": 111
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 6 6 6 6') == 'YES\\n0 1 0 1 0 1'\nassert solution('5 6 5 6 5') == 'NO'\nassert solution('5 2 3 6 8 9') == 'YES\\n0 1 0 1 1 1'\n",
        "num_ids_2": 36,
        "num_ids_4": 59
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n1 2 3 4 5 6 7\") == \"YES\\n0 1 0 1 1 0 0 1\"\nassert solution(\"7\\n7 6 5 4 3 2 1\") == \"YES\\n1 0 1 1 1 0 1 1\"\n\"\"\"",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution(\"5\\n1 2 4 0 2\") == 'NO\\n'\n",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\\n\") == '3\\n0\\n1134\\n0'\n",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\"\"\"\n\n\nfrom typing import List, Tuple\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\n\"\"\"\n\nimport os\nimport time\n\n\nclass Paths:\n    \"\"\"Paths class.\"\"\"\n\n    def __init__(self, stdin: str) -> None:\n        \"\"\"Initialize this solution.\"\"\"\n        self.stdin = stdin\n\n    def solution(self) -> str:\n        \"\"\"Compute solution.\"\"\"\n        pass\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\\n\") == \"3\\n0\\n1134\\n0\"\nassert solution(\"3\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\\n\") == \"3\\n0\\n1134\\n0\"\n\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 100,
        "num_ids_4": 100
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\"\"\"\n\nfrom functools import lru_cache",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000') == '3\\n0\\n1134\\n0'\nassert solution('1\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000') == '0\\n0\\n1134\\n0'\nassert solution('1\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000001 1 1 1000000000') == '0\\n0\\n1134\\n0'",
        "num_ids_2": 96,
        "num_ids_4": 144
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\n\"\"\"\n\nfrom collections import defaultdict, deque",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\"\"\") == '3\\n0\\n1134\\n0'\nassert solution(\"\"\"\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\"\"\") == '3\\n0\\n1134\\n0'\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '3'\nassert solution('2') == '1'\nassert solution('20') == '12164510040883200'\n",
        "num_ids_2": 20,
        "num_ids_4": 36
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\n",
        "num_ids_2": 20,
        "num_ids_4": 47
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\nassert solution(\"20\") == \"12164510040883200\"\nprint(\"Passed\")\n",
        "num_ids_2": 20,
        "num_ids_4": 47
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2) == 1\nassert solution(4) == 3\nassert solution(8) == 1260\nassert solution(20) == 12164510040883200\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\n-----\n",
        "num_ids_2": 16,
        "num_ids_4": 39
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n",
        "num_ids_2": 20,
        "num_ids_4": 47
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n') == '1'\nassert solution('4\\n') == '3'\nassert solution('8\\n') == '1260'\nassert solution('20\\n') == '12164510040883200'\nprint('Passed')\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 55
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 31
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == '1'\n\nassert solution('4\\n') == '3'\n\nassert solution('8\\n') == '1260'\n\nassert solution('20\\n') == '12164510040883200'\n",
        "num_ids_2": 24,
        "num_ids_4": 55
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('u') == ''\nassert solution('dddcccbac') == 'dddd'\nassert solution('dddcccbbac') == 'dddd'\nassert solution('cccccc') == ''\n",
        "num_ids_2": 29,
        "num_ids_4": 60
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('u') == ''\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('u') == ''\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('u') == ''\n",
        "num_ids_2": 29,
        "num_ids_4": 71
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('u') == ''\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n\"\"\"\n\nfrom collections import deque\n\nn, k = map(int, input().split())\ns = deque(list(input()))\ncount = 0\n\nwhile k > 0 and len(s) > 0:\n    while count < k and len(s) > 0:\n        count += s.count('a')\n        s.popleft()\n    if count < k:\n        break\n    while count > 0 and len(s) > 0:\n        count -= s.count('a')\n        s.popleft()\n    while count > 0 and len(s) > 0:\n        count -= s.count('z')\n        s.popleft()\n    if count == 0:\n        s.popleft()\n    count = 0\n\nprint(''.join(s))\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('u') == ''\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('u') == ''\nassert solution('ababa') == ''\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 59
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\nassert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n') == '20'\nassert solution('5 6\\n0 1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\n\n'''\nimport sys\n",
        "num_ids_2": 76,
        "num_ids_4": 121
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 1 2 0 2 0 2 2 2 2 2 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 2 2 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 2 2 1 1 1 1 2 1 1 1 1 2 2 1 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 2 1 2 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 2 2 2 2 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1",
        "num_ids_2": 1327,
        "num_ids_4": 1327
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n') == 20\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\n\"\"\"\n\nn, m = map(int, input().split(' '))\nk = list(map(int, input().split(' ')))\n\nstdin = ''\nfor _ in range(m):\n    d, t = map(int, input().split(' '))\n    stdin +=''.join(map(str, k)) + '\\n'\n\nprint(stdin)\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 0 2 0\") == '8'\nassert solution(\"3 2 1 3 2\") == '20'\nassert solution(\"3 2 1 5 2\") == '15'\nassert solution(\"3 2 1 5 2\") == '15'\nassert solution(\"3 2 1 5 2\") == '15'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3') == '8'\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_expected\nprint(solution(input))\n\nimport sys\nsys.setrecursionlimit(10000000)\nimport time\nn, m = map(int, input().split())\nk = list(map(int, input().split()))\n\nm_list = []\nfor i in range(m):\n    d, t = map(int, input().split())\n    m_list.append((d, t))\n\ndp = [0] * (n+1)",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3') == '-1'\nassert solution('3 2') == '-1'\nassert solution('3 1') == '-1'\nassert solution('2 2') == '-1'\nassert solution('2 1') == '-1'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n.*\\n.*\\n.*\\n\") == \"2\\n3 1 1\\n3 2 1\"\nassert solution(\"3 2\\n.*\\n.*\\n.*\\n\") == \"-1\"\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\\n\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\\n\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"3\\n-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"3 3\\n.*\\n.*\\n.*\") == \"1\\n1 2 1\\n1 2 1\\n\"\n",
        "num_ids_2": 104,
        "num_ids_4": 161
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"3\"\n",
        "num_ids_2": 70,
        "num_ids_4": 130
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"-1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n\") == \"-1\"\nassert solution(\"3 3\\n.*.\\n.*.\\n*.*\\n\") == \"-1\"\nassert solution(\"5 5\\n.*.*\\n.*.*\\n*.*\\n.*.*\\n\") == \"-1\"\n",
        "num_ids_2": 89,
        "num_ids_4": 146
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n.*.*\\n.*.*') == '2 2 1'\nassert solution('5 5\\n.*.*\\n.*.*\\n.*.*\\n.*.*') == '3 3 1'\nassert solution('5 5\\n.*.*\\n.*.*\\n.*.*\\n.*.*') == '3 3 1'",
        "num_ids_2": 50,
        "num_ids_4": 79
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n*.*\\n.*.\\n*.*\\n\") == \"-1\"\n\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\\n\") == \"3\\n3 2 1\\n3 4 1\\n\"\n\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\\n\"\n",
        "num_ids_2": 62,
        "num_ids_4": 112
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\".*...\\n..**.\\n....*\") == \"3\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\n",
        "num_ids_2": 56,
        "num_ids_4": 126
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"2\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"\n",
        "num_ids_2": 70,
        "num_ids_4": 123
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('575') == 'Yes'\nassert solution('11') == 'No'\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(575) == \"Yes\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('575') == 'Yes'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"575\") == \"Yes\"\n\"\"\"\n\nn = int(stdin.readline().rstrip())",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('575') == 'Yes'\nassert solution('123') == 'No'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"100\") == \"No\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"575\") == \"Yes\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('555') == 'Yes'\nassert solution('125') == 'Yes'\nassert solution('111') == 'No'\nassert solution('120') == 'No'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"125\") == \"No\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('1 2') == 'Draw'\nassert solution('1 4') == 'Bob'\nassert solution('1 3') == 'Alice'\nassert solution('1 2') == 'Draw'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nprint(solution(\"8 6\"))\n\nclass Card:\n    def __init__(self,value,strength):\n        self.value=value\n        self.strength=strength\n\nclass OneCardPoker:\n    def __init__(self):\n        self.card1=None\n        self.card2=None\n        self.choose_card(self.card1,self.card2)\n        self.card_value=self.choose_card(self.card1,self.card2)\n        self.card_strength=self.choose_card(self.card1,self.card2)\n        self.winner()\n\n    def choose_card(self,card1,card2):\n        self.card1=card1\n        self.card2=card2\n        if self.card1.strength>self.card2.strength:\n            return self.card1\n        elif self.card1.strength<self.card2.strength:\n            return self.card2\n        else:\n            return self.card1\n\n    def winner(self):\n        if self.card_strength>self.card_value:\n            print(\"Alice\")\n        elif self.card_strength<self.card_value:\n            print(\"Bob\")\n        else:\n            print(\"Draw\")\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"8 3\") == \"Bob\"\nassert solution(\"9 10\") == \"Draw\"\nassert solution(\"10 9\") == \"Alice\"\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('9 12') == 'Bob'\nassert solution('8 10') == 'Draw'\nassert solution('12 12') == 'Draw'\nassert solution('9 13') == 'Draw'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6\") == \"Bob\"\nassert solution(\"8 6\") == \"Alice\"\nassert solution(\"4 8\") == \"Draw\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 6\") == \"Alice\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '8 6'\n) == 'Alice'\nassert solution(\n    '8 4'\n) == 'Bob'\nassert solution(\n    '4 4'\n) == 'Draw'\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"8 6\"\n) == \"Alice\"\n\"\"\"\n\na, b = map(int, stdin.split())\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"8 6\"\n) == \"Alice\"\nassert solution(\n    \"1 2\"\n) == \"Bob\"\nassert solution(\n    \"4 3\"\n) == \"Draw\"\nassert solution(\n    \"4 4\"\n) == \"Draw\"\nassert solution(\n    \"12 4\"\n) == \"Alice\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"6 3\") == \"Bob\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('2, 3') == '2 3'\nassert solution('2 3') == '2 3'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"happy,newyear,enjoy\"\n) == \"happy newyear enjoy\"\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\"\"\"\n\n\"\"\"\nprint(solution('happy,newyear,enjoy'))\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(s) == answer\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\"\n\ns = input()\nprint(' '.join(s.split(',')))",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\n    \"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"2 2\\n1 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"2 2\\n1 1\\n1 1\\n0 0\\n0 0\") == \"1\\n1\"\n\n\"\"\"\nimport unittest\nfrom unittest import TestCase\n\n\nclass Test(TestCase):\n    def test_solution_0(self):\n        assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n\n    def test_solution_1(self):\n        assert solution(\"2 2\\n1 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n\n    def test_solution_2(self):\n        ",
        "num_ids_2": 62,
        "num_ids_4": 92
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n2 0\\n0 0\\n-1 0\\n1 0') == '2\\n1'\nassert solution('4 2\\n2 0\\n0 0\\n-1 0\\n1 0') == '2\\n1'\nassert solution('2 2\\n0 1\\n0 0') == '1'\nassert solution('1 1\\n0 0') == '0'\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 62,
        "num_ids_4": 96
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n2 2\n2 0\n0 0\n-1 0\n1 0\n''') == '''\n2\n1\n'''\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"2 2\\n0 0\\n2 2\\n0 0\\n-1 0\") == \"2\\n1\"\nassert solution(\"2 2\\n0 0\\n0 0\\n-1 0\") == \"2\\n1\"\n\nassert solution(\"2 1\\n2 0\\n0 0\") == \"1\\n1\"\nassert solution(\"2 1\\n0 0\\n0 0\") == \"1\\n1\"",
        "num_ids_2": 62,
        "num_ids_4": 111
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\n2 0\\n0 0\\n-1 0\\n1 0') == '2\\n1'\nassert solution('2 2\\n-1 0\\n1 0\\n0 0') == '1\\n2'\n\n\"\"\"\nimport sys\nimport os\nimport numpy as np",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n2 0\\n0 0\\n-1 0\\n1 0') == '2\\n1'\nassert solution('4 4\\n0 0\\n0 0\\n1 1\\n0 0') == '3\\n3'\nassert solution('4 4\\n-1 -1\\n0 0\\n1 1\\n0 0') == '0\\n0'\nassert solution('1 2\\n1 1') == '0'",
        "num_ids_2": 61,
        "num_ids_4": 108
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n\") == \"2\\n1\"\n\nassert solution(\"3 3\\n1 1\\n0 0\\n-1 0\\n1 0\\n\") == \"2\\n1\"\n\nassert solution(\"2 2\\n1 1\\n0 0\\n-1 0\\n0 0\\n\") == \"1\\n1\"\n\nassert solution(\"2 2\\n0 0\\n1 0\\n0 0\\n1 1\\n\") == \"2\\n1\"\n\n\"\"\"\n",
        "num_ids_2": 66,
        "num_ids_4": 131
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"1 1\\n1 1\") == \"1\\n0\"\n\n\"\"\"\n",
        "num_ids_2": 62,
        "num_ids_4": 80
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"14\"\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == 14\nassert solution('3') == 12\nassert solution('4') == 20\n\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == '14'\nprint(solution('2'))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '14'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '14'\nprint(solution(stdin))\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 14\n\n\"\"\"\n\nimport math\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"14\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == 14\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"14\"\n\"\"\"\n\n\"\"\"\nGiven a number n as input, print n-th Fibonacci number.\n\n-----Constraints-----\n - 1 \\leq n \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn\n\n-----Output-----\nPrint the n-th Fibonacci number as an integer.\n\n-----Sample Input-----\n5\n\n-----Sample Output-----\n3\n\nWhen n = 5, we have the Fibonacci sequence: 0, 1, 1, 2, 3.\nPrint the answer as an input. Outputs such as 3.0 will be judged as incorrect.\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"14\"\nassert solution(\"5\") == \"37\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.') == 'Yes'\n\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.#') == 'Yes'\n\n\"\"\"\n\n\"\"\"\nSolution:\n\nSuppose B is the template image and A is the target image.\nA is composed of N rows and N columns of pixels.\nB is composed of M rows and M columns of pixels.\n\nFor each pixel in B:\n1. Find the pixel in the same position in A.\n2. If the pixel in B is black, then the pixel in A should also be black.\n3. If the pixel in B is white, then the pixel in A should be white.\n\nSince we are checking if the template image is contained in the image, we can use a nested for loop to iterate over the template image.\n\nWhen iterating over the template image, we use a try/except block to catch the KeyError exception caused by an invalid position in the template image.\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\nassert solution(\"4 4\\n#.#.#\\n#.#.#\\n#.##\\n###\\n#.#.\") == \"Yes\"\nassert solution(\"3 2\\n#.\\n#.\\n#.\") == \"No\"\nassert solution(\"5 5\\n#..#\\n.#.#\\n#...\\n#...\\n#..#\") == \"No\"\nassert solution(\"2 2\\n#.#\\n#.#\") == \"Yes\"\n",
        "num_ids_2": 59,
        "num_ids_4": 114
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.#') == 'Yes'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n.#\\n.#\\n#.') == 'Yes'\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n.##\\n#.#') == 'No'\nassert solution('1 1\\n..\\n..') == 'No'\nassert solution('3 1\\n..#\\n...') == 'Yes'\nassert solution('2 2\\n..#\\n..#') == 'No'\nassert solution('2 2\\n#.#\\n.##') == 'Yes'",
        "num_ids_2": 36,
        "num_ids_4": 73
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n.#.\\n.#.\\n.##\\n.#.\") == \"Yes\"\nassert solution(\"3 4\\n.#.\\n.#.\\n.##\") == \"Yes\"\nassert solution(\"4 4\\n.#.\\n#.#\\n#.#\") == \"No\"\nassert solution(\"3 4\\n#.#\\n.#.\\n#.#\") == \"Yes\"\nassert solution(\"3 4\\n#.\\n#.\\n#.\") == \"No\"\n",
        "num_ids_2": 49,
        "num_ids_4": 95
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.') == 'Yes'\nassert solution('3 2\\n#.#\\n.#.\\n#.#\\n.#.') == 'No'\n\"\"\"\n\nimport sys\n\nrows, cols = map(int, sys.stdin.readline().strip().split())\nmatrix = [list(sys.stdin.readline().strip()) for _ in range(rows)]\n\nrows, cols = map(int, sys.stdin.readline().strip().split())\ntemplate = [list(sys.stdin.readline().strip()) for _ in range(rows)]",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'''3 2\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.\") == \"Yes\"\nassert solution(\"4 4\\n..#\\n.##\\n#.#\\n#.#\") == \"No\"\n\n\"\"\"",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 5 2') == '53'",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\\n4 5 6\") == \"53\"\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1 5 2\n''') == '53'\n\n\"\"\"\n\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 5 2\\n') == '53'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5 2\") == \"53\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\n\nfrom itertools import permutations",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '3'\nassert solution('1 2 3') == '6'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '55'\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '3\\n4980\\n7980\\n6980\\n'\n) == '15950'\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\\n\") == \"15950\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n6423\\n6980\\n6423\\n6980\\n6423\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\n6980\\n6423\\",
        "num_ids_2": 1754,
        "num_ids_4": 1754
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3\n4980\n7980\n6980\n''') == '15950'\n\"\"\"\n\n\nimport sys\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n3\n4980\n7980\n6980\n''') == '15950'\n\n-----\n2\n8888\n8888\n6\n''') == '11584'\nassert solution('''\n3\n4980\n7980\n6980\n''') == '15950'\nassert solution('''\n3\n6789\n6789\n6\n''') == '9927'\nassert solution('''\n3\n4500\n4500\n5\n''') == '9000'\nassert solution('''\n3\n4999\n4499\n4\n''') == '1389'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\\n\") == \"15950\"\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '0'\nassert solution('2\\n100\\n200') == '200'\nassert solution('3\\n100\\n500\\n200') == '500'\nassert solution('4\\n100\\n300\\n200\\n1000') == '1100'\n",
        "num_ids_2": 21,
        "num_ids_4": 56
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n4980\n7980\n6980\n\"\"\") == \"15950\"\n\n\"\"\"\nimport numpy as np\n\na = np.array([[1,2,3,4,5],[6,7,8,9,10]])\nprint(a)\nprint(a.shape)\n\nb = np.array([[1,2,3],[4,5,6],[7,8,9]])\nprint(b)\nprint(b.shape)\n\nb = np.array([[1,2,3],[4,5,6]])\nprint(b)\nprint(b.shape)\n\"\"\"\n\n\"\"\"\nimport numpy as np\nimport cv2\n\nim = cv2.imread(\"/Users/cocoa/Desktop/google_images_v2/image_2018_12_20_13_25_27.jpg\")\nprint(im.shape)\n\nim = cv2.resize(im, (256, 256))\nprint(im.shape)\n\ncv2.imshow(\"image\", im)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n\"\"\"\n\n\"\"\"\nimport numpy as np\nimport cv2\n\nim = cv2.imread(\"/Users/cocoa/Desktop/google_images_v2/image_2018_12_20_13_25_27.jpg\")\nprint(im.shape)\n\nim = cv2.resize(im, (256, 256))\nprint(im.shape)\n\nim = cv2.resize(im, (256, 256), interpolation=cv2.INTER_AREA)\nprint(im.shape)\n\ncv2.imshow(\"image\", im)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n\"\"\"\n\n\"\"\"\nimport numpy as np\nimport cv2\n\nim = cv2.imread(\"/Users/cocoa/Desktop/google_images_v2/image_2018_12_20_13_25_27.jpg\")\nprint(im.shape)\n\nim = cv2.resize(im, (256, 256), interpolation=cv2.INTER_AREA)\nprint(im.shape)\n\nim = cv2.resize(im, (256, 256))\nprint(im.shape)\n\ncv2.imshow(\"image\", im)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n\"\"\"\n\n\"\"\"\nimport numpy as np\nimport cv2\n\nim = cv2.imread(\"/Users/cocoa/Desktop/google_images_v2/image_2018_12_20_13_25_27.jpg\")\nprint(im.shape)\n\nim = cv2.resize(im, (256, 256))\nprint(im.shape)\n\nim = cv2.resize(im, (256, 256), interpolation=cv2.INTER_AREA)\nprint(im.shape)\n\ncv2.imshow(\"image\", im)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n\"\"\"\n\n\"\"\"\nimport numpy as np\nimport cv2\n\nim = cv2.imread(\"/Users/cocoa/Desktop/google_images_v2/image_2018_12_20_13_25_27.jpg\")\nprint(im.shape)\n\nim = cv2.resize(im, (256, 256))\nprint(im.shape)\n\nim = cv2.resize(im, (256, 256), interpolation=cv2.INTER_AREA)\nprint(im.shape)\n\ncv2.imshow(\"image\", im)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n\"\"\"\n\n\"\"\"\nimport numpy as np\nimport cv2\n\nim = cv2.imread(\"/Users/cocoa/Desktop/google_images_v2/image_2018_12_20_13_25_27.jpg\")\nprint(im.shape)\n\nim = cv2.resize(im, (256, 256))\nprint(im.shape)\n\nim = cv2.resize(im, (256, 256), interpolation=cv2.INTER_AREA)\nprint(im.shape)\n\ncv2.imshow(\"image\", im)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n\"\"\"\n\n\"\"\"\nimport numpy as np\nimport cv2\n\nim = cv2.imread(\"/Users/cocoa/Desktop/google_images_v2/image_2018_12_20_13_25_27.jpg\")\nprint(im.shape)\n\nim = cv2.resize(im, (256, 256))\nprint(im.shape)\n\nim = cv2.resize(im, (256, 256), interpolation=cv2.INTER_AREA)\nprint(im.shape)\n\ncv2.imshow(\"image\", im)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n\"\"\"\n\n\"\"\"\nimport numpy as np\nimport cv2\n\nim = cv2.imread(\"/Users/cocoa/Desktop/google_images_v2/image_2018_12_20_13_25_27.jpg\")\nprint(im.shape)\n\nim = cv2.resize(im, (256, 256))\nprint(im.shape)\n\nim = cv2.resize(im, (256, 256), interpolation=cv2.INTER_AREA)\nprint(im.shape)\n\ncv2.imshow(\"image\", im)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n\"\"\"\n\n\"\"\"\nimport numpy as np\nimport cv2\n\nim = cv2.imread(\"/Users/cocoa/Desktop/google_images_v2/image_2018_12_20_13_25_27.jpg\")\nprint(im.shape)\n\nim = cv2.resize(im, (256, 256))\nprint(im.shape)\n\nim = cv2.resize(im, (256, 256), interpolation=cv2.INTER_AREA)\nprint(im.shape)\n\ncv2.imshow(\"image\", im)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n\"\"\"\n\n\"\"\"\nimport numpy as np\nimport cv2\n\nim = cv2.imread(\"/Users/cocoa/Desktop/google_images_v2/image_2018_12_20_13_25_27.jpg\")\nprint(im.shape)\n\nim = cv2.resize(im, (256, 256))\nprint(im.shape)\n\nim = cv2.resize(im, (256, 256), interpolation=cv2.INTER_AREA)\nprint(im.shape)\n\ncv2.imshow(\"image\", im)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n\"\"\"\n\n\"\"\"\nimport numpy as np\nimport cv2\n\nim = cv2.imread(\"/Users/cocoa/Desktop/google_images_v2/image_2018_12_20_13_25_27.jpg\")\nprint(im.shape)\n\nim = cv2.resize(im, (256",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n4980\n7980\n6980\n''') == 15950\nprint(solution(stdin))\n'''",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\"\n\na, b, c, d, e = map(int, input().split())\n\nk = a % 10",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\nprint(\"Sample 1\")\nprint(\"PASS\" if solution(\"29 20 7 35 120\") == \"215\" else \"FAIL\")\n\nassert solution(\"22 22 22 22 22\") == \"22\"\nprint(\"Sample 2\")\nprint(\"PASS\" if solution(\"22 22 22 22 22\") == \"22\" else \"FAIL\")\n\nassert solution(\"1 1 1 1 1\") == \"1\"\nprint(\"Sample 3\")\nprint(\"PASS\" if solution(\"1 1 1 1 1\") == \"1\" else \"FAIL\")\n\nassert solution(\"1 2 3 4 5\") == \"5\"\nprint(\"Sample 4\")\nprint(\"PASS\" if solution(\"1 2 3 4 5\") == \"5\" else \"FAIL\")\n\nassert solution(\"1 3 3 3 5\") == \"5\"\nprint(\"Sample 5\")\nprint(\"PASS\" if solution(\"1 3 3 3 5\") == \"5\" else \"FAIL\")",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\nassert solution(\"1 1 1 1 1\") == \"0\"\nassert solution(\"0 0 0 0 0\") == \"0\"\n\"\"\"\n\nimport math\nimport sys\n\ninputs = []\nfor line in sys.stdin:\n    inputs.append(line.rstrip(\"\\r\\n\"))\n\nprint(inputs)\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\nassert solution(\"30 20 7 35 120\") == \"230\"\nassert solution(\"40 20 7 35 120\") == \"240\"\nassert solution(\"100 20 7 35 120\") == \"100\"\nassert solution(\"29 20 7 35 121\") == \"215\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n29\n20\n7\n35\n120\n\"\"\"\n) == \"215\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\"\n\n_A, _B, _C, _D, _E = map(int, input().split())\n\nN = 1\nwhile N % 10!= 0:\n    if N % 10 <= _A:\n        if _A % N == 0:\n            break\n    N += 1\nelse:\n    print(N * _B)\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\"\n\nA, B, C, D, E = map(int, input().split())",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\"\n\nA, B, C, D, E = map(int, input().split())",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\"\n\nfrom itertools import product\nfrom math import gcd\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n10 30') == '7.5'\n\"\"\"\n\nimport math\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n10 30\\n\") == \"7.5\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 30') == '7.5'\nprint(solution('10 30'))\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 30\") == \"7.5\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\nassert solution(\"3\\n10 10 100\") == \"0.6666666666666666666666666666666666666666666666666666666666666666666666666666667\"\n\"\"\"\n\nfrom functools import reduce",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n2\n10 30\n''') == '7.5'\n\"\"\"\n\nimport sys",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n10 30') == '7.5'\n\"\"\"\n\nfrom math import inf",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\nprint(solution(\"2\\n10 30\"))\n\"\"\"\nimport math\n\nN = int(stdin.readline())\nnums = list(map(int, stdin.readline().split()))\n\nsum = 0\nfor num in nums:\n    sum += 1/num\n\nprint(math.floor(sum / (1/len(nums))))\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2\n10 30''') == '7.5'\nassert solution('''3\n10 20 30''') == '4.0'\nassert solution('''4\n10 20 30 40''') == '2.833333333333333'\n'''\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == 2\n\n\"\"\"\n\nimport sys\nimport math\n\nN, K = [int(x) for x in sys.stdin.readline().split()]\n\ntrees = [int(x) for x in sys.stdin.readlines()]\n\nsortedTrees = sorted(trees)\n\nmedianTrees = sortedTrees[N // 2]",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n\") == \"2\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(read()) == '2'",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 3\n10\n15\n11\n14\n12''') == '2'\n\n-----------------------------\n'''\nimport math\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == 2\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 3\n10\n15\n11\n14\n12''') == '2'\nprint('Test passed\\n')\n\n-----Explanation-----\nIf we decorate the first, third and fifth trees, h_{max} = 12, h_{min} = 10 so h_{max} - h_{min} = 2. This is optimal.\n\n'''\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12\\n') == '2'\n\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n10 15 11 14 12\\n\") == \"2\"\nassert solution(\"5 2\\n10 15 11 14 12\\n\") == \"0\"\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"B\") == \"A\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A\") == \"a\"\nassert solution(\"B\") == \"A\"\n\n#######################################################\n\nInput:\nA\n\nOutput:\na\n\nExplanation:\nA is uppercase, so we should print a.\n\nInput:\na\n\nOutput:\nA\n\nExplanation:\nA is lowercase, so we should print A.\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"B\") == \"A\"\n\n-------\n'''",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"B\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"A\") == \"A\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"B\") == \"A\"\nassert solution(\"C\") == \"a\"\nassert solution(\"D\") == \"a\"\nassert solution(\"E\") == \"a\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('B') == 'A'\nassert solution('a') == 'a'\nassert solution('A') == 'A'\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('B') == 'A'\nassert solution('b') == 'a'\nassert solution('AB') == 'A'\nassert solution('aB') == 'a'",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a\") == \"A\"\nassert solution(\"B\") == \"A\"\nassert solution(\"A\") == \"A\"\nassert solution(\"b\") == \"A\"\n\nprint(solution(\"B\"))\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('B') == 'A'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('B') == 'A'\nassert solution('b') == 'a'\nassert solution('Bb') == 'A'\nassert solution('bB') == 'a'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2') == '6'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"6\"\n\n\"\"\"\n\nimport unittest\n\n\nclass Solution:\n    def compute_n(self, k, s):\n        return (s * (s + 1)) // 2\n\n    def compute_n_plus_1(self, k, s):\n        return k * (k + 1) * (2 * k + 1) // 6\n\n    def solve(self, k, s):\n        return self.compute_n_plus_1(k, s) - self.compute_n(k, s)\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        k = 2\n        s = 2\n        sol = Solution()\n        self.assertEqual(sol.solve(k, s), 6)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 2\n''') == '6'\nassert solution('''1 1\n''') == '1'\nassert solution('''5 1\n''') == '1'\n\n---------------------\n\"\"\"\nimport sys\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\n') == '6'\n\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2') == '6'\nassert solution('1 2') == '2'\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2') == 6\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n') == '6'\nassert solution('2 4\\n') == '0'\nassert solution('1 2\\n') == '0'\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"6\"\nprint(solution(\"2 2\"))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 2\n''') == '6'",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n') == '6'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"190515\") == \"AMBIGUOUS\"\nassert solution(\"19051\") == \"NA\"\nassert solution(\"0519\") == \"YYMM\"\nassert solution(\"0515\") == \"AMBIGUOUS\"\n",
        "num_ids_2": 27,
        "num_ids_4": 51
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1905\") == \"YYMM\"\n\nassert solution(\"1905\") == \"YYMM\"\n\nassert solution(\"1905\") == \"YYMM\"\n\nassert solution(\"1905\") == \"YYMM\"\n\nassert solution(\"1905\") == \"YYMM\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1914\") == \"AMBIGUOUS\"\nassert solution(\"1812\") == \"MMYY\"\nassert solution(\"1012\") == \"NA\"\n\"\"\"\n\nimport re\n",
        "num_ids_2": 26,
        "num_ids_4": 49
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1905') == 'YYMM'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1905\") == \"YYMM\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905XX\") == \"AMBIGUOUS\"\nassert solution(\"XX1905\") == \"MMYY\"\nassert solution(\"19\") == \"AMBIGUOUS\"\nassert solution(\"1905\") == \"YYMM\"\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1909\") == \"MMYY\"\nassert solution(\"1912\") == \"AMBIGUOUS\"\nassert solution(\"1912\") == \"YYMM\"\n\"\"\"\n\nfrom datetime import datetime",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('1955') == 'MMYY'\nassert solution('1951') == 'AMBIGUOUS'\nassert solution('1955') == 'AMBIGUOUS'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 52
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('1905XX') == 'AMBIGUOUS'\nassert solution('1905XX') == 'AMBIGUOUS'\nassert solution('1905X') == 'AMBIGUOUS'\n\"\"\"\n\nimport re\n\npatterns = [\n    re.compile(r'^[0-9]{4}\\s?([0-9]{2})\\s?([0-9]{2})$'),\n    re.compile(r'^([0-9]{2})\\s?([0-9]{2})\\s?([0-9]{2})\\s?([0-9]{2})$'),\n]\n\nfor line in stdin:\n    if any(pattern.fullmatch(line) for pattern in patterns):\n        print('YYMM')\n    else:\n        print('AMBIGUOUS')\n",
        "num_ids_2": 27,
        "num_ids_4": 57
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905X\") == \"NA\"\nassert solution(\"1905X\") == \"NA\"\nassert solution(\"1905X\") == \"NA\"\n\nS = stdin.split('\\n')[0]\nYYMM = '1905'\nMMYY = '0519'\nAMBIGUOUS = 'AMBIGUOUS'\nNA = 'NA'",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == 2\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1.4\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e get_odds(in_list: list) \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n') == '2'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6') == '12'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n') == '2'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n\") == \"2\"\n\n\"\"\"\n\nk = int(stdin.readline())\n\neven_odd_list = []\n\nfor i in range(1, k + 1):\n    if i % 2 == 0:\n        even_odd_list.append(\"Even\")\n    else:\n        even_odd_list.append(\"Odd\")\n\nprint(even_odd_list)",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(2) == 2\nassert solution(3) == 2\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n') == 2\nassert solution('5\\n') == 5\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6') == '6'\nprint(solution('6'))",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == 6\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9 12\\n') == '21'\nprint(solution(stdin))\n\n\"\"\"\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"\n\nfrom collections import deque\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(9, 12) == '21'\n\nIn the sample case, the current time is 9 o'clock, and 12 hours later it will be 21 o'clock in 24-hour time.\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(9, 12) == 21\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 12') == '21'\nassert solution('9 12') == '21'\nassert solution('9 12') == '21'\n\"\"\"\n\nimport unittest",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"\n\nimport math",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9 12') == '21'\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9 12') == '21'",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2919') == '3719'\n\nstdin = \"\"\"3 0\n2 0\n1 0\n0 0\"\"\"\nassert solution(stdin) == '100'\n\"\"\"\nassert solution('2 2919') == '3719'\nassert solution('1 0') == '0'\nassert solution('0 0') == '0'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2919') == '3719'\nassert solution('1 1') == '1'\nassert solution('0 2') == '2'\nassert solution('2 0') == '100'\nassert solution('3 3') == '33'",
        "num_ids_2": 24,
        "num_ids_4": 46
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4111 2 2919\") == \"3719\"\nassert solution(\"11101 12354\") == \"12345\"\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2919\") == \"3719\"\nassert solution(\"1 34\") == \"34\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2919\\n') == '3719'\n\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2919') == '3719'\nassert solution('3 8219') == '8019'\nassert solution('3 1619') == '1619'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2919\\n\") == \"3719\"\n\"\"\"\n\nn, r = [int(num) for num in input().split()]",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2919') == '3719'\n\nprint(solution('2 2919'))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 2\") == 4\nassert solution(\"11 4\") == 6",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 2\") == 4\nassert solution(\"22 10\") == 4\n\"\"\"\n\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 2\") == 4\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11 2') == '4'",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 2\") == 4\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 2\") == 4\n\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11 2') == '4'\nassert solution('32 10') == '3'\nassert solution('100 100') == '2'\nassert solution('10100 100') == '3'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11 2\") == 4\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 2\") == \"4\"\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11 2') == 4\nprint(solution(\"11 2\"))\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"3\"\n\n---",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5''') == '3'\n\"\"\"\n\nfrom math import ceil",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == '3'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == '3'\n\n---",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"3\"\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == '3'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(read_input()) == '3'\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5') == '3'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == '3'\nassert solution('15') == '5'\nassert solution('100') == '50'\nassert solution('50') == '25'\nassert solution('100') == '50'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\nassert solution(\"3 5\") == \"Yay!\"\nassert solution(\"10 7\") == \"Yay!\"\nassert solution(\"2 2\") == \"Yay!\"\nassert solution(\"3 16\") == \"Yay!\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 6\\n') == 'Yay!'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\"\"\"\nimport math",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1\\n') == 'Yay!'\nassert solution('1 1\\n2 1\\n') == 'Yay!'\nassert solution('1 1\\n2 2\\n') == 'Yay!'\nassert solution('1 1\\n3 1\\n') == 'Yay!'\nassert solution('1 1\\n1 2\\n') == 'Yay!'\n",
        "num_ids_2": 32,
        "num_ids_4": 68
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"Yay!\"\nassert solution(\"5 2\") == \"Yay!\"\nassert solution(\"3 1\") == \"Yay!\"\nassert solution(\"5 16\") == \"Yay!\"\nassert solution(\"9 3\") == \"Yay!\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 4') == 'Yay!'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '():'\nassert solution('A B\\nA B') == '():'\nassert solution('5 4\\n5 4') == 'Yay!'\nassert solution('5 5\\n5 5') == 'Yay!'\nassert solution('3 5\\n5 3') == 'Yay!'\n",
        "num_ids_2": 25,
        "num_ids_4": 57
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\"\"\"\n\nfrom collections import deque\nfrom functools import reduce\nfrom operator import xor\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n') == 'Yay!'\nassert solution('3 5\\n') == 'Yay!'\nassert solution('1 16\\n') == 'Yay!'\nassert solution('1 1\\n') == 'Yay!'\nassert solution('5 4\\n') == 'Yay!'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\") == \"Yay!\"\nassert solution(\"3 5\") == \"Yay!\"\nassert solution(\"5 5\") == \"Yay!\"\nassert solution(\"6 1\") == \"Yay!\"\nassert solution(\"1 1\") == \"Yay!\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1234567876') == 34\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1234567876') == '34'\n\"\"\"\n\nimport math\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1234567876\") == '34'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1234567876') == '34'\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1234567876') == '34'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1234') == ''\nassert solution('123456789') == ''\nassert solution('12345678') == ''\nassert solution('1234567891') == ''\n",
        "num_ids_2": 17,
        "num_ids_4": 38
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n",
        "num_ids_2": 25,
        "num_ids_4": 42
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == solution(stdin)\n\n\n\n----\n'''\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 2 1000000000 4 6 8 4 2\") == \"2999999987 2\"\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\"\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 25,
        "num_ids_4": 64
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '0 0'\nassert solution('1 1') == '0 1'\nassert solution('5 1') == '1 0'\nassert solution('5 2') == '2 1'\n\"\"\"\n\nfrom typing import List, Dict\nimport collections\nimport math",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 12 6') == '5 3'\n\nassert solution('2 9') == '1 7'\n\nassert solution('7 13 0 13 26 52') == '12 13'\n\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 41
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\n\"\"\"\n\nn = int(input().strip())\na = list(map(int, input().strip().split(' ')))",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('2 2') == '1 7'\nassert solution('3 12 6') == '5 3'\nassert solution('6 13 52 0 13 26 52') == '12 13'\nassert solution('7 2 1000000000 4 6 8 4 2') == '2999999987 2'\n\nprint(\"The local tests are done. Click on 'Check' to earn cool rewards!\")\n",
        "num_ids_2": 20,
        "num_ids_4": 50
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 12 6\\n') == '5 3'\nassert solution('2 9\\n') == '1 7'\nassert solution('7\\n13 52 0 13 26 52\\n') == '12 13'\n",
        "num_ids_2": 29,
        "num_ids_4": 50
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\"\n",
        "num_ids_2": 25,
        "num_ids_4": 59
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"3 12 6\"\n) == \"5 3\"\n\nassert solution(\n    \"2 9\"\n) == \"1 7\"\n\nassert solution(\n    \"7 13 52 0 13 26 52\"\n) == \"12 13\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 1 4 1\") == '3'\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline().rstrip())\na = list(map(int, stdin.readline().rstrip().split()))\n\nsum_a = sum(a)\nk = 0\nfor i in range(1, n):\n    k += a[i - 1]\n    sum_a -= a[i - 1]\n    if k > sum_a:\n        print(i)\n        break\nelse:\n    print(n)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 4 1\") == 3\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 4 1\") == 3\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3 1 4 1\\n') == '3'\nassert solution('3\\n1 1 1\\n') == '1'\nassert solution('5\\n1 1 1 2 2\\n') == '2'\nassert solution('5\\n1 1 1 2 2\\n') == '2'\n\n-----Solution-----\n\n\n\n\"\"\"",
        "num_ids_2": 35,
        "num_ids_4": 73
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n1 1 1''') == '2'\n\n\"\"\"\n\nN = int(stdin.readline().rstrip())\nA = list(map(int, stdin.readline().rstrip().split(' ')))\n\nres = 0\nl = 0\nr = N - 1\n\nwhile r > l:\n    if A[r] < A[l]:\n        res = max(res, r - l)\n        l = r\n    r -= 1\n\nprint(res + 1)\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 3 1\") == 3\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 4 1\\n3 1 4 1\") == \"3\"\nassert solution(\"5 1 1 2 2\") == \"2\"\nassert solution(\"3 1 1 2 2\") == \"2\"\n\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 47
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 4 1\") == 3\nassert solution(\"3 1 4 1\") == 1\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\nassert solution('4') == ''\n\nassert solution('1 1 1 2 2') == ''\n\nassert solution('1 1 1 1 1') == ''\n\nassert solution('1 2 3 4 5') == ''",
        "num_ids_2": 16,
        "num_ids_4": 40
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n1 1 1\n''') == \"2\"\nassert solution('''4\n1 1 1 2 2\n''') == \"1\"\nassert solution('''5\n1 1 1 2 2\n''') == \"3\"\nassert solution('''5\n1 1 1 2 2\n''') == \"3\"\nassert solution('''5\n1 1 1 2 2\n''') == \"3\"\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\\n\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n",
        "num_ids_2": 32,
        "num_ids_4": 51
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\\n4 2\\n\"\nassert solution(\"2 0\\n\") == \"1\\n1 2\\n\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\\n\"\n",
        "num_ids_2": 44,
        "num_ids_4": 65
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == '2\\n4 2\\n'\nassert solution(\"2 0\") == '1\\n1 2\\n'\nassert solution(\"3 2\\n1 3\\n2 3\") == '2\\n'\n",
        "num_ids_2": 42,
        "num_ids_4": 63
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\\n4 2\"\nassert solution(\"2 0\\n\") == \"1\\n1 2\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 59
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\nprint('All tests passed.')\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\\n\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"1 2\\n1 3\") == \"2\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom functools import reduce\n\n\nclass Diameter:\n    def __init__(self, n: int, m: int, edges: list) -> None:\n        self.n = n\n        self.m = m\n        self.edges = edges\n        self.adj = defaultdict(set)\n\n    def add_edge(self) -> None:\n        for i in range(self.m):\n            v, u = self.edges[i]\n            self.adj[v].add(u)\n            self.adj[u].add(v)\n\n    def find_diameter(self) -> None:\n        self.add_edge()\n        visited = set()\n        root = None\n        def dfs(node: int) -> int:\n            nonlocal visited, root\n            if node in visited:\n                return -1\n            visited.add(node)\n            diameter = 0\n            for next_node in self.adj[node]:\n                diameter = max(diameter, dfs(next_node) + 1)\n            if diameter < 0:\n                root = node\n                return 0\n            return diameter\n        return dfs(root)\n    \n    def print_answer(self) -> None:\n        diameter = self.find_diameter()\n        if diameter < 0:\n            diameter = 0\n        print(diameter)\n\n    def check(self) -> None:\n        self.print_answer()\n        ",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2'\nassert solution('3 2\\n1 3\\n2 3') == '2'\nassert solution('2 0\\n') == '1'\nassert solution('1 3\\n2 3') == '1'\nassert solution('1 2\\n2 3') == '1'\n",
        "num_ids_2": 38,
        "num_ids_4": 66
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == '2'\nassert solution(\"2 0\\n\") == '1'\nassert solution(\"3 2\\n1 3\\n2 3\") == '2'\n\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 51
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"1 1\\n1 2\") == \"0\"\nassert solution(\"2 3\\n1 2\\n1 3\") == \"1\"\n",
        "num_ids_2": 30,
        "num_ids_4": 64
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == '2'\nassert solution(\"2 0\\n\") == '1'\nassert solution(\"3 2\\n1 3\\n2 3\") == '2'\n\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 51
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5') == '11'\nassert solution('7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4') == '4'\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nclass Tree:\n    def __init__(self, n, edges, root):\n        self.root = root\n        self.parents = [-1] * n\n        self.children = [[] for _ in range(n)]\n        self.weights = [0] * n\n        self.weights[root] = -1\n        self.size = 0\n        self.nodes = set()\n        for v, w in edges:\n            self.children[v].append(w)\n            self.weights[w] += w\n            self.nodes.add(v)\n            self.nodes.add(w)\n            self.parents[w] = v\n            self.size += 1\n        self.queue = deque()\n        self.queue.append(root)\n        self.queue.append(root)\n        self.queue.append(root)\n        self.distances = [0] * n\n        self.distances[root] = -1\n        while self.queue:\n            v = self.queue.popleft()\n            for w in self.children[v]:\n                if self.parents[w]!= v:\n                    self.queue.append(w)\n                    self.parents[w] = v\n                    self.distances[w] = self.distances[v] + 1\n                    self.nodes.add(w)\n\n    def _generate_path(self, v, path, start_node, max_path):\n        if v == start_node:\n            path.append(v)\n            max_path = max(max_path, sum(self.weights[i] for i in path))\n            return max_path\n        path.append(v)\n        max_path = max(max_path, sum(self.weights[i] for i in path))\n        for w in self.children[v]:\n            if w!= self.parents[v]:\n                max_path = self._generate_path(w, path, start_node, max_path)\n        path.pop()\n        return max_path\n        \n\n    def longest_path(self, start_node, k):\n        max_path = 0\n        for node in self.nodes:\n            if node == start_node:\n                continue\n            self.queue.clear()\n            self.queue.append(node)\n            self.queue.append(node)\n            self.queue.append(node)\n            max_path = max(max_path, self._generate_path(node, [], start_node, max_path))\n        return max_path",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 2 1 2 1 1\", \"6 4\") == \"11\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 1\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5''') == '11'\n\nassert solution('''7 2\n2 1 2 1 2 1 1\n6 4\n1 5\n3 1\n2 3\n7 5\n7 4''') == '4'",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\n\"\"\"\n\nimport sys\n\n\"\"\"\n\uc785\ub825\uc73c\ub85c \ub4e4\uc5b4\uc624\ub294 \ubb38\uc790\uc5f4\uc740 \uc774\uc81c \uad6c\ubd84\uc790(delimiter)\ub85c \ubd84\ub9ac\ub418\uc5b4 \uc788\ub2e4. \n\uc774\ub97c \ucc98\ub9ac\ud574\uc11c \uc778\uc790\ub85c \ubc1b\uc744 \uc218 \uc788\ub2e4.\n\"\"\"\n\nn, k = map(int, sys.stdin.readline().split())\n\nweight = list(map(int, sys.stdin.readline().split()))\n\ngraph = [[] for _ in range(n)]\nfor _ in range(n - 1):\n    u, v = map(int, sys.stdin.readline().split())\n    graph[u - 1].append(v - 1)\n    graph[v - 1].append(u - 1)\n\nvisited = [False] * n\n\nmax_weight = 0\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n\") == \"11\"\nassert solution(\"7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\\n\") == \"4\"\nprint(solution(stdin))\n\n\"\"\"\n\nimport heapq\n\nclass Solution:\n    def __init__(self, n: int, k: int, a: list):\n        self.n = n\n        self.k = k\n        self.a = a\n        self.subset = []\n\n    def solve(self) -> int:\n        subset = []\n        self.a = [0] + self.a\n        pq = []\n        for i in range(1, self.n + 1):\n            heapq.heappush(pq, (-self.a[i], i))\n        while len(subset) < self.k and pq:\n            val, u = heapq.heappop(pq)\n            while len(subset) < self.k and pq and -val == pq[0][0]:\n                v = heapq.heappop(pq)[1]\n                subset.append(v)\n            if len(subset) < self.k and pq:\n                val, v = heapq.heappop(pq)\n                if v not in subset:\n                    subset.append(v)\n        return sum(self.a[i] for i in subset)\n\nassert Solution(5, 1, [1, 2, 3, 4, 5]).solve() == 11\nassert Solution(7, 2, [2, 1, 2, 1, 2, 1, 1]).solve() == 4\n",
        "num_ids_2": 82,
        "num_ids_4": 134
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n\") == 11\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u0440\u0438\u0430\u043d\u0442 \u0441 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u043e\u043c\n\"\"\"\n\nimport sys\n\nn, k = [int(x) for x in sys.stdin.readline().split()]\n\na = [0] + [int(x) for x in sys.stdin.readline().split()]\nedges = []\nfor _ in range(n - 1):\n    edges.append([int(x) for x in sys.stdin.readline().split()])\n\ntree = [[] for _ in range(n)]",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n\") == \"11\"\n\n\"\"\"\n\nimport sys\n\nn, k = [int(c) for c in input().split()]\n\nw = [int(c) for c in input().split()]\n\nG = [[] for _ in range(n)]\n\nfor _ in range(n - 1):\n    u, v = [int(c) for c in input().split()]\n    G[u - 1].append(v - 1)\n    G[v - 1].append(u - 1)\n\ntotal_weight = 0\nfor i in range(n):\n    weight = w[i]\n    for j in G[i]:\n        if w[j] < w[i]:\n            weight += w[j]\n    total_weight = max(total_weight, weight)\n\nprint(total_weight - k)\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1') == '6'\nassert solution('5 2') == '5'\nassert solution('7 3') == '7'\nassert solution('7 4') == '7'\nassert solution('7 5') == '11'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n\") == \"11\"\nassert solution(\"7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\\n\") == \"4\"",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\") == \"4\"\nassert solution(\"4 1 2 3 5\\n1 2\\n2 3\\n3 4\\n3 5\") == \"11\"\nassert solution(\"4 2 2 3 5\\n1 2\\n2 3\\n3 4\\n3 5\") == \"11\"\nassert solution(\"4 3 2 3 5\\n1 2\\n2 3\\n3 4\\n3 5\") == \"11\"\nassert solution(\"4 4 2 3 5\\n1 2\\n2 3\\n3 4\\n3 5\") == \"11\"\n",
        "num_ids_2": 62,
        "num_ids_4": 122
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 15 12\\n1 9 12 23 26 37\\n') == '1 1\\n1 9\\n2 2\\n2 13'\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 81,
        "num_ids_4": 81
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n4 5 3 4\\n4\") == \"2 2\\n2 13\"\nassert solution(\"1 10\\n1 2 3 4 5 6 7 8 10\\n1 10\") == \"1 1\\n1 10\"\nassert solution(\"6 10\\n2 3 4 5 6 7 8 10\\n2 1 9 12 23 26 37\") == \"1 5\\n2 1\\n2 9999999994\"\n\n\"\"\"",
        "num_ids_2": 56,
        "num_ids_4": 98
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\\n\") == \\\n    \"1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12\\n\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 999999999 5 6 9999999999\") == '1 9999999994'\nassert solution(\"6 999999999 5 6 9999999999\") == '1 9999999994'\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13'\nassert solution('2 3\\n5 10000000000\\n5 6 9999999999') == '1 5\\n2 1\\n2 9999999994'\n\n\n\n\u0421\u0444\u043e\u0440\u043c\u0443\u043b\u0438\u0440\u0443\u0439\u0442\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0439 \u0438\u0433\u0440\u044b \"\u0427\u0435\u0440\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0447\u0438\u0441\u0435\u043b\", \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0437\u0430\u0434\u0430\u0451\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u0437 $n$ \u0446\u0438\u0444\u0440, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0446\u0438\u0444\u0440\u044b \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0442\u0441\u044f \u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0432 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0446\u0438\u0444\u0440\u044b \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430\u0445. \u0421\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0446\u0438\u0444\u0440\u044b \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 $n$. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e $4$, \u0442\u043e \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043a\u0430\u043a $1234$.\n\n\u0414\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c:\n\n1. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u043a\u0430\u043a\u0438\u0435 \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0441\u0440\u0435\u0434\u0438 \u043d\u0438\u0445.\n\n2. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u043a\u0430\u043a\u043e\u043c\u0443 \u0441\u0442\u043e\u043b\u0431\u0446\u0443 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0438\u0437 \u043f.1 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u0446\u0438\u0444\u0440\u044b.\n\n3. \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f \u0432\u0442\u043e\u0440\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u0432\u044b\u0448\u0435, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0435\u043c\u0443.\n\n4. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u043a\u0430\u043a\u0430\u044f \u0446\u0438\u0444\u0440\u0430 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0432 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435.\n\n5. \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f \u043f\u0435\u0440\u0432\u0443\u044e \u0446\u0438\u0444\u0440\u0443 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u043e\u0442\u043d\u043e\u0441\u044f\u0449\u0443\u044e\u0441\u044f \u043a \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u043c\u0443 \u0432 \u043f.2 \u0438\u0437\u0431\u0440\u0430\u043d\u043d\u043e\u043c\u0443 \u0441\u0442\u043e\u043b\u0431\u0446\u0443, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0443\u044e\u0441\u044f \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c\u0438 \u0432\u044b\u0431\u043e\u0440\u0430\u043c\u0438.\n\n\u041f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044c \u0432 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u043c \u0441\u043f\u0438\u0441\u043a\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u043e \u0437\u0430 \u043f\u0435\u0440\u0432\u0443\u044e \u0438\u0433\u0440\u0443. \u041f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u0437\u0430 \u0432\u0442\u043e\u0440\u0443\u044e \u0438\u0433\u0440\u0443.\n\n\u041f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044c \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0440\u0430\u0443\u043d\u0434\u0430 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u043f\u043e \u0432\u0442\u043e\u0440\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e. \u0417\u0430\u0442\u0435\u043c \u0438\ufffd",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3 6\n10 15 12\n1 9 12 23 26 37\"\"\") == \"\"\"1 1\n1 9\n2 2\n2 13\n3 1\n3 12\"\"\"\nassert solution(\"\"\"2 3\n5 10000000000\n5 6 9999999999\n\"\"\") == \"\"\"1 5\n2 1\n2 9999999994\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13'\nassert solution('2 3\\n5 10000000000\\n5 6 9999999999') == '1 5\\n2 1\\n2 9999999994'\n\n------ Problem 1 ------\n\n'''\n",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 2 3\") == \"1 1\\n1 2\\n1 3\\n1 4\"\nassert solution(\"4 3\\n1 2 3 4\\n5 6 7 8\") == \"1 5\\n2 1\\n2 6\\n2 7\"\n",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '3 6 5 4'\n) == '2 1 3'\nassert solution(\n    '40 40 40 60'\n) == '20 20 20'\nassert solution(\n    '201 101 101 200'\n) == '1 100 100'\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n\"\"\"\n\ninput_list = [\n    [3, 6, 5, 4],\n    [40, 40, 40, 60],\n    [201, 101, 101, 200],\n]",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\nassert solution(\"1 100 101 200\") == \"1 100 100\"\n\n-----Explanation-----\n\nAs you can see, the program searches for numbers $a$, $b$, and $c$ such that the given sequence of sums of these numbers is $a+b+c=x_1+x_2+x_3+x_4$. If there is such a sequence of three numbers, the program prints these numbers in any order. If there is no such sequence, the program prints \"No solution\".\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\nassert solution('40 40 40 60') == '20 20 20'\nassert solution('201 101 101 200') == '1 100 100'\n\n\"\"\"\n\n\nfrom collections import Counter",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\n\nassert solution('40 40 40 60') == '20 20 20'\n\nassert solution('201 101 101 200') == '1 100 100'\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == \"1 100 100\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\n\"\"\"\n\nfrom functools import reduce\nfrom collections import Counter\nfrom itertools import permutations\n\nnums = [int(x) for x in stdin.split(' ')]\n\nfor x, y, z in permutations(nums):\n    if x + y + z == sum(nums):\n        print(x, y, z)\n        break\nelse:\n    print(-1)\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\nRBGRRBRGG\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\") == \"6\\nBGRRRRGGGGGRR\"\n",
        "num_ids_2": 48,
        "num_ids_4": 76
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9\\nRBGRRBRGG') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRRRBGBGBGRG'\n",
        "num_ids_2": 48,
        "num_ids_4": 77
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9\\nRBGRRBRGG\\n') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR\\n') == '2\\nRBGRGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR\\n') == '6\\nBGRRRBGBGBGRGRG'\n\"\"\"\n\nimport math\nfrom collections import deque\n",
        "num_ids_2": 52,
        "num_ids_4": 84
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9\\nRBGRRBRGG\\n') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR\\n') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR\\n') == '6\\nBGRRRBGBGBGRG'\n",
        "num_ids_2": 52,
        "num_ids_4": 83
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\nRBG\\nBGR') == '2\\nRGB\\nBGR'",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\nBBBGBRRR') == '2\\nRBGRGBRGR'\nassert solution('9\\nRBGRRBRGG') == '2\\nRRGBRRRGR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRRRRGBGRGBGR'\n\n\"\"\"\n\nn = int(stdin.readline())\n\nlamp_colors = stdin.readline()",
        "num_ids_2": 48,
        "num_ids_4": 76
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('9\\nRBGRRBRGG') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRRRRBBGGBBGRG'\n",
        "num_ids_2": 48,
        "num_ids_4": 79
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(s) == t\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9\\nRBGRRBRGG') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRRRRBGBBBGRRRRRG'\nprint(solution(input()))\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 48,
        "num_ids_4": 79
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n3 3 4 7 5 6 8\") == \"4\\n2 3 5 6\"\nassert solution(\"6\\n1 3 5 2 4 6\") == \"2\\n1 4\"\nassert solution(\"4\\n10 9 8 7\") == \"1\\n1\"\nassert solution(\"9\\n6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\n",
        "num_ids_2": 47,
        "num_ids_4": 95
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 7 8 3 4 5 9 10 11\") == '6\\n1 2 3 7 8 9'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\") == \"4\"\nassert solution(\"6\") == \"1 2 3\"\nassert solution(\"4\") == \"1\"\nassert solution(\"9\") == \"1 2 3\"\nassert solution(\"1\") == \"1\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n3 3 4 7 5 6 8\") == \"4\\n2 3 5 6\", \"The maximum length of the subsequence of the given array that forms an increasing sequence of consecutive integers.\"\nassert solution(\"6\\n1 3 5 2 4 6\") == \"2\\n1 4\", \"The maximum length of the subsequence of the given array that forms an increasing sequence of consecutive integers.\"\nassert solution(\"4\\n10 9 8 7\") == \"1\\n1\", \"The maximum length of the subsequence of the given array that forms an increasing sequence of consecutive integers.\"\nassert solution(\"9\\n6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\", \"The maximum length of the subsequence of the given array that forms an increasing sequence of consecutive integers.\"\n\n\"\"\"\nfrom typing import List",
        "num_ids_2": 89,
        "num_ids_4": 179
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 7 8 3 4 5 9 10 11') == '6'\nassert solution('10 9 8 7') == '1'\nassert solution('7 6 8 3 4 5 9 10 11') == '2'\nassert solution('7 6 8 3 4 5 9 10 11') == '2'\nassert solution('10 9 8 7') == '1'",
        "num_ids_2": 31,
        "num_ids_4": 67
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n3 3 4 7 5 6 8\") == \"4\\n2 3 5 6\", \"Test 1 Failed\"\nassert solution(\"6\\n1 3 5 2 4 6\") == \"2\\n1 4\", \"Test 2 Failed\"\nassert solution(\"4\\n10 9 8 7\") == \"1\\n1\", \"Test 3 Failed\"\nassert solution(\"9\\n6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\", \"Test 4 Failed\"\nprint(\"Tests Passed\")\n",
        "num_ids_2": 57,
        "num_ids_4": 115
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 5 6') == '4'\nassert solution('1 3 5 2 4') == '2'\nassert solution('6 7 8 3 4 5 9 10 11') == '6'\n",
        "num_ids_2": 27,
        "num_ids_4": 45
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n3 3 4 7 5 6 8') == '4\\n2 3 5 6'\nassert solution('6\\n1 3 5 2 4 6') == '2\\n1 4'\nassert solution('4\\n10 9 8 7') == '1\\n1'\nassert solution('9\\n6 7 8 3 4 5 9 10 11') == '6\\n1 2 3 7 8 9'\nassert solution('5\\n2 4 7 10 9') == '2\\n1 4'\n",
        "num_ids_2": 47,
        "num_ids_4": 95
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 4 7 5 6 8\") == \"4\"\nassert solution(\"1 3 5 2 4 6\") == \"2\"\nassert solution(\"10 9 8 7\") == \"1\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\"\nassert solution(\"1 3 5 2 4 6\") == \"2\"\n",
        "num_ids_2": 31,
        "num_ids_4": 62
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == \"4\\n2 3 5 6\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\nassert solution(\"9 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\nassert solution(\"4 10 2 5 3 6 7\") == \"2\\n1 4\"\nassert solution(\"4 10 2 5 3 6 7\") == \"2\\n1 4\"\n",
        "num_ids_2": 48,
        "num_ids_4": 94
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1') == 'Yes'\nassert solution('2 2') == 'No'\n\"\"\"\n\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_case_1(self):\n        self.assertEqual(solution('3 1'), 'Yes')\n\n    def test_case_2(self):\n        self.assertEqual(solution('2 2'), 'No')\n\n    def test_case_3(self):\n        self.assertEqual(solution('1 3'), 'Yes')\n\n    def test_case_4(self):\n        self.",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1') == 'Yes'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2') == 'No'\nassert solution('1 3') == 'Yes'\nassert solution('2 1') == 'Yes'\nassert solution('3 1') == 'Yes'\n",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1') == 'Yes'\nassert solution('5 3') == 'No'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1') == 'Yes'\nassert solution('4 1') == 'No'\n\n'''\n\nimport sys\n\nA, B = [int(i) for i in sys.stdin.readline().split()]\n\nC = 0\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1') == 'Yes'\nassert solution('3 3') == 'No'\n\n\"\"\"\n\n\nimport sys\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"Yes\"\nassert solution(\"4 1\") == \"No\"\nassert solution(\"3 2\") == \"Yes\"\nassert solution(\"4 2\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(123) == 'Yes'\nassert solution(321) == 'No'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1') == 'Yes'\nassert solution('2 2') == 'No'\nassert solution('3 2') == 'No'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin_lines) == expected_stdout_lines",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n\nimport math\n\nx, y = list(map(int, input().split()))\n\nfare = x * 2 + y\ndiscount = math.floor(fare / 2)\ntotal = discount + x\n\nprint(total)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"81 58\"\n) == \"110\"\n\"\"\"\n\nimport io",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n\n\n\nfrom typing import List\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n\nfrom typing import List, Tuple\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"81 58\") == \"110\"\nassert solution(\"1 1\") == \"0\"\n\"\"\"\n\nx, y = map(int, input().split())\n\nprint(x * 2 + y * 0.5)\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '2'\nassert solution('1 2\\n3 4') == '5'\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 34
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('A 3\\nA B\\nB C\\nB A') == '3'\nassert solution('A 13\\nA B\\nB C\\nB A') == '11'\nassert solution('A 80\\nA B\\nB C\\nB A') == '80'\nassert solution('A 80\\nA B\\nB C\\nB A\\nA C') == '110'\n",
        "num_ids_2": 31,
        "num_ids_4": 77
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2') == 2\n\n\"\"\"\nimport math\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == 8\n\"\"\"\n\n\"\"\"\n- Challenge: Find Digit Pair Sums\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == 8\nassert solution(\"3\") == 16\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == 1\nassert solution('3') == 2\nassert solution('5') == 10\nassert solution('9') == 36\nassert solution('2') == 4\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == 8\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n') == '8'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 8\nassert solution('5') == 53\nassert solution('10') == 177\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('22') == '22'\nassert solution('2') == '8'\nassert solution('3') == '27'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == 8\n\"\"\"\nfrom dataclasses import dataclass\nfrom typing import Dict, Set, List\n\n@dataclass\nclass Password:\n    pos1: int\n    pos2: int\n    pos3: int\n    password: str",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == 8\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == 'YES'\nassert solution('4') == 'NO'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n') == 'YES'\nassert solution('6\\n') == 'YES'\nassert solution('7\\n') == 'YES'\nassert solution('8\\n') == 'YES'\nassert solution('9\\n') == 'YES'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n\") == \"YES\"\nassert solution(\"5\\n\") == \"YES\"\nassert solution(\"5\\n\") == \"YES\"\nassert solution(\"5\\n\") == \"YES\"\nassert solution(\"5\\n\") == \"YES\"\n\n\"\"\"\n\nimport math",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n') == 'YES'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"3\") == \"YES\"\n\n------Problem------\nA newborn baby is just a little bit smaller than an adult, so naturally, it should be celebrated.\nFor that, we need to count how many years of life are left until the child becomes a full adult.\n\nIf the child is 1 year old, we say that he is a 1-year-old child.\nIf the child is between 1 and 2 years old, we say that he is a 2-year-old child.\nIf the child is between 2 and 3 years old, we say that he is a 3-year-old child.\n\n---Task---\nWrite a function that, given an age, returns how many years are left until the child is a full adult.\n\n---Input/Output---\n- stdin\n\nage\n\n---Examples---\n1\n\nOutput\n\n0\n\nIf the child is just a baby, he will be a 1-year-old child.\n\n1\n\nOutput\n\n1\n\nIf the child is just a 1-year-old child, he is a 1-year-old child.\n\n2\n\nOutput\n\n2\n\nIf the child is a 2-year-old child, he is a 2-year-old child.\n\n3\n\nOutput\n\n3\n\nIf the child is a 3-year-old child, he is a 3-year-old child.\n\n6\n\nOutput\n\n5\n\nIf the child is a 6-year-old child, he is a 3-year-old child.\n\n10\n\nOutput\n\n9\n\nIf the child is a 10-year-old child, he is a 6-year-old child.\n\n12\n\nOutput\n\n11\n\nIf the child is a 12-year-old child, he is a 10-year-old child.\n\n14\n\nOutput\n\n13\n\nIf the child is a 14-year-old child, he is a 12-year-old child.\n\n18\n\nOutput\n\n17\n\nIf the child is a 18-year-old child, he is a 14-year-old child.\n\n20\n\nOutput\n\n19\n\nIf the child is a 20-year-old child, he is a 18-year-old child.\n\n24\n\nOutput\n\n23\n\nIf the child is a 24-year-old child, he is a 20-year-old child.\n\n26\n\nOutput\n\n25\n\nIf the child is a 26-year-old child, he is a 24-year-old child.\n\n28\n\nOutput\n\n27\n\nIf the child is a 28-year-old child, he is a 26-year-old child.\n\n30\n\nOutput\n\n29\n\nIf the child is a 30-year-old child, he is a 28-year-old child.\n\n32\n\nOutput\n\n31\n\nIf the child is a 32-year-old child, he is a 30-year-old child.\n\n34\n\nOutput\n\n33\n\nIf the child is a 34-year-old child, he is a 32-year-old child.\n\n36\n\nOutput\n\n35\n\nIf the child is a 36-year-old child, he is a 34-year-old child.\n\n38\n\nOutput\n\n37\n\nIf the child is a 38-year-old child, he is a 36-year-old child.\n\n40\n\nOutput\n\n39\n\nIf the child is a 40-year-old child, he is a 38-year-old child.\n\n42\n\nOutput\n\n41\n\nIf the child is a 42-year-old child, he is a 40-year-old child.\n\n44\n\nOutput\n\n43\n\nIf the child is a 44-year-old child, he is a 42-year-old child.\n\n46\n\nOutput\n\n45\n\nIf the child is a 46-year-old child, he is a 44-year-old child.\n\n48\n\nOutput\n\n47\n\nIf the child is a 48-year-old child, he is a 46-year-old child.\n\n50\n\nOutput\n\n49\n\nIf the child is a 50-year-old child, he is a 48-year-old child.\n\n52\n\nOutput\n\n51\n\nIf the child is a 52-year-old child, he is a 50-year-old child.\n\n54\n\nOutput\n\n53\n\nIf the child is a 54-year-old child, he is a 52-year-old child.\n\n56\n\nOutput\n\n55\n\nIf the child is a 56-year-old child, he is a 54-year-old child.\n\n58\n\nOutput\n\n57\n\nIf the child is a 58-year-old child, he is a 56-year-old child.\n\n60\n\nOutput\n\n59\n\nIf the child is a 60-year-old child, he is a 58-year-old child.\n\n62\n\nOutput\n\n61\n\nIf the child is a 62-year-old child, he is a 60-year-old child.\n\n64\n\nOutput\n\n63\n\nIf the child is a 64-year-old child, he is a 62-year-old child.\n\n66\n\nOutput\n\n65\n\nIf the child is a 66-year-old child, he is a 64-year-old child.\n\n68\n\nOutput\n\n67\n\nIf the child is a 68-year-old child, he is a 66-year-old child.\n\n70\n\nOutput\n\n69\n\nIf the child is a 70-year-old child, he is a 68-year-old child.\n\n72\n\nOutput\n\n71\n\nIf the child is a 72-year-old child, he is a 70-year-old child.\n\n74\n\nOutput\n\n73\n\nIf the child is a 74-year-old child, he is a 72-year-old child.\n\n76\n\nOutput\n\n75\n\nIf the child is a 76-year-old child, he is a 74-year-old child.\n\n78\n\nOutput\n\n77\n\nIf the child is a 78-year-old child, he is a 76-year-old child.\n\n80\n\nOutput\n\n79\n\nIf the child is a 80-year-old child, he is a 78-year-old child.\n\n82\n\nOutput\n\n81\n\nIf the child is a 82-year-old child, he is a 80-year-old child.\n\n84\n\nOutput\n\n83\n\nIf the child is a 84-year-old child, he is a 82-year-old child.\n\n86\n\nOutput\n\n85\n\nIf the child is a 86-year-old child, he is a 84-year-old child.\n\n88\n\nOutput\n\n87\n\nIf the child is a 88-year-old child, he is a 86-year-old child.\n\n90\n\nOutput\n\n89\n\nIf the child is a 90-year-old child, he is a 88-year-old child.\n\n92\n\nOutput\n\n91\n\nIf the child is a 92-year-old child, he is a 90-year-old child.\n\n94\n\nOutput\n\n93\n\nIf the child is a 94-year-old child, he is a 92-year-old child.\n\n96\n\nOutput\n\n95\n\nIf the child is a 96-year-old child, he is a 94-year-old child.\n\n98\n\nOutput\n\n97\n\nIf the child is a 98-year-old child, he is a 96-year-old child.\n\n100\n\nOutput\n\n99\n\nIf the child is a 100-year-old child, he is a 98-year-old child.\n\n102\n\nOutput\n\n101\n\nIf the child is a 102-year-old child, he is a 100-year-old child.\n\n104\n\nOutput",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''\n7\n8\n9\n10\n11\n12\n13\n14\n15\n''') == 'YES'\n\nassert solution(\n'''\n8\n9\n10\n11\n12\n13\n14\n15\n''') == 'NO'\n\nassert solution(\n'''\n9\n10\n11\n12\n13\n14\n15\n''') == 'YES'\n\nassert solution(\n'''\n10\n11\n12\n13\n14\n15\n''') == 'YES'\n\nassert solution(\n'''\n11\n12\n13\n14\n15\n''') == 'YES'",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"6\") == \"NO\"\nassert solution(\"9\") == \"YES\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"YES\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5') == 'YES'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"9\") == \"YES\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\nprint(solution(\"ABC999\"))\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\n\"\"\"\nimport math\nfrom collections import deque",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"999\") == \"ABC\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABC999') == 'ABC'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"999\") == \"ABC\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC\") == \"ABC\"\nassert solution(\"ABC999\") == \"ABC\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"999\") == \"ABC\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n15\") == \":( :(\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n7\") == \":( :(\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n10\") == \":( :(\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n11\") == \":( :(\"\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 4 8 9 15\") == \"Yay!\"\nassert solution(\"1 2 3 8 9 15\") == \" :( \"\nassert solution(\"1 2 5 8 9 15\") == \"Yay!\"\n\"\"\"\nimport sys",
        "num_ids_2": 31,
        "num_ids_4": 47
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 4 8 9 15\") == \"Yay!\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n\") == \"Yay!\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 4 8 9 15\") == \"Yay!\"\nassert solution(\"1 1 4 8 9 15\") == \":( \"\nassert solution(\"1 2 3 4 5 6 7\") == \"Yay!\"\nassert solution(\"1 2 3 4 5 6 7 9 10 11 12 13 14 15\") == \"Yay!\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\") == \":( \"\n",
        "num_ids_2": 31,
        "num_ids_4": 72
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 4 8 9 15\") == \"Yay!\"\nassert solution(\"0 0 1 1 1\") == \"Yay!\"\nassert solution(\"0 1 1 1 1\") == \"Yay!\"\nassert solution(\"0 1 1 0 1\") == \"Yay!\"\nassert solution(\"0 0 1 0 0\") == \"Yay!\"\n",
        "num_ids_2": 31,
        "num_ids_4": 61
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n6') ==':(\nassert solution('1\\n2\\n3\\n4\\n5\\n7') ==':(\nassert solution('1\\n2\\n3\\n4\\n5\\n8') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n9') == 'Yay!'\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'Yay!'\nassert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'\nassert solution('1\\n2\\n5\\n7\\n9\\n15') == ':('\nassert solution('1\\n2\\n3\\n4\\n5\\n15') == 'Yay!'\nassert solution('1\\n2\\n5\\n7\\n9\\n15') == ':('\n",
        "num_ids_2": 37,
        "num_ids_4": 88
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3200', 'pink') == 'pink'",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3200') == 'pink'\nassert solution('2800') =='red'\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3200\") == \"pink\"\nassert solution(\"5200\") == \"red\"\n'''\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3200) == 'pink'\nassert solution(3400) =='red'\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3200\") == \"pink\"\n\"\"\"\n\na = int(input())\ns = input()\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(3200)) == \"pink\"\nassert solution(str(2800)) == \"red\"\nprint('Passed')",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('pink') == 'pink'\nassert solution('red') =='red'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a, s) == stdout\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == 'pink'\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100000)\n\na = int(sys.stdin.readline())\n\ns = sys.stdin.readline().strip()",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1199\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1199') == 'ABC'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1200\") == 'ABC'\n\n-----------------------",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1234') == 'ABC'\nassert solution('12345') == 'ARC'\nassert solution('123456') == 'AGC'\n\nprint(solution(stdin))\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 34
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1200') == 'ABC'\nassert solution('1199') == 'ABC'\nassert solution('2800') == 'ARC'\nassert solution('3636') == 'AGC'\nassert solution('1600') == 'AGC'\n\n-----\n",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1199\") == \"ABC\"\n\nassert solution(\"908\") == \"ARC\"\n\nassert solution(\"8259\") == \"AGC\"\n\nassert solution(\"1293\") == \"ABC\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1234\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1200') == 'ABC'\nassert solution('2800') == 'ARC'\nassert solution('4208') == 'AGC'",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(10000) == 'ABC'\nassert solution(11300) == 'ABC'\nassert solution(12300) == 'ARC'\nassert solution(13200) == 'ARC'\nassert solution(14200) == 'AGC'\n\"\"\"\n\nR = int(input())\nprint(\"ABC\" if R < 1200 else \"ARC\" if R < 2800 else \"AGC\")",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1199') == 'ABC'\n\"\"\"\nimport sys\n\nt = int(sys.stdin.readline())\n\nfor _ in range(t):\n    r = int(sys.stdin.readline())\n    if r < 1200:\n        print(\"ABC\")\n    elif r < 2800:\n        print(\"ARC\")\n    else:\n        print(\"AGC\")\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"9\"\nassert solution(\"9\") == \"1\"\nassert solution(\"99\") == \"111\"\nassert solution(\"111\") == \"999\"\nassert solution(\"999\") == \"1111\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9') == '99'\nassert solution('111') == '999'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == expected_output\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('119') == '991'\nassert solution('1111') == '9999'\nassert solution('1010') == '1010'\nassert solution('1110') == '1010'\nassert solution('1234') == '1234'\n",
        "num_ids_2": 21,
        "num_ids_4": 45
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"119\") == \"991\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"119\") == \"991\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('119') == '991'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"119\") == \"991\"\nassert solution(\"1234\") == \"1111\"\nassert solution(\"1235\") == \"1311\"\nassert solution(\"12345\") == \"11111\"\nassert solution(\"9012\") == \"9911\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"119\") == \"991\"\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"119\") == \"991\"\nassert solution(\"123\") == \"321\"\nassert solution(\"567\") == \"159\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 54
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\n\nimport numpy as np\nimport re",
        "num_ids_2": 22,
        "num_ids_4": 38
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abbaac') == 'abac'\nassert solution('ac') == 'ac'\nassert solution('bccddaaf') == 'bcdaf'\nassert solution('zzzzzzzzzz') == 'zzzzzz'\nassert solution('aaa') == 'aaa'\n",
        "num_ids_2": 22,
        "num_ids_4": 54
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abbaac') == 'abac'\nassert solution('ac') == 'ac'\nassert solution('bccddaaf') == 'bcdaf'\nassert solution('zzzzzzzzzz') == 'zzzzzz'\n",
        "num_ids_2": 22,
        "num_ids_4": 54
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\n",
        "num_ids_2": 22,
        "num_ids_4": 54
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\nprint(\"Passed all tests.\")\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 38
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/55f3f5e16d0c25a03c00014f/train/python\n\nInstructions :\n\nGiven a string, find its longest palindromic substring.\n\nEx: Given the following strings...\n\n\"abccccdd\", return \"ccc\".\n\"a\", return \"a\".\n\nIf there are two or more palindromes of the same length, return the first found.\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\n\n\n\"\"\"\n\nimport re\n",
        "num_ids_2": 22,
        "num_ids_4": 54
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 38
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzz\") == \"zzzzzz\"\n",
        "num_ids_2": 22,
        "num_ids_4": 52
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 4\") == \"2\"\nassert solution(\"13 9\") == \"5\"\nassert solution(\"100 13\") == \"4\"\nassert solution(\"123 456\") == \"333\"\nassert solution(\"92 46\") == \"0\"",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 4\") == \"2\"\nassert solution(\"13 9\") == \"5\"\nassert solution(\"100 13\") == \"4\"\nassert solution(\"123 456\") == \"333\"\nassert solution(\"92 46\") == \"0\"\n\n\"\"\"\n\nfrom collections import deque\nfrom itertools import zip_longest",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n11 10\") == \"1\"\nassert solution(\"1 10\") == \"1\"\nassert solution(\"2 100\\n2 2\") == \"1\"\nassert solution(\"7 2\") == \"5\"\n\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n10 4\\n13 9\\n100 13\\n123 456\\n92 46\\n') == '2\\n5\\n4\\n333\\n0'\nprint('Passed')\n\n\"\"\"\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\\n333\\n0\"\n\"\"\"\nimport sys",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 4\\n13 9\\n100 13\\n123 456\\n92 46\\n\") == \"2\\n5\\n4\\n333\\n0\"\n\"\"\"\n\n\"\"\"\nfrom math import gcd\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n10 4\n13 9\n100 13\n123 456\n92 46\n''') == '2\\n5\\n4\\n333\\n0\\n'\n\"\"\"\n\nfrom collections import Counter\nt = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split())\n    if a%b == 0:\n        print(0)\n    else:\n        count = Counter(str(a))\n        while count[str(b)]!= 0:\n            count[str(a)] -= 1\n            a += 1\n        print(a - a//b)\n    \n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 4') == '2'\nassert solution('13 9') == '5'\nassert solution('100 13') == '4'\nassert solution('123 456') == '333'\nassert solution('92 46') == '0'\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == 0\nassert solution(\"2 1\") == 1\nassert solution(\"4 3\") == 2\nassert solution(\"3 6\") == 1\nassert solution(\"12 9\") == 4\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n10 4') == '2'\nassert solution('13 9') == '5'\nassert solution('100 13') == '4'\nassert solution('123 456') == '333'\nassert solution('92 46') == '0'\n\n-----\n'''",
        "num_ids_2": 25,
        "num_ids_4": 48
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == '2.666666666666667'\nassert solution(\"5 2\\n1 2 3 4 5\") == '4.0'\nassert solution(\"5 3\\n1 2 3 4 5\") == '2.0'\nassert solution(\"3 3\\n1 2 3\") == '1.5'\nassert solution(\"6 6\\n1 2 3 4 5 6\") == '3.833333333333334'\n",
        "num_ids_2": 41,
        "num_ids_4": 79
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667\n\"\"\"\n\nimport re\nimport math",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\n\n------Hints------\n\"\"\"\n\nimport itertools",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == \"2.666666666666667\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(string_in) == string_out\n\nSolution\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == 2.666666666666667\n\"\"\"\n\nimport sys\nfrom math import sqrt\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == \"2.666666666666667\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\") == \"YES\"\nassert solution(\"4 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\") == \"NO\"\nassert solution(\"3 2\\n1 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\") == \"YES\"\nassert solution(\"3 2\\n1 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\") == \"NO\"\nassert solution(\"4 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\") == \"NO\"\n",
        "num_ids_2": 96,
        "num_ids_4": 174
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'YES'\nassert solution('1\\n') == 'NO'\nassert solution('2\\n1\\n1\\n2\\n3\\n1\\n1\\n1\\n1\\n3\\n2\\n2\\n1\\n3\\n1\\n2\\n2\\n3\\n1\\n3\\n1\\n3\\n2\\n3\\n2\\n3\\n1\\n3\\n2\\n1\\n2\\n3\\n1\\n1\\n1\\n3\\n1\\n2\\n2\\n3\\n2\\n3\\n1\\n1\\n3\\n1\\n1\\n1\\n2\\n3\\n2\\n3\\n1\\n3\\n2\\n2\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n3\\n1\\n1\\n2\\n1\\n2\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n3\\n2\\n2\\n1\\n2\\n2\\n1\\n2\\n1\\n2\\n2\\n2\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n2\\n2\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1",
        "num_ids_2": 22,
        "num_ids_4": 1305
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n2 3 1') == 'YES'\nassert solution('1 2 3\\n2 3 1\\n1 2') == 'NO'\nassert solution('1 2 3\\n2 3 1\\n2 3 1') == 'NO'\nassert solution('1 2 3\\n2 3 1\\n2 2 3') == 'NO'\n",
        "num_ids_2": 25,
        "num_ids_4": 68
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'YES'\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 93,
        "num_ids_4": 93
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 2\\n3 4\\n1 3') == 'NO'\n\"\"\"\n\nimport sys\nimport os",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\") == \"YES\"",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9\\n8 1 2 3 4 5 6 7\\n5 3 2 1 4 6 7 8 9\\n6 5 3 1 4 2 7 8 9\\n9 7 6 5 3 2 4 1 8\\n4 9 1 7 2 6 3 5 8\\n3 8 1 7 2 9 4 6 5\\n2 7 1 8 9 3 4 5 6\\n1 6 9 2 7 3 8 4 5\\n5 8 1 6 9 2 3 4 7\\n7 4 3 8 1 6 9 2 5\\n6 3 8 2 1 7 4 9 5\\n8 5 9 7 4 3 6 2 1\\n\") == \"YES\"\n\"\"\"\n",
        "num_ids_2": 151,
        "num_ids_4": 151
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"YES\"\nassert solution(\"4 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"NO\"\nassert solution(\"4 1\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\",
        "num_ids_2": 158,
        "num_ids_4": 1305
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == 'NO'\nassert solution(\"4 2\\n4 1 2 3\\n1 2\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == 'YES'\nassert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == 'YES'\n\n\"\"\"\n\n\nfrom collections import Counter\nimport unittest\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, m = [int(x) for x in stdin.split('\\n')[0].split()]\n        a = [int(x) for x in stdin.split('\\n')[1].split()]\n        p = [int(x) for x in stdin.split('\\n')[2].split()]\n\n        a = [a[i] for i in range(n) if i not in p]\n        p = [i for i in range(n) if i not in p]\n\n        count = Counter(a)\n\n        if len(a)!= len(count):\n            return 'NO'\n\n        for i in range(len(a)):\n            if count[a[i]] > 1:\n                return 'NO'\n            if i > 0 and a[i] < a[i - 1]:\n                return 'NO'\n        return 'YES'\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(Solution().solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n'), 'NO')\n        self.assertEqual(Solution().solution('4 2\\n4 1 2 3\\n1 2\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n'), 'YES')\n",
        "num_ids_2": 131,
        "num_ids_4": 210
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"YES\"\n\n\"\"\"\n",
        "num_ids_2": 93,
        "num_ids_4": 93
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bab\") == \"baabbb\"\nassert solution(\"baabbb\") == \"bab\"\nassert solution(\"bbaa\") == \"bbaa\"\nassert solution(\"baa\") == \"baa\"\nassert solution(\"baabbbb\") == \"baabbb\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n",
        "num_ids_2": 27,
        "num_ids_4": 37
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n",
        "num_ids_2": 27,
        "num_ids_4": 37
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"oopppssss\") == \"oops\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('baabbb') == 'bab'\nassert solution('ooopppssss') == 'oops'\n\"\"\"\n\n\nfrom typing import List",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n\nprint(\"The test passed\")\n",
        "num_ids_2": 27,
        "num_ids_4": 37
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('baabbb') == 'bab', 'wrong result'\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('bab') == 'baabbb'",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\nassert solution(\"oo\") == \"o\"\nassert solution(\"hello\") == \"hello\"\n\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 27,
        "num_ids_4": 47
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 3\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == \"2\"\n\n\n\n----- Problem -----\n\nYou are given an undirected weighted connected graph with n vertices and m edges without loops and multiple edges.\n\nThe i-th edge is e = (u_i, v_i, w_i). The distance between vertices u_i and v_i is w_i.\n\nYou can modify the given graph. The only operation you can perform is to increase the weight of some edge by 1. You can increase the weight of each edge multiple (possibly, zero) times.\n\nFind the minimum number of operations to make the graph MST.\n\nMST is a subset of edges of a connected weighted undirected graph such that the total cost of the edges is minimal.\n\nA graph is connected if there is a path between any two vertices.\n\nIt is possible that the initial graph is not connected, that is, there are vertices for which there is no path between them.\n\nEach edge is given in the form (u, v, w), where u, v are vertices and w is the weight of the edge.\n\nIt is guaranteed that the graph doesn't contain loops (self-loops) and multiple edges.\n\nInput\nThe first line of the input contains two integers n and m (1 \\le n \\le 2 \\cdot 10^5, 0 \\le m \\le 2 \\cdot 10^5) \u2014 the number of vertices and the number of edges in the initial graph.\n\nThe next m lines contain three integers e_i each, u_i, v_i and w_i (1 \\le u_i, v_i \\le n, 1 \\le w_i \\le 10^9) \u2014 the description of the edge e_i: u_i is the vertex of the first end of the edge, v_i is the vertex of the second end of the edge, w_i is the weight of the edge.\n\nIt is guaranteed that the graph doesn't contain loops and multiple edges (i.e. for each unordered pair of vertices u, v there is no edge connecting them).\n\nIt is guaranteed that the graph is connected.\n\nOutput\nThe minimum number of operations to make the graph MST.\n\nExample\nInput\n4 4\n1 2 1\n2 3 2\n2 4 5\n1 4 2\n4 2 3\n1 3 3\n1 4 2\n\nOutput\n1\n\n\n----- Result -----\nTime limit exceeded\n\n----- Solution -----\n\nimport sys",
        "num_ids_2": 117,
        "num_ids_4": 184
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == \"0\"\nassert solution(\"1 0\\n\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\"\n",
        "num_ids_2": 56,
        "num_ids_4": 112
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n\") == \"1\"\n\"\"\"\n\nfrom typing import List, Tuple\n\nINF = 999999999999999999999999999999999999999999999999999999999999999999999999999999\n",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n\") == \"1\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 91,
        "num_ids_4": 134
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''8 10\n1 2 1\n2 3 2\n2 4 5\n1 4 2\n6 3 3\n6 1 3\n3 5 2\n3 7 1\n4 8 1\n6 2 4''') == '1'\nassert solution('''3 3\n1 2 1\n2 3 3\n1 3 3''') == '0'\nassert solution('''1 0\n''') == '0'\nassert solution('''5 6\n1 2 2\n2 3 1\n4 5 3\n2 4 2\n1 4 2\n1 5 3''') == '2'\nassert solution('''1 2 1\n2 3 2\n1 3 3\n''') == '0'\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == '1'\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\") == '0'\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\") == '0'\nassert solution(\"1 0\\n\") == '0'\n\n\"\"\"\n\n\nfrom collections import defaultdict\nfrom typing import List, Dict\n",
        "num_ids_2": 87,
        "num_ids_4": 126
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == '1'\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n\") == '0'\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == '0'\nassert solution(\"1 0\\n\") == '0'\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == '2'\n",
        "num_ids_2": 89,
        "num_ids_4": 130
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 10\\\\n1 2 1\\\\n2 3 2\\\\n2 4 5\\\\n1 4 2\\\\n6 3 3\\\\n6 1 3\\\\n3 5 2\\\\n3 7 1\\\\n4 8 1\\\\n6 2 4\") == \"1\"\n\n\"\"\"\n\nimport sys\nimport collections",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n\") == \"1\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == \"0\"\nassert solution(\"1 0\\n\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\"\n\"\"\"\n\nimport collections\n\nclass Edge(object):\n    def __init__(self, begin, end, weight):\n        self.begin = begin\n        self.end = end\n        self.weight = weight\n\n\nclass Solution:\n    def solution(self, input: str) -> str:\n        if not input:\n            return \"0\"\n\n        n, m = map(int, input.split())\n        edges = collections.defaultdict(dict)\n        for i in range(m):\n            u, v, w = map(int, input.split()[i * 3: (i + 1) * 3])\n            edges[u][v] = w\n            edges[v][u] = w\n\n        def find(parent, x):\n            if parent[x] == x:\n                return x\n            return find(parent, parent[x])\n\n        def union(parent, rank, x, y):\n            x_root = find(parent, x)\n            y_root = find(parent, y)\n\n            if rank[x_root] < rank[y_root]:\n                parent[x_root] = y_root\n            elif rank[x_root] > rank[y_root]:\n                parent[y_root] = x_root\n            else:\n                parent[y_root] = x_root\n                rank[x_root] += 1\n\n        parent = [i for i in range(n + 1)]\n        rank = [0] * (n + 1)\n        res = 0\n\n        for u in range(1, n + 1):\n            for v in edges[u]:\n                if find(parent, u)!= find(parent, v):\n                    union(parent, rank, u, v)\n                    res += edges[u][v]\n\n        return str(res)\n",
        "num_ids_2": 91,
        "num_ids_4": 147
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n\") == \"1\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == \"0\"\nassert solution(\"1 0\\n\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\"\n",
        "num_ids_2": 91,
        "num_ids_4": 147
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"RBRBGR\") == \"GRB\"\nassert solution(\"RGBGRRB\") == \"GRB\"\nassert solution(\"RGBGRRBR\") == \"GRB\"\nassert solution(\"RBRGRR\") == \"R\"\n",
        "num_ids_2": 28,
        "num_ids_4": 55
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RGBGRBB') == 'RGBGRB'\nassert solution('RGBGRG') == 'RGBGRG'\nassert solution('RR') == 'RR'\nassert solution('GB') == 'GB'\n\nfor _ in range(int(stdin.readline().strip())):\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    l = [c for c in s]\n    def pair(i):\n        x, y = i, n-i-1\n        return (x, y) if x < y else (y, x)\n    if s[0] == 'R' and s[1] == 'G':\n        l[1] = s[0]\n        l[n-1] = s[1]\n        l[0] = 'B'\n    elif s[0] == 'G' and s[1] == 'R':\n        l[1] = s[0]\n        l[n-1] = s[1]\n        l[0] = 'B'\n    else:\n        l[0] = s[0]\n        l[n-1] = s[1]\n    m = len(set(s))\n    if m <= 2:\n        print(0)\n    elif m == 3:\n        if s[0] == 'R':\n            l[0] = 'B'\n        elif s[0] == 'G':\n            l[0] = 'R'\n        l[n-1] = 'B'\n    else:\n        while m > 2:\n            l[0] = l[0]\n            l[n-1] = l[n-1]\n            l[0] = l[0]\n            m = len(set(l))\n        print(l)\n        # pairs = [pair(i) for i in range(len(l)) if l[i]!= l[i-1]]\n        # for p in pairs:\n        #     l[p[0]] = 'R'\n        #     l[p[1]] = 'G'\n        #     l[0] = 'B'\n        #     l[n-1] = 'B'\n        #     if len(set(l)) < m:\n        #         l[0] = l[0]\n        #         l[n-1] = l[n-1]\n        #         l[0] = l[0]\n        #     else:\n        #         break\n        # if len(set(l)) == 3:\n        #     print(0)\n        # else:\n        #     print(len(pairs))\n        #     print(''.join(l))\n\nassert solution('RGBGRBB') == 'RGBGRB'\n",
        "num_ids_2": 28,
        "num_ids_4": 48
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"RRRRRRRRRRRRRRRRRRRRRRRRRRRR\") == \"R\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"RGBGRR\") == \"RR\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RRRR\") == \"RRRR\"\nassert solution(\"RB\") == \"RBB\"\nassert solution(\"RRR\") == \"RRRR\"\nassert solution(\"RGBG\") == \"RGBG\"\nassert solution(\"RBGB\") == \"RBBGB\"\n",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RR\") == \"RR\"\nassert solution(\"RGBG\") == None\nassert solution(\"GRB\") == \"RR\"\nassert solution(\"RBGBRB\") == \"RRRR\"\nassert solution(\"RBRBBRGGRGRBGGRB\") == \"RRRRRR\"\n",
        "num_ids_2": 19,
        "num_ids_4": 43
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\": 10000 JPY, 0.10000000 BTC\") == \"48000.0\"\nassert solution(\": 10000 JPY, 0.10000000 BTC\") == \"48000.0\"\nassert solution(\": 10000 JPY, 0.10000000 BTC\") == \"48000.0\"\nassert solution(\": 10000 JPY, 0.10000000 BTC\") == \"48000.0\"\nassert solution(\": 10000 JPY, 0.10000000 BTC\") == \"48000.0\"\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\":10000 JPY;0.10000000 BTC\") == \"48000.0\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\\n\") == 48000\nprint(\"PASSED\")\n\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == 48000.0\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10000 JPY\\n0.10000000 BTC') == '48000.0'\nassert solution('10000 JPY\\n0.10000000 BTC\\n') == '48000.0'\nassert solution('10000 JPY\\n0.10000000 BTC\\n0.2 JPY\\n') == '20000.0'\nassert solution('10000 JPY\\n0.10000000 BTC\\n0.2 JPY\\n0.3 JPY\\n') == '30000.0'\nassert solution('10000 JPY\\n0.10000000 BTC\\n0.2 JPY\\n0.3 JPY\\n0.4 JPY\\n') == '40000.0'\n\nprint(solution(stdin.readlines()))\n\n------Problem-----\nN\nx_1 u_1\nx_2 u_2\n:\nx_N u_N\n\n-----Constraints-----\n - 2 \\leq N \\leq 10\n - u_i = JPY or BTC.\n - If u_i = JPY, x_i is an integer such that 1 \\leq x_i \\leq 10^8.\n - If u_i = BTC, x_i is a decimal with 8 decimal digits, such that 0.00000001 \\leq x_i \\leq 100.00000000.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nx_1 u_1\nx_2 u_2\n:\nx_N u_N\n\n-----Output-----\nIf the gifts are worth Y yen in total, print the value Y (not necessarily an integer).\nOutput will be judged correct when the absolute or relative error from the judge's output is at most 10^{-5}.\n\n-----Sample Input-----\n2\n10000 JPY\n0.10000000 BTC\n\n-----Sample Output-----\n48000.0\n\nThe otoshidama from the first relative is 10000 yen. The otoshidama from the second relative is 0.1 bitcoins, which is worth 38000.0 yen if converted at the rate of 380000.0 JPY per 1.0 BTC. The sum of these is 48000.0 yen.\nOutputs such as 48000 and 48000.1 will also be judged correct.\n",
        "num_ids_2": 46,
        "num_ids_4": 115
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input) == output\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n\"\"\"\n\n\"\"\"\n\ud480\uc774\n\ud55c\uba85\uc758 \ubd80\ubaa8\ub294 \uc790\uc2e0\uc774 \uac00\uc9c0\uace0 \uc788\ub294 \uae08\uc561\uc73c\ub85c \ubb3c\uac74\uc744 \uad6c\ub9e4\ud560 \uc218 \uc788\ub2e4.\n\uac01 \uc790\uc2dd\ub4e4\uc774 \uad6c\ub9e4\ud558\ub824\ub294 \ubb3c\uac74\uc758 \uac00\uaca9\uc744 \uc8fc\ub294 \uc815\ubcf4\uc774\ub2e4.\n\nN\uba85\uc758 \ubd80\ubaa8\uc640 N\uba85\uc758 \uc790\uc2dd\ub4e4\uc774 \uc815\ubcf4\ub97c \uc8fc\uba74, \uac01 \uc790\uc2dd\uc774 \uac00\uc9c0\uace0 \uc788\ub294 \uae08\uc561\uc758 \ud569\uc758 \ucd5c\ub313\uac12\uc744 \ucc3e\uc73c\ub77c\ub294 \ubb38\uc81c\ub97c \ud480\uc5b4\ubcf4\uc790.\n\n\ubb38\uc81c\n\uc790\uc2dd\uc774 \uad6c\ub9e4\ud558\ub824\ub294 \ubb3c\uac74\uc758 \uac00\uaca9\uc744 \uc8fc\ub294 \uc815\ubcf4\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n\n\ubd80\ubaa8\ub4e4\uc774 \uac00\uc9c0\uace0 \uc788\ub294 \ubb3c\uac74\uc758 \uac00\uaca9\uc774 \ud55c \uc904\uc5d0 \ub2e4 \uc8fc\uc5b4\uc9c4\ub2e4.\n\uac01 \uac00\uaca9\uc740 \ubb38\uc790\uc5f4 \ud615\ud0dc\ub85c \uc8fc\uc5b4\uc9c4\ub2e4.\n\ubd80\ubaa8\ub4e4\uc740 \uc790\uc2e0\ubcf4\ub2e4 \ub098\uc774\uac00 \ud070 \uc790\uc2dd\ub4e4\uc774 \uc790\uc2e0\uc5d0\uac8c \uac00\uc9c4 \ubb3c\uac74\uc758 \uac00\uaca9\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4.\n\n\uc790\uc2dd\ub4e4\uc740 \uc790\uae30\uc758 \uc774\ub984\uc744 \uc774\uc6a9\ud574 \uac00\uc9c0\uace0 \uc788\ub294 \ubb3c\uac74\uc758 \uac00\uaca9\uc744 \uc8fc\uc5b4\uc9c4\ub2e4.\n\uc774\ub984\uc740 \uc54c\ud30c\ubcb3 \ub300\ubb38\uc790\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc73c\uba70, \uc790\uc2dd\ub4e4\uc758 \uc774\ub984\uc740 \uc11c\ub85c \ub2e4\ub974\ub2e4.\n\ubd80\ubaa8\ub4e4\uc740 \uc790\uae30 \ub098\uc774\ub9cc\ud07c \ub098\uc774\uac00 \uc904\uc5b4\ub4e0 \ubd80\ubaa8\ub4e4\uacfc \uc790\uc2dd\ub4e4\uc774 \uac00\uc9c0\uace0 \uc788\ub294 \ubb3c\uac74\uc758 \uac00\uaca9\uc774 \ud55c \uc904\uc5d0 \ub2e4 \uc8fc\uc5b4\uc9c4\ub2e4.\n\n\ubd80\ubaa8\ub4e4\uc774 \uac00\uc9c0\uace0 \uc788\ub294 \ubb3c\uac74\uc758 \uac00\uaca9\uc740 \uc778\uc811\ud55c \uc790\ub9ac\uc5d0 \uac78\uccd0 \ucc28\ub840\ub300\ub85c \uc8fc\uc5b4\uc9c4\ub2e4.\n\ubd80\ubaa8\ub4e4\uc740 \uc790\uc2e0\uc774 \uac00\uc9c0\uace0 \uc788\ub294 \ubb3c\uac74\uc758 \uac00\uaca9\uc774 \ud55c \uc904\uc5d0 \ub2e4 \uc8fc\uc5b4\uc9c4\ub2e4.\n\uac01 \uc790\uc2dd\ub4e4\uc774 \uac00\uc9c0\uace0 \uc788\ub294 \ubb3c\uac74\uc758 \uac00\uaca9\uc740 \uc778\uc811\ud55c \uc790\ub9ac\uc5d0 \uac78\uccd0 \uc8fc\uc5b4\uc9c4\ub2e4.\n\n\ub2e4\uc74c\uacfc \uac19\uc740 \uc608\uc2dc\uc758 \uc785\ub825\uc744 \uc8fc\uc5c8\ub2e4.\n3\nGASMJ0701 18\nMJ0701JOSEPH BOSCO 043\nJOSEPHBOSCO 123\n\n\ub2e4\uc74c\uacfc \uac19\uc774 \ucd9c\ub825\uc774 \uc774\ub8e8\uc5b4\uc9c4\ub2e4.\n15000.0\n12000.0\n0.10000000\n\"\"\"\n\nimport sys\n\nclass Node:\n    def __init__(self, name):\n        self.name = name\n        self.cost = 0\n        self.children = []",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n\"\"\"\n\nimport io\nimport sys\nimport re\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"3\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(0) == 0\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2') == '3'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n') == '3'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"3\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2') == '3'\n\"\"\"\n\nfrom math import ceil",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"3\"\nprint(\"Test succeeded\")\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"3\"\nprint(solution(\"4 2\"))\n\"\"\"\nfrom collections import deque",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ip cc') == 'icpc'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\nprint(solution(\"ip cc\"))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\nprint(\"Test 1 Passed\")\n\nassert solution(\"asdf qwer tyui\") == \"asdqwert yui\"\nprint(\"Test 2 Passed\")",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ip cc') == 'icpc'",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'a'\nassert solution('abcdde') == 'aacee'\nassert solution('abcde') == 'abdec'\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 44
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 abc') == 'a1bc'\nassert solution('2 abc') == 'ab2c'\nassert solution('1a2bc3') == 'a1b2c3'\nassert solution('1ab2c3') == 'a1b2c3'\n\nfrom sys import stdin",
        "num_ids_2": 28,
        "num_ids_4": 66
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcdefg') == 'cbadfeg'\nassert solution('abc def') == 'bacdfeg'\nassert solution('   ') == ''\nassert solution('a') == 'a'\nassert solution('    ') == ''\n",
        "num_ids_2": 29,
        "num_ids_4": 47
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABA') == 'Yes'\nassert solution('BBA') == 'No'\nassert solution('AAA') == 'Yes'\nassert solution('BAB') == 'No'\nassert solution('BBB') == 'Yes'\n",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABA') == 'Yes'\n\n------\n\nInput is given from Standard Input in the following format:\nABB\n\nOutput is written to Standard Output.\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABA\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(ABA) == \"Yes\"\nassert solution(BAA) == \"No\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BBA\") == \"Yes\"\nassert solution(\"AAB\") == \"No\"\nassert solution(\"BAB\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BAA\") == \"No\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AAA\") == \"Yes\"\nassert solution(\"BAA\") == \"Yes\"\nassert solution(\"BAB\") == \"No\"\nassert solution(\"BBA\") == \"No\"\nassert solution(\"AAB\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABA\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"ABC\") == \"No\"\n\"\"\"\n\nfrom typing import List\nimport numpy as np",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABC\") == \"Yes\"\nassert solution(\"ABA\") == \"Yes\"\nassert solution(\"CBA\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RRR\") == 3\nassert solution(\"RRS\") == 2\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RR\") == 1\nassert solution(\"SRSRS\") == 2\nassert solution(\"SSSSS\") == 0\nassert solution(\"RRS\") == 2\n\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 37
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('RRRR') == 5\n\"\"\"\n\nS = stdin[0]\ncount = 0\nfor i in range(len(S)):\n    if S[i] == 'R':\n        count += 1\n    else:\n        count = 0\n    if count >= 3:\n        print(count)\n        break\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"SR\") == 2\nassert solution(\"RRS\") == 2\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RRR') == 3\nassert solution('RRS') == 2\nassert solution('SRSRSR') == 2\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 29
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RRRR\") == 4\nassert solution(\"SRSRS\") == 2\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(STDIN_SIO.read()) == 2\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RRS\") == \"2\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RRS\") == 2\n\"\"\"\n\ns = input()\n\nprint(\"We had rain on the \" + str(s.count(\"R\") + 1) + \"-th and \" + str(s.count(\"R\") + 2) + \"-th days in the period.\" )\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"SRR\") == 1\nassert solution(\"RRS\") == 2\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '3 1 2'\n\nassert solution('1 2 3 4 5') == '5 4 3 2 1'\nassert solution('1 2 3 4 5 6 7') == '7 6 5 4 3 2 1'\n",
        "num_ids_2": 22,
        "num_ids_4": 62
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3\\n2 3 1\\n1 3 2') == '2 3 1\\n3 1 2'\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '1 2 3'\n) == '3 1 2'\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3\\n4 5 6\\n7 8 9\\n') == '7 3 1\\n4 9 5\\n2 8 6'\nprint('Passed')",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(A) == B\nassert solution(B) == A\nassert solution(C) == C\n-----\n\"\"\"\n\"\"\"\nimport sys\n\nA = list(map(int, sys.stdin.readline().split()))\nB = list(map(int, sys.stdin.readline().split()))\nC = list(map(int, sys.stdin.readline().split()))\nfor i in range(len(A)):\n    temp = A[i]\n    A[i] = B[i]\n    B[i] = C[i]\n    C[i] = temp\n\nfor i in range(len(A)):\n    print(A[i], B[i], C[i])\n\"\"\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3\\n4 5 6\\n7 8 9') == '7 1 2\\n4 5 6\\n8 9 7'\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == \"2 1 3\"\nassert solution(\"6 9 9\") == \"6 9 6\"\nassert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"1 2 3 4\") == \"4 3 2 1\"\nassert solution(\"2 4 8\") == \"8 4 2\"\n",
        "num_ids_2": 28,
        "num_ids_4": 58
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == '3 1 2'\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('30 100') == '100'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"100\"\n) == \"100\"\n\"\"\"\n\na, b = map(int, input().split())\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('30 100') == '100'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('30 100') == '100'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"30 100\"\n) == \"100\"\nprint(solution(stdin))\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\"\n\nA, B = map(int, input().split())",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\"\n\nA, B = list(map(int, stdin.strip().split(\" \")))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('30 100') == '100'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"++\") == \"0\"\nassert solution(\"--\") == \"0\"\nassert solution(\"-+-+\") == \"0\"\nassert solution(\"+\") == \"1\"\n\n'''",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('+-') == '2'\nassert solution('+-++') == '2'\nassert solution('-+-+') == '0'\nassert solution('+') == '1'\nassert solution('-') == '0'\n\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 43
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"++\") == \"2\"\nassert solution(\"+-++\") == \"2\"\nassert solution(\"+-++-\") == \"2\"\nassert solution(\"+-++++\") == \"2\"\n",
        "num_ids_2": 21,
        "num_ids_4": 46
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"+-\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"+-\") == 2\nassert solution(\"+-+-+\") == 0\nassert solution(\"-\") == -1\nassert solution(\"--\") == 0\nassert solution(\"+-0\") == 0\n",
        "num_ids_2": 18,
        "num_ids_4": 35
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"+-\") == \"0\"\nassert solution(\"++\") == \"1\"\nassert solution(\"+-+++\") == \"2\"\nassert solution(\"-+++\") == \"0\"\nassert solution(\"--\") == \"0\"\n\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('+-') == 2\nassert solution('++') == 1\nassert solution('+-') == 0\n\"\"\"\nimport math",
        "num_ids_2": 17,
        "num_ids_4": 26
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"++\") == \"2\"\nassert solution(\"-\") == \"0\"\nassert solution(\"+\") == \"1\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('+-') == 2\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('+-') == '2'\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2019/04/30') == 'Heisei'\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/30\") == \"TBD\"\nassert solution(\"2019/04/29\") == \"Heisei\"\nassert solution(\"2019/02/29\") == \"TBD\"\nassert solution(\"2019/02/28\") == \"Heisei\"\n",
        "num_ids_2": 31,
        "num_ids_4": 62
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/31\") == \"TBD\"\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2020/04/30\") == \"TBD\"\n\"\"\"\n\nimport os\nimport sys\nimport datetime",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2015/02/29') == 'TBD'\n\"\"\"\n\nimport datetime",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/04/31') == 'TBD'\nassert solution('2018/12/31') == 'Heisei'\nassert solution('2018/04/29') == 'TBD'\nassert solution('2019/05/31') == 'Heisei'\n",
        "num_ids_2": 31,
        "num_ids_4": 62
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/04/31') == 'TBD'\n\"\"\"\nimport datetime\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2020/12/31') == 'TBD'\n\"\"\"\n\nstdin = input()",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/05/30') == 'TBD'\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2018/03/21\") == \"TBD\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\nassert solution('3\\n1337 1337 1337') == '3'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 53,
        "num_ids_4": 71
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 2\\n') == '4'\nassert solution('10\\n1 1\\n') == '9'\nassert solution('3\\n1337 1337 1337\\n') == '3'\n",
        "num_ids_2": 32,
        "num_ids_4": 52
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''18\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\n''') == '14'\n\nassert solution('''10\n6 6 6 3 6 1000000000 3 3 6 6\n''') == '9'\n\nassert solution('''3\n1337 1337 1337\n''') == '3'\n\nassert solution('''1\n5\n''') == '1'\n\nassert solution('''2\n1 2\n''') == '2'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 10 10 10\") == 10\nassert solution(\"1 1 1 1\") == 1\nassert solution(\"2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == 14\nassert solution(\"3 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == 9\nassert solution(\"3 3 3 3\") == 3\n",
        "num_ids_2": 22,
        "num_ids_4": 72
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\nassert solution('3\\n1337 1337 1337') == '3'\n\"\"\"\n\nfrom typing import List, Tuple",
        "num_ids_2": 53,
        "num_ids_4": 71
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == \"14\"\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == \"9\"\nassert solution(\"3\\n1337 1337 1337\") == \"3\"\n",
        "num_ids_2": 53,
        "num_ids_4": 71
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == 14",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == \"14\"\n\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == \"9\"\n\nassert solution(\"3\\n1337 1337 1337\") == \"3\"\n\n\n---\n\n\n#######\n",
        "num_ids_2": 53,
        "num_ids_4": 71
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == 14\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == 9\nassert solution('3\\n1337 1337 1337') == 3",
        "num_ids_2": 49,
        "num_ids_4": 65
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == \"14\"\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == \"9\"\nassert solution(\"3\\n1337 1337 1337\") == \"3\"\n\"\"\"\n\nimport sys\nimport os",
        "num_ids_2": 53,
        "num_ids_4": 71
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 4 2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5 2') == '2 1'\nassert solution('7 2') == '2 1'\nassert solution('10 4') == '3 1 2'",
        "num_ids_2": 20,
        "num_ids_4": 45
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\n\n\"\"\"\nfrom collections import deque",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 2 1 3 2') == '2 1'\nassert solution('1 2 3 2 1 3 2 4') == '3 2 1'\nassert solution('2 3 3 1 1 2 1 2 3 3') == '3 1 2'\n\"\"\"\n\nimport unittest\nimport sys\nimport numpy\n\nsys.setrecursionlimit(5000)\n\nclass TestStringMethods(unittest.TestCase):\n    def test_case_0(self):\n        self.assertEqual(solution('1 2 3 2 1 3 2'), '2 1')\n\n    def test_case_1(self):\n        self.",
        "num_ids_2": 25,
        "num_ids_4": 65
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 2') == '2'\nassert solution('10 4') == '3'\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\nassert solution(\"8 4\\n3 3 2 1 1 3 2\") == \"3\\n1 3 2\"\nassert solution(\"7 7\\n1 2 3 2 1 3 2\") == \"1\\n1 2 3\"\nassert solution(\"8 9\\n4 2 1 1 3 1 2 2 2 2 2 2 2 3 2 3 2 3\") == \"1\\n1 2 3\"\n",
        "num_ids_2": 52,
        "num_ids_4": 102
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\") == \"2\\n2 1\"\nassert solution(\"10 4\") == \"3\\n1 3 2\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\"\n\"\"\"\n\nn, k = list(map(int, input().split()))\n\nids = list(map(int, input().split()))",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n\") == \"3 2 1\"\nprint(\"Find solution on sample\", solution(\"4 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n\"))\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 8 2 4\\n8\\n5\\n14\\n10\") == '1 -1 3 2'\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 4\n2 4 8 2 4\n8\n5\n14\n10''') == '''1\n-1\n3\n2'''\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n8 2 4 8\\n4\\n2 4\") == \"2 2 2 2 4\"\nassert solution(\"4 4\\n8 2 4 8\\n4\\n2 4\") == \"2 2 2 2 4\"\n\"\"\"\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n3\\n1 2\\n2\\n1 2\") == \"0 1 1\"\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import List, Tuple\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 4 8 2 4\\n8\\n5\\n14\\n10\\n') == '1 -1 3 2'\n\"\"\"\n\nn, q = map(int, stdin.readline().split())\n\ncoins = list(map(int, stdin.readline().split()))\n\nfor i in range(q):\n    b = int(stdin.readline())\n    ind = 0\n    for j in range(n):\n        if b >= coins[j]:\n            ind = j\n            break\n    if ind == 0:\n        print(-1)\n        continue\n    if ind == n - 1:\n        print(n)\n        continue\n    print(ind)\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '1\\n'\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2\\n1 1\") == \"1 1\\n1 1\"\nassert solution(\"3 3\\n2\\n1 1\\n2\") == \"1 1\\n2\"\nassert solution(\"4 2\\n1 2\\n1 1\\n2\") == \"1 1\\n1 1\"\nassert solution(\"5 5\\n2\\n1 1\\n2\\n1 3\\n3\\n1 3\") == \"1 3\\n2\\n1 1\\n1 1\\n1 1\"\n",
        "num_ids_2": 49,
        "num_ids_4": 124
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n3\\n2\\n2\\n2\\n2\\n1\\n4\\n1\\n1\\n1\") == \"3\\n2\\n2\\n-1\\n3\\n2\\n-1\\n3\\n2\\n-1\"\nassert solution(\"1\\n2\\n2\\n2\\n2\\n1\\n2\\n1\\n1\\n1\") == \"-1\\n2\\n2\\n-1\\n2\\n2\\n-1\\n2\\n2\\n-1\"\nassert solution(\"1\\n1\\n2\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\") == \"2\\n2\\n1\\n1\\n2\\n2\\n-1\\n1\\n1\\n-1\"\nassert solution(\"1\\n3\\n2\\n2\\n2\\n2\\n1\\n4\\n1\\n1\\n1\") == \"2\\n2\\n2\\n3\\n2\\n-1\\n3\\n2\\n-1\"\nassert solution(\"1\\n3\\n2\\n2\\n2\\n2\\n1\\n4\\n1\\n1\\n1\") == \"2\\n2\\n2\\n3\\n2\\n-1\\n3\\n2\\n-1\"\n",
        "num_ids_2": 137,
        "num_ids_4": 272
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n4\\n8\\n2\\n4\\n8\\n2\\n4') == '1\\n-1\\n3\\n2'\nprint('Test passed')\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\") == '21'\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == '0'\n",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open('input.txt').read()) == '21'\nprint('Test pass.')\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\"",
        "num_ids_2": 63,
        "num_ids_4": 63
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == '21'\n\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\") == \"0\"\nassert solution(\"3 3\\n1 2 3\\n1 2 3\") == \"0\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\") == \"0\"\nassert solution(\"3 3\\n1 2 2\\n1 2 2\") == \"0\"\n",
        "num_ids_2": 48,
        "num_ids_4": 90
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\\n\") == '21'\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\\n\") == '0'\n",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7') == '21'\nassert solution('4 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '0'\nassert solution('4 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '0'\n",
        "num_ids_2": 69,
        "num_ids_4": 102
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == solution(input())\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\"\n",
        "num_ids_2": 69,
        "num_ids_4": 69
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\") == \"0\"\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == \"2\\n1 2 3\\n1 1 2\"\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == '2'\nassert solution(\"3\\n2 8 10\") == '2'\nassert solution(\"4\\n1 1 1 1\") == '0'\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == \"2\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\na = list(map(int, sys.stdin.readline().split()))",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 6 7\") == \"2 2 1\"\nassert solution(\"1 2 3 4 5\") == \"2 1 2 3\"\nassert solution(\"8 9 10 11 12\") == \"2 1 2 2 1\"\nassert solution(\"9 10 11 12 13\") == \"1 2 1 2 1\"\nassert solution(\"1 2 3 4 5\") == \"2 1 2 3\"\n",
        "num_ids_2": 32,
        "num_ids_4": 68
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 4 5\") == \"2\\n2 2 1\\n\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n5\n2 4 6 6 6\n\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"\n3\n2 8 10\n\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"\n4\n1 1 1 1\n\"\"\"\n) == \"0\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 6 6 6\") == \"2\"\nassert solution(\"8 9 11 2 2\") == \"2\"\nassert solution(\"8 9 11 10 4\") == \"2\"\nassert solution(\"8 9 11 10 5\") == \"3\"\nassert solution(\"8 9 11 10 6\") == \"3\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 6 6 6\") == 2\nassert solution(\"2 8 10\") == 2\nassert solution(\"2 8 10\") == 2\nassert solution(\"1 1 1 1\") == 0\nassert solution(\"8 8 10\") == 2\n",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 4 6 6 6') == '2'\nassert solution('3\\n2 8 10') == '2'\nassert solution('4\\n1 1 1 1') == '0'\n",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 6 6 6\\n\") == \"2\\n1 2 3\\n1 1 2\\n\"\n\nassert solution(\"2 8 10\\n\") == \"2\\n2 2 1\\n2 3 2\\n\"\n\nassert solution(\"1 1 1 1\\n\") == \"0\\n\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 54,
        "num_ids_4": 71
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10011001\") == 2\nassert solution(\"11111111\") == 0\nassert solution(\"10100100\") == 2\nassert solution(\"10011010\") == 1\n",
        "num_ids_2": 19,
        "num_ids_4": 38
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100010') == '1'\nassert solution('10000010') == '1'\nassert solution('10100100') == '0'\nassert solution('10011001') == '0'\nassert solution('11111111') == '0'\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"01100110\") == 2\nassert solution(\"10101010\") == 0\nassert solution(\"10011101\") == 1\nassert solution(\"01110110\") == 2\n",
        "num_ids_2": 19,
        "num_ids_4": 39
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100010\") == \"1\"\nassert solution(\"111010\") == \"0\"\nassert solution(\"1011010\") == \"1\"\nassert solution(\"11111111\") == \"0\"\nassert solution(\"11111110\") == \"0\"\n",
        "num_ids_2": 23,
        "num_ids_4": 46
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10010001\") == 2\nassert solution(\"10100100\") == 0\nassert solution(\"11111111\") == 0\nassert solution(\"10101010\") == 1\n\n\"\"\"\nfrom typing import List",
        "num_ids_2": 19,
        "num_ids_4": 38
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10101\") == 2\nassert solution(\"001\") == 0\nassert solution(\"00\") == 0\nassert solution(\"101010\") == 0\n",
        "num_ids_2": 18,
        "num_ids_4": 34
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10000010\") == 2\nassert solution(\"00000000\") == 0\nassert solution(\"00100000\") == 1\nassert solution(\"10100100\") == 2\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\n\"\"\"\n\nfrom sys import stdin\nfrom collections import deque\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100010') == 1\nassert solution('10101') == 2\nassert solution('10001010') == 2\n\"\"\"\nimport sys\nfrom itertools import combinations\nfrom itertools import groupby",
        "num_ids_2": 18,
        "num_ids_4": 28
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10100100\") == 2\nassert solution(\"11111111\") == 0\nassert solution(\"001\") == 0\nassert solution(\"101010\") == 0\n",
        "num_ids_2": 19,
        "num_ids_4": 36
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == '3\\n4 6 7'\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\n\nsegments = []\nfor i in range(n):\n    segments.append(list(map(int, sys.stdin.readline().split())))\n\nsegments.sort(key=lambda x: x[1])\n\nleft, right = 0, segments[-1][1]\n\nwhile left <= right:\n    mid = (left + right) // 2\n    count = 0\n    for start, end in segments:\n        if end >= mid:\n            break\n        else:\n            count += 1\n\n    if count <= k:\n        right = mid - 1\n    else:\n        left = mid + 1\n\nsys.stdout.write(str(left) + \"\\n\")\n\nfor i in range(n):\n    if segments[i][1] >= left:\n        sys.stdout.write(str(i + 1) + \"\\n\")\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 4 5\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\nprint(\"OK!\")\n",
        "num_ids_2": 80,
        "num_ids_4": 121
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\"\n",
        "num_ids_2": 70,
        "num_ids_4": 105
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == '3\\n4 6 7'\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == '3\\n1 4 5'\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == '4\\n1 3 5 6'\nassert solution(\"1 1\\n1 1\") == '0\\n0'\nassert solution(\"3 1\\n1 1\\n2 1\") == '0\\n1\\n2'\n",
        "num_ids_2": 80,
        "num_ids_4": 139
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n''') == '3\\n4 6 7 '\n\nassert solution('''\n5 1\n29 30\n30 30\n29 29\n28 30\n30 30\n''') == '3\\n1 4 5 '\n\nassert solution('''\n6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3\n''') == '4\\n1 3 5 6 '\n",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 2\\n3 4') == '1 4 5'\nassert solution('5 1\\n1 2\\n2 3\\n3 4\\n4 5') == '1 3 5'\nassert solution('6 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6') == '1 3 5 6'\n\n\"\"\"",
        "num_ids_2": 50,
        "num_ids_4": 84
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n4 6 7 \"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == \"3\\n1 4 5 \"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 3 5 6 \"\nassert solution(\"7 4\\n10 10\\n9 10\\n11 12\\n11 11\\n12 11\\n11 13\\n11 12\\n10 13\\n9 13\\n7 12\\n11 10\\n8 13\\n9 13\\n11 11\\n10 11\\n8 11\\n11 12\\n10 12\\n6 11\\n11 13\\n8 13\\n9 13\\n12 11\\n11 10\\n7 10\\n13 10\\n9 13\\n8 12\\n11 10\\n11 11\\n11 12\\n6 11\\n10 10\\n5 13\\n6 12\\n7 12\\n11 13\\n9 13\\n8 13\\n7 13\\n9 13\\n6 12\\n10 11\\n11 12\\n11 13\\n8 11\\n9 13\\n6 11\\n7 12\\n11 10\\n10 10\\n11 11\\n6 11\\n6 11\\n8 12\\n7 12\\n9 13\\n7 12\\n9 11\\n5 13\\n9 13\\n9 12\\n7 12\\n9 10\\n11 12\\n9 11\\n8 13\\n8 11\\n6 11\\n9 12\\n8 13\\n6 11\\n10 11\\n5 13\\n5 12\\n9 10\\n5 11\\n8 13\\n11 11\\n9 10\\n5 13\\n6 12\\n9 13\\n8 12\\n7 12\\n9 13\\n10 10\\n5 13\\n5 13\\n9 13\\n5 13\\n5 12\\n9 12\\n7 13\\n5 13\\n6 11\\n7 12\\n6 11\\n8 12\\n7 13\\n7 12\\n8 12\\n7 10\\n9 13\\n8 13\\n7 12\\n9 13\\n5 13\\n7 10\\n7 12\\n5 10\\n9 13\\n5 10\\n6 13\\n9 10\\n6 13\\n6 13\\n7 10\\n6 12\\n7 12\\n8 11\\n8 10\\n7 12\\n5 10\\n6 10\\n5 10\\n7 12\\n6 13\\n7 10\\n6 13\\n6 12\\n7 12\\n8 12\\n5 10\\n7 10\\n6 11\\n7 12\\n6 11\\n5 13\\n7 10\\n7 13\\n7 13\\n7 13\\n7 12\\n5 10\\n7 10\\n7 12\\n5 10\\n6 13\\n7 12\\n7 11\\n8 10\\n7 12\\n6 10\\n7 10\\n8 10\\n7 10\\n7 10\\n7 10\\n7 11\\n7 10\\n6 10\\n7 11\\n7 10\\n8 10\\n6 10\\n8 10\\n7 10\\n7 10\\n8 10\\n7 10\\n7 10\\n7 10\\n7 11\\n7 10\\n7 11\\n6 10\\n7 10\\n7 10\\n7 10\\n7 11\\n7 10\\n7 11\\n7 10\\n7 10\\n7 11\\n7 10\\n7 10\\n8 10\\n8 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n8 10\\n8 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 11\\n7 10\\n7 10\\n7 10\\n7 11\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 11\\n7 10\\n7 10\\n7 10\\n7 11\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 11\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 11\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 11\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 11\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10\\n7 10",
        "num_ids_2": 84,
        "num_ids_4": 1537
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 4 5\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\n\n\"\"\"",
        "num_ids_2": 80,
        "num_ids_4": 121
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 2\") == \"5 6 7\"\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 4 5\"\nassert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\n\"\"\"",
        "num_ids_2": 80,
        "num_ids_4": 121
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5 6 15 30\") == \"30\"\n\nassert solution(\"3\\n3 4 6\") == \"10\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6') == '30\\n31\\n10'\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n\") == \"30\\n31\\n10\"\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\") == \"30\\n31\\n10\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5 6 15 30\") == \"30\"\n\nprint(solution(\"3\\n3 4 6\"))\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\") == \"30\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n') == '30\\n31\\n10\\n'\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n') == '30\\n31\\n10'\nprint(solution(input()))\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5 6 15 30\") == \"30\"\n\"\"\"\nfrom collections import Counter\nimport math\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\") == \"30\\n31\\n10\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('5\\n2 3 4 99 100') == '2'\nassert solution('4\\n2 10 1 20') == '2'\nassert solution('4\\n2 10 1 20\\n2\\n3 6') == '1'\nassert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100') == '2'\n\nprint('tests passed')\n",
        "num_ids_2": 25,
        "num_ids_4": 64
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\n\"\"\"\nfrom bisect import bisect_left, bisect_right",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 10 1 20\\n2\\n3 6') == '2'\nassert solution('4\\n2 10 1 20\\n1\\n42') == '1'\nassert solution('4\\n2 10 1 20\\n2\\n3 6') == '1'\n\"\"\"\n",
        "num_ids_2": 45,
        "num_ids_4": 68
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1\\n2') == '1'\nassert solution('1\\n2\\n3') == '1'\nassert solution('1\\n2\\n3\\n4') == '1'\n",
        "num_ids_2": 16,
        "num_ids_4": 45
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2\\n1\\n2\\n1'\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\"\n    ) == \"2\\n1\\n2\\n1\"\n\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\"\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100') == '2\\n1\\n2\\n1'\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 6\") == \"NO\"\nassert solution(\"5 2 6 27\") == \"YES\"\nassert solution(\"3 3 5 18\") == \"YES\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 3 4\") == \"YES\"\n\"\"\"\nfrom itertools import product\nfrom typing import List\n\nfrom utils import timed",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 3 6\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"5 2 6 27\") == \"NO\"\nassert solution(\"3 3 5 18\") == \"YES\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a, b, n, S) == 'YES', 'Wrong answer'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 3 4') == 'YES'\nassert solution('1 2 3 4') == 'NO'\nassert solution('5 2 6 27') == 'YES'\nassert solution('3 3 5 18') == 'YES'\nassert solution('6 2 4 10') == 'YES'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4\\n1 2 3 6') == 'YES'\nassert solution('5 2 6 27\\n3 3 5 18') == 'NO'\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 6\") == \"NO\"\n\"\"\"\n\nfrom math import gcd",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\\n1 2 3 6\") == 'YES'\nassert solution(\"5 2 6 27\\n3 3 5 18\") == 'NO'\nassert solution(\"3 3 5 18\") == 'YES'\n\"\"\"\nimport sys\nfrom collections import Counter",
        "num_ids_2": 38,
        "num_ids_4": 51
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\\n1 2 3 6\") == \"YES\"\nassert solution(\"5 2 6 27\\n3 3 5 18\") == \"NO\"\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 4') == 'YES'\nassert solution('1\\n1 2 3 6') == 'NO'\nassert solution('5\\n2 6 27') == 'NO'\nassert solution('3\\n3 5 18') == 'YES'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 32,
        "num_ids_4": 62
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 2 7 3 3 1 4') == 'YES'\nassert solution('5 3 4 2 1 0') == 'YES'\nassert solution('5 3 4 2 1') == 'NO'\nassert solution('0 1 2 3 4') == 'YES'\nassert solution('0 1 2 3') == 'NO'\n",
        "num_ids_2": 31,
        "num_ids_4": 59
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 1 2 4\") == \"NO\"\nassert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 4 3 2 1 0\") == \"NO\"\nassert solution(\"5 3 1 5 3\") == \"YES\"\n",
        "num_ids_2": 30,
        "num_ids_4": 61
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 3 4 3 2 1\") == \"YES\"\nassert solution(\"0 1 2 3 4\") == \"YES\"\nassert solution(\"1 1 2 1 2\") == \"NO\"\nassert solution(\"2 1 4 3\") == \"NO\"\n",
        "num_ids_2": 31,
        "num_ids_4": 59
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 4 3 2 1 0\") == \"YES\"\nassert solution(\"5 4 3 2 1\") == \"YES\"\nassert solution(\"0 1 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 4 5\") == \"NO\"\n\n\"\"\"\n\nn = int(input())\nseq = list(map(int, input().split()))\ndec = []\ninc = []",
        "num_ids_2": 31,
        "num_ids_4": 59
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\"\nassert solution(\"5 4 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 5 4 3 1\"\nassert solution(\"5 1 4 3 2 1\") == \"YES\\n0\\n3\\n4\\n5 5 1 4 3 2\"\nassert solution(\"5 4 3 2 1 0\") == \"YES\\n0\\n3\\n4\\n5 5 4 3 1 2\"",
        "num_ids_2": 64,
        "num_ids_4": 128
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 3 1 5 3\") == \"YES\"\nassert solution(\"5 0 1 5 3\") == \"NO\"\nassert solution(\"5 3 1 5 1\") == \"NO\"\n",
        "num_ids_2": 30,
        "num_ids_4": 58
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\"\nassert solution(\"5 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\nassert solution(\"5 0 1 5 3\") == \"YES\\n0\\n3\\n4\\n5 4 3 1\\n\"\n",
        "num_ids_2": 66,
        "num_ids_4": 97
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == 'YES'\nassert solution(\"5 2 4 3 3 1\") == 'YES'\nassert solution(\"5 1 4 3 3 1\") == 'NO'\n\nassert solution(\"4 3 1 5 3\") == 'YES'\nassert solution(\"1 1 2 1 2\") == 'NO'",
        "num_ids_2": 31,
        "num_ids_4": 60
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\"\nassert solution(\"5 4 3 2 1 0\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\nassert solution(\"5 4 3 2 1\") == \"YES\\n0\\n\"\n\nassert solution(\"0 1 2 3 4\") == \"YES\\n0\\n\"\nassert solution(\"0 1 1 2 3\") == \"YES\\n0\\n\"\n",
        "num_ids_2": 67,
        "num_ids_4": 105
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == 'YES'\nassert solution(\"5 3 2 4 1 0\") == 'YES'\nassert solution(\"5 3 1 4 0\") == 'YES'\nassert solution(\"5 3 1 4 2\") == 'NO'\n\nassert solution(\"7 2 7 3 3 1 4\") == 'YES'\n",
        "num_ids_2": 31,
        "num_ids_4": 59
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n\") == 18\n",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2\\n') == '2'\nassert solution('1\\n2\\n3\\n') == '3'\nassert solution('2\\n1\\n1\\n1\\n') == '1'\n",
        "num_ids_2": 20,
        "num_ids_4": 53
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n\") == \"18\"\nassert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1\\n\") == \"8\"\nassert solution(\"5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\\n\") == \"-1\"\n",
        "num_ids_2": 96,
        "num_ids_4": 134
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n\") == 18\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0') == '18'\n\nassert solution('5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1') == '8'\n\nassert solution('5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1') == '-1'\n\n\"\"\"",
        "num_ids_2": 92,
        "num_ids_4": 129
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1\\n') == '8'\nassert solution('5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\\n') == '-1'\n\nimport fileinput",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n') == 18\nassert solution('5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1\\n') == 8\nassert solution('5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\\n') == -1\nassert solution('4 1\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n') == 12\nassert solution('8 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 0 1\\n3 0 1\\n') == -1\n",
        "num_ids_2": 92,
        "num_ids_4": 175
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n\"\"\") == \"18\"\nassert solution(\"\"\"5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 1\n\"\"\") == \"8\"\nassert solution(\"\"\"5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n\"\"\") == \"-1\"\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == 18\nassert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1\") == 8\nassert solution(\"5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\") == -1",
        "num_ids_2": 88,
        "num_ids_4": 123
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 4\") == \"18\"\nassert solution(\"5 2\") == \"8\"\nassert solution(\"5 3\") == \"-1\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == '2\\n6\\n-1\\n7'\nassert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == '-1\\n-1\\n6'\nassert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == '2\\n6\\n-1\\n7'\nassert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == '-1\\n-1\\n6'\nassert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == '2\\n6\\n-1\\n7'",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"3 1\\n1 1 1\\n3 2\\n6 4 8 5\\n2 2\\n1 6\") == \"-1\\n6\\n-1\\n7\"\nassert solution(\"3 1\\n1 1 1\\n3 2\\n6 4 8 5\\n2 2\\n1 6\") == \"-1\\n6\\n-1\\n7\"\nassert solution(\"3 1\\n1 1 1\\n3 2\\n6 4 8 5\\n2 2\\n1 6\") == \"-1\\n6\\n-1\\n7\"\n\n\"\"\"\n",
        "num_ids_2": 99,
        "num_ids_4": 187
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n\") == \"6\\n-1\\n7\"\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n\") == \"6\\n-1\\n7\"\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n\") == \"6\\n-1\\n7\"\n\"\"\"\n",
        "num_ids_2": 111,
        "num_ids_4": 219
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '2\\n6\\n-1\\n7'\n\n\"\"\"\n\nimport sys\nimport collections",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 2\n1 1 2 3 1''') == '2'\nassert solution('''5 1\n1 1 2 3 1''') == '2'\nassert solution('''4 2\n6 4 8 5''') == '6'\nassert solution('''5 2 5\n1 6''') == '-1'\nassert solution('''4 2\n6 4 8 5''') == '6'\n",
        "num_ids_2": 16,
        "num_ids_4": 33
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n\") == \"6\"\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n\") == \"2\\n6\\n-1\\n7\"\n\n\"\"\"\nimport collections\nfrom math import gcd",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\") == \"2\"\nassert solution(\"2\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\") == \"6\"\nassert solution(\"2\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\") == \"-1\"\nassert solution(\"1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\") == \"1\"\n",
        "num_ids_2": 62,
        "num_ids_4": 124
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 8 15 16 23\\n') == '5'\nassert solution('4 8 4 15 16 8 23 15 16 42 23 42\\n') == '0'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42\\n') == '3'\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 64
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n",
        "num_ids_2": 35,
        "num_ids_4": 58
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n4 8 15 16 23') == '5'\nassert solution('12\\n4 8 4 15 16 8 23 15 16 42 23 42') == '0'\nassert solution('15\\n4 8 4 8 15 16 8 16 23 15 16 4 42 23 42') == '3'\n",
        "num_ids_2": 41,
        "num_ids_4": 68
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n",
        "num_ids_2": 35,
        "num_ids_4": 58
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n\nimport re\nimport sys",
        "num_ids_2": 35,
        "num_ids_4": 58
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n4 8 15 16 23\") == \"5\"\nassert solution(\"12\\n4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"0\"\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\n\narr.sort()\n\ncnt = 0\n\nfor i in range(n):\n    if arr[i] % 6!= 0:\n        cnt += 1\n\nprint(cnt)\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"8 8 4 15 16 23\") == \"0\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\n\"\"\"",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == ''\nassert solution('3') == ''\nassert solution('4') == ''\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n4 8 15 16 23') == '5'\nassert solution('12\\n4 8 4 8 15 16 8 16 23 15 16 4 42 23 42') == '0'\nassert solution('15\\n4 8 4 8 15 16 8 16 23 15 16 4 42 23 42') == '3'\n\nprint(solution(input()))\n\"\"\"",
        "num_ids_2": 44,
        "num_ids_4": 71
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5\\n13 42\\n18 4\\n1337 420\\n123456789 1000000000\\n100500 9000') == '0\\n3\\n2\\n92\\n87654322\\n9150'\nassert solution('4 4\\n7 6\\n12 9\\n14 6') == '0\\n0'\n\"\"\"",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\"\nassert solution(\"13 37\\n18 4\") == \"3\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"92\"\nassert solution(\"100500 9000\") == \"87654322\"\n\n\nimport ast\n",
        "num_ids_2": 30,
        "num_ids_4": 65
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\"\nassert solution(\"1337 420\\n123456789 1000000000\") == \"2\"\nassert solution(\"100500 9000\\n100500 90010\") == \"6\"",
        "num_ids_2": 35,
        "num_ids_4": 53
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\n13 42\\n18 4\\n1337 420\\n123456789 1000000000\\n100500 9000\\n\") == \"0\\n3\\n2\\n92\\n87654322\\n9150\"\n\"\"\"",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\"\nassert solution(\"13 37\\n18 4\") == \"3\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"87654322\"\nassert solution(\"100500 9000\") == \"9150\"\n\"\"\"\n\n\"\"\"\nfrom typing import List",
        "num_ids_2": 30,
        "num_ids_4": 66
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '6\\n'\n    '5 5\\n'\n    '13 42\\n'\n    '18 4\\n'\n    '1337 420\\n'\n    '123456789 1000000000\\n'\n    '100500 9000'\n) == '0\\n'\n\nassert solution(\n    '1\\n'\n    '0 0\\n'\n) == '0'\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\\n3\"\nassert solution(\"13 37\\n18 4\") == \"2\\n3\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"924\\n92\"\nassert solution(\"100500 9000\") == \"9150\"\n\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 73
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5\\n13 42') == '0\\n3'\nassert solution('13 37\\n18 4') == '2\\n3'\nassert solution('123456789 1000000000\\n100500 9000') == '92450980'\nassert solution('100500 9000') == '9150'\n\"\"\"\n\nfrom __future__ import annotations",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n13 42\\n18 4\\n1337 420\\n123456789 1000000000\\n100500 9000\") == '0\\n3\\n2\\n92\\n87654322\\n9150'\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('5 5') == '0'\nassert solution('13 42') == '3'\nassert solution('18 4') == '2'\nassert solution('1337 420') == '92'\n",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n",
        "num_ids_2": 75,
        "num_ids_4": 75
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n7 5 12345\") == \"12339\"\nassert solution(\"5\\n0 0 4\") == \"0\"\nassert solution(\"10\\n5 15\") == \"15\"\nassert solution(\"17\\n8 54321\") == \"54306\"\nassert solution(\"499999993\\n9 1000000000\") == \"999999995\"\n",
        "num_ids_2": 32,
        "num_ids_4": 63
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == ''\nassert solution('2 3 1') == '0'\nassert solution('2 0 1') == '1'\n\nassert solution('3 3 1') == '1'\n",
        "num_ids_2": 18,
        "num_ids_4": 42
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution([\"7\", \"5\", \"12345\"]) == \"12339\"\nassert solution([\"5\", \"0\", \"4\"]) == \"0\"\nassert solution([\"10\", \"5\", \"15\"]) == \"15\"\nassert solution([\"17\", \"8\", \"54321\"]) == \"54306\"\nassert solution([\"499999993\", \"9\", \"10000000000\"]) == \"999999995\"\n",
        "num_ids_2": 38,
        "num_ids_4": 77
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n5 12345') == '12339'\nassert solution('5 0 4') == '0'\nassert solution('10 5 15') == '15'\nassert solution('17 8 54321') == '54306'\nassert solution('499999993 9 1000000000') == '999999995'\n",
        "num_ids_2": 28,
        "num_ids_4": 55
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n\nimport math\nimport sys",
        "num_ids_2": 75,
        "num_ids_4": 75
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n\"\"\"\n",
        "num_ids_2": 75,
        "num_ids_4": 75
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"7\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n\"\"\") == \"\"\"12339\n0\n15\n54306\n999999995\n185\n999999998\n\"\"\"\nprint(\"Test 1 successful\")\n\nassert solution(\"\"\"8\n1 0 2\n0 1 2\n1 0 2\n0 1 2\n1 0 2\n0 1 2\n1 0 2\n0 1 2\n1 0 2\n0 1 2\n\"\"\") == \"\"\"12\n2\n12\n12\n2\n10\n0\n10\n12\n2\n\"\"\"\nprint(\"Test 2 successful\")\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n\"\"\"\n",
        "num_ids_2": 75,
        "num_ids_4": 75
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\\n\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\nprint(\"AC\")\n\nassert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\\n\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\nprint(\"AC\")\n",
        "num_ids_2": 154,
        "num_ids_4": 154
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n",
        "num_ids_2": 41,
        "num_ids_4": 61
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 2 3 4') == '1'\nassert solution('5 3\\n1 2 3 2 4 5') == '0'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('9 2\\n1 2 2 3 2 4 6 10') == '8'\n",
        "num_ids_2": 36,
        "num_ids_4": 77
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 61
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"7 2\n1 2 2 3 2 4 10\"\"\") == \"6\"\nassert solution(\"\"\"8 2\n1 2 2 3 2 4 6 10\"\"\") == \"8\"\nassert solution(\"\"\"7 3\n1 2 2 3 2 4 5\"\"\") == \"4\"\n\n\"\"\"\n\u672c\u9898\u8003\u5bdf\u4e86\u9012\u5f52\u548c\u52a8\u6001\u89c4\u5212\u7684\u57fa\u672c\u601d\u60f3\u3002\n\n\u5728\u9898\u76ee\u4e2d\u63d0\u793a\u4e86\u5171\u6709 n \u4e2a\u7cd6\u679c\u76d2\u5b50\uff0c\u4ee5\u53ca k \u4e2a\u5c0f\u670b\u53cb\u3002\n\n\u7b2c\u4e00\u6b65\uff1a\n\n\u5982\u679c\u67d0\u4e2a\u7cd6\u679c\u76d2\u5b50\u6ca1\u6709\u88ab\u4f7f\u7528\uff0c\u5219\u7cd6\u679c\u76d2\u5b50\u53ef\u4ee5\u88ab\u7ec4\u6210 k \u4e2a\u4e0d\u540c\u7684\u7cd6\u679c\u76d2\u5b50\uff0c\n\u8fd9\u79cd\u60c5\u51b5\u4e0b\u76d2\u5b50\u7684\u603b\u6570\u4e3a n - k + 1\u3002\n\n\u7b2c\u4e8c\u6b65\uff1a\n\n\u5982\u679c\u7b2c\u4e00\u6b65\u9009\u53d6\u4e86\u7cd6\u679c\u76d2\u5b50 p\uff0c\u90a3\u4e48\u7cd6\u679c\u76d2\u5b50 q \u53ef\u4ee5\u88ab\u9009\u53d6\uff0c\u5982\u679c q \u6ee1\u8db3 q % p = 0\n\u7cd6\u679c\u76d2\u5b50 p \u548c\u7cd6\u679c\u76d2\u5b50 q \u4e4b\u95f4\u7684\u957f\u5ea6\u5dee\u4e3a p - q\u3002\n\n\u90a3\u4e48\u7b2c\u4e8c\u6b65\u4e2d\u53ef\u4ee5\u9009\u53d6\u7684\u7cd6\u679c\u76d2\u5b50\u6570\u91cf\u662f n - k + 1 - (n - k + 1) % (p - q) + (n - k + 1) // (p - q) + 1\u3002\n\n\u7b2c\u4e09\u6b65\uff1a\n\n\u5982\u679c\u67d0\u4e2a\u7cd6\u679c\u76d2\u5b50\u88ab\u4f7f\u7528\uff0c\u90a3\u4e48\u7cd6\u679c\u76d2\u5b50 q \u6ee1\u8db3 q % p = 0\n\n\u7b2c\u4e8c\u6b65\u4e2d\u9009\u53d6\u4e86\u7cd6\u679c\u76d2\u5b50 q\uff0c\u90a3\u4e48\u7cd6\u679c\u76d2\u5b50 p \u53ef\u4ee5\u88ab\u9009\u53d6\uff0c\u5982\u679c p \u6ee1\u8db3 p % q = 0\n\u7cd6\u679c\u76d2\u5b50 p \u548c\u7cd6\u679c\u76d2\u5b50 q \u4e4b\u95f4\u7684\u957f\u5ea6\u5dee\u4e3a p - q\u3002\n\n\u90a3\u4e48\u7b2c\u4e09\u6b65\u4e2d\u53ef\u4ee5\u9009\u53d6\u7684\u7cd6\u679c\u76d2\u5b50\u6570\u91cf\u662f n - k + 1 - (n - k + 1) % (p - q) + (n - k + 1) // (p - q) + 1 - (n - k + 1) % (p - q) + (n - k + 1) // (p - q)\n\n\"\"\"\nimport math\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\nassert solution(\"8 3\\n1 2 2 3 2 4 6 10\") == \"8\"",
        "num_ids_2": 41,
        "num_ids_4": 82
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"",
        "num_ids_2": 41,
        "num_ids_4": 61
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\nassert solution(\"8 3\\n1 2 2 3 2 4 6 10\") == \"8\"\n",
        "num_ids_2": 41,
        "num_ids_4": 82
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\") == \"6\"\nassert solution(\"8 2\") == \"8\"\nassert solution(\"7 3\") == \"4\"\nassert solution(\"1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"1 2 2 3 2 4 6 10\") == \"8\"\n",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n",
        "num_ids_2": 41,
        "num_ids_4": 61
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 61
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABC\", 1) == \"aBC\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABC\") == \"abc\"\nassert solution(\"XYZ\") == \"xzy\"\nassert solution(\"HIJKL\") == \"hijk\"\nassert solution(\"abcdefghijkl\") == \"abcd\"\nassert solution(\"ABc\") == \"Abc\"\n",
        "num_ids_2": 22,
        "num_ids_4": 51
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 1\nABC''') == 'aBC'\n\nassert solution('''4 3\nAbBaC''') == 'abBaC'\n\nassert solution('''5 5\nAbBaCcDdEeFfGgHhIi''') == 'AbBaCcDdEeFfGgHhIi'\n\nassert solution('''5 5\nzxcvb''') == 'zxcvb'\n\nassert solution('''5 5\nzzzvbb''') == 'zzzvbb'",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ABC') == 'aBC'\nassert solution('ZPW') == 'zpw'\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC\") == \"abc\"\nassert solution(\"Hello World\") == \"hello world\"\n\"\"\"\n\nfrom typing import List, Dict\nimport numpy as np\n\nclass Solution:\n    def solution(self, stdin: List[str]) -> None:\n        '''\n        Write the code in `solution` function only.\n        You are not allowed to use any pre-defined function.\n        '''\n        n = stdin[0].split(\" \")\n        n = int(n[0])\n        k = int(n[1])\n        stdin = stdin[1].split(\" \")\n        stdin = [i for i in stdin]\n        res = []\n        for i in range(n):\n            res.append(stdin[i])\n        res[k-1] = res[k-1].lower()\n        print(\" \".join(res))",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC\") == \"abc\"\nassert solution(\"abC\") == \"abc\"\nassert solution(\"aBC\") == \"abc\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 1\nABC''') == 'aBC'\nassert solution('''5 3\nBCDEF''') == 'BCdef'\nassert solution('''5 1\nBCDEF''') == 'BCde'\nassert solution('''1 1\nA''') == 'A'\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABC\") == \"aBC\"\nassert solution(\"aBc\") == \"abC\"\nassert solution(\"abC\") == \"abC\"\nassert solution(\"aBcD\") == \"aBCD\"\nassert solution(\"aBCD\") == \"abcd\"\n\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 51
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABC') == 'abc'",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('AaBbCc') == 'aAbBbCc'\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\nkhabarovsk 10\\nmoscow 20\\nkazan 30\\nkazan 40\\nmoscow 50\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n\"\"\"",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\": K a z a n o w s k h a v a r o w s k h a v a n o w s k h a z a n o w s k h a r o w s k h a v a n o w s k h a z a n o w s k h a r o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w s k h a v a n o w s k h a z a n o w s k h a z a n o w",
        "num_ids_2": 1610,
        "num_ids_4": 1610
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n\"\"\"",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n\n\"\"\"",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\nkab\\nab\\nkab') == '1\\n1\\n1'\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\"\"\") == \"3\\n4\\n6\\n1\\n5\\n2\"",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\nkhabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40') == '3\\n4\\n6\\n1\\n5\\n2'\n\n\"\"\"\nfrom typing import List, Dict, TextIO, Union\n\n\nclass Solution:\n    def solution(self, stdin: TextIO, stdout: TextIO) -> None:\n        n = int(stdin.readline())\n        result: Dict[str, Dict[int, int]] = {}\n        for i in range(n):\n            city, score = stdin.readline().split()\n            if city in result:\n                result[city][int(score)] = i\n            else:\n                result[city] = {int(score): i}\n\n        for city, scores in sorted(result.items()):\n            for score, i in sorted(scores.items(), reverse=True):\n                stdout.write(str(i + 1) + '\\n')\n",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 900') == 'Yes'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 900') == 'Yes'\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\n\"\"\"\n\nfrom collections import defaultdict\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\n\"\"\"\n\nK, X = list(map(int, input().split()))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 900') == 'Yes'\n\"\"\"\n\nK, X = map(int, input().split(' '))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1000\") == \"Yes\"\nprint(solution(\"2 1000\"))\n\nYou can submit the solution by sending the output to the submission box to your right.\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 900\") == \"Yes\"\nassert solution(\"1 1\") == \"No\"\n\n\"\"\"\n\nK, X = input().split()\nK = int(K)\nX = int(X)\n\na = 0\nb = 0\n\nfor i in range(K):\n    if a + 500 > X:\n        break\n    a += 500\n    b += 1",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 900\\n') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '3 10'\n) == '0.145833333333'\n\"\"\"\n\n\"\"\"\nimport unittest\nfrom collections import deque\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_solution_1(self):\n        self.assertEqual(\n            solution(\n                '3 10'\n            ),\n            '0.145833333333'\n        )\n    def test_solution_2(self):\n        self.assertEqual(\n            solution(\n                '1 10'\n            ),\n            '0.555555555555'\n        )\n    def test_solution_3(self):\n        self.assertEqual(\n            solution(\n                '2 10'\n            ),\n            '0.222222222222'\n        )\n    def test_solution_4(self):\n        self.assertEqual(\n            solution(\n                '1 1000000000'\n            ),\n            '0.99999676477'\n        )\n    def test_solution_5(self):\n        self.",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\"\"\"\n\nimport unittest\n\nimport numpy as np\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"3 10\"\n) == \"0.145833333333\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10\") == '0.145833333333'\n\"\"\"\n\nimport re\nfrom collections import defaultdict, Counter\nfrom decimal import Decimal, getcontext\n\ngetcontext().prec = 100\n\nN, K = map(int, input().split())\npattern = re.compile(r\"([0-9]+|\\*)\")\ncounter = Counter()\ntotal = Decimal(0)\nfor i in range(N):\n    counter += Counter(map(int, pattern.findall(input())))\n    for k in range(K, 1, -1):\n        if counter[k]!= 0:\n            total += Decimal(1) / Decimal(counter[k])\n            break\n\nprint(f\"{total:.9f}\")\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\"\"\"\n\nimport collections",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"SAT\") == 1\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('SAT') == 1\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"SAT\") == 1\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"SAT\") == 1\nassert solution(\"MON\") == 0\nassert solution(\"TUE\") == 1\nassert solution(\"WED\") == 2\nassert solution(\"THU\") == 3\n",
        "num_ids_2": 17,
        "num_ids_4": 35
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"SAT\") == 1\n\"\"\"\nimport sys",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"SAT\") == 1\nassert solution(\"MON\") == 0\nassert solution(\"TUE\") == 0\nassert solution(\"WED\") == 0\nassert solution(\"THU\") == 0\n",
        "num_ids_2": 17,
        "num_ids_4": 35
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('SAT') == 1\n\n---\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"SAT\") == \"1\"\nassert solution(\"MON\") == \"0\"\nassert solution(\"TUE\") == \"1\"\nassert solution(\"WED\") == \"2\"\nassert solution(\"THU\") == \"3\"\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('SAT') == '1'\n\"\"\"\n\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('SAT') == '1'",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 10 20''') == '''30\n50\n90\n170\n330\n650\n1290\n2570\n5130\n10250'''\n\nassert solution('''5 20 10\n''') == '''90\n170\n330\n650\n1290\n2570'''\n\nassert solution('''5 10 20\n''') == '''90\n170\n330\n650\n1290\n2570'''\n\nassert solution('''4 20 10\n''') == '''90\n170\n330\n650\n1290'''\n\nassert solution('''3 20 10\n''') == '''90\n170\n330\n650'''",
        "num_ids_2": 24,
        "num_ids_4": 42
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\"\"\"\n\nimport sys\n\nr, D, x_2000 = map(int, sys.stdin.readline().split())\n\nx_2001 = r * x_2000 - D\n\nprint(x_2001)\nprint(x_2001)\nprint(x_2001)\nprint(x_2001)\nprint(x_2001)\nprint(x_2001)\nprint(x_2001)\nprint(x_2001)\nprint(x_2001)\nprint(x_2001)\nprint(x_2001)\nprint(x_2001)\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1 10\\n') == '10'\nassert solution('2 10 20\\n') == '30'\nassert solution('3 10 20\\n') == '50'\n",
        "num_ids_2": 20,
        "num_ids_4": 47
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('r\\n10\\n') == '10'\nassert solution('r\\n10\\nr\\n20\\n') == '30'\nassert solution('r\\n10\\nr\\n20\\nr\\n30\\n') == '50'\nassert solution('r\\n10\\nr\\n20\\nr\\n30\\nr\\n40\\n') == '90'\n",
        "num_ids_2": 23,
        "num_ids_4": 68
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10 20\") == \"30\"\nassert solution(\"3 50 20\") == \"170\"\nassert solution(\"4 20 10\") == \"330\"\nassert solution(\"5 20 10\") == \"650\"\nassert solution(\"6 40 20\") == \"1290\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 10 20\\n\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\\n\"\nprint(\"PASSED\")",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\nprint(solution(stdin))\n\n'''\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\nprint(solution(\"2 10 20\"))\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 3 1 1 4') == '5'\nassert solution('5\\n1 3 2 1 4') == '4'\nassert solution('3\\n4 1 2') == '0'\n\"\"\"\nimport sys\nimport os\nimport string\nimport math\nimport time\nimport itertools\nimport random\nimport heapq\nimport bisect\nfrom typing import cast, Any, Callable, List, Tuple, Dict, Set, TypeVar, Union, Optional\nfrom typing import Dict, Set, Deque, Any\nfrom collections import defaultdict, namedtuple",
        "num_ids_2": 34,
        "num_ids_4": 49
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\n\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1 3 1 1 4') == '5'\nassert solution('5 3 1 1 4') == '4'\nassert solution('3 4 1 2') == '0'\nassert solution('1 3 2 1 4') == '4'\n\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 56
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3 1 1 4\") == \"5\"\nassert solution(\"1 3 2 1 4\") == \"4\"\nassert solution(\"4 1 2\") == \"0\"\n\n\n-----Test 2-----\n\nInput\n8\n5 1 3 1 1 4\n\nOutput\n5\n\n\n-----Test 3-----\n\nInput\n9\n7 4 2 1 1 1 5\n\nOutput\n9\n\n\n-----Test 4-----\n\nInput\n10\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n15\n\n\n-----Test 5-----\n\nInput\n4\n9 9 9 9\n\nOutput\n0\n\n\n-----Test 6-----\n\nInput\n6\n9 9 9 9 0\n\nOutput\n9\n\n\n-----Test 7-----\n\nInput\n5\n9 1 8 4 0\n\nOutput\n9\n\n\n-----Test 8-----\n\nInput\n7\n2 4 6 7 6 0\n\nOutput\n8\n\n\n-----Test 9-----\n\nInput\n5\n0 4 3 2 1\n\nOutput\n0\n\n\n-----Test 10-----\n\nInput\n6\n7 6 8 5 9 0\n\nOutput\n17\n\n\n-----Test 11-----\n\nInput\n6\n9 9 9 9 1\n\nOutput\n10\n\n\n-----Test 12-----\n\nInput\n8\n9 9 9 9 1 1 1\n\nOutput\n9\n\n\n-----Test 13-----\n\nInput\n5\n9 1 1 1 9\n\nOutput\n8\n\n\n-----Test 14-----\n\nInput\n6\n9 9 9 9 0\n\nOutput\n0\n\n\n-----Test 15-----\n\nInput\n3\n1 2 3\n\nOutput\n6\n\n\n-----Test 16-----\n\nInput\n5\n1 1 1 1 1\n\nOutput\n1\n\n\n-----Test 17-----\n\nInput\n4\n1 1 1 1\n\nOutput\n1\n\n\n-----Test 18-----\n\nInput\n7\n1 2 3 4 5 6 7\n\nOutput\n15\n\n\n-----Test 19-----\n\nInput\n7\n9 9 9 9 9\n\nOutput\n0\n\n\n-----Test 20-----\n\nInput\n5\n1 1 1 1 1\n\nOutput\n0\n\n-----Test 21-----\n\nInput\n5\n2 2 1 1 2\n\nOutput\n4\n\n\n-----Test 22-----\n\nInput\n6\n3 3 3 3 3 3\n\nOutput\n0\n\n\n-----Test 23-----\n\nInput\n5\n0 0 0 0 0\n\nOutput\n0\n",
        "num_ids_2": 28,
        "num_ids_4": 40
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 3 1 1 4\") == 5\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 1 1 4\") == \"5\"\nassert solution(\"1 3 2 1 4\") == \"4\"\nassert solution(\"4 1 2\") == \"0\"",
        "num_ids_2": 28,
        "num_ids_4": 40
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 3 1 1 4\") == 5\nassert solution(\"5 1 3 2 1 4\") == 4\nassert solution(\"3 1 2\") == 0\n",
        "num_ids_2": 26,
        "num_ids_4": 36
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\"\nassert solution(\"1\\n5\") == \"5\"\nassert solution(\"2\\n3 2 3\") == \"6\"\n",
        "num_ids_2": 34,
        "num_ids_4": 62
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\"\nassert solution(\"3\\n4 1 5\") == \"0\"\n",
        "num_ids_2": 34,
        "num_ids_4": 64
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\"\n",
        "num_ids_2": 34,
        "num_ids_4": 49
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\\n\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n\"\"\"\n\nimport sys\nimport math\n\nt = int(sys.stdin.readline().rstrip())\n\nfor _ in range(t):\n    x,y,z = map(int, sys.stdin.readline().rstrip().split())\n    a = max(x,y)\n    b = max(a,z)\n    c = max(b,y)\n    if c == x:\n        print(\"YES\")\n        print(a,b,c)\n    elif c == b:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(a,c,b)\n",
        "num_ids_2": 67,
        "num_ids_4": 67
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 3\") == \"NO\"\n\"\"\"\n\nt = int(input())\n\nfor i in range(t):\n    x, y, z = map(int, input().split())\n    if x <= y:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\nprint(solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\"))",
        "num_ids_2": 62,
        "num_ids_4": 62
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2 3') == 'YES'\nassert solution('100 100 100') == 'NO'\nassert solution('50 49 49') == 'NO'\nassert solution('10 30 20') == 'YES'\nassert solution('1 1000000000 1000000000') == 'YES'",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 62,
        "num_ids_4": 62
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000') == 'YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000'",
        "num_ids_2": 62,
        "num_ids_4": 62
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == 'YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000'\nassert solution(\"4\\n3 2 2\\n3 2 2\\n3 2 2\\n3 2 2\") == 'NO\\nNO\\nNO\\nNO'\nassert solution(\"3\\n1 0 1\") == 'YES\\n1 0 1'\nassert solution(\"5\\n1 1 1\\n2 2 2\\n3 3 3\\n4 4 4\\n5 5 5\") == 'NO\\nNO\\nNO\\nNO\\nNO'\nassert solution(\"7\\n1 0 1\\n2 0 1\\n2 0 1\\n3 0 1\\n3 1 1\\n3 2 1\\n4 0 1\\n4 0 1\\n4 0 1\\n4 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n5 0 1\\n6 0 1\\n6 0 1\\n6 0 1\\n6 0 1\\n6 0 1\\n7 0 1\\n7 0 1\\n7 0 1\\n7 0 1\\n7 0 1\\n7 0 1\\n7 0 1\\n7 0 1\\n7 0 1\\n7 0 1\") == 'YES\\n1 1 1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 2 1\\n2 3 1\\n2 4 1\\n3 3 1\\n3 4 1\\n4 4 1'\n",
        "num_ids_2": 104,
        "num_ids_4": 171
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2 3') == 'YES'\nassert solution('100 100 100') == 'YES'\nassert solution('50 49 49') == 'NO'\nassert solution('10 30 20') == 'YES'\nassert solution('1 1000000000 1000000000') == 'YES'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2 3') == 'YES'\nassert solution('100 100 100') == 'NO'\nassert solution('50 49 49') == 'NO'\nassert solution('10 30 20') == 'YES'\nassert solution('1 1000000000 1000000000') == 'YES'\n\"\"\"\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'NO'\nassert solution('5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000') == 'YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000'\n\"\"\"",
        "num_ids_2": 75,
        "num_ids_4": 75
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 6\") == \"4\"\nassert solution(\"5 1 4\") == \"1\"\nassert solution(\"5 3 3\") == \"5\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\nassert solution(\"5 3 2\\n1 2 3 1 1\") == \"4\"\nassert solution(\"5 2 1\\n1 2 3 4 5\") == \"0\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == '4'\nassert solution(\"5 1 4\\n4 2 3 4 1\") == '1'\nassert solution(\"5 3 3\\n1 2 3 1 1\") == '5'\n",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == '4'\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 2 6\n5 2 1 4 2''') == '4'\nassert solution('''5 1 4\n4 2 3 4 1''') == '1'\nassert solution('''5 3 3\n1 2 3 1 1''') == '5'\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 27
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\n",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 2 6\n5 2 1 4 2''') == '4'\n\nassert solution('''5 1 4\n4 2 3 4 1''') == '1'\n\nassert solution('''5 3 3\n1 2 3 1 1''') == '5'\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 27
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abacaba') == 12\nassert solution('aaaaaaa') == 21\nassert solution('sadfaasdda') == 0\n",
        "num_ids_2": 19,
        "num_ids_4": 32
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\") == 12\n\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == 12\n\n\"\"\"\n\nn, k = map(int, input().split())\ns = input()\na = list(map(chr, range(97, 123)))\nb = list(map(chr, range(97, 123)))\nfor i in range(k):\n    a.remove(b[0])\n    b.remove(b[0])\nprint(len(s) - len(set(s)) + 26 - len(a))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\n\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 32
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\nassert solution(\"aaaaaaa\") == 0\n",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abacaba') == 12\nassert solution('aaaaaaa') == 21\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == \"12\"\nassert solution(\"aaaaaaa\") == \"21\"\n\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == \"12\"\nassert solution(\"aaaaaaa\") == \"21\"\nassert solution(\"sadfaasdda\") == \"0\"\n",
        "num_ids_2": 23,
        "num_ids_4": 38
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 21\n\"\"\"\n\nn, k = [int(i) for i in stdin.readline().split()]\ns = stdin.readline().strip()\nc = set([stdin.readline().strip() for _ in range(k)])\nresult = 0\n\nfor i in range(n - k + 1):\n    result += s[i:i + k].count(min(s[i:i + k]))\n\nprint(result)\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == '2\\n-1\\n6\\n-2999999997'\nassert solution(\"4\\n2\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\") == '1\\n-1\\n5\\n-4'\nassert solution(\"5\\n4\\n-1 -2 -1 -3\\n3\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\") == '-1\\n-1\\n5\\n-4'\nassert solution(\"5\\n5\\n-1 -2 -1 -3\\n-1 -2 -1 -3\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\") == '-1\\n-1\\n5\\n-4'\nassert solution(\"1\\n1\\n1\") == '1'\n",
        "num_ids_2": 153,
        "num_ids_4": 316
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\nassert solution(\"4\\n3\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\nassert solution(\"4\\n5\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 112,
        "num_ids_4": 224
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '''\n2\n-1\n6\n-2999999997\n'''\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2\\n-1\\n6'\nassert solution('4\\n4\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2\\n-1\\n6'",
        "num_ids_2": 124,
        "num_ids_4": 124
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == '2\\n-1\\n6\\n-2999999997'",
        "num_ids_2": 89,
        "num_ids_4": 89
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('2\\n1') == '1'\nassert solution('2\\n-1') == '-1'\nassert solution('2\\n-1\\n1') == '-1'\nassert solution('2\\n-1\\n1\\n-2') == '-2'\n",
        "num_ids_2": 21,
        "num_ids_4": 54
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\") == \"2\\n-1\\n6\"\nassert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\") == \"2\\n-1\\n6\"\nassert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\") == \"2\\n-1\\n6\"\n\n\"\"\"",
        "num_ids_2": 78,
        "num_ids_4": 117
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\nassert solution(\"4\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"-2999999997\\n1\\n1\"\nassert solution(\"4\\n7\\n1 -1000000001 1 -1000000001 1 -1000000001\\n7\\n1 -1000000001 1 -1000000001 1 -1000000001\") == \"1\\n-1\\n1\"\nassert solution(\"4\\n8\\n1 2 3 -1 -2\\n8\\n-1 -2 -1 -3\\n8\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\nassert solution(\"4\\n9\\n1 -1000000001 1 -1000000001 1 -1000000001\\n9\\n1 -1000000001 1 -1000000001 1 -1000000001\") == \"-2999999997\\n1\\n1\"\n",
        "num_ids_2": 121,
        "num_ids_4": 240
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('123') == '123'\nassert solution('+-1') == '1'\nassert solution('1-2-3-4') == '13'\nassert solution('1-2-3-4') == '13'\n",
        "num_ids_2": 18,
        "num_ids_4": 46
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\"\nassert solution(\"5 5\\n1 2\\n3 4\\n1 5\\n2 3\") == \"2 1\\n3 2\\n1 3\\n2 4\\n3 5\"\n",
        "num_ids_2": 88,
        "num_ids_4": 196
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5 5\n1 2\n2 3\n3 5\n4 3\n1 5\"\"\") == \"\"\"3 5\n2 1\n3 2\n3 4\"\"\"\n\nassert solution(\"\"\"4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\"\"\") == \"\"\"4 1\n1 2\n1 3\"\"\"\n\nassert solution(\"\"\"8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n\"\"\") == \"\"\"3 2\n2 5\n8 5\n6 1\n2 7\n1 2\n3 4\"\"\"\n\"\"\"\n\n\n----Possible Solutions----",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"3 2\\n2 5\\n8 5\\n6 1\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"",
        "num_ids_2": 92,
        "num_ids_4": 164
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 5\n1 2\n2 3\n3 5\n4 3\n1 5''') == '''3 5\n2 1\n3 2\n3 4'''\n\nassert solution('''4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4''') == '''4 1\n1 2\n1 3'''\n\nassert solution('''8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8''') == '''3 2\n2 5\n8 5\n6 1\n2 7\n1 2\n3 4'''\n\nassert solution('''6 3\n1 2\n1 3\n1 5\n2 3\n2 5\n3 6''') == '''3 2\n3 1\n5 1\n2 5\n1 2\n3 4'''\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5') == '3 5\\n2 1\\n3 2\\n3 4'\nassert solution('4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4') == '4 1\\n1 2\\n1 3'\n\n\"\"\"\nimport sys\nfrom collections import defaultdict",
        "num_ids_2": 88,
        "num_ids_4": 88
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5 5\n1 2\n2 3\n3 5\n4 3\n1 5\n\"\"\") == \"\"\"\n3 5\n2 1\n3 2\n3 4\n\"\"\"\n\nassert solution(\"\"\"\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n\"\"\") == \"\"\"\n4 1\n1 2\n1 3\n\"\"\"\n\nassert solution(\"\"\"\n8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n\"\"\") == \"\"\"\n3 2\n2 5\n8 5\n6 1\n2 7\n1 2\n3 4\n\"\"\"\n\n\"\"\"\n3 4\n1 2\n1 3\n3 4\n\"\"\"\n\n\"\"\"\n6 9\n1 2\n1 3\n1 4\n2 3\n2 4\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 15
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\\n\") == \"3 5\\n2 1\\n3 2\\n3 4\\n\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\") == \"4 1\\n1 2\\n1 3\\n\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\\n\"\nassert solution(\"5 3\\n1 2\\n2 3\\n3 5\\n\") == \"3 5\\n2 1\\n3 2\\n\"\nassert solution(\"1 3\\n2 3\") == \"2 1\\n3 2\\n\"\n",
        "num_ids_2": 96,
        "num_ids_4": 208
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\"\nprint('Passed')\n\n\"\"\"\n\nimport collections",
        "num_ids_2": 88,
        "num_ids_4": 152
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\\n\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\"\n",
        "num_ids_2": 92,
        "num_ids_4": 158
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\"\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict",
        "num_ids_2": 88,
        "num_ids_4": 152
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('11') == '3'\nassert solution('111') == '6'\nassert solution('1111') == '10'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"499993\\n\") == \"40\"\nassert solution(\"5\\n\") == \"41664916690999888\"\n\"\"\"\nimport sys\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n499993\") == \"40\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5\\n') == '5'\nassert solution('99999999999999999999999\\n') == '99999999999999999999999'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n5\\n499993\\n\") == '0\\n40\\n41664916690999888'",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == ''\nassert solution('1\\n5') == '4'\nassert solution('499993\\n499993') == '41715669966996652'\n\"\"\"\n\nimport sys\n\nfrom icecream import ic\n\nsys.setrecursionlimit(10 ** 6)\n\nDATASET = \"\"\"\n2\n2\n5\n5\n\"\"\"\n\nDATASET = \"\"\"\n1\n5\n5\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 56
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5\n5\n499993\n\"\"\") == \"41664916690999888\"\n\"\"\"",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n499993') == '0\\n40\\n41664916690999888'\n\"\"\"\n\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n5\") == \"0\"\nassert solution(\"2\\n499993\") == \"40\"\nassert solution(\"3\\n999911\") == \"41664916690999888\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 28,
        "num_ids_4": 47
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n5') == '0'\nassert solution('499993\\n') == '41664916690999888'\n\"\"\"\n\nimport math\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '1'\nassert solution('2\\n1 1') == '1 1'\nassert solution('4\\n2 3 4 1') == '2 2 2 2 2'\nassert solution('4\\n2 3 1 2') == '2 3 2 2 2'\n",
        "num_ids_2": 21,
        "num_ids_4": 56
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2\\n2 3 1') == '1 -1 0 1 1'\nassert solution('3\\n3 2 2 1') == '1 -1 0 1 1'\nassert solution('3\\n3 2 2 2') == '1 -1 0 0 1'\nassert solution('2\\n3 1 2') == '1 -1 0 1 1'\n",
        "num_ids_2": 28,
        "num_ids_4": 70
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(expected_result)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('123') == '-1'\nassert solution('123\\n4') == '3'\nassert solution('123\\n123\\n3') == '-1'\n",
        "num_ids_2": 18,
        "num_ids_4": 42
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"2 -1 -1 -1 -1 -1 -1 -1 -1 -1\"\n\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"2 -1 -1 -1 -1 -1 -1 -1 -1 -1\"\n\"\"\"\n\nfrom collections import deque\n",
        "num_ids_2": 66,
        "num_ids_4": 103
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\"\nfrom collections import deque\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == '1 1 1 2 -1 1 1 3 1 1'\nprint(solution(\"4 5 7 6 7 5 4 4 6 4\"))\n\n---Problem type---\n\nProblem: \n    - Binary sequence\n    - Dynamic programming\n    - Find number of ways to reach the position that does not follow the rule.\n    - Minimize the number of changes\n    - Minimum number of moves required to make a binary sequence even if its initial part is odd\n\n\"\"\"\nfrom typing import List\n\nfrom utils import timer\n\n\nclass Solution:\n    @timer\n    def solution(self, n: int, a: List[int]) -> List[int]:\n        pass\n\n    def find_odd_even_position(self, a: List[int]) -> List[int]:\n        \"\"\"\n        Return min number of moves required to reach the position with opposite parity.\n        \"\"\"\n        moves = 0\n        min_odd, max_odd = -1, -1\n        min_even, max_even = -1, -1\n\n        for i in range(len(a)):\n            if a[i] % 2 == 1:\n                if min_odd == -1:\n                    min_odd = i\n                max_odd = i\n            else:\n                if min_even == -1:\n                    min_even = i\n                max_even = i\n\n            if max_even - min_odd <= max_odd - min_odd:\n                break\n\n        return [min_odd, max_odd] if min_odd!= -1 else [-1, -1]\n\n    @timer\n    def solution_old(self, n: int, a: List[int]) -> List[int]:\n        odd = self.find_odd_even_position(a)\n        even = self.find_odd_even_position(a[::-1])\n        if odd[0]!= even[0] and odd[1]!= even[1]:\n            return [odd[0] + even[0] + 1, odd[1] + even[1] + 1]\n        return [odd[0] + even[0] + 1, -1]\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nodd = []\neven = []\nfor num in a:\n    if num % 2 == 0:\n        even.append(num)\n    else:\n        odd.append(num)\n\nodd_pairs = set()\neven_pairs = set()\nfor i in range(len(odd) - 1):\n    odd_pairs.add(odd[i] + odd[i + 1])\n\nfor i in range(len(even) - 1):\n    even_pairs.add(even[i] + even[i + 1])\n\ndiff = []\nfor i in odd_pairs:\n    if i in even_pairs:\n        diff.append(i)\n\nprint(len(diff))\nfor i in diff:\n    print(i, end=' ')",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('64\\n32\\n97\\n2\\n12345') == 'YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823'\n\"\"\"\n\nimport math\nimport sys",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('64\\n32\\n97\\n2\\n12345') == 'YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823'\nassert solution('65\\n32\\n97\\n2\\n12345') == 'YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823'\nassert solution('65\\n32\\n97\\n2\\n12345') == 'YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823'\nassert solution('65\\n32\\n97\\n2\\n12345') == 'YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823'\nassert solution('65\\n32\\n97\\n2\\n12345') == 'YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823'\n",
        "num_ids_2": 86,
        "num_ids_4": 172
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('64\\n32\\n97\\n2\\n12345') == 'YES\\n2 4 8'\n\"\"\"\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = 1\n    while a*a < n:\n        b = 1\n        while b*b < n:\n            if a*b*b == n:\n                print('YES')\n                print(a, b, n//a)\n                break\n            b += 1\n        if b*b == n:\n            break\n        a += 1\n    if a*b*b!= n:\n        print('NO')\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"64 32 97 2 12345\") == \"YES 2 4 8\"\nassert solution(\"7\") == \"NO\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"YES\"\n",
        "num_ids_2": 25,
        "num_ids_4": 45
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('64\\n32\\n97\\n2\\n12345') == \"YES\\n2 4 8\"\nassert solution('64\\n32\\n97\\n2\\n12345') == \"YES\\n2 4 8\"\n\"\"\"\n\nfrom typing import List\nimport itertools",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"64 32 97 2 12345\") == \"YES 2 4 8\"\nassert solution(\"64 32 97\") == \"NO\"\nassert solution(\"2 4 8\") == \"YES\"\nassert solution(\"2 4 32\") == \"YES 2 4\"\nassert solution(\"2 4 65\") == \"NO\"\n\"\"\"\nimport sys\n",
        "num_ids_2": 30,
        "num_ids_4": 56
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\nassert solution(\"2\") == \"NO\"\n\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\\n\") == \"YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823\"\nprint(\"PASSED\")\n\n\"\"\"",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('64 32 97 2 12345') == 'YES\\n2 4 8'\nassert solution('12345') == 'YES\\n3 5 823'\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\n\"\"\"\nimport sys\nimport math\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abba') == 2\nassert solution('aab') == 1\nassert solution('abb') == 0\n\n\"\"\"\nimport math\n",
        "num_ids_2": 17,
        "num_ids_4": 25
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abba') == 2\nassert solution('ababab') == 0\nassert solution('aa') == 1\nassert solution('bbbb') == 2\nassert solution('bb') == 1\n\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 35
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"bbbbbbbb\") == 4\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 37
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ababab\") == \"2\"\nassert solution(\"abbab\") == \"0\"\nassert solution(\"aabbab\") == \"1\"\nassert solution(\"abb\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('abba') == 'abba'\nassert solution('aabab') == 'abba'\nassert solution('a') == 'a'\nassert solution('ab') == 'a'\n",
        "num_ids_2": 18,
        "num_ids_4": 40
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"abbbaaab\") == 1\n\n-----Explanation-----\nIn the first example, 'b' occurs twice. Therefore, two operations are needed: replace the first 'b' with 'a' and the last 'b' with 'a'.\n\nIn the second example, there is no need to change anything.\n\nIn the third example, 'a' occurs twice and 'b' occurs three times. Three operations are needed: replace the first 'a' with 'b', replace the last 'a' with 'b' and replace the second 'a' with 'b'.\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 29
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\n",
        "num_ids_2": 18,
        "num_ids_4": 26
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\nbbbb''') == '2'\n\nassert solution('''6\nababab''') == '0'\n\nassert solution('''2\naa''') == '1'\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abba\") == 2\n\n\"\"\"\n\n\nimport sys\nimport numpy as np\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\n",
        "num_ids_2": 18,
        "num_ids_4": 26
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\") == \"9\"\n\"\"\"\n\nfrom functools import lru_cache",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'a'\nassert solution('aaa') == 'a'\n\nassert solution('2\\n1 4') == '15'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n\n\nimport json\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n0 1\") == \"9\"\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 2\\n0 2\\n3 0\\n2 1\\n1 3\\n2 2\\n1 3\\n2 1\\n3 2\\n0 1\") == \"3\"\nassert solution(\"6\\n1 2\\n0 2\\n3 0\\n2 1\\n1 3\\n2 2\\n1 3\\n2 1\\n3 2\\n0 1\") == \"9\"\nassert solution(\"5\\n1 2\\n0 2\\n3 2\\n0 3\\n3 1\") == \"6\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 100,
        "num_ids_4": 130
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\") == '9'\nassert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\") == '15'\n\"\"\"\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str([\n    [1,2,3],\n    [1,2,4],\n    [0,2,3]\n])) == 6\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n') == '15'\nassert solution('5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n') == '9'\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1') == '2'\n\"\"\"\nimport ast",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3\") == \"2\"\nassert solution(\"3 1\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1\\n') == '2'\n\"\"\"\n\nA = int(input())\nB = int(input())",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1') == '2'\nassert solution('1 1') == '3'\n\"\"\"\n\nA, B = input().split()\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1') == '2'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"3 2\") == \"3\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"1 3\") == \"2\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"1 1\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1\") == \"2\"\n\"\"\"\n\na = input()\nb = input()\nc = input()",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3) == \"1.000000000000\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '1.000000000000'\nassert solution('5') == '2.000000000000'\nassert solution('6') == '3.000000000000'\nassert solution('7') == '4.000000000000'\nassert solution('8') == '5.000000000000'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('3.1') == '1.000000000000'\nassert solution('2') == '1'\nassert solution('2.1') == '1.000000000000'\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n\") == \"1.000000000000\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1.5\") == \"2.0\"\nassert solution(\"5.5\") == \"10.0\"\nassert solution(\"10\") == \"100.0\"\n\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 40
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1.000000000000\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '1.0'\nassert solution('0.8') == '0.96'\nassert solution('1.2') == '1.6'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 40
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1.000000000000'\nassert solution('4') == '1.000000000000'\nassert solution('5') == '1.6'\n",
        "num_ids_2": 20,
        "num_ids_4": 46
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"Hello World\"\n\n------Solution------\nn = input()\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1) == 'Hello World'",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n') == 'Hello World'\nassert solution('2\\n3\\n4\\n') == '6'\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1) == \"Hello World\"\nassert solution(2) == \"3\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 'Hello World'\nassert solution('2') == '3'\n\"\"\"\n\nn = int(input())",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"Hello World\"\n\n----Solution-----\ns = input()\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Hello World\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"Hello World\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == 'Hello World\\n'\nassert solution('2\\n1\\n2\\n') == '3\\n'\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"3333\"\n\"\"\"\n\nimport sys\n\na, b = map(int, sys.stdin.readline().split())\n\nprint(str(a)*b, end='') if a > b else print(str(b)*a, end='')",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"3333\"\nassert solution(\"4 4\") == \"4444\"\nassert solution(\"1 1\") == \"11\"\nassert solution(\"4 4\") == \"4444\"\nassert solution(\"4 3\") == \"3333\"\n",
        "num_ids_2": 23,
        "num_ids_4": 46
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3') == '3333'\nassert solution('3 4') == '3434'\nassert solution('3 4') == '3434'\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 35
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"3333\"\nassert solution(\"1 9\") == \"99\"\nassert solution(\"2 2\") == \"22\"\nassert solution(\"5 5\") == \"55\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"3333\"\nprint(\"Test 1 PASSED\")\nassert solution(\"3 4\") == \"3434\"\nprint(\"Test 2 PASSED\")\nassert solution(\"2 1\") == \"21\"\nprint(\"Test 3 PASSED\")\nassert solution(\"1 1\") == \"11\"\nprint(\"Test 4 PASSED\")\nassert solution(\"9 9\") == \"9999\"\nprint(\"Test 5 PASSED\")\n\n-----\nSample Output\nTest 1 PASSED\nTest 2 PASSED\nTest 3 PASSED\nTest 4 PASSED\nTest 5 PASSED\n\na, b = map(int, stdin.readline().split())\n\na_copy = a\nfor _ in range(b):\n    a_copy *= 10\n\nb_copy = b\nwhile b_copy:\n    a_copy *= 10\n    b_copy -= 1\n\nprint(min(a_copy, a * b))\n",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"44 4\") == \"3333\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3') == '3333'\nassert solution('7 6') == '7777'\nassert solution('7 8') == '7777'\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 23,
        "num_ids_4": 35
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"3333\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"3333\"\nassert solution(\"4 3\") == \"3333\"\nassert solution(\"4 3\") == \"3333\"\n\nassert solution(\"4 3\") == \"3333\"\nassert solution(\"4 3\") == \"3333\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1234 5678') == '5678'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a\") == \"b\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('a') == 'b'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"b\"\n\nassert solution(\"b\") == \"c\"\n\nassert solution(\"c\") == \"d\"\n\nassert solution(\"d\") == \"e\"\n\nassert solution(\"e\") == \"f\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('a') == 'b'",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('a') == 'b'\nassert solution('c') == 'd'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a') == 'b'\nassert solution('c') == 'd'\nassert solution('z') == 'aa'\nassert solution('y') == 'ab'\nassert solution('x') == 'ac'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('a') == 'b'\nassert solution('d') == 'e'\nassert solution('z') ==''\nassert solution('e') == 'f'\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 38
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a') == 'b'\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"order\", \"atc\") == \"atcoder\"\n\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('order', 'atcoder') == 'atcoderorder'\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('oder', 'atc') == 'atcoder'\n\"\"\"\n\nS, T = input().split(' ')\nprint(T + S)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution( \"oder atc\" ) == \"atcoder\"\n'''",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('a b c') == 'abc'\nassert solution('a b c d e f g') == 'abcdefg'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"oder\", \"atc\") == \"atcoder\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('order atc') == 'atcoder'\nassert solution('hello world') == 'helloworld'\n\n--------------------",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('oder atc') == 'atcoder'\n\"\"\"\n\ns, t = input().split()\nprint(t + s)\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('oder', 'atc') == 'atcoder'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 5 7 8 2\\n\") == \"0\"\nassert solution(\"6\\n5 1 2 4 6 3\\n\") == \"0\"\nassert solution(\"2\\n1000000 1000000\\n\") == \"1000000\"\n\"\"\"\n\n\"\"\"\n\u041f\u043e\u043c\u043e\u0433\u0438\u0442\u0435 \u0424\u043b\u044d\u0448\u0443 \u043d\u0430\u0439\u0442\u0438 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0434\u043b\u0438\u043d \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0441\u0430\u043c \u043c\u0430\u0441\u0441\u0438\u0432.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u2014 \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 n.\nn \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 10000.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 n \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u2014 \u0434\u043b\u0438\u043d\u044b \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u043c\u0430\u0441\u0441\u0438\u0432.\n\nSample Input 1:\n5\n\nSample Output 1:\n3\n1\n2\n3\n\nSample Input 2:\n5\n1 5 7 8 2\n\nSample Output 2:\n4\n0\n2\n3\n\nSample Input 3:\n2\n10 10\n\nSample Output 3:\n2\n0\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\nx = 0\nfor i in range(n):\n    for j in range(i, n):\n        if sum(a[i:j + 1]) == 0:\n            x = max(x, j - i + 1)\nprint(x)\n",
        "num_ids_2": 39,
        "num_ids_4": 58
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 5 7 8 2') == '0'\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 5 7 8 2\\n') == '0'\nassert solution('6\\n5 1 2 4 6 3\\n') == '0'\nassert solution('2\\n1000000 1000000\\n') == '1000000'\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 58
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 5 7 8 2\") == '0'\n\"\"\"\n\nn = int(input())\nA = list(map(int, input().split()))\nA.pop(0)\n\nresult = 0\nfor i in range(n):\n    if A[i] % 2 == 0:\n        result += A[i]\n\nprint(result)",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1 2 4 6 3\\n') == '0'\nassert solution('6 5 1 2 4 6 3\\n') == '0'\n\"\"\"\n\nimport sys",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 5 7 8 2\\n\") == \"0\"\nassert solution(\"6\\n5 1 2 4 6 3\\n\") == \"0\"\nassert solution(\"2\\n1000000 1000000\\n\") == \"1000000\"\n\"\"\"\n\nfrom utils import checkValue\n\nn = int(input())\n\narray = list(map(int, input().split()))\n\neven_sum = 0\nodd_sum = 0\n\nfor i in array:\n    if i % 2 == 0:\n        even_sum += i\n    else:\n        odd_sum += i",
        "num_ids_2": 39,
        "num_ids_4": 58
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 5 7 8 2\") == '0'\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 5 7 8 2\\n\") == '0'\n\"\"\"\n\na = input()\na = list(map(int, a.split()))",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1 2 4 6 3') == '0'\nassert solution('6 5 1 2 4 6 3') == '0'\nassert solution('1 1000000') == '1000000'\nassert solution('1 100 1') == '100'\nassert solution('3 3 3 3') == '0'\n",
        "num_ids_2": 31,
        "num_ids_4": 56
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 5 7 8 2\\n\") == \"0\"\nassert solution(\"6\\n5 1 2 4 6 3\\n\") == \"0\"\nassert solution(\"2\\n1000000 1000000\\n\") == \"1000000\"\n\"\"\"\n\na = [int(x) for x in input().split()]\n\nodd_sum = 0\neven_sum = 0\nfor i in a:\n    if i % 2:\n        odd_sum += i\n    else:\n        even_sum += i\n\nprint(odd_sum if even_sum == 0 else even_sum)\n",
        "num_ids_2": 39,
        "num_ids_4": 58
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == '1', 'error'\n\nassert solution('1 100 100 1 1 100 100') == '2', 'error'\n\nassert solution
        "num_ids_2": 51,
        "num_ids_4": 1465
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 4 2 1\\n1 3 5 4 2 7 6\\n\") == 6\n\nprint(solution(\"6 2 3 3\\n7 10 50 12 1 8\\n\"))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n1') == '1'\nassert solution('2\\n2\\n2') == '2'\nassert solution('3\\n1\\n1\\n2') == '3'\n",
        "num_ids_2": 18,
        "num_ids_4": 47
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 2 3 3\\n7 10 50 12 1 8\\n') == '5'\nprint(solution(stdin))\n\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 2 3 3\\n7 10 50 12 1 8') == '5'\nassert solution('1 1 100 99\\n100') == '1'\nassert solution('7 4 2 1\\n1 3 5 4 2 7 6') == '6'\nassert solution('2 5 10 5 10') == '3'\nassert solution('7 9 3 4 1\\n9 6 4 3 1') == '5'\n",
        "num_ids_2": 37,
        "num_ids_4": 73
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 1\\n 1 3 5 4 2 7 6') == '6'\nassert solution('1 1 100 99\\n100') == '1'\nassert solution('7 4 2 1\\n 1 3 5 4 2 7 6') == '6'",
        "num_ids_2": 37,
        "num_ids_4": 59
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 3 3') == '5'\nassert solution('7 10 50 12 1 8') == '6'\nassert solution('1 1 100 99') == '1'\nassert solution('7 4 2 1') == '6'\n\"\"\"\n\nimport sys\nfrom collections import deque\nfrom math import gcd\n",
        "num_ids_2": 28,
        "num_ids_4": 54
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 100 99\") == \"1\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\") == \"5\"\n\n\"\"\"\n\n_, a, b, k = map(int, stdin.split())\n\narr = list(map(int, stdin.split()[1:]))\n\ndp = [[0] * (len(arr) + 1) for _ in range(2)]\ndp[0][0] = 0\ndp[1][0] = 0\n\nfor i in range(len(arr)):\n    if i + 1 > k:\n        break\n    dp[0][i + 1] = max(dp[0][i + 1], dp[1][i] + b)\n    dp[1][i + 1] = max(dp[1][i + 1], dp[0][i] + a)\n    if arr[i] > 0:\n        dp[0][i + 1] = max(dp[0][i + 1], dp[1][i] + b, dp[1][i] + arr[i] + b)\n        dp[1][i + 1] = max(dp[1][i + 1], dp[0][i] + a, dp[0][i] + arr[i] + a)\n    if i + 2 > k:\n        break\n    dp[0][i + 2] = max(dp[0][i + 2], dp[1][i] + b)\n    dp[1][i + 2] = max(dp[1][i + 2], dp[0][i] + a)\n    if arr[i] > 0:\n        dp[0][i + 2] = max(dp[0][i + 2], dp[1][i] + b, dp[1][i] + arr[i] + b)\n        dp[1][i + 2] = max(dp[1][i + 2], dp[0][i] + a, dp[0][i] + arr[i] + a)\n    if i + 3 > k:\n        break\n    dp[0][i + 3] = max(dp[0][i + 3], dp[1][i] + b)\n    dp[1][i + 3] = max(dp[1][i + 3], dp[0][i] + a)\n    if arr[i] > 0:\n        dp[0][i + 3] = max(dp[0][i + 3], dp[1][i] + b, dp[1][i] + arr[i] + b)\n        dp[1][i + 3] = max(dp[1][i + 3], dp[0][i] + a, dp[0][i] + arr[i] + a)\n\nprint(max(dp[0][-1], dp[1][-1]))",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\\n10 5 6\") == \"1\"\nassert solution(\"3 1 3 1\\n100 100 50 100\") == \"3\"\nassert solution(\"7 6 2 1\\n1 3 5 4 2 7 6\") == \"6\"",
        "num_ids_2": 36,
        "num_ids_4": 58
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n0 1 2 3\") == \"3\"\nassert solution(\"6 3\\n0 1 2 3\") == \"3\"\nassert solution(\"8 5\\n0 1 2 3 4 5\") == \"3\"\nassert solution(\"8 5\\n0 1 2 3 4\") == \"4\"\nassert solution(\"10 10\\n0 1 2 3 4 5 6 7 8 9 10\") == \"10\"\n",
        "num_ids_2": 34,
        "num_ids_4": 71
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n0 1 2 3') == '0\\n0 1 2 3'\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3\\n3 2 0 6 10 12\") == \"3\"\nassert solution(\"4 2\\n0 1 2 3\") == \"0\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\ncnt = [0 for _ in range(m)]\n\nfor i in a:\n    cnt[i % m] += 1\n\nans = n // m\n\nfor i in range(m):\n    if cnt[i] < ans:\n        ans += 1\n    if ans > n // m:\n        break\n\nans -= n // m\n\nprint(ans)\nprint(*[a[i] for i in range(ans * m, n)])",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n3 1 2 0') == '3'\nassert solution('6 3\\n3 2 0 6 10 12') == '3'\nassert solution('7 6\\n3 2 0 6 10 12 17') == '3'\nassert solution('4 2\\n0 1 2 3') == '0'\nassert solution('4 1\\n0 1 2 3') == '0'\n",
        "num_ids_2": 36,
        "num_ids_4": 73
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3\\n3 2 0 6 10 12\") == 3\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\nc = [0] * m\nfor i in range(n):\n    c[a[i] % m] += 1\nd = [int(n / m)] * m\nfor i in range(m):\n    d[i] = d[i] - c[i]\ni = 0\nj = 0\nwhile i < m and j < n:\n    if d[i] == 0:\n        i += 1\n        continue\n    if d[i]!= 0:\n        a[j] = i\n        d[i] -= 1\n        j += 1\nprint(*a)\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == \"0\\n0 1 2 3\"\n\n\"\"\"\n\nimport sys\nimport math\nfrom collections import Counter\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n0 1 2 3\\n\") == \"0\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n0 1 2 3\\n\") == \"0\\n0 1 2 3\"\nassert solution(\"5 4\\n0 1 2 3 4\\n\") == \"2\\n2 0 4\"\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"1\\n2\\n0\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == '0\\n0 1 2 3'\nassert solution(\"6 3\\n3 2 0 6 10 12\") == '3\\n3 2 0 7 10 14'\nassert solution(\"3 2\\n0 1 2\") == '0\\n0 1 2'\nassert solution(\"3 1\\n0 1\") == '0\\n0 1'\n",
        "num_ids_2": 50,
        "num_ids_4": 90
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\") == \"8\"\n\"\"\"\n\nn, m = map(int, input().split())\n\ndata = [list(map(int, input().split())) for _ in range(n)]\n\nk = list(map(int, input().split()))\n\noffers = []\n\nfor _ in range(m):\n    offers.append(list(map(int, input().split())))\n\ncurrent_day = 0\nmax_price = -1\n\nfor i in range(n):\n    if k[i] == 0:\n        continue\n\n    if k[i] > max_price:\n        max_price = k[i]\n\n    k[i] -= 1\n    current_day += 1\n\n    for j in range(m):\n        current_day += offers[j][1]\n        if offers[j][0] <= current_day:\n            k[i] -= 1\n            current_day -= offers[j][1]\n\n    if k[i] == 0:\n        current_day += 1\n\nprint(current_day)\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n4\\n0 2 0 1 1\\n3\\n0 5') == '2'\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\") == \"8\"\n\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(textwrap.dedent(\"\"\"\\\n5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n\"\"\")) == '8'\n\nassert solution(textwrap.dedent(\"\"\"\\\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n\"\"\")) == '20'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n\n\"\"\"\n\nn, m = map(int, input().split())\n\nmtr = [list(map(int, input().split())) for _ in range(m)]\n\nk = list(map(int, input().split()))\n\nk.sort()\n\ni = 0\n\nwhile sum(k) > 0:\n    if sum(k) < n:\n        k[i] -= 1\n        i = (i + 1) % len(k)\n    elif sum(k) == n:\n        k[i] -= 1\n        i = (i + 1) % len(k)\n        for j in range(m):\n            k[j] -= mtr[j][1]\n            if k[j] < 1:\n                print(j)\n                exit()\n        break\n    else:\n        k[i] -= 1\n        for j in range(m):\n            k[j] -= mtr[j][1]\n            if k[j] < 1:\n                print(j)\n                exit()\n\nprint(k)\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n') == '20'\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\") == \"8\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\"\n\"\"\"\n\nn, m = (int(x) for x in input().split())\norder = [int(x) for x in input().split()]\n\nprices = {}\nfor _ in range(m):\n    d, t = [int(x) for x in input().split()]\n    if d not in prices:\n        prices[d] = set()\n    prices[d].add(t)\n\ndp = {}\nfor d in prices:\n    dp[d] = n\n\nfor d in range(1, 1000):\n    if d not in prices:\n        continue\n    if 2 not in prices[d]:\n        continue\n\n    dp[d] = min(dp[d - 1] + 1, dp[d - 1] + order.count(2) * 2 + order.count(1))\n\nprint(min(dp.values()))\n",
        "num_ids_2": 72,
        "num_ids_4": 72
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 0 2 0') == '2'\nassert solution('2 4') == '3'\nassert solution('3 3') == '4'\nassert solution('1 5') == '8'\nassert solution('1 2') == '8'\n\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 47
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_expected",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 1 1 1 1\\n2\\n1 1 1 1 1 1\\n2\\n1 1 1 1 1 1 1') == 'NO'\nassert solution('5\\n1 1 1 1 1\\n2\\n1 1 1 1 1 1\\n2\\n1 1 1 1 1 1 1') == 'YES'\nassert solution('4\\n1 1 1 1\\n2\\n1 1 1 1 1\\n2\\n1 1 1 1 1') == 'YES'\nassert solution('5\\n1 1 1 1\\n2\\n1 1 1 1 1\\n2\\n1 1 1 1 1 1') == 'NO'\nassert solution('5\\n10000 10000 10000 10000\\n2\\n1 1 1 1 1 1 1') == 'YES'\n",
        "num_ids_2": 80,
        "num_ids_4": 153
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1\\n1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1') == 'YES\\nYES\\nNO\\nYES'\nassert solution('4\\n1\\n1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1') == 'YES\\nYES\\nNO\\nYES'\nassert solution('4\\n1\\n1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1') == 'YES\\nYES\\nNO\\nYES'\nassert solution('4\\n1\\n1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1') == 'YES\\nYES\\nNO\\nYES'\nassert solution('4\\n1\\n10000 10000 10000 10000') == 'YES'\n\n\"\"\"\n\nimport collections",
        "num_ids_2": 134,
        "num_ids_4": 268
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\n1 1 1 1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\") == \"YES\"\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\\n\") == \"YES\\nYES\\nNO\\nYES\\nYES\\n\"\n",
        "num_ids_2": 84,
        "num_ids_4": 84
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\") == \"YES\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == 'YES'\n\"\"\"\n\nimport sys",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10 10 10\") == \"YES\"\nassert solution(\"10 5 1 10 5 1 1 1\") == \"YES\"\nassert solution(\"10 5 2 10 1 1 2 5\") == \"YES\"\nassert solution(\"1 1 1 1 1 1 1 1\") == \"NO\"\nassert solution(\"10000 10000 10000 10000\") == \"YES\"\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 30,
        "num_ids_4": 64
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 1 2 2\\n2\\n1 1 1 1 1') == 'YES'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == 'YES\\nYES\\nNO\\nYES\\nYES'\nassert solution(\"4\\n1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == 'YES\\nYES\\nNO\\nYES\\nYES'\nassert solution(\"4\\n1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == 'YES\\nYES\\nNO\\nYES\\nYES'\nassert solution(\"4\\n1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == 'YES\\nYES\\nNO\\nYES\\nYES'\nassert solution(\"4\\n1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == 'YES\\nYES\\nNO\\nYES\\nYES'\n",
        "num_ids_2": 154,
        "num_ids_4": 308
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 1 2 3\\n2\\n1 1 1 1') == 'NO'\nassert solution('4\\n1 1 2 3\\n2\\n1 1 1 1') == 'YES'\n\"\"\"",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 4\\n2 3 3\\n\") == \"2\"\nassert solution(\"4\\n1 2 3\\n2 1 3\\n\") == \"3\"\nassert solution(\"5\\n2 4 1\\n3 4 1\\n4 2 2\\n\") == \"3\"\nassert solution(\"6\\n5 1 2\\n3 4 4\\n5 2 3\\n\") == \"3\"",
        "num_ids_2": 44,
        "num_ids_4": 98
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7 3\\n1 3 2\\n2 3 4\\n3 4 1\\n4 1 2\") == \"4\"\nassert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\\n\") == \"9\"\n",
        "num_ids_2": 121,
        "num_ids_4": 121
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 10 3') == '3'\nassert solution('4 3 1') == '2'\nassert solution('4 5 1') == '4'\nassert solution('2 4 2') == '2'\nassert solution('5 1 4') == '3'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\") == \"3\"\n\n\"\"\"\n\nimport math\nfrom collections import defaultdict\nfrom heapq import heappop, heappush\n\nimport numpy\n\nINF = float(\"inf\")\n\nN, M, K = (int(n) for n in input().split())\nE = [[] for _ in range(N)]\nfor _ in range(M):\n    x, y, w = (int(n) for n in input().split())\n    E[x - 1].append((y - 1, w))\nD = numpy.ones(N) * INF\nQ = []\nheappush(Q, (0, 0))\nwhile Q:\n    d, p = heappop(Q)\n    if d > D[p]:\n        continue\n    D[p] = d\n    for x, d2 in E[p]:\n        if D[x] > d + d2:\n            heappush(Q, (d + d2, x))\n\nprint(D[K - 1])\n",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n') == '3'\n\"\"\"\n\nn, m, k = [int(n) for n in input().split()]\np = [[int(n) for n in input().split()] for _ in range(m)]\n\np.sort(key=lambda x: x[2])\ns = 0\n\nfor i in range(m):\n    s += p[i][2]\n    if s > k:\n        break\n\nprint(p[i][2])\n",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5') == '3'\nassert solution('7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1') == '9'\n\n\"\"\"\n\n\n\n\"\"\"\ndp solution\n\nwe can represent the graph as a matrix, with (x, y, w) as a cell of the matrix,\nwhich represents a path between x and y, with weight w.\n\nWe can do a DFS from all the vertices with the weight 0, and store the path lengths.\nThen, we can take the kth shortest path from 0 to all the vertices,\nand at each step we can take the minimum value from the k shortest paths\n\ntime O(n^3)\nspace O(n^2)\n\"\"\"\n\nclass Solution:\n    def kthSmallestPath(self, n: int, m: int, k: int) -> str:\n        def dfs(cur: int, x: int, y: int, n: int, m: int, k: int, memo: List[List[int]]):\n            if cur >= k:\n                return 0\n            if (x, y) in memo:\n                return memo[(x, y)]\n            min_len = float('inf')\n            for i in range(n):\n                if i!= x and (i, y) not in memo:\n                    if i < x:\n                        if min_len > dfs(cur+1, i, y, n, m, k, memo):\n                            min_len = dfs(cur+1, i, y, n, m, k, memo)\n                    else:\n                        if min_len > dfs(cur+1, i, y, n, m, k, memo) + m:\n                            min_len = dfs(cur+1, i, y, n, m, k, memo) + m\n            memo[(x, y)] = min_len\n            return min_len\n        \n        memo = {}\n        return dfs(0, 0, 0, n, m, k, memo)\n\n\n\n\"\"\"\ngraph solution\n\"\"\"",
        "num_ids_2": 149,
        "num_ids_4": 149
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5') == '3'\nassert solution('7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1') == '9'\n",
        "num_ids_2": 149,
        "num_ids_4": 149
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n\") == \"3\"\n\n-----Extended Summary-----\n\nhttps://app.codility.com/programmers/lessons/1-iterations/min_cost_flow/\n",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n\") == \"3\"\n",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1') == '9'\n",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n\n\"\"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 65
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 1 3 4 2') == '3 1'\nassert solution('6\\n1 5 12 13 2 15') == '7 2'\nassert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150') == '7486 3'\n\n\nimport sys\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().strip().split(' ')))\na.sort()\nd = [[i - j] for i, j in zip(a[1:], a[:-1])]\nd.sort()\nprint(sum(i[0] for i in d[:3]))\nprint(' '.join(str(i[1]) for i in d[:3]))",
        "num_ids_2": 37,
        "num_ids_4": 65
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 1 3 4 2') == '3 1'\nassert solution('6\\n1 5 12 13 2 15') == '7 2'\nassert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150') == '7486 3'\n",
        "num_ids_2": 37,
        "num_ids_4": 65
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\\n1 1 1 1 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\n",
        "num_ids_2": 52,
        "num_ids_4": 92
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n",
        "num_ids_2": 37,
        "num_ids_4": 65
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '5\\n1 1 3 4 2') == '3 1'\nassert solution(\n    '6\\n1 5 12 13 2 15') == '7 2'\nassert solution(\n    '10\\n1 2 5 129 185 581 1041 1909 1580 8150') == '7486 3'\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n\n-----Explanation-----\n\nThe only solution for the second example is to choose three teams: 1, 2, and 3. These teams have a total diversity of 12 - 2 = 10. So, the first answer is 10.\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 37,
        "num_ids_4": 65
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n5\n1 1 3 4 2\n\"\"\") == '3 1'\n\nassert solution(\n\"\"\"\n6\n1 5 12 13 2 15\n\"\"\") == '7 2'\n\nassert solution(\n\"\"\"\n10\n1 2 5 129 185 581 1041 1909 1580 8150\n\"\"\") == '7486 3'\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\nassert solution(\"1\\n1\") == \"1 1\"\n",
        "num_ids_2": 37,
        "num_ids_4": 79
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\\n1 1 1 1 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\n\"\"\"",
        "num_ids_2": 52,
        "num_ids_4": 92
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n900\") == \"1\\n1\"\nassert solution(\"8\\n9\") == \"2\\n1\"\nassert solution(\"10\\n0\") == \"2\\n3\"\nassert solution(\"100\\n99\") == \"1\\n3\"\nassert solution(\"9\\n99\") == \"1\\n1\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n5009\") == \"2\\n5000 9\"\nassert solution(\"7\\n9876\") == \"1\\n1\"\nassert solution(\"10\\n10000\") == \"1\\n10000\"\nassert solution(\"10\\n10\") == \"1\\n10\"\n\"\"\"\n\nimport sys\nimport math\nfrom itertools import count\nfrom collections import defaultdict",
        "num_ids_2": 35,
        "num_ids_4": 67
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n3\\n1\") == '1'",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5009\\n7\\n9876\\n10000\\n10\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\"\nprint(solution(\"5009\\n7\\n9876\\n10000\\n10\"))\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n5\\n') == '9\\n9\\n9\\n9\\n9'\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n9\") == \"2\\n5000 9\"\n\"\"\"\n\nfrom collections import Counter\nfrom math import inf\nfrom typing import List\n\n\nclass Solution:\n    def solve(self, n: int) -> List[str]:\n        ans = Counter()\n        round_num = 1\n        ans[round_num] = 1\n\n        while True:\n            last_round_num = round_num\n            round_num = round_num + self.count_round_num(last_round_num)\n            if round_num > n:\n                break\n            if n < round_num:\n                return [str(round_num)]\n            ans[round_num] = ans[last_round_num] + 1\n        return [str(k) +'' +''.join(map(str, v)) for k, v in ans.items()]\n\n    def count_round_num(self, num: int) -> int:\n        ans = 0\n        while num > 0:\n            ans += (num % 10) == 0\n            num //= 10\n        return ans\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n8 9\\n7 6\\n1 2\\n3 4\") == \"2\\n9 2\\n6 3\"\n\"\"\"\n\nstdin = open('./input.txt', 'r')\nnum_test_cases = int(stdin.readline())\n\nfor test_case in range(num_test_cases):\n    number = int(stdin.readline())\n    result = \"\"\n    i = 0\n    while number > 0:\n        if number % 1000 > 0:\n            result += str(number // 1000) + \" \"\n            number = number % 1000\n        else:\n            result += \"0 \"\n        i += 1\n    result = result.strip()\n    result += \"\\n\"\n    print(i)\n    print(result)\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5009\") == \"2 5000 9\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n9\\n7\") == \"2\\n5000 9\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1\\n2\\n3') == '2'\n\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5\\n4 5 1 2 3') == '1 1 1 1 1', solution('4 5\\n4 5 1 2 3')\nassert solution('4 5\\n4 5 2 1 3') == '1 1 1 1 1', solution('4 5\\n4 5 2 1 3')\n\"\"\"\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3\\n2 3 1\") == \"1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"1 1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"1 1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"1 1 1 1 1\"\n\n-----Notes-----\n\nWhen there is only one kid in the query, the owner of the book will return it to himself.\n\n\"\"\"\nimport sys",
        "num_ids_2": 53,
        "num_ids_4": 117
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n\") == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'\n\"\"\"\nimport collections",
        "num_ids_2": 99,
        "num_ids_4": 99
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\"\nassert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"3 3 3\"\nassert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"2 3 3 2 1 3\"\nassert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"2 2 2 2\"\n",
        "num_ids_2": 128,
        "num_ids_4": 255
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\"\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == '1 1 1 1 1'\nassert solution(\"5\\n2 3 1\\n6\\n4 6 2 1 5 3\") == '3 3 3'\nassert solution(\"1\\n1\\n1\\n1\") == '1'\n\"\"\"\n",
        "num_ids_2": 65,
        "num_ids_4": 84
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(a) == b\n\"\"\"\n\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 1 3') == '2 3 1'\nassert solution('2\\n1 1') == '2 2'\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n\") == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'\nassert solution(\"5\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n\") == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'\n\"\"\"",
        "num_ids_2": 198,
        "num_ids_4": 198
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"1 1 1 1 1\"\nassert solution(\"3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"3 3 3\"\nassert solution(\"3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"2 3 3 2 1 3\"\nassert solution(\"3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"1\"\nassert solution(\"3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"2 2 2 2\"\n",
        "num_ids_2": 58,
        "num_ids_4": 115
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\n    \"\"\") == \"\"\"\n3\n2\n1\n\"\"\"\n\nassert solution(\"\"\"\n3\n5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\n\"\"\") == \"\"\"\n3\n2\n1\n\"\"\"\n\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n1\n4\n1 1 1 1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n2\n3\n1 1 1\n3\n1 1 1\n\"\"\") == \"\"\"\n2\n3\n1\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\n\"\"\") == \"\"\"\n3\n2\n1\n\"\"\"\n\nprint(solution(\"\"\"\n3\n5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\n\"\"\"))",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1\") == '3\\n2\\n1'\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3\n5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\n''') == '''\n3\n2\n1\n'''\n\nassert solution('''\n1\n3\n1 1 1\n''') == '''\n2\n1\n1\n'''\n\nassert solution('''\n2\n3\n1 2 2\n4\n1 1 1 1\n''') == '''\n3\n2\n1\n'''\n\nassert solution('''\n3\n3\n1 2 2\n4\n1 1 1 1\n''') == '''\n3\n1\n1\n'''\n\nassert solution('''\n1\n2\n1 2\n''') == '''\n1\n1\n1\n'''",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3 4 5') == '3'\nassert solution('3\\n1 2 2') == '2'\nassert solution('5\\n1 2 3 4 5') == '3'\n'''",
        "num_ids_2": 32,
        "num_ids_4": 49
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\") == '3'\nassert solution(\"1\\n2\\n3\\n4\\n5\\n1\\n2\\n3\\n4\\n5\") == '3'\nassert solution(\"1\\n2\\n1\\n2\\n1\\n1\\n1\\n1\\n1\") == '1'\n\"\"\"\n",
        "num_ids_2": 59,
        "num_ids_4": 93
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1\") == \"2\\n2\\n1\"\nassert solution(\"2\\n2\\n1 2 2\") == \"2\"\n\"\"\"\n\nq = int(input())\nn = int(input())\ngoods = list(map(int, input().split()))\nwhile True:\n    s = sum(goods)\n    m = min(goods)\n    if s - m < m:\n        print(m)\n        break\n    else:\n        goods[goods.index(m)] = s // len(goods)",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n2') == '2'\nassert solution('3\\n1 1 2') == '1'\nassert solution('2\\n3') == '3'\n\nprint(solution(input()))\n",
        "num_ids_2": 28,
        "num_ids_4": 41
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('2\\n') == ''\nassert solution('3\\n') == ''\nassert solution('4\\n') == ''\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 4') == '2'\nassert solution('5\\n1 2 3 4 5') == '3'\nassert solution('1\\n1') == '1'\nassert solution('3\\n1 2 2') == '2'\n",
        "num_ids_2": 33,
        "num_ids_4": 61
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 2\n10 4 10 15\n1 2\n4 3''') == '0 0 1 2'\nassert solution('''10 4\n5 4 1 5 4 3 7 1 2 5\n4 6\n2 1\n10 8\n3 5''') == '5 4 0 5 3 3 9 0 2 5'\nassert solution('''10 4\n5 4 1 5 4 3 7 1 2 5\n4 6\n2 1\n10 8\n3 5''') == '5 4 0 5 3 3 9 0 2 5'\n\n'''\n\u0412\u0430\u043c \u0434\u0430\u043d\u043e \u043f\u043e\u0441\u043b\u0456\u0434\u043e\u0432\u043d\u0456\u0441\u0442\u044c \u0447\u0438\u0441\u0435\u043b, \u044f\u043a\u0430 \u0454 \u0432\u0438\u043f\u0430\u0434\u043a\u043e\u0432\u043e\u044e. \u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u043e \u0437\u043d\u0430\u0439\u0442\u0438 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u043d\u0430 \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0435 \u043f\u0438\u0442\u0430\u043d\u043d\u044f:\n\n1. \u0420\u043e\u0437\u043c\u0456\u043d\u043d\u0456\u0441\u0442\u044c \u0447\u0438\u0441\u043b\u0430\n2. \u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0437 \u0447\u0438\u0441\u0435\u043b \u043f\u043e\u0441\u043b\u0456\u0434\u043e\u0432\u043d\u043e\u0441\u0442\u0456\n3. \u041c\u0456\u043d\u0456\u043c\u0443\u043c \u0437 \u0447\u0438\u0441\u0435\u043b \u043f\u043e\u0441\u043b\u0456\u0434\u043e\u0432\u043d\u043e\u0441\u0442\u0456\n\u041d\u0430\u043f\u0438\u0448\u0456\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0443, \u0449\u043e \u0440\u0435\u0430\u043b\u0456\u0437\u0443\u0454 \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0456 \u043e\u043f\u0435\u0440\u0430\u0446\u0456\u0457:\n\n\u0412\u0438\u0432\u0435\u0434\u0456\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0443 \u043d\u0430 \u0435\u043a\u0440\u0430\u043d \u0456 \u0437\u0430\u043f\u0443\u0441\u0442\u0456\u0442\u044c \u0439\u043e\u0433\u043e. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u0430 \u043f\u043e\u0432\u0438\u043d\u043d\u0430 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0442\u0438 \u0447\u0438\u0441\u043b\u043e, \u044f\u043a\u0435 \u0437\u0430\u0434\u0430\u0454 \u043f\u0438\u0442\u0430\u043d\u043d\u044f.\n\n\u0412\u0456\u0434\u043a\u0440\u0438\u0439\u0442\u0435 \u0444\u0430\u0439\u043b \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0443 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0433\u043e \u0432\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438 \u0434\u043b\u044f \u0434\u0440\u0443\u043a\u0443 \u0435\u043a\u0440\u0430\u043d\u0443 \u0439 \u0437\u0430\u043f\u0443\u0441\u0442\u0456\u0442\u044c \u0439\u043e\u0433\u043e.\n\u0412\u0430\u043c \u0431\u0443\u0434\u0435 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u0442\u0438 \u0446\u0438\u043a\u043b \u0434\u043b\u044f \u0432\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u043a\u043e\u0436\u043d\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u043e\u0433\u043e \u0432\u0430\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f. \u0412\u0430\u0448 \u0446\u0438\u043a\u043b \u043c\u0430\u0454 \u0432\u0438\u043a\u043e\u043d\u0443\u0432\u0430\u0442\u0438\u0441\u044c \u043d\u0430 \u043a\u043e\u0436\u043d\u043e\u043c\u0443 \u043f\u0440\u043e\u0445\u043e\u0434\u0436\u0435\u043d\u043d\u0456 \u0456\u0442\u0435\u0440\u0430\u0446\u0456\u0457 \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0456, \u0456 \u0443 \u043a\u0456\u043d\u0446\u0456 \u0432\u0438\u0432\u043e\u0434\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u0430 \u043d\u0430 \u0435\u043a\u0440\u0430\u043d.\n\n\u0412\u0438\u043a\u043e\u043d\u0430\u0432 \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u0433\u0440\u0443\u043f\u0438 \u041a\u041d-\u0410 \u0410\u043d\u0434\u0440\u043e\u0449\u0443\u043a \u0410\u0440\u0442\u0435\u043c \u041e\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447\n'''\n\nimport random\n\nwith open('input_problem_5.txt') as file:\n  number_of_elements = int(file.readline().split(' ')[0])\n  max_element = int(file.readline().split(' ')[0])\n  min_element = int(file.readline().split(' ')[0])\n  random_numbers = file.readline().split(' ')[:-1]\n  # \u0447\u0438\u0441\u043b\u0430 \u0432 \u043f\u043e\u0441\u043b\u0456\u0434\u043e\u0432\u043d\u043e\u0441\u0442\u0456\n  #print(random_numbers)\n  # \u0440\u043e\u0437\u043c\u0456\u043d\u043d\u0456\u0441\u0442\u044c \u0447\u0438\u0441\u043b\u0430\n  #print(max_element - min_element)\n  # \u0447\u0438\u0441\u043b\u043e, \u044f\u043a\u0435 \u0437\u0430\u0434\u0430\u0454 \u043f\u0438\u0442\u0430\u043d\u043d\u044f\n  #print(number_of_elements)\n  \n  def solution(stdin: str) -> str:\n    pass\n  \n  def make_output(filename: str) -> None:\n    with open(filename, 'w') as file:\n      file.write(solution('''\n  \u0412\u0430\u043c \u0434\u0430\u043d\u043e \u043f\u043e\u0441\u043b\u0456\u0434\u043e\u0432\u043d\u0456\u0441\u0442\u044c \u0447\u0438\u0441\u0435\u043b, \u044f\u043a\u0430 \u0454 \u0432\u0438\u043f\u0430\u0434\u043a\u043e\u0432\u043e\u044e. \u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u043e \u0437\u043d\u0430\u0439\u0442\u0438 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u043d\u0430 \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0435 \u043f\u0438\u0442\u0430\u043d\u043d\u044f:\n1. \u0420\u043e\u0437\u043c\u0456\u043d\u043d\u0456\u0441\u0442\u044c \u0447\u0438\u0441\u043b\u0430\n2. \u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0437 \u0447\u0438\u0441\u0435\u043b \u043f\u043e\u0441\u043b\u0456\u0434\u043e\u0432\u043d\u043e\u0441\u0442\u0456\n3. \u041c\u0456\u043d\u0456\u043c\u0443\u043c \u0437 \u0447\u0438\u0441\u0435\u043b \u043f\u043e\u0441\u043b\u0456\u0434\u043e\u0432",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n\n\"\"\"",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('4 2\\n1 2\\n4 3') == '0 0 1 2'\nassert solution('10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\n\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 78
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\n\n\"\"\"\n\n\nfrom typing import List\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n10 4 10 15\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\") == \"5 4 0 5 3 3 9 0 2 5\"\nassert solution(\"4 2\\n1 2\") == \"0 0 1\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n",
        "num_ids_2": 52,
        "num_ids_4": 101
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\n\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n10 4 10 15\\n1 2\\n4 3\\n') == '0 0 1 2'\nassert solution('10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n') == '5 4 0 5 3 3 9 0 2 5'\n\n\n-----\nInput\n3 2\n10 6\n\nOutput\n0 0 0\n\n-----\nInput\n4 2\n10 4 10 15\n1 2\n4 3\n\nOutput\n0 0 1 2\n\n-----\nInput\n3 2\n10 6\n\nOutput\n0 0 1\n\n-----\nInput\n3 2\n10 6\n\nOutput\n0 0 1\n\n\n-----\nInput\n4 2\n10 6\n\nOutput\n0 0 1 2\n\n-----\nInput\n4 2\n10 6\n\nOutput\n0 0 1 2\n\n\n-----\nInput\n3 2\n10 6\n\nOutput\n0 0 1\n\n\n-----\nInput\n4 2\n10 6\n\nOutput\n0 0 1\n\n-----\nInput\n3 2\n10 6\n\nOutput\n0 0 1\n\n\n-----\nInput\n4 2\n10 6\n\nOutput\n0 0 1\n\n\n-----\nInput\n4 2\n10 6\n\nOutput\n0 0 1\n\n\n-----\nInput\n4 2\n10 6\n\nOutput\n0 0 1\n",
        "num_ids_2": 80,
        "num_ids_4": 80
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n\"\"\"\nimport sys\nimport collections\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"aba\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input)) == str(expected_output)\n\n\n-----Notes-----\n\"\"\"\nimport copy\nimport itertools\nimport collections\nimport operator\nfrom functools import reduce",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"abb\"\nassert solution(\"3 2\\n1 3 2\\n2 1 3\") == \"NO\"\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"abb\"\n\n\n-----Constraints-----\n\n2 <= n <= 2 * 10^5\nk <= 26\np[i]!= p[j] for 1 <= i, j <= n\np[i]!= q[i] for 1 <= i <= n\nq[i]!= q[j] for 1 <= i, j <= n\n\n\n-----Test Format-----\n\nInput:\n3 2\n1 2 3\n1 3 2\n\nOutput:\nYES\nabb\n\n-----Notes-----\n\n1. n, k\n2. p, q\n3. size of string\n4. list of characters in string\n5. index of character in string\n6. length of string\n7. characters in string\n8. index of character in list\n9. list[index]\n10. characters in string[index]\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\", \"1 2 3 4\") == \"bbbb\"\nassert solution(\"3 2\", \"1 3 2\") == \"bab\"\nassert solution(\"4 2\", \"1 3 2\") == \"NO\"\nassert solution(\"4 2\", \"1 2 3\") == \"NO\"\nassert solution(\"4 2\", \"2 3 1\") == \"NO\"\n",
        "num_ids_2": 35,
        "num_ids_4": 67
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(input())\n\n-----Explanation-----\nInput\n1 2 3\n1 3 2\n\nOutput\nYES\nabb\n\n1 3 2 is the only string that suits 1, 2 and 3 permutations.\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 2\n1 2 3\n1 3 2\n''') == 'YES\\nabb'\nassert solution('''4 1\n1 2 3 4\n4 1 2 3\n''') == 'NO'\n\"\"\"\nfrom collections import Counter\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'NO'\nassert solution('a') == 'YES\\na'\nassert solution('ab') == 'YES\\na'\nassert solution('aa') == 'YES\\na'\nassert solution('aba') == 'YES\\naba'\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 20 10\") == \"43\"\n\nassert solution(\"4 10 10 10\") == \"64\"\n\nassert solution(\"6 5 4 5 4 5\") == \"69\"\n\nassert solution(\"2 1\") == \"3\"\n",
        "num_ids_2": 25,
        "num_ids_4": 51
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\n",
        "num_ids_2": 31,
        "num_ids_4": 49
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n20 10 20''') == '43'\nassert solution('''4\n10 10 10 10''') == '64'\nassert solution('''6\n5 4 5 4 4 5''') == '69'\nassert solution('''2\n1 4''') == '3'",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n20 10 20\\n\") == \"43\"\nassert solution(\"4\\n10 10 10 10\\n\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\\n\") == \"69\"\nassert solution(\"2\\n1 4\\n\") == \"3\"\n\nprint(\"Test finished.\")\n",
        "num_ids_2": 35,
        "num_ids_4": 71
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\n\"\"\"\nimport sys",
        "num_ids_2": 31,
        "num_ids_4": 49
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n20 10 20\") == '43'\nassert solution(\"4\\n10 10 10 10\") == '64'\nassert solution(\"6\\n5 4 5 4 4 5\") == '69'\nassert solution(\"2\\n1 4\") == '3'\n\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n20 10 20\n''') == '43'\n\nassert solution('''4\n10 10 10 10\n''') == '64'\n\nassert solution('''6\n5 4 5 4 4 5\n''') == '69'\n\nassert solution('''2\n1 4\n''') == '3'\n\n\"\"\"\n\na = int(input())\na = list(map(int, input().split()))\n\nmin_ = 0\nfor i in range(len(a)):\n    min_ += a[i] * i + 1\n\nprint(min_)",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\n\"\"\"\nimport sys",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == '3'\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 5 1 3\") == \"3\"\n\nassert solution(\"5\\n4 2 5 1 3\") == \"3\"\n\nassert solution(\"5\\n5 5 5 5 5\") == \"5\"\n\nassert solution(\"5\\n1 4 2 3 5\") == \"0\"\n\nassert solution(\"5\\n4 2 1 3 5\") == \"3\"",
        "num_ids_2": 33,
        "num_ids_4": 67
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\nassert solution(\"2\\n1 2\") == \"1\"\nassert solution(\"4\\n4 2 5 1 3\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 48
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n4 2 5 1 3') == '3'\n\n\"\"\"\n\n\"\"\"\nGiven is a permutation P_1, \\ldots, P_N of 1, \\ldots, N.\nFind the number of integers i (1 \\leq i \\leq N) that satisfy the following condition:  \n - For any integer j (1 \\leq j \\leq i), P_i \\leq P_j.\n\n-----Constraints-----\n - 1 \\leq N \\leq 2 \\times 10^5\n - P_1, \\ldots, P_N is a permutation of 1, \\ldots, N.  \n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nP_1... P_N\n\n-----Output-----\nPrint the number of integers i that satisfy the condition.\n\n-----Sample Input-----\n5\n4 2 5 1 3\n\n-----Sample Output-----\n3\n\ni=1, 2, and 4 satisfy the condition, but i=3 does not - for example, P_i > P_j holds for j = 1.\n\nSimilarly, i=5 does not satisfy the condition, either. Thus, there are three integers that satisfy the condition.\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\n\n-----\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(len(filter(lambda i: i <= int(input()), range(1, int(input()) + 1))))",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n3 3 3 3''') == '1'\nassert solution('''6\n1 1 1 1 1 1''') == '0'\n\n\"\"\"\n\nimport sys\nimport collections\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 3 3') == '1'\nassert solution('4 3 3 3') == '0'\nassert solution('1 1 1 1') == '0'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\nassert solution(\"5\\n4 4 4 4 4\") == \"3\"\nassert solution(\"6\\n5 5 5 5 5 5\") == \"0\"\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 51
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 3 3\") == 1\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 6)",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\nassert solution(\"5\\n4 5 4 5 5\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n3 3 3 3''') == '1'\n\"\"\"\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 3 3') == '1'\nassert solution('4 2 4 1 4 2 4') == '0'\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"0 2 3 4 0\") == \"2\"\nassert solution(\"0 2 3 4 1\") == \"4\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1\"\n\"\"\"\n\nprint(1 if input().split()[0] == \"0\" else int(input().split()[0]))",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 2 3 4 5') == '1'\n\nassert solution('1 2 3 4 5') == '0'\n\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"\n\nstdin = input()\n\nx1, x2, x3, x4, x5 = stdin.split(' ')\nprint(int(x1)+int(x2)+int(x3)+int(x4)+int(x5))\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input) == output\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 2 3 4 5') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('2 2 3 4 5') == '3'\nassert solution('3 2 3 4 5') == '4'\nassert solution('4 2 3 4 5') == '5'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"0 2 3 4 5\"\n) == \"1\"\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(list(range(5)))) == \"0\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"3 5\\n\"\n) == '0'\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n') == '0'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\") == 0\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n4 5\\n3 4') == '1'\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom math import gcd\nfrom functools import reduce\n\nfrom util.result_check import get_output_with_stdin\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5') == '0'\n\"\"\"\n\nh, w = map(int, input().split(' '))",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n') == '0'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == \"0\"\nprint(solution(\"2 5\"))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5\\n') == 0\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\"\n\nH, W = map(int, stdin.split())",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\") == \"0\"\n\n--------------------------------------\n\n\u0418\u0437 \u043a\u043e\u0434\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430 https://www.youtube.com/watch?v=Vui5Xu1Q2oE\n\n\u0422\u0430\u043a \u0441\u043b\u043e\u0436\u043d\u043e \u0434\u043e\u0433\u0430\u0434\u0430\u0442\u044c\u0441\u044f \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u044d\u0442\u043e, \u043a\u0441\u0442\u0430\u0442\u0438, \u0442\u0430\u043a \u0436\u0435 \u0437\u0430\u0434\u0430\u0447\u0430 \u043f\u0440\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0435\u0442\u0441\u043a\u043e\u0433\u043e \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u0430, \u0430 \u0442\u0430\u043a \u0436\u0435 \u043f\u0440\u043e \u0441\u0430\u043c\u043e\u043f\u0438\u0441\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.\n\u0412 \u043d\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043e\u0442\u0432\u0435\u0442\u043e\u043c \u0438 \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435\u043c.\n\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0432 \u043d\u0430 \u043a\u043e\u0434, \u043c\u043e\u0436\u0435\u043c \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438.\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0446\u0435\u043b\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430, \u0434\u043b\u044f \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043d\u0438\u044f \u0435\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u043e\u0433\u043e, \u0435\u0441\u0442\u044c \u043b\u0438 \u0447\u0451\u0442\u043d\u043e\u0435 \u0438\u043b\u0438 \u043d\u0435\u0447\u0451\u0442\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e.\n\u041f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0432\u044b\u0437\u043e\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u0442 \u043d\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441 \u0432\u0435\u0440\u043d\u044b\u043c \u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c.\n\u041d\u043e \u043f\u043e\u0442\u043e\u043c \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0434\u0432\u0430\u0436\u0434\u044b, \u0447\u0442\u043e\u0431\u044b \u0438\u0437 \u043d\u0435\u0451 \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0432 \u0444\u0430\u0439\u043b.\n\u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0431\u0443\u0434\u0435\u0442 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0432 \u0444\u0430\u0439\u043b:\n\n\u0444\u0443\u043d\u043a\u0446\u0438\u044f 1:\n\n\u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c\n\u0444\u0443\u043d\u043a\u0446\u0438\u044f 2:\n\n\u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c\n\u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c\n\n\u041a\u0430\u0436\u0434\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0434\u0432\u0430\u0436\u0434\u044b.\n\u041d\u0430 \u043f\u0435\u0440\u0432\u043e\u043c \u0432\u044b\u0437\u043e\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044f 1 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0432 \u0444\u0430\u0439\u043b \u0441\u0442\u0440\u043e\u043a\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043b\u043e\u0432\u043e \"\u0444\u0443\u043d\u043a\u0446\u0438\u044f 1:\" \u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0432\u043e\u0435\u043c \u0432\u044b\u0437\u043e\u0432\u0435.\n\u041d\u0430 \u0432\u0442\u043e\u0440\u043e\u043c \u0432\u044b\u0437\u043e\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044f 2 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043b\u043e\u0432\u043e \"\u0444\u0443\u043d\u043a\u0446\u0438\u044f 2:\" \u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0432\u043e\u0435\u043c \u0432\u044b\u0437\u043e\u0432\u0435.\n\n\u041a\u0430\u043a \u043c\u044b \u0432\u0438\u0434\u0438\u043c, \u044d\u0442\u043e \u043d\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u043a\u043e\u0434, \u043d\u043e \u044d\u0442\u043e \u043a\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0449\u0435 \u043f\u043e\u043d\u044f\u0442\u044c.\n\u0422\u0430\u043a \u0436\u0435 \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0441 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u0447\u043a\u043e\u0439 \u0442\u0435\u043b\u0430, \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u044e\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430.\n\u041f\u0435\u0440\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 10 100\\n\") == \"Yes\"\nassert solution(\"3\\n1 10 100\\n\") == \"No\"\nassert solution(\"3\\n100 10 10\\n\") == \"Yes\"\nassert solution(\"3\\n100 10 10\\n\") == \"No\"\n\nassert solution(\"2\\n1 10 100\\n\") == \"No\"\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n1 10 100\n''') == 'Yes'\nassert solution('''3\n10 100 10\n''') == 'No'\n'''\n\nimport math",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 10 100\\n') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 10 100\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 100') == 'Yes'\nassert solution('10 10 10') == 'No'\n\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100 10 1') == 'Yes'\nassert solution('100 10 10') == 'No'\nassert solution('1 10 100') == 'Yes'\nassert solution('100 10 1') == 'Yes'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 10 100\") == \"Yes\"\n\n---Problem Description---\nSnuke is a very happy person, but he is also very careful, so he is curious about the result of permutations of an array. Given an array of n numbers a_1, a_2,..., a_n, determine whether Snuke can choose a permutation p, such that for each 1 \u2264 i \u2264 n - 1, the product of a_i and a_{i + 1} is a multiple of 4.\n\nFor example, given the array [1, 2, 3], the array is valid if we choose the permutation [1, 2, 3] or [2, 1, 3].\n\n-----Solution-----\n\n'''\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 10 100\") == \"Yes\"\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 10 100') == 'Yes'\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 10 100\") == \"Yes\"\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\n\n---\n9. https://github.com/E869120/kyopro_educational_90/blob/main/editorial/051.jpg",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"xy\") == \"No\"\nassert solution(\"atcoder\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 32
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"abcd\") == \"No\"\nassert solution(\"yabc\") == \"No\"\nassert solution(\"abc\") == \"Yes\"\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"No\"\n\"\"\"\n\nfrom itertools import permutations\nfrom sys import stdin",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('abc') == 'No'",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('abc') == 'No'\nassert solution('abcd') == 'No'\n\"\"\"\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == \"Yes\"\n\"\"\"\n\ns, t = input().split(' ')\n\nprint(sorted(s) < sorted(t))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('abc') == 'No'\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('atcoder') == 'No'\nassert solution('abcd') == 'Yes'\nassert solution('abdc') == 'No'",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 5 1\\n\") == \"YES\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''7 5 1\n''') == 'YES'\n\n'''\n7 5 1\n\n6 17 2\n'''\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 5 1') == 'YES'\nassert solution('7 5 3') == 'NO'\nassert solution('0 0 0') == 'YES'\nassert solution('0 0 7') == 'NO'\nassert solution('0 3 21') == 'NO'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 5 1\\n') == 'YES'\n\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5 1\\n\") == \"YES\"\nassert solution(\"1 1 1\\n\") == \"YES\"\nassert solution(\"7 5 2\\n\") == \"NO\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1234567891011) == \"YES\"\nassert solution(1234567891010) == \"NO\"\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 5 1') == 'YES'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"1\"\n\"\"\"\n\nfrom sys import stdin\nimport math",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == 1\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2') == '1'\nassert solution('2 2\\n1 1') == '1'\nassert solution('2 2\\n1 3') == '3'\nassert solution('2 2\\n1 3\\n1 1') == '3'\nassert solution('2 2\\n1 3\\n1 5') == '7'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 60
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2') == '1'\nassert solution('2 2') == '1'\nassert solution('1 1') == '0'\nassert solution('1 1') == '0'\nassert solution('5 10') == '25'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 2\n''') == '1'\n\n'''\nIn this case, the area is 1 square yard.\n'''\n\n'''\nPython\n'''",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"1\"\n\n\"\"\"\nimport math\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 2\\n') == '0.5'\nassert solution('10 10\\n') == '0.4'\nassert solution('15 15\\n') == '0.2727272727272727'\nassert solution('50 50\\n') == '0.09090909090909091'\n",
        "num_ids_2": 28,
        "num_ids_4": 65
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"1\"\nassert solution(\"4 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"10 10\") == \"100\"\n\"\"\"\n\na, b = map(int, input().split())\nprint(a * b - a - b)",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2') == '1'\nassert solution('5 6') == '12'\nassert solution('2 2') == '1'\nassert solution('3 6') == '9'\nassert solution('6 2') == '18'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 3\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 5 1\") == \"2\"\nassert solution(\"3 5 4\") == \"1\"\nassert solution(\"1 1 2\") == \"0\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13 3 1\") == \"3\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\\n\") == \"1\"\nassert solution(\"1 2 6\\n\") == \"2\"\nassert solution(\"1 3 2\\n\") == \"0\"\nassert solution(\"1 3 3\\n\") == \"1\"\nassert solution(\"2 3 1\\n\") == \"1\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13 3 1\") == 3\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13 3 1\") == \"3\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13 3 1\") == \"3\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == 3\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 1\") == \"3\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"13 1 1\") == \"3\"\nassert solution(\"13 3 1\") == \"3\"\n\n\"\"\"\n\nfrom math import ceil, floor\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13 3 1\") == \"3\"\n\n-----Test Case-----\n\"\"\"\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"13 3 1\") == \"3\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 2 1\") == \"0\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4') == '2'\nassert solution('5\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4') == '2'\nassert solution('6\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5') == '2'\n\"\"\"",
        "num_ids_2": 60,
        "num_ids_4": 94
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == \"2\"\n\n\"\"\"\n\nimport math\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n2 0\n3 1\n1 3''') == '2'\nassert solution('''4\n4 2\n0 4\n5 5''') == '2'\n\n'''\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5') == '2'\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == \"2\"\n\"\"\"\n\nfrom collections import defaultdict\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4') == '2'\nassert solution('3\\n4 2\\n1 3\\n5 5\\n2 0\\n3 1') == '2'\n",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\") == 2\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == \"2\"\n\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == 2\nassert solution(\"3 1\") == 1\nassert solution(\"5 5\") == 1\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 27
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n2 0\n3 1\n1 3''') == '2'\nassert solution('''4\n0 4\n5 5\n''') == '0'\nassert solution('''5\n5 5\n''') == '1'\nassert solution('''5\n4 2\n3 5\n3 2\n3 4\n4 3\n''') == '2'\nassert solution('''5\n2 0\n3 1\n1 3\n4 2\n0 4\n''') == '2'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 3\\n0 4\") == \"7\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4') == '7'\nassert solution('1 10') == '10'\n\"\"\"\n\nimport sys\n\nN, T = map(int, sys.stdin.readline().split())\nt_arr = [0] * (N + 1)\n\nfor i in range(1, N + 1):\n    t_arr[i] = int(sys.stdin.readline())\n\nt_arr.sort()\n\nans = t_arr[-1] + T\n\nfor i in range(1, N + 1):\n    if t_arr[i - 1] <= T <= t_arr[i]:\n        ans += t_arr[i] - T\n\nprint(ans)",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\"\"\"\n\n\"\"\"\nInput\n2 4\n0 3\n\nOutput\n7\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('\\n') == '\\n'\nassert solution('\\n\\n') == '\\n\\n'\nassert solution('a\\n') == 'a\\n'\nassert solution('a\\n\\n') == 'a\\n\\n'\n",
        "num_ids_2": 20,
        "num_ids_4": 50
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a) == b\nprint(solution(a))\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4\\n0 3') == '7'\nassert solution('1 1\\n0') == '0'\n\n------------------------------------------------------------------------------------------------------------------------------------------\n\nIf a user clicks a link from your app on social media, Twitter, Facebook, or anywhere else, your users will be asked to login using their account.\n\nYour users will be asked to create an account to use your app.\n\nTo solve this problem, you will write a script that will generate a random account.\n\nYour script should create a new account with a username and password, email address, full name, and profile picture.\n\nThe script should also create a file named accounts.txt in the root directory of your project.\n\nYou should be writing this script during your internship and should not post it on Github or any other public repository.\n\nYou can use the following profile pictures for this assignment:\n\nhttps://i.imgur.com/KcF2VAF.png\n\nhttps://i.imgur.com/DyYfBdM.png\n\nhttps://i.imgur.com/cccub8L.png\n\nhttps://i.imgur.com/vYWjH3V.png\n\nhttps://i.imgur.com/BUPyjCk.png\n\nhttps://i.imgur.com/X7OHz1l.png\n\nhttps://i.imgur.com/a4Y4CnU.png\n\nhttps://i.imgur.com/5N4S1w3.png\n\nhttps://i.imgur.com/6AojtMV.png\n\nhttps://i.imgur.com/wdpGZ2N.png\n\nhttps://i.imgur.com/V3HXzcx.png\n\nhttps://i.imgur.com/ehvxAOM.png\n\nhttps://i.imgur.com/iIcPcVq.png\n\nhttps://i.imgur.com/8h8Iy9i.png\n\nhttps://i.imgur.com/yqrUYlM.png\n\nhttps://i.imgur.com/R9m2aEt.png\n\nhttps://i.imgur.com/7KzA7zq.png\n\nhttps://i.imgur.com/O7gMDv1.png\n\nhttps://i.imgur.com/CXGvnx4.png\n\nhttps://i.imgur.com/bUCJyS4.png\n\nhttps://i.imgur.com/Y7G9gVB.png\n\nhttps://i.imgur.com/f3WZ1wS.png\n\nhttps://i.imgur.com/NkCQOdh.png\n\nhttps://i.imgur.com/3mM2lLp.png\n\nhttps://i.imgur.com/hQ6dKFp.png\n\nhttps://i.imgur.com/2JiL4i6.png\n\nhttps://i.imgur.com/oU3bQA4.png\n\nhttps://i.imgur.com/Tp8vWjh.png\n\nhttps://i.imgur.com/n4z7xYh.png\n\nhttps://i.imgur.com/ZyYwfsG.png\n\nhttps://i.imgur.com/eEP6dDq.png\n\nhttps://i.imgur.com/HrkZrOS.png\n\nhttps://i.imgur.com/yjw89b9.png\n\nhttps://i.imgur.com/F9WVh1o.png\n\nhttps://i.imgur.com/v2iMh88.png\n\nhttps://i.imgur.com/Q1G2fy9.png\n\nhttps://i.imgur.com/25y4MCH.png\n\nhttps://i.imgur.com/gcC2eMU.png\n\nhttps://i.imgur.com/G4QopU9.png\n\nhttps://i.imgur.com/eDnxm4j.png\n\nhttps://i.imgur.com/6qzQcA2.png\n\nhttps://i.imgur.com/p1fEfGm.png\n\nhttps://i.imgur.com/cgBtBmE.png\n\nhttps://i.imgur.com/XdRx8w0.png\n\nhttps://i.imgur.com/dHp2MzS.png\n\nhttps://i.imgur.com/jeSqrBq.png\n\nhttps://i.imgur.com/NjAj7KB.png\n\nhttps://i.imgur.com/U5R3XwG.png\n\nhttps://i.imgur.com/ljJ7jh4.png\n\nhttps://i.imgur.com/wM9WvWQ.png\n\nhttps://i.imgur.com/YSEKj0F.png\n\nhttps://i.imgur.com/v5BF9f4.png\n\nhttps://i.imgur.com/K5Qpw6j.png\n\nhttps://i.imgur.com/4GmhOZn.png\n\nhttps://i.imgur.com/vq4Edbq.png\n\nhttps://i.imgur.com/j3fPBAv.png\n\nhttps://i.imgur.com/6yO0UYj.png\n\nhttps://i.imgur.com/V6TpJhG.png\n\nhttps://i.imgur.com/gL8x9GJ.png\n\nhttps://i.imgur.com/YKDBJzt.png\n\nhttps://i.imgur.com/wE5RUbr.png\n\nhttps://i.imgur.com/b1gjNXG.png\n\nhttps://i.imgur.com/QH8u1rU.png\n\nhttps://i.imgur.com/vZwYJd7.png\n\nhttps://i.imgur.com/E0JbPqG.png\n\nhttps://i.imgur.com/O2v2Dzg.png\n\nhttps://i.imgur.com/uCvYwGM.png\n\nhttps://i.imgur.com/W3nYd7u.png\n\nhttps://i.imgur.com/j2q0X2X.png\n\nhttps://i.imgur.com/8S8iQtO.png\n\nhttps://i.imgur.com/LEv5MSh.png\n\nhttps://i.imgur.com/g7GnD5l.png\n\nhttps://i.imgur.com/oW0uVVj.png\n\nhttps://i.imgur.com/u3o6iMq.png\n\nhttps://i.imgur.com/XvS93Xj.png\n\nhttps://i.imgur.com/XrEW0WR.png\n\nhttps://i.imgur.com/odAxRr4.png\n\nhttps://i.imgur.com/ayc96q4.png\n\nhttps://i.imgur.com/U2kqn2n.png\n\nhttps://i.imgur.com/G9Nqjfz.png\n\nhttps://i.imgur.com/tCeCQoY.png\n\nhttps://i.imgur.com/QdJ8tHo.png\n\nhttps://i.imgur.com/1W8LHci.png\n\nhttps://i.imgur.com/Cv",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 3\\n0 1\\n1 2\\n2 3\") == \"7\"\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('L 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1') == '1\\n1\\n2'\nassert solution('L 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\nL 10\\nR 100\\n? 100\\nR 123\\nL 100\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115') == '0\\n2\\n1'\n\n'''\n'''",
        "num_ids_2": 53,
        "num_ids_4": 151
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'''8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1''') == '1\\n1\\n2'\n\nassert solution(\n'''10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115''') == '0\\n2\\n1'\n\n'''\n--- Part Two ---\n\nOn the shelf you can find one book with index -1, but you can't take it because it's broken. What's the minimum number of queries you need to solve the problem?\n\nIn the first example it took one query of type $1$ and one query of type $2$ to place the first book and the second book, so the answer is $2$.\n\nIn the second example it took two queries of type $1$ and two queries of type $2$ to place the first, second, and third books, so the answer is $2$.\n\nIn the third example it took four queries of type $1$ and four queries of type $2$, but there is no way it can take all the books without breaking the first one. So the answer is $3$.\n'''\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n1\\n2\\n3\\n?2\\nL4\\n?1\\nL5\\n?1\") == \"1\"\nassert solution(\"10\\n100\\n100000\\n123\\nL101\\n?123\\nL10\\nR115\\n?100\\nR110\") == \"0\"\n\n\"\"\"",
        "num_ids_2": 83,
        "num_ids_4": 83
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\"\n\n\"\"\"",
        "num_ids_2": 105,
        "num_ids_4": 105
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1\n\"\"\") == '1\\n1\\n2'\n\n\"\"\"\nfor _ in range(int(stdin.readline())):\n    _, _, *query = map(int, stdin.readline().strip().split())\n\"\"\"",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1') == '1\\n1\\n2'\nassert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115') == '0\\n2\\n1'\n",
        "num_ids_2": 105,
        "num_ids_4": 105
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\"\n\n\n\n'''\n\nimport sys\nimport math",
        "num_ids_2": 105,
        "num_ids_4": 105
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1\\n2\\n3\\n? 2\\n4\\n? 1\\n5\\n? 1\\n\") == \"1\\n1\\n2\"\nassert solution(\"10\\n100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n\") == \"0\\n2\\n1\"\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 103,
        "num_ids_4": 103
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input) == output\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == \"0\\n4\\n6\\n6\\n-1\\n6\\n72\"\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == \"0\\n4\\n6\\n6\\n-1\\n6\\n72\"\n\"\"\"\n\nfrom functools import lru_cache",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"6\"\n) == \"6\"\nassert solution(\n    \"4\"\n) == \"2\"\nassert solution(\n    \"1\"\n) == \"1\"\nassert solution(\n    \"27\"\n) == \"4\"\nassert solution(\n    \"14\"\n) == \"2\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\") == \"2\"\nassert solution(\"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n\") == \"0\"\nassert solution(\"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n\") == \"0\"\nassert solution(\"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n\") == \"0\"\nassert solution(\"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n\") == \"0\"\n",
        "num_ids_2": 78,
        "num_ids_4": 156
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\nprint(solution('1 2 3 4 5 6'))\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000') == '0\\n4\\n6\\n6\\n-1\\n6\\n7200\\n')\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n4\\n2\\n1') == '4'\nassert solution('1\\n1\\n1') == '0'\nassert solution('3\\n4\\n10') == '4'\nassert solution('1000000000000000000') == '-1'\nassert solution('7\\n1\\n1\\n1\\n1\\n1\\n1') == '6'\n",
        "num_ids_2": 35,
        "num_ids_4": 64
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000') == '0\\n4\\n6\\n6\\n-1\\n6\\n72'\nprint(solution(\"5\\n1\\n2\\n3\\n4\\n5\\n\"))\n\n\n----",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n6\n15\n27\n''') == '''1\n2\n-1'''\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n\n\nfrom math import ceil",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == \"0\\n4\\n6\\n6\\n-1\\n6\\n72\"\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1 3\") == \"YES\"\nassert solution(\"4\\n1 1 2 1\") == \"NO\"\nassert solution(\"2\\n11 11\") == \"YES\"\nassert solution(\"1\\n100\") == \"YES\"\nassert solution(\"3\\n0 2 0\") == \"NO\"\n",
        "num_ids_2": 31,
        "num_ids_4": 58
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == 'YES'\nassert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == 'NO'\n\"\"\"",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1 3\") == \"NO\"\nassert solution(\"4\\n1 1 2 1\") == \"NO\"\nassert solution(\"2\\n11 11\") == \"YES\"\nassert solution(\"1\\n100\") == \"YES\"\nassert solution(\"1\\n100\") == \"YES\"\n",
        "num_ids_2": 31,
        "num_ids_4": 58
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"3\\n1 1 3\\n2\\n11 11\") == \"NO\"\nassert solution(\"5\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"6\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\") == \"YES\"\n\nprint(\"The local tests are done.\")\n",
        "num_ids_2": 46,
        "num_ids_4": 101
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100') == 'YES'\n\"\"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\nassert solution(\"2\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"2\\n11 11\\n1\") == \"NO\"\n\n\"\"\"\n",
        "num_ids_2": 48,
        "num_ids_4": 85
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"NO\"\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\nassert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"3\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"3\\n11 11\\n1\\n100\") == \"YES\"\n\n\"\"\"\nimport re",
        "num_ids_2": 48,
        "num_ids_4": 88
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"2\\n11 11\\n1\\n100\") == \"NO\"\nassert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\n",
        "num_ids_2": 44,
        "num_ids_4": 68
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100''') == 'YES'\nassert solution('''2\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100''') == 'NO'\nassert solution('''4\n2\n1 1 1\n2\n1 1 1\n2\n1 1 1''') == 'NO'\nassert solution('''4\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100''') == 'YES'\nassert solution('''2\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100''') == 'NO'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\") == 4\nassert solution(\"bacabaa\") == 0\nassert solution(\"zcabd\") == 0\n",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcdef\", \"acefgh\") == 5\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(s1) == solution(s2)\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import combinations, chain, combinations_with_replacement",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abacaba', 'bacabaa') == 4\nassert solution('zcabd', 'dbacz') == 0\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5, 'zcabd', 'dbacz') == 0\nassert solution(5, 'bacabaa', 'abacabaa') == 4\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == 4\nassert solution(\"bacabaa\") == 0\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"7\"\n) == 4\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abacaba') == '4'\nassert solution('bacabaa') == '0'\nassert solution('abc') == '1'\nassert solution('abcc') == '0'\nassert solution('cba') == '2'\n",
        "num_ids_2": 25,
        "num_ids_4": 46
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abacaba', 'bacabaa') == 4\nassert solution('zcabd', 'dbacz') == 0\nassert solution('abcdefghijklmnopqrstuvwxyz', 'zyxwvutsrqponmlkjihgfedcba') == 0\nassert solution('abcdefg', 'defgabc') == 3\nassert solution('abcdefg', 'abcdefg') == 0\n\n-----Notes-----\n\nFor the first test case of this problem the answer is $4$.\n\nFor the second test case of this problem the answer is $0$.\n\nFor the third test case of this problem the answer is $0$.\n\nFor the fourth test case of this problem the answer is $0$.\n\nFor the fifth test case of this problem the answer is $0$.\n\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 86
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == \"4\"\nassert solution(\"zcabd\") == \"0\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999') == '8\\n198\\n-17\\n2999999997\\n0\\n1'\n",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n2\\n10\\n1\") == \"0\"\nassert solution(\"1\\n1\\n1\\n100\\n1\") == \"198\"\nassert solution(\"1\\n10\\n100\\n1\\n1\") == \"-17\"\nassert solution(\"1\\n1\\n1\\n1\\n1\") == \"0\"\nassert solution(\"1\\n1\\n10\\n1\\n1\") == \"1\"\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\nassert solution(\"5\\n2 1 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\nassert solution(\"3\\n1 1 2\\n1 1 2\\n1 1 2\") == \"0\\n1\\n2\"\nassert solution(\"7\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\") == \"0\\n1\\n2\\n1\\n2\\n0\"\nassert solution(\"7\\n100 1 2\\n100 1 2\\n100 1 2\\n100 1 2\\n100 1 2\\n100 1 2\") == \"198\\n198\\n198\\n198\\n198\\n198\"\n",
        "num_ids_2": 128,
        "num_ids_4": 214
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == '8 -198 0 2999999997 0 1'\n\"\"\"\n",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5\n2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\"\"\") == \"\"\"8\n198\n-17\n2999999997\n0\n1\"\"\"\n\nassert solution(\"\"\"10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\"\"\") == \"\"\"0\n1\n1\n0\n0\n0\n0\n1\n1\n1\n0\n1\"\"\"\n\nassert solution(\"\"\"1\n1\n1\n1\n1\n1\"\"\") == \"\"\"0\n1\n1\n0\n1\"\"\"\n\nassert solution(\"\"\"3\n1 10 1\n1 10 1\n1 10 1\"\"\") == \"\"\"0\n0\n0\n0\n0\"\"\"\n\nassert solution(\"\"\"3\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\"\"\") == \"\"\"0\n0\n0\n0\n0\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\n\"\"\"\n\nfrom collections import defaultdict, deque",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\n",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8198-17299999999701\"\n\"\"\"\n\nimport sys\n\nt = int(sys.stdin.readline().strip())\n\nfor _ in range(t):\n    a, b, k = map(int, sys.stdin.readline().strip().split())\n    i = 1\n    x = a\n    while i < k:\n        x = b - x + a\n        i += 1\n    print(x)\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\n\n-----Problem-----\n\nA chemical laboratory has a process for synthesizing molecules. The process is controlled by a special device called a shift register. The device is powered by a pulse generator.\n\nAt each step of the process the device performs a series of operations on the molecules. The first step is to define a molecule by the sequence of atoms. In this case only the type of atom, not the number of atoms, is important. Every possible permutation of atoms is a molecule.\n\nAfter defining the molecule, the device performs a series of operations on the molecule in order to synthesize it. Each operation is described as a string consisting of a molecule part and a number of steps. The molecule part can be either of the following: a) the type of atom (a string); b) the number of atoms of the type of atom (an integer); c) the type of atom and the number of atoms of this type (a string beginning with an integer). For example, the string \"2H\" means that the molecule consists of two atoms of the type of hydrogen. Similarly, the string \"11C\" means that the molecule consists of 11 atoms of the type of carbon.\n\nThe number of steps in the operation is a positive integer.\n\nAt the beginning of the process the device is in the initial state. The initial state consists of the initial molecule and zero steps.\n\nDuring the process, the device performs several operations in sequence.\n\n1) The molecule is scanned one step to the right.\n2) The operation is performed on the current molecule.\n3) The steps counter is increased by the number of steps in the operation.\n4) The current molecule is scanned one step to the left.\n5) The operation is performed on the current molecule.\n6) The steps counter is increased by the number of steps in the operation.\n7) If the steps counter is greater than or equal to the number of steps in the operation, the operation is performed.\n\nAn operation on the current molecule is performed by applying the operation on the current part of the molecule and then on the number of atoms of this type. If the resulting number is negative, it is taken modulo the number of atoms of the current type.\n\nExamples:\n\nIf the operation is a shift to the right by one step, the resulting molecule consists of the atoms from the current molecule shifted by one step to the right.\n\nIf the operation is a shift to the left by four steps, the resulting molecule consists of the atoms from the current molecule shifted by four steps to the left.\n\nIf the operation is an addition of one hydrogen to the molecule, then the resulting molecule consists of the atoms from the current molecule plus one hydrogen atom.\n\nIf the operation is a deletion of one hydrogen atom from the molecule, then the resulting molecule consists of the atoms from the current molecule minus one hydrogen atom.\n\nIf the operation is a substraction of one carbon atom from the molecule, then the resulting molecule consists of the atoms from the current molecule minus one carbon atom.\n\nIf the operation is a substraction of one carbon atom and a hydrogen atom from the molecule, then the resulting molecule consists of the atoms from the current molecule minus one carbon atom and one hydrogen atom.\n\nIf the operation is a division by two of the molecule, then the resulting molecule consists of the atoms from the current molecule divided by two.\n\nIf the operation is a multiplication by two of the molecule, then the resulting molecule consists of the atoms from the current molecule multiplied by two.\n\nThe initial state consists of an empty molecule and a counter equal to zero.\n\nAt the step 1, the initial state is changed to the state consisting of the molecule \"1H\" and one step.\n\nAt the step 2, the initial state is changed to the state consisting of the molecule \"11\" and three steps.\n\nAt the step 3, the initial state is changed to the state consisting of the molecule \"11C\" and four steps.\n\nAt the step 4, the initial state is changed to the state consisting of the molecule \"1C11H\" and five steps.\n\nAt the step 5, the initial state is changed to the state consisting of the molecule \"1H11C\" and six steps.\n\nAt the step 6, the initial state is changed to the state consisting of the molecule \"11C11\" and seven steps.\n\nAt the step 7, the initial state is changed to the state consisting of the molecule \"11C11H\" and eight steps.\n\nThe final state is the state consisting of the molecule \"11C11H\" and nine steps.\n\nThe initial state is the initial molecule \"1H\" and zero steps.\n\nThe operation on the molecule is the following: from the current molecule, the operation is performed by shifting the molecule to the right by one step, then on the resulting molecule the operation is performed by shifting it to the left by four steps, then on the resulting molecule the operation is performed by adding one hydrogen atom, then on the resulting molecule the operation is performed by substracting one carbon atom, then on the resulting molecule the operation is performed by substracting one carbon atom and one hydrogen atom, then the operation is performed by dividing by two, then the operation is performed by multiplying by two, the resulting molecule is the molecule \"11C11H\" and nine steps.\n\nWrite a program that, given the string that describes the operation, returns the resulting molecule.\n\n\n-----Solution-----\n\"\"\"\n\nclass Node:\n    def __init__(self, init_value, init_previous = None):\n        self.value = init_value\n        self.previous = init_previous\n        self.steps = 0\n\n    def copy_node(self):\n        node = Node(self.value)\n        node.previous = self.previous\n        node.steps = self.steps\n        return node\n\n    def __str__(self):\n        if self.previous == None:\n            return self.value + \" \" + str(self.steps)\n        else:\n            return self.value + \" \" + str(self.steps) + \" \" + self.previous.__str__()\n",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000') == '1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089'\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1\\n2\\n6\\n9\") == \"3\\n6\\n9\"\nassert solution(\"5\\n1\\n2\\n3\\n6\") == \"2\\n3\\n6\"\n\n\"\"\"",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5\") == \"4\\n5\"\nassert solution(\"4\\n1\") == \"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1",
        "num_ids_2": 1462,
        "num_ids_4": 1462
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1\") == \"1\"\nassert solution(\"4\\n10\") == \"10\"\nassert solution(\"4\\n100\") == \"100\"\nassert solution(\"4\\n1000\") == \"1000\"\n\nassert solution(\"4\\n123\") == \"123\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\") == '1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089'\n\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1\") == \"3\"\nassert solution(\"4\\n4\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1\\n2\\n3\\n5') == '2'\nassert solution('4\\n1\\n2\\n3\\n10') == '5'\n\"\"\"\n\nfrom math import log, ceil\nfrom utils import check_input\nfrom string import ascii_lowercase",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n13\\n14\\n3620\\n10000\\n1000000000000000000') == '13\\n27\\n6561\\n19683\\n1350851717672992089'\n\"\"\"\n\n\nimport itertools\nimport math\nfrom functools import partial\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n5\") == \"1\"\n\"\"\"\nimport math\nimport sys\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n4\\n5\\n6\\n7\") == \"9\"\n\"\"\"\n\n\nfrom collections import Counter, defaultdict",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n') == '70771771779999999991111111111'\nassert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n') == '70771771779999999991111111111'\nassert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n') == '70771771779999999991111111111'\nassert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n') == '70771771779999999991111111111'\nassert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n') == '70771771779999999991111111111'\n",
        "num_ids_2": 156,
        "num_ids_4": 312
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70771771779999999990000\\n9999999990000999999999\\n5510\\n10\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 90,
        "num_ids_4": 90
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 8 5 3') == '70'\nassert solution('12343 43 4543 39 123212') == '177177'\nassert solution('1000000000 1000000000 1 1 1') == '999999999000000000'\nassert solution('1000000000 1000000000 1 1 1000000000') == '999999999'\nassert solution('10 11 2 1 5') == '10'\n",
        "num_ids_2": 32,
        "num_ids_4": 73
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5') == '5'\nassert solution('5\\n3') == '8'\nassert solution('1\\n1\\n1\\n1\\n1\\n1') == '1'\n'''",
        "num_ids_2": 18,
        "num_ids_4": 56
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10') == '70\\n77\\n177177\\n999999999\\n55\\n10'\nassert solution('5 10 4 3 2\\n9 3 7 2 2\\n1 1 1 1 1\\n1 1 1000000000 1\\n1 1000000000 1000000000') == '3\\n3\\n999999999\\n1\\n1'\n",
        "num_ids_2": 141,
        "num_ids_4": 141
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n",
        "num_ids_2": 28,
        "num_ids_4": 68
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == '70771772799999000\\n9999999999999999\\n5510\\n10'\nprint(\"Test finished.\")",
        "num_ids_2": 86,
        "num_ids_4": 86
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n\") == \"707717717799999999999\\n9999999995510\"\nprint(\"PASS\")\n\n\"\"\"",
        "num_ids_2": 81,
        "num_ids_4": 81
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input) == expected_output\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10') == '707717727999999999123212'\n",
        "num_ids_2": 75,
        "num_ids_4": 75
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == \"1\\n0\\n2\\n2\\n1\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == \"1\\n0\\n2\\n2\\n1\"\n\n\"\"\"\nfrom typing import List, Tuple",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n10 10\") == \"1\"\nassert solution(\"2 4\\n7 4\") == \"2\"\nassert solution(\"9 3\\n2 4\") == \"2\"\n\n\n\"\"\"\n\nimport os\nimport sys\nimport itertools\nimport collections\nimport operator\nimport functools",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n10 10\") == \"1\"\nassert solution(\"2 4\\n7 4\") == \"0\"\nassert solution(\"9 3\\n2 4\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n10 10\\n2 4\\n7 4\\n9 3') == '1\\n0\\n2\\n2\\n1'\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"7 4\") == \"2\"\nassert solution(\"9 3\") == \"1\"\n\"\"\"\nimport math\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n10 10\n2 4\n7 4\n9 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\n3 3\n4 8\n5 9\n\"\"\") == \"0\"\nassert solution(\"\"\"\n2\n2 2\n2 2\n2 2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n2\n1 3\n1 3\n1 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1\n1 1000000000\n\"\"\") == \"1\"\n",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n10 10') == '1'\nassert solution('2 4\\n7 4') == '0'\nassert solution('9 3\\n7 4') == '2'\nassert solution('9 3\\n2 4') == '2'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n10 10\\n') == '1'\nassert solution('2 4\\n7 4\\n') == '0'\nassert solution('2 4\\n7 4\\n') == '2'\nassert solution('2 4\\n7 4\\n') == '2'\nassert solution('2 4\\n7 4\\n') == '2'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1 1') == ''\nassert solution('1 2') == '0'\nassert solution('1 3') == '2'\n",
        "num_ids_2": 16,
        "num_ids_4": 36
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open('./input.txt').read()) == open('./output.txt').read()\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1111\\n') == '4'\nassert solution('2222\\n') == '4'\nassert solution('5555\\n') == '5'\n",
        "num_ids_2": 20,
        "num_ids_4": 45
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\n\"\"\"\n\nimport itertools\nimport re",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\nprint(solution('22\\n9999\\n1\\n777'))\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"22\") == 13\nassert solution(\"9999\") == 90\nassert solution(\"1\") == 1\nassert solution(\"777\") == 66\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('22\\n9999\\n1\\n777') == 13\nassert solution('22\\n9999\\n1\\n777') == 13\nassert solution('22\\n9999\\n1\\n777') == 13\n",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\nprint(solution('4\\n22\\n9999\\n1\\n777'))\n\n----Problem-----\n\nThe intercom of a building consists of all numbers from 1 to 10~000, inclusive. It is guaranteed that the number of digits in any number from 1 to 10~000, inclusive is the same.\n\nLet's call the digit of an apartment number the \"least significant digit\". For example, for number 555, the least significant digit is 5. For number 3322, the least significant digit is 2.\n\nOur character, a troublemaker, calls the intercoms of all apartment numbers in ascending order. For example, if we start with number 555, our character calls the intercoms of numbers 1, 5, 55, 555, 5555,... The number of calls our character makes will be 4+4+4+4+...\n\nYour task is to help our character to count the total number of calls he will make.\n\nWrite 5 lines of code to test the correctness of solution:\nThere is a building consisting of $10~000$ apartments numbered from $1$ to $10~000$, inclusive.\n\nCall an apartment boring, if its number consists of the same digit. Examples of boring apartments are $11, 2, 777, 9999$ and so on.\n\nOur character is a troublemaker, and he calls the intercoms of all boring apartments, till someone answers the call, in the following order:\n\n  First he calls all apartments consisting of digit $1$, in increasing order ($1, 11, 111, 1111$).  Next he calls all apartments consisting of digit $2$, in increasing order ($2, 22, 222, 2222$)  And so on. \n\nThe resident of the boring apartment $x$ answers the call, and our character stops calling anyone further.\n\nOur character wants to know how many digits he pressed in total and your task is to help him to count the total number of keypresses.\n\nFor example, if the resident of boring apartment $22$ answered, then our character called apartments with numbers $1, 11, 111, 1111, 2, 22$ and the total number of digits he pressed is $1 + 2 + 3 + 4 + 1 + 2 = 13$.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 36$) \u2014 the number of test cases.\n\nThe only line of the test case contains one integer $x$ ($1 \\le x \\le 9999$) \u2014 the apartment number of the resident who answered the call. It is guaranteed that $x$ consists of the same digit.\n\n\n-----Output-----\n\nFor each test case, print the answer: how many digits our character pressed in total.\n\n\n-----Example-----\nInput\n4\n22\n9999\n1\n777\n\nOutput\n13\n90\n1\n66\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('22\\n9999\\n1\\n777') == 13\nassert solution('22\\n9999\\n1\\n777') == 13\n\"\"\"\n\n\"\"\"\n\ucc45\uc5d0 \uc788\ub294 \ud480\uc774\ub97c \ubcf4\ub2c8\uae4c \ub2e8\uc21c\ud55c \ubc29\ubc95\uc73c\ub85c\ub294 \uc548\ub41c\ub2e4\ub294 \uac83\uc744 \uc54c\uac8c \ub41c\uac70 \uac19\ub2e4.\n\"\"\"\n\ntestCases = int(input())\nfor _ in range(testCases):\n    answer = 0\n    num = int(input())\n    for _ in range(9):\n        if num % 10 == 1:\n            answer += 1\n        num //= 10\n    print(answer)\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\\n') == 'YES\\n2 6\\n1 2\\n'\nassert solution('4\\n6\\n2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\\n5\\n2 2 2 2 2\\n') == 'YES\\n2 2\\n4 1'\n\"\"\"\n\nk = int(stdin.readline())\nseqs = []\nfor _ in range(k):\n    n = int(stdin.readline())\n    seqs.append(list(map(int, stdin.readline().split())))",
        "num_ids_2": 98,
        "num_ids_4": 98
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\\n\") == \"NO\"\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\\n5\\n2 2 2 2 2\\n\") == \"YES\\n2 2\\n4 1\"\n\n\"\"\"\n",
        "num_ids_2": 74,
        "num_ids_4": 133
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\") == \"NO\"\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"5\\n5\\n2 2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\"\n",
        "num_ids_2": 72,
        "num_ids_4": 156
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'NO'\nassert solution('1234') == 'NO'\nassert solution('123 123') == 'YES 1 1'\nassert solution('2 3 1 3 2') == 'YES 2 6'\nassert solution('1 1 2 2 2 1') == 'YES 1 2'\n",
        "num_ids_2": 21,
        "num_ids_4": 50
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"3\\n1\\n5\\n1 1 1 1 1\\n2\\n2 3\") == \"NO\"\nassert solution(\"4\\n6\\n2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\"\n",
        "num_ids_2": 66,
        "num_ids_4": 112
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\") == \"NO\"\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"6\\n5\\n1 1 1 1 1\\n2\\n2 3\") == \"NO\"\n\"\"\"\n\nfrom itertools import combinations",
        "num_ids_2": 66,
        "num_ids_4": 132
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == 'YES\\n2 6\\n1 2'\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\\n\") == 'NO'\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\\n5\\n2 2 2 2 2\\n\") == 'YES\\n2 2\\n4 1'\n\n\"\"\"",
        "num_ids_2": 74,
        "num_ids_4": 133
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n    2\n    5\n    2 3 1 3 2\n    6\n    1 1 2 2 2 1\n    \"\"\") == \"YES\\n2 6\\n1 2\\n\"\nassert solution(\n    \"\"\"\n    3\n    1\n    5\n    5\n    1 1 1 1 1\n    2\n    2 3\n    \"\"\") == \"NO\\n\"\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"2\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\"\"\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"\"\"3\n1\n5\n5\n1 1 1 1 1\n2\n2 3\n\n\"\"\") == \"NO\"\nassert solution(\"\"\"4\n6\n2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\"\"\") == \"YES\\n2 2\\n4 1\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1') == 'YES\\n2 6\\n1 2'\nassert solution('4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2') == 'YES\\n2 2\\n4 1'",
        "num_ids_2": 75,
        "num_ids_4": 75
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(A = [4,2,3], K = 1) == 5\nassert solution(A = [3,-1,0,2], K = 3) == 6\nassert solution(A = [2,-3,-1,5,-4], K = 2) == 13\n\na=[4,2,3]\na.sort()\nfor i in range(len(a)):\n    print(a[i]*(-1))\n\nOutput:\n-4\n-3\n-2\n-1\n4\n2\n3\n\n\n\nGiven an array A of integers, we must\u00a0modify the array in the following way: we choose an i\u00a0and replace\u00a0A[i] with -A[i], and we repeat this process K times in total.\u00a0 (We may choose the same index i multiple times.)\n\nAfter this process, we have some array B.\u00a0 (B may be different from A\u00a0due to the process.)\n\nReturn the largest possible sum of the array B.\n\u00a0\nExample 1:\nInput: A = [4,2,3], K = 1\nOutput: 5\nExplanation: Choose indices (1,) and A becomes [4,-2,3].\n\nExample 2:\nInput: A = [3,-1,0,2], K = 3\nOutput: 6\nExplanation: Choose indices (1, 2, 2) and A becomes [3,1,0,2].\n\nExample 3:\nInput: A = [2,-3,-1,5,-4], K = 2\nOutput: 13\nExplanation: Choose indices (1, 4) and A becomes [2,3,-1,5,4].\n\n\u00a0\nConstraints:\n\n1 <= A.length <= 10000\n1 <= K <= 10000\n-100 <= A[i] <= 100",
        "num_ids_2": 40,
        "num_ids_4": 63
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"[4,2,3]\") == 5\nassert solution(\"[3,-1,0,2]\") == 6\nassert solution(\"[2,-3,-1,5,-4]\") == 13\nassert solution(\"[4,2,3,3,5,5]\") == 8\n\nprint('Success')\n\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def maximumSum(self, arr, k):\n        def kSmallestPairs(self, nums1, nums2, k):\n            # k-smallest pairs: two arrays, the first one is the smallest\n            res = []\n            nums1.sort()\n            nums2.sort()\n            i, j = 0, 0\n            while k > 0 and i < len(nums1) and j < len(nums2):\n                if nums1[i] + nums2[j] < -nums1[i]:\n                    j += 1\n                else:\n                    res.append([nums1[i], nums2[j]])\n                    i += 1\n                    j += 1\n                    k -= 1\n            return res\n        \n        def maxSubarraySum(self, nums):\n            best = curr = nums[0]\n            for n in nums[1:]:\n                curr = max(n, curr + n)\n                best = max(curr, best)\n            return best\n            \n        # arr is sorted, calculate the max subarrays sum\n        return self.maxSubarraySum(sum(arr, []))\n\n\nsol = Solution()\narr = list(map(int, sys.stdin.readline().strip().split(',')))\nk = int(sys.stdin.readline().strip())\nprint(sol.maximumSum(arr, k))\n",
        "num_ids_2": 30,
        "num_ids_4": 68
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 3') == 5\nassert solution('3 -1 0 2') == 6\nassert solution('2 -3 -1 5 -4') == 13\n\n\"\"\"\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        if K >= len(A):\n            return sum(A)\n        for i in range(K):\n            A[i] = -A[i]\n        return sum(A)",
        "num_ids_2": 22,
        "num_ids_4": 37
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"[4,2,3]\\n1\") == 5\nassert solution(\"[3,-1,0,2]\\n3\") == 6\nassert solution(\"[2,-3,-1,5,-4]\\n2\") == 13\n\n\"\"\"\n\n\nfrom typing import List\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        for i in range(K):\n            A[i] = -A[i]\n        return sum(A)\n",
        "num_ids_2": 36,
        "num_ids_4": 57
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2,-3,-1,5,-4\") == 13\nassert solution(\"4,2,3\") == 5\nassert solution(\"3,-1,0,2\") == 6\nassert solution(\"4,2,3,1,5\") == 6\n\n'''\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, nums, k):\n        nums = sorted(nums)\n        i = 0\n        while i < len(nums) and k > 0:\n            if nums[i] < 0:\n                nums[i] = -nums[i]\n                k -= 1\n            i += 1\n\n        if k % 2 == 1:\n            if i < len(nums):\n                if nums[i] > 0:\n                    nums[i] = -nums[i]\n                else:\n                    nums[i - 1] = -nums[i - 1]\n            else:\n                nums[i - 1] = -nums[i - 1]\n\n        return sum(nums)\n\n\nassert Solution().largestSumAfterKNegations([4, 2, 3], 1) == 5\n",
        "num_ids_2": 28,
        "num_ids_4": 58
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('A = [4,2,3], K = 1') == 5\nassert solution('A = [3,-1,0,2], K = 3') == 6\nassert solution('A = [2,-3,-1,5,-4], K = 2') == 13\n",
        "num_ids_2": 40,
        "num_ids_4": 63
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('[4,2,3]') == 5\nassert solution('[3,-1,0,2]') == 6\nassert solution('[2,-3,-1,5,-4]') == 13\n\n\n\"\"\"\n\n\nfrom typing import List\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        # O(NlogN)\n        A.sort()\n        for i in range(K):\n            if A[i] < 0:\n                A[i] *= -1\n            else:\n                A[i] *= -1\n                break\n        return sum(A)\n\n\n    def largestSumAfterKNegations2(self, A: List[int], K: int) -> int:\n        if K == 0:\n            return sum(A)\n        # O(N)\n        # A = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
        "num_ids_2": 30,
        "num_ids_4": 48
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4,2,3\") == 5\nassert solution(\"3,-1,0,2\") == 6\nassert solution(\"2,-3,-1,5,-4\") == 13\n\n\"\"\"\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A, K: int) -> int:\n        A.sort()\n        i = 0\n        while K > 0:\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n            else:\n                i += 1\n        return sum(A)\n",
        "num_ids_2": 26,
        "num_ids_4": 42
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(A) == expected",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('[4,2,3]') == 5\nassert solution('[3,-1,0,2]') == 6\nassert solution('[2,-3,-1,5,-4]') == 13\n",
        "num_ids_2": 30,
        "num_ids_4": 48
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 2 1 -6 6 -7 9 1 2 0 1') == True\nassert solution('0 2 1 -6 6 -7 9 1 2 0 1') == False\nassert solution('3 3 6 5 -2 2 5 1 -9 4') == True\nassert solution('3 3 6 5 -2 2 5 1 -9 4') == False\n",
        "num_ids_2": 40,
        "num_ids_4": 78
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == False\nassert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\n",
        "num_ids_2": 60,
        "num_ids_4": 116
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 2 1 -6 6 -7 9 1 2 0 1') == True\nassert solution('0 2 1 -6 6 7 9 -1 2 0 1') == False\nassert solution('3 3 6 5 -2 2 5 1 -9 4') == True\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == True\nassert solution('0') == True\n",
        "num_ids_2": 40,
        "num_ids_4": 86
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('A = [0,2,1,-6,6,-7,9,1,2,0,1]') == True\nassert solution('A = [0,2,1,-6,6,7,9,1,2,0,1]') == True\nassert solution('A = [0,2,1,-6,6,7,9,1,2,0,1]') == True\nassert solution('A = [0,2,1,-6,6,7,9,1,2,0,1]') == True\nassert solution('A = [0,2,1,-6,6,7,9,1,2,0,1]') == True\n",
        "num_ids_2": 64,
        "num_ids_4": 128
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('[0,2,1,-6,6,-7,9,1,2,0,1]') == True\nassert solution('[0,2,1,-6,6,7,9,-1,2,0,1]') == False\nassert solution('[3,3,6,5,-2,2,5,1,-9,4]') == True\nassert solution('[0,2,1,-6,6,7,9,-1,2,0,1]') == True\nassert solution('[0,2,1,-6,6,7,9,-1,2,0,1]') == True\n",
        "num_ids_2": 60,
        "num_ids_4": 118
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\nassert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\n",
        "num_ids_2": 60,
        "num_ids_4": 116
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('[0,2,1,-6,6,-7,9,1,2,0,1]') == True\nassert solution('[0,2,1,-6,6,7,9,-1,2,0,1]') == False\nassert solution('[3,3,6,5,-2,2,5,1,-9,4]') == True\n\n\"\"\"\n\n\nimport unittest\n",
        "num_ids_2": 60,
        "num_ids_4": 88
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution( [0,2,1,-6,6,-7,9,1,2,0,1] ) == True\nassert solution( [0,2,1,-6,6,7,9,-1,2,0,1] ) == False\nassert solution( [3,3,6,5,-2,2,5,1,-9,4] ) == True\n\n\"\"\"\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        # We want to check if sum of the first n-1 elements is divisble by three\n        # Then we want to check if sum of n-1 and n elements is equal to 0\n        # And sum of n-2 and n-1 is equal to sum of all the other elements\n        # This gives us 3 conditions to meet to have three equal parts \n        if sum(A) % 3!= 0:\n            return False\n        else:\n            target_sum = sum(A) // 3\n            curr_sum = 0\n            counter = 0\n            for num in A:\n                curr_sum += num\n                if curr_sum == target_sum:\n                    counter += 1\n                    curr_sum = 0\n            if counter!= 3:\n                return False\n            curr_sum = 0\n            counter = 0\n            i = 0\n            while i < len(A) - 1:\n                curr_sum += A[i]\n                if curr_sum == target_sum:\n                    counter += 1\n                    curr_sum = 0\n                i += 1\n            curr_sum += A[-1]\n            if curr_sum == target_sum:\n                counter += 1\n            if counter!= 3:\n                return False\n            curr_sum = 0\n            i = 0\n            while i < len(A) - 2:\n                curr_sum += A[i]\n                if curr_sum == target_sum:\n                    counter += 1\n                    curr_sum = 0\n                i += 1\n            curr_sum += A[-2]\n            if curr_sum == target_sum:\n                counter += 1\n            return counter == 3\n",
        "num_ids_2": 60,
        "num_ids_4": 88
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('0') == 'true'\nassert solution('0 1') == 'true'\nassert solution('0 1 2') == 'true'\nassert solution('0 1 2 -1 2') == 'false'\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 2 1 -6 6 -7 9 1 2 0 1\") == True\nassert solution(\"0 2 1 -6 6 -7 9 -1 2 0 1\") == False\nassert solution(\"3 3 6 5 -2 2 5 1 -9 4\") == True\nassert solution(\"2 2 5 1 -9 4\") == False\nassert solution(\"0\") == True\n",
        "num_ids_2": 41,
        "num_ids_4": 74
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nabcd\\na\\nbc\\nbd\\n\") == \"a\"\nassert solution(\"5\\nacb\\nacbd\\nab\\n\") == \"acb\"\nassert solution(\"3\\nabcd\\na\\nbc\\n\") == \"abcd\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 48,
        "num_ids_4": 70
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nab\\nbc\\nabc\") == \"abc\"\nassert solution(\"3\\nbc\\nab\\nabc\") == \"abc\"\nassert solution(\"3\\na\\nb\\nc\") == \"a\"\nassert solution(\"4\\nab\\na\\nab\\nab\") == \"ab\"\nassert solution(\"4\\nab\\nab\\nab\\nab\") == \"ab\"\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 75
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\neat\\n: \\nbeet\\nvet\\n: \\n\\nbet\\n: \\n\\n\\nbed\\n\\n\") == 'beet vet'\n\"\"\"\n",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(': abd') == 'a'\nassert solution('abb') == 'ab'\nassert solution('abbc') == 'abb'\nassert solution('abcb') == 'b'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"beat,vet\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\nbeat\\n: \\nvet\\nbeet\\nbed\\n: \\nvet\\nbet\\nbeet\\n\") == \"vet\\nbeet\"\n\"\"\"\n\nimport string",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\nbeat\\n: \\nvet\\n: \\nbeet\\n: \\nbed\\n: \\nbet\") == 'beet vet'\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''7\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet''') == 'beet\\nvet'\nassert solution('''6\nbeet\nbeat\nbed\nvet\nbeet\n''') == 'beet\\nvet'\nassert solution('''6\nbeat\nvet\nbeet\nbeet\n''') =='vet\\nbeet'\nassert solution('''6\nbeet\nbeat\nbed\nvet\nbeet''') == 'beet\\nbeet'\nassert solution('''2\nbeet\nbeat''') == 'beet'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\": beat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet\\n\") == \"beet\\nvet\"\nprint(\"PASSED\")\n\n\"\"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\":\\nbeet\\n:\") == \"beet\"\n\nassert solution(\":\\nbeat\\n:\") == \"beat\"\nassert solution(\":\\nbeet\\n:\") == \"beet\"\nassert solution(\":\\nvet\\n:\") == \"vet\"\nassert solution(\":\\nbeet\\n:\") == \"beet\"\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8\") == \"8\"\n\"\"\"\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8\") == \"8\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 8\\n') == '8'\nprint(solution('4 8\\n'), '8')\nassert solution('4 8\\n') == '8'\nprint(solution('3 8\\n'), '8')\nassert solution('3 8\\n') == '8'\nprint(solution('3 8\\n'), '8')\nassert solution('3 8\\n') == '8'\nprint(solution('3 8\\n'), '8')\nassert solution('3 8\\n') == '8'\nprint(solution('3 8\\n'), '8')\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8\\n\") == \"8\"\nprint(solution(stdin))\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 8\\n') == '8'\nassert solution('4 -8\\n') == '8'\nassert solution('4 8\\n') == '8'\nassert solution('3 -8\\n') == '10'\n",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"2\n4 8\n\"\"\") == \"8\"\nassert solution(\"\"\"4\n4 4 4 4\n\"\"\") == \"0\"\n\n\"\"\"\ni/p: \n2\n4 8\no/p: 8\n\n\"\"\"\n\n\"\"\"\n1. \nInitialize two variables a and b.\n\n1 2 3 4\na = 0\nb = 4\n\n2.\na= 0\nb= 4\na+ (2-1)^2 + (3-2)^2 + (4-3)^2 = 4 + 4 + 4 + 8 + 12 + 16 = 32\nb= 4\na+ (2-1)^2 + (3-2)^2 + (4-3)^2 = 4 + 4 + 4 + 8 + 12 + 16 = 32\na+ (4-1)^2 + (3-4)^2 + (4-3)^2 = 16 + 16 + 16 + 16 + 12 + 16 = 48\nb= 16\na+ (4-1)^2 + (3-4)^2 + (4-3)^2 = 16 + 16 + 16 + 16 + 12 + 16 = 48\nb= 16\na+ (4-1)^2 + (4-4)^2 + (3-4)^2 = 16 + 16 + 16 + 16 + 8 + 12 = 36\nb= 36\na+ (4-1)^2 + (4-4)^2 + (3-4)^2 = 16 + 16 + 16 + 16 + 8 + 12 = 36\nb= 36\na+ (4-1)^2 + (4-4)^2 + (4-3)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-3)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)^2 + (4-4)^2 = 16 + 16 + 16 + 16 + 8 + 16 = 40\nb= 40\na+ (4-1)^2 + (4-4)",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8\") == \"8\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\">0\\n>5\\n>1\\n>3\\n>2\\n>3\\n>4\\n>0\\n>3\\n>5\\n>0\\n>1\\n>2\\n>1\\n>0\\n>0\\n>5\\n>3\\n>1\\n>1\\n>4\\n>0\\n>1\\n>3\\n>1\\n>0\\n>4\\n>2\\n>0\\n>4\\n>0\\n>2\\n>2\\n>2\\n>1\\n>0\\n>0\\n>4\\n>3\\n>2\\n>3\\n>0\\n>0\\n>0\\n>3\\n>0\\n>0\\n>0\\n>0\\n>2\\n>0\\n>0\\n>0\\n>5\\n>1\\n>4\\n>0\\n>0\\n>1\\n>0\\n>1\\n>3\\n>0\\n>0\\n>0\\n>1\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\n>0\\",
        "num_ids_2": 1783,
        "num_ids_4": 1783
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8\\n\") == \"8\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8\\n\") == \"8\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1234\\n150\\n100') == '84'\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1234 150 100') == '84'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100 150\") == \"84\"\nassert solution(\"10 1\") == \"10\"\nassert solution(\"1234 150 100\") == \"84\"\n\n\"\"\"\n\nimport sys\n\nA, B, X = [int(x) for x in sys.stdin.read().split()]\nprint(A * B - X)\n",
        "num_ids_2": 22,
        "num_ids_4": 35
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n'''\n\nX = int(input())\nA = int(input())\nB = int(input())\n\nprint(X - A + B)\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 200\") == \"84\"\n\"\"\"\n\n\nfrom math import floor",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1234 150 100') == '84'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1234 150 100') == '84'\nprint(solution('1234 150 100'))\n\"\"\"\n\n\"\"\"\nYou went shopping to buy cakes and donuts with X yen (the currency of Japan).\nFirst, you bought one cake for A yen at a cake shop.\nThen, you bought as many donuts as possible for B yen each, at a donut shop.\nHow much do you have left after shopping?\n\n-----Constraints-----\n - 1 \\leq A, B \\leq 1 000\n - A + B \\leq X \\leq 10 000\n - X, A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nX\nA\nB\n\n-----Output-----\nPrint the amount you have left after shopping.\n\n-----Sample Input-----\n1234\n150\n100\n\n-----Sample Output-----\n84\n\nYou have 1234 - 150 = 1084 yen left after buying a cake.\nWith this amount, you can buy 10 donuts, after which you have 84 yen left.\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1234\n150\n100''') == '84'\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''1234\n150\n100''') == '84'\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == 8\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('A B') == '1'\nassert solution('C D') == '2'\nassert solution('A B C D') == '5'\nassert solution('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') == '1536'",
        "num_ids_2": 19,
        "num_ids_4": 43
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('2 2') == '4'\nassert solution('3 3') == '12'\nassert solution('4 4') == '20'\n",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"8\"\n\n---\n\nSome other ideas:\n\nn, m = [int(x) for x in stdin.split()]",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == 8\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\"\n\nfrom typing import List, Tuple, Iterator\n\nfrom itertools import chain\nfrom collections import defaultdict\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"8\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"24\"\nassert solution(\"5 5\") == \"160\"\nassert solution(\"10 10\") == \"2562560\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2') == '8'\nassert solution('4 4') == '8'\nassert solution('2 1') == '1'\nassert solution('2 2') == '1'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"IMPOSSIBLE\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\nassert solution(\"4 2\\n1 2\\n2 3\\n3 4\") == \"POSSIBLE\"\nassert solution(\"1 2\\n2 1\") == \"IMPOSSIBLE\"\nassert solution(\"3 1\\n2 3\") == \"IMPOSSIBLE\"\n\n----",
        "num_ids_2": 46,
        "num_ids_4": 82
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 2\") == \"POSSIBLE\"\nassert solution(\"2 2\\n1 3\") == \"IMPOSSIBLE\"\nassert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"IMPOSSIBLE\"\nassert solution(\"1 2\\n1 2\") == \"IMPOSSIBLE\"\n",
        "num_ids_2": 35,
        "num_ids_4": 78
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == \"POSSIBLE\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == 'POSSIBLE'\n\"\"\"\nfrom collections import defaultdict\nfrom itertools import permutations",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 2\\n\") == \"POSSIBLE\"\n\"\"\"\n\nN, M = [int(x) for x in stdin.readline().split()]\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\\n\") == \"POSSIBLE\"\n\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == 'POSSIBLE'\n\"\"\"\n\nfrom collections import deque\n\n\nclass Graph:\n    def __init__(self, size: int):\n        self.vertices = [[] for _ in range(size)]\n\n    def add_edge(self, u: int, v: int):\n        self.vertices[u].append(v)\n\n    def print(self):\n        print(self.vertices)\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n2 3\") == \"POSSIBLE\"\nassert solution(\"2 2\\n1 3\") == \"IMPOSSIBLE\"\nassert solution(\"2 3\\n1 2\") == \"POSSIBLE\"\nassert solution(\"3 3\\n1 2\") == \"IMPOSSIBLE\"\n\n--------------------------------------------------\nNow that we know how to check the validity of input data, we can focus on the solution itself.\nThis is the main part of the problem.\nWe are trying to use two types of boats to go from Island 1 to Island N.\nIt is obvious that we can use at most M boat services to go from Island 1 to Island N.\nSo, let us assume that we use M boat services.\nWe can then split Island 1 into two parts, named Island 1a and Island 1b.\nNow, we know that if we use two boat services to go from Island 1a to Island N, we can't use another boat service to go from Island 1b to Island N.\nSo, we can try to go from Island 1a to Island N using two boat services.\nIf we can go from Island 1a to Island N, then we can go from Island 1b to Island N also by using two boat services.\nIf we can't go from Island 1a to Island N, then it is impossible to go from Island 1b to Island N.\nThus, we can return POSSIBLE if we can go from Island 1a to Island N, and IMPOSSIBLE if we can't go from Island 1a to Island N.",
        "num_ids_2": 35,
        "num_ids_4": 70
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nassert solution(\"a\") == \"a\"\nassert solution(\"\") == \"\"\nassert solution(\"abc\") == \"cab\"\nassert solution(\"abcdef\") == \"bdf\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 23,
        "num_ids_4": 41
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('atcoder') == 'acdr'",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('atcoder') == 'acdr'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('atcoder') == 'acdr'\nprint('Test 1 PASSED')",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(s) == acdr\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"atcoder\") == 'acdr'\nprint(solution(\"atcoder\"))\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ac') == 'c'\nassert solution('ab') == 'b'\nassert solution('abc') == 'c'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n\n'''",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"\nimport sys\n\nfor line in sys.stdin:\n    A, B, C = line.strip().split()\n\n    if A[-1] == B[0] and B[-1] == C[0]:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\"\"\"\n\nA, B, C = [x.strip() for x in stdin.split()]\n\nprint('YES' if A[-1] == B[0] and B[-1] == C[0] else 'NO')\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\nassert solution('rng igor ape') == 'NO'\n\"\"\"\n\nimport unittest\nimport sys\nfrom collections import deque",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('36 24') == 'GREATER'\n\n-----------",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('36 24') == 'GREATER'\n\n\"\"\"\n\nA, B = map(int, stdin.split())\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('36 24') == 'GREATER'\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"36 24\") == 'GREATER'\nassert solution(\"24 36\") == 'LESS'\nassert solution(\"36 36\") == 'EQUAL'\n\"\"\"\n\nA = input()\nB = input()\n",
        "num_ids_2": 23,
        "num_ids_4": 36
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''36\n24\n''') == 'GREATER'\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\napple\\ngrape\\napple\\ngrape\") == 2\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\\n\") == \"2\"\nprint(\"Test succeeded.\")\n\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\\n\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n\nimport sys\nimport string\n\nn = int(input())\ns = input().split()\nm = int(input())\nt = input().split()\n\nanswer = 0\nfor i in range(m):\n    if s[i] in string.ascii_lowercase:\n        answer += 1\n    elif t[i] in string.ascii_lowercase:\n        answer -= 1\nprint(answer)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"\n\"\"\"\n\nimport math",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\n------Test Case 0------\ninput:\n3\napple\norange\napple\n1\ngrape\n\n-------Expected Output-------\n2\n\n------Test Case 1------\ninput:\n3\npeach\nbanana\npeach\n1\norange\n\n-------Expected Output-------\n0\n\n------Test Case 2------\ninput:\n5\napple\norange\npeach\ngrape\nbanana\n1\napple\n\n-------Expected Output-------\n2\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"apple\\norange\\napple\\n1\\ngrape\\n\") == 2\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\\n\") == \"2\"\n\"\"\"\n\nimport collections",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"apple\\norange\\napple\\n1\\ngrape\") == 2\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\"\n\nb = input()\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\nassert solution('G') == 'C'\nassert solution('T') == 'A'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n\nprint(solution(\"A\"))\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3 2 2 4 1\") == \"14\"\n\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2 2 2 4 1') == '14'\nprint('OK')\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == '14'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"5\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"17\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\ndp = [[0] * N for _ in range(3)]\ndp[0][0] = 1\nfor i in range(1, N):\n    for j in range(3):\n        if j == 0:\n            dp[j][i] = dp[0][i - 1]\n        elif j == 1:\n            dp[j][i] = dp[0][i - 1] + dp[1][i - 1]\n        elif j == 2:\n            dp[j][i] = dp[0][i - 1] + dp[2][i - 1]\nprint(max(dp[0][N - 1], dp[1][N - 1], dp[2][N - 1]))\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3 4 5') == '9'\nassert solution('3\\n1 1 1\\n1 1 1') == '7'\n\"\"\"\n\n\"\"\"\n2. Median of Three Sorted Arrays\n\"\"\"\n\n\"\"\"\nProblem\nGiven three integer arrays A, B and C of sizes N1, N2 and N3 respectively, \nfind the median of the three sorted arrays.\n\n-----Input-----\nThe first line of the input contains a single integer T denoting the number of test cases.\nThe first line of each test case contains three space-separated integers N1, N2 and N3.\nThe second line of each test case contains N1 space-separated integers A1, A2,..., AN.\nThe third line of each test case contains N2 space-separated integers B1, B2,..., BN.\nThe fourth line of each test case contains N3 space-separated integers C1, C2,..., CN.\n\n-----Output-----\nPrint the median of each test case in a new line.\n\n-----Sample Input-----\n2\n5 3 7\n2 4 6 8 9\n7 4 6 2 3\n3 1 4 7 9\n4 1 3 6 7\n\n-----Sample Output-----\n5\n7\n5\n\"\"\"\n\n\"\"\"\n3. Getting the Word Count\n\"\"\"\n\"\"\"\nProblem\nGiven a text file file.txt, print the counts of all the words in the file.\n\nEach word is separated by a single space.\n\nThe output should first print all the words and their counts in alphabetical order.\n\nThen, print all the words and their counts in reverse alphabetical order.\n\n-----Input-----\nThe first line of the input contains a single integer T, denoting the number of test cases.\nEach test case is described as follows:\n1. The first line of input contains a string denoting file name.\n\n-----Output-----\nPrint the words and their respective counts in alphabetical order.\nPrint the words and their respective counts in reverse alphabetical order.\n\n-----Sample Input-----\n2\nfile1.txt\n\nfile2.txt\n\n-----Sample Output-----\na 10\nb 12\nc 9\nd 1\ne 3\n\nb 12\na 10\nd 1\ne 3\nc 9\n\"\"\"\n\n\"\"\"\n4. Brackets\n\"\"\"\n\"\"\"\nProblem\nGiven a mathematical expression with numbers and operators, \nextract the number at the end of the line.\n\n-----Input-----\nThe first line of input contains an integer T, the number of test cases.\nEach test case contains a single line of input containing the mathematical expression.\n\n-----Output-----\nFor each mathematical expression, print the number at the end of the line.\n\n-----Sample Input-----\n2\n9+2\n5*(3-1)\n\n-----Sample Output-----\n3\n2\n\n-----Explanation-----\nThe number after the + is 9.\nThe number after the * is 3.\nThe number after the - is 1.\n\"\"\"\n\n\"\"\"\n5. Flip the Matrix\n\"\"\"\n\"\"\"\nProblem\nGiven a matrix of dimension N x M, flip the entire matrix along a diagonal. \nExample:\nIf the input is:\n1 2 3\n4 5 6\n7 8 9\nThen the output should be:\n9 2 6\n7 4 1\n8 5 3\n\"\"\"\n\"\"\"\n-----Input-----\nThe first line of input contains an integer T, the number of test cases.\nThe first line of each test case contains two integers N and M.\nThe next N lines contain M integers.\n\n-----Output-----\nPrint the 2-D array for each test case in a new line.\n\n-----Sample Input-----\n2\n3 3\n1 2 3\n4 5 6\n7 8 9\n2 2\n1 2\n3 4\n5 6\n7 8\n\n-----Sample Output-----\n3 3\n1 2 3\n4 5 6\n7 8 9\n2 2\n1 2\n3 4\n5 6\n7 8\n\n\"\"\"\n\n\"\"\"\n6. Coin sums\n\"\"\"\n\"\"\"\nProblem\nYou have a collection of coins.\n\nThe i-th coin has a value of v[i] and a face value of f[i].\nYou are given a particular amount of money m.\n\nYou want to determine the minimum number of coins needed to make up that amount.\n\nWrite a function to calculate the minimum number of coins needed.\n\n-----Input-----\nThe first line of input contains an integer T, the number of test cases.\nThe first line of each test case contains two integers N and M.\nThe second line of each test case contains N integers, v[i] with each value being the value of the i-th coin.\nThe third line of each test case contains N integers, f[i] with each value being the face value of the i-th coin.\nThe fourth line of each test case contains an integer m, the amount of money to make up.\n\n-----Output-----\nPrint a single integer denoting the minimum number of coins needed to make up that amount.\n\n-----Sample Input-----\n2\n3 2\n1 2 1\n2 5\n5 10\n3\n1 2 1\n2 5\n5 10\n7\n1 2 1\n2 5\n5 10\n7\n\n-----Sample Output-----\n2\n1\n\"\"\"\n\n\"\"\"\n7. Coin sums\n\"\"\"\n\"\"\"\nProblem\nYou are given an array of n coins with values v[0], v[1],... v[n-1].\nYou want to make change for a particular amount of money, m.\n\nWrite a function that returns the minimum number of coins with which you can make up that amount.\n\n-----Input-----\nThe first line of input contains an integer T, the number of test cases.\nThe first line of each test case contains two integers n and m.\nThe next line contains n space-separated integers v[0], v[1],..., v[n-1].\n\n-----Output-----\nPrint a single integer denoting the minimum number of coins needed to make up that amount.\n\n-----Sample Input-----\n2\n4 10\n2 5 4 7\n10\n1 2 5 10 50\n\n-----Sample Output-----\n3\n5\n\"\"\"\n\n\"\"\"\n8. Jewels and Stones\n\"\"\"\n\"\"\"\nProblem\nYou're given strings J representing the types of stones that are jewels, and S representing the stones you have.\nEach character in S is a type of stone you have.  You want to know how many of the stones you have are also jewels.\n\nThe letters in J are guaranteed distinct, and all characters in J and S are letters. \nLetters are case sensitive, so \"a\" is considered a different type of stone from \"A\".\n\nNote:\nS and J will consist of letters and have length at most 50.\nThe characters in J are distinct.\n\"\"\"\n\"\"\"\n-----Input-----\nThe first line of input contains an integer T, the number of test cases.\nThe first line of each test case contains a string J.\nThe second line contains a string S.\n\n-----Output-----\nPrint the number of stones you have which are also jewels.\n\n-----Sample Input-----\n3\naA\nz\nXYZ\n\n-----Sample Output-----\n1\n0\n3\n\n\"\"\"\n\n\"\"\"\n9. Last Stone Weight\n\"\"\"\n\"\"\"\nProblem\nWe have a collection of stones, each stone has a positive integer weight.\n\nEach turn, we choose the two heaviest stones and smash them together",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n3 2 2 4 1\\n1 2 2 2 1') == '14'\n\n-----\n\nFor a better understanding of the problem, check the explanation.\n\nProblem Setter:\n'''\nfrom typing import List, Tuple, Dict, Set\nfrom collections import defaultdict\nfrom functools import partial\nfrom collections import Counter\nfrom itertools import filterfalse, tee, chain\nfrom operator import itemgetter, add\nfrom copy import copy, deepcopy\nfrom pprint import pprint\nimport math\nimport re\nimport string\nimport decimal\nimport functools\nimport collections\n\nfrom collections import Counter",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1 1') == '0'\nassert solution('1 2 2 2 1') == '3'\nassert solution('1 2 2 2 1') == '3'\nassert solution('1 2 2 2 1') == '3'\n",
        "num_ids_2": 22,
        "num_ids_4": 50
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n3 2 2 4 1') == '14'\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n3 2 2 4 1') == '14'\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\"\n\nfrom typing import List\nfrom math import ceil",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 2\") == \"1\"\n\n------Test Case:\n2\n1 2\n\n------Input-----\n2\n5 2\n1 2 3 4 5\n\n------Output-----\n0\n\n------Test Case:\n1\n4 9\n1 2 3 4\n\n------Input-----\n4\n8 8 9 2 1\n1 3 4 5 6 7 8\n\n------Output-----\n3\n\n------Test Case:\n1\n6 3\n1 2 3 4 5 6\n\n------Input-----\n4\n1 1 1 1\n1 1 1 1\n\n------Output-----\n6\n\n------Test Case:\n3\n1 1 1\n1 1 1\n1 1 1\n\n------Input-----\n1\n1\n\n------Output-----\n0\n\n------Test Case:\n1\n1\n\n------Input-----\n1\n0\n\n------Output-----\n0\n\n------Test Case:\n1\n3\n\n------Input-----\n1\n2\n\n------Output-----\n1\n\n------Test Case:\n1\n5\n\n------Input-----\n1\n9\n\n------Output-----\n0\n\n------Test Case:\n1\n10\n\n------Input-----\n1\n9\n\n------Output-----\n1\n\n------Test Case:\n2\n6\n\n------Input-----\n2\n9 8\n1 2 3 4 5 6 7 8 9\n9 8\n1 2 3 4 5 6 7 8 9\n\n------Output-----\n2\n\n------Test Case:\n1\n5\n\n------Input-----\n1\n6\n\n------Output-----\n1\n\n------Test Case:\n1\n9\n\n------Input-----\n3\n9 8 7\n1 2 3 4 5 6 7 8 9\n9 8\n1 2 3 4 5 6 7 8 9\n\n------Output-----\n2\n\n------Test Case:\n1\n10\n\n------Input-----\n3\n9 8 7\n1 2 3 4 5 6 7 8 9\n9 8\n1 2 3 4 5 6 7 8 9\n\n------Output-----\n3\n\n------Test Case:\n2\n9 8\n1 2 3 4 5 6 7 8 9\n9 8\n1 2 3 4 5 6 7 8 9\n\n------Input-----\n1\n5\n\n------Output-----\n0\n\n------Test Case:\n1\n9\n\n------Input-----\n1\n9\n\n------Output-----\n0\n\n------Test Case:\n1\n8\n\n------Input-----\n2\n9 8\n1 2 3 4 5 6 7 8 9\n9 8\n1 2 3 4 5 6 7 8 9\n\n------Output-----\n1\n\n------Test Case:\n2\n9 8\n1 2 3 4 5 6 7 8 9\n9 8\n1 2 3 4 5 6 7 8 9\n\n------Input-----\n1\n5\n\n------Output-----\n0\n\n------Test Case:\n1\n7\n\n------Input-----\n2\n9 7\n1 2 3 4 5 6 7 8 9\n9 7\n1 2 3 4 5 6 7 8 9\n\n------Output-----\n1\n\n------Test Case:\n1\n7\n\n------Input-----\n2\n7 6\n1 2 3 4 5 6 7 8 9\n7 6\n1 2 3 4 5 6 7 8 9\n\n------Output-----\n2\n\n------Test Case:\n1\n7\n\n------Input-----\n1\n6\n\n------Output-----\n1\n\n------Test Case:\n1\n7\n\n------Input-----\n1\n8\n\n------Output-----\n0\n\n------Test Case:\n1\n9\n\n------Input-----\n2\n8 9\n1 2 3 4 5 6 7 8 9\n9 8\n1 2 3 4 5 6 7 8 9\n\n------Output-----\n2\n\n------Test Case:\n1\n8\n\n------Input-----\n1\n8\n\n------Output-----\n1\n\n------Test Case:\n1\n9\n\n------Input-----\n2\n9 7\n1 2 3 4 5 6 7 8 9\n9 7\n1 2 3 4 5 6 7 8 9\n\n------Output-----\n1\n\n------Test Case:\n1\n7\n\n------Input-----\n1\n7\n\n------Output-----\n0\n\n------Test Case:\n1\n8\n\n------Input-----\n2\n6 3\n1 2 3 4 5 6 7 8 9\n6 3\n1 2 3 4 5 6 7 8 9\n\n------Output-----\n2\n\n------Test Case:\n2\n9 7\n1 2 3 4 5 6 7 8 9\n9 7\n1 2 3 4 5 6 7 8 9\n\n------Output-----\n1\n\n------Test Case:\n1\n9\n\n------Input-----\n1\n9\n\n------Output-----\n0\n\n------Test Case:\n1\n8\n\n------Input-----\n1\n8\n\n------Output-----\n0\n\n------Test Case:\n1\n9\n\n------Input-----\n2\n8 3\n1 2 3 4 5 6 7 8 9\n8 3\n1 2 3 4 5 6 7 8 9\n\n------Output-----\n2\n\n------Test Case:\n1\n7\n\n------Input-----\n1\n7\n\n------Output-----\n0\n\n------Test Case:\n1\n8\n\n------Input-----\n1\n8\n\n------Output-----\n0\n\n------Test Case:\n1\n9\n\n------Input-----\n1\n9\n\n------Output-----\n0\n\n------Test Case:\n2\n9 7\n1 2 3 4 5 6 7 8 9\n9 7\n1 2 3 4 5 6 7 8 9\n\n------Output-----\n2\n\n------Test Case:\n1\n9\n\n------Input-----\n1\n9\n\n------Output-----\n0\n\n------Test Case:\n1\n8\n\n------Input-----\n1\n8\n\n------Output-----\n0\n\n------Test Case:\n1\n9\n\n------Input-----\n1\n9\n\n------Output-----\n0\n\n------Test Case:\n2\n9 7\n1 2 3 4 5 6 7 8 9\n9 7\n1 2 3 4 5 6 7 8 9\n\n------Output-----\n2\n\n------Test Case:\n1\n8\n\n------Input-----\n1\n8\n\n------Output-----\n0\n\n------Test Case:\n1\n9\n\n------Input-----\n1\n9\n\n------Output-----\n0\n\n------Test Case:\n1\n9\n\n------Input-----\n1\n9\n\n------Output-----\n0\n\n------Test Case:\n1\n7\n\n------Input-----\n1\n7\n\n------Output-----\n0\n\n------Test Case:\n1\n9\n\n------Input-----\n1\n9\n\n------Output-----\n0\n\n------Test Case:\n2\n6 3\n1 2 3 4 5 6 7 8 9\n6 3\n1 2 3 4 5 6 7 8 9\n\n------Output-----\n2\n\n------Test Case:\n2\n6 3\n1 2 3 4 5 6 7 8 9\n6 3\n1 2 3 4 5 6 7 8 9\n\n------Output-----\n1\n\n------Test Case:\n1\n6\n\n------Input-----\n1\n6\n\n------Output-----\n0\n\n------Test Case:\n1\n6\n\n------Input-----\n1\n6\n\n------Output-----\n0\n\n------Test Case:\n1\n6\n\n------Input-----\n2\n7 2\n1 2 3 4 5 6 7 8 9\n7 2\n1 2 3 4 5 6 7 8 9\n\n------Output-----\n1\n\n------Test Case:\n1\n7\n\n------Input-----\n1\n7\n\n------Output-----\n0\n\n------Test Case:\n1\n7\n\n------Input-----\n1\n7\n\n------Output-----\n0\n\n------Test Case:\n2\n7 2\n1 2 3 4 5 6 7 8 9\n7 2\n1 2 3 4 5 6 7 8 9\n\n------Output-----\n1\n\n------Test Case:\n2\n8 9\n1 2 3 4 5",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n2 2 2') == '1'\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n2 2 2') == '1'\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n2 2 2') == '1'\n\"\"\"\nimport sys\n\nn, k = [int(n) for n in sys.stdin.readline().strip().split(' ')]\nnums = [int(n) for n in sys.stdin.readline().strip().split(' ')]\n\nnum_swaps = 0\n\nfor i in range(n):\n    num_swaps += 1\n    if nums[i] == k:\n        for j in range(i + 1, n):\n            if nums[j] == k:\n                nums[i], nums[j] = nums[j], nums[i]\n                num_swaps += 1\n                break\n\nprint(num_swaps)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\nprint(\"PASSED\")\n\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n2 2 2') == '1'\nassert solution('5 3\\n2 2 2 2 2') == '5'\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\"\n\nN, x = [int(i) for i in stdin.split()]\nb = [int(i) for i in stdin.split()]\nm = [0] * N\nfor i in range(1, N):\n    if b[i] > b[i - 1]:\n        m[i] = m[i - 1] + 1\nprint(sum(m))\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\\n\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\\n\") == \"Yes\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == 'Yes'\nassert solution(\"1 0 1\\n2 1 2\\n3 1 3\") == 'No'\nassert solution(\"1 0 1\\n1 0 1\\n1 0 1\") == 'No'\nassert solution(\"1 0 1\\n2 1 2\\n3 2 3\") == 'No'\nassert solution(\"0 0 1\\n0 0 1\\n0 0 1\") == 'No'\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"No\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\n\"\"\"\nfrom __future__ import print_function\nfrom collections import namedtuple\n\nRow = namedtuple('Row', 'num1 num2 num3')\nCoordinate = namedtuple('Coordinate', 'row col')",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"No\"\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin='') == 'No'\n\nassert solution(stdin='1 0 1') == 'No'\nassert solution(stdin='2 1 2') == 'Yes'\nassert solution(stdin='1 0 1') == 'Yes'\nassert solution(stdin='2 1 2') == 'No'\n",
        "num_ids_2": 28,
        "num_ids_4": 58
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\"\n\nS = stdin.readline()",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == output()\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\"\n\nimport sys\n\nS = sys.stdin.readline()\n\nprint(\"ARC\") if S.strip() == \"ARC\" else print(\"ABC\")\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    line = line.split()\n    a, b, x = map(int, line)\n\n    i = a\n    count = 0\n    while i <= b:\n        if i % x == 0:\n            count += 1\n        i += 1\n\n    print(count)",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8 2') == '3'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '1\\n2\\n3\\n4\\n'\n'''",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"\n\na, b, x = input().split()\na, b, x = int(a), int(b), int(x)\ncount = 0\n\nfor i in range(a, b + 1):\n    if i % x == 0:\n        count += 1\n\nprint(count)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"25\") == \"Christmas\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"25\") == \"Christmas\"\nassert solution(\"24\") == \"Christmas Eve\"\nassert solution(\"23\") == \"Christmas Eve Eve\"\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'",
        "num_ids_2": 21,
        "num_ids_4": 46
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('25') == 'Christmas'\n\nprint(solution('23'))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 46
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1) == \"Christmas\"\nassert solution(2) == \"Christmas\"\nassert solution(3) == \"Christmas\"\nassert solution(4) == \"Eve Eve\"\nassert solution(5) == \"Eve Eve Eve\"\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"25\") == \"Christmas\"\n\n\"\"\"\n\nimport math",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('25') == \"Christmas\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 46
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve Eve Eve'\nassert solution('23') == 'Christmas Eve Eve Eve Eve'\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 37
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\") == \"4\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n\") == \"4\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\") == \"4\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('2\\n3\\n4') == '2'\nassert solution('2\\n3\\n4\\n5\\n6\\n7') == '2'\n",
        "num_ids_2": 18,
        "num_ids_4": 44
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7') == '4'\n\n-----Explanation-----\nWe can write 4 in two ways:\n1, 4\n2, 2, 2\n3, 3\n4, 1\nAll of them are correct, but the first one has a greater number of divisibility by 2.\n\"\"\"\nimport sys\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"6\") == \"4\"\nassert solution(\"8\") == \"4\"\n\"\"\"\n\nfrom math import log2",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"4\", f\"Actual: {solution('4')}\"\nassert solution(\"6\") == \"6\", f\"Actual: {solution('6')}\"\nassert solution(\"8\") == \"8\", f\"Actual: {solution('8')}\"\n\"\"\"\n\nn = int(input())",
        "num_ids_2": 44,
        "num_ids_4": 66
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"8 4\") == \"3\"\nassert solution(\"3\") == \"0\"\n",
        "num_ids_2": 22,
        "num_ids_4": 32
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\") == \"4\"\nprint(solution(\"7\"))",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"7\") == \"4\"\nassert solution(\"8\") == \"8\"\nassert solution(\"15\") == \"8\"\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"Yes\"\n\"\"\"\n\nfrom math import sqrt",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 7 9 3') == 'Yes'\nassert solution('5 7 1 3') == 'No'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\nassert solution(\"4 7 8 3\") == \"No\"\nassert solution(\"1 1 1 1\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == 'Yes'\nassert solution('1 2 1 1') == 'Yes'\nassert solution('1 2 4 4') == 'Yes'\nassert solution('1 2 3 5') == 'No'\n\n\"\"\"\n\nimport ast\nimport collections",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\nassert solution(\"1 1 1 1\") == \"No\"\nassert solution(\"1 1 1 0\") == \"Yes\"\nassert solution(\"1 2 1 2\") == \"No\"\nassert solution(\"1 2 1 2 1\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\n-----Explanation-----\nThe longest distance between A and B is 1, and the longest distance between B and C is 4.\nThe longest distance between A and C is 3.\nTherefore, A and C can communicate.\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 7 9 3') == 'Yes'\nprint(solution(stdin))\n\n-----Notes-----\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n\ninput = stdin.split()\nprint(''.join(x[0] for x in input).upper())\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\n\"\"\"\n\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n\nstdin = input()\ns1, s2, s3 = stdin.split()\n\nacronym = \"\"\nfor word in (s1, s2, s3):\n    acronym += word[0]\n\nprint(acronym.upper())\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\nprint(solution(stdin.rstrip()))\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\n---Problem 2---\nYou are given the following information, but you may prefer to do some research for yourself.\n\n1 Jan 1900 was a Monday.\nThirty days has September,\nApril, June and November.\nAll the rest have thirty-one,\nSaving February alone,\nWhich has twenty-eight, rain or shine.\nAnd on leap years, twenty-nine.\nA leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.\nHow many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?\n\n-----Constraints-----\n - 1900 \\leq Y \\leq 2000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nY\n\n-----Output-----\nPrint the number of first days of the months of the twentieth century on Sunday.\n\n-----Sample Input-----\n2000\n\n-----Sample Output-----\n306",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(100) == 'No'\nassert solution(50) == 'Yes'\nassert solution(200) == 'No'\nassert solution(50) == 'Yes'\nassert solution(200) == 'Yes'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100 120 130\") == \"No\"\nassert solution(\"50 100 120\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('50 100 120') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('50 100 120') == 'Yes'\nassert solution('50 50 50') == 'No'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('50 100 120') == 'Yes'\nassert solution('100 200 100') == 'No'\n\n'''\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"50 100 100\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"50 100 150\") == \"No\"\n\"\"\"\nA, B, C = list(map(int, stdin.split()))\n\nprint(\"Yes\" if (A + B) >= C else \"No\")\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '2'\nassert solution('3 2') == '0'\nassert solution('3 2 3') == '4'\nassert solution('3 2 1') == '1'\n",
        "num_ids_2": 19,
        "num_ids_4": 42
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n\n-----\n5\n6 7 9 10\n\n-----\n3\n2 3\n\n-----\n3\n4 8\n\n-----\n6\n8 10 11 12\n\n-----\n6\n14 18 20 22\n\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 9 8 9\\n') == '5'\nassert solution('7 1 4 9\\n') == '2'\nassert solution('7 2 8 9\\n') == '5'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\n\"\"\"\n\nfrom math import factorial",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 1') == '0'\nassert solution('3 8') == '1'\nassert solution('1 1 1') == '1'\n",
        "num_ids_2": 18,
        "num_ids_4": 40
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\nprint(solution(input()))\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\"\"\"\n\nimport sys",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 8\n7 9 8 9''') == '5'\n\n\"\"\"\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 8\n7 9 8 9''') == '5'\nassert solution('''4 8\n7 2 2 9''') == '0'\nassert solution('''2 8\n7 2 2 9''') == '1'\nassert solution('''3 2\n7 2 2 9''') == '0'\nassert solution('''3 2\n7 9 5 2''') == '3'\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 4') == '4 2 1 3'\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3 4\") == '4 2 1 3'\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def solve(self, stdin):\n        data = [int(x) for x in stdin.split('\\n')[:-1]]\n        b = []\n        for i in data:\n            b.append(i)\n            b.reverse()\n            b.append(i)\n            b.reverse()\n            \n        return \" \".join([str(x) for x in b])\n\n\nclass Test(unittest.TestCase):\n    def test_1(self):\n        stdin = \"4\\n1 2 3 4\"\n        ans = \"4 2 1 3\"\n        self.assertEqual(Solution().solve(stdin), ans)\n    def test_2(self):\n        stdin = \"2\\n1 2\"\n        ans = \"1 2\"\n        self.assertEqual(Solution().solve(stdin), ans)\n    def test_3(self):\n        stdin = \"1\\n1\"\n        ans = \"1\"\n        self.assertEqual(Solution().solve(stdin), ans)\n    def test_4(self):\n        stdin = \"1\\n1\\n1\"\n        ans = \"1\"\n        self.assertEqual(Solution().solve(stdin), ans)\n    def test_5(self):\n        stdin = \"2\\n1 2\"\n        ans = \"1 2\"\n        self.",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 2 3') == '4 2 1 3'\nassert solution('2 1') == '2 1'\nassert solution('1 2') == '1 2'\nassert solution('4 3 1 2') == '4 3 2 1'\nassert solution('2 4 1 2') == '2 1 4 3'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3 4') == '4 2 1 3'\n\nassert solution('5\\n1 2 3 4 5') == '5 4 3 2 1'\n\nassert solution('4\\n1\\n2\\n3\\n4') == '4 3 2 1'\n\nassert solution('6\\n1 1 1 1 1 1') == '6 1 1 1 1 1'\n\nassert solution('4\\n2\\n2\\n2\\n2') == '4 2 2 2 2'",
        "num_ids_2": 40,
        "num_ids_4": 88
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '4 3 2 1'\n\n------------Solution------------\n\"\"\"\nfrom collections import deque",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3 4') == '4 2 1 3'\nassert solution('4\\n2 3 1 4') == '4 1 2 3'\nassert solution('4\\n3 1 4 2') == '4 1 2 3'\nassert solution('5\\n2 1 4 3 5') == '5 1 3 2 4'\nassert solution('10\\n9 5 4 6 1 8 7 3 2') == '10 9 5 4 6 1 8 7 3 2'\n",
        "num_ids_2": 38,
        "num_ids_4": 78
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5 4 2 1 3\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"10 9 8 7 6 5 4 2 1 3\"\nassert solution(\"100\\n
        "num_ids_2": 40,
        "num_ids_4": 1653
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('4\\n1 2 3 4') == '4 2 1 3'\nassert solution('8\\n4 8 2 7 1 1 6 8 9') == '8 7 1 6 2 4 1 3 9 8'\nassert solution('5\\n6 9 2 3 5 6') == '6 9 2 3 5 6'\n\n'''\n",
        "num_ids_2": 27,
        "num_ids_4": 80
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n\"\"\"\n\nimport sys\nfrom typing import List\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '4\\n1 2 3 4'\n) == '4 2 1 3'\nassert solution(\n    '5\\n2 3 4 5 6'\n) == '2 3 4 5 6'\nassert solution(\n    '2\\n9 8'\n) == '9 8'\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 3\\n4 5 6') == 'Yes'\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 3\\n4 5 6\\n\") == \"Yes\"\n\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"\n\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5 6') == 'Yes'\nassert solution('5 3 2') == 'Yes'\nassert solution('10 6 6') == 'No'\nassert solution('6 2 5') == 'No'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''10 3\n4 5 6''') == \"Yes\"\nassert solution('''10 3\n4 4 6''') == \"No\"\nassert solution('''10 3\n4 5 6\n2 4 6''') == \"No\"\nassert solution('''10 3\n4 5 6\n5 5 6''') == \"Yes\"\nassert solution('''10 3\n4 5 6\n5 6 6''') == \"No\"\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 3\\n4 5 6\\n\") == 'Yes'\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''10 3\n4 5 6''') == 'Yes'\nassert solution('''10 3\n5 5 6''') == 'No'\n\"\"\"\nfrom collections import deque\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 3\\n4 5 6') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abaababaab') == 6\nassert solution('abaababaa') == 3\nassert solution('aaaaaa') == 6\nassert solution('ababab') == 3\nassert solution('ab') == 2\n",
        "num_ids_2": 22,
        "num_ids_4": 41
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abaababaab\") == 6\nassert solution(\"abba\") == 4\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abaababaab') == 6\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ababab') == 6\nassert solution('abaababaab') == 6\nassert solution('aaaaa') == 5\nassert solution('abcde') == 4\n\"\"\"\n\n\"\"\"\nfrom typing import List\n\nS = str(input())",
        "num_ids_2": 21,
        "num_ids_4": 39
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abaababaab') == 6\nassert solution('abcdedededede') == 10\nassert solution('abcde') == 5\nassert solution('ababab') == 4\nassert solution('abb') == 2\n\nimport sys\nprint(solution(stdin.read().strip()))\n\n------",
        "num_ids_2": 22,
        "num_ids_4": 41
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abaababaab\") == 6\nassert solution(\"aaaaa\") == 5\nassert solution(\"aaaaaaaaaaaaaaaaaaaa\") == 17\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "num_ids_2": 20,
        "num_ids_4": 1729
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abba') == 2\nassert solution('aabbaa') == 5\nassert solution('abbbba') == 4\nassert solution('a') == 0\nassert solution('aaaaaaaa') == 0\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abba') == 2\nassert solution('abab') == 2\nassert solution('abcba') == 2\nassert solution('abbabbb') == 6\nassert solution('baabb') == 3\n",
        "num_ids_2": 17,
        "num_ids_4": 36
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abaababaab') == 6\n\"\"\"\n\nimport os\nimport sys\n\npath = os.path.join(sys.path[0], 'input.txt')\n\nwith open(path, 'r') as file:\n    stdin = file.read()",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abaababaab') == 6\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"a\") == \"Yes\"\nassert solution(\"ba\") == \"Yes\"\nassert solution(\"aaa\") == \"Yes\"\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('bca') == 'Yes'\nassert solution('bcaa') == 'Yes'\nassert solution('bcaab') == 'No'\nassert solution('a') == 'Yes'\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abcd') == 'dcba'\nassert solution('abc') == 'cba'\nassert solution('abca') == 'cbad'\nassert solution('aabc') == 'cbaa'\nassert solution('aabc') == 'cbaa'\n",
        "num_ids_2": 23,
        "num_ids_4": 48
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('abc') == 'No'\nassert solution('bca') == 'Yes'\nassert solution('bcaa') == 'No'\n\nprint('PASSED')\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"abc\") == \"Yes\"\nassert solution(\"bca\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abc') == 'Yes'\nassert solution('bac') == 'Yes'\nassert solution('ba') == 'No'\n\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('abc') == 'No'\n\"\"\"\nimport sys",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aac\") == \"Yes\"\nassert solution(\"abc\") == \"Yes\"\nassert solution(\"bac\") == \"Yes\"\nassert solution(\"aab\") == \"No\"\nassert solution(\"abb\") == \"No\"\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('abc') == 'No'\nassert solution('abd') == 'No'\n\"\"\"\nimport pytest\n\n\n@pytest.mark.parametrize('s', ('bac', 'abc', 'abd'))\n",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('ab') == ''\nassert solution('abc') == ''\nassert solution('a\\nb') == ''\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\\n\") == \"646\"\n\"\"\"\n\nimport math",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == output()\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5\") == \"5 2 4 1 3\"\nassert solution(\"2 3 4 5 6\") == \"6 2 4 3 5\"\n\"\"\"\nimport numpy as np\n\nn = int(input().strip())\na = np.array(list(map(int, input().split())))\nb = np.array(list(map(int, input().split())))\n\nf = np.sum(a*b, axis=1)\n\nprint(np.min(f))\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n1 8 7 2 4\n9 7 2 9 3''') == '646'\nassert solution('''1\n1000000\n1000000''') == '757402647'\nassert solution('''2\n1 3\n4 2''') == '20'\nassert solution('''5\n9 7 2 9 3\n7 2 9 7 3''') == '646'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\\n\") == \"646\"\nassert solution(\"1\\n1000000\\n1000000\\n\") == \"757402647\"\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n1 8 7 2 4\n9 7 2 9 3\n''') == '646'\nassert solution('''1\n1000000\n1000000\n''') == '757402647'\nassert solution('''2\n1 3\n4 2\n''') == '20'\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '1'\nassert solution('1\\n3') == '2'\nassert solution('2\\n5\\n3\\n1\\n3\\n4\\n2') == '3'\nassert solution('2\\n5\\n3\\n1\\n3\\n4\\n2') == '3'\n",
        "num_ids_2": 21,
        "num_ids_4": 62
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a b\\n1 2\\n3 4') == '3'\nassert solution('a b\\n2 3\\n1 4') == '4'\nassert solution('a b\\n1 2\\n4 3') == '4'\nassert solution('a b\\n1 3\\n4 2') == '5'\n",
        "num_ids_2": 27,
        "num_ids_4": 65
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\\n\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == \"17\"",
        "num_ids_2": 80,
        "num_ids_4": 80
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\\n\") == \"17\"\n\"\"\"\n\n\nfrom typing import List\n\nfrom collections import Counter",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 7 8 5 1 8 1 1 2 1') == '17'\nassert solution('6 8 5 1 8 1 1 2 1') == '17'\n\"\"\"\nfrom sys import stdin",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1') == '7'\nassert solution('9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7') == '17'\nassert solution('5 1 4\\n2 5 7 4 6\\n5 4\\n') == '17'\n",
        "num_ids_2": 76,
        "num_ids_4": 101
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == '7'\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == '17'\n\"\"\"\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\\n\") == \"7\"\n\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == \"17\"\n\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"\n\n\"\"\"\n",
        "num_ids_2": 80,
        "num_ids_4": 105
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == \"7\"\n\"\"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1') == '7'\nassert solution('9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7') == '17'\nassert solution('5 1 4\\n2 5 7 4 6\\n5 4\\n') == '17'\n\"\"\"",
        "num_ids_2": 76,
        "num_ids_4": 101
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1 4\\n2 5 7 4 6\\n5 4\\n9 7\\n8 4\\n5 3\\n9 7') == '17'\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1') == '7'\nassert solution('9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7') == '17'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\") == '2'\n\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == '0'\n\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == '1'\n",
        "num_ids_2": 68,
        "num_ids_4": 102
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7\\n1 2\\n2 3\\n2 4\\n2 5\\n3 6\\n4 7\\n5 7\") == \"2\"\nassert solution(\"4 7\\n1 2\\n2 3\\n2 4\\n2 5\\n3 6\\n4 7\\n5 7\") == \"0\"\nassert solution(\"4 7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n4 7\\n5 7\") == \"1\"\nassert solution(\"3 9\\n1 2\\n1 3\\n2 3\\n2 4\\n3 5\\n3 6\\n4 6\\n4 7\\n5 7\") == \"2\"\n\nprint('Success')\n\n\"\"\"\n",
        "num_ids_2": 78,
        "num_ids_4": 164
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n5 7\") == '2'\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == '0'\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\") == '1'\n\"\"\"\n",
        "num_ids_2": 68,
        "num_ids_4": 102
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7') == '2'\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7') == '0'\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7') == '1'\n\"\"\"\n\nclass Tree:\n\n    def __init__(self, adjacency_list, v):\n        self.n = v\n        self.adjacency_list = adjacency_list\n\n\n    def find(self, parent, child):\n        if parent[child] == child:\n            return child\n        return self.find(parent, parent[child])\n\n    def union(self, parent, x, y):\n        x_root = self.find(parent, x)\n        y_root = self.find(parent, y)\n        parent[x_root] = y_root\n\n    def solution(self, v):\n        parent = [i for i in range(v + 1)]\n\n        edges = []\n        for i in range(v - 1):\n            u, v = list(map(int, input().split()))\n            edges.append((u, v))\n\n        edges = list(set(edges))\n\n        minimum_edge_count = 0\n        for u, v in edges:\n            x_root = self.find(parent, u)\n            y_root = self.find(parent, v)\n            if x_root!= y_root:\n                minimum_edge_count += 1\n                self.union(parent, x_root, y_root)\n\n        return minimum_edge_count\n\n\ntree = Tree([1, 2, 2, 3, 3, 3, 4], 7)\nprint(tree.solution(7))\n",
        "num_ids_2": 68,
        "num_ids_4": 102
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == '2'\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == '0'\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\") == '1'\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\") == '1'\n\n------END------\n'''\n",
        "num_ids_2": 72,
        "num_ids_4": 144
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7') == '2'\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7') == '0'\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7') == '1'\n",
        "num_ids_2": 68,
        "num_ids_4": 102
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == '2'\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == '0'\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == '1'\n",
        "num_ids_2": 72,
        "num_ids_4": 108
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7') == '2'\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7') == '0'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7') == '1'\n\n\n\n\"\"\"\n",
        "num_ids_2": 68,
        "num_ids_4": 102
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"0\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 68,
        "num_ids_4": 102
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"0\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\") == \"1\"\n",
        "num_ids_2": 72,
        "num_ids_4": 108
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open(0)) == open(1).read()\n\n\"\"\"\n\n\nfrom math import ceil",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\") == \"10\\n15\\n1999999999\\n113\\n1000000001\\n1\"\n\n\"\"\"\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 7\") == \"10\"\nassert solution(\"4 12\") == \"15\"\nassert solution(\"2 1000000000\") == \"1999999999\"\nassert solution(\"7 97\") == \"113\"\nassert solution(\"1000000000 1000000000\") == \"1000000001\"\n",
        "num_ids_2": 22,
        "num_ids_4": 47
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 12\") == \"12\"\nassert solution(\"3 7\") == \"10\"\nassert solution(\"2 1000000000\") == \"1\"\nassert solution(\"7 97\") == \"113\"\nassert solution(\"1000000000 1000000000\") == \"1999999999\"\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''6\n3 7\n4 12\n2 1000000000\n7 97\n1000000000 1000000000\n2 1\n''') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\n\"\"\"\n\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n3 7\") == '10'\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7\") == \"10\"\nassert solution(\"3 7\") == \"10\"\nassert solution(\"2 1000000000\") == \"1999999999\"\nassert solution(\"7 97\") == \"113\"\n\"\"\"\n\nimport sys\nimport math\n",
        "num_ids_2": 22,
        "num_ids_4": 47
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\\n\") == '10\\n15\\n1999999999\\n113\\n1000000001\\n1\\n'",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\") == \"10\\n15\\n1999999999\\n113\\n1000000001\\n1\"\n\"\"\"",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 7') == '10'\nassert solution('4 12') == '15'\nassert solution('2 1000000000') == '1999999999'\nassert solution('7 97') == '113'\nassert solution('1000000000 1000000000') == '1000000001'\n",
        "num_ids_2": 22,
        "num_ids_4": 47
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n1 2 3 2 1 3\") == \"3\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\"\nassert solution(\"5 2\\n1 2 3 2 1\") == \"2\"\nassert solution(\"4 4\\n1 2 3 4\") == \"1 2 3\"\nassert solution(\"3 2\\n1 2\\n1 2\\n2 1\") == \"1 2\"\n",
        "num_ids_2": 42,
        "num_ids_4": 79
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\nassert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n\n\"\"\"\n\nfrom typing import List, Set\n",
        "num_ids_2": 52,
        "num_ids_4": 80
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"2\"\n\"\"\"\nimport unittest\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2\") == '2 1'\nassert solution(\"7 2\") == '2 1'\nassert solution(\"10 4\") == '3 1 2'\n",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(stdin))\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\n\"\"\"\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\") == \"2\"\nassert solution(\"10 4\") == \"3\"\n\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2') == '2'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3') == '3'\n\"\"\"",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\nassert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\") == \"2\"\nassert solution(\"10 4\") == \"3\"\nassert solution(\"3 1 2\") == \"1 3 2\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 36
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n\n-----\n\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100\n\n2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 884, 886, 888, 890, 892, 894, 896, 898, 900, 902, 904, 906, 908, 910, 912, 914, 916, 918, 920, 922, 924, 926, 928, 930, 932",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\"\"\") == \"263\"\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n\"\"\"\n",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '6'\nassert solution('3 2 1') == '6'\nassert solution('5 1 2') == '8'\nassert solution('2 2 2') == '8'\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input_example) == output_example\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\nprint(solution(stdin))\n",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n\") == '263'\n",
        "num_ids_2": 75,
        "num_ids_4": 75
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100\n\"\"\") == \"263\"\n\"\"\"\n",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100\n\"\"\") == \"263\"\nassert solution(\n\"\"\"\n1\n0\n0\n0\n1\n0\n0\n0\n1\n0\n0\n0\n2\n0\n0\n0\n2\n0\n0\n0\n2\n0\n0\n0\n2\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100') == '263'\n\n-------Test2-------\n\nInput\n5\n1\n1\n1\n1\n1\n\nOutput\n2\n\n-------Test3-------\n\nInput\n2\n1\n1\n2\n1\n2\n\nOutput\n1\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('codeforces') == 'codeforce'\nassert solution('dfcbbcfeeedbaea') == 'dfceebeeeefbaea'",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abacaba') == '3'\nassert solution('dfcbbcfeeedbaea') == '5'\nassert solution('l' * 32) == '1024'\nassert solution('b' * 32) == '1024'\nassert solution('a' * 32) == '1024'\n",
        "num_ids_2": 29,
        "num_ids_4": 55
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('codeforces') == 'codeforces'\nassert solution('abacaba') == 'acbab'\nassert solution('dfcbbcfeeedbaea') == 'dfcbbcfeeedbaea'\nassert solution('codeforces') == 'codeforces'\nassert solution('abacaba') == 'acbab'\n\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 30,
        "num_ids_4": 70
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"codeforces\"\nassert solution(\"codeforces\", 5) == \"codeforces\"\n\"\"\"\n\nimport math",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"5\"\n\"\"\"\n\nimport re",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('codeforces') == 'code', 'wrong result'\nassert solution('abacaba') == 'abacab', 'wrong result'\n\n\"\"\"\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abacaba') == '3'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"6\"\nassert solution(\"aaaaaaaaaaaaaaaa\") == \"16\"\nassert solution(\"a\") == \"1\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"26\"\n",
        "num_ids_2": 29,
        "num_ids_4": 52
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"2\"\n\nstdin = \"\"\"\nabacaba\n5\n2 1 4\n1 4 b\n1 5 b\n2 4 6\n2 1 7\n\"\"\"\n\nassert solution(stdin) == \"3\"\n",
        "num_ids_2": 29,
        "num_ids_4": 40
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''abacaba\n5\n2 1 4\n1 4 b\n1 5 b\n2 4 6\n2 1 7''') == '''3\n1\n2\n5'''\n\nassert solution('''dfcbbcfeeedbaea\n15\n1 6 e\n1 4 b\n2 6 14\n1 7 b\n1 12 c\n2 6 8\n2 1 6\n1 7 c\n1 2 f\n1 10 a\n2 7 9\n1 10 a\n1 14 b\n1 1 f\n2 1 11''') == '''5\n2\n5\n2\n6'''\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563''') == '''154873396\n336592714\n729645835\n863725145\n979314628\n412958357\n631457992\n998236471\n247789563'''\n\n\n-----Solution-----",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"154873296\") == \"154873396\"\nassert solution(\"386592714\") == \"336592714\"\nassert solution(\"729641835\") == \"729645835\"\nassert solution(\"863725149\") == \"863725145\"\nassert solution(\"975314628\") == \"979314628\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\n''') == '''154873396\n336592714\n729645835\n863725145\n979314628\n412958357\n631457992\n998236471\n247789563\n'''\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"154873296\") == \"154873396\"\nassert solution(\"386592714\") == \"336592714\"\nassert solution(\"729641835\") == \"729645835\"\nassert solution(\"863725149\") == \"863725145\"\nassert solution(\"975314628\") == \"979314628\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"154873296386592714729641835863725149975314628\\n412968357631457982598236471247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\nassert solution(\"154873296386592714\\n729641835863725149\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\nprint(\"Success\")\n\n-----Problem-----\n\nA student is preparing a presentation about anti-sudoku. She was instructed to replace any number in the field with any number in range [1; 9], so that the field is not a sudoku. The anti-sudoku is a 9 \u00d7 9 grid with lines dividing the blocks and blocks dividing the lines.\n\nYour task is to write a program to help the student check his answers.\n\nTo avoid cheating, the student was tested on the field in which numbers in range [1; 9] were replaced with the numbers in range [1; 9].\n\nIt is guaranteed that the solution exists and is unique.\n\n\n-----Test data-----\n\nInput\n\n1\n154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\n\nOutput\n\n154873396\n336592714\n729645835\n863725145\n979314628\n412958357\n631457992\n998236471\n247789563\n\nInput\n\n1\n154873296386592714\n729641835863725149\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\n\nOutput\n\n154873396386592714\n729641835863725145\n863725145\n975314628\n412968357\n631457982\n598236471\n247189563\n\nInput\n\n1\n1548732963865932714\n729641835863725149\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\n\nOutput\n\n1548733963865932714\n729641835863725145\n863725145\n975314628\n412968357\n631457982\n598236471\n247189563\n\n-----Solution-----",
        "num_ids_2": 214,
        "num_ids_4": 214
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"154873296\\n\"\n+ \"386592714\\n\"\n+ \"729641835\\n\"\n+ \"863725149\\n\"\n+ \"975314628\\n\"\n+ \"412968357\\n\"\n+ \"631457982\\n\"\n+ \"598236471\\n\"\n+ \"247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\nprint(\"Success\")\n\nInput\n2\n386592714\n729641835\n97314628\n412968357\n631457982\n598236471\n247189563\n\nOutput\n386592714\n729641835\n729641835\n97314628\n412968357\n631457982\n598236471\n247189563\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\\n\"\nassert solution(\"91256319\\n112345672\\n123467891\\n134679245\\n123678954\\n156789123\\n125793456\\n917452819\\n145813887\\n\") == \"91256319\\n11234567\\n123467891\\n134679245\\n123678954\\n156789123\\n125793456\\n917452819\\n145813887\\n\"\nassert solution(\"3524574\\n5443575\\n456789\\n3456789\\n45678\\n234567\\n3456789\\n45678\\n3456789\\n456789\\n3456789\\n3456789\\n\") == \"3524574\\n5443575\\n456789\\n3456789\\n45678\\n234567\\n3456789\\n45678\\n3456789\\n456789\\n3456789\\n3456789\\n\"\nassert solution(\"42345678\\n43659378\\n7268938\\n9876543\\n543211234\\n31234567\\n56789456\\n45678934\\n7896321\\n3987654\\n\") == \"42345678\\n43659378\\n7268938\\n9876543\\n543211234\\n31234567\\n56789456\\n45678934\\n7896321\\n3987654\\n\"\nassert solution(\"39258\\n25827\\n90819\\n86947\\n487598\\n6969\\n859465\\n95843\\n435908\\n95719\\n\") == \"39258\\n25827\\n90819\\n86947\\n487598\\n6969\\n859465\\n95843\\n435908\\n95719\\n\"\n",
        "num_ids_2": 235,
        "num_ids_4": 479
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"154873296\") == \"154873396\"\nassert solution(\"386592714\") == \"336592714\"\nassert solution(\"729641835\") == \"729645835\"\nassert solution(\"863725149\") == \"863725145\"\nassert solution(\"975314628\") == \"979314628\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563') == '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\nassert solution('8\\n6\\n2\\n3\\n1\\n7\\n5\\n4') == '8\\n6\\n2\\n3\\n1\\n7\\n5\\n4'\nassert solution('8\\n6\\n2\\n3\\n1\\n7\\n5\\n4\\n3') == '8\\n6\\n2\\n3\\n1\\n7\\n5\\n4'\nassert solution('8\\n6\\n2\\n3\\n1\\n7\\n5\\n4\\n3\\n5') == '8\\n6\\n2\\n3\\n1\\n7\\n5\\n4\\n3'\nassert solution('8\\n6\\n2\\n3\\n1\\n7\\n5\\n4\\n3\\n5\\n5') == '8\\n6\\n2\\n3\\n1\\n7\\n5\\n4\\n3'\n",
        "num_ids_2": 165,
        "num_ids_4": 281
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 6\\\\n1 1 1 3 5 3 5 7\\\\n3 1\\\\n1 5\\\\n3 4\\\\n7 3\\\\n1 8\\\\n1 9\\\\n\") == \"3 6 8 9 -1 -1\"\nassert solution(\"9 6\\\\n1 1 1 3 5 3 5 7\\\\n3 1\\\\n1 5\\\\n3 4\\\\n7 3\\\\n1 8\\\\n1 9\\\\n\") == \"3 6 8 9 4\"\n\"\"\"\n\nimport sys\nfrom collections import deque, defaultdict\nfrom itertools import islice\n\nn, q = map(int, sys.stdin.readline().split())\ntree = defaultdict(list)\nfor i in range(n - 1):\n    a, b = map(int, sys.stdin.readline().split())\n    tree[a].append(b)\n    tree[b].append(a)\n",
        "num_ids_2": 105,
        "num_ids_4": 105
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == \"3\\n6\\n8\\n-1\\n9\\n4\"\nprint(\"PASSED\")\n",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2\\n3 4\") == \"2\"\n\"\"\"\n\nn, q = [int(i) for i in stdin.split()]\nsuperiors = [int(i) - 1 for i in stdin.split()[1::2]]\n\nd = dict()\n\nfor i in range(n):\n    if i not in d:\n        d[i] = []\n    if i in superiors:\n        d[superiors[superiors.index(i)]].append(i)\n    else:\n        d[i] = [i]",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2\\n3 2\\n3 1\\n3 3\\n3 1\\n3 1\\n3 1\\n3 3\\n3 3\\n3 3\\n3 2\\n3 2\\n3 1\\n3 1\\n3 1\\n3 3\\n3 1\\n3 1\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 1\\n3 1\\n3 1\\n3 2\\n3 2\\n3 1\\n3 2\\n3 1\\n3 2\\n3 2\\n3 2\\n3 2\\n3 1\\n3 1\\n3 1\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 1\\n3 2\\n3 1\\n3 2\\n3 1\\n3 2\\n3 1\\n3 2\\n3 2\\n3 1\\n3 1\\n3 1\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 1\\n3 2\\n3 1\\n3 1\\n3 2\\n3 2\\n3 1\\n3 2\\n3 1\\n3 1\\n3 1\\n3 2\\n3 2\\n3 1\\n3 2\\n3 1\\n3 2\\n3 1\\n3 1\\n3 2\\n3 2\\n3 1\\n3 1\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 1\\n3 1\\n3 1\\n3 1\\n3 2\\n3 2\\n3 2\\n3 1\\n3 2\\n3 2\\n3 1\\n3 2\\n3 1\\n3 1\\n3 1\\n3 2\\n3 2\\n3 1\\n3 1\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 1\\n3 1\\n3 1\\n3 2\\n3 2\\n3 1\\n3 2\\n3 1\\n3 1\\n3 1\\n3 1\\n3 2\\n3 1\\n3 2\\n3 1\\n3 1\\n3 1\\n3 1\\n3 2\\n3 1\\n3 2\\n3 2\\n3 1\\n3 1\\n3 2\\n3 2\\n3 1\\n3 1\\n3 1\\n3 1\\n3 1\\n3 1\\n3 2\\n3 1\\n3 2\\n3 2\\n3 2\\n3 1\\n3 2\\n3 1\\n3 1\\n3 2\\n3 2\\n3 1\\n3 1\\n3 1\\n3 1\\n3 1\\n3 2\\n3 1\\n3 1\\n3 1\\n3 2\\n3 2\\n3 1\\n3 1\\n3 1\\n3 1\\n3 1\\n3 1\\n3 1\\n3 2\\n3 2\\n3 2\\n3 2\\n3 1\\n3 2\\n3 2\\n3 2\\n3 2\\n3 1\\n3 2\\n3 1\\n3 1\\n3 1\\n3 2\\n3 2\\n3 1\\n3 2\\n3 1\\n3 1\\n3 2\\n3 1\\n3 2\\n3 1\\n3 2\\n3 1\\n3 1\\n3 1\\n3 1\\n3 2\\n3 1\\n3 2\\n3 2\\n3 1\\n3 1\\n3 2\\n3 2\\n3 1\\n3 1",
        "num_ids_2": 862,
        "num_ids_4": 862
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == \"3\\n6\\n8\\n-1\\n9\\n4\"\nassert solution(\"9 7\\n1 1 1 2 2 2 3 3\\n3 1\\n2 4\\n3 4\\n6 2\\n6 3\\n6 5\\n6 7\") == \"3\\n7\\n8\\n-1\\n9\\n5\"\nassert solution(\"9 7\\n1 1 1 2 2 2 3 3\\n3 1\\n2 4\\n3 4\\n6 2\\n6 3\\n6 5\\n6 7\") == \"3\\n7\\n8\\n-1\\n9\\n5\"\nassert solution(\"9 8\\n1 1 1 2 2 2 3 3\\n3 1\\n2 4\\n3 4\\n6 2\\n6 3\\n6 5\\n6 7\") == \"3\\n7\\n8\\n-1\\n9\\n5\"\nassert solution(\"9 8\\n1 1 1 2 2 2 3 3\\n3 1\\n2 4\\n3 4\\n6 2\\n6 3\\n6 5\\n6 7\\n7 9\") == \"3\\n7\\n8\\n-1\\n9\\n5\"\n",
        "num_ids_2": 126,
        "num_ids_4": 256
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\\n') == '3\\n6\\n8\\n-1\\n9\\n4\\n'\n",
        "num_ids_2": 65,
        "num_ids_4": 65
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\\n') == '3\\n6\\n8\\n-1\\n9\\n4\\n'\nassert solution('1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\\n') == '3\\n6\\n8\\n-1\\n9\\n4\\n'\nassert solution('5 5 7\\n2 4\\n2 3\\n2 1\\n3 6\\n5 2\\n1 2\\n') == '2\\n2\\n2\\n2\\n2\\n3\\n'\nassert solution('1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\\n') == '3\\n6\\n8\\n-1\\n9\\n4\\n'\nassert solution('1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\\n') == '3\\n6\\n8\\n-1\\n9\\n4\\n'\n",
        "num_ids_2": 122,
        "num_ids_4": 238
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\\n\") == \"3\\n6\\n8\\n-1\\n9\\n4\"",
        "num_ids_2": 63,
        "num_ids_4": 63
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n3 1\\n\") == \"4\"\n\"\"\"\n\nfrom collections import deque\nfrom typing import List\nfrom collections import defaultdict\n\nclass Node:\n    def __init__(self, id: int, parent: int = None):\n        self.id = id\n        self.parent = parent\n    \n    def __eq__(self, other):\n        return self.id == other.id and self.parent == other.parent\n\nclass Graph:\n    def __init__(self, n: int):\n        self.n = n\n        self.children = [None] * (n + 1)\n        self.children[0] = [Node(1)]\n        for i in range(1, n + 1):\n            self.children[i] = []\n    \n    def is_valid(self, p: int, c: int) -> bool:\n        return p <= self.n and c <= self.n\n    \n    def add_edge(self, p: int, c: int):\n        self.children[p].append(Node(c))\n        self.children[c].append(Node(p))\n    \n    def remove_edge(self, p: int, c: int):\n        self.children[p].remove(Node(c))\n        self.children[c].remove(Node(p))\n    \n    def get_children(self, p: int) -> List[Node]:\n        return self.children[p]\n    \n    def print_graph(self):\n        for i in range(1, self.n + 1):\n            for n in self.children[i]:\n                print(f\"{i} -> {n.id}\")",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == \"3\\n6\\n8\\n-1\\n9\\n4\"\n",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input) == expected_output",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"\n\nassert solution(\"3 2 1 1000000000\\n10 20 15 14\\n101 101 101 3\") == \"NO\"\n",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 2 1\\n1 2 3 4\\n\") == \"NO\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 2 8\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"YES\"\nassert solution(\"3 2 1 100000000\") == \"NO\"\nassert solution(\"10 20 15 14\") == \"YES\"\nassert solution(\"101 101 101 3\") == \"NO\"\n\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2 8\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"YES\"\nassert solution(\"3 2 1 100000000\") == \"NO\"\nassert solution(\"10 20 15 14\") == \"YES\"\nassert solution(\"101 101 101 3\") == \"YES\"\n\"\"\"\nfrom typing import List",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n5 3 2 8''') == 'YES'\nassert solution('''100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3''') == 'YES'\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input))\n\n\"\"\"\nfrom typing import List",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 2 10') == 'YES'\nassert solution('4 3 2 1') == 'NO'\nassert solution('4 3 1 10') == 'NO'\nassert solution('10 9 7 1') == 'YES'\nassert solution('8 9 6 2') == 'YES'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 2 10') == 'NO'\nassert solution('5 3 2 8') == 'YES'\nassert solution('100 101 102 105') == 'YES'\nassert solution('3 2 1 100000000') == 'NO'\nassert solution('10 20 15 14') == 'YES'\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\\nYES\\nNO\\nNO\\nYES\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"",
        "num_ids_2": 42,
        "num_ids_4": 66
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\nassert solution('4 4\\n1 2 3 4') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5') == '9 8 12 6 8'\nassert solution('2 10\\n2 1 5 3 5') == '9 8 12 6 8'\n\n\n\"\"\"\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"3 4 6 5\"\nassert solution(\"5 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\") == \"3 3\"\n\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 41
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"",
        "num_ids_2": 42,
        "num_ids_4": 66
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\n",
        "num_ids_2": 42,
        "num_ids_4": 66
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\nassert solution(\"2 10\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\n",
        "num_ids_2": 42,
        "num_ids_4": 88
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == '3 4 6 5', \"Wrong solution for example #1\"\nassert solution(\"5 5\") == '9 8 12 6 8', \"Wrong solution for example #2\"\n\n\"\"\"\n",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == \"3 4 6 5\"\nassert solution(\"5 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\") == \"3 3\"\n",
        "num_ids_2": 29,
        "num_ids_4": 41
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n1 2 3 4') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5') == '9 8 12 6 8'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\n\n\n\n\n\"\"\"\n\n\n\"\"\"\nYou are given an array of strings, \nyour task is to find out if the array contains a permutation of a palindrome.\n\nA palindrome is a word or a phrase that is the same forwards and backwards. A permutation \nis a rearrangement of letters. The palindrome does not need to be limited to just dictionary words.\n\nInput\n\nThe first input line contains an integer \ndenoting the number of strings in the array.\n\nThe next line contains the number of characters in each string. \nThe last line contains the array of strings.\n\nOutput\n\nPrint YES if it contains a permutation of a palindrome, otherwise print NO.\n\nConstraints\n\nEach string contains only uppercase and lowercase Latin letters and spaces.\n1\u2264n\u2264106\nlength of each string is in the range [1, 100]\n\nExample input\n\n4\n5\na b c d\na b c a b\n\nExample output\n\nNO\nYES\nYES\n\n\"\"\"\n\n\n\n\"\"\"\n4\n6\na b c d\na b c a b\n\n\"\"\"\n\n\"\"\"\nYou are given an array of strings, your task is to find out if the array contains a permutation of a palindrome.\n\nA palindrome is a word or a phrase that is the same forwards and backwards. A permutation \nis a rearrangement of letters. The palindrome does not need to be limited to just dictionary words.\n\nInput\n\nThe first input line contains an integer \ndenoting the number of strings in the array.\n\nThe next line contains the number of characters in each string. \nThe last line contains the array of strings.\n\nOutput\n\nPrint YES if it contains a permutation of a palindrome, otherwise print NO.\n\nConstraints\n\nEach string contains only uppercase and lowercase Latin letters and spaces.\n1\u2264n\u2264106\nlength of each string is in the range [1, 100]\n\nExample input\n\n4\n6\na b c d\na b c a b\n\nExample output\n\nNO\nYES\nYES\n\n\"\"\"\n\n\n\"\"\"\nYou are given an array of strings, your task is to find out if the array contains a permutation of a palindrome.\n\nA palindrome is a word or a phrase that is the same forwards and backwards. A permutation \nis a rearrangement of letters. The palindrome does not need to be limited to just dictionary words.\n\nInput\n\nThe first input line contains an integer \ndenoting the number of strings in the array.\n\nThe next line contains the number of characters in each string. \nThe last line contains the array of strings.\n\nOutput\n\nPrint YES if it contains a permutation of a palindrome, otherwise print NO.\n\nConstraints\n\nEach string contains only uppercase and lowercase Latin letters and spaces.\n1\u2264n\u2264106\nlength of each string is in the range [1, 100]\n\nExample input\n\n4\n6\na b c d\na b c a b\n\nExample output\n\nNO\nYES\nYES\n\n\"\"\"\n\n\n\"\"\"\nYou are given an array of strings, your task is to find out if the array contains a permutation of a palindrome.\n\nA palindrome is a word or a phrase that is the same forwards and backwards. A permutation \nis a rearrangement of letters. The palindrome does not need to be limited",
        "num_ids_2": 42,
        "num_ids_4": 66
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n1 2\\n1 3\\n2 3\") == \"YES\\nYES\\nYES\"\nassert solution(\"2 2\\n1 2\\n2 1\") == \"NO\\nNO\"\n\nsolution([int(i) for i in input().strip().split(' ')])\n\n\"\"\"",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"YES\"\nassert solution(\"5 1\") == \"YES\"\nassert solution(\"6 1\") == \"YES\"\nassert solution(\"6 2\") == \"NO\"\n\nassert solution(\"7 3\") == \"YES\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n\"\"\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 7\n1 2\n1 3\n1 4\n2 5\n2 6\n1 2\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n\"\"\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n\"\"\"",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nassert solution('10 7\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nassert solution('10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nassert solution('10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nassert solution('10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\n",
        "num_ids_2": 200,
        "num_ids_4": 400
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nassert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == 'NO\\nNO\\nNO\\nNO\\nYES\\nYES'\nassert solution(\"3 3\\n1 2\\n2 1\\n3 1\") == 'NO'\nassert solution(\"2 6\\n1 2\\n2 3\") == 'NO'\nassert solution(\"4 2\\n1 2\\n2 3\\n3 4\") == 'NO'\n",
        "num_ids_2": 196,
        "num_ids_4": 238
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 1 5\\n2 1 6\") == \"NO\"\n\"\"\"\n\nfrom collections import defaultdict, deque\nimport sys\n\nclass Graph:\n    def __init__(self, n):\n        self.n = n\n        self.adj = defaultdict(set)\n\n    def add_edge(self, u, v):\n        self.adj[u].add(v)\n        self.adj[v].add(u)\n\n    def get_adj(self, u):\n        return self.adj[u]\n\n    def bfs(self, source, target):\n        queue = deque([(source, 0)])\n        visited = set([source])\n        while queue:\n            vertex, dist = queue.popleft()\n            if vertex == target:\n                return dist\n            for v in self.get_adj(vertex):\n                if v not in visited:\n                    queue.append((v, dist + 1))\n                    visited.add(v)\n\n    def has_path(self, source, target):\n        return self.bfs(source, target)!= None\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\nprint(solution(stdin))\n\n\n-----Problem-----\n\"BlackJack\"\n\nYou've started the journey to the North Pole, where you are about to play a blackjack game. You will be playing against an opponent.\n\nThe rules of the game are as follows:\n\nEach player is dealt two cards.\nThe value of a card is equal to its number on the card (for example, the number on the first card in your hand is 1).\nThe value of a card is equal to its number on the card plus 10 if it is an ace (for example, the number on the second card in your hand is 11).\nThe value of the two cards is the sum of the values of the cards.\nThe goal of the game is to get as close to 21 points as possible.\nThe player who gets closer to 21 points first wins the game.\nEach player begins the game with two cards.\n\n\"blackjack\"\n\nYou don't want to be late for the game so you have started working on your solution today. Given a particular number of cards, determine whether it is possible to get a score of 21 points or less. If it is possible, determine the number of cards necessary to get the score.\n\nInput\nThe first line of the input contains a single integer $t$ denoting the number of test cases. The description of $t$ test cases follows.\n\nThe first line of each test case contains a single integer $n$ denoting the number of cards.\n\nThe second line of each test case contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nOutput\nFor each test case, print:\n\n\"YES\" if it is possible to get a score of 21 points or less.\n\"NO\" if it is impossible to get a score of 21 points or less.\nIn each test case, the number of cards necessary to get a score of 21 points or less is printed on a new line.\n\nConstraints\n1\u2264t\u226410\n2\u2264n\u22641,000\n0\u2264a_i\u226410^9\n\nExample\nInput\n\nOutput\n\n4\n1\n1\n2\n4\n1\n1\n2\n2\n3\n3\n4\n3\n2\n4\n2\n\nNO\nYES\nNO\nNO\n1\n\n-----Example Solution-----\nimport math",
        "num_ids_2": 67,
        "num_ids_4": 67
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\n\n\"\"\"\n\nfrom typing import List, Dict\n",
        "num_ids_2": 67,
        "num_ids_4": 67
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == 'YES\\n1 3\\n3 5\\n5 4'\nassert solution(\"4\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == 'NO'\nassert solution(\"4\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == 'NO'\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nlines = sys.stdin.readlines()\n\nfor i in range(int(lines[0])):\n    n = int(lines[i * 2 + 1])\n    a = [int(i) for i in lines[i * 2 + 2].split()]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i]!= a[j]:\n                count += 1\n    print('YES' if count == n - 1 else 'NO')\n    for i in range(n - 1):\n        print(i + 1, i + 2)",
        "num_ids_2": 98,
        "num_ids_4": 152
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n') == 'YES\\n1 3\\n3 5\\n5 4'\n\"\"\"\nimport sys\n\ntest_cases = int(sys.stdin.readline().strip())\nfor _ in range(test_cases):\n    n = int(sys.stdin.readline().strip())\n    groups = sorted([int(x) for x in sys.stdin.readline().strip().split()])\n    edges = [int(x) for x in sys.stdin.readline().strip().split()]\n    roads = []\n    for e in edges:\n        if e!= groups[0] and e!= groups[-1]:\n            roads.append(e)\n    if len(roads) == (n - 1):\n        print('YES')\n        for road in roads:\n            print(road, road)\n    else:\n        print('NO')\n",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\\n1 2 3\") == 'NO'\nassert solution(\"3\\n1 2 3\\n1 2 3\") == 'YES'\nassert solution(\"2\\n1 1 1\\n2 2 2\") == 'YES'\nassert solution(\"2\\n1 1 1\\n2 2 2\") == 'NO'\nassert solution(\"1\\n1 1 1\\n1 1 1\") == 'NO'\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\"\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"NO\\nYES\\n1 2\\n1 3\\n1 4\"\n\"\"\"\n\nimport sys\nimport random",
        "num_ids_2": 119,
        "num_ids_4": 119
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\\nYES\\n1 2\\n1 3\\n1 4\"\nprint(solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\"))\n\n-----Explanation-----\n4\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\nThe first two districts belong to the same gang, so the road 1 3 can not be built.\n\nThe third district belongs to the same gang, so the road 1 3 can not be built.\n\nThe fourth district doesn't belong to the same gang, so the road 1 3 can be built.\n\n4\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\nThe first two districts belong to the same gang, so the road 1 3 can not be built.\n\nThe third district belongs to the same gang, so the road 1 3 can not be built.\n\nThe fourth district doesn't belong to the same gang, so the road 1 3 can be built.\n\"\"\"\n",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\"\nassert solution(\"4\\n1 2 3 4\\n\") == \"YES\\n1 2\\n1 3\\n1 4\"\nassert solution(\"1\\n4\\n1 1000 101 1000\\n\") == \"NO\"\nassert solution(\"1\\n4\\n1000 101 1000\\n\") == \"NO\"\nassert solution(\"1\\n1\\n1000 101 1000\\n\") == \"NO\"\n",
        "num_ids_2": 91,
        "num_ids_4": 132
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"4\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\"\"\") == \"\"\"YES\n1 3\n3 5\n5 4\n1 2\nNO\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/515bfd9fda3f70189200006f/train/python",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_case_1) == test_case_1_result\n\"\"\"\n\n\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11101110') == '0111111'\nassert solution('11101010') == '01111110'\nassert solution('11101010') == '01111110'\n\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11101110\") == \"11111110\"\nassert solution(\"11101111\") == \"11111111\"\nassert solution(\"11111010\") == \"11101110\"\nassert solution(\"11111011\") == \"11101111\"\nassert solution(\"11111110\") == \"11101110\"\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11101010') == '011110'\nassert solution('1111100') == '0011111'\nassert solution('1111110') == '0111111'\nassert solution('11101110') == '01111110'\nassert solution('111011010') == '0111111110'\n",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1111100) == '00111110'\nassert solution(11011010) == '01011110'\nassert solution(1111100) == '0011111'\n\nprint(solution(11011010))\nprint(solution(1111100))\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 42
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11011010\") == \"011110\"\nassert solution(\"1111100\") == \"1111110\"\nassert solution(\"1111100\") == \"1111110\"\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 27,
        "num_ids_4": 39
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11011010') == '01011110'",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11011010') == '01111010'\nassert solution('1111100') == '1111100'\nassert solution('1111110') == '11101110'\nassert solution('1111111') == '11101111'\nassert solution('11111111') == '11111111'\n",
        "num_ids_2": 28,
        "num_ids_4": 54
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(11011010) == '01111010'\nassert solution(7,9) == '11101'\n\"\"\"\nimport sys\n\ninput_n_q = input().split()",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11011010\") == \"011110\"\nassert solution(\"1111100\") == \"1111100\"\nassert solution(\"1101110\") == \"0111110\"\n",
        "num_ids_2": 27,
        "num_ids_4": 41
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 2 4\"",
        "num_ids_2": 80,
        "num_ids_4": 80
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a\\nb') == 'a\\nb'\n\"\"\"\n\n\nimport sys\nimport heapq\n\nclass Node:\n    def __init__(self, value, weight):\n        self.value = value\n        self.weight = weight\n        self.parent = None\n        self.left = None\n        self.right = None\n\n    def __lt__(self, other):\n        return self.weight < other.weight\n\n    def __repr__(self):\n        return f'Node({self.value}, {self.weight})'\n",
        "num_ids_2": 18,
        "num_ids_4": 32
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(print(solution(str(input()))))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9''') == '3\\n1 4 7'\n\nassert solution('''5 1\n29 30\n30 30\n29 29\n28 30\n30 30''') == '3\\n1 2 4'\n\nassert solution('''6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3''') == '4\\n1 3 5 6'\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9''') == '3\nassert solution('''5 1\n29 30\n30 30\n29 29\n28 30\n30 30''') == '3\nassert solution('''6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3''') == '4\nassert solution('''9 1\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3''') == '1 2 3'\n\nprint(solution(stdin))\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\\n1 3\"\nassert solution(\"6 1\\n1 1\\n2 2\\n3 3\\n2 2\\n3 3\") == \"1 2 4\\n2 3 5\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n') == '3\\n1 4 7\\n'\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n') == '3\\n1 2 4\\n'\nassert solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n') == '4\\n1 3 5 6\\n'\n\nprint(solution(stdin))\n",
        "num_ids_2": 88,
        "num_ids_4": 133
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == '3\\n1 4 7'\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == '3\\n1 2 4'\n\"\"\"",
        "num_ids_2": 80,
        "num_ids_4": 80
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n1 4 7\\n\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == \"3\\n1 2 4\\n\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 3 5 6\\n\"\n\n-----Notes-----\n\nIn the first example the three segments can be removed in the following way:\n\n1) [9, 11], [7, 8], [9, 11]\n2) [9, 11], [7, 9], [7, 8]\n3) [9, 11], [7, 8], [9, 11]\n\nIn the second example the three segments can be removed in the following way:\n\n1) [9, 11], [7, 9], [7, 8]\n2) [9, 11], [7, 8], [9, 11]\n3) [9, 11], [7, 9], [7, 8]\n\"\"\"\n\nn, k = [int(x) for x in input().split()]\npoints = [int(x) for x in input().split()]\npoints.sort()\ncounts = 0\n\nwhile counts < k:\n    current = points[0]\n    count = 1\n    for i in range(len(points)-1):\n        if points[i] < points[i+1]:\n            count += 1\n            if count == k:\n                break\n    points = points[count:]\n    counts += count\n    \nprint(counts)\nprint(\" \".join(map(str, points)))",
        "num_ids_2": 88,
        "num_ids_4": 133
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7 \"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 2 4 \"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6 \"\n\n\n\"\"\"\n\nfrom typing import List\n\nfrom sys import stdin\n",
        "num_ids_2": 80,
        "num_ids_4": 121
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 3 2\\n-100 2 3') == '3'\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 2\\n-3 0\") == \"3\"\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == \"19\"\nassert solution(\"7\\n3 1 4 1 5 9 2\\n1 -1 -4 2 -3 6 5\") == \"20\"\n\n\"\"\"",
        "num_ids_2": 44,
        "num_ids_4": 75
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3 2\\n-100 2 3') == '3'\nassert solution('1 2 3 4 5\\n2 2 2 3 4') == '19'\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\\n\") == \"3\"\n\"\"\"\n\nimport collections\nimport typing\nimport unittest\n\nfrom icontract import require, ensure\n\n\nclass Point(typing.NamedTuple):\n    x: int\n    y: int\n    speed: int\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == \"3\"\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == \"19\"\nassert solution(\"5\\n2 1 4 3 5\\n-2 2 2 3 4\") == \"0\"\nassert solution(\"3\\n2 -1 4\\n0 1 1\") == \"0\"\nassert solution(\"3\\n1 2 3\\n-1 1 1\") == \"0\"\n\"\"\"\n\nn = int(stdin.readline().strip())\n\nx = list(map(int, stdin.readline().strip().split()))\n\nv = list(map(int, stdin.readline().strip().split()))\n\ncost = 0\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        x_i, x_j = x[i], x[j]\n        v_i, v_j = v[i], v[j]\n        if x_j < x_i:\n            x_i, x_j = x_j, x_i\n            v_i, v_j = v_j, v_i\n\n        if x_j - x_i > 0:\n            cost += (x_j - x_i) * min(v_i, v_j)\n\nprint(cost)\n",
        "num_ids_2": 45,
        "num_ids_4": 91
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n3 2 1 6 2 1\") == 11\nassert solution(\"6\\n4 2 1 6 2 1\") == 20\nassert solution(\"7\\n4 2 1 6 2 1\") == 23\nassert solution(\"8\\n4 2 1 6 2 1\") == 26\nassert solution(\"8\\n5 2 1 6 2 1\") == 30",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == \"3\"\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == \"19\"\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == 3\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 3 2\\n-100 2 3') == 3\nassert solution('5\\n2 1 4 3 5\\n2 2 2 3 4') == 19\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 3 2\\n-100 2 3\\n') == 3\nassert solution('5\\n2 1 4 3 5\\n2 2 2 3 4\\n') == 19\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n7 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1\n''') == '21 7 15 21 3'\n\nassert solution('''\n1 2\n1 2\n''') == '0 0'\n\nassert solution('''\n3 3\n1 2 1\n2 3 2\n1 3 2\n''') == '1 3 3'\n'''\n\nimport sys\n\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.children = []\n        self.parents = []\n        self.visited = False\n\n    def __str__(self):\n        return str(self.value)\n\n    def add_child(self, child):\n        self.children.append(child)\n\n    def add_parent(self, parent):\n        self.parents.append(parent)\n\n    def get_children(self):\n        return self.children\n\n    def get_parents(self):\n        return self.parents\n\n    def get_value(self):\n        return self.value\n\n    def get_children_nodes(self):\n        children = []\n        for child in self.children:\n            children.append(child)\n        return children\n\n    def get_parents_nodes(self):\n        parents = []\n        for parent in self.parents:\n            parents.append(parent)\n        return parents\n\n    def set_visited(self, visited):\n        self.visited = visited\n",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\\n\") == \"21 7 15 21 3\"\n\"\"\"\n\n\nimport sys\nimport queue\nfrom collections import defaultdict\nfrom itertools import combinations\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''7 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1''') == '21 7 15 21 3'\n\nprint('Success')",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 2 1\\n2 3 2\\n1 3 2\\n3 4 3\\n1 2 2\\n1 3 1\\n1 4 3\\n2 3 2\\n2 4 3\\n3 4 1\\n3 1 2\\n2 1 3\\n2 2 2\\n1 3 2\\n2 1 2\\n2 3 3\\n1 4 3\\n1 1 2\\n2 4 3\\n3 2 2\\n2 1 3\\n1 4 2\\n1 4 2\\n1 3 2\\n2 3 2\\n3 1 3\\n3 3 3\\n3 2 1\\n2 2 3\\n3 1 1\\n1 4 2\\n1 1 3\\n3 2 3\\n1 1 2\\n2 3 1\\n1 3 1\\n1 3 2\\n1 1 3\\n2 3 2\\n3 1 2\\n3 1 3\\n3 2 3\\n2 1 2\\n2 3 2\\n3 2 1\\n3 2 3\\n2 1 1\\n2 3 1\\n3 1 2\\n3 1 3\\n3 2 2\\n2 2 2\\n3 2 2\\n2 1 2\\n2 2 2\\n2 1 2\\n1 2 3\\n1 3 2\\n2 2 3\\n2 2 3\\n2 3 2\\n3 2 2\\n1 2 2\\n2 2 3\\n2 2 3\\n1 3 1\\n1 3 1\\n2 1 2\\n2 2 2\\n3 1 2\\n2 3 3\\n2 1 3\\n3 2 1\\n3 1 1\\n3 1 2\\n2 2 1\\n2 3 3\\n3 2 2\\n1 2 1\\n2 2 1\\n1 3 2\\n1 2 2\\n2 1 3\\n3 2 3\\n1 2 1\\n2 2 3\\n3 1 2\\n2 2 1\\n2 2 2\\n1 2 3\\n2 2 2\\n2 2 2\\n1 1 1\\n3 1 2\\n3 1 1\\n1 2 3\\n3 2 1\\n2 1 1\\n1 2 2\\n1 2 2\\n2 1 2\\n2 1 2\\n2 3 3\\n2 1 3\\n3 1 3\\n2 2 2\\n2 2 3\\n2 1 1\\n1 1 1\\n1 1 2\\n2 1 1\\n1 3 1\\n1 2 2\\n3 2 1\\n2 2 2\\n2 2 1\\n2 3 2\\n2 2 3\\n2 2 2\\n1 2 2\\n2 1 3\\n3 1 1\\n1 3 1\\n1 1 3\\n3 2 1\\n1 3 2\\n2 3 1\\n3 3 1\\n2 2 3\\n2 1 3\\n2 2 1\\n1 1 1\\n3 1 2\\n3 1 1\\n1 2 1\\n1 1 2\\n2 3 3\\n1 1 1\\n2 2 3\\n3 1 1\\n2 1 1\\n3 1 2\\n2 2 1\\n3 2 2\\n2 1 2\\n2 2 3\\n2 3 2\\n3 1 3\\n2 1 2\\n2 2 1\\n2 1 2\\n2 1 2\\n1 3 2\\n2 1 2\\n3 1 3\\n1 1 1\\n2 2 2\\n2 2 2\\n1 3 1\\n2 2 3\\n1 1 1\\n1 2 3\\n3 1 1\\n2 3 3\\n2 2 3\\n1 2 3\\n3 2 2\\n1 1 2\\n2 1 2\\n2 3 1\\n1 3 2\\n2 3 2\\n1 3 1\\n2 3 2\\n2 2 2\\n1 1 2\\n2 2 1\\n3 1 2\\n1 1 2\\n3 1 2\\n2 3 3\\n2 1 2\\n3 1 3\\n2 1 2\\n1 2 3\\n3 1 2\\n3 1 1\\n2 2 3\\n2 1 1\\n2 2 3\\n1 1 1\\n2 1 3\\n3 2 3\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 2\\n2 2 1\\n2 1 3\\n3 2 1\\n2 2 1\\n2 1 1\\n2 1 2\\n2 1 3\\n1 3 2\\n3 1 1\\n1 2 3\\n2 1 1\\n2 1 3\\n3 1 1\\n2 1 2\\n2 2 1\\n1 1 1\\n1 1 2\\n3 1 1\\n2 1 1\\n2 1 2\\n2 2 1\\n2 1 2\\n2 1 2\\n2 1 3\\n2 1 1\\n1 1 1\\n1 1 3\\n2 2 2\\n1 1 2\\n1 1 3\\n2 3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n1 2 2\\n1 1 2\\n2 2 2\\n1 1 2\\n1 2 1\\n2 2 1\\n1 1 1\\n1 1 3\\n1 1 1\\n1 1 3\\n1 1 1\\n1 1 3\\n1 1 1\\n1 1 3\\n1 1 1\\n1 1 3\\n1 1 1\\n1 1 3\\n1 1 1\\n1 1 3\\n1 1 1\\n1 1 3\\n1 1 1\\n1 1 3\\n1 1 1\\n1 1 3\\n1 1 1\\n1 1 3\\n1 1 1\\n1 1 3\\n1 1 1\\n1 1 3\\n1 1 1\\n1 1 3\\n1 1 1\\n1 1 3\\n1 1 1\\n1 1 3\\n1 1 1\\n1 1 3\\n1 1 1\\n1 1 3\\n1 1 1\\n1 1 3\\n1 1 1\\n1 1 3\\n1 1 1\\n1 1 3\\n1 1 1\\n1 1 3\\n1 1 1\\n1 1 3\\n1 1 1\\n1 1 3\\n1 1 1\\",
        "num_ids_2": 1437,
        "num_ids_4": 1437
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1') == '21 7 15 21 3'\nassert solution('1 2\\n1 2') == '0 0'\nassert solution('3 3\\n1 2 1\\n2 3 2\\n1 3 2') == '1 3 3'\nassert solution('2 2\\n1 2 1\\n2 1 2') == '0 0'\nassert solution('1 1\\n1 1') == '0 0'\n",
        "num_ids_2": 68,
        "num_ids_4": 118
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == output()\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1\\n2 3 2\\n1 3 2\\n\") == \"21 7 15 21 3\"\n\n\n-----Big O Notation-----\n\nThe solution is written in O(m + n^2) time.\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n\nassert solution(\"1 2\\n1 2\") == \"0 0\"\n\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 2\") == \"1 3 3\"\n\n\"\"\"\n\n\nfrom typing import List\nfrom collections import defaultdict, deque\n\nclass DisjointSet(object):\n    def __init__(self, n: int):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.num_sets = n\n\n    def union(self, a: int, b: int):\n        i = self.find(a)\n        j = self.find(b)\n        if i == j:\n            return\n        if self.size[i] < self.size[j]:\n            self.parent[i] = j\n            self.size[j] += self.size[i]\n        else:\n            self.parent[j] = i\n            self.size[i] += self.size[j]\n        self.num_sets -= 1\n\n    def find(self, x: int):\n        while x!= self.parent[x]:\n            self.parent[x] = self.parent[self.parent[x]]\n            x = self.parent[x]\n        return x\n\n\nclass Graph(object):\n    def __init__(self):\n        self.graph = defaultdict(list)\n\n    def addEdge(self, source: int, destination: int, weight: int):\n        self.graph[source].append((destination, weight))\n\n    def Dijkstra(self, source: int):\n        pass\n",
        "num_ids_2": 68,
        "num_ids_4": 96
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\") == \"YES\"\nassert solution(\"3\\n1 2 4\\n4\\n1 3 4 4\") == \"NO\"\nassert solution(\"3\\n1 2 4\\n4\\n1 3 4\\n1\") == \"YES\"\nassert solution(\"3\\n100\\n1 2 4\\n4\\n1 3 4 4\") == \"NO\"\n\n\"\"\"\n",
        "num_ids_2": 48,
        "num_ids_4": 101
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n3\n2\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n''') == 'YES'\n\nassert solution('''\n1\n2\n1 2 2\n5\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n''') == 'NO'\n\nassert solution('''\n2\n1\n1 1 1\n5\n5 5 5 5\n2\n1 2 4\n4\n1 3 4 4\n1\n100\n''') == 'YES'\n\nassert solution('''\n2\n1\n1 1 1\n5\n5 5 5 5\n2\n1 2 4\n4\n1 3 4 4\n1\n100\n''') == 'NO'\n\n\n\n-----Problem-----\n\n\u0414\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e $n$. \u0421\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 $n$ \u043d\u0443\u043b\u0435\u0439 \u0438 \u0435\u0434\u0438\u043d\u0438\u0446. \u0417\u0430\u0442\u0435\u043c \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u043d\u0443\u043b\u0435\u0439 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c\u0438 \u0431\u0443\u043a\u0432\u0430\u043c\u0438 \u043e\u0442 'a' \u0434\u043e 'z', \u0430 \u0432\u0441\u0435 \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u2014 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c\u0438 \u0431\u0443\u043a\u0432\u0430\u043c\u0438 \u043e\u0442 'A' \u0434\u043e 'Z'.\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u043b\u0438\u043d\u044b $n$ \u0438 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 $i$. \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\n3\n0\n0 1\n3\n0 0 0\n\n0 1 z z z\n\n0 1 a a a\n\n'''\n-----Solution-----\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3\\n1 2 2\\n4\\n5 5 5 5') == 'YES'\nassert solution('5\\n3\\n1 2 4\\n4\\n1 3 4 4') == 'YES'\nassert solution('5\\n3\\n1 2 4\\n4\\n1 3 4 4') == 'NO'\nassert solution('1\\n100') == 'YES'\nassert solution('2\\n2\\n2') == 'NO'\n\n\"\"\"",
        "num_ids_2": 54,
        "num_ids_4": 94
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 2\") == \"YES\"\nassert solution(\"4\\n5 5 5 5\") == \"YES\"\nassert solution(\"3\\n1 2 4\") == \"NO\"\nassert solution(\"1\\n100\") == \"YES\"\n",
        "num_ids_2": 31,
        "num_ids_4": 59
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3\\n1 2 2\\n4\\n5 5 5 5\") == \"YES\"\nassert solution(\"2\\n3\\n1 2 2\\n4\\n5 5 5 5\") == \"NO\"\n\n\"\"\"\n\nfrom typing import List, Set",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 4\\n1 3 4 4\\n1\\n100\") == \"YES\"\nassert solution(\"3\\n1 2 4\\n1 3 4\\n1\\n100\") == \"NO\"\n\n\"\"\"\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 4') == 'NO'\nassert solution('5\\n1 2 2') == 'YES'\nassert solution('3\\n1 2 4') == 'YES'\nassert solution('1\\n100') == 'YES'\n\"\"\"\n\n\n\n\"\"\"\nhttps://www.codewars.com/kata/5502c9e7b3216ec63c0001aa/train/python\n\nQuestion:\nWrite a function, which takes a non-negative integer (seconds) as input and returns the time in a human-readable format (HH:MM:SS)\n\nHH = hours, padded to 2 digits, range: 00 - 99\nMM = minutes, padded to 2 digits, range: 00 - 59\nSS = seconds, padded to 2 digits, range: 00 - 59\nThe maximum time never exceeds 359999 (99:59:59)\n\nYou can find some examples in the test fixtures.\n\nSample Tests\ntest.describe(\"Fixed Tests\")\ntest.assert_equals(make_readable(0), \"00:00:00\")\ntest.",
        "num_ids_2": 30,
        "num_ids_4": 58
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100') == 'YES'\nassert solution('5\\n2\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100') == 'YES'\nassert solution('5\\n2\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100') == 'YES'\nassert solution('5\\n2\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100') == 'NO'\nassert solution('5\\n2\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100') == 'NO'\n",
        "num_ids_2": 100,
        "num_ids_4": 200
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"3\\n1 2 2\\n4\\n1 3 4 4\") == \"YES\"\nassert solution(\"1\\n100\") == \"YES\"",
        "num_ids_2": 48,
        "num_ids_4": 61
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 4\\n5 5 5 5\") == \"YES\"\nassert solution(\"3\\n1 2 4\\n4\") == \"NO\"\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 4\n1010\n1101''') == '12'\nassert solution('''4 5\n1001\n10101''') == '11'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n1010\\n1101') == '12'\nassert solution('4 5\\n1001\\n10101') == '11'\n\"\"\"\n\nimport numpy as np\n\na, b = [int(x) for x in input().split(' ')]\na = np.fromstring(input(), dtype=int)\nb = np.fromstring(input(), dtype=int)\n\nnum = 0\nfor x, y in zip(a, b):\n    num = (num << 1) | x & y\nprint(num)\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\n\"\"\"\n\na, b = input().split()\na = int(a, 2)\nb = int(b, 2)\n\nres = 0\nwhile b:\n    res = res + (a & b)\n    b = (b >> 1) & ((2**int(input()) - 1) << 1)\n    print(res)\n\nprint(res)\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 1010 1101\") == \"12\"\nassert solution(\"4 5 10101 10101\") == \"11\"\n\n\"\"\"\n\na, b = map(int, input().split())\na_str = input()\nb_str = input()\n\na_str_int = int(a_str, 2)\nb_str_int = int(b_str, 2)\n\nc_str_int = a_str_int & b_str_int\n\nc_str = str(c_str_int)\n\nwhile len(b_str) > 0:\n    c_str_int = int(b_str, 2) & int(b_str[-1] + b_str[:-1], 2)\n    b_str = str(c_str_int)\n    c_str += b_str\n\nprint(c_str_int, end=\"\")\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 101010 1101\") == \"12\"\nassert solution(\"4 5 101010 1101\") == \"11\"\nassert solution(\"4 4 100101 1101\") == \"10\"\nassert solution(\"4 5 100101 1101\") == \"11\"\n\n\"\"\"\n\nimport re\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1010\\n1101\\n\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\\n\") == \"11\"",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n1010\\n1101') == '12'\nassert solution('4 5\\n1001\\n10101') == '11'\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\nassert solution(\"10 10\\n101010\\n101101\") == \"1000\"\nassert solution(\"10 10\\n101010\\n101101\") == \"1000\"\nassert solution(\"10 10\\n101010\\n101101\") == \"1000\"\n",
        "num_ids_2": 37,
        "num_ids_4": 75
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 20') == '6'\nassert solution('10101 10') == '6'\nassert solution('101101 10') == '6'\nassert solution('101101 101101 10') == '6'\nassert solution('101101 101101 101101 10') == '6'\n",
        "num_ids_2": 23,
        "num_ids_4": 49
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n6\") == \"NO\"\nassert solution(\"8\\n10\") == \"YES\\n2 4 6 8 1 3 5 11\"\nassert solution(\"2\\n4\") == \"NO\"\nassert solution(\"1\\n6\") == \"YES\\n2 4 1 5\"\nassert solution(\"10\\n14\") == \"YES\\n2 4 6 8 1 3 5 11 13 17 19 21 23 25 27 29\"\n\nprint(solution(\"4\\n6\"))\nprint(solution(\"8\\n10\"))\nprint(solution(\"2\\n4\"))\nprint(solution(\"1\\n6\"))\nprint(solution(\"10\\n14\"))\n\"\"\"\n\nfrom math import gcd\nfrom typing import List, Dict, Set\n\n\nclass DisjointSet:\n    def __init__(self, n: int):\n        self.leader: List[int] = [i for i in range(n)]\n        self.size: List[int] = [1] * n\n        self.group_count: int = n\n\n    def merge(self, x: int, y: int) -> None:\n        x_leader = self.leader[x]\n        y_leader = self.leader[y]\n        if x_leader == y_leader:\n            return\n        self.group_count -= 1\n        if self.size[x_leader] < self.size[y_leader]:\n            self.leader[x_leader] = y_leader\n            self.size[y_leader] += self.size[x_leader]\n        else:\n            self.leader[y_leader] = x_leader\n            self.size[x_leader] += self.size[y_leader]\n\n    def find(self, x: int) -> int:\n        while x!= self.leader[x]:\n            x = self.leader[x]\n        return x\n",
        "num_ids_2": 36,
        "num_ids_4": 68
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"6\") == \"2 4 1 5\"\nassert solution(\"8\") == \"NO\"\nassert solution(\"10\") == \"2 4 6 8 1 3 5 11\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2\") == \"NO\"\nassert solution(\"6\\n2\") == \"YES\\n2 4 1 5\"\nassert solution(\"8\\n2\") == \"NO\"\nassert solution(\"10\\n2\") == \"YES\\n2 4 6 8 1 3 5 11\"\nassert solution(\"4\\n4\") == \"NO\"\n\"\"\"\n\n\"\"\"\nt = int(stdin.readline())\n\nwhile t > 0:\n    n = int(stdin.readline())\n    if n == 1:\n        print(\"YES\")\n        print(\"1\")\n    else:\n        a = [int(x) for x in range(1, n + 1)]\n        if n % 2 == 0:\n            sum1 = 0\n            sum2 = 0\n            for i in range(0, n // 2):\n                sum1 += a[i]\n            for i in range(n // 2, n):\n                sum2 += a[i]\n            if sum1 == sum2:\n                print(\"YES\")\n                print(*a)\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    t -= 1\n\n\"\"\"\n\nt = int(input())\n\nwhile t > 0:\n    n = int(input())\n    if n == 1:\n        print(\"YES\")\n        print(\"1\")\n    else:\n        a = [int(x) for x in range(1, n + 1)]\n        if n % 2 == 0:\n            sum1 = 0\n            sum2 = 0\n            for i in range(0, n // 2):\n                sum1 += a[i]\n            for i in range(n // 2, n):\n                sum2 += a[i]\n            if sum1 == sum2:\n                print(\"YES\")\n                print(*a)\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    t -= 1\n",
        "num_ids_2": 32,
        "num_ids_4": 68
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n6\") == \"NO\"\nassert solution(\"6\\n8\") == \"YES\\n2 4 1 5\"\nassert solution(\"8\\n10\") == \"NO\"\nassert solution(\"10\\n12\") == \"YES\\n2 4 6 8 1 3 5 11\"\nassert solution(\"12\\n14\") == \"NO\"\n",
        "num_ids_2": 32,
        "num_ids_4": 68
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n4\\n6\\n8\\n10') == 'NO\\nYES\\n2 4 1 5\\nNO\\nYES\\n2 4 6 8 1 3 5 11'\n\"\"\"\n\nimport sys\nimport math\n\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    if n % 2 == 1:\n        sys.stdout.write('NO\\n')\n    else:\n        x, y = [], []\n        for i in range(n // 2):\n            x.append(i * 2)\n            y.append(i * 2 + 1)\n        sys.stdout.write(f'YES\\n{x}\\n{y}\\n')",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n4\\n6\\n8\\n10\\n') == 'NO\\nYES\\n2 4 1 5\\nNO\\nYES\\n2 4 6 8 1 3 5 11'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2\") == \"NO\"\nassert solution(\"5\\n2\") == \"YES\"\nassert solution(\"5\\n4\") == \"NO\"\nassert solution(\"5\\n6\") == \"YES\"\nassert solution(\"5\\n8\") == \"NO\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n4\\n6\\n8\\n10') == 'NO\\nYES\\n2 4 1 5\\nNO\\nYES'\nassert solution('2\\n6\\n8\\n10') == 'NO\\nYES\\n2 4 1 5\\nNO'\n\"\"\"\n\n\nfrom collections import deque\nfrom typing import NamedTuple\n\n\nclass Case(NamedTuple):\n    n: int\n    array: list\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n6\") == \"NO\"\nassert solution(\"4\\n6\\n8\") == \"NO\"\nassert solution(\"4\\n6\\n8\\n10\") == \"YES\\n2 4 6 8 1 3 5 11\"\nassert solution(\"4\\n8\\n10\") == \"NO\"\nassert solution(\"4\\n6\\n8\\n10\\n2\\n4\\n6\") == \"NO\"\n",
        "num_ids_2": 32,
        "num_ids_4": 77
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n4\") == \"NO\"\nassert solution(\"4\\n6\") == \"2 4 1 5\"\nassert solution(\"6\\n8\") == \"NO\"\nassert solution(\"8\\n10\") == \"YES\\n2 4 6 8 1 3 5 11\"\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 65
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n5\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n''') == '''\n5\n1\n0\n4\n0\n'''\n\nassert solution('''\n4\n7\n1 1 1 1 1\n5\n1 1 1 1 1\n2\n3 4\n6\n1 1 1 1 1\n''') == '''\n1\n0\n2\n0\n'''\n\nassert solution('''\n2\n6\n2 5 1 2 4 1\n3\n3 1 2\n''') == '''\n0\n1\n'''\n\nassert solution('''\n2\n5\n1 2 3 4 5\n4\n1 2 3 4\n''') == '''\n0\n2\n'''\n\nassert solution('''\n3\n6\n1 1 2 3 4 5\n5\n1 1 1 1 1\n3\n2 2 3\n5\n1 1 1 1\n''') == '''\n1\n0\n3\n'''",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 1 2 3\\n4\\n1 1 1 1') == '0'\nassert solution('4\\n1 1 2 3\\n4\\n1 1 1 2') == '0'\nassert solution('5\\n1 1 2 3 4\\n5\\n1 1 1 2 3') == '0'\n\"\"\"\n\nfrom math import ceil, log2",
        "num_ids_2": 50,
        "num_ids_4": 77
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3\\n1 2 3 4\\n3\\n2 1 3\\n2\\n1\") == \"1\\n0\\n4\\n0\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2') == '5'\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1 1 1') == '0'\nassert solution('8\\n8 7 6 5 4 3 2 1') == '0'\nassert solution('7\\n1 1 1 1 1') == '1'\nassert solution('9\\n1 1 1 1 1') == '4'\nassert solution('8\\n7 6 5 4 3 2 1') == '0'\n\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 70
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n''') == '''\n5\n1\n0\n4\n0\n'''\n\nassert solution('''\n2\n4\n2 4 6 8\n4\n4 4 4 4\n2\n1 2\n''') == '''\n2\n0\n'''\n\nassert solution('''\n1\n4\n1 1 1 1\n1\n1 1 1 1\n''') == '''\n1\n0\n'''\n\nassert solution('''\n1\n5\n3 1 4 1 5 9 2 6 5\n''') == '''\n5\n'''\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\n3 1 4 1 5 9 2 6 5\") == '5'\nassert solution(\"3\\n1 1 2\") == '1'\nassert solution(\"5\\n1 1 1 1 1\") == '0'\nassert solution(\"8\\n8 7 6 5 4 3 2 1\") == '4'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 36,
        "num_ids_4": 73
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2\\n1 3 5 4\") == \"2\"\nassert solution(\"4\\n3\\n1 3 5 4\") == \"1\"\nassert solution(\"4\\n1\\n1 3 5 4\") == \"0\"\nassert solution(\"4\\n1\\n1 2 3 4\") == \"0\"\nassert solution(\"4\\n2\\n1 2 3 4\") == \"0\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 4 1 5 9 2 6 5\\n3\\n1 1 2\") == \"5\"\nassert solution(\"4 1 4 1 5 9 2 6 5\\n3\\n1 1 2\") == \"5\"\n\nassert solution(\"8 7 6 5 4 3 2 1\\n1\\n1\") == \"0\"\nassert solution(\"8 7 6 5 4 3 2 1\\n1\\n1\") == \"0\"\nassert solution(\"8 7 6 5 4 3 2 1\\n1\\n1\") == \"0\"\n",
        "num_ids_2": 52,
        "num_ids_4": 98
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\\n5\\n1 1 1 1 1\") == \"5\\n1\\n0\\n4\\n0\"\nassert solution(\"9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\") == \"5\\n1\\n0\"\nassert solution(\"8\\n8 7 6 5 4 3 2 1\\n1\\n1\") == \"0\\n1\\n0\"\nassert solution(\"5\\n1 1 1 1 1\") == \"1\\n0\"\nassert solution(\"5\\n1 1 1 1 1\") == \"1\\n0\"\n",
        "num_ids_2": 83,
        "num_ids_4": 135
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"3\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"4\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"2\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"7\"\n\"\"\"\n\nimport itertools",
        "num_ids_2": 128,
        "num_ids_4": 256
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == '3'\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == '4'\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == '2'\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == '7'\n\"\"\"\n",
        "num_ids_2": 134,
        "num_ids_4": 268
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7''') == '3\\n4\\n2\\n7'\nprint('The local tests are done. Click on \"Check\" for more details.')",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '3'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '4'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '2'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '7'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n",
        "num_ids_2": 134,
        "num_ids_4": 268
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\\n') == '3\\n4\\n2\\n7'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\\n') == '4\\n4\\n2\\n7'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\\n') == '3\\n4\\n2\\n7'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\\n') == '4\\n4\\n2\\n7'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\\n') == '3\\n4\\n2\\n7'\n",
        "num_ids_2": 212,
        "num_ids_4": 424
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n\"\"\"\n) == \"\"\"\n3\n4\n2\n7\n\"\"\"\n\nprint(\"Cool!\")",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"3\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"4\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"2\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"7\"\n\"\"\"\n\nt = int(input())",
        "num_ids_2": 134,
        "num_ids_4": 268
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2 3\\n1 2\\n1 3\") == 3\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\") == 4\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\") == 2\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\") == 7\n\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 44,
        "num_ids_4": 92
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\") == \"3\\n4\\n2\\n7\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 104,
        "num_ids_4": 104
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3') == '3\\n4\\n2\\n7'\nassert solution('3\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3') == '4\\n2\\n7'\nassert solution('5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3') == '2\\n7'\n\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3') == '3\\n4\\n2\\n7'\nassert solution('3\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3') == '4\\n2\\n7'\n",
        "num_ids_2": 112,
        "num_ids_4": 209
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n23 55\\n23 0\\n0 1\\n4 20\\n23 59\\n\") == \"5\\n60\\n1439\\n1180\\n1\\n\")\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n\nfrom collections import deque\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"23 55\") == \"1\"\nassert solution(\"23 0\") == \"60\"\nassert solution(\"0 1\") == \"1439\"\nassert solution(\"4 20\") == \"1180\"\nassert solution(\"23 59\") == \"1\"\n\"\"\"\n\n\nfrom math import sqrt\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"23 55\") == \"5\"\nassert solution(\"23 0\") == \"60\"\nassert solution(\"0 1\") == \"1439\"\nassert solution(\"4 20\") == \"1180\"\nassert solution(\"23 59\") == \"1\"\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('23 55\\n23 0\\n0 1\\n4 20\\n23 59') == '5\\n60\\n1439\\n1180\\n1'\nprint(solution('23 55\\n23 0\\n0 1\\n4 20\\n23 59'))",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open(\"ex1.txt\", \"r\").read()) == open(\"ex1_out.txt\", \"r\").read()",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n23 55') == '5\\n23 55'\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n\nt = int(input())\n\nfor _ in range(t):\n    h, m = map(int, input().split())\n    print(60 * 24 - (h * 60 + m))\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('LRUD') == 'L'\nassert solution('LURD') == 'U'\nassert solution('RRUDU') == 'D'\nassert solution('LLDDR') == 'R'\nassert solution('LLRDRRRD') == 'L'\n\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('LRUD') == '1 2'\nassert solution('LURD') == '1 4'\nassert solution('RRUDU') == '3 4'\nassert solution('LLDDR') == '-1'\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 51
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('LRUD') == 'L1R2U3D'\nassert solution('LURD') == 'L1R2U3D'\nassert solution('RRUDU') == 'R3U2D1'\nassert solution('LLDDR') == 'L4D1R2'\nassert solution('L') == 'L'\n",
        "num_ids_2": 35,
        "num_ids_4": 69
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('LRUD') == '1 2'\nassert solution('LURD') == '1 4'\nassert solution('RRUDU') == '3 4'\nassert solution('LLDDR') == '-1'",
        "num_ids_2": 25,
        "num_ids_4": 51
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"LRUD\") == \"1 2\"\nassert solution(\"LURD\") == \"1 4\"\nassert solution(\"RRUDU\") == \"3 4\"\nassert solution(\"LLDDR\") == \"-1\"\n\nprint('Hooray!')\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('LURDLUD') == 'LRUD'\nassert solution('LURDRRUDU') == 'LRDRRU'\nassert solution('LRUDR') == 'LRUDR'\nassert solution('LRUDRUDU') == 'LRUDRU'\nassert solution('LDRRUDRD') == 'LDRRUDRD'\n",
        "num_ids_2": 32,
        "num_ids_4": 63
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('LRUD') == '1 2'\nassert solution('LURD') == '1 4'\nassert solution('RRUDU') == '3 4'\nassert solution('LLDDR') == '-1'\n\"\"\"\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    curr = [0, 0]\n    ans = []\n    for c in s:\n        if c == 'U':\n            curr[1] += 1\n        elif c == 'D':\n            curr[1] -= 1\n        elif c == 'L':\n            curr[0] -= 1\n        elif c == 'R':\n            curr[0] += 1\n        if curr[0] == 0 and curr[1] == 0:\n            ans = [1, n - 1]\n            break\n    if ans:\n        print(ans[0], ans[1])\n    else:\n        print('-1')\n",
        "num_ids_2": 25,
        "num_ids_4": 51
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"LRUD\") == \"LRU\"\nassert solution(\"UDLR\") == \"LUD\"\nassert solution(\"RUULR\") == \"RUULL\"\nassert solution
        "num_ids_2": 24,
        "num_ids_4": 1194
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('LRUD') == '1 2'\nassert solution('LURD') == '1 4'\nassert solution('RRUDU') == '3 4'\nassert solution('LLDDR') == '-1'\n\n\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 51
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"LRUD\") == \"LURD\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2 4 1 4 3 4') == '3'\nassert solution('5') == '1'\n\"\"\"\n\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\n4 2 4 1 4 3 4') == '3'\nassert solution('5\\n2 1 5 4 3') == '1'\nassert solution('1\\n1') == '0'\nassert solution('4\\n1 1 1 3') == '2'\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 36,
        "num_ids_4": 65
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == '2'\n\n\n\"\"\"\n\n\nfrom typing import List\nfrom collections import Counter\nimport copy\nimport math\nimport unittest\n\nclass Solution:\n    # Solution: O(n^2)\n    # class Solution:\n    #     def solution(self, stdin: str) -> str:\n    #         # lines = stdin.splitlines()\n    #         # n = int(lines[0])\n    #         n = int(stdin.split('\\n')[0])\n    #         # skills = list(map(int, lines[1].split(' ')))\n    #         skills = list(map(int, stdin.split('\\n')[1].split(' ')))\n    #         #print(n, skills)\n    #         ans = -1\n    #         for x in range(n, 0, -1):\n    #             if n % x == 0:\n    #                 #print(x, skills)\n    #                 d = Counter(skills)\n    #                 if len(d) == len(skills):\n    #                     ans = x\n    #                 else:\n    #                     for k in d:\n    #                         d[k] -= 1\n    #                     #print(d)\n    #                     if len(d) == 1:\n    #                         for k in d:\n    #                             if d[k] > 0:\n    #                                 ans = x\n    #                                 break\n    #         return str(ans)\n\n    def solution(self, stdin: str) -> str:\n        # lines = stdin.splitlines()\n        # n = int(lines[0])\n        n = int(stdin.split('\\n')[0])\n        # skills = list(map(int, lines[1].split(' ')))\n        skills = list(map(int, stdin.split('\\n')[1].split(' ')))\n        #print(n, skills)\n        ans = -1\n        for x in range(1, n + 1):\n            #print(x, skills)\n            d = copy.deepcopy(skills)\n            d.sort()\n            #print(d)\n            if d[0]!= d[n - 1]:\n                ans = x\n                break\n            else:\n                for k in skills:\n                    if k in d:\n                        d.remove(k)\n                #print(d)\n                if len(d) == n - 1:\n                    ans = x\n                    break\n        return str(ans)\n\n\nclass TestSolution(unittest.TestCase):\n    def test_1(self):\n        solution = Solution()\n        #self.assertEqual(solution.solution(\"7\\n4 2 4 1 4 3 4\"), '3')\n        self.assertEqual(solution.solution(\"7\\n4 2 4 1 4 3 4\"), '2')\n\n    def test_2(self):\n        solution = Solution()\n        #self.assertEqual(solution.solution(\"5\\n2 1 5 4 3\"), '1')\n        self.assertEqual(solution.solution(\"5\\n2 1 5 4 3\"), '0')\n\n    def test_3(self):\n        solution = Solution()\n        #self.",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n4 2 4 1 4 3 4') == '3'\nassert solution('5\\n2 1 5 4 3') == '1'\nassert solution('1\\n1') == '0'\nassert solution('4\\n1 1 1 3') == '2'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 65
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\") == '3'\nassert solution(\"5\\n2 1 5 4 3\") == '1'\nassert solution(\"1\\n1\") == '0'\nassert solution(\"4\\n1 1 1 3\") == '2'\n\"\"\"\nimport sys\n",
        "num_ids_2": 36,
        "num_ids_4": 65
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3') == '3\\n1\\n0\\n2'\nassert solution('4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3') == '2\\n1\\n0\\n2'\n\"\"\"\nimport sys\n\nlines = sys.stdin.readlines()\n",
        "num_ids_2": 85,
        "num_ids_4": 85
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7\\n4 2 4 1 4 3 4\") == \"3\"\nassert solution(\"5\\n2 1 5 4 3\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"4\\n1 1 1 3\") == \"2\"\n\"\"\"\n\nimport sys\nimport collections\nimport itertools\n\nsys.setrecursionlimit(10 ** 9)\n",
        "num_ids_2": 37,
        "num_ids_4": 66
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 4 1 4 3 4\") == \"3\"\nassert solution(\"5 2 1 5 4 3\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1 1 1 3\") == \"2\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 31,
        "num_ids_4": 54
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\") == \"3\\n1\\n0\\n2\"\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\n4 2 4 1 4 3 4') == '3'\nassert solution('5\\n2 1 5 4 3') == '1'\nassert solution('1\\n1') == '0'\nassert solution('4\\n1 1 1 3') == '2'\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 65
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 4\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\\n3 5\\n4 5\\n4 6\\n5 6\\n5 7\\n6 7\\n6 8\\n7 8\\n7 9\\n8 9\\n8 10\\n9 10\\n9 11\\n10 11\\n10 12\\n11 12\\n11 13\\n12 13\\n12 14\\n13 14\\n13 15\\n14 15\\n14 16\\n15 16\\n15 17\\n16 17\\n16 18\\n17 18\\n17 19\\n18 19\\n18 20\\n19 20\\n19 21\\n20 21\\n20 22\\n21 22\\n21 23\\n22 23\\n22 24\\n23 24\\n23 25\\n24 25\\n24 26\\n25 26\\n25 27\\n26 27\\n26 28\\n27 28\\n27 29\\n28 29\\n28 30\\n29 30\\n29 31\\n30 31\\n30 32\\n31 32\\n31 33\\n32 33\\n31 34\\n32 34\\n31 35\\n33 35\\n32 36\\n34 36\\n31 37\\n33 37\\n32 38\\n34 38\\n31 39\\n33 39\\n32 40\\n34 40\\n31 41\\n33 41\\n32 42\\n34 42\\n31 43\\n33 43\\n32 44\\n34 44\\n31 45\\n33 45\\n32 46\\n34 46\\n31 47\\n33 47\\n32 48\\n34 48\\n31 49\\n33 49\\n32 50\\n34 50\\n31 51\\n33 51\\n32 52\\n34 52\\n31 53\\n33 53\\n32 54\\n34 54\\n31 55\\n33 55\\n32 56\\n34 56\\n31 57\\n33 57\\n32 58\\n34 58\\n31 59\\n33 59\\n32 60\\n34 60\\n31 61\\n33 61\\n32 62\\n34 62\\n31 63\\n33 63\\n32 64\\n34 64\\n31 65\\n33 65\\n32 66\\n34 66\\n31 67\\n33 67\\n32 68\\n34 68\\n31 69\\n33 69\\n32 70\\n34 70\\n31 71\\n33 71\\n32 72\\n34 72\\n31 73\\n33 73\\n32 74\\n34 74\\n31 75\\n33 75\\n32 76\\n34 76\\n31 77\\n33 77\\n32 78\\n34 78\\n31 79\\n33 79\\n32 80\\n34 80\\n31 81\\n33 81\\n32 82\\n34 82\\n31 83\\n33 83\\n32 84\\n34 84\\n31 85\\n33 85\\n32 86\\n34 86\\n31 87\\n33 87\\n32 88\\n34 88\\n31 89\\n33 89\\n32 90\\n34 90\\n31 91\\n33 91\\n32 92\\n34 92\\n31 93\\n33 93\\n32 94\\n34 94\\n31 95\\n33 95\\n32 96\\n34 96\\n31 97\\n33 97\\n32 98\\n34 98\\n31 99\\n33 99\\n32 100\\n34 100\\n31 101\\n33 101\\n32 102\\n34 102\\n31 103\\n33 103\\n32 104\\n34 104\\n31 105\\n33 105\\n32 106\\n34 106\\n31 107\\n33 107\\n32 108\\n34 108\\n31 109\\n33 109\\n32 110\\n34 110\\n31 111\\n33 111\\n32 112\\n34 112\\n31 113\\n33 113\\n32 114\\n34 114\\n31 115\\n33 115\\n32 116\\n34 116\\n31 117\\n33 117\\n32 118\\n34 118\\n31 119\\n33 119\\n32 120\\n34 120\\n31 121\\n33 121\\n32 122\\n34 122\\n31 123\\n33 123\\n32 124\\n34 124\\n31 125\\n33 125\\n32 126\\n34 126\\n31 127\\n33 127\\n32 128\\n34 128\\n31 129\\n33 129\\n32 130\\n34 130\\n31 131\\n33 131\\n32 132\\n34 132\\n31 133\\n33 133\\n32 134\\n34 134\\n31 135\\n33 135\\n32 136\\n34 136\\n31 137\\n33 137\\n32 138\\n34 138\\n31 139\\n33 139\\n32 140\\n34 140\\n31 141\\n33 141\\n32 142\\n34 142\\n31 143\\n33 143\\n32 144\\n34 144\\n31 145\\n33 145\\n32 146\\n34 146\\n31 147\\n33 147\\n32 148\\n34 148\\n31 149\\n33 149\\n32 150\\n34 150\\n31 151\\n33 151\\n32 152\\n34 152\\n31 153\\n33 153\\n32 154\\n34 154\\n31 155\\n33 155\\n32 156\\n34 156\\n31 157\\n33 157\\n32 158\\n34 158\\n31 159\\n33 159\\n32 160\\n34 160\\n31 161\\n33 161\\n32 162\\n34 162\\n31 163\\n33 163\\n32 164\\n34 164\\n31 165\\n33 165\\n32 166\\n34 166\\n31 167\\n33 167\\n32 168\\n34 168\\n31 169\\n33 169\\n32 170\\n34 170\\n31 171\\n33 171\\n32 172\\n34 172\\n31 173\\n33 173\\n32 174\\n34 174\\n31 175\\n33 175\\n32 176\\n34 176\\n31 177\\n33 177\\n32 178\\n34 178\\n31 179\\n33 179\\n32 180\\n34 180\\n31",
        "num_ids_2": 1440,
        "num_ids_4": 1440
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8') == '121'\nassert solution('1337\\n') == '0'\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"121\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"",
        "num_ids_2": 62,
        "num_ids_4": 62
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1337\") == \"0\"\nassert solution(\"1\") == \"0\"",
        "num_ids_2": 28,
        "num_ids_4": 38
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n9 4 1 7 10 1 6 5') == '121'\nassert solution('1\\n1337') == '0'\nassert solution('1\\n1337') == '0'\n",
        "num_ids_2": 34,
        "num_ids_4": 48
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\n\"\"\"\nimport sys\nimport math\nfrom collections import defaultdict\nfrom math import inf\n\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\n\ninput_lines = [line.strip() for line in sys.stdin]\n\nn = int(input_lines[0])\nvalues = [int(value) for value in input_lines[1].split()]\n\nedges = []\nfor i in range(len(input_lines) - 1):\n    edges.append([int(vertex) for vertex in input_lines[i + 1].split()])",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3 7 2 2 6 4 5 1 1 2\") == \"90\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9') == '6'\nassert solution('5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24') == '0'\nassert solution('5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24') == '227'\nassert solution('5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24') == '8'\n\"\"\"\nimport sys",
        "num_ids_2": 68,
        "num_ids_4": 138
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"6\\n18\\n0\\n227\\n8\"\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"0\\n18\\n0\\n227\\n8\"\nassert solution(\"5 10\\n24 24 24 24 24 24 24 24 24 24\\n8 8\\n1 2 3 4 5 6 7 8\") == \"6\\n18\\n0\\n227\\n8\"\n\"\"\"",
        "num_ids_2": 92,
        "num_ids_4": 141
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n''') == '6'\nassert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n''') == '18'\nassert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n''') == '0'\nassert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n''') == '227'\nassert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n''') == '8'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\") == 6\nassert solution(\"5 10\\n20 100 50 20 100500\") == 0\nassert solution(\"5 10\\n24 24 24 24 24 24 24 24 24 24\") == 227\nassert solution(\"8 8\\n1 2 3 4 5 6 7 8\") == 0\n\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 76
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\") == '6\\n18\\n0\\n227\\n8'\n\n\"\"\"\n",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 1 3\") == '6'\nassert solution(\"10 6\\n8 7 1 8 3 7 5 10 8 9\") == '18'\nassert solution(\"5 10\\n20 100 50 20 100500\") == '0'\nassert solution(\"10 25\\n24 24 24 24 24 24 24 24 24 24\") == '8'\n",
        "num_ids_2": 40,
        "num_ids_4": 82
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\") == '6'\n\"\"\"\n\n\nfrom collections import Counter, OrderedDict\nimport sys\nimport functools\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9') == '6'\nassert solution('5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24') == '8'\nassert solution('4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9') == '6'\nassert solution('4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9') == '6'\nassert solution('4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9') == '6'\n",
        "num_ids_2": 68,
        "num_ids_4": 134
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"6\"\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"0\"\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"8\"\n\n\"\"\"\n\n\nimport sys",
        "num_ids_2": 68,
        "num_ids_4": 103
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\") == '6'\nassert solution(\"5 10\\n20 100 50 20 100500\") == '0'\nassert solution(\"8 8\\n1 2 3 4 5 6 7 8\") == '8'\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 61
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 1') == '2'\nassert solution('4 4 4') == '4'\nassert solution('1 1 1') == '1'\nassert solution('2 3 5') == '1'\nassert solution('1 2') == '0'\n\"\"\"\n\nimport heapq\nfrom collections import Counter\n\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        child_i = child_j = 0\n        for cookie in s:\n            if child_i < len(g) and cookie >= g[child_i]:\n                child_i += 1\n        return child_i",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 2 3 1 1\") == \"2\"\nassert solution(\"1 2 3 1 1\") == \"2\"\nassert solution(\"1 2 3 1 1\") == \"2\"\n",
        "num_ids_2": 23,
        "num_ids_4": 51
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1\\n2 3') == '2'\nassert solution('2 2\\n1 3') == '1'\nassert solution('2 1\\n3 4') == '1'\nassert solution('2 2\\n2 1') == '2'\nassert solution('1 2\\n2 1') == '2'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 200\") == \"1 0\"\nassert solution(\"10 9\") == \"1 1\"\nassert solution(\"10 20\") == \"1 2\"\nassert solution(\"10 0\") == \"0 0\"\nassert solution(\"1 10\") == \"1 0\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3') == '2'\nassert solution('6 2') == '1'\nassert solution('1 1') == '1'\n\"\"\"\n\nclass Solution:\n    def getMaxGreed(self, N, size):\n        greed = list(range(1, N+1))\n        greed.sort(reverse=True)\n        for i in range(len(greed)):\n            if size >= greed[i]:\n                size -= greed[i]\n                return greed[i]\n    def findContentChildren(self, g, s) -> int:\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        greed = list(range(1, max(g)+1))\n        greed.sort(reverse=True)\n        s.sort(reverse=True)\n        count = 0\n        while len(s) > 0 and len(greed) > 0:\n            size = s.pop()\n            greed_size = greed.pop()\n            if size >= greed_size:\n                count += 1\n        return count\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2') == '1'\nassert solution('3\\n1\\n2') == '2'\nassert solution('2\\n1\\n2\\n3') == '1'\nassert solution('4\\n1\\n2\\n3\\n4') == '1'\nassert solution('5\\n1\\n2\\n3\\n4\\n5') == '2'\n",
        "num_ids_2": 29,
        "num_ids_4": 70
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n1\\n2\\n3') == '2'\nassert solution('1\\n2\\n3\\n1\\n2\\n3') == '2'\nassert solution('1\\n2\\n3\\n1\\n2\\n3') == '2'\n\"\"\"\nimport heapq\nfrom collections import Counter",
        "num_ids_2": 50,
        "num_ids_4": 75
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n1\") == \"1\"\nassert solution(\"1\\n1\\n1\") == \"1\"\nassert solution(\"2\\n1\\n1\") == \"2\"\nassert solution(\"2\\n1\\n1\\n1\\n1\") == \"2\"\nassert solution(\"3\\n1\\n1\\n1\\n1\") == \"3\"\n",
        "num_ids_2": 29,
        "num_ids_4": 67
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2') == '1'\nassert solution('2\\n1') == '1'\nassert solution('2\\n2\\n3') == '2'\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 26,
        "num_ids_4": 42
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3\") == '2'\nassert solution(\"8 1\") == '8'\nassert solution(\"8 4\") == '1'\nassert solution(\"5 1\") == '1'\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3) == [1,3,3,1]\nassert solution(0) == [1]\nassert solution(1) == [1,1]\nassert solution(2) == [1,2,1]\nassert solution(20) == [1,20,165,120,20,1]\n\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == [1,3,3,1]\nassert solution('4') == [1,4,6,4,1]\n\"\"\"\n\nimport numpy as np",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == [1,3,3,1]\nassert solution(\"4\") == [1,4,6,4,1]\n\n\"\"\"\nimport numpy as np\n\nclass Solution:\n    def getRow(self, n: int) -> List[int]:\n        matrix = np.zeros((n + 1, n + 1))\n        matrix[0][0] = 1\n        matrix[0][1] = 1\n        for i in range(1, n + 1):\n            for j in range(0, i + 1):\n                if j == 0 or j == i:\n                    matrix[i][j] = 1\n                else:\n                    matrix[i][j] = matrix[i - 1][j - 1] + matrix[i - 1][j]\n        return matrix[n][:].tolist()",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == [1,3,3,1]\nassert solution('4') == [1,4,6,4,1]\nassert solution('5') == [1,5,10,10,5,1]\nassert solution('6') == [1,6,15,20,15,6,1]\nassert solution('7') == [1,7,21,35,35,21,7,1]\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == [1, 3, 3, 1]\n\"\"\"\n\n\"\"\"\n\u7b2c\u4e8c\u8f6e\u63d0\u4ea4\uff1a\n\u8d85\u65f6\u4e86\uff0c\u4e0d\u61c2\n\"\"\"\nimport math",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\"\"\"\n\n\nclass Solution:\n    def getRow(self, k: int):\n        if k == 0:\n            return [1]\n        if k == 1:\n            return [1, 1]\n        result = [[1], [1, 1]]\n        for i in range(2, k + 1):\n            row = [1] * (i + 1)\n            for j in range(1, i):\n                row[j] = result[i - 1][j - 1] + result[i - 1][j]\n            result.append(row)\n        return result[k]\n\n\nprint(Solution().getRow(4))\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == [1, 3, 3, 1]\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == [1, 3, 3, 1]\n\nassert solution('0') == [1]\nassert solution('1') == [1, 1]\nassert solution('4') == [1, 4, 6, 4, 1]\n",
        "num_ids_2": 26,
        "num_ids_4": 56
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\n\"\"\"\n\nimport functools\n\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        \"\"\"\n\n        :param rowIndex:\n        :return:\n        \"\"\"\n        row = [1] * (rowIndex + 1)\n        for i in range(1, rowIndex):\n            row[i] = functools.reduce(lambda x, y: x + y, range(i, 0, -1))\n        return row\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\"\"\"\nimport numpy as np\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> list:\n        nrow = np.zeros(rowIndex + 1)\n        nrow[0] = 1\n        for i in range(1, rowIndex + 1):\n            nrow[i] = 1\n            for j in range(1, i):\n                nrow[i] += nrow[j - 1] * nrow[i - j]\n\n        return nrow.tolist()",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('00000000000000000000000010000000') == '1'\nassert solution('111111111111111111111111111111101') == '31'\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\") == 0\nassert solution(\"11111111111111111111111111101\") == 31\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n:\n            n &= n - 1\n            count += 1\n        return count",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\nassert solution('00000000000000000000000001111011') == 6\nassert solution('01111111111111111111111111111111') == 31\nassert solution('00111111111111111111111111111111') == 0\n",
        "num_ids_2": 27,
        "num_ids_4": 56
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(bin(23)) == \"11101\"\nassert solution(bin(42)) == \"101010\"\nassert solution(bin(1)) == \"1\"\nassert solution(bin(0)) == \"0\"\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        ans = 0\n        while n:\n            n &= n-1\n            ans += 1\n        return ans\n    \n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        ans = 0\n        while n:\n            ans += n & 1\n            n >>= 1\n        return ans\n        ",
        "num_ids_2": 26,
        "num_ids_4": 50
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count('1')",
        "num_ids_2": 23,
        "num_ids_4": 39
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31",
        "num_ids_2": 23,
        "num_ids_4": 39
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(bin(3)) == '11'\nassert solution(bin(3 & 3)) == '1'\nassert solution(bin(3 | 3)) == '11'\nassert solution(bin(3 ^ 3)) == '10'\nassert solution(bin(3 >> 3)) == '101'\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution
        "num_ids_2": 1715,
        "num_ids_4": 1715
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31",
        "num_ids_2": 23,
        "num_ids_4": 39
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('00000000000000000000000010000000') == 1\nassert solution('000000000000000000000000101011110111') == 4\nassert solution('111111111111111111111111111111101') == 32\n\"\"\"\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        # Standard approach\n        return bin(n).count(\"1\")\n\n\nsolution = Solution().hammingWeight\n\nassert solution(0b00000000000000000000000000001011) == 3\nassert solution(0b00000000000000000000000010000000) == 1\n",
        "num_ids_2": 25,
        "num_ids_4": 55
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123\") == \"124\"\nassert solution(\"999\") == \"1000\"\nassert solution(\"1000\") == \"1001\"\nassert solution(\"1000\") == \"1001\"\nassert solution(\"0\") == \"1\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1234\") == \"1235\"\nassert solution(\"54321\") == \"5432\"\nassert solution(\"987654\") == \"987657\"\n\"\"\"\nimport unittest\nimport logging\n\n\nclass Solution:\n    def plusOne(self, digits):\n        return self.plusOneRecursive(digits, len(digits))\n\n    def plusOneRecursive(self, digits, n):\n        if n == 0:\n            return [1]\n\n        result = self.plusOneRecursive(digits, n - 1)\n        if digits[n - 1] == 9:\n            digits[n - 1] = 0\n            return result\n        digits[n - 1] += 1\n        return digits\n",
        "num_ids_2": 25,
        "num_ids_4": 39
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1234') == '1235'\nassert solution('1000') == '1001'\nassert solution('1') == '2'\nassert solution('0') == '1'\nassert solution('111') == '112'\n",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1,2,3\") == \"1,2,4\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '1 2 4'\nassert solution('4 3 2 1') == '4 3 2 2'\nassert solution('0') == '1'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 40
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"42\") == \"43\"\nassert solution(\"0123\") == \"0124\"\nassert solution(\"1000\") == \"1001\"\n",
        "num_ids_2": 22,
        "num_ids_4": 32
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123\") == [1, 2, 3]\nassert solution(\"456\") == [4, 5, 6]\nassert solution(\"9\") == [1, 0]\nassert solution(\"0\") == [1]\n\"\"\"\n\nclass Solution:\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        for i in range(len(digits)-1, -1, -1):\n            if digits[i] == 9:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                return digits\n        digits = [1] + digits\n        return digits\n\nassert Solution().plusOne([9, 9, 9, 9]) == [1, 0, 0, 0, 0]\n",
        "num_ids_2": 28,
        "num_ids_4": 50
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12') == '13'\nassert solution('123') == '124'\nassert solution('999') == '1000'\nassert solution('9') == '10'\nassert solution('1010') == '1011'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('123321') == '123122'\nassert solution('54321') == '543211'\nassert solution('62210') == '621111'\nassert solution('87210') == '872112'\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1234\") == \"1235\"\nassert solution(\"54321\") == \"5432\"\n\nimport sys",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1') == '4'\nassert solution('3 1') == '3'\nassert solution('3 2') == '3'\nassert solution('1 1') == '0'\nassert solution('100 100') == '100'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"3 1\") == \"4\"\nassert solution(\"3 2\") == \"5\"\nassert solution(\"20 20\") == \"200\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1') == '4'\nassert solution('2 4') == '7'\n\"\"\"\n\n\"\"\"\nCodeWars solution:",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected_result\nprint(solution(stdin))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"3 1\") == \"4\"\nassert solution(\n    \"4 2\") == \"4\"\nassert solution(\n    \"7 9\") == \"18\"\nassert solution(\n    \"4 2\") == \"4\"\nassert solution(\n    \"1 2\") == \"3\"\n\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1') == '4'\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n\") == \"4\"\n\n-----Explanation-----\nIf you add 3 and 1 then you get 4.\nIf you subtract 3 and 1 then you get 2.\nIf you multiply 3 and 1 then you get 3.\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3 1) == 4\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nimport math\n\nn, d = [int(i) for i in input().split()]\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\") == \"3\"\n\n\"\"\"\n\nimport math",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_stdin) == test_solution\n\n---\nYou are given a text message which consists of letters, digits and punctuation marks.\nYou need to:\n\n1. Print a list of all the words consisting of letters and digits.\n2. Print a list of all the words consisting of letters and punctuation marks.\n3. Print a list of all the words consisting of digits and punctuation marks.\n4. Print the list of words from the text in a given order.\n\nSample Input 1:\n\nWe have to discover the unknowns! We have to unmask the mystery\nSample Output 1:\n\n['We', 'have', 'to', 'discover', 'the', 'unknowns!', 'We', 'have', 'to', 'unmask', 'the','mystery']\n['We', 'have', 'to', 'discover', 'the', 'unknowns!', 'We', 'have', 'to', 'unmask', 'the','mystery']\n['We', 'have', 'to', 'discover', 'the', 'unknowns!', 'We', 'have', 'to', 'unmask', 'the','mystery']\n['We', 'have', 'to', 'discover', 'the', 'unknowns!', 'We', 'have', 'to', 'unmask', 'the','mystery', 'in', 'the', 'given', 'order']\n---\n\nimport re",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('4 5') == '3'\nassert solution('0 5') == '1'\nassert solution('1 1') == '0'\nassert solution('2 1') == '1'\n",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 5\n0 5\n-2 4\n3 4\n4 -4''') == '3'\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == 3\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\n\"\"\"\n\nfrom typing import Dict, List\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == '3'\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nSOLUTION\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n'''\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12\\n') == 'Yes'\nassert solution('23\\n') == 'No'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12\\n\") == \"Yes\"\nprint(solution(stdin))\n'''",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(12) == \"Yes\"\nassert solution(15) == \"No\"\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(12) == \"Yes\"\nassert solution(10) == \"No\"\n\n\"\"\"\n\nimport math",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(12) == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12\\n') == 'Yes'\nassert solution('7\\n') == 'No'\n\"\"\"\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12\\n\") == 'Yes'\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n3 5 -1\") == '12\\n8\\n10'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 -1\") == '12\\n8\\n10'\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n\nimport sys\nfrom typing import List\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 1 3 -1\\n\") == \"12\\n8\\n10\"\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 -1\") == \"12 10\"\n\"\"\"\nfrom typing import List",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n\nimport sys\nimport numpy",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 -1\\n\") == \"12\\n8\\n10\"\n\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"\n\n-----Problem Description-----\nFor example, on the figure above, the total cost of travel is 12.\n\nGiven:\nAn integer N.\nIntegers A_1, A_2,..., A_N are given.\n\nReturn:\nThe total cost of travel for the trip.\n\n-----Solution-----",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5 4 3 2 1') == '12\\n8\\n10'\n'''",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n3 5 -1''') == '''12\n8\n10'''\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a\") == \"vowel\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('a') == 'vowel'\nassert solution('z') == 'consonant'\n\n\"\"\"\n\nfrom enum import Enum\n\nclass Vowel(Enum):\n    A = 1\n    E = 2\n    I = 3\n    O = 4\n    U = 5\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == \"vowel\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"vowel\"\nprint(\"Test 1 Passed\")\n\nassert solution(\"e\") == \"vowel\"\nprint(\"Test 2 Passed\")\n\nassert solution(\"i\") == \"vowel\"\nprint(\"Test 3 Passed\")\n\nassert solution(\"o\") == \"vowel\"\nprint(\"Test 4 Passed\")\n\nassert solution(\"u\") == \"vowel\"\nprint(\"Test 5 Passed\")",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('a') == 'vowel'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"c\") == \"consonant\"\nassert solution(\"x\") == \"consonant\"\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"e\") == \"vowel\"\nassert solution(\"i\") == \"vowel\"\nassert solution(\"o\") == \"vowel\"\nassert solution(\"u\") == \"vowel\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('a') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('u') == 'vowel'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a\") == \"vowel\"\n\n\"\"\"\n\n\"\"\"\nSolution Approach\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a') == 'vowel'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(1)\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \"\"\"\n        General idea: use iterative way to find the length of the longest\n        sequence that can be extended left and right without any stones\n        \"\"\"\n\n        num_stones = len(stdin)\n        # iterate from both ends of the string to find the length of the longest\n        # sequence that can be extended left and right without any stones\n        for i in range(num_stones):\n            # start from the left end of the string\n            j = 0\n            # stop at the right end of the string\n            while j < num_stones - i:\n                # if there is a black stone, then add 1\n                if stdin[j] == 'B':\n                    j += 1\n                # if there is no black stone, then add 1 and then remove the\n                # leftmost black stone\n                elif stdin[j] == 'W':\n                    j += 1\n                    # delete the leftmost black stone\n                    stdin = stdin[:j] + stdin[j + 1:]\n                    # reset the pointer to the left end of the string\n                    j = 0\n                # if there is no black or white stone, then add 1 and remove the\n                # leftmost black stone\n                else:\n                    j += 1\n                    # delete the leftmost black stone\n                    stdin = stdin[:j] + stdin[j + 1:]\n                    # reset the pointer to the left end of the string\n                    j = 0\n            # if the leftmost black stone is at the right end of the string, then\n            # extend the rightmost black stone rightward\n            if stdin[0] == 'B':\n                stdin = stdin + 'B' * (num_stones - i)\n            # if the leftmost black stone is not at the right end of the string,\n            # then extend the rightmost black stone leftward\n            else:\n                stdin = 'B' * (num_stones - i) + stdin\n        return str(num_stones - len(stdin.replace('B', '').replace('W', '')))\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"WWWBB\") == \"1\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"WWBWW\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('BBBWW') == 1\n\"\"\"\n\n\nfrom typing import List\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"BBBWW\"\n) == \"1\"\nassert solution(\n    \"BWW\"\n) == \"1\"\nassert solution(\n    \"W\"\n) == \"0\"\nassert solution(\n    \"BBB\"\n) == \"0\"\nassert solution(\n    \"WWBWWBWW\"\n) == \"5\"\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('BBW') == '1'\nassert solution('WW') == '0'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('BBBWW') == 1\n\"\"\"\n\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BBBWW\") == \"1\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BBBWW\") == 1\n\"\"\"\n\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('BBBWW') == 1\nassert solution('WBBB') == 2\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2') == 'Yes'\nassert solution('1 21') == 'Yes'\nassert solution('1 22') == 'No'\nassert solution('1 2 3') == 'No'\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    a, b = line.split()\n    a, b = int(a), int(b)\n    if (a ** 2 + b ** 2) ** 0.5 % 1 == 0:\n        print('Yes')\n    else:\n        print('No')\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n\") == \"Yes\"\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 21\\n\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"Yes\"\nassert solution(\"3 4\") == \"No\"\nassert solution(\"1 21\") == \"Yes\"\nassert solution(\"1 3\") == \"No\"\n\n\"\"\"\nfrom math import sqrt",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12 21\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 21\\n') == 'Yes'\nassert solution('2 31\\n') == 'No'\nassert solution('1 22\\n') == 'No'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == \"Yes\"\nprint(solution(str(input())))\n\"\"\"\n\na, b = [int(x) for x in stdin.readline().split()]",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 21') == 'Yes'\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n3 1 4 1 5 9 2') == '4'\n\"\"\"\nfrom collections import defaultdict",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(TEST_CASES[0][0])) == TEST_CASES[0][1]\n\"\"\"\n\nimport sys",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 4 1 5 9 2\\n\") == \"4\"\n\"\"\"\n\n\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input_data) == expected_result\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == '4'\n\"\"\"\nimport sys",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n7\n3 1 4 1 5 9 2\n''') == '4'\n\nprint(solution(stdin=stdin))\n\n\"\"\"\n3\n1 3 5 2\n\"\"\"",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n0 1 0 0 1\") == \"1\"\nassert solution(\"3\\n3 3 3\") == \"3\"\nassert solution(\"8\\n9 7 6 1 1 4 5 2\") == \"7\"\nassert solution(\"8\\n8 8 8\") == \"1\"\n\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 67
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1 4 1 5 9 2') == '4'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 2') == \"4\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3') == '5'\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4') == '5'\nassert solution('3 5') == '8'\nassert solution('1 1') == '0'\nassert solution('4 1') == '4'\nassert solution('10 10') == '0'",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n4') == '5'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3\n4\n''') == '5'\nprint(\"PASSED\")\n\n\"\"\"",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n3\\n3') == '6'\nassert solution('1\\n3\\n1') == '4'\nassert solution('1\\n3\\n5') == '0'\nassert solution('3\\n4\\n4') == '0'\n\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 56
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n4\") == \"5\"\n\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n4\") == \"5\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('4') == '5'\n'''\n\nn = int(input())\na = int(input())\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2\") == \"5\"\n'''",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"1 1 1\") == \"NO\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('1 1 1') == 'YES'\nassert solution('1 2 3') == 'NO'\nassert solution('5 6 8') == 'YES'\nassert solution('1 2 3') == 'NO'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('1 5 8') == 'NO'\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4 6') == 'YES'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('1 2 3') == 'NO'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 6') == 'YES'\nassert solution('2 4 6') == 'YES'\nassert solution('1 2 3') == 'NO'\nassert solution('3 3 3') == 'YES'\nassert solution('3 1 3') == 'NO'\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"29\") == \"Yes\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('29') == 'Yes'\nassert solution('0') == 'No'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"29\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('29') == 'Yes'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('29') == 'Yes'\nassert solution('10') == 'No'\nassert solution('31') == 'Yes'\n\"\"\"\n\n\"\"\"\nCreated on Sat Sep 25 2020\n\n@author: Danya Struk\n\"\"\"\nimport ast",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('29') == 'Yes'\nassert solution('2') == 'No'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('29') == 'Yes'\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"29\") == \"Yes\"\nassert solution(\"23\") == \"No\"\nassert solution(\"19\") == \"Yes\"\nassert solution(\"20\") == \"No\"\nassert solution(\"12\") == \"No\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution( \"29\" ) == 'Yes'\nassert solution( \"91\" ) == 'No'\nassert solution( \"23\" ) == 'Yes'\nassert solution( \"44\" ) == 'Yes'\nassert solution( \"54\" ) == 'No'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"29\") == \"Yes\"\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\\n\") == \"1\"\nassert solution(\"2 2 1\\n\") == \"3\"\nassert solution(\"2 2 2\\n\") == \"2\"\nassert solution(\"3 3 3\\n\") == \"3\"\nassert solution(\"3 2 1\\n\") == \"4\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 1 3\n1 2 3\n4 3 2''') == '7'",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5 3\\n1 2 4') == '1'\nassert solution('5 4 4\\n1 2 3\\n1 3 3') == '0'\nassert solution('4 3 4\\n1 2 3') == '1'\n\n\"\"\"\n\n\"\"\"\n\nThe optimal solution is as follows:\n - First, travel from Square 1 to Square 2. Here, there is a toll gate in Square 2, so the cost of 1 is incurred.\n - Then, travel from Square 2 to Square 3. This time, no cost is incurred.\n - Now, we are in Square 3 and we have reached the goal.\nIn this case, the total cost incurred is 1.\n",
        "num_ids_2": 39,
        "num_ids_4": 56
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 3\\n1 2 3 4') == '1'\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2\\n1 2 3\\n\") == \"1\"\nassert solution(\"5 3 3\\n1 2 4\\n\") == \"1\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 1 2\") == \"1\"\nassert solution(\"5 3 1 2\") == \"4\"\nassert solution(\"5 3 3 1 2\") == \"3\"\nassert solution(\"8 1 2 3 4 5 6 7 8\") == \"6\"\n\"\"\"\nfrom typing import List\nfrom collections import defaultdict\n",
        "num_ids_2": 26,
        "num_ids_4": 58
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\") == \"1\"\n\"\"\"\nfrom collections import deque",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 3\\n1 2 4\\n\") == \"1\"\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_stdin_1) == test_stdout_1\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n#.#\\n###\\n.#.\") == 'Yes'\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n.\\n###\\n.#.\") == \"Yes\"\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n.#\\n###\\n.#\\n\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"3 3\\n\"\n    \".#.\\n\"\n    \"###\\n\"\n    \".#.\") == \"Yes\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"#.#\") == \"Yes\"\nassert solution(\"###\") == \"Yes\"\nassert solution(\"###.\") == \"No\"\nassert solution(\"###..\") == \"No\"\nassert solution(\"#.##\") == \"No\"\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n.#\\n###\\n.#\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n.#.\\n###\\n.#.\") == \"Yes\"\nassert solution(\"3 3\\n.#.\\n###\\n#.#\") == \"No\"\nassert solution(\"3 3\\n.##\\n#.#\\n###\") == \"No\"\n\"\"\"",
        "num_ids_2": 43,
        "num_ids_4": 65
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"#.#\") == \"Yes\"\nassert solution(\"#.#\\n...#\\n...#\\n...#\") == \"No\"\n\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '3 3\\n'\n    '#.#\\n'\n    '###\\n'\n    '#.#'\n    ) == 'Yes'\n\n---",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\"\n\na, b, c = map(int, input().split())\na, b, c = sorted([a, b, c])\nprint(\"Yes\" if a*2 + b*2 + c*2 <= a + b + c else \"No\")\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(input())\n\n-------",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"100 90 100\") == \"Yes\"\nassert solution(\"10 20 30\") == \"No\"\nassert solution(\"10 10 10\") == \"Yes\"\nassert solution(\"10 10 30\") == \"No\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 20 30\") == \"Yes\"\nassert solution(\"10 30 20\") == \"No\"\nassert solution(\"10 20 10\") == \"No\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 30 20') == 'Yes'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '10 30 20'\n) == 'Yes'\nassert solution(\n    '10 20 10'\n) == 'Yes'\nassert solution(\n    '20 10 10'\n) == 'No'\nassert solution(\n    '3 1 2'\n) == 'No'\n\"\"\"\n\na, b, c = map(int, input().split())",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 30 20') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"20 20 20\") == \"No\"\nassert solution(\"30 30 20\") == \"Yes\"\nassert solution(\"30 30 30\") == \"No\"\nassert solution(\"100 100 100\") == \"Yes\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 8 7 1') == 'Left'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\nassert solution(\"1 1 1 1\") == \"Balanced\"\nassert solution(\"9 9 9 9\") == \"Right\"\n\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 40
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\nassert solution(\"8 7 3 1\") == \"Right\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\nassert solution(\"1 2 3 4\") == \"Balanced\"\nassert solution(\"6 6 6 6\") == \"Right\"\n\"\"\"\n\n\"\"\"\n4 3 2 1\n\n3\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 40
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\nassert solution(\"1 1 1 1\") == \"Balanced\"\nassert solution(\"1 2 3 4\") == \"Right\"\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 40
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"\n\nimport sys\n\nA, B, C, D = [int(i) for i in sys.stdin.readline().strip().split(' ')]",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\") == \"8\"\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 1 0 1 0 0\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n') == '8'\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4\n0 0 0 1 0\n0 0 1 0 0\n0 1 0 0 0\n0 0 0 0 0\n\"\"\") == \"8\"\n\n\"\"\"\nSolution:\n- There are N shops in the street and Joisino is planning to open a shop in the street. For each of the five weekdays, we have information of the business hours of those shops, as explained below.\n- F_{i,j,k}=1, if the i-th shop is open during the k-th period on day j.\n- F_{i,j,k}=0, if the i-th shop is closed during the k-th period on day j.\n- For each of the five weekdays, we have exactly two shops that are open during the whole day.\n- For example, if Monday is day 1, then the information of the shop that is open on Monday is F_{1,1,1}=F_{2,1,1}=F_{3,1,1}=F_{4,1,1}=F_{5,1,1}=1, F_{1,1,2}=F_{2,1,2}=F_{3,1,2}=F_{4,1,2}=F_{5,1,2}=0.\n- For each of the five weekdays, there are ten periods in which both the shop and Joisino's shop are open.\n- Here, the days of the week are denoted as follows. Monday: Day 1, Tuesday: Day 2, Wednesday: Day 3, Thursday: Day 4, Friday: Day 5. Also, the morning is denoted as Period 1, and the afternoon is denoted as Period 2.\n- Let c_i be the number of periods during which both the shop and Joisino's shop are open. Then, the profit of Joisino's shop will be P_{1,c_1}+P_{2,c_2}+...+P_{N,c_N}.\n- Find the maximum possible profit of Joisino's shop when she decides whether her shop is open during each period, making sure that it is open during at least one period.\n\n- Input is given from Standard Input in the following format:\n5\n1 1 0 1 0 0 1 0 1\n0 1 0 1 0 0 1 0 1\n0 1 0 1 0 0 1 0 1\n0 1 0 1 0 0 1 0 1\n0 1 0 1 0 0 1 0 1\n\n- Output is given to Standard Output in the following format:\n8\n\"\"\"\n",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 1 0 1 0 0 1 0 1') == 8\n\"\"\"\n\nN = int(stdin.readline())\n\nshops = list(map(int, stdin.readline().split(' ')))\n\nn_periods = [int(stdin.readline()) for _ in range(N)]\n\nn_open_periods = [0 for _ in range(N)]\nn_closed_periods = [0 for _ in range(N)]\n\nfor i in range(N):\n    for j in range(6):\n        if shops[i * 6 + j] == 1:\n            n_open_periods[i] += 1\n            n_closed_periods[i] += j + 1\n\nprint(max(n_open_periods[i] * n_periods[i] + n_closed_periods[i] for i in range(N)))\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 0 1 0 0 0 1 0 1') == '8'\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n') == '8'\nassert solution('2\\n1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n') == '16'\n\n-----Performance-----\nTime limit: 10 seconds\nMemory limit: 128 MB\n\"\"\"\n\n\nimport sys\n",
        "num_ids_2": 80,
        "num_ids_4": 80
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'''2\n0 0 1\n0 0 1\n''') == '2'\n\nassert solution(\n'''2\n1 0 1\n0 0 1\n''') == '4'\n\nassert solution(\n'''2\n1 1 0 1\n0 0 1\n''') == '8'\n\nassert solution(\n'''1\n1 1\n''') == '1'\n\nassert solution(\n'''3\n0 0 1\n0 0 1\n''') == '4'",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 1 1 0 0 1 1 1 1 1\") == \"14\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\") == '8'\n\nfrom math import prod\nfrom collections import defaultdict\nfrom itertools import zip_longest\nfrom functools import reduce",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"1 1 0 1 0 0 0 1 0 1\") == \"8\"\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"3 4\"\n) == \"Yes\"\nassert solution(\n\"3 4\"\n) == \"No\"\nassert solution(\n\"5 4\"\n) == \"Yes\"\nassert solution(\n\"5 4\"\n) == \"No\"\nassert solution(\n\"1 9\"\n) == \"Yes\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"2-4A0\") == \"No\"\nassert solution(\"6-43B\") == \"No\"\n\nprint(solution(stdin))\n\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 40
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nhttps://atcoder.jp/contests/abc007/tasks/abc007_3\n\nH W: 10x10\n0123456789\n0123456789\n0123456789\n0123456789\n0123456789\n0123456789\n0123456789\n0123456789\n0123456789\n\n- h w: 5x5\n012345\n01234\n56789\n\"\"\"\n\n\"\"\"\n8\n0 0\n0 1\n0 2\n0 3\n1 0\n1 1\n1 2\n1 3\n2 0\n2 1\n2 2\n2 3\n3 0\n3 1\n3 2\n3 3\n\"\"\"\n\n\"\"\"\nh w:\n00 01 02\n03 04 05\n06 07 08\n09 10 11\n12 13 14\n15 16 17\n18 19 20\n21 22 23\n24 25 26\n27 28 29\n30 31 32\n33 34 35\n36 37 38\n39 40 41\n42 43 44\n45 46 47\n48 49 50\n51 52 53\n54 55 56\n57 58 59\n60 61 62\n63 64 65\n66 67 68\n69 70 71\n72 73 74\n75 76 77\n78 79 80\n81 82 83\n84 85 86\n87 88 89\n90 91 92\n93 94 95\n96 97 98\n99 100 101\n\"\"\"\n\n\"\"\"\nh w:\n00 01 02\n03 04 05\n06 07 08\n09 10 11\n12 13 14\n15 16 17\n18 19 20\n21 22 23\n24 25 26\n27 28 29\n30 31 32\n33 34 35\n36 37 38\n39 40 41\n42 43 44\n45 46 47\n48 49 50\n51 52 53\n54 55 56\n57 58 59\n60 61 62\n63 64 65\n66 67 68\n69 70 71\n72 73 74\n75 76 77\n78 79 80\n81 82 83\n84 85 86\n87 88 89\n90 91 92\n93 94 95\n96 97 98\n99 100 101\n\"\"\"\n\n\"\"\"\nh w:\n00 01 02\n03 04 05\n06 07 08\n09 10 11\n12 13 14\n15 16 17\n18 19 20\n21 22 23\n24 25 26\n27 28 29\n30 31 32\n33 34 35\n36 37 38\n39 40 41\n42 43 44\n45 46 47\n48 49 50\n51 52 53\n54 55 56\n57 58 59\n60 61 62\n63 64 65\n66 67 68\n69 70 71\n72 73 74\n75 76 77\n78 79 80\n81 82 83\n84 85 86\n87 88 89\n90 91 92\n93 94 95\n96 97 98\n99 100 101\n\"\"\"\n\n\"\"\"\nh w:\n00 01 02\n03 04 05\n06 07 08\n09 10 11\n12 13 14\n15 16 17\n18 19 20\n21 22 23\n24 25 26\n27 28 29\n30 31 32\n33 34 35\n36 37 38\n39 40 41\n42 43 44\n45 46 47\n48 49 50\n51 52 53\n54 55 56\n57 58 59\n60 61 62\n63 64 65\n66 67 68\n69 70 71\n72 73 74\n75 76 77\n78 79 80\n81 82 83\n84 85 86\n87 88 89\n90 91 92\n93 94 95\n96 97 98\n99 100 101\n\"\"\"\n\n\"\"\"\nh w:\n00 01 02\n03 04 05\n06 07 08\n09 10 11\n12 13 14\n15 16 17\n18 19 20\n21 22 23\n24 25 26\n27 28 29\n30 31 32\n33 34 35\n36 37 38\n39 40 41\n42 43 44\n45 46 47\n48 49 50\n51 52 53\n54 55 56\n57 58 59\n60 61 62\n63 64 65\n66 67 68\n69 70 71\n72 73 74\n75 76 77\n78 79 80\n81 82 83\n84 85 86\n87 88 89\n90 91 92\n93 94 95\n96 97 98\n99 100 101\n\"\"\"\n\n\"\"\"\nh w:\n00 01 02\n03 04 05\n06 07 08\n09 10 11\n12 13 14\n15 16 17\n18 19 20\n21 22 23\n24 25 26\n27 28 29\n30 31 32\n33 34 35\n36 37 38\n39 40 41\n42 43 44\n45 46 47\n48 49 50\n51 52 53\n54 55 56\n57 58 59\n60 61 62\n63 64 65\n66 67 68\n69 70 71\n72 73 74\n75 76 77\n78 79 80\n81 82 83\n84 85 86\n87 88 89\n90 91 92\n93 94 95\n96 97 98\n99 100 101\n\"\"\"\n\n\"\"\"\nh w:\n00 01 02\n03 04 05\n06 07 08\n09 10 11\n12 13 14\n15 16 17\n18 19 20\n21 22 23\n24 25 26\n27 28 29\n30 31 32\n33 34 35\n36 37 38\n39 40 41\n42 43 44\n45 46 47\n48 49 50\n51 52 53\n54 55 56\n57 58 59\n60 61 62\n63 64 65\n66 67 68\n69 70 71\n72 73 74\n75 76 77\n78 79 80\n81 82 83\n84 85 86\n87 88 89\n90 91 92\n93 94 95\n96 97 98\n99 100 101\n\"\"\"\n\n\"\"\"\nh w:\n00 01 02\n03 04 05\n06 07 08\n09 10 11\n12 13 14\n15 16 17\n18 19 20\n21 22 23\n24 25 26\n27 28 29\n30 31 32\n33 34 35\n36 37 38\n39 40 41\n42 43 44\n45 46 47\n48 49 50\n51 52 53\n54 55 56\n57 58 59\n60 61 62\n63 64 65\n66 67 68\n69 70 71\n72 73 74\n75 76 77\n78 79 80\n81 82 83\n84 85 86\n87 88 89\n90 91 92\n93 94 95\n96 97 98\n99 100 101\n\"\"\"\n\n\"\"\"\nh w:\n00 01 02\n03 04 05\n06 07 08\n09 10 11\n12 13 14\n15 16 17\n18 19 20\n21 22 23\n24 25 26\n27 28 29\n30 31 32\n33 34 35\n36 37 38\n39 40 41\n42 43 44\n45 46 47\n48 49 50\n51 52 53\n54 55 56\n57 58 59\n60 61 62\n63 64 65\n66 67 68\n69 70 71\n72 73 74\n75 76 77\n78 79 80\n81 82 83\n84 85 86\n87 88 89\n90 91 92\n93 94 95\n96 97 98\n99 100 101\n\"\"\"\n\n\"\"\"\nh w:\n00 01 02\n03 04 05\n06 07 08\n09 10 11\n12 13 14\n15 16 17\n18 19 20\n21 22 23\n24 25 26\n27 28 29\n30 31 32\n33 34 35\n36 37 38\n39 40 41\n42 43 44\n45 46 47\n48 49 50\n51 52 53\n54 55 56\n57 58 59\n60 61 62\n63 64 65\n66 67 68\n69 70 71\n72 73 74\n75 76 77\n78 79 80\n81 82 83\n84 85 86\n87 88 89\n90 91 92\n93 94 95\n96 97 98\n99 100 101\n\"\"\"\n\n\"\"\"\nh w:\n00 01 02\n03 04 05\n06 07 08\n09 10 11\n12 13 14\n15 16 17\n18 19 20\n21 22 23\n24 25 26\n27 28 29\n30 31 32\n33 34 35\n36 37 38\n39 40 41\n42 43 44\n45 46 47\n48 49 50\n51 52 53\n54 55 56\n57 58 59\n60 61 62\n63 64 65\n66 67 68\n69 70 71\n72 73 74\n75 76 77\n78 79 80\n81 82 83\n84 85 86\n87 88 89\n90 91 92\n93 94 95\n96 97 98\n99 100 101\n\"\"\"\n\n\"\"\"\nh w:\n00 01 02\n03 04 05\n06 07 08\n09 10 11\n12 13 14\n15 16 17\n18 19 20\n21",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == 'Yes' or 'No'\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"269-6651\") == \"No\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\nabcde\") == \"Yes\"\nassert solution(\"1 2\\nabc1de\") == \"Yes\"\nassert solution(\"1 2\\nabc-de\") == \"Yes\"\nassert solution(\"1 2\\nabcd1e\") == \"No\"\nassert solution(\"1 2\\nab-cd1e\") == \"No\"\n",
        "num_ids_2": 31,
        "num_ids_4": 64
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4') == 'Yes'\nassert solution('3 5') == 'No'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('269-6650') == 'Yes'\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"253-5913\") == \"Yes\"\nassert solution(\"123-4567\") == \"Yes\"\nassert solution(\"567-890\") == \"Yes\"\nassert solution(\"800-555-1234\") == \"No\"\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 2 6''') == '1'\nassert solution('''1 1 2''') == '0'\nassert solution('''3 2 1''') == '2'\nassert solution('''4 3 8''') == '0'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"3 2 6\"\n) == \"1\"\n\n\"\"\"\nimport os\nimport sys\nimport unittest\n\n\nclass DistanceBetweenTwoRectangles:\n    def __init__(self):\n        self.stdin = sys.stdin\n        self.stdout = sys.stdout\n\n    def read_input(self):\n        f = self.stdin\n        W, a, b = [int(x) for x in f.readline().strip().split(' ')]\n        return W, a, b\n\n    def print_output(self, output):\n        f = self.stdout\n        f.write(str(output) + \"\\n\")\n\n    def solution(self):\n        W, a, b = self.read_input()\n        print(min(b-a, a+W-b))\n\n\nclass TestDistanceBetweenTwoRectangles(unittest.TestCase):\n    def setUp(self):\n        self.solution = DistanceBetweenTwoRectangles()\n\n    def test_one(self):\n        W, a, b = 3, 2, 6\n        expected = 1\n        self.solution.read_input = lambda: [W, a, b]\n        self.solution.print_output = lambda x: self.assertEqual(x, expected)\n        self.solution.solution()\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2 6\\n') == '1'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 6\") == '1'\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 6\") == '1'\nassert solution(\"1 2 2\") == '0'\nassert solution(\"4 5 1\") == '3'\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 6\") == \"1\"\nassert solution(\"5 5 2\") == \"0\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\"\n\nW, a, b = map(int, stdin.readline().split())\n\na = min(a, W)",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 8 2\") == \"3 4 7 8\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 8 2') == '3 4 7 8'\nprint('Passed')\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\n\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 8 2') == '3 4 7 8'\nprint('Passed')\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '''3 8 2'''\n) == '''3\n4\n7\n8'''\n\nassert solution(\n    '''1 10 5'''\n) == '''1\n2\n4\n5\n6\n7\n8\n9'''\n\nassert solution(\n    '''10 10 10'''\n) == '''1\n2\n3\n4\n5\n6\n7\n8\n9'''\n\nprint('PASSED')\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\nprint('all tests past')\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\n\"\"\"\n\nfrom queue import PriorityQueue\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 8 2') == '3 4 7 8'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\nassert solution(\"AtCoder Grand Contest\") == \"GC\"\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\"\n\nimport math",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\nassert solution(\"AtCoder Intermediate Contests\") == \"AIAC\"\nassert solution(\"AtCoder Senior Contests\") == \"ASCC\"\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 47
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\nassert solution(\"3 5 6\") == \"NO\"\nassert solution(\"1 2 5\") == \"NO\"\nassert solution(\"2 3 7\") == \"YES\"\nassert solution(\"2 4 7\") == \"YES\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 4\\n\") == \"YES\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(A, B, X) == \"YES\"\n\"\"\"\n\na, b, x = map(int, stdin.readline().split())\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('123\\n') == ''\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 27
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 4\") == \"YES\"\nassert solution(\"5 5 4\") == \"NO\"\nassert solution(\"1 1 1\") == \"YES\"\nassert solution(\"2 5 6\") == \"NO\"\n\n\"\"\"\n\nimport math\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\nassert solution(\"5 5 6\") == \"NO\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5 4') == 'YES'\n\"\"\"\n\nimport sys\n\nn = list(map(int, sys.stdin.readline().split()))\n\na = n[0]\nb = n[1]\nx = n[2]\n\nprint(\"YES\") if x >= a+b else print(\"NO\")",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100 17') == '83'\nprint(solution('100 17'))",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1) == '0'\nassert solution(5) == '4'\nassert solution(17) == '8'\nassert solution(100) == '83'",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100 17') == '83'\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''100 17''') == 83\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 17\") == \"83\"\nprint(solution(\"100 17\"))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 17\\n\") == \"83\"\nassert solution(\"0 17\\n\") == \"0\"\nassert solution(\"7 15\\n\") == \"18\"\n\"\"\"\n\nfrom math import ceil\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100 17') == '83'\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 17\") == \"83\"\n\"\"\"\n\nX, t = map(int, input().split())\nprint(X - X * (t / (X + 1)))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 17\") == 83\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 17\\n\") == \"83\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n10\\n2') == '20'\n\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1) == 1\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('2') == '2'\nassert solution('1 1') == '2'\nassert solution('1 2') == '2'\n",
        "num_ids_2": 18,
        "num_ids_4": 39
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100 100\\n1000000000 1000000000') == '1000000000000000000'\nprint(solution('2\\n1 0\\n1 0\\n'))\n\n'''\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000000000 1000000000') == '1000000000000000000'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\n1 1000000000\n''') == '1000000000000000000'\nprint('Passed')\n\n\"\"\"\n--- Part Two ---\nNow, add support for exponentiation. Implement a new version of this function, which supports unary negation.\nThe function must still return the result when given a negative number, and must throw an error if given a number\nthat is too large to represent as an integer.\n\nFor example, again using the above example:\nsolution(1, -1) = 0\nsolution(2, -1) = 2\nsolution(2, 1) = 4\nsolution(4, 1) = 2\nsolution(4, 2) = 16\nsolution(4, 3) = 64\nsolution(4, 4) = 256\nsolution(4, 5) = 1024\nsolution(4, -2) = 0\nsolution(4, -3) = 0\nsolution(4, -4) = 0\nsolution(4, -5) = 0\nsolution(100, -1) = -100\nsolution(100, 0) = 0\nsolution(100, 1) = 100\nsolution(100, 2) = 10000\nsolution(100, 3) = 100000\nsolution(100, 4) = 1000000\nsolution(100, 5) = 10000000\nsolution(100, 6) = 100000000\nsolution(100, -7) = -100000000\nsolution(100, -8) = -10000000000\nsolution(100, -9) = -1000000000000\nsolution(100, -10) = -100000000000000\nsolution(100, -11) = -1000000000000000\nsolution(100, -12) = -100000000000000000\nsolution(100, -13) = -10000000000000000\nsolution(100, -14) = -1000000000000000000\nsolution(100, -15) = -10000000000000000000\nsolution(100, -16) = -100000000000000000000\nsolution(100, -17) = -1000000000000000000000\nsolution(100, -18) = -10000000000000000000000\nsolution(100, -19) = -100000000000000000000000\nsolution(100, -20) = -1000000000000000000000000\nsolution(100, -21) = -10000000000000000000000000\nsolution(100, -22) = -100000000000000000000000000\nsolution(100, -23) = -1000000000000000000000000000\nsolution(100, -24) = -10000000000000000000000000000\nsolution(100, -25) = -100000000000000000000000000000\nsolution(100, -26) = -1000000000000000000000000000000\nsolution(100, -27) = -10000000000000000000000000000000\nsolution(100, -28) = -1000000000000000000000000000000000\nsolution(100, -29) = -100000000000000000000000000000000\nsolution(100, -30) = -10000000000000000000000000000000000\nsolution(100, -31) = -100000000000000000000000000000000000\nsolution(100, -32) = -1000000000000000000000000000000000000\nsolution(100, -33) = -10000000000000000000000000000000000000\nsolution(100, -34) = -100000000000000000000000000000000000000\nsolution(100, -35) = -1000000000000000000000000000000000000000\nsolution(100, -36) = -10000000000000000000000000000000000000000\nsolution(100, -37) = -100000000000000000000000000000000000000000\nsolution(100, -38) = -1000000000000000000000000000000000000000000\nsolution(100, -39) = -10000000000000000000000000000000000000000000\nsolution(100, -40) = -100000000000000000000000000000000000000000000\nsolution(100, -41) = -1000000000000000000000000000000000000000000000\nsolution(100, -42) = -10000000000000000000000000000000000000000000000\nsolution(100, -43) = -100000000000000000000000000000000000000000000000\nsolution(100, -44) = -10000000000000000000000000000000000000000000000000\nsolution(100, -45) = -1000000000000000000000000000000000000000000000000\nsolution(100, -46) = -100000000000000000000000000000000000000000000000000\nsolution(100, -47) = -1000000000000000000000000000000000000000000000000000\nsolution(100, -48) = -10000000000000000000000000000000000000000000000000000\nsolution(100, -49) = -100000000000000000000000000000000000000000000000000000\nsolution(100, -50) = -1000000000000000000000000000000000000000000000000000000\nsolution(100, -51) = -10000000000000000000000000000000000000000000000000000000\nsolution(100, -52) = -100000000000000000000000000000000000000000000000000000000\nsolution(100, -53) = -1000000000000000000000000000000000000000000000000000000000\nsolution(100, -54) = -10000000000000000000000000000000000000000000000000000000000\nsolution(100, -55) = -100000000000000000000000000000000000000000000000000000000000\nsolution(100, -56) = -1000000000000000000000000000000000000000000000000000000000000\nsolution(100, -57) = -10000000000000000000000000000000000000000000000000000000000000\nsolution(100, -58) = -100000000000000000000000000000000000000000000000000000000000000\nsolution(100, -59) = -1000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -60) = -100000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -61) = -10000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -62) = -1000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -63) = -10000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -64) = -100000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -65) = -1000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -66) = -10000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -67) = -100000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -68) = -1000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -69) = -10000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -70) = -100000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -71) = -1000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -72) = -10000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -73) = -100000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -74) = -1000000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -75) = -10000000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -76) = -1000000000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -77) = -100000000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -78) = -10000000000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -79) = -100000000000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -80) = -1000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -81) = -10000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -82) = -100000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -83) = -1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -84) = -10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -85) = -100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -86) = -1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -87) = -10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -88) = -100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -89) = -1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -90) = -10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -91) = -100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -92) = -10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -93) = -100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -94) = -1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -95) = -10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -96) = -100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -97) = -1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nsolution(100, -98) = -10000000000000000",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 2 3') == '24'\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 1 1 1') == '1'\nassert solution('3\\n1 2 3') == '6'\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('3\\n1 1000000000') == '-1'\n\n-----",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1\\n1\") == \"1\"\nassert solution(\"2\\n1\\n0\") == \"0\"\nassert solution(\"1\\n0\\n0\") == \"0\"\n\"\"\"\n\nimport math",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2018 218\") == \"Yes\"\nprint(solution(\"2018 218\"))",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2018\\n218') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2018\\n218\\n\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2018\n218''') == 'Yes'\nassert solution('''10\n2\n\n''') == 'No'\n\n-----TEST FILE-----\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"218\\n2018\") == \"Yes\"\nassert solution(\"218\\n2017\") == \"No\"\n\"\"\"\n\n\"\"\"\nn, a = [int(s) for s in input().split()]\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"218\") == \"Yes\"\nassert solution(\"2018\") == \"Yes\"\nassert solution(\"17\") == \"No\"\nassert solution(\"24\") == \"No\"\nassert solution(\"100\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = int(sys.stdin.readline().rstrip())\n\ncoins = [500, 100, 50, 10, 5, 1]\ncount = 0\n\nfor coin in coins:\n    count += N // coin\n    N %= coin",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('218\\n2018') == 'Yes'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('218\\n2018') == 'Yes'\nprint(solution(stdin))\n\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\nassert solution(\"2 1 1\") == \"dangerous\"\nassert solution(\"1 1 1\") == \"dangerous\"\n\"\"\"\n\nx, a, b = [int(s) for s in stdin.split(\" \")]\ndays_before_x = x - a\n",
        "num_ids_2": 25,
        "num_ids_4": 38
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\"\"\"\nfrom dataclasses import dataclass\nfrom dataclasses import replace\nimport sys\n\n@dataclass(frozen=True)\nclass Food:\n    day: int\n    best: int\n    delicious: bool\n    dangerous: bool",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\nsolution(\"4 3 6\")\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 6') =='safe'\nprint(solution(input()))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 6') =='safe'\n\n-----Solution-----\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\nassert solution(\"5 3 7\") == \"dangerous\"\nassert solution(\"2 2 1\") == \"dangerous\"\nassert solution(\"0 0 0\") == \"dangerous\"\n\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 51
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 6\\n\") == \"safe\"\nassert solution(\"4 3 2\\n\") == \"dangerous\"\nassert solution(\"4 3 7\\n\") == \"dangerous\"\nassert solution(\"4 3 0\\n\") == \"dangerous\"\nassert solution(\"5 3 6\\n\") == \"dangerous\"\n",
        "num_ids_2": 29,
        "num_ids_4": 59
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\"\"\"\n\nfrom __future__ import print_function\n\nimport sys\n\nimport stdio\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == '9'\nassert solution('5') == '3'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n5') == '4'\nassert solution('10\\n15') == '12'\n\"\"\"\n\nn = input()",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n') == '1'\nassert solution('4\\n') == '2'\nassert solution('10\\n') == '9'\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100\") == \"99\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '3'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"9\"\nprint(solution(\"10\"))\n\nassert solution(\"1\") == \"1\"\nprint(solution(\"1\"))\n\nassert solution(\"2\") == \"1\"\nprint(solution(\"2\"))\n\nassert solution(\"3\") == \"2\"\nprint(solution(\"3\"))\n\nassert solution(\"4\") == \"2\"\nprint(solution(\"4\"))",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == '9'\nassert solution('1') == '1'\nassert solution('10^10') == '991'\n\"\"\"\n\nn = int(input())\n\nfor x in range(n):\n    if (x + 1) ** 0.5 % 1 == 0:\n        print(x + 1)\n        break",
        "num_ids_2": 20,
        "num_ids_4": 33
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == '9'\nassert solution(\"1\") == '0'\nassert solution(\"2\") == '1'\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == '9'\nprint(solution('10'))\n\nInput:\n20\n\nOutput:\n19\n\"\"\"\n\n\"\"\"\nThe solution is to find the largest square number that is less than N, and that is not a perfect square.\n\nThe solution to the problem is to check if we can find a number in [1, N) that is not a perfect square.\n\nWe can look for the first number in [1, N) that is not a perfect square.\n\nFor example, if N is 15, we would check 4, 9, and 16.\n\nSince 15 is not a perfect square, we can use 4 and 9 as the endpoints of our interval.\n\nOnce we have the beginning and endpoints of our interval, we can find the largest square number in it.\n\nBecause N is not a perfect square, so there is a number in (1, N) that is not a perfect square.\n\nThis means that the largest square number in the interval [1, N) is N.\n\"\"\"\n\nimport math\nimport sys\n\nsys.setrecursionlimit(10000)\n\nN = int(input())\n\nstart = int(math.sqrt(N))",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(':') == ''\n\"\"\"\n\nimport sys\nimport math\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2 3') == '10'\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\\n\") == \"10\"\n\"\"\"\nimport sys\nimport math",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n2 3\n1 1\n3 2''') == '10'\nassert solution('''4\n3 2\n1 1\n3 2\n2 2\n1 2''') == '6'\nassert solution('''10\n6 6\n4 5\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4''') == '20'\n\nprint('Success')",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 1\") == \"10\"\n\"\"\"\n\nimport sys\nimport math\nimport itertools\n\nsys.stdin = open(\"input.txt\")\n\nN = int(sys.stdin.readline())\nT_A = list(map(int, sys.stdin.readline().split()))\n\nans = sum(T_A)\n\nfor a, t in itertools.combinations(T_A, 2):\n    ans += math.gcd(a, t)\nprint(ans)\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\\n\") == 10\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n1 1\\n3 2') == '10'\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\":\n2 3\n1 1\n3 2\n\") == 10\nassert solution(\":\n3\n2 3\n1 1\n3 2\n\") == 10\n\n\"\"\"\n\nfrom sys import stdin\nimport math\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3\n2 3\n1 1\n3 2\n\"\"\") == \"10\"\n\n\"\"\"\n\uccab \ubc88\uc9f8 \uc904\uc5d0 \uc815\uc218 N\uc744 \uc785\ub825\ubc1b\ub294\ub2e4.\n\ub450 \ubc88\uc9f8 \uc904\ubd80\ud130 N\uac1c\uc758 \uc904\uc5d0 \ud0c0\uc77c\ub4e4\uc758 \ub192\uc774\uac00 \uc785\ub825\ub41c\ub2e4.\n\uac01 \uc904\ub9c8\ub2e4 \ud0c0\uc77c\uc758 \uc218\ub294 T_i \uc640 A_i(1\u2266i\u2266N)\uc774 \uc785\ub825\ub418\uba70, \uac01 \uc904\uc740 \uacf5\ubc31\uc73c\ub85c \ubd84\ub9ac\ub418\uc5b4 \uc788\ub2e4.\n\uc608\ub97c \ub4e4\uc5b4, \uc138 \uc904\uc758 \uc785\ub825\uc774 \uc788\uc744 \uacbd\uc6b0\uc5d0\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \ub0b4\uc6a9\uc774 \uc785\ub825\ub41c\ub2e4.\n\n2 3\n1 1\n3 2\n\n\uc774\ub7f0 \uc785\ub825\uc744 \ubc1b\uc558\uc744 \ub54c, 2\ubc88\uc9f8 \uc904\ubd80\ud130 3\ubc88\uc9f8 \uc904\uae4c\uc9c0 \uc785\ub825\ub418\ub294 \ub0b4\uc6a9\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n\n2 3\n1 1\n3 2\n\n2\ubc88\uc9f8 \uc904\uc758 \uacbd\uc6b0, 1\uc740 2\ubc88\uc9f8 \uc904\uc758 \uac00\uc7a5 \uc67c\ucabd\uc774\uace0, 3\uc740 2\ubc88\uc9f8 \uc904\uc758 \uac00\uc7a5 \uc624\ub978\ucabd\uc5d0 \uc704\uce58\ud558\uae30 \ub54c\ubb38\uc5d0, 1\uc740 2\ubc88\uc9f8 \uc904\uc758 \uac00\uc7a5 \uc67c\ucabd\uc774\uace0, 3\uc740 2\ubc88\uc9f8 \uc904\uc758 \uac00\uc7a5 \uc624\ub978\ucabd\uc5d0 \uc704\uce58\ud558\uae30 \ub54c\ubb38\uc5d0 \uac01 \uc22b\uc790\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774\ub2e4.\n\ub530\ub77c\uc11c 2\ubc88\uc9f8 \uc904\uc758 \ub2f5\uc740 3\uc774\ubbc0\ub85c 10\uc774 \ub41c\ub2e4.\n\"\"\"",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\"\n\nimport re",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\nassert solution(\"uncopyrightable\") == \"yes\"\nassert solution(\"uncopyrightable\") == \"yes\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcdef') == 'no'\nassert solution('abcde') == 'no'\nassert solution('abc') == 'no'\nassert solution('abcabc') == 'yes'\nassert solution('aabbcc') == 'yes'",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"WEEWW\") == 1\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"WEWEWEWEW\") == 1\nassert solution(\"WEEWWEW\") == 0\nassert solution(\"WWE\") == 0\nassert solution(\"WWEWWWW\") == 2\nassert solution(\"WWEEWWEWE\") == 1\n",
        "num_ids_2": 23,
        "num_ids_4": 43
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WEEWW\") == 1\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5WEEWW') == '1'\n\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5WEEWW') == 1\nassert solution('3EEWW') == 0\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('WEEWW') == 1\nassert solution('WWWE') == 0\nassert solution('WWEW') == 0\n\"\"\"\nimport itertools",
        "num_ids_2": 19,
        "num_ids_4": 28
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('WEEWW') == 1\nassert solution('WWWEW') == 0\n\nprint(solution(stdin))\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('WEEWW') == '1'\n\"\"\"\n\nN, S = [input() for _ in range(2)]\nN = int(N)\nS = list(S)\nE, W = [0]*N, [0]*N\nfor i, s in enumerate(S):\n    if s == \"E\":\n        E[i] = 1\n    elif s == \"W\":\n        W[i] = 1\n\nans = 0\nfor i, e in enumerate(E):\n    for j in range(i):\n        if E[j] and W[j] and (not W[i] or not E[i]):\n            ans += 1\n\nprint(ans)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"WEEWW\") == 1\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WEEWW\") == 1\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\nassert solution('3\\n') == '3'\n",
        "num_ids_2": 17,
        "num_ids_4": 41
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n1 4') == '2\\n2\\n1\\n1'\n\"\"\"\nimport sys",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 3\n1 2\n2 3\n1 4''') == '''2\n2\n1\n1'''\n\nassert solution('''4 3\n1 2\n2 3\n1 4\n1 3''') == '''1\n2\n1\n1'''\n\nassert solution('''5 3\n1 2\n2 3\n1 4\n4 5\n3 5''') == '''4\n2\n1\n2\n1'''\n\nassert solution('''5 3\n1 2\n1 3\n1 4\n4 5\n2 4''') == '''3\n1\n1\n1\n1'''\n\nassert solution('''4 4\n1 2\n2 3\n1 4\n2 4''') == '''2\n2\n1\n1\n1\n1\n2\n2\n'''\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\nassert solution(\"3 2\\n1 2\\n2 3\") == \"1\\n1\\n1\"\nassert solution(\"3 3\\n1 2\\n2 3\\n1 3\") == \"3\\n3\\n3\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"2\\n2\\n1\\n1\\n1\"\nassert solution(\"2 1\\n1 2\") == \"2\\n2\"\n",
        "num_ids_2": 57,
        "num_ids_4": 125
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('2 2') == '0'\nassert solution('4 2\\n1 2\\n2 3\\n1 4') == '2\\n1\\n1\\n1\\n'\n\"\"\"\n\nimport sys\n\nN, M = list(map(int, input().split()))\nd = dict()\n\nfor i in range(M):\n    s, e = list(map(int, sys.stdin.readline().split()))\n    if s in d:\n        d[s].add(e)\n    else:\n        d[s] = {e}\n\n    if e in d:\n        d[e].add(s)\n    else:\n        d[e] = {s}\n\nfor k, v in d.items():\n    print(len(v))\n",
        "num_ids_2": 19,
        "num_ids_4": 64
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n\"\"\"\n\n\"\"\"\nSolution 3\n\nWrite a program that reads from the standard input a positive integer, N,\nfollowed by N lines with two positive integers each. For each pair of integers\nin a line, output on a new line the string \u201cyes\u201d if it is possible to build a\npath between the first and the second integer, and \u201cno\u201d otherwise.\n\n-----Input-----\n4\n1 2\n3 4\n1 2\n2 3\n\n-----Output-----\nyes\nno\nyes\nno\n\"\"\"\n\nimport sys",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == '2\\n2\\n1\\n1'\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\n\n---",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n5\\n10\\n15') == '25'\nassert solution('3\\n5\\n10') == '30'\n\"\"\"\n\nimport ast",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '3\\n5\\n10\\n15'\n) == '25'\n\nassert solution(\n    '3\\n5\\n10\\n15\\n15'\n) == '30'\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"3\\n10\\n15\\n20\") == \"30\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"3\\n5\\n10\") == \"30\"\n\nimport sys\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n5\\n10\\n15\\n') == '25'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n5\\n10\\n15\\n') == '25'\nassert solution('4\\n1\\n1\\n1\\n') == '15'\nassert solution('3\\n5\\n10\\n') == '30'\n",
        "num_ids_2": 42,
        "num_ids_4": 60
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10 15\\n2 2\") == \"25\"\nassert solution(\"5 10 15\\n2 2 2\\n5 5\") == \"30\"\nassert solution(\"5 10 15\\n2 2 2\\n5 5 5\\n10 10\") == \"30\"\n\nprint(solution(\"5 10 15\\n2 2 2\\n5 5 5\\n10 10\"))\n",
        "num_ids_2": 37,
        "num_ids_4": 63
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n5\\n10\\n15') == '25'\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == '25'\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aabbca') == 2\nassert solution('aabbcb') == 3\n\nprint(solution(stdin))\n\n\"\"\"\n\nimport sys\nimport os\nfrom collections import Counter",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aabbca') == 2\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aabbca') == 2\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aabbca') == 2\nassert solution('ababa') == 1\n\"\"\"\nfrom collections import defaultdict",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aabbca\") == 2\n\"\"\"\nimport sys\nfrom collections import Counter",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aabbca\") == 2\nassert solution(\"abcdefghijklmno\") == 16\n\n---------------------------------------------------------------------------------------------------------------------",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aabbca\") == 2\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aabbca') == 2\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input) == output\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aabbca') == 2\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Sunny') == 'Cloudy'\n\nIn Takahashi's town, a sunny day is followed by a cloudy day.\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Rainy\"\nassert solution(\"Rainy\") == \"Sunny\"\n\"\"\"\n\nweather_today = input()\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Rainy') == 'Rainy'\nassert solution('Cloudy') == 'Cloudy'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Rainy\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Rainy\"\nassert solution(\"Sunny\") == \"Sunny\"\n\"\"\"\n\nS = str(input())",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('Sunny') == 'Cloudy'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Rainy\") == \"Rainy\"\nassert solution(\"Cloudy\") == \"Cloudy\"\nassert solution(\"Humid\") == \"Humid\"\n\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('Sunny') == 'Cloudy'\nprint(solution('Sunny'))\n\nassert solution('Cloudy') == 'Rainy'\nprint(solution('Cloudy'))\n\nassert solution('Rainy') == 'Rainy'\nprint(solution('Rainy'))\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Rainy\") == \"Sunny\"\nassert solution(\"Cloudy\") == \"Rainy\"\n\"\"\"\n\nS = input()",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'Cloudy'\nassert solution('Sunny') == 'Sunny'\nassert solution('Cloudy') == 'Rainy'\nassert solution('Rainy') == 'Sunny'\n\"\"\"\n\nweather = input().strip()\nprint(weather)",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('Sunny') == 'Cloudy'\nprint('Success')\nassert solution('Cloudy') == 'Sunny'\nprint('Success')\nassert solution('Rainy') == 'Rainy'\nprint('Success')\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 17 120') == '119'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 17 120\") == '119'\n\"\"\"\n\nimport sys\nimport functools\n\n\n@functools.lru_cache(maxsize=None)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 17 120\") == '119'\nprint(\"All tests passed.\")\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 17 120\\n\") == \"119\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 17 120\\n\") == \"119\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n\"\"\"\n\nn, a, b = list(map(int, stdin.strip().split()))\nprint(max(a * n, b))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 17 120\") == \"119\"\nassert solution(\"7 1 120\") == \"120\"\nassert solution(\"7 17 1\") == \"1\"\nassert solution(\"1 17 120\") == \"1\"\nassert solution(\"1 17 1\") == \"1\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 17 120') == '119'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 17 120\\n') == '119'",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\") == \"8800\"\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def answer(self, N: int, M: int, stdin: str) -> str:\n        # return str(10 ** 9)\n        return str(M * 1900 + (N - M) * 100)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\"\n\nimport sys\nimport itertools\n\nN, M = map(int, sys.stdin.readline().split())\n\nans = 0\n\nfor perm in itertools.combinations(range(1, N + 1), M):\n    ans += max(perm)\n\nprint(ans)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"1600\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1\\n') == '1900'\n\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"3800\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\n\"\"\"\n\n\"\"\"\nSolution:\n\nN, M = [int(c) for c in stdin.readline().split()]\n\nt = 0\nwhile N > 0 or M > 0:\n    t += 1900\n    N -= 1\n    M -= 1\n\nprint(t)\n\"\"\"\n\nN, M = [int(c) for c in input().split()]\nt = 1900 * (1 + (1 + (1 + (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900)) * (1 + (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900)) * (1 + (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900))) * (1 + (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1 + (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900))) * (1 + (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1 + (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900))) * (1 + (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1 + (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900))) * (1 + (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1 + (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900) * (1900 + 1900 + 1900 + 1900 + 1900)))\nprint(t)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n\") == \"3800\"\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n\") == \"3800\"\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == '3800'\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"3800\"\nassert solution(\"2 10\") == \"16800\"\nassert solution(\"5 10000\") == \"16800\"\n\"\"\"\n\nfrom math import factorial as fac",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n\nimport unittest\n\nfrom typing import List, Set\n\nS = str\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('atcoderregularcontest') == 'b'\n\"\"\"\nimport sys\nimport string",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abcdefghijklmnopqrstuvwxyz') == 'a'\nassert solution('bcdefghijklmnopqrstuvwxyza') == 'b'\nassert solution('bcdefghijklmnopqrstuvwxyzabc') == 'c'\nassert solution('bcdefghijklmnopqrstuvwxyzabcde') == 'f'\nassert solution('bcdefghijklmnopqrstuvwxyzabcdef') == 'g'\n",
        "num_ids_2": 46,
        "num_ids_4": 95
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('atcoderregularcontest') == 'b'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('atcoderregularcontest') == 'b'\nassert solution('atcoderregularcontest') == 'b'\n\"\"\"\n\nimport unittest\nimport sys\n\nclass TestStringMethods(unittest.TestCase):\n    \n    def test_solution_0(self):\n        S = 'atcoderregularcontest'\n        self.assertEqual(solution(S), 'b')\n        \n    def test_solution_1(self):\n        S = 'b'\n        self.assertEqual(solution(S), None)\n    \n    def test_solution_2(self):\n        S = 'aab'\n        self.assertEqual(solution(S), None)\n        \n    def test_solution_3(self):\n        S = 'abb'\n        self.",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 4 4 3\") == '4\\n3\\n3\\n4'\nassert solution(\"4\\n1 4 3 2\") == '4\\n1\\n1\\n2'\n\"\"\"\n\nimport numpy as np",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(    \"\"\"    \n4\n2 4 4 3\n    \"\"\") == \"\"\"    \n4\n3\n3\n4\n    \"\"\"\n\n----",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n\"\"\"\n\n\nimport sys\n\nn = int(sys.stdin.readline())\nx = sys.stdin.readline().split()\nx = [int(i) for i in x]\n\nprint(x)\n\nx.sort()\nprint(x)\n\nx_length = len(x)\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 4 4 3\") == '4\\n3\\n3\\n4'\nprint(solution(stdin))\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\"\n\n\"\"\"\nCreate a function that will return the middle item from a given list\n\nSample Input:\n[2, 3, 4, 5, 6, 7]\nSample Output:\n4\n\nSolution\nYour solution should be a function which accepts a single list as an argument.\n\nIf the list has an odd length, return the middle element. If the list has an even length, return the average of the middle two elements.\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"No\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1 2 4 2 1\\n') == 2\n\"\"\"\n\n\"\"\"\n10,000,000\n\n---\n\nO(n)\n\n1. Sort input\n2. start with left and right pointers\n3. calculate total area\n4. iterate over sorted list with left and right pointers\n5. calc the area of rectangle with current left and right pointers\n6. return max area\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\narr = list(map(int, sys.stdin.readline().rstrip().split()))\narr.sort()\ntotal = 0\nleft, right = 0, n - 1\n\nfor i in range(n):\n    if left > right:\n        break\n    left_area = arr[left] * arr[left + 1]\n    right_area = arr[right] * arr[right - 1]\n    total = max(total, left_area, right_area)\n    if left_area >= right_area:\n        right -= 1\n    else:\n        left += 1\nprint(total)\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2 4 2 1\\n\") == \"2\\n\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2 4 2 1\") == 2\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('3\\n2 1 3') == '3'\nassert solution('4\\n1 2 2 2') == '3'\nassert solution('5\\n1 2 3 2 1') == '2'\nassert solution('6\\n1 2 2 1 3 2 2 1') == '2'\n",
        "num_ids_2": 29,
        "num_ids_4": 62
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_1) == output_1\nassert solution(test_input_2) == output_2\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n3 1 2 4 2 1') == '2'\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 2 4 2 1') == 2\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n3 1 2 4 2 1') == 2\n\"\"\"\n\nfrom typing import List\n\nfrom icontract import require, ensure\n\nfrom correct_programs.common.first_digit import (\n    rectangle_area_or_0,\n    rectangle_area_or_1,\n)\n\n\n@require(lambda height: height >= 1)\n@require(lambda height: height <= 10 ** 5)\n@require(lambda sides: len(sides) == 4)\n@ensure(lambda result: result >= 0)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n3 1 2 4 2 1\") == \"2\"\nprint(solution(\"6\\n3 1 2 4 2 1\"))\n\n------Test Case 1 (Successful)------\nInput\n6\n3 1 2 4 2 1\n\nOutput\n2\n\nExplanation\n2 \\times 4 rectangle can be formed.\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 1\\n2\\n5\\n10\") == \"8\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1\\n0\") == \"1\"\nassert solution(\"1\\n1\\n0\") == \"0\"\nassert solution(\"3\\n7\\n2\\n5\") == \"8\"\nassert solution(\"1\\n1\\n0\") == \"0\"\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 67
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n7 1\n2\n5\n10''') == '8'\n\nassert solution('''3\n7 1\n2\n5\n10''') == '8'\n\nassert solution('''3\n7 1\n2\n5\n10''') == '8'\n\nassert solution('''3\n7 1\n2\n5\n10''') == '8'\n\nassert solution('''3\n7 1\n2\n5\n10''') == '8'",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 7 1 2 5') == '8'\nassert solution('1') == '1'\nassert solution('3 2 1') == '4'\nassert solution('3 1 1') == '3'\nassert solution('4 7 2 5') == '10'\n\nprint(solution(stdin))\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n7 1\n2\n5\n10''') == '8'\nprint('Test: Ok')\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n7 1\n2\n5\n10\n\"\"\") == \"8\"\n\nassert solution(\n\"\"\"\n3\n7 1\n2\n5\n10\n\"\"\") == \"8\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n7 1\\n2\\n5\\n10\") == 8\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n7 1\\n2\\n5\\n10') == '8'\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input) == output\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 7 1 2 5\") == \"8\"\nassert solution(\"3 7 1 5 10\") == \"8\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 2 100\") == \"2\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\nassert solution(\"3\\n4\\n1\\n7\") == \"4\"\nassert solution(\"1\\n1\\n1\\n7\") == \"0\"\nassert solution(\"1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"6\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2\\n1\\n100\") == \"1\"\nassert solution(\"2\\n2\\n2\\n100\") == \"0\"\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2\\n2\\n100\\n\") == \"2\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\nassert solution(\"5\\n3\\n2\\n100\") == \"2\"\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n2\\n2\\n100\\n') == '2'\nassert solution('2\\n0\\n0\\n100\\n') == '0'\nassert solution('0\\n0\\n0\\n1\\n') == '0'\nassert solution('0\\n0\\n0\\n2\\n') == '1'\nassert solution('2\\n0\\n1\\n100\\n') == '1'\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'2\\n2\\n2\\n100'\n) == '2'\n\nassert solution(\n'2\\n2\\n2\\n50'\n) == '1'\n\nassert solution(\n'2\\n2\\n2\\n20'\n) == '0'\n\nassert solution(\n'2\\n2\\n2\\n100'\n) == '2'\n\nassert solution(\n'2\\n2\\n2\\n200'\n) == '4'",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\nassert solution(\"0\\n0\\n0\\n100\") == \"0\"\nassert solution(\"2\\n2\\n3\\n100\") == \"0\"\nassert solution(\"2\\n0\\n0\\n100\") == \"0\"\nassert solution(\"0\\n1\\n1\\n100\") == \"0\"\n\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n2\\n2\\n100') == 2\nassert solution('5\\n3\\n3\\n100') == 1\n\"\"\"\n\n\"\"\"\nLongest Increasing Subsequence\nGiven an integer array nums, return the length of the longest strictly increasing subsequence.\nA subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].\n\n-----Constraints-----\n - 1 \\leq nums.length \\leq 2500\n - -2^31 \\leq nums[i] \\leq 2^31 - 1\n\n-----Input-----\nYou are given nums, an array of integers.\n\n-----Output-----\nReturn the length of the longest strictly increasing subsequence.\n\n-----Sample Input-----\n7\n3 4 -1 0 3 2 9\n\n-----Sample Output-----\n4\n\nlongestIncreasingSubsequence\n\"\"\"\n\n\"\"\"\nGiven a binary search tree, find the floor and ceiling of a given integer. The floor is the highest element in the tree less than or equal to an integer, while the ceiling is the lowest element in the tree greater than or equal to an integer.\n\nIf either value does not exist, return None.\n\n-----Constraints-----\n - The number of nodes in the tree is in the range [1, 104].\n - -2^31 \\leq Node.val \\leq 2^31 - 1\n - The value of each node in the tree is unique.\n\n-----Input-----\nYou are given the root node of a binary search tree (BST) and an integer val.\n\n-----Output-----\nReturn an array of two integers where [0] is the floor and [1] is the ceiling.\n\n-----Sample Input-----\nroot = [4,2,7,1,3]\nval = 2\n\n-----Sample Output-----\n[1, 3]\n\nfloorBST\n\"\"\"\n\n\"\"\"\nK-th Smallest Prime Fraction\nYou are given an array of integers in which there are three distinct values: 1, 2 and 3.\n\nDetermine the number of ways to split this array into three non-empty parts, such that the sum of the number of elements in each part is the same.\n\n-----Constraints-----\n - 1 \\leq a[i] \\leq 3 \\leq n \\leq 10^5\n - The number of elements in the array is in the range [1, 10^5].\n\n-----Input-----\nYou are given a string S.\n\n-----Output-----\nReturn the number of ways to split the array.\n\n-----Sample Input-----\n1 2 2\n\n-----Sample Output-----\n3\n\nkthSmallestPrimeFraction\n\"\"\"\n\n\"\"\"\nGiven an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\n-----Constraints-----\n - 0 \\leq nums.length \\leq 10^5\n - -10^9 \\leq nums[i] \\leq 10^9\n - nums[i] \\neq 0\n - 0 \\leq target \\leq 10^9\n\n-----Input-----\nYou are given nums, an array of integers and target, an integer.\n\n-----Output-----\nReturn an array of two integers that add up to target.\n\n-----Sample Input-----\nnums = [2,7,11,15]\ntarget = 9\n\n-----Sample Output-----\n[0,1]\n\ntwoSum\n\"\"\"\n\n\"\"\"\nFind the Smallest Divisor Given a Threshold\nGiven an array of integers nums and an integer threshold, we will choose a positive integer divisor, divide all the array by it, and sum the division's result. Find the smallest divisor such that the result mentioned above is less than or equal to threshold.\n\nEach result of the division is rounded to the nearest integer greater than or equal to that element. (For example: 7/3 = 3 and 10/2 = 5).\n\nIt is guaranteed that there will be an answer.\n\n\n-----Constraints-----\n - 1 \\leq nums.length \\leq 5 * 10^5\n - 1 \\leq nums[i] \\leq 10^9\n - 1 \\leq threshold \\leq 10^9\n\n-----Input-----\nYou are given nums, an array of integers, and threshold, an integer.\n\n-----Output-----\nReturn the smallest divisor such that the result of the division is less than or equal to threshold.\n\n-----Sample Input-----\nnums = [1,2,5,9]\nthreshold = 6\n\n-----Sample Output-----\n5\n\nsmallestDivisor\n\"\"\"\n\n\"\"\"\nOptimized Division\nGiven two integers dividend and divisor, divide two integers without using multiplication, division and mod operator.\n\nReturn the quotient after dividing dividend by divisor.\n\nThe integer division should truncate toward zero, which means losing its fractional part. For example, truncate(8.345) = 8 and truncate(-2.7335) = -2.\n\nNote: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [\u2212231,  231 \u2212 1]. For this problem, assume that your function returns 231 \u2212 1 when the division result overflows.\n\n\n-----Constraints-----\n - 0 \\leq dividend, divisor \\leq 2^31 - 1\n\n-----Input-----\nYou are given the two integers dividend and divisor.\n\n-----Output-----\nReturn the quotient after dividing dividend by divisor.\n\n-----Sample Input-----\n10\n3\n\n-----Sample Output-----\n3\n\nintegerDivision\n\"\"\"\n\n\"\"\"\nFind the Highest Altitude\nYou are given an array of integers gain where gain[i] is the net gain in altitude between the ith and (i+1)th minute.\n\nReturn the highest altitude you can reach.\n\n-----Constraints-----\n - 1 \\leq gain.length \\leq 100,000\n - -100 \\leq gain[i] \\leq 100\n\n-----Input-----\nYou are given an array of integers gain.\n\n-----Output-----\nReturn the highest altitude you can reach.\n\n-----Sample Input-----\ngain = [-5,1,5,0,-7]\n\n-----Sample Output-----\n1\n\nhighestAltitude\n\"\"\"\n\n\"\"\"\nSubtree of Another Tree\nGiven the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.\n\nA subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.\n\n-----Constraints-----\n - The number of nodes in root is in the range [1, 1000].\n - The number of nodes in subRoot is in the range [1, 1000].\n - -10^9 \\leq root.val, subRoot.val \\leq 10^9\n\n-----Input-----\nYou are given the roots of two binary trees root and subRoot.\n\n-----Output-----\nReturn true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.\n\n-----Sample Input-----\nroot = [1,2,3,4]\nsubRoot = [1,4]\n\n-----Sample Output-----\ntrue\n\nsubtree\n\"\"\"\n\n\"\"\"\nFind the Longest Increasing Subsequence\nGiven an integer array nums",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n2\\n2\\n100') == 2\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"1 3 3\") == \"No\"\nassert solution(\"100 10 100\") == \"No\"\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 2') == 'Yes'\nassert solution('2 3 1') == 'No'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"1 3 5\") == \"No\"\nassert solution(\"1 3 6\") == \"No\"\nassert solution(\"1 2 3\") == \"No\"\n\"\"\"\nimport sys\nfrom typing import List",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(A, B, C) == \"Yes\"\n\n\"\"\"\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"1 3 3\") == \"No\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"1 3 4\") == \"No\"\nassert solution(\"4 4 5\") == \"No\"\nassert solution(\"10 10 10\") == \"Yes\"\nassert solution(\"10 3 10\") == \"No\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\"\"\"\n\nimport sys\n\nA, B, C = map(int, sys.stdin.readline().strip().split())",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\n\"\"\"\n\nN, X = list(map(int, stdin.readline().split()))\nM = list(map(int, stdin.readline().split()))\n\nnum = 0\nM.sort()\nfor m in M:\n    if X >= m:\n        num += 1\n        X -= m\n    else:\n        break\nprint(num)\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"\n\"\"\"\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1000\\n120\\n100\\n140\\n') == '9'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == '9'\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1000\\n120\\n100\\n140') == '9'\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == '9'\n\"\"\"\n\nimport sys\n\nN, X = [int(x) for x in sys.stdin.readline().split()]\n\nsum = 0\ni = 0\nwhile X > sum:\n    X -= (N - i) * sum\n    sum += N - i\n    i += 1\nprint(i)\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"apple\") == \"apple\"\nassert solution(\"orange\") == \"orange\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"apple\\norange\\napple\") == 2\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\napple\\norange\\napple') == 2\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\nabcd\") == \"2\\nabcd\"\nassert solution(\"5\\nbcdef\") == \"5\\nbcdef\"\n\"\"\"\n\n\"\"\"\n5\nbcdef\ngfedcba\nabcde\nbcdea\nfghij\n\n\"\"\"\n\n\"\"\"\n3\naaaa\nbbbb\ncccc\n\n\"\"\"\n\n\"\"\"\n15\nacdb\ngdfa\nsztyfh\ngxcrz\netqzkt\nqxfeyk\nqgqtbk\niogzrc\nmzcgyz\nzwjwhm\n\n\"\"\"\n\n\"\"\"\n24\nzgxqhx\nnzabqd\nzhqgab\nhqzgad\n\n\"\"\"\n\n\"\"\"\n5\nefjafc\nfjaf\nafj\nafjf\nfja\n\n\"\"\"\n\n\"\"\"\n4\nq\nq\nq\nq\nq\n\n\"\"\"\n\n\"\"\"\n3\nbcc\nb\nbc\n\n\"\"\"\n\n\"\"\"\n11\na\naa\naa\naa\naa\naa\naa\naa\naa\naa\naa\naa\n\n\"\"\"\n\n\"\"\"\n6\nbca\nbdc\naca\ncbd\nacb\n\n\"\"\"\n\n\"\"\"\n7\nab\na\nab\na\nab\na\n\n\"\"\"\n\n\"\"\"\n10\nhbxmjy\nxmhbjp\njmyxbh\njxmbhy\nhbmjy\nxmybhl\nxmybjh\nxybmjh\nxhjmyb\nxbymhj\n\n\"\"\"\n\n\"\"\"\n6\naaabbb\nabaaba\nababab\naaabaa\naababa\nababaa\n\n\"\"\"\n\n\"\"\"\n12\naaaaa\naabab\naabba\naabba\naabba\naabab\naabbb\naabab\nababa\naabba\naabbb\naabab\n\n\"\"\"\n\n\"\"\"\n10\na\na\na\na\na\na\na\na\na\na\na\na\n\n\"\"\"\n\n\"\"\"\n15\nacd\nadc\ncad\ndca\n\n\"\"\"\n\n\"\"\"\n12\nab\nab\naba\nabba\nabb\naab\naab\naab\nbab\nbaa\naab\naab\n\n\"\"\"\n\n\"\"\"\n4\nb\nc\nb\nb\n\n\"\"\"\n\n\"\"\"\n5\naaab\naaba\naabb\naab\naabb\n\n\"\"\"\n\n\"\"\"\n11\nab\na\nab\na\na\na\na\nab\na\na\na\na\na\n\n\"\"\"\n\n\"\"\"\n5\nab\na\nab\na\nab\n\n\"\"\"\n\n\"\"\"\n5\nab\nb\nb\na\nb\n\n\"\"\"\n\n\"\"\"\n7\nbcc\nbcc\nbcc\nbcc\nbcc\n\n\"\"\"\n\n\"\"\"\n5\nb\nb\nb\nb\nb\n\n\"\"\"\n\n\"\"\"\n3\naa\nab\nba\n\"\"\"\n\n\"\"\"\n1\na\n\n\"\"\"\n\n\"\"\"\n5\na\naa\naaa\naaaa\na\n\n\"\"\"\n\n\"\"\"\n4\nabb\nbbb\nbba\nbbb\n\n\"\"\"\n\n\"\"\"\n9\naaab\naab\naaba\naab\naaab\naaba\naabba\naabab\naabaa\naabab\naaba\naabb\n\n\"\"\"\n\n\"\"\"\n7\nabaaabbba\nabaaabbbb\nababababa\nababababb\nababbbbbb\nabaaabbbb\nababbbbbb\nababbbbbb\naabaabbba\naabaabbbb\n\n\"\"\"\n\n\"\"\"\n8\nabc\nacb\nbac\nbca\ncba\ncab\ncba\ncab\ncba\n\n\"\"\"\n\n\"\"\"\n15\ngda\nggdc\ncgda\nggdc\ncgda\nggdc\ncgda\nggdc\ncgda\nggdc\ncgda\nggdc\n\n\"\"\"\n\n\"\"\"\n15\naba\ncbb\ncdc\ncdd\nadc\ncad\nbda\ndcb\nbcd\ncdb\nbca\nccb\n\n\"\"\"\n\n\"\"\"\n10\ngfqzgj\nfgcqg\ncqgfg\ngcfqg\nqcgf\nfgqgc\nfgcq\ncfqg\nqcgf\nfgqc\nqcgf\n\n\"\"\"\n\n\"\"\"\n11\nfqgwyt\ngwtfqy\nfqwtyg\nfqygtw\ntywfqg\n\n\"\"\"\n\n\"\"\"\n4\nabcd\ncdab\nacbd\nbcad\n\n\"\"\"\n\n\"\"\"\n6\ncd\nd\nd\nd\nd\n\n\"\"\"\n\n\"\"\"\n8\nbbe\nbae\naebe\nbea\naeb\naebu\n\n\"\"\"\n\n\"\"\"\n14\nabca\ncaba\ncbga\ncbdac\nccbba\ndcab\n\n\"\"\"\n\n\"\"\"\n10\nbbaa\nbbab\nbabb\nbbba\nabbb\nbbbb\nbbbb\nbbbb\nbbbb\nbbbb\nbbbb\n\n\"\"\"\n\n\"\"\"\n6\nbcae\ndcae\neacb\neacb\necab\n\n\"\"\"\n\n\"\"\"\n9\nbac\ncba\ncbc\ncbd\ndbc\n\n\"\"\"\n\n\"\"\"\n8\ncabababac\naacbab\nbacabac\nacbabac\nbacbabac\nbacbaba\nbacbab\n\n\"\"\"\n\n\"\"\"\n9\naaba\naaba\n\n\"\"\"\n\n\"\"\"\n12\nbcbxzpvq\nbvxcqzp\nxzbcqvp\nzpvbxcq\nvbqzpxc\nvqbcxzp\nzpqbcxv\n\n\"\"\"\n\n\"\"\"\n8\nbcad\nadbc\nbdac\ncbad\ndadb\n\n\"\"\"\n\n\"\"\"\n13\nabcd\ndabc\ncdab\nadbc\nbdca\nbcad\n\n\"\"\"\n\n\"\"\"\n15\na\na\na\na\na\na\na\na\na\na\na\na\n\n\"\"\"\n\n\"\"\"\n3\nbcad\ndacb\nacbd\n\n\"\"\"\n\n\"\"\"\n7\nbcac\nbaca\ndacb\nacdb\ndacb\ndacb\nbacd\n\n\"\"\"\n\n\"\"\"\n4\nbcc\nccb\nccb\nccb\n\n\"\"\"\n\n\"\"\"\n8\nabcde\nabcd\ncdab\nedab\necad\n\n\"\"\"\n\n\"\"\"\n7\nae\na\naa\naa\naa\naa\n\n\"\"\"\n\n\"\"\"\n6\nbbbb\nb\nbbb\nbbb\nbbb\n\n\"\"\"\n\n\"\"\"\n2\nab\nba\n\n\"\"\"\n\n\"\"\"\n3\nabc\ncba\n\n\"\"\"\n\n\"\"\"\n3\na\na\na\n\n\"\"\"\n\n\"\"\"\n7\nb\nb\nbb\nbb\nbb\n\n\"\"\"\n\n\"\"\"\n9\ngfhjk\nhfkg\n\n\"\"\"\n\n\"\"\"\n6\nabab\nbaba\nabba\nabbb\nbaba\n\n\"\"\"\n\n\"\"\"\n5\nc\na\nca\nca\n\n\"\"\"\n\n\"\"\"\n3\nabb\naab\naba\n\n\"\"\"\n\n\"\"\"\n11\nabababab\nababaaba\nabaababa\nabababab\nababaaba\n\n\"\"\"\n\n\"\"\"\n10\nabbbab\naabbaabb\nababbba\nababbb\n\n\"\"\"\n\n\"\"\"\n9\nbcd\nbacdc\ndacb\nbacd\n\n\"\"\"\n\n\"\"\"\n12\nbaba\nbab\nbaba\nbab\n\n\"\"\"\n\n\"\"\"\n4\nabcde\nabc\nacb\n\n\"\"\"\n\n\"\"\"\n10\nabcd\nabdc\n\n\"\"\"\n\n\"\"\"\n4",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\napple\\n:') == 2\nassert solution('4\\napple\\n:') == 1\nassert solution('4\\napple\\n:') == 1\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"apple\") == \"apple\"\nassert solution(\"orange\") == \"orange\"\nassert solution(\"apple apple\") == \"apple\"\nassert solution(\"apple orange\") == \"apple\"\nassert solution(\"apple apple apple\") == \"apple\"\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\napple\\n:apple\\norange\") == \"2\"\n\"\"\"\n\nn = int(input())\n\nlst = list()\nfor _ in range(n):\n    lst.append(input())\n\nprint(len(set(lst)))\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'a'\nassert solution('aab') == 'a'\nassert solution('aabcc') == 'a'\n",
        "num_ids_2": 18,
        "num_ids_4": 39
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"apple\") == 1\nassert solution(\"banana\") == 2\nassert solution(\"orange\") == 1\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 25
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\napple\\norange\\napple') == '2\\n'\nprint('Test PASSED')\n\n\"\"\"\nfrom collections import Counter\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2100 2500 2700 2700\") == \"2 2\"\nprint(solution(stdin))\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == '2 2'\n\"\"\"\n\n\"\"\"\n5. \u300c\u4e0e\u3048\u3089\u308c\u305f\u70b9\u6570\u3092K\u3068\u3057\u305f\u3068\u304d\u3001\u305d\u306e\u70b9\u6570\u307e\u3067\u306e\u5024\u3092\u7dcf\u548c\u3092\u8003\u3048\u308b\u300d\n\u305d\u308c\u306f\u300c\u4e0e\u3048\u3089\u308c\u305f\u70b9\u6570\u3092K\u3068\u3057\u305f\u3068\u304d\u3001\u305d\u306e\u70b9\u6570\u307e\u3067\u306e\u5024\u3092\u7dcf\u548c\u3092\u8003\u3048\u308b\u300d\u306e\u3053\u3068\u3067\u3042\u308a\u3001\u70b9\u6570\u3092\u8003\u3048\u308b\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u3002\n\n\u305d\u306e\u305f\u3081\u306b\u306f\u305d\u306e\u70b9\u6570\u307e\u3067\u306e\u5024\u3092\u7dcf\u548c\u3092\u8003\u3048\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u306e\u306f\u7dcf\u548c\u3092\u8003\u3048\u308b\u70b9\u6570\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002\u3053\u308c\u3092\u8003\u3048\u308b\u306b\u306f\u3001\u5168\u4f53\u306e\u70b9\u6570\u306b\u304a\u3044\u3066K\u304c\u5165\u3063\u3066\u3044\u308b\u304b\u3092\u8003\u3048\u308b\u3002\n\u5168\u4f53\u306e\u70b9\u6570\u3092\u8003\u3048\u308b\u306e\u306f\u7121\u7406\u306a\u306e\u3067\u30011\u3064\u306e\u8db3\u3057\u7b97\u306e\u70b9\u6570\u3092\u8003\u3048\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002\n\n\u305d\u3057\u3066\u3001\u5168\u4f53\u306e\u70b9\u6570\u306b\u304a\u3044\u3066K\u304c\u5165\u3063\u3066\u3044\u308b\u304b\u3092\u8003\u3048\u308b\u305f\u3081\u306b\u306f\u30011\u3064\u306e\u8db3\u3057\u7b97\u306e\u70b9\u6570\u3092\u8003\u3048\u308b\u3068\u304d\u3001\u305d\u306e\u70b9\u6570\u306bK\u304c\u5165\u3063\u3066\u3044\u308b\u304b\u3092\u8003\u3048\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u3053\u308c\u3092\u8003\u3048\u308b\u306b\u306f\u3001\u5168\u4f53\u306e\u70b9\u6570\u306bK\u304c\u5165\u3063\u3066\u3044\u308b\u304b\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u306e\u306f\u3001\u305d\u306e\u70b9\u6570\u306e\u7dcf\u548c\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u70b9\u6570\u306e\u7dcf\u548c\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002\n\n\u305d\u306e\u305f\u3081\u306b\u306f1\u3064\u306e\u8db3\u3057\u7b97\u306e\u70b9\u6570\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u306e\u306f\u3001\u305d\u306e\u70b9\u6570\u306e\u7dcf\u548c\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u70b9\u6570\u306e\u7dcf\u548c\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002\n\u305d\u3057\u3066\u3001\u5168\u4f53\u306e\u70b9\u6570\u306bK\u304c\u5165\u3063\u3066\u3044\u308b\u304b\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u306e\u306f\u3001\u305d\u306e\u70b9\u6570\u306e\u7dcf\u548c\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u70b9\u6570\u306e\u7dcf\u548c\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002\n\n\u305d\u3057\u3066\u3001\u5168\u4f53\u306e\u70b9\u6570\u306bK\u304c\u5165\u3063\u3066\u3044\u308b\u304b\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u306e\u306f\u3001\u305d\u306e\u70b9\u6570\u306e\u7dcf\u548c\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u70b9\u6570\u306e\u7dcf\u548c\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002\n\u5168\u4f53\u306e\u70b9\u6570\u304cK\u3092\u542b\u3080\u304b\u3069\u3046\u304b\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u306e\u306f\u3001\u305d\u306e\u70b9\u6570\u306e\u7dcf\u548c\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u70b9\u6570\u306e\u7dcf\u548c\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002\n\n\u305d\u3057\u3066\u3001\u5168\u4f53\u306e\u70b9\u6570\u306bK\u304c\u5165\u3063\u3066\u3044\u308b\u304b\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u306e\u306f\u3001\u305d\u306e\u70b9\u6570\u306e\u7dcf\u548c\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u70b9\u6570\u306e\u7dcf\u548c\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002\n\u3053\u308c\u3089\u3092\u8db3\u3057\u7b97\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u306e\u306f\u3001\u305d\u306e\u70b9\u6570\u306e\u7dcf\u548c\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u70b9\u6570\u306e\u7dcf\u548c\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002\n\n\u305d\u306e\u305f\u3081\u306b\u306f\u3001\u5168\u4f53\u306e\u70b9\u6570\u306bK\u304c\u5165\u3063\u3066\u3044\u308b\u304b\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u306e\u306f\u3001\u305d\u306e\u70b9\u6570\u306e\u7dcf\u548c\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u70b9\u6570\u306e\u7dcf\u548c\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002\n\u305d\u3057\u3066\u3001\u5168\u4f53\u306e\u70b9\u6570\u306bK\u304c\u5165\u3063\u3066\u3044\u308b\u304b\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u306e\u306f\u3001\u305d\u306e\u70b9\u6570\u306e\u7dcf\u548c\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u70b9\u6570\u306e\u7dcf\u548c\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002\n\u305d\u3057\u3066\u3001\u5168\u4f53\u306e\u70b9\u6570\u306bK\u304c\u5165\u3063\u3066\u3044\u308b\u304b\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u306e\u306f\u3001\u305d\u306e\u70b9\u6570\u306e\u7dcf\u548c\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u70b9\u6570\u306e\u7dcf\u548c\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002\n\u305d\u3057\u3066\u3001\u5168\u4f53\u306e\u70b9\u6570\u306bK\u304c\u5165\u3063\u3066\u3044\u308b\u304b\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u306e\u306f\u3001\u305d\u306e\u70b9\u6570\u306e\u7dcf\u548c\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u70b9\u6570\u306e\u7dcf\u548c\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002\n\n\u305d\u306e\u305f\u3081\u306b\u306f\u3001\u5168\u4f53\u306e\u70b9\u6570\u306bK\u304c\u5165\u3063\u3066\u3044\u308b\u304b\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u306e\u306f\u3001\u305d\u306e\u70b9\u6570\u306e\u7dcf\u548c\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u70b9\u6570\u306e\u7dcf\u548c\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002\n\u305d\u3057\u3066\u3001\u5168\u4f53\u306e\u70b9\u6570\u306bK\u304c\u5165\u3063\u3066\u3044\u308b\u304b\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u306e\u306f\u3001\u305d\u306e\u70b9\u6570\u306e\u7dcf\u548c\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u70b9\u6570\u306e\u7dcf\u548c\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002\n\u305d\u3057\u3066\u3001\u5168\u4f53\u306e\u70b9\u6570\u306bK\u304c\u5165\u3063\u3066\u3044\u308b\u304b\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u306e\u306f\u3001\u305d\u306e\u70b9\u6570\u306e\u7dcf\u548c\u3092\u8003\u3048\u308b\u3068\u304d\u306b\u5fc5\u8981\u306a\u70b9\u6570\u306e\u7dcf\u548c\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002\n\u305d\u3057\u3066\u3001\u5168\u4f53\u306e\u70b9\u6570\u306bK\u304c\u5165\u3063\u3066\u3044\u308b\u304b",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"3\\n2 1 3\"\n) == \"2\"\n\nassert solution(\n\"5\\n2100 2500 2700 2700\"\n) == \"2 2\"\n\nassert solution(\n\"7\\n2100 2500 2700 2700 2500 2600 2500\"\n) == \"2 2\"\n\nassert solution(\n\"7\\n2100 2500 2700 2700 2500 2600 2500\"\n) == \"2 2\"\n\nassert solution(\n\"4\\n2100 2500 2700 2700\"\n) == \"2\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2100 2500 2700 2700\") == \"2 2\"\n\n\"\"\"\nimport sys\nimport math\nfrom collections import Counter\n\nsys.setrecursionlimit(10 ** 6)\nINF = float('inf')\nIINF = 10 ** 18\nMOD = 10 ** 9 + 7\nMOD2 = 998244353\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2100 2500 2700 2700\") == \"2 2\"\n\"\"\"\n\nN = int(stdin.readline())\n\nnum_list = list(map(int, stdin.readline().split()))",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2100 2500 2700 2700\") == \"2 2\"\n\"\"\"\n\nN = int(stdin.readline())\nratings = sorted(map(int, stdin.readline().split()))\n\nprev = 0\nans = 0\nfor rating in ratings:\n    if rating - prev == 3200:\n        ans += 1\n    prev = rating\n\nprint(ans, ans)",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2100 2500 2700 2700\") == \"2 2\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2500 2700 2700\") == \"2 2\"\nassert solution(\"1 1 1\") == \"1 1 1\"\n\"\"\"\n\nn = int(stdin.readline())\n\nl = [int(i) for i in stdin.readline().split()]\n\nl.sort()\n\na = l[0]\nb = l[0]\nc = l[0]\nd = l[0]\n\nfor i in l[1:]:\n    if i < a + 800:\n        a = i\n    elif i < b + 1600:\n        b = i\n    elif i < c + 2400:\n        c = i\n    elif i < d + 2800:\n        d = i",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"oxo\") == 900",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"oxo\") == \"900\"\nassert solution(\"xxx\") == \"700\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"oxo\") == \"900\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"oxo\") == 900\nassert solution(\"xoo\") == 700\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('oxo') == 900\n\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"oxo\") == 900\nprint(solution(\"oxo\"))\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'D'\nassert solution('D D') == 'D'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'D'\nassert solution('D D') == 'H'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"H H\"\n) == \"H\"\n\nassert solution(\n    \"D D\"\n) == \"D\"\n\nassert solution(\n    \"H D\"\n) == \"H\"\n\nassert solution(\n    \"D H\"\n) == \"D\"\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"HH\") == \"H\"\nassert solution(\"DH\") == \"D\"\n\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"H D\") == \"D\"\nassert solution(\"D H\") == \"H\"\nassert solution(\"D D\") == \"D\"\n\"\"\"\n\n\"\"\"\nhttps://www.hackerrank.com/challenges/ctci-ice-cream-parlor/problem",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"HH\") == \"H\"\nassert solution(\"DH\") == \"D\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"HH\") == \"H\"\nassert solution(\"HHH\") == \"H\"\nassert solution(\"DH\") == \"D\"\nassert solution(\"DHDH\") == \"H\"\n\"\"\"\n\nfrom unittest import TestCase\nfrom unittest import main\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'D'\nassert solution('D D') == 'D'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"HH\") == \"H\"\nassert solution(\"DH\") == \"D\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(solution.__doc__.split(\"\\n\")[1]) == \"H\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1222') == '1+2+2+2=7'",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1+2+2+2=7\"\n\"\"\"\n\nfrom itertools import product\nimport ast\nimport math",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(1222)) == str(1+2+2+2)\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of odd digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of odd digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of odd digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of odd digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of odd digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of odd digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of all digits in the number\n\"\"\"\n\n\"\"\"\nWrite code that reads an integer (from Standard Input) and prints three lines of output\na) The number of digits in the number\nb) The number of even digits in the number\nc) The sum of",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\"\"\"\n\n\"\"\"\n=============================================================\nI understand the problem and know the solution.\n\nI think this solution is pretty easy and beautiful. It is iterating all the possible numbers and testing all the signs that can go on\nthe number.\n\nI am not sure if it will work for all the tests, because I don't know if there is a way to limit the number of iterations\nand the number of tests for the first number.\n=============================================================\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1222\") == '1+2+2+2=7'\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\nprint(\"Test passed\\n\")\n\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1222') == '1+2+2+2=7'\nprint('Success')\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 1 2 2') == '2\\n2\\n0\\n0\\n0'\nassert solution('5\\n4 2 1 3') == '2\\n1\\n0\\n0\\n0'\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 2 2\") == \"2\"\nassert solution(\"1 1 2 2\\n3 3 4 4\") == \"3\"\nassert solution(\"3 3 3 3\\n1 3 2 3\") == \"0\"\n\nprint(solution(\"5\\n1 1 2 2\\n3 3 4 4\"))",
        "num_ids_2": 32,
        "num_ids_4": 51
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 1 2 2') == '2\\n2\\n0\\n0\\n0'\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\nassert solution(\"5\\n4 4 5 5\") == \"0\\n0\\n0\\n0\\n0\"",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 1 2 2') == '2\\n2\\n0\\n0\\n0'\n\"\"\"\nimport math",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 1 2 2') == '2\\n2\\n0\\n0\\n0'\n\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 1 2 2\\n') == '2\\n2\\n0\\n0\\n0'\nassert solution('5\\n1 2 1 3 2\\n') == '2\\n2\\n0\\n0\\n0'\nassert solution('3\\n3\\n3\\n') == '0\\n0\\n0'\nassert solution('5\\n2 2 3 4 1\\n') == '2\\n2\\n0\\n0\\n0'\nassert solution('5\\n2 4 1 3 2\\n') == '2\\n0\\n0\\n0\\n0'\n",
        "num_ids_2": 61,
        "num_ids_4": 116
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 1 2 2') == '2\\n2\\n0\\n0\\n0\\n'\nprint(solution(input()))\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\nassert solution(\"4\\n2 1 3\") == \"2\\n0\\n0\\n0\"\n\"\"\"",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n3') == '3'\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import deque\nfrom collections.abc import Sequence\nfrom itertools import permutations, combinations\nfrom queue import Queue\nfrom typing import Deque, Any, List, Tuple, Union\n\nMAX_NUM = 2 ** 31 - 1\nMIN_NUM = -2 ** 31\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n6') == '3'\n\"\"\"\n\nimport sys\n\nX = int(sys.stdin.readline())\n\nres = 0\n\ni = 1\nwhile True:\n    if X == (i * (i + 1)) // 2:\n        res = i\n        break\n    elif X > (i * (i + 1)) // 2:\n        break\n    i += 1\n\nprint(res)",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\") == '3'\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def kangaroo(self, nums: List[int]) -> str:\n        result = 'NO'\n        for i, n in enumerate(nums):\n            if i < len(nums) - 1:\n                if nums[i + 1] - nums[i] > 0:\n                    result = 'YES'\n                elif nums[i + 1] - nums[i] == 0:\n                    result = 'YES'\n                break\n        return result\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n\") == \"3\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n\") == \"3\"\n\"\"\"\n\nX = int(input())",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\") == 3\nassert solution(\"1\") == 0\n\"\"\"\nimport math\n\nx = int(input())",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"3\"\n\"\"\"\n\nimport sys\n\nX = int(sys.stdin.readline().strip())",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6') == '3'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"3\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6') == '3'\n\"\"\"\n\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1118) == \"Yes\"\nassert solution(1021) == \"No\"\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1118') == \"Yes\"\n\n-----\n\n\"\"\"\n\nimport sys\nimport os\nfrom io import StringIO\nimport unittest",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1118') == 'Yes'\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1118') == \"Yes\"\nassert solution('1119') == \"No\"\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1118') == 'Yes'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('2234') == 'No'\nassert solution('1234') == 'No'",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1118') == \"Yes\"\nassert solution('1091') == \"No\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1118\") == \"Yes\"\nassert solution(\"1111\") == \"No\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1234') == 'No'\nassert solution('1117') == 'Yes'\nassert solution('1111') == 'Yes'\nassert solution('1221') == 'No'\n\nprint('Success')",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1010') == 'No'",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == 3\nprint(solution(\"5\\n5 1 1 1 1\")) # 3\nprint(solution(\"10\\n0 0 0 0 0 0 0 0 0 0 0\")) # 9\n\"\"\"\n\nfrom itertools import combinations\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 6\\n4 1\\n5 5\") == \"3\"\n\nassert solution(\"5\\n3 6\\n4 1\\n5 5\") == \"3\"\n\nassert solution(\"5\\n5 2\\n3 6\\n4 1\\n5 5\") == \"3\"\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 44,
        "num_ids_4": 70
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 5\\n2 4\\n3 6') == '3'\n\nsolution(stdin)\n\nimport sys\n\nA = list(map(int, sys.stdin.readline().strip().split(' ')))\nB = list(map(int, sys.stdin.readline().strip().split(' ')))\nC = list(map(int, sys.stdin.readline().strip().split(' ')))\n\nA.sort()\nB.sort()\nC.sort()\n\ncount = 0\nfor i in range(len(A)):\n    for j in range(len(B)):\n        for k in range(len(C)):\n            if A[i] + B[j] <= C[k]:\n                count += 1\nprint(count)\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split(' ')))\nb = list(map(int, sys.stdin.readline().strip().split(' ')))\nc = list(map(int, sys.stdin.readline().strip().split(' ')))\n\na.sort()\nb.sort()\nc.sort()\n\ncount = 0\nfor i in range(n):\n    for j in range(n):\n        for k in range(n):\n            if a[i] + b[j] <= c[k]:\n                count += 1\nprint(count)\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split(' ')))\nb = list(map(int, sys.stdin.readline().strip().split(' ')))\nc = list(map(int, sys.stdin.readline().strip().split(' ')))\n\na.sort()\nb.sort()\nc.sort()\n\ncount = 0\nfor i in range(n):\n    if a[i] + b[i] <= c[i]:\n        count += 1\nprint(count)\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split(' ')))\nb = list(map(int, sys.stdin.readline().strip().split(' ')))\nc = list(map(int, sys.stdin.readline().strip().split(' ')))\n\na.sort()\nb.sort()\nc.sort()\n\ncount = 0\nfor i in range(n):\n    if a[i] + b[i] <= c[i]:\n        count += 1\nprint(count)\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split(' ')))\nb = list(map(int, sys.stdin.readline().strip().split(' ')))\nc = list(map(int, sys.stdin.readline().strip().split(' ')))\n\na.sort()\nb.sort()\nc.sort()\n\ncount = 0\nfor i in range(n):\n    if a[i] + b[i] <= c[i]:\n        count += 1\nprint(count)\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split(' ')))\nb = list(map(int, sys.stdin.readline().strip().split(' ')))\nc = list(map(int, sys.stdin.readline().strip().split(' ')))\n\na.sort()\nb.sort()\nc.sort()\n\ncount = 0\nfor i in range(n):\n    if a[i] + b[i] <= c[i]:\n        count += 1\nprint(count)\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split(' ')))\nb = list(map(int, sys.stdin.readline().strip().split(' ')))\nc = list(map(int, sys.stdin.readline().strip().split(' ')))\n\na.sort()\nb.sort()\nc.sort()\n\ncount = 0\nfor i in range(n):\n    if a[i] + b[i] <= c[i]:\n        count += 1\nprint(count)\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split(' ')))\nb = list(map(int, sys.stdin.readline().strip().split(' ')))\nc = list(map(int, sys.stdin.readline().strip().split(' ')))\n\na.sort()\nb.sort()\nc.sort()\n\ncount = 0\nfor i in range(n):\n    if a[i] + b[i] <= c[i]:\n        count += 1\nprint(count)\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split(' ')))\nb = list(map(int, sys.stdin.readline().strip().split(' ')))\nc = list(map(int, sys.stdin.readline().strip().split(' ')))\n\na.sort()\nb.sort()\nc.sort()\n\ncount = 0\nfor i in range(n):\n    if a[i] + b[i] <= c[i]:\n        count += 1\nprint(count)\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split(' ')))\nb = list(map(int, sys.stdin.readline().strip().split(' ')))\nc = list(map(int, sys.stdin.readline().strip().split(' ')))\n\na.sort()\nb.sort()\nc.sort()\n\ncount = 0\nfor i in range(n):\n    if a[i] + b[i] <= c[i]:\n        count += 1\nprint(count)\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 5\\n2 4\\n3 6') == 3\n\n-----Tests-----\nSample Input:\n3\n1 4 5\n2 6 8\n3 7 2\nSample Output:\n6\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 5\\n2 4\\n3 6') == 3\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == 3\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == \"3\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == \"3\"\n\"\"\"\n\nfrom itertools import combinations\n\nN = int(stdin.readline())\nA = list(map(int, stdin.readline().split()))\nB = list(map(int, stdin.readline().split()))\nC = list(map(int, stdin.readline().split()))\n\nd = dict()\n\nfor i in combinations(zip(A, B, C), 3):\n    d[i] = None\n\nprint(len(d))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"2\n1 5\n2 4\n3 6\n\"\"\") == \"3\"\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == \"3\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"F E\") == \">\"\nassert solution(\"D C\") == \"=\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"B A\") == \">\"\nassert solution(\"B A\") == \"=\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"A C\") == \">\"\nassert solution(\"B C\") == \"=\"\nassert solution(\"D E\") == \"=\"\nassert solution(\"E F\") == \">\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('A B') == '<'\nassert solution('B A') == '>'\nassert solution('A =') == '='\nassert solution('B =') == '='\n\"\"\"\n\nx, y = input().split()\nx = int(x, 16)\ny = int(y, 16)\n",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('A B') == '<'\nassert solution('B A') == '>'\nassert solution('B B') == '='\n\nimport json\n\nassert json.loads(solution('''{\"1\" : 1, \"2\" : 2, \"3\" : 3}''')) == {'1': 1, '2': 2, '3': 3}\nassert json.loads(solution('''{\"1\" : 1, \"2\" : 2, \"3\" : 3, \"4\" : 4}''')) == {'1': 1, '2': 2, '3': 3, '4': 4}\n\nimport os\nimport json\nfrom typing import List\n\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\n\nwith open(os.path.join(BASE_DIR, './input.txt'), 'r') as file:\n    stdin = file.read()\n\nfrom collections import OrderedDict",
        "num_ids_2": 22,
        "num_ids_4": 81
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\nA B\n''') == '<'\n\nassert solution('''\nA B\n''') == '<'\n\nassert solution('''\nC B\n''') == '>'\n\nassert solution('''\nB A\n''') == '<'\n\nassert solution('''\nB C\n''') == '>'",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"F B\") == \">\"\nassert solution(\"B A\") == \">\"\nassert solution(\"E B\") == \"=\"\nassert solution(\"A A\") == \"=\"\n\nprint(solution(input()))\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"B A\") == \">\"\nassert solution(\"A B A\") == \"=\"\nassert solution(\"A C B\") == \"<\"\nassert solution(\"A C C\") == \"=\"\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\nA B\nA C\nA D\nA E\nA F\n''') == '<'\n\nassert solution('''\nD E\nE F\n''') == '='\n\nassert solution('''\nF E\nE D\n''') == '>'\n\nassert solution('''\nA A\nB B\n''') == '='\n\nassert solution('''\nD A\nA A\n''') == '<'",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"A B\"\n) == \"<\"\n\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\nassert solution(\"5 5\\n.....\\n.....\\n.....\\n.....\\n\") == \"1121121111211211\"\nassert solution(\"3 4\\n#...\\n###\") == \"111212\"\nassert solution(\"3 3\\n#.#\\n###\") == \"111\"\nassert solution(\"1 1\\n#\") == \"1\"\n",
        "num_ids_2": 53,
        "num_ids_4": 91
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\".....\\n\"\n                \".....\\n\"\n                \".####\\n\"\n                \".....\\n\"\n                \".....\") == \"11211\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\n.....\\n.#.#.\\n.....') == '11122\\n1#2#1\\n11122'\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\nassert solution(\"1 10\\n.........\\n......#.\\n#..#...#\\n.#.#.#.#\\n.#.#.#.#\\n.#.#.#.#\\n.#.#.#.#\\n.#.#.#.#\\n\") == \"1#1#1#0#1#0#1#0#1#0#1#0\"\n",
        "num_ids_2": 105,
        "num_ids_4": 105
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\nassert solution(\"2 2\\n..\\n.#\") == \"11\"\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\nassert solution(\"3 5\\n..#..\\n#..#.\\n.....\") == \"111221\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\".#.......\") == \"1111111111\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\nassert solution(\"5 5 10000\\n3930 400 810 400\\n800 930 700 810 900\") == \"1\"\n\"\"\"",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n3 4 240\n60 90 120\n80 150 80 150\n''') == 3\nprint(solution(stdin=input()))\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\nassert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\n\"\"\"\nimport math",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\n\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == test_output_1\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150') == 3\n\"\"\"\n\n\"\"\"\n========================================================\n\uc2dc\uac04 \ucd08\uacfc\n\nimport sys\n\nn, m, k = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\nb = list(map(int, sys.stdin.readline().split()))\na.sort()\nb.sort()\n\ndp = [0 for i in range(n+m+1)]\ncount = 0\nfor i in range(n):\n    for j in range(m):\n        if (a[i] + b[j]) <= k:\n            dp[i+j] = max(dp[i+j], dp[i]+1)\n            count = max(count, dp[i+j])\n\nprint(count)\n\n========================================================\n\"\"\"\n\nimport sys\n\nn, m, k = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\nb = list(map(int, sys.stdin.readline().split()))\n\na.sort()\nb.sort()\n\na_idx = 0\nb_idx = 0\ncount = 0\nfor i in range(n+m):\n    if a_idx < n and (a[a_idx] + b[b_idx]) <= k:\n        a_idx += 1\n        b_idx += 1\n        count += 1\n    elif a_idx < n:\n        a_idx += 1\n    elif b_idx < m:\n        b_idx += 1\n\nprint(count)",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 4 240\n60 90 120\n80 150 80 150''') == '3'\n\n'''\n\n3 4 240\n60 90 120\n80 150 80 150\n\n'''\n\n----\n\n'''\n\n-----Sample Output-----\n4\n\nIn this case, it takes us 40, 90, 120, and 150 minutes to read the 1-st, 2-nd, 3-rd, and 4-th books from the top on Desk A, respectively.\nWe can read four books in 160 minutes, as shown below, and this is the maximum number of books we can read within 240 minutes.\n - Read the topmost book on Desk A in 40 minutes, and remove that book from the desk.\n - Read the topmost book on Desk A in 90 minutes, and remove that book from the desk.\n - Read the topmost book on Desk B in 80 minutes, and remove that book from the desk.\n - Read the topmost book on Desk A in 150 minutes, and remove that book from the desk.\nWe can read the first four books in 40 minutes, and this is the maximum number of books we can read within 160 minutes.\n\n'''\n\n-----",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 4 240\n60 90 120\n80 150 80 150''') == '3'\nassert solution('''3 4 240\n60 90 120\n60 150 80 150''') == '3'\nassert solution('''3 4 240\n60 90 120\n60 150 80 150''') == '2'\nassert solution('''3 4 240\n60 90 120\n60 150 80 150''') == '2'\nassert solution('''3 4 240\n60 90 120\n60 150 80 150''') == '2'\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == 3\n\"\"\"\n\nfrom collections import defaultdict\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\na.sort()\nb.sort()",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == 3\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str([1500, 2000, 1600, 3, 2])) == '7900'\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == '7900'\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\n\"\"\"\nimport re\n\nA, B, C, X, Y = map(int, re.findall(r'\\d+', input()))\nprint(A * X + B * Y + min((A * X + B * Y) // 2, C * X + (A * X + B * Y) // 2))\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n\na, b, c, x, y = list(map(int, input().split()))",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == '7900'\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\nassert solution(\"1500 2000 1600 4 2\") == \"7750\"\nassert solution(\"1500 2000 1600 3 3\") == \"8100\"\nassert solution(\"1500 2000 1600 4 4\") == \"8200\"\nassert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\n\"\"\"\n\nA, B, C, X, Y = [int(x) for x in input().split(' ')]\nprint(A * X + B * Y)\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n\") == \"4\"\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == 4\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '4'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '4'\nassert solution('4 1') == '4'\nassert solution('3 2') == '0'\n\n---Problem 2---\nWrite a program that reads an integer N, 0<=N<=10^6, and outputs the number of divisors of N.\n\n-----Constraints-----\n - 1\u2264N\u226410^6\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the number of the divisors of N.\n\n-----Sample Input-----\n5\n\n-----Sample Output-----\n5\n\nThere are five divisors of 5: 1, 5, 2, 4 and 10. Thus, the output should be 5.\n",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n\") == '4'\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('1') == 1\nassert solution('2') == 1\nassert solution('3') == 2\nassert solution('4') == 2\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == 4\n\"\"\"\n\n\"\"\"\nSOLUTION 2\n\nI'm assuming that a range of numbers can be inputted without being explicitly declared in the program\nInput: (from STDIN)\n\nN = int(stdin.readline())\n\nA = list(range(1, N + 1))",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n') == 4\n\n---",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == 1\nassert solution('2') == 2\nassert solution('3') == 4\nassert solution('4') == 6\n\"\"\"\n\nimport sys\n\nimport math\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3''') == 4\n\"\"\"\nimport math",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == '9'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"20\") == \"19\"\nassert solution(\"30\") == \"29\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"5\") == \"4\"\nassert solution(\"7\") == \"4\"\nassert solution(\"7\") == \"4\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10') == '9'\n\"\"\"\n\nimport math\n\nx = int(input())",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '4'\nassert solution('8') == '8'\nassert solution('9') == '9'\nassert solution('10') == '9'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '1'\nassert solution('1') == '1'\nassert solution('4') == '1'\nassert solution('8') == '1'\nassert solution('10') == '9'\n\n-----------\n    def solution(X: int) -> int:\n        i = 1\n        while i * i <= X:\n            i *= 2\n        i //= 2\n        while i > 0:\n            if i * i > X:\n                i -= 1\n            elif X % i == 0:\n                return i\n            else:\n                i -= 1\n        return 0\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"9\"\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"9\"\nassert solution(\"5\") == \"4\"\nassert solution(\"10\") == \"9\"\n\"\"\"\nimport math",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == '9'\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8') == '4'\nassert solution('4') == '4'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(':') == ':'\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('0:1') == '1'\nassert solution('0:1:2:3') == '3'\n",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 10 8 8 6\\n') == '3'\n\"\"\"\n\nimport sys\n\nN, *d = map(int, sys.stdin.read().split())",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\":\\n10\\n8\\n8\\n6\\n\") == \"3\"\nassert solution(\":\\n10\\n8\\n8\\n6\\n\") == \"3\"\nassert solution(\":\\n10\\n8\\n8\\n6\\n\") == \"3\"\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 72
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6') == '3'\n\"\"\"\n\nfrom unittest import TestCase",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6') == 3\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"\nassert solution(\"3\\n8\\n6\\n5\") == \"1\"\nassert solution(\"5\\n9\\n8\\n7\\n6\") == \"2\"\nassert solution(\"3\\n8\\n6\") == \"1\"\n\"\"\"\n\nfrom math import sqrt",
        "num_ids_2": 41,
        "num_ids_4": 79
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\\n\") == '3'\nassert solution(\"2\\n2\\n\") == '1'\n\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6') == '3'\n\"\"\"\n\n\"\"\"\n    public int solution(String[] input) {\n        int num_layers = input.length;\n        \n        for (int i = 0; i < num_layers; ++i) {\n            int diameter = Integer.parseInt(input[i]);\n            if (i == 0) {\n                res = 1;\n                continue;\n            }\n            \n            int prev_diameter = Integer.parseInt(input[i - 1]);\n            if (diameter > prev_diameter) {\n                res = Math.max(res, ++res);\n            }\n        }\n        return res;\n    }\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\n10\n8\n8\n6\n''') == 3",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == 5\n\"\"\"\n\ns = input()\ns = s[1:-1]\nprint(len(max(s.split('A'), key=len)))",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AQWERTYASDFZXCV') == 5\n\"\"\"\n\nfrom typing import List, Tuple",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == 5\n\"\"\"\n\ns = input()\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"ASDFZXCV\"\n\"\"\"\n\nimport re\n\nstdin = input()\nprint(len(re.findall(r'(?<=^[A-Z])(?=[A-Z]{1})', stdin)))\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"\n\nstdin = input()",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 8 12 40') == '2'\n\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 3\\n\") == \"2\"\nassert solution(\"3\\n4 5\\n\") == \"0\"\n\n---------------------------------------------------------------------------------------------------------------------------------------\nGiven the array A of N integers, find the index of the maximum sum of the elements of any subarray of A.\nWrite a function:\nclass Solution { public int solution(int[] A); }\nthat, given an array A of N integers, returns the index of the maximum sum of the elements of any subarray of A.\nFor example, given array A such that:\n  A[0] = 3  A[1] = 2  A[2] = -6\n  A[3] = 4  A[4] = 0\nthe function should return 1, as explained above.\nAssume that:\n  N is an integer within the range [0..100,000];\n  each element of array A is an integer within the range [\u22121,000,000..1,000,000].\nComplexity:\n    expected worst-case time complexity is O(N);\n    expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).\nElements of input arrays can be modified.\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == solution(\"\") == 2\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 8 12 40\") == \"2\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n8 12 40') == '2'\n\"\"\"\nimport sys\nimport io\nimport os\nfrom typing import List\n\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solution(self, stdin: io.TextIOWrapper) -> io.TextIOWrapper:\n        \"\"\"\n        Given N positive integers A_1,..., A_N.\n        Snuke can perform the following operation when all integers on the blackboard are even:\n         - Replace each integer X on the blackboard by X divided by 2.\n\n        :param stdin:\n        :return:\n        \"\"\"\n        n = int(stdin.readline())\n        numbers: List[int] = list(map(int, stdin.readline().split()))\n\n        # save the max operations\n        operations: int = 0\n        # save the number of operations\n        operation: int = 0\n        # save the max number in the array\n        max_num: int = 0\n        # save the number of max_num in the array\n        max_num_count: int = 0\n        # save the number of max_num in the array before operate\n        before_max_num_count: int = 0\n        # save the number of max_num in the array after operate\n        after_max_num_count: int = 0\n\n        while max_num < max(numbers):\n            max_num = max(numbers)\n            operations += 1\n            before_max_num_count = after_max_num_count\n            after_max_num_count = operation\n            operation = 0\n            for number in numbers:\n                if number == max_num:\n                    operation += 1\n\n        return str(max(after_max_num_count, operations - before_max_num_count))\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2\\n1 2\") == \"2\"\nassert solution(\"3\\n1 2 4\\n1 2 4\") == \"3\"\nassert solution(\"5\\n2 6 4 3\\n2 6 4 3\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 60
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n8 12 40\") == 2\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 8 12 40') == 2\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == 6\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == 6\n\"\"\"\n\nn = int(stdin.readline())\ns = 0\nfor i in range(1, n + 1):\n    s += i\nprint(s % (10 ** 9 + 7))\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"2\") == 1\nassert solution(\n    \"5\") == 9\nassert solution(\n    \"3\") == 6\nassert solution(\n    \"4\") == 12\nassert solution(\n    \"6\") == 20\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n') == '6'\nassert solution('2\\n') == '2'\nassert solution('1\\n') == '1'\nassert solution('0\\n') == '0'\nassert solution('-1\\n') == '0'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\\n2\\n3\") == 6\n\"\"\"\n\n\"\"\"\nExplaination:\n\nSnuke loves working out. He is now exercising N times.\nBefore he starts exercising, his power is 1. After he exercises for the i-th time, his power gets multiplied by i.\n\nExample:\nN = 3\n\nSnuke starts exercising, his power is 1\nSnuke exercises for the first time, his power is 1\nSnuke exercises for the second time, his power is 2\nSnuke exercises for the third time, his power is 6\n\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '6'\nassert solution('2') == '2'\nassert solution('1') == '1'\n\nimport sys\nfrom functools import reduce",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n') == 6\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 1\nassert solution('1\\n2\\n') == 3\nassert solution('1\\n2\\n3\\n') == 6\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\nresult = 1\n\nfor i in range(1, N + 1):\n    result = (result * i) % (10 ** 9 + 7)\n\nprint(result)\n",
        "num_ids_2": 18,
        "num_ids_4": 47
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n\") == 6\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('6') == '6'\nassert solution('9') == '18'\n\n\"\"\"\n\nN = int(input())\n\npower = 1\n\nfor _ in range(N):\n    power = power * (N - _ + 1)\n\nprint(power % (10 ** 9 + 7))\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == 6\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == '15'\nassert solution('6') == '21'\nassert solution('100') == '5555'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 31
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '6'\nassert solution('6') == '42'\nassert solution('100') == '6208'\nprint('Test pass.')",
        "num_ids_2": 20,
        "num_ids_4": 31
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n\") == \"6\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == 6\nassert solution(\"1\") == 1\nassert solution(\"2\") == 3\nassert solution(\"3\") == 6\n\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"10\"\n\"\"\"\n\nimport unittest",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3') == '6'\nassert solution('4\\n5\\n6') == '15'\n\nprint('Success')\n\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == 6\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n') == '6'\nassert solution('1\\n') == '1'\nassert solution('5\\n') == '14'\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n\") == \"6\"\n\nprint(solution(\"2\\n\"))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"5 2 6 4 8 9\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n3 1') == '2'\nassert solution('3\\n3 1') == '0'\nassert solution('3\\n3 1\\n1 2') == '2'\nassert solution('3\\n2\\n1 3') == '0'\nassert solution('4\\n4\\n1 2 3 4') == '0'\n",
        "num_ids_2": 28,
        "num_ids_4": 63
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1') == '2'\nassert solution('2 3') == '1'\nassert solution('1 1') == '0'\n\nprint('All tests passed.')",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1') == '2'\nassert solution('2 3') == '1'\nassert solution('2 3 4') == '0'\nassert solution('1 2 3') == '1'\nassert solution('3 3 3') == '0'\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 1\") == '2'\n\"\"\"\nimport sys\n\nN, *A = map(int, sys.stdin.read().split())\n\nprint(sum(max(0, A[i - 1] - A[i]) for i in range(1, N + 1)))\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1') == '2'\nassert solution('2 3 1') == '2'\n\"\"\"\nfrom typing import List\n\nclass Solution:\n    def solution(self, cards: str) -> str:\n        return str(sum(map(int, cards.split(' '))))\n\nassert Solution().solution('3 1') == '2'\nassert Solution().solution('2 3 1') == '2'",
        "num_ids_2": 23,
        "num_ids_4": 52
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1') == 2\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n\") == 2\n\n-----\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n3 1') == '2'",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(2)\n\nprint(solution(input()))\n\"\"\"\n\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 AC\\n1 AC\\n1 AC\\n2 WA\") == \"3 2\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(\n    solution(str(input()))\n)\n\nprint(solution(str(input())))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n1 AC\\n2 WA\") == \"1 1\"\nassert solution(\"4 4\\n1 AC\\n2 AC\\n3 WA\\n4 WA\") == \"2 2\"\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\"\n\nimport sys\nfrom collections import Counter",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"2 5\n1 WA\n1 AC\n2 WA\n2 AC\n2 WA\"\"\") == \"2 2\"\n\nassert solution(\"\"\"2 5\n1 AC\n1 WA\n2 AC\n2 WA\"\"\") == \"2 2\"\n\nassert solution(\"\"\"3 3\n1 AC\n2 WA\n1 WA\"\"\") == \"0 2\"\n\nassert solution(\"\"\"2 5\n1 AC\n1 WA\n2 AC\n2 WA\"\"\") == \"2 2\"\n\nassert solution(\"\"\"2 5\n1 AC\n1 AC\n1 AC\n1 WA\"\"\") == \"0 0\"",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected_output\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 5\n1 WA\n1 AC\n2 WA\n2 AC\n2 WA''') == '2 2'\nassert solution('''2 5\n1 WA\n1 AC\n2 WA\n2 AC\n2 WA''') == '2 2'\nassert solution('''2 5\n1 WA\n1 AC\n2 WA\n2 AC\n2 WA''') == '2 2'\nassert solution('''2 5\n1 WA\n1 AC\n2 WA\n2 AC\n2 WA''') == '2 2'\n\n'''\nimport re\n\nlines = stdin.split('\\n')\n\nN, M = list(map(int, re.findall(r'\\d+', lines[0])))\n\nproblems = {}\n\nfor i in range(1, M + 1):\n    p, s = list(map(int, re.findall(r'\\d+', lines[i])))\n    problems[p] = s\n\nans = 0\npen = 0\n\nfor i in range(1, N + 1):\n    if problems[i] == 1:\n        ans += 1\n        pen += 1\n    elif problems[i] == 2:\n        pen += 1\n    else:\n        pass\n\nprint(ans, pen)\n'''\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\nprint(\"PASSED\")\n\n---------------\nimport math",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\nprint(\"test 1: passed\")\n\nassert solution(\"3 7\\n1 WA\\n2 WA\\n1 AC\\n2 WA\\n2 AC\") == \"2 1\"\nprint(\"test 2: passed\")\n\nassert solution(\"4 10\\n1 WA\\n1 AC\\n1 AC\\n2 AC\\n1 WA\\n1 AC\\n1 WA\\n2 AC\\n1 AC\\n1 AC\\n1 WA\") == \"4 0\"\nprint(\"test 3: passed\")\n\nassert solution(\"7 10\\n1 AC\\n1 WA\\n1 AC\\n2 AC\\n1 AC\\n1 WA\\n1 AC\\n1 WA\\n1 WA\\n1 AC\\n1 WA\") == \"6 0\"\nprint(\"test 4: passed\")\n\nassert solution(\"7 10\\n1 AC\\n1 WA\\n1 AC\\n2 AC\\n1 AC\\n1 WA\\n1 AC\\n1 WA\\n1 WA\\n1 AC\\n1 WA\") == \"6 0\"\nprint(\"test 5: passed\")",
        "num_ids_2": 64,
        "num_ids_4": 176
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\\n4 1 5\") == \"5\"\n\"\"\"\n\nn, k = map(int, input().split())\nh = list(map(int, input().split()))\n\nm = 1001\nh.sort()\ni = 0\nwhile i < n:\n    if (h[i] > m):\n        break\n    else:\n        m = min(m, h[i] + k + 1)\n        i += 1\n\nprint(m)",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n4 1 5\") == \"5\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 5\") == \"5\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 5') == '5'\n\"\"\"\n\nN, K = map(int, stdin.readline().strip().split())\nH = [int(i) for i in stdin.readline().strip().split()]\nH.sort()",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n3 1\n4 1 5\n''') == '5'\nprint('Test pass.')",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n4 1 5\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 5\\n\") == \"5\"\nassert solution(\"4 2 5\\n\") == \"2\"\n\"\"\"\n\nN, K = map(int, input().split())\nH = list(map(int, input().split()))",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n4 1 5\") == \"5\"\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n4 1 5\\n\") == \"5\"\n\"\"\"\n\nfrom sys import stdin\n\nn, k = map(int, stdin.readline().split())\nh = list(map(int, stdin.readline().split()))\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n10\\n2\\n') == '4'\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3') == '6'\n\"\"\"\n\nN, K = map(int, input().split())\nx = list(map(int, input().split()))\nx_min = min(x)\nx_max = max(x)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 10 2') == '12'\nassert solution('4 10 7') == '14'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 10 2\") == 4\nassert solution(\"2 10 1\") == 2\nassert solution(\"10 10 10\") == 10\n\"\"\"\nimport math\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 10\\n1\\n2\\n') == '4'\n\n'''",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 10 2') == '4'\n\"\"\"\n\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n1') == '4'\nassert solution('1\\n1\\n1') == '0'\n\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 10\\n2\\n\") == '4'\n\"\"\"\n\nN, K = map(int, input().split())\nX = list(map(int, input().split()))\nprint(K*max(X))\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 10 2\") == 4\n\"\"\"\n\nimport sys\nfrom itertools import product\n\nN, K, X = map(int, sys.stdin.readline().strip().split())\n\nX = sorted(X)\n\nmin_dist = 0\nfor A, B in product(range(N + 1), range(1, N + 1)):\n    dist = abs(A * K - B * X[A - 1])\n    if dist > 0:\n        min_dist += dist\n\nprint(min_dist)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('600 300 220 420') == '520'\n\"\"\"\n\na, b, c, d = map(int, stdin.split())\n\na = a*d + c*(a+b)\nb = b*d + c*(b+a)\n\nprint(min(a, b))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('600 300 220 420') == '520'\nassert solution('2000 2000 2000 2000') == '2000'\n\"\"\"\n\nfrom typing import Dict, List\n\nimport sys\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\nassert solution(\"1 1 1 1\") == \"0\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('600 300 220 420') == '520'\n\"\"\"\n\na, b, c, d = map(int, input().split())\nprint(a * min(d, b) + c * min(d, b) * 0.9)\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\"\"\"\n\nimport sys\nimport math\n\nfor line in sys.stdin:\n    A, B, C, D = list(map(int, line.split()))\n    print(min(A + B, C + D))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('600 300 220 420') == '520'\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\"\"\"\nimport sys\n\nfrom collections import namedtuple\n\nTrain = namedtuple('Train', ['cost', 'limit'])\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('600 300 220 420') == '520'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('600 300 220 420') == '520'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\nprint(\"Test 1: Ok\")\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 4 4 0 2\\n') == '4'\nassert solution('5\\n2 4 4 1 2\\n') == '0'\nassert solution('5\\n0 2 4 4 1 2\\n') == '4'\nassert solution('4\\n2 4 4 0 2\\n') == '4'\nassert solution('4\\n2 4 4 1 2\\n') == '4'\n",
        "num_ids_2": 38,
        "num_ids_4": 77
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 4 0 2\") == '4'\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\nassert solution(\"1\\n2\") == \"0\"\nassert solution(\"10\\n0 2 6 8 0 4 7 1 3 5 9\") == \"0\"\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 53
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n2 4 4 0 2''') == '4'\nassert solution('''6\n4 3 2 4 0 2''') == '2'\nassert solution('''5\n0 2 0 4 0''') == '0'\nassert solution('''2\n2 0''') == '1'\n\nimport sys\nfrom typing import List\n\nfrom utils import ProblemParser\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\nassert solution(\"5\\n2 0 0 1 3\") == \"0\"\n\"\"\"\n\n\"\"\"\nSample Input:\n5\n2 4 4 0 2\n\nSample Output:\n4\n\nExplanation:\n - 2,1,4,5,3\n - 2,5,4,1,3\n - 3,1,4,5,2\n - 3,5,4,1,2\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 4 0 2\\n') == 4\nassert solution('5 2 4 4 0 2\\n') == 4\nassert solution('5 1 2 4 4 0 2\\n') == 4\nassert solution('5 3 4 4 0 2\\n') == 0\nassert solution('5 4 4 0 2 1\\n') == 4\n",
        "num_ids_2": 29,
        "num_ids_4": 60
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\nassert solution(\"5\\n1 2 4 3 0\") == \"1\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\nwhile True:\n    s = sys.stdin.readline().strip()\n    if s == '':\n        break\n    nums = list(map(int, s.split(' ')))\n    print(sum([nums[i+1] - nums[i] for i in range(n-1)]))\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 5') == '84'\nassert solution('4 5 4') == '0'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('0 1 1') == ''\nassert solution('2 1 1') == ''\nassert solution('20 1 5') == ''\nassert solution('2 2 1') == ''\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 3\\n') == '84'\nassert solution('1 3 4\\n') == '10'\nassert solution('100 100 100\\n') == '0'\nassert solution('10 0 10\\n') == '0'\nassert solution('100 1000 100\\n') == '0'",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 2 5\") == \"84\"\nprint('All tests passed.')\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 2 5\") == \"84\"\nprint(solution(\"20 2 5\"))\n\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 2 5\") == \"84\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9') == '45'\nassert solution('20 2 5') == '84'\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20 2 5') == \"84\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 2 5\") == \"84\"\n\nassert solution(\"20 2 5\") == \"84\"\n\nassert solution(\"20 2 5\") == \"84\"\n\nassert solution(\"20 2 5\") == \"84\"\n\nassert solution(\"20 2 5\") == \"84\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 2 5\") == \"84\"\nassert solution(\"20 4 5\") == \"0\"\nassert solution(\"20 4 3\") == \"0\"\nassert solution(\"10 10 36\") == \"0\"\nassert solution(\"10 10 20\") == \"60\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100\") == \"ABC100\"\nassert solution(\"999\") == \"ABC999\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\"\n\nN = int(input())",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\n------\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100') == 'ABC100'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100') == 'ABC100'\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100\") == \"ABC100\"\nassert solution(\"200\") == \"ABC200\"\nassert solution(\"300\") == \"ABC300\"\nassert solution(\"400\") == \"ABC400\"\nassert solution(\"500\") == \"ABC500\"\n\nprint(solution(stdin))\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100\") == \"ABC100\"\nprint(solution(\"100\"))",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\"\n\nn = int(input())\nprint(f\"ABC{n}\")",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"1 1\") == \"0\"\n\nprint(solution(\"5 5\"))\nprint(solution(\"3 3\"))\nprint(solution(\"1 1\"))\n\n-----------------------------------------------------------------------------------",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"4 4\") == \"0\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"1 1\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 7\") == \"No Takahashi\"\n\"\"\"\n\nfrom typing import Dict",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 1 0\") == \"0\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"11 12\") == \"0\"\nassert solution(\"10 12\") == \"1\"\nassert solution(\"1 1\") == \"0\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\"\n\na, b = map(int, stdin.strip().split())\ntakahashi = 0\nfor i in range(1, 13):\n    for j in range(1, 32):\n        if i == a and j == b:\n            takahashi += 1\nprint(takahashi)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"10 3\") == \"5\"\nassert solution(\"3 10\") == \"2\"\nassert solution(\"4 4\") == \"0\"\n\n\"\"\"\nfrom datetime import datetime as dt",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5') == '5'\nassert solution('1 1') == '0'\nassert solution('1 2') == '0'\nassert solution('1 2') == '1'\nassert solution('2 2') == '0'\n\n====================================================",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1\\n2\\n') == '2'\nassert solution('3\\n1\\n2\\n') == '2'\nassert solution('3\\n1\\n2\\n') == '2'\n\"\"\"\n\nimport sys",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\\n2\\n\") == \"2\"\nassert solution(\"3\\n1\\n1\\n\") == \"-1\"\n\"\"\"\n\nfrom collections import deque\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1\\n2\\n') == '2'\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3\\n1\\n2\\n\") == \"2\"\nassert solution(\"2\\n1\\n2\\n\") == \"1\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n3\\n1\\n2\") == \"2\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\\n2\\n\") == \"2\"\nassert solution(\"3\\n3\\n1\\n2\\n\") == \"1\"\n\n-----Explanation-----\nCase 1:\n1,2,3\na_1=3\na_2=1\n2\n\nCase 2:\n1,3,2\na_1=3\na_2=2\n2\n\nIn both cases, the solution is 2.\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\\n2\") == \"2\"\nassert solution(\"1\\n1\\n1\") == \"-1\"\n\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n2\\n\") == \"2\"\nassert solution(\"3\\n1\\n2\\n\") == \"2\"\nassert solution(\"3\\n3\\n3\\n\") == \"1\"\nassert solution(\"3\\n3\\n2\\n\") == \"0\"\n\n-----\n3\n3\n3\n\n-----\n2\n1\n2\n\n-----\n1\n2\n\n-----\n1\n\n-----\n2\n1\n2\n\"\"\"\n\nn = int(input())\nb = list(map(int, input().split()))\ncnt = 0\n\nwhile b.count(2) > 0:\n    if b.count(1) == 0:\n        break\n    b.sort()\n    print(b)\n    cnt += 1\n    b[0] += 1",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1\\n2\\n') == '2'\n\nassert solution('5\\n4\\n3\\n1\\n2\\n') == '-1'\n\nassert solution('3\\n2\\n1\\n') == '0'\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 43,
        "num_ids_4": 61
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\nassert solution(\"5\\n1\\n3\\n4\\n5\\n3\") == \"5\"\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\"\n\nimport math\n\nN = int(stdin.readline().rstrip())\nA = list(map(int, stdin.readline().rstrip().split(\" \")))\n\nC = 0\nfor a in A:\n    C += math.ceil(math.log2(a))\n\nprint(C)\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n6\\n2\\n6') == '1'\nassert solution('1\\n2') == '2'\nassert solution('3\\n6\\n2\\n6\\n6\\n2\\n6') == '3'\n\"\"\"\n\nimport sys\nfrom typing import List, Union, Iterator",
        "num_ids_2": 32,
        "num_ids_4": 60
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n6\\n2\\n6') == '1'\n\"\"\"\n\nimport sys\n\nN = int(input())\nans = 0\n\nfor _ in range(N):\n    ans += int(input())\n\nprint(ans)\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '1'\nassert solution('3\\n') == '2'\nassert solution('4\\n') == '2'\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n2\\n6\") == '1'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == '1'\nassert solution(\"1\\n6\\n2\\n6\") == '1'\nassert solution(\"3\\n6\\n2\\n6\") == '1'\nassert solution(\"3\\n6\\n2\\n6\") == '1'\nassert solution(\"3\\n6\\n2\\n6\") == '1'\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == 1\n\"\"\"\nimport math\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 2 2 5\\n\") == \"1\"\n\"\"\"\nimport sys\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n1 2 3 4\\n') == '1'\n\"\"\"\nfrom __future__ import annotations\n\nimport typing\nfrom collections import Counter",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1 2 2 5') == 1\n\"\"\"\n\nimport sys\n\nN, K = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\n\nunique = set()\n\nfor i in A:\n    if i in unique:\n        unique.remove(i)\n    else:\n        unique.add(i)\n\nprint(min(N - len(unique), K))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\nassert solution(\"5 4\\n1 1 2 2 5\") == \"2\"\nassert solution(\"5 4\\n1 1 2 2 3\") == \"3\"\nassert solution(\"5 3\\n1 1 2 2 5\") == \"2\"\nassert solution(\"5 5\\n1 1 2 2 5\") == \"1\"\n\n\"\"\"\n\nfrom math import gcd",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 2 2 5\") == \"1\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 2\n1 1 2 2 5''') == '1'\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 2 2 5') == '1'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 1 2 2 5\") == '1'\n\"\"\"\n\n\n\"\"\"\n\n-----SOLUTION-----\nThe solution for this problem is to keep track of the number of distinct integers that have been written on each ball. Then, we will keep track of the number of balls we have rewitten to (the number of distinct integers written on a ball).\n\nWhenever we rewite an integer, we keep track of the number of balls that have this integer written on them. If there are more balls with this integer written on them than we have rewritten so far, we decrement the number of balls that have this integer written on them.\n\nFor example, consider the following input:\n\n5 2\n1 1 2 2 5\n\nIf we want to rewrite the integer 1 from the first ball, we keep track of the number of balls that have 1 written on them. If there are at least 3 balls with 1 written on them, we can rewrite 1, otherwise we can not. For the next integer 2, we keep track of the number of balls that have 2 written on them. If there are at least 1 balls with 2 written on them, we can rewrite 2, otherwise we can not. For the next integer 3, there is only one ball with 3 written on it, so we can not rewrite 3, but for the next integer 5, there are three balls with 5 written on them. So, we can rewrite 5.\n\nAt the end, the number of balls that have 5 written on them is 3, so the answer is 3.\n\nThe solution involves a nested loop with complexity O(N^2), and the maximum number of distinct integers that can be written on a ball is O(N).",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 2\n1 1 2 2 5''') == '1'\n\"\"\"\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\\n6 1 1\\n\") == \"Yes\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 2\\n6 1 1\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 6\\n3 1 2') == 'Yes'\nassert solution('2 1 2\\n5 1 1') == 'No'\n\nprint(solution(stdin))\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == \"Yes\"\nassert solution(\"6 1 1\") == \"Yes\"\nassert solution(\"6 1 1\") == \"Yes\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 1\\n1 1 1\\n1 2 1\\n1 3 1\\n1 4 1\\n4 4 4\") == \"No\"\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 3 0 2 5\\n2 3 1 4 5\") == \"No\"\nassert solution(\"4\\n2 1 1 3\\n1 3 2 2\") == \"No\"\nassert solution(\"4\\n1 1 1 3\\n2 2 1 1\") == \"Yes\"\n\n\"\"\"",
        "num_ids_2": 46,
        "num_ids_4": 68
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n3 1 2\\n6 1 1') == 'Yes'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\nassert solution(\"1\\n1 1 1\") == \"No\"\n\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom itertools import combinations",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == \"2\"\n\"\"\"\n\nfrom decimal import Decimal\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"5\"\n\"\"\"\n\nimport sys\n\na, b = [int(x) for x in sys.stdin.readline().strip().split()]\n\nprint(int((a + b) / 2 + 0.5))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3\") == \"2\"\n\n\"\"\"\n\nimport sys\nimport math\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3\") == 2\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5') == 5\nassert solution('4 3') == 4\nassert solution('1 3') == 2\nassert solution('1 2') == 1\n",
        "num_ids_2": 16,
        "num_ids_4": 34
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"2\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3\\n\") == \"2\"\nassert solution(\"4 5\\n\") == \"6\"\nassert solution(\"1 2\\n\") == \"2\"\nassert solution(\"99 0\\n\") == \"99\"\nassert solution(\"5 99\\n\") == \"100\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1, 3) == 2\nassert solution(8, 11) == 9\n\n\"\"\"\n\n\n\"\"\"\n\u041d\u0435 \u0437\u043d\u0430\u044e \u0440\u0435\u0448\u0435\u043d\u0438\u044f\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\\n\") == \"2\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3\\n\") == \"2\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\n-----Explanation-----\nThe given graph is:\n\nstart\n\nwith the edges:\n\n1 3\n\n2 7\n\n3 4\n\n4 5\n\n4 6\n\n5 6\n\n6 7\n\nAns 4, because the graphs in the figure are shown on the right.\n\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"4\"\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\\n\") == \"4\"\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == '4'\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2') == \"3\\n\"\nassert solution('4\\n5') == \"5\\n\"\nassert solution('2\\n1\\n3') == \"1\\n\"\n\"\"\"\n\nfrom unittest import TestCase, main\n",
        "num_ids_2": 30,
        "num_ids_4": 48
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nfrom sys import stdin, stdout\nimport heapq",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n1 3\\n2 4\\n3 4\\n\") == \"4\"\nassert solution(\"5 5\\n2 3\\n4 5\\n2 5\\n4 5\\n\") == \"0\"\nassert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\\n\") == \"3\"\n",
        "num_ids_2": 54,
        "num_ids_4": 95
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3\\n1 2\\n2 3\\n3 4\") == \"4\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"4\", \"Not a correct solution!\"\n\"\"\"\n\nimport re",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\\n') == '4'\nassert solution('4 5\\n1 3\\n2 7\\n3 4\\n4 5\\n') == '0'\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 70,
        "num_ids_4": 70
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 7 5') == '7'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(5, 7, 5) == 7\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 7 5') == '7'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 7 5\") == \"7\"\n\"\"\"\n\na, b, c = map(int, input().split())\nprint(a if a!= b and a!= c else b if b!= c else c)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 7 5') == '7'\nassert solution('3 2 3') == '2'\nassert solution('3 1 2') == '1'\nassert solution('1 2 1') == '2'\n\"\"\"\n\na, b, c = map(int, input().split(' '))",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 7 5') == '7'\n\"\"\"\n\nfrom typing import List, Set\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 7 5') == '7'\nassert solution('1 1 1') == '1'\nassert solution('1 1 2') == '2'\nassert solution('2 1 2') == '1'\nassert solution('5 4 3') == '4'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7 5\") == \"7\"\nassert solution(\"5 5 5\") == \"5\"\nassert solution(\"7 7 7\") == \"7\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"10 10 10\") == \"10\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(sys.stdin.read())) == \"7\\n\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 7 5') == '7'\nassert solution('1 1 1') == '1'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''1 2 10 20 15 200''') == '110 10'\n\n\"\"\"\n\nA, B, C, D, E, F = map(int, stdin.split())\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\n\nimport sys\ninput = sys.stdin.readlines",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n\nfrom typing import List\n\nA, B, C, D, E, F = [int(i) for i in stdin.split()]",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\n\"\"\"\nimport sys\n\nTESTS = [\n    (1, 2, 10, 20, 15, 200, 110, 10),\n    (1, 2, 10, 20, 15, 1, 20, 5),\n    (1, 2, 10, 20, 15, 20, 5, 10),\n    (1, 2, 10, 20, 15, 20, 20, 5),\n    (1, 2, 10, 20, 15, 20, 20, 50),\n    (1, 2, 10, 20, 15, 20, 20, 500),\n    (1, 2, 10, 20, 15, 20, 20, 50),\n]\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('internationalization') == 'i18n'\nassert solution('localization') == 'l18n'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('internationalization') == 'i18n'",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('internationalization') == 'i18n'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('internationalization') == 'i18n'\nprint('Test passes.')\n\n-----\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\n-----\n'''",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('internationalization') == 'i18n'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('pot') == 'YES'\nassert solution('top') == 'NO'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"pot\") == \"YES\"\n\nimport sys\nfor line in sys.stdin:\n    print(solution(line))\n\n'''",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"pot\") == \"YES\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('pot top') == 'YES'\nassert solution('top pot') == 'YES'\nassert solution('top top') == 'NO'\nassert solution('pot pot') == 'NO'\nassert solution('pot top top') == 'NO'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('pot') == 'YES'\nassert solution('top') == 'YES'\nassert solution('xyl') == 'NO'\nassert solution('zyx') == 'NO'\nassert solution('zpq') == 'NO'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    'pot\\ntop'\n) == 'YES'\nassert solution(\n    'not\\nright'\n) == 'NO'\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aba') == 'b'\nassert solution('ababc') == 'ab'\nassert solution('abac') == 'ab'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aba') == 'b'\nassert solution('abac') == 'a'\nassert solution('abc') == 'ab'\n\nstdin = input()\nk = int(input())\nsolution(stdin)\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aba') == 'b'\nassert solution('abacab') == 'aba'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"b\"\nassert solution(\"abac\") == \"a\"\nassert solution(\"abab\") == \"ab\"\nassert solution(\"abababa\") == \"b\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aba') == 'b'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aba') == 'b'\nassert solution('abc') == 'c'\nassert solution('abca') == 'a'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 20,
        "num_ids_4": 31
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aba') == 'b'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aba\") == \"b\"\nassert solution(\"abb\") == \"b\"\nassert solution(\"bab\") == \"ab\"\nassert solution(\"abbab\") == \"ba\"\nassert solution(\"abbaba\") == \"ab\"\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aba\") == \"b\"\n\"\"\"\n\ns, k = stdin.split(\"\\n\")\nk = int(k)\n\nprint(s[k - 1])\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ababc\") == \"b\"\nassert solution(\"aba\") == \"b\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4 2\\n2 1 1\\n3 3 4') == '9'\n\"\"\"\n\nW, H, N = input().split()\nW = int(W)\nH = int(H)\nN = int(N)\nlst = []\nfor _ in range(N):\n    lst.append(list(map(int, input().split())))\nfor i in range(N):\n    x, y, a = lst[i]\n    if a == 1:\n        for j in range(i + 1, N):\n            if lst[j][0] < x:\n                x = lst[j][0]\n            if x <= lst[j][0]:\n                break\n    elif a == 2:\n        for j in range(i + 1, N):\n            if lst[j][0] > x:\n                x = lst[j][0]\n            if x >= lst[j][0]:\n                break\n    elif a == 3:\n        for j in range(i + 1, N):\n            if lst[j][1] < y:\n                y = lst[j][1]\n            if y <= lst[j][1]:\n                break\n    elif a == 4:\n        for j in range(i + 1, N):\n            if lst[j][1] > y:\n                y = lst[j][1]\n            if y >= lst[j][1]:\n                break\n    else:\n        pass\n    if x > W or y > H:\n        print(0)\n        continue\n    if x < 0 or y < 0:\n        print(0)\n        continue\n    else:\n        print((x + 1) * (H + 1) + (y + 1) * (x + 1))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n5 4 2\n2 1 1\n3 3 4\n    \"\"\"\n) == '9'\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\"\n\nW, H, N = map(int, input().split())\nxs, ys, as_ = [0], [0], [0]\nfor _ in range(N):\n    x, y, a = map(int, input().split())\n    xs.append(x)\n    ys.append(y)\n    as_.append(a)\n\nprint(sum(1 for x, y, a in zip(xs, ys, as_) if a in [1, 2] and x >= 0 and y >= 0 and x < W and y < H))\nprint(sum(1 for x, y, a in zip(xs, ys, as_) if a in [3, 4] and x >= 0 and y >= 0 and x < W and y < H))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n5 4 2\n2 1 1\n3 3 4\n\"\"\"\n) == '9'\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 4\\n1 1 2\\n3 3 4\") == \"9\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 3\\n1 1 4\\n1 2 1\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\",
        "num_ids_2": 1458,
        "num_ids_4": 1458
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\"\n\nfrom typing import List, Tuple, Set\n\nw, h, n = [int(n) for n in stdin.split()]\n\npoints: List[Tuple[int, int, int]] = []\nfor _ in range(n):\n    x, y, a = [int(n) for n in stdin.split()]\n    points.append((x, y, a))",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 4 2\n2 1 1\n3 3 4\n''') == '9'\nassert solution('''5 4 2\n2 1 2\n3 3 4\n''') == '9'\nassert solution('''5 4 2\n2 1 4\n3 3 4\n''') == '14'\nassert solution('''5 4 2\n2 3 4\n3 3 4\n''') == '0'\nassert solution('''10 10 10\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n''') == '0'\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4 2\\n2 1 1\\n3 3 4') == '9'\n\"\"\"\n\nW, H, N = map(int, stdin.readline().strip().split())\narr = [list(map(int, stdin.readline().strip().split())) for _ in range(N)]\n\narr.sort(key=lambda x: (x[0], x[1]))\nprint(arr)\n\npaint = {1: [1], 2: [2], 3: [3], 4: [4]}\n\nfor x, y, a in arr:\n    for key, value in paint.items():\n        if a == key:\n            if key == 1:\n                paint[key] = [x - 1]\n            elif key == 2:\n                paint[key] = [x + 1]\n            elif key == 3:\n                paint[key] = [y + 1]\n            else:\n                paint[key] = [y - 1]\n\npaint = [sum(i) for i in zip(*paint.values())]\nprint(paint)\n\nprint(W * H - sum(paint))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 10 1\\n\") == \"12\"\nassert solution(\"3\\n1 10 1\\n\") == \"11\"\n\"\"\"\n\nimport sys\nimport math\n\nN = int(sys.stdin.readline())\n\nstations = []\nfor _ in range(N):\n    time, interval = list(map(int, sys.stdin.readline().split()))\n    stations.append((time, interval))\n\nstations.sort()\ncur_time = stations[0][0]\ncur_interval = 0\nfor time, interval in stations[1:]:\n    if cur_time % interval == 0:\n        cur_time = time\n    else:\n        cur_time += interval\nprint(cur_time)\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 10 1\\n\") == \"12\"\n\"\"\"\nimport math\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n4 5 6\\n7 8 9') == '3\\n5\\n0'\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n6 5 1\\n1 10 1\") == \"12\\n11\\n0\"\n\"\"\"\n\n\"\"\"\nN = int(stdin.readline())\n\nC = [int(x) for x in stdin.readline().split()]\n\nS = [int(x) for x in stdin.readline().split()]\n\nF = [int(x) for x in stdin.readline().split()]\n\nC.insert(0, 0)\nS.insert(0, 0)\nF.insert(0, 0)\n\nS = [i+j for i, j in zip(S, C)]\n\nS = [i%j for i, j in zip(S, F)]\n\nprint(max(S))\n\"\"\"\n\"\"\"\nN = int(input())\n\nC = [int(input()) for _ in range(N)]\n\nS = [int(input()) for _ in range(N)]\n\nF = [int(input()) for _ in range(N)]\n\nS = [i+j for i, j in zip(S, C)]\n\nS = [i%j for i, j in zip(S, F)]\n\nprint(max(S))\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n6 5 1\\n1 10 1\") == \"12\\n11\\n0\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n6 5 1') == '12\\n11\\n0'\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n6 5 1\n1 10 1\n\"\"\") == \"12\\n11\\n0\"\n\"\"\"\n    \n\"\"\"\n",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'''3\n6 5 1\n1 10 1\n'''\n) == '''12\n11\n0'''\n\nassert solution(\n'''3\n7 1 10\n1 10 1\n'''\n) == '''0\n1\n0'''\n\nassert solution(\n'''3\n1 1 10\n0 10 1\n'''\n) == '''1\n0\n0'''\n\nassert solution(\n'''3\n6 10 1\n0 10 1\n'''\n) == '''0\n0\n0'''\n\nassert solution(\n'''4\n3 6 10\n0 0 0\n'''\n) == '''3\n3\n0'''",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 5 1\\n1 10 1\\n\") == \"12\\n11\\n0\"\n\n\"\"\"\n\nN = int(input())\nC_list = [0] + [int(input().split()[-1]) for i in range(N)]\nS_list = [int(input().split()[-1]) for i in range(N)]\nF_list = [int(input().split()[-1]) for i in range(N)]\nS_list = [0] + S_list\nF_list = [0] + F_list\n\ncur = 1\ntime = 0\nans = []\nfor i in range(N):\n    while cur < N:\n        if S_list[cur] <= time and time % F_list[cur] == 0:\n            break\n        cur += 1\n    ans.append(str(time))\n    time += C_list[cur]\n\nprint(\" \".join(ans))\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n6 5 1\n1 10 1\n\"\"\") == \"12\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n.*\\n.*') == '.*\\n.*'\nprint(solution('2 2\\n.*\\n.*'))\n\nsolution('2 2\\n.*\\n.*')",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n.*\\n.*') == '.*\\n.*\\n.*\\n.*\\n'\nassert solution('1 1\\n*') == '*'\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n.*\\n.*') == '*.\\n.*\\n.*\\n.*\\n'\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n*.\\n.*\") == \"*.\\n.*\\n.*\\n.*\"\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n*.\\n.*\") == \"*.\\n*.\\n.*\\n.*\"\nassert solution(\"2 2\\n..\\n..\") == \"..\\n..\\n..\\n..\"\nassert solution(\"2 2\\n..\\n..\\n..\") == \"..\\n..\\n..\\n..\\n..\\n..\"\nassert solution(\"5 5\\n..*\\n.*.\\n.*.\\n.*.\\n.*.\") == \"..*\\n.*.\\n.*.\\n.*.\\n.*.\"\nassert solution(\"3 3\\n..\\n.*\\n.*\") == \"..\\n.*\\n.*\\n.*\\n..\\n.*\\n.*\\n.*\\n\"\n",
        "num_ids_2": 52,
        "num_ids_4": 133
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\n*\\n.*') == '*.\\n.*'\nassert solution('2 2\\n.*\\n.*') == '*.*\\n.*.*'\nassert solution('2 2\\n.\\n.*') == '.*\\n.*'\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 62
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 2\n*.\n.*''') == '*.\\n.*'\nassert solution('''2 2\n*.''') == '*.*'\nassert solution('''2 2\n.*\n.*''') == '.*\\n.*'\nassert solution('''3 3\n.*.*\n.*.*\n.*.*''') == '.*.*\\n.*.*\\n.*.*'\nassert solution('''3 3\n*..\n*..\n*..''') == '*.*\\n.*.*\\n*.*'\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n.*\\n.*') == '.*\\n.*'\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/5a7a98b77f7f5a1d860005fa/solutions/python",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n*.\\n.*\") == \"*.\\n.*\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1 2'\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\nassert solution('5\\n3 6 1 5 2') == 'NO'\n\nassert solution('5\\n7 2 1 3 4') == 'NO'\n\n\"\"\"\nimport sys",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"\nassert solution(\"5\\n1 2 3 4 5\") == \"NO\"\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\n\n-------\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"\nassert solution(\"5\\n2 6 1 4 3\") == \"NO\"\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 6 1 4 5') == 'YES'\n\"\"\"\n\n\"\"\"\nSolution 1\nComplexity\nTime: O(N)\nSpace: O(N)\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 6 1 4 5') == 'YES'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 6 1 4 5') == \"YES\"\n\n---\n[1,2,3,4,5,6]\n\n[1,2,3,4]\n[1,2,3]\n[1,2]\n\nimport math",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n    \"\"\") == \"2\"\nassert solution(\"\"\"\n5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n    \"\"\") == \"3\"\nassert solution(\"\"\"\n5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n    \"\"\") == \"4\"\nassert solution(\"\"\"\n5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n    \"\"\") == \"1\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"3\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"4\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 134,
        "num_ids_4": 201
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n\"\"\") == '2'\nassert solution(\"\"\"\n5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n\"\"\") == '3'\nassert solution(\"\"\"\n5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n\"\"\") == '4'\nassert solution(\"\"\"\n5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n\"\"\") == '1'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\\n3\\n4\\n1\\n2\"\n\"\"\"\n",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"3\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"4\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\n",
        "num_ids_2": 128,
        "num_ids_4": 256
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"3\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"4\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\n",
        "num_ids_2": 124,
        "num_ids_4": 248
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '2'\nassert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '3'\nassert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '4'\nassert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '1'\nassert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '2'\n\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 124,
        "num_ids_4": 248
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"3\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"4\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"1\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\n",
        "num_ids_2": 130,
        "num_ids_4": 260
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n3 2 2 1 2 1 1 2\") == \"2\"\nassert solution(\"6\\n2 2 2 1 2 1 1 2\") == \"3\"\nassert solution(\"6\\n4 2 2 1 2 1 1 2\") == \"2\"\nassert solution(\"6\\n5 2 2 1 2 1 1 2\") == \"2\"\nassert solution(\"6\\n5 1 2 2 1 2 1 2\") == \"2\"\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"3\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"4\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 134,
        "num_ids_4": 268
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"3\\n1\\n5\\n77\"\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open(\"input.txt\", \"r\")) == open(\"output.txt\", \"r\").read()\n\"\"\"\n\nimport sys",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\") == \"3\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"22 5\") == \"5\"\nassert solution(\"987 13\") == \"77\"\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open(\"tests/2.example.in\")) == \"3\"\nassert solution(open(\"tests/2.example.in\")) == \"1\"\nassert solution(open(\"tests/2.example.in\")) == \"5\"\nassert solution(open(\"tests/2.example.in\")) == \"77\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\") == \"3\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"22 5\") == \"5\"\nassert solution(\"987 13\") == \"77\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\\n\") == \"3\"\nassert solution(\"7 3\\n22 5\\n987 13\\n\") == \"1\"\nassert solution(\"7 3\\n22 5\\n987 13\\n\") == \"5\"\nassert solution(\"7 3\\n22 5\\n987 13\\n\") == \"77\"\n",
        "num_ids_2": 46,
        "num_ids_4": 88
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"3\"\nassert solution(\"9 3\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\") == \"7\"\n\"\"\"\n",
        "num_ids_2": 62,
        "num_ids_4": 62
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\") == \"1\"\nassert solution(\"7 3\") == \"3\"\nassert solution(\"22 5\") == \"77\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"3\"\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"1\"\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"5\"\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"77\"\n\n\"\"\"\n",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\") == \"3\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"22 5\") == \"5\"\nassert solution(\"987 13\") == \"77\"\nassert solution(\"7 3\") == \"3\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abca') == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\nassert solution('codeforces') == '9 4 5 3 0 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0'\nassert solution('qwertyuioplkjhgfdsazxcvbnm') == '26 10 1 2 3 5 10 5 9 4'\n",
        "num_ids_2": 72,
        "num_ids_4": 105
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0\"\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\n\n\n\n-----Explanation-----\n\nIf we press the button 'a' four times, the combo will be \"abca\", then \"a\", \"b\", \"c\" and \"a\" again.\n\nIf we press the button 'c' nine times, the combo will be \"codeforces\", then \"c\", \"d\", \"e\", \"f\", \"o\", \"r\", \"s\" and \"f\" again.\n\n\"codeforces\" is the longest, so the answer is \"0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0\".\n\nsolution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nsolution(\"codeforces\") == \"0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0\"\nsolution(\"qwertyuioplkjhgfdsazxcvbnm\") == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\n\n\n\"\"\"\n",
        "num_ids_2": 73,
        "num_ids_4": 122
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"codeforces\") == '26 10 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2'\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abca') == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\nassert solution('codeforces') == '9 4 2 1 5 3 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0'\n\n\"\"\"",
        "num_ids_2": 72,
        "num_ids_4": 72
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abca\") == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"codeforces\") == [9, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == [26, 10, 1, 2, 9, 2, 2, 5, 2, 2, 1, 1, 5, 4, 11, 8, 2, 7, 1, 10, 1, 5, 2]\n\n\n\"\"\"\n\n\nimport sys\nimport math\nimport itertools",
        "num_ids_2": 92,
        "num_ids_4": 160
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abca') == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\nassert solution('codeforces') == '0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0'\nassert solution('qwertyuioplkjhgfdsazxcvbnm') == '2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2'\n\n------",
        "num_ids_2": 73,
        "num_ids_4": 122
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"2 1 1 2 9 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\n\"\"\"",
        "num_ids_2": 72,
        "num_ids_4": 72
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abca') == 'a4b2c1a1', 'abca'\nassert solution('codeforces') == 'c9d4e5f3o9r1s', 'codeforces'\n\"\"\"\nimport sys\n\nfor line in sys.stdin:\n    n, m = list(map(int, line.split()))\n    s = sys.stdin.readline().strip()\n    p = list(map(int, sys.stdin.readline().strip().split()))\n\n    dp = [[0] * n for _ in range(m + 1)]\n    for i in range(m):\n        dp[i + 1] = dp[i].copy()\n        for j in range(n):\n            dp[i + 1][j] = dp[i][j]\n            if j + 1 < n and j + 1 in p[i]:\n                dp[i + 1][j + 1] += 1\n    print(' '.join(map(str, dp[-1])))\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"9 4 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == \"26 10 1 2 3 5 10 5 9 4\"\n\n\"\"\"\n",
        "num_ids_2": 64,
        "num_ids_4": 97
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abca') == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution('codeforces') == [9, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution('qwertyuioplkjhgfdsazxcvbnm') == [26, 10, 1, 2, 9, 2, 2, 5, 2, 2, 1, 1, 5, 4, 11, 8, 2, 7, 1, 10, 1, 5, 2]\n\"\"\"",
        "num_ids_2": 96,
        "num_ids_4": 164
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\\n') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\n\n-----Problem-----\n\n*\u0427\u0442\u043e\u0431\u044b \u0443\u0447\u0435\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0438\u0433\u0440\u044b, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0437\u0430\u043f\u0440\u0435\u0442 \u043d\u0430 \u043f\u043e\u0432\u043e\u0440\u043e\u0442\u044b, \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0440\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0447\u0442\u043e \u043a\u0430\u0436\u0434\u0430\u044f \u043a\u043b\u0435\u0442\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0430, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043d\u0438\u0445 \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443 \u0438\u043b\u0438 \u0441\u0442\u043e\u043b\u0431\u0435\u0446. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u0430\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u043a\u043b\u0435\u0442\u043e\u043a, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u043d\u0438\u0435. \u0412 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u044d\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u043d\u0435 \u0440\u0435\u0448\u0430\u0435\u0442\u0441\u044f.\n\n\u0412\u0430\u043c \u0434\u0430\u043d\u043e \u043d\u0430\u0431\u043e\u0440 \u043a\u043b\u0435\u0442\u043e\u043a, \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u0442\u043e\u044f\u0442 \u0447\u0438\u0441\u043b\u0430. \u041a\u043b\u0435\u0442\u043a\u0430 \u0441 \u043d\u043e\u043c\u0435\u0440\u043e\u043c $i$ \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 $x_i$ \u0447\u0438\u0441\u0435\u043b. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043b\u0435\u0442\u043a\u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0440\u043e\u0432\u043d\u043e \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 $x$, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u0430\u0436\u0434\u0430\u044f \u043a\u043b\u0435\u0442\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0430 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0438\u043c \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 $x$. \u041f\u043e\u043b\u043d\u044b\u043c \u043d\u0430\u0431\u043e\u0440\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0430 $x$ \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f $x$ \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430, \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0435 \u043e\u0442 \u043d\u0443\u043b\u044f. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043d\u0430\u0431\u043e\u0440 $x$ \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0447\u0438\u0441\u043b\u0430 1, 2, 5, \u0442\u043e \u0432\u0441\u0435 \u043a\u043b\u0435\u0442\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0438\u043c \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u043e\u0432: 1, 2, 5 \u0438\u043b\u0438 1, 2, 4.\n\n\u0412\u0430\u043c \u0442\u0430\u043a\u0436\u0435 \u0434\u0430\u043d\u044b \u0434\u0432\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u043f\u043e\u0437\u0438\u0446\u0438\u0439, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0438\u0445 \u0434\u0432\u0435 \u043a\u043b\u0435\u0442\u043a\u0438, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0434\u0432\u0435 \u043a\u043b\u0435\u0442\u043a\u0438 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u044d\u0442\u0438\u0445 \u0434\u0432\u0443\u0445 \u043a\u043b\u0435\u0442\u043e\u043a \u0432 \u043e\u0434\u043d\u043e\u043c \u0440\u044f\u0434\u0443. \u041f\u043e\u0434 \u043f\u043e\u0437\u0438\u0446\u0438\u0435\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 $i, j$ \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 $x$, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0441\u0443\u043c\u043c\u0430 \u0434\u0432\u0443\u0445 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0440\u0430\u0432\u043d\u0430 \u043d\u0443\u043b\u044e. \u0423\u043f\u0440\u043e\u0449\u0430\u0435\u0442\u0441\u044f \u0432\u0442\u043e\u0440\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0437\u0430\u0434\u0430\u0447\u0438, \u0432\u044b\u0431\u0438\u0440\u0430\u044f \u043e\u0434\u043d\u0443 \u0438\u0437 \u0434\u0432\u0443\u0445 \u043a\u043b\u0435\u0442\u043e\u043a \u043d\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0438 \u043e\u0434\u0438\u043d, \u0430 \u0432\u0442\u043e\u0440\u0443\u044e \u043d\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0438 \u0434\u0432\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0431\u043e\u0440 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u0437\u0430\u0434\u0430\u044e\u0449\u0438\u0445 \u043d\u0430\u0431\u043e\u0440\u044b \u043a\u043b\u0435\u0442\u043e\u043a. \u0414\u0430\u043b\u0435",
        "num_ids_2": 79,
        "num_ids_4": 79
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '0'\nassert solution('3 3 4') == '0'\nassert solution('10 20 30') == '36'\nassert solution('5 5 5') == '0'\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\n",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\n",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 4\\n10 20 30\") == \"0\"\nassert solution(\"5 5 5\\n2 4 3\") == \"0\"\nassert solution(\"2 4 3\\n1 1000000000 1000000000\") == \"1999999994\"\nassert solution(\"3 2 5\\n3 2 6\") == \"2\"\n",
        "num_ids_2": 34,
        "num_ids_4": 72
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(    '3 3 4\\n'\n                    '10 20 30\\n'\n                    '5 5 5\\n'\n                    '2 4 3\\n'\n                    '1 1000000000 1000000000\\n'\n                    '1 1000000000 999999999\\n'\n                    '3 2 5\\n'\n                    '3 2 6') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 4\") == \"6\"\nassert solution(\"3 3 4\") == \"6\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 999999999 999999999\") == \"1999999994\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 3\") == \"2\"\nassert solution(\"2 4 3\") == \"6\"\nassert solution(\"1 1000000000 1000000000\") == \"1999999994\"\nassert solution(\"1 999999999\") == \"1999999994\"\n\n------Solution------\n",
        "num_ids_2": 24,
        "num_ids_4": 55
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5 6') == '4'\nassert solution('3 2 5') == '9'\nassert solution('3 2 6') == '12'\n\"\"\"\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1\\n0 1 1\\n0 0 1\") == \"0\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2\\n1 3 4 5\\n2\\n1 2\\n') == 'NO'\nassert solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6') == 'YES'\n\"\"\"\n",
        "num_ids_2": 72,
        "num_ids_4": 72
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\n\"\"\"",
        "num_ids_2": 85,
        "num_ids_4": 173
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n11 14 16 12\n2\n1 8\n4\n1 1 1 1\n4\n1 2 5 6\n2\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8''') == 'YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO'\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8') == 'YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO'\n\"\"\"\n",
        "num_ids_2": 88,
        "num_ids_4": 88
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"7\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"NO\"\nassert solution(\"8\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\n",
        "num_ids_2": 82,
        "num_ids_4": 123
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\"\n\n\"\"\"",
        "num_ids_2": 91,
        "num_ids_4": 91
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\\nNO\\nYES\\nYES\"\n\"\"\"",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == \"YES\"\n",
        "num_ids_2": 85,
        "num_ids_4": 159
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\"\n\"\"\"\nfrom math import *\n",
        "num_ids_2": 91,
        "num_ids_4": 91
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\"\n",
        "num_ids_2": 182,
        "num_ids_4": 364
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\"\n) == \"22\"\nassert solution(\n\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\"\n) == \"13\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == 13\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == 22\n",
        "num_ids_2": 102,
        "num_ids_4": 102
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"\nassert solution(\"4 3 3\\n1 2 3\\n1 3 2\\n2 3 4\\n2 4 1\\n2 1 2\\n3 4 2\\n2 4 2\\n\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 102,
        "num_ids_4": 206
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"\n\n\"\"\"\nfrom collections import defaultdict",
        "num_ids_2": 102,
        "num_ids_4": 102
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n') == '22'\nassert solution('5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n') == '13'\n",
        "num_ids_2": 102,
        "num_ids_4": 102
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == \"22\"\n\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == \"13\"\n",
        "num_ids_2": 98,
        "num_ids_4": 98
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == '22'\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == '13'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n",
        "num_ids_2": 98,
        "num_ids_4": 98
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 5 2\\\\n1 2 5\\\\n2 3 7\\\\n2 4 4\\\\n4 5 2\\\\n4 6 8\\\\n1 6\\\\n5 3') == '22'\nassert solution('5 5 4\\\\n1 2 5\\\\n2 3 4\\\\n1 4 3\\\\n4 3 7\\\\n3 5 2\\\\n1 5\\\\n1 3\\\\n3 3\\\\n1 5') == '13'\n",
        "num_ids_2": 98,
        "num_ids_4": 98
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == \"22\"\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1\") == \"2\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1\\n2\\n3') == '1'\nassert solution('7\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000') == '9\\n3\\n13\\n27\\n6561\\n19683'\n\"\"\"\n\nimport sys",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1\\n2\\n2\\n2\\n3\\n3\\n3\\n3\\n2\\n3\\n4\\n2\\n4\\n5\\n4\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5",
        "num_ids_2": 1478,
        "num_ids_4": 1478
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1\\n5\\n\") == '3'\nassert solution(\"3\\n0\\n11\\n\") == '1'\nassert solution(\"1\\n0\\n11\\n\") == '0'\nassert solution(\"5\\n0\\n8\\n\") == '8'\nassert solution(\"6\\n0\\n9\\n\") == '8'\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2\") == \"2\"\nassert solution(\"7\\n1\") == \"1\"\nassert solution(\"7\\n2\") == \"3\"\nassert solution(\"7\\n6\") == \"9\"\nassert solution(\"7\\n13\") == \"13\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n') == '1\\n3\\n9\\n13\\n27\\n6561\\n19683'\n",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\"\n\n\"\"\"\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\"\n",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9\") == \"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\"\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n\"\n\"\"\"\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n') == '1 1 1 1 1 \\n3 3 3 \\n2 3 3 2 1 3 \\n1 \\n2 2 2 2 \\n4 4 4 1 4\\n'\n",
        "num_ids_2": 106,
        "num_ids_4": 106
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n4 1 2 3\\n5\\n1 2 3 4 5') == '1 1 1 1 1'\nassert solution('5\\n1 2 3 4 5\\n5\\n1 2 3 4 5') == '3 3 3'\nassert solution('10\\n3 1 4 2 5 6 7 8 9 10\\n5\\n1 2 3 4 5') == '1 2 1 2 1 1 2 2 2 1 2 1'\nassert solution('4\\n1 2 3 4\\n5\\n1 2 3 4 5') == '3 3 3'\nassert solution('5\\n1 2 3 4 5\\n5\\n1 2 3 4 5') == '2 2 2'\n",
        "num_ids_2": 59,
        "num_ids_4": 130
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3') == '1 1 1 1 1'\nassert solution('6\\n1 2 3 4 5 6\\n2\\n4 6 2 1 5 3\\n5\\n5 1 2 4 3') == '3 3 3'\nassert solution('6\\n1 2 3 4 5 6\\n2\\n4 6 2 1 5 3\\n5\\n5 1 2 4 3') == '2 3 3 2 1 3'\nassert solution('6\\n1 2 3 4 5 6\\n2\\n4 6 2 1 5 3\\n5\\n5 1 2 4 3') == '1'\nassert solution('6\\n1 2 3 4 5 6\\n2\\n4 6 2 1 5 3\\n5\\n5 1 2 4 3') == '2 2 2 2'\n",
        "num_ids_2": 81,
        "num_ids_4": 164
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2\\n1 2 3 4\\n5\\n5 1 2 3 4') == '1 1 1 1 1'\n\"\"\"\n\nfrom collections import deque\nimport sys\nfrom typing import List",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3') == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\\n'\n\n\"\"\"\n",
        "num_ids_2": 99,
        "num_ids_4": 99
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1 1 1'\nassert solution('2 3 1') == '2 3 3 1'\nassert solution('3 1 2') == '1 2 3'\nassert solution('4 2 5 6 7') == '2 2 2 2'\n",
        "num_ids_2": 22,
        "num_ids_4": 51
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n1 2 3 4 5\") == \"1 1 1 1 1\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5\\n1 2 3 4 5\") == \"1 1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"3 3 3\"\nassert solution(\"6\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n2\\n1\\n4\\n3 4 1 2\") == \"2 3 3 2 1 3\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n2\\n1\\n4\\n3 4 1 2\") == \"2 2 2 2\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n2\\n1\\n4\\n3 4 1 2\") == \"2 3 3 2 1 3\"\n\"\"\"\n\n\nimport sys\nimport itertools",
        "num_ids_2": 54,
        "num_ids_4": 152
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"1 1 1 1 1\"\nassert solution(\"1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"3 3 3\"\nassert solution(\"1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"2 3 3 2 1 3\"\nassert solution(\"1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"1\"\nassert solution(\"1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"2 2 2 2\"\n",
        "num_ids_2": 72,
        "num_ids_4": 143
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\") == '1 1 1 1 1'\n\"\"\"\n\n\nimport sys\n\nDEBUG = False\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n2 6\n1 5\n''') == '8'\n\nassert solution('''\n3 5\n0 3 1\n''') == '7'\n\nassert solution('''\n2 6\n1 5\n''') == '8'\n\nassert solution('''\n5 3\n4 -1 1 -1 -1 -1\n''') == '4'\n\nassert solution('''\n4 4\n1 -1 1 1\n''') == '0'",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 6\\n1 5\\n\") == '8'\n\nassert solution(\"3 5\\n0 3 1\\n\") == '7'\n\n\"\"\"",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 6\n1 5\n''') == '8'\nassert solution('''3 5\n0 3 1\n''') == '7'\nassert solution('''3 5\n0 0 0\n''') == '0'\nassert solution('''3 5\n0 -3 1\n''') == '5 -2 4 -1 2'\nassert solution('''2 6\n0 1 0\n''') == '0'\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\n0 3 1') == '7\\n5 -2 4 -1 2'\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 6\\n1 5\\n\") == \"8\\n-1 2 6 4 0 3\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 6\\n1 5\") == \"8\\n-1 2 6 4 0 3 \"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 6\\n1 5\\n\") == \"8\\n-1 2 6 4 0 3\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6\") == '3'\n\"\"\"\n\na, b = [int(x) for x in stdin.split(' ')]\narr = [int(x) for x in stdin.split(' ')]\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 6\n1 5\n''') == '8'\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 6\\n1 5\") == \"8\"\n\"\"\"\n\nimport sys\n\nn, m = [int(c) for c in sys.stdin.readline().split()]\nx = [int(c) for c in sys.stdin.readline().split()]\nx = sorted(x)\ny = []\ncur = 0\nd = float('inf')\n\nfor i in range(m):\n    d = min(d, abs(x[cur] - i))\n    y.append(i)\n    cur += 1\n\ny = sorted(y)\n\nprint(d)\nprint(\" \".join([str(c) for c in y]))\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"5\n1 3\n1 2\n3 3\n5 5\n4 3\"\"\") == \"YES\\nRRRRUUU\"\n\nassert solution(\"\"\"5\n1 3\n1 2\n3 3\n5 5\n4 3\"\"\") == \"NO\"\n\nassert solution(\"\"\"1\n0 1\"\"\") == \"YES\\nRRRRUUU\"\n\nassert solution(\"\"\"1\n0 1\n1\"\"\") == \"NO\"\n\nassert solution(\"\"\"1\n0 1\n0 2\n1\n1\"\"\") == \"YES\\nUUUUUU\"\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\nassert solution(\"2\\n1 0\\n0 1\") == \"YES\\nRRRRUUU\"\nassert solution(\"1\\n4 3\") == \"NO\"\nassert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"NO\"\nassert solution(\"5\\n4 3\") == \"NO\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 62,
        "num_ids_4": 106
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\nassert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\") == \"NO\"\nassert solution(\"2\\n1 0\\n0 1\") == \"YES\\nRUUU\"\nassert solution(\"1\\n1\") == \"YES\\nRR\"\nassert solution(\"5\\n4 3\") == \"YES\\nUUUU\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom collections import deque\nfrom math import inf\nfrom typing import Tuple, Dict\n",
        "num_ids_2": 64,
        "num_ids_4": 103
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 3\\n1 2\\n3 3\\n5 5') == 'YES'\nassert solution('4\\n2\\n1 0\\n0 1') == 'YES'\nassert solution('2\\n1 0\\n0 1') == 'YES'\nassert solution('1\\n0 1') == 'NO'\nassert solution('4\\n3\\n1 0\\n0 1') == 'NO'\n",
        "num_ids_2": 47,
        "num_ids_4": 79
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n1 1\") == \"YES\\nRU\"\n\"\"\"\n\nimport sys\n\nfrom collections import deque, namedtuple\n\nPoint = namedtuple('Point', 'x y')\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3') == 'YES\\nRUUURRRRUU'\nassert solution('1\\n1\\n0 1\\n0 1') == 'NO'\nassert solution('5\\n4\\n2\\n1 0\\n0 1') == 'YES\\nRRRRUUU'\nassert solution('3\\n5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3') == 'YES\\nRUUURRRRUU'\nassert solution('1\\n1\\n0 1\\n0 1') == 'NO'\n",
        "num_ids_2": 62,
        "num_ids_4": 133
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\\n2\\n1 0\\n0 1\") == \"YES\\nRUUURRRRUU\"\nassert solution(\"5\\n1 2\\n1 3\\n3 3\\n5 5\\n4 3\\n2\\n1 0\\n0 1\") == \"NO\"\nassert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\\n2\\n1 0\\n0 1\") == \"YES\\nRRRRUUU\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 90,
        "num_ids_4": 137
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRRRRUUU\"\nassert solution(\"2\\n1 0\\n0 1\") == \"NO\"\nassert solution(\"1\\n4 3\") == \"YES\\nRRRRUUU\"\n",
        "num_ids_2": 54,
        "num_ids_4": 74
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == 'YES\\nRUUURRRRUU'\n\"\"\"\n\nt = int(stdin.readline())\n\nwhile t > 0:\n    n = int(stdin.readline())\n    x = []\n    y = []\n\n    for _ in range(n):\n        x_y = list(map(int, stdin.readline().split()))\n        x.append(x_y[0])\n        y.append(x_y[1])\n\n    x.sort()\n    y.sort()\n\n    x_sum = sum(x)\n    y_sum = sum(y)\n    print(x_sum)\n    print(y_sum)\n    if x_sum < y_sum:\n        print(\"NO\")\n    else:\n        for i in range(n):\n            if x[i] == 0:\n                print(\"RUUURRRRUU\")\n                break\n            if x[i] == 1:\n                print(\"RUUURRRU\")\n                break\n            if x[i] == 2:\n                print(\"UUUUURRRR\")\n                break\n            if x[i] == 3:\n                print(\"RRRRUUUUU\")\n                break\n    t -= 1\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == 'YES\\nRUUURRRRUU'\n\n-----\nn = int(stdin.readline())\npackages = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\npackages.sort()\n\nr, u = 0, 0\nfor x, y in packages:\n    if r == 0 and x!= 0:\n        u += 1\n    if x + u > r + u:\n        r += 1\n        u = 0\nprint('YES' if r else 'NO')\nprint('R' * r + 'U' * u)\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\") == \"8\\n0\\n500\\n2128012501878\\n899999999999999999\"\nprint(\"The local tests are done.\")\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\") == \"8\"\nassert solution(\"4\") == \"0\"\nassert solution(\"11 1\") == \"12\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"5 9\") == \"2\"\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\\n\") == \"8\"\n\"\"\"\n\n\"\"\"\n\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0430\u0448\u0443 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e.\n\"\"\"\n\nimport sys\n\nT = int(sys.stdin.readline())\n\nfor _ in range(T):\n    n, s = (int(x) for x in sys.stdin.readline().split())\n\n    s_str = str(s)\n    n_str = str(n)\n\n    m = len(n_str)\n    s_str = \"0\" * (m - len(s_str)) + s_str\n\n    min_steps = 0\n    for i in range(m - 1):\n        min_steps += abs(int(n_str[i]) - int(s_str[i]))\n    if min_steps > 0:\n        print(min_steps - 1)\n    else:\n        print(0)\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\") == \"8\\n0\\n500\\n2128012501878\\n899999999999999999\"",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 1\n1 1\n500 4\n217871987498122 10''') == '8'\nassert solution('''5 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1''') == '899999999999999999'\nassert solution('''5 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1''') == '899999999999999999'\n\n----\n\n'''\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\\n\") == \"8\"\n\"\"\"\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1\\n1 1') == '8'\nassert solution('500 4\\n217871987498122 10') == '899999999999999999'\n\n------Ending Indentation Error-----",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\\n') == '8\\n0\\n500\\n2128012501878\\n899999999999999999'\n\"\"\"\n\nfrom typing import List\nimport math",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\") == '8\\n0\\n500\\n2128012501878\\n899999999999999999'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\n\"\"\") == \"8\"\n\"\"\"\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1\\n0\\n0\\n0') == '1'\nassert solution('3\\n0\\n0\\n1') == '2'\nassert solution('5\\n0\\n0\\n1\\n1') == '0'\nassert solution('7\\n1\\n0\\n1\\n0\\n1\\n1') == '2'\nassert solution('5\\n1\\n1\\n1\\n1') == '0'\n",
        "num_ids_2": 41,
        "num_ids_4": 91
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 0 1\\n5\\n1 0 0 1\") == \"2\"\n\"\"\"\nimport sys",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"0\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\"\n\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"0\"\n",
        "num_ids_2": 54,
        "num_ids_4": 108
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 0 0\\n3\\n1 0 0') == '2'\nassert solution('2\\n2\\n0 1') == '0'\nassert solution('1\\n2\\n0') == '1'",
        "num_ids_2": 40,
        "num_ids_4": 56
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\") == \"0\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\") == \"4\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\") == \"1\"",
        "num_ids_2": 96,
        "num_ids_4": 192
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '5\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\\n') == '2\\n0\\n2\\n4\\n1'\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\") == \"2\\n0\\n2\\n4\\n1\"\n",
        "num_ids_2": 120,
        "num_ids_4": 240
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"5\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"5\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"2\\n0\\n2\\n4\\n1\"\n\nimport sys; sys.setrecursionlimit(10000)",
        "num_ids_2": 146,
        "num_ids_4": 219
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 0 0 1\\n4\\n1 1 0 0 1\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"0\"\nassert solution(\"7\\n1 1 0 0 1\\n5\\n1 0 0 0 1\") == \"2\"\nassert solution(\"7\\n0 1 1 0 1\\n5\\n1 0 0 0 1\") == \"1\"\nassert solution(\"7\\n1 1 0 0 1\\n6\\n1 0 0 0 1\") == \"1\"\n\"\"\"\n\nimport sys\n\nT = int(sys.stdin.readline())\nfor _ in range(T):\n    N = int(sys.stdin.readline())\n    A = [int(x) for x in sys.stdin.readline().strip().split()]\n    dp = [[0, 0] for _ in range(N)]\n    dp[0][A[0]] = 1\n    for i in range(1, N):\n        for j in range(1, 2):\n            dp[i][j] = dp[i - 1][j]\n            if j - 1 >= 0:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])\n            if j + 1 <= 1:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j + 1])\n    for i in range(1, N):\n        for j in range(1, 2):\n            if A[i] == j:\n                dp[i][j] = min(dp[i][j], 1 + dp[i - 1][j])\n            else:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j])\n    print(dp[-1][1])",
        "num_ids_2": 54,
        "num_ids_4": 108
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n0 0 1 0 1 0 1\") == \"2\"\nassert solution(\"3\\n1 0 0\") == \"0\"\nassert solution(\"5\\n1 1 0 0 1\") == \"2\"\n\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n3 2\\n4 2\\n2 3\\n3 1') == 'bcacac'\nassert solution('5 3\\n3 2\\n4 2\\n2 3\\n3 1') == 'abcd'\nassert solution('5 3\\n3 2\\n4 2\\n2 3\\n3 1') == 'baabab'\nassert solution('7 5\\n4 4\\n6 2\\n2 3\\n3 1') == 'cbcacac'\nassert solution('7 5\\n4 4\\n6 2\\n2 3\\n3 1') == 'abcd'\n",
        "num_ids_2": 57,
        "num_ids_4": 116
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_stdin_1) == test_stdout_1\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n7 3\n4 4\n6 2''') == 'cbcacab'\nassert solution('''3\n7 3\n4 4\n6 2''') == 'abcd'\nassert solution('''3\n7 3\n4 4\n6 2''') == 'baabab'\nassert solution('''3\n7 3\n4 4\n6 2''') == 'cbcabba'\nassert solution('''3\n7 3\n4 4\n6 2''') == 'ccbbaaa'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7\") == \"cbcaab\"\nassert solution(\"2 2\") == \"ab\"\nassert solution(\"7 3\") == \"cbcacab\"\nassert solution(\"6 2\") == \"baabab\"\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import product",
        "num_ids_2": 24,
        "num_ids_4": 51
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\"\nassert solution(\"7 4\\n4 4\\n6 2\") == \"abcd\"\nassert solution(\"7 5\\n4 4\\n6 2\") == \"baabab\"\nassert solution(\"7 6\\n4 4\\n6 2\") == \"cbcabcd\"\nassert solution(\"7 7\\n4 4\\n6 2\") == \"cbcabba\"\n",
        "num_ids_2": 42,
        "num_ids_4": 85
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3') == 'cbcacab'\nassert solution('6 2') == 'abcd'\nassert solution('7 3') == 'cbcab'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n3\n7 3\n4 4\n6 2\n''') == 'cbcacab'\n\nassert solution('''\n4\n7 3\n4 4\n6 2\n3 1\n''') == 'abcd'\n\nassert solution('''\n4\n7 3\n4 4\n6 2\n3 1\n''') == 'baabab'\n\nassert solution('''\n1\n7 3\n4 4\n6 2\n3 1\n''') == 'cbcacab'\n\nassert solution('''\n5\n7 3\n4 4\n6 2\n3 1\n''') == 'abcd'",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('2 2\\n1 1\\n') == 'a'\nassert solution('3 2\\n1 2\\n') == 'ab'\nassert solution('4 2\\n2 2\\n') == 'aba'\nassert solution('5 3\\n2 1\\n1 1\\n') == 'abacab'\n",
        "num_ids_2": 25,
        "num_ids_4": 59
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n7 3\\n4 4\\n6 2') == 'cbcacab'\nassert solution('3\\n7 3\\n4 4\\n6 2') == 'cbcacab'\n\"\"\"\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n    4 2\n    3 3\n    1 2\n    \"\"\") == \"\"\"\n    cbcacab\n    abcd\n    \"\"\"\n\nassert solution(\n    \"\"\"\n    5 1\n    1 1\n    1 2\n    2 1\n    3 1\n    \"\"\") == \"\"\"\n    cba\n    abcd\n    baabab\n    cbcab\n    \"\"\"\n\nassert solution(\n    \"\"\"\n    5 2\n    1 2\n    1 3\n    2 2\n    3 1\n    \"\"\") == \"\"\"\n    a\n    bc\n    b\n    c\n    \"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1 1\\n13\") == \"2 1 2\"\nassert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\") == \"6 23 21\"\nassert solution(\"7\\n1 1 1 1 1 1\\n13\") == \"1 1000 0\"\nassert solution(\"7\\n1 1 1 1 1 1\\n13\") == \"2 1 2\"\nassert solution(\"7\\n1 1 1 1 1 1\\n13\") == \"3 4 2\"\n",
        "num_ids_2": 48,
        "num_ids_4": 94
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n7\\n1 1 1 1 1 1\\n6\\n1 1 1 1 1 1\") == '2 1 2\\n4 4 3\\n'\n\"\"\"\nfrom collections import deque\n\nfrom util.helpers import read_test_case, test_cases, is_intersection_valid\nfrom util.matrix import Matrix\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(s) == result\nprint(solution(stdin))\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 3 2 1 1\\n3\\n1 3 2 1\") == \"6 15 0\"\nassert solution(\"7\\n1 3 2 1 4 1 5 9 2 6 5 3 5\\n3\\n1 1 1\") == \"7 15 0\"\nassert solution(\"7\\n1 3 2 1 4 1 5 9 2 6 5 3 5\\n6\\n1 1 1 1 1 1\") == \"6 30 0\"\nassert solution(\"7\\n1 3 2 1 4 1 5 9 2 6 5 3 5\\n1\\n1 1 1\") == \"1 1000 0\"\nassert solution(\"7\\n1 3 2 1 4 1 5 9 2 6 5 3 5\\n2\\n1 3 2 1\") == \"6 16 0\"\n",
        "num_ids_2": 63,
        "num_ids_4": 136
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11\\n3 1 4 1 5 9 2 6 5 3 5') == '6 23 21'\n\"\"\"\nimport sys",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\") == \"6 23 21\"\nassert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\") == \"1 1000 0\"\nassert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\") == \"2 1 2\"\nassert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\") == \"6 45 46\"\nassert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\") == \"2 2 1\"\n",
        "num_ids_2": 78,
        "num_ids_4": 156
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\") == '6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3'\n\"\"\"\n\nimport sys",
        "num_ids_2": 111,
        "num_ids_4": 111
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11\\n1 3 4 1 5 9 2 6 5 3 5') == \"6 23 21\"\n\"\"\"\n\nfrom collections import defaultdict, Counter",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\") == \"6 23 21\"\nassert solution(\"13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\") == \"6 45 46\"\nassert solution(\"7\\n1 1 1 1 1 1 1\\n1\\n1\") == \"1 1000 0\"\n",
        "num_ids_2": 65,
        "num_ids_4": 92
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\\n1\\n4\\n1\\n5\\n9\\n2\\n6\\n5\\n3\\n5\") == \"6 23 21\"\n\"\"\"\n\n\"\"\"\nThis problem was recently asked by Google.\n\nGiven a list of numbers and a number k, return whether any two numbers from the list add up to k.\n\nFor example, given [10, 15, 3, 7] and k of 17, return true since 10 + 7 is 17.\n\nBonus: Can you do this in one pass?\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\n1 2\\n3 4') == '6'\nassert solution('2 2\\n1 2\\n3 4') == '27'\nassert solution('2 3\\n1 2\\n3 4') == '39'\nassert solution('2 3\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5') == '11'\nassert solution('2 3\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3') == '17'\n",
        "num_ids_2": 38,
        "num_ids_4": 87
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5') == '6'\nassert solution('4 0\\n2 2 4 3') == '27'\nassert solution('4 0\\n2 2 4 3') == '17'\nassert solution('4 0\\n4 4 5 4') == '11'\nassert solution('4 0\\n1 2 2 1') == '17'\n",
        "num_ids_2": 47,
        "num_ids_4": 81
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n1 2\\n3 4\") == \"6\"\nassert solution(\"2 1\\n1 2\\n3 4\\n5 5\") == \"27\"\nassert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"3 1\\n1 2\\n3 4\\n5 5\") == \"11\"\nassert solution(\"3 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"17\"\n",
        "num_ids_2": 42,
        "num_ids_4": 95
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n1 2\") == \"6\"\nassert solution(\"3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"5 3\\n1 2 3 4 5\\n2 4 2 3\") == \"11\"\nassert solution(\"5 3\\n1 2 3 4 5\\n4 4\\n2 2 4 3\") == \"17\"\nassert solution(\"5 3\\n1 2 3 4 5\\n4 4\\n2 2 4 3\") == \"17\"\n",
        "num_ids_2": 37,
        "num_ids_4": 89
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n1 2\\n2 2\\n4 4\\n1 2 5 4') == '6'\nassert solution('5 5\\n1 2\\n2 2\\n4 4\\n1 2 5 4') == '27'\nassert solution('5 5\\n1 2\\n2 2\\n4 4\\n1 2 5 4') == '39'\nassert solution('10 9 10 10 9') == '17'\n\nassert solution('5 3\\n1 2\\n2 2\\n4 4\\n1 2 5 4') == '6'\n",
        "num_ids_2": 58,
        "num_ids_4": 101
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_cases[0]) == test_cases[1], f'Expected: {test_cases[1]}\\nActual: {solution(test_cases[0])}'\n\"\"\"",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 0') == '17'\nassert solution('2 2 4 3') == '27'\nassert solution('1 2 5 4') == '6'\n\n------",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\\n4 4\") == \"6\\n27\\n39\\n11\\n17\"\n\"\"\"\n\n\n\"\"\"\n\u0415\u0449\u0451 \u043e\u0434\u0438\u043d \u0432\u0438\u0434 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0443\u0440\u043e\u043a\u0430 \u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u043a\u0435. \u0421\u0443\u0442\u044c \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u0441\u0435\u0447\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f \u0438 \u043d\u0430\u0439\u0442\u0438 \u0434\u043e\u0432\u043e\u0434\u044b \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0440\u0435\u0448\u0430\u0442\u0435\u043b\u044f.\n\n\u0412\u0430\u043c \u0434\u0430\u043d\u044b \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u044b, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043d\u0430 \u0432\u0435\u043a\u0442\u043e\u0440\u044b \u0441 \u0440\u0430\u0437\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u043e\u0439. \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0440\u0435\u0448\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043c\u0435\u0442\u043e\u0434\u043e\u043c:\n\n1. \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0434\u043b\u0438\u043d\u043e\u0439 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0439 \u0441\u0443\u043c\u043c\u044b \u0438\u0437 \u0432\u0441\u0435\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432;\n2. \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u0438\u043d\u044b \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0443\u043c\u043c\u044b \u0438\u0437 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u0434\u043b\u0438\u043d\u043e\u0439 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0443\u043c\u043c\u044b;\n3. \u041e\u0442\u0441\u0435\u0447\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u0434\u043b\u0438\u043d\u043e\u0439 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0443\u043c\u043c\u044b.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0412\u0441\u0435 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u044b \u0438\u043c\u0435\u044e\u0442 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u0443\u044e \u0434\u043b\u0438\u043d\u0443, \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b, \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f - \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n \u2014 \u0447\u0438\u0441\u043b\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 n \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e m \u2014 \u0434\u043b\u0438\u043d\u0430 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430 \u0438 \u0441\u0443\u043c\u043c\u0430 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u0435 (\u0441\u0442\u0440\u043e\u043a\u0430 i \u0438 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 j)\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u0438\u043d\u044b m \u0438 \u0435\u0433\u043e \u0441\u0443\u043c\u043c\u0443. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e \u043d\u0430\u0431\u043e\u0440 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432, \u0441\u0443\u043c\u043c\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u0443\u0434\u0435\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u043b\u0438\u043d \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f, \u0438 \u0432\u0435\u043a\u0442\u043e\u0440 \u0438\u0437 \u0441\u0443\u043c\u043c \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f. \u0415\u0441\u043b\u0438 \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u0441\u0443\u043c\u043c",
        "num_ids_2": 87,
        "num_ids_4": 87
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2') == '6'\nassert solution('4 0') == '17'\n\"\"\"\n\n\"\"\"\nPROBLEM DESCRIPTION:\n\nGiven two arrays a and b, each consisting of n positive integers, and an integer k. The task is to find the maximum possible sum of elements of array a, if you are allowed only k swaps.\n\nInput Format:\n\nFirst line of input contains T - number of test cases. T lines follow. First line of each test case contains 3 space separated integers n, k and m. Second line contains n space separated integers a1, a2,..., an. Third line contains n space separated integers b1, b2,..., bn.\n\nOutput Format:\n\nFor each test case, print the required answer in a new line.\n\nSample Input:\n\n1\n4 2\n1 2\n3 4\n5 5\n4 4\n\nSample Output:\n\n6\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1\\n2 1\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"6\\n27\\n39\\n11\\n17\"\nassert solution(\"6 1\\n4 1\\n1 2\\n1 3\\n4 4\\n2 4 2 3\\n2 2 4 3\") == \"16\\n14\\n7\"\n\"\"\"",
        "num_ids_2": 128,
        "num_ids_4": 128
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\\n\") == '0 7 13 18 24 35 36 37 40 45'\n\n\"\"\"",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(input().strip())\nprint(solution(str(input())))\n\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n1 2 2 3 3\\n4 4 1 2 1') == '0 1 2 2 2 2 3 3 3 4'\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 3 1 3 3 1 4 1\") == \"0 2 4 7 8 11 13 14 16 17\"\nassert solution(\"5 2 3 1 3 3 1 4 1\") == \"0 2 4 7 8 11 13 14 16 17\"\n\"\"\"",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"\n\"\"\"\n\nimport sys\n\nn, c = map(int, sys.stdin.readline().split())\nstairs = [int(x) for x in sys.stdin.readline().split()]\nelevator = [int(x) for x in sys.stdin.readline().split()]",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stub) == stub_output\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5') == '0 7 13 18 24 35 36 37 40 45'",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5') == '0 7 13 18 24 35 36 37 40 45'\n\n\"\"\"\n\nfrom collections import defaultdict\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1') == 'aaabb'\nassert solution('5 2') == 'aabab'\nassert solution('5 8') == 'baaba'\nassert solution('5 10') == 'bbaaa'\nassert solution('3 1') == 'aaabb'\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n5 1\\n5 2\\n5 8\\n5 10\\n3 1\\n3 2\\n20 100\") == 'aaabb'\nassert solution(\"7\\n5 1\\n5 2\\n5 8\\n5 10\\n3 1\\n3 2\\n20 100\") == 'aabab'\n\"\"\"\n\nimport sys\n\nsys.stdin = open('./input.txt')\n",
        "num_ids_2": 79,
        "num_ids_4": 79
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1\") == \"aaabb\"\nassert solution(\"5 2\") == \"aabab\"\nassert solution(\"5 8\") == \"ababa\"\nassert solution(\"5 10\") == \"abaaa\"\nassert solution(\"3 1\") == \"baaaa\"\n",
        "num_ids_2": 25,
        "num_ids_4": 49
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1\") == \"aaabb\"\nassert solution(\"5 2\") == \"aabab\"\nassert solution(\"5 8\") == \"baaba\"\nassert solution(\"5 10\") == \"bbaaa\"\nassert solution(\"3 1\") == \"abb\"\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1\") == \"aaabb\"\nassert solution(\"5 2\") == \"aabab\"\nassert solution(\"5 8\") == \"baaba\"\nassert solution(\"5 10\") == \"bbaaa\"\nassert solution(\"3 1\") == \"aab\"\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1\") == \"aaabb\"\nassert solution(\"5 2\") == \"aabab\"\nassert solution(\"5 8\") == \"baaba\"\nassert solution(\"5 10\") == \"bbaaa\"\nassert solution(\"3 1\") == \"aaa\"\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == 'aa'\nassert solution('2\\n2') == 'ab'\nassert solution('3\\n2') == 'ba'\nassert solution('5\\n2') == 'bb'\n",
        "num_ids_2": 21,
        "num_ids_4": 47
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1\") == \"aaabb\"\nassert solution(\"5 2\") == \"aabab\"\nassert solution(\"5 8\") == \"baaba\"\nassert solution(\"5 10\") == \"bbaaa\"\nassert solution(\"3 1\") == \"ab\"\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1\") == 'aaabb'\nassert solution(\"5 2\") == 'aabab'\nassert solution(\"5 8\") == 'baaba'\nassert solution(\"5 10\") == 'bbaaa'\nassert solution(\"3 1\") == 'aaa'\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1\\n5 2') == 'aaabb'\nassert solution('5 1\\n5 10') == 'aaaaabaaaaabaaaaaaaa'\nassert solution('5 8\\n5 10') == 'aaaaabaaaaaabaaaaaaaa'\nassert solution('5 3\\n5 2') == 'baaba'\n\"\"\"\n\nimport itertools\n",
        "num_ids_2": 36,
        "num_ids_4": 73
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '3'\nassert solution('1 2 3 4') == '3'\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\\n\") == \"6\\n1\\n5\\n10\"\n-----\n\n- Try to think about the problem as a graph problem.\n- You need to explore all paths from left bottom to the right top. The length of each path is the maximum vertical distance of the point to the current position of the platform. The problem is equivalent to finding the longest path in a graph.\n- You can choose any position in the middle of the platform, which will be represented by a point.\n- The graph has 3 nodes: left bottom position of the first platform, the right top position of the first platform, the left bottom position of the second platform, the right top position of the second platform and the left bottom position of the third platform.\n- The edges are weighted by the vertical distance from the current position to the next position.\n- The graph is complete (we can go from any position to any other position in the graph).\n- Finally, the problem is to find the longest path in the graph.\n- The longest path is the path with the maximum length.\n\n- The cost of the solution is the maximum vertical distance of the point to the current position of the platform.\n\n- The complexity is O(E + V), where E is the number of edges, V is the number of vertices.\n- The solution is not O(E + V) but O(E log V) because the heap has O(log V) complexity.\n\n- In the code below, the graph is represented as a dictionary, which is not the most efficient way to store the graph.\n\n\"\"\"\n\n\nimport heapq\nimport sys\n",
        "num_ids_2": 100,
        "num_ids_4": 100
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == '6\\n1\\n5\\n10'\n",
        "num_ids_2": 99,
        "num_ids_4": 99
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"6\\n1\\n5\\n10\"\n\"\"\"\n\nimport sys\nimport bisect\n",
        "num_ids_2": 98,
        "num_ids_4": 98
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\") == '6\\n1\\n5\\n10'\n",
        "num_ids_2": 86,
        "num_ids_4": 86
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 10\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904') == '6\\n1\\n5\\n10'\nassert solution('4 10\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904') == '6\\n1\\n5\\n10'\n",
        "num_ids_2": 140,
        "num_ids_4": 140
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == '6'\n",
        "num_ids_2": 89,
        "num_ids_4": 89
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"6\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 89,
        "num_ids_4": 89
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\") == \"6\"\nassert solution(\"7 1\\n1 5 2 3 1 5 4\") == \"1\"\nassert solution(\"7 10\\n10 7 5 15 8\") == \"5\"\nassert solution(\"7 10\\n15 19 8 17 20 10 9 2 10 19\") == \"10\"\nassert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"6\"\n\"\"\"\nfrom collections import Counter, defaultdict\nfrom typing import Iterable\n\nfrom icontract import require, ensure, DBC\n\n\nclass DB:\n    \"\"\"Inspired by\n    https://www.geeksforgeeks.org/check-if-two-given-line-segments-intersect/\n\n    \"\"\"\n\n    @require(lambda x: x >= 0)\n    @require(lambda y: y >= 0)\n    def __init__(self, x: int, y: int) -> None:\n        self.x = x\n        self.y = y\n\n    def __eq__(self, other: \"DB\") -> bool:\n        return self.x == other.x and self.y == other.y\n\n    def __hash__(self) -> int:\n        return hash((self.x, self.y))\n\n\nclass LineSegment:\n    def __init__(self, start: DB, end: DB) -> None:\n        self.start = start\n        self.end = end\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, LineSegment):\n            raise NotImplementedError()\n\n        return self.start == other.start and self.end == other.end\n\n\nclass Point:\n    def __init__(self, db: DB) -> None:\n        self.db = db\n        self.incoming_segments: set[LineSegment] = set()\n\n    def __hash__(self) -> int:\n        return self.db.__hash__()\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Point):\n            raise NotImplementedError()\n\n        return self.db == other.db\n\n\nclass Solution:\n    def max_points_on_segment(self, points: Iterable[DB]) -> int:\n        # fmt: off\n        @ensure(lambda line_segments, result: len(line_segments) == result, \"len(line_segments) == result\")\n        @ensure(\n            lambda result:\n            all(\n                (segment.start.db, segment.end.db) in points\n                for segment in line_segments\n            )\n        )\n        @ensure(\n            lambda result:\n            all(\n                not (segment.start.db == segment.end.db and point in segment)\n                for segment in line_segments\n                for point in points\n            )\n        )\n        @ensure(\n            lambda result:\n            all(\n                line_segment.start.db!= line_segment.end.db\n                or point not in line_segment\n                for line_segment in line_segments\n                for point in points\n            )\n        )\n        @ensure(\n            lambda result:\n            all(\n                point not in line_segment\n                for line_segment in line_segments\n                for point in points\n            )\n        )\n        @ensure(\n            lambda result:\n            all(\n                line_segment.start.db!= line_segment.end.db\n                for line_segment in line_segments\n            )\n        )\n        def has_unique_db(line_segments: tuple[LineSegment,...]) -> bool:\n            dbs: dict[DB, int] = Counter(\n                segment.start.db for segment in line_segments\n            )\n            return all(count == 1 for (_, count) in dbs.items())\n\n        # fmt: on\n        line_segments: tuple[LineSegment,...] = tuple(\n            LineSegment(start=DB(x, y), end=DB(x + 1, y)) for (x, y) in points\n        )\n        points = set(\n            Point(db) for db in points\n        )\n        return max(\n            1\n            + max(len(segment.incoming_segments) for segment in line_segments)\n            + sum(\n                segment.end.db in points\n                for segment in line_segments\n                if segment.end.db!= segment.start.db\n            ),\n            *(\n                (\n                    max(\n                        (\n                            1\n                            + max(len(segment.incoming_segments) for segment in line_segments)\n                            + sum(\n                                db in points\n                                for db in (\n                                    segment.start.db,\n                                ",
        "num_ids_2": 40,
        "num_ids_4": 81
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19') == '6\\n1\\n5\\n10'\n\"\"\"\n\nfrom sys import stdin\n\nn, k = [int(x) for x in stdin.readline().split()]\npoints = [int(x) for x in stdin.readline().split()]\nplatforms = [int(x) for x in stdin.readline().split()]\n\nplatforms.sort()\n\nl, r = 0, 0\nsaved_points = 0\nmax_points = 0\nfor p in platforms:\n    while r < n:\n        if points[r] <= p:\n            saved_points += 1\n            r += 1\n        else:\n            break\n    max_points = max(max_points, saved_points)\n    saved_points = 0\n\nprint(max_points)\n",
        "num_ids_2": 89,
        "num_ids_4": 89
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\\n\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\\n\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\\n\") == \"0\\n0\\n0\\n0\\n\"\nassert solution(\"4 4\\n1\\n2\\n1\\n2\\n\") == \"0\\n0\\n0\\n0\\n\"\nassert solution(\"4 5\\n1\\n2\\n1\\n2\\n\") == \"0\\n0\\n0\\n0\\n\"\nassert solution(\"4 7\\n1\\n2\\n1\\n2\\n\") == \"0\\n0\\n0\\n0\\n\"\n",
        "num_ids_2": 90,
        "num_ids_4": 162
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\"\n\"\"\"\n\nimport math\nimport sys\nimport itertools\n",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''7 3\n0\n1\n2\n2\n0\n0\n10''') == '1'\nassert solution('''4 3\n1\n2\n1\n2''') == '0'\nassert solution('''4 3\n1\n2\n1\n2''') == '0'\nassert solution('''4 3\n1\n2\n1\n2''') == '0'\nassert solution('''4 3\n1\n2\n1\n2''') == '0'\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"1\\n2\\n2\\n3\\n0\\n0\\n2\\n3\\n4\\n4\\n4\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5",
        "num_ids_2": 811,
        "num_ids_4": 811
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0\\n1\\n2\\n2\\n0\\n0\\n10\\n\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\\n\"\nassert solution(\"1\\n2\\n1\\n2\\n\") == \"0\\n0\\n0\\n0\\n\"\nassert solution(\"1\\n1\\n1\\n1\\n\") == \"0\\n0\\n0\\n0\\n\"\nassert solution(\"1\\n1\\n1\\n1\\n\") == \"0\\n0\\n0\\n0\\n\"\n",
        "num_ids_2": 82,
        "num_ids_4": 146
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0\\n1\\n2\\n2\\n0\\n0\\n10') == '1\\n2\\n3\\n3\\n4\\n4\\n7'\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1\\n2\\n1\\n2\\n') == '0\\n0\\n0\\n0'\nassert solution('4 3\\n0\\n1\\n2\\n1\\n2\\n') == '0\\n0\\n0\\n0'\nassert solution('4 3\\n1\\n2\\n1\\n2\\n') == '0\\n0\\n0\\n0'\nassert solution('4 3\\n1\\n2\\n1\\n2\\n') == '0\\n0\\n0\\n0'\nassert solution('4 3\\n0\\n0\\n1\\n2\\n1\\n2\\n') == '0\\n0\\n0\\n0'\n",
        "num_ids_2": 71,
        "num_ids_4": 139
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 1') == ''\nassert solution('1\\n0') == ''\nassert solution('1\\n2') == ''\nassert solution('1\\n2\\n1') == ''\n",
        "num_ids_2": 17,
        "num_ids_4": 39
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\"\n",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3'\nprint(\"PASSED\")\n\n-----Explanation-----\nExample case 1: The array contains elements $1$, $49$, $20$, $40$, $30$ and $50$. By sorting the array in increasing order, we have $1 < 49 < 20 < 40 < 30 < 50$. The maximum element is $50$.\n\nExample case 2: The array contains elements $1$, $50$, $20$, $40$, $30$ and $50$. By sorting the array in increasing order, we have $1 < 20 < 40 < 50 < 30 < 50$. The maximum element is $50$.\n\nExample case 3: The array contains elements $1$, $8$, $3$, $13$, $22$. By sorting the array in increasing order, we have $1 < 3 < 8 < 13 < 22 < 50$. The maximum element is $50$.\n\nExample case 4: The array contains elements $1$, $9$, $13$, $4$, $19$, $22`, $16$, $7$. By sorting the array in increasing order, we have $1 < 4 < 9 < 13 < 19 < 22 < 16 < 7 < 50$. The maximum element is $50$.\n\nExample case 5: The array contains elements $1$, $10$, $13$, $4$, $19$, $22`, $16$, $7$. By sorting the array in increasing order, we have $1 < 4 < 9 < 13 < 19 < 22 < 16 < 7 < 50$. The maximum element is $50$.\n\n\n-----Test Data Class-----\nYou can write the data class or a solution by using classes with field values such as \"n\", \"x\", \"y\" for example.\n\n\"\"\"\n\nimport collections\nimport math\nimport random\nimport sys\n\ntest_cases = [\n    {\n        'input': [[2, 1, 49], [5, 20, 50], [6, 20, 50], [5, 3, 8], [9, 13, 22]],\n        'output': '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3'\n    },\n    {\n        'input': [[5, 1, 49], [5, 20, 50], [6, 20, 50], [5, 3, 8], [9, 13, 22]],\n        'output': '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3'\n    },\n    {\n        'input': [[5, 3, 8], [9, 13, 22]],\n        'output': '1 8\\n9 13 22'\n    },\n    {\n        'input': [[9, 13, 22]],\n        'output': '1 13 22'\n    },\n    {\n        'input': [[5, 3, 8], [9, 13, 22]],\n        'output': '1 13 22'\n    },\n    {\n        'input': [[5, 3, 8], [9, 13, 22]],\n        'output': '1 13 22'\n    },\n    {\n        'input': [[5, 3, 8], [9, 13, 22]],\n        'output': '1 13 22'\n    },\n    {\n        'input': [[5, 3, 8], [9, 13, 22]],\n        'output': '1 13 22'\n    },\n    {\n        'input': [[5, 3, 8], [9, 13, 22]],\n        'output': '1 13 22'\n    },\n    {\n        'input': [[5, 3, 8], [9, 13, 22]],\n        'output': '1 13 22'\n    },\n    {\n        'input': [[5, 3, 8], [9, 13, 22]],\n        'output': '1 13 22'\n    },\n    {\n        'input': [[5, 3, 8], [9, 13, 22]],\n        'output': '1 13 22'\n    },\n    {\n        'input': [[5, 3, 8], [9, 13, 22]],\n        'output': '1 13 22'\n    },\n    {\n        'input': [[5, 3, 8], [9, 13, 22]],\n        'output': '1 13 22'\n    },\n    {\n        'input': [[5, 3, 8], [9, 13, 22]],\n        'output': '1 13 22'\n    },\n    {\n        'input': [[5, 3, 8], [9, 13, 22]],\n        'output': '1 13 22'\n    },\n    {\n        'input': [[5, 3, 8], [9, 13, 22]],\n        'output': '1 13 22'\n    },\n    {\n        'input': [[5, 3, 8], [9, 13, 22]],\n        'output': '1 13 22'\n    },\n    {\n        'input': [[5, 3, 8], [9, 13, 22]],\n        'output': '1 13 22'\n    },\n    {\n        'input': [[5, 3, 8], [9, 13, 22]],\n        'output': '1 13 22'\n    },\n    {\n        'input': [[5, 3, 8], [9, 13, 22]],\n        'output': '1 13 22'\n    },\n    {\n        'input': [[5, 3, 8], [9, 13, 22]],\n        'output': '1 13 22'\n    },\n    {\n        'input': [[5, 3, 8], [9, 13, 22]],\n        'output': '1 13 22'\n    },\n    {\n        'input': [[5, 3, 8], [9, 13, 22]],\n        'output': '1 13 22'\n    },\n    {\n        'input': [[5, 3, 8], [9, 13, 22]],\n        'output': '1 13 22'\n    },\n    {\n        'input': [[5, 3, 8], [9, 13, 22]],\n        'output': '1 13 22'\n    },\n    {\n        'input': [[5, 3, 8], [9, 13, 22]],\n        'output': '1 13 22'\n    },",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3'\n\n\"\"\"\n\nfrom collections import namedtuple\n\nTestCase = namedtuple('TestCase', 'n x y')\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\"\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n2 1 49\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n''') == '''\n1 49\n20 40 30 50 10\n26 32 20 38 44 50 \n8 23 18 13 3 \n1 10 13 4 19 22 25 16 7\n'''\n\n\n-----Explanation-----\nExample case 1: The only possible array that satisfies the conditions is $1 \\le a_i \\le 49 \\le a_i \\le 10^9$ and $x < y$.\n\nExample case 2: There is no possible array that satisfies the conditions.\n\nExample case 3: There are three possible arrays. The one with the minimum maximum element is $13, 32, 23$, because it has the minimum possible maximum element.\n\nExample case 4: The only possible array that satisfies the conditions is $1 \\le a_i \\le 13 \\le a_i \\le 19 \\le a_i \\le 18 \\le a_i \\le 13 \\le a_i \\le 4 \\le a_i \\le 3 \\le a_i \\le 16 \\le a_i \\le 7 \\le a_i \\le 9 \\le a_i \\le 14 \\le a_i \\le 22 \\le a_i \\le 25 \\le a_i \\le 16 \\le a_i \\le 7 \\le a_i \\le 9 \\le a_i \\le 14 \\le a_i \\le 19 \\le a_i \\le 22 \\le a_i \\le 25$.\n\nExample case 5: There is no possible array that satisfies the conditions.\n'''\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\"\n\"\"\"\n\n\nfrom itertools import accumulate\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 9\\n1 1 1 1\\n') == '4 9 1 1 1'\nassert solution('6 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\\n') == '6 20 50 20 40 30 50 10 26 32 20 38 44 50 8 23 18 13 3 1 10 13 4 19 22 25 16 7'\n",
        "num_ids_2": 85,
        "num_ids_4": 85
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 20 50\\n6 20 50\") == \"20 40 30 50 10\"\nassert solution(\"9 13 22\\n\") == \"13 20 16 7\"\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50'\n\"\"\"\n\n\nimport sys\nimport numpy as np",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input) == output\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 49\") == \"1 49\"\nassert solution(\"5 2 1\") == \"1 2\"\nassert solution(\"3 3 4\") == \"4 3 3\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 40
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '1 2 3'\nassert solution('1 3 2') == '2 1 3'",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\n\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 3\") == \"3 4 2\"\nprint(\"Test 1 OK!\")\nassert solution(\"1 2 3\") == \"3 2 1\"\nprint(\"Test 2 OK!\")\n\nassert solution(\"1\") == \"1\"\nprint(\"Test 3 OK!\")\nassert solution(\"1 1\") == \"1 1\"\nprint(\"Test 4 OK!\")\n\nassert solution(\"1 1 1\") == \"1 1 1\"\nprint(\"Test 5 OK!\")\n",
        "num_ids_2": 28,
        "num_ids_4": 50
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n\nprint(solution(stdin))\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\nassert solution(\"5 2 5 8 2\") == \"2 2 5 5 8\"\nassert solution(\"1 2 1\") == \"1 1 2\"\n\n\"\"\"\n\n\nfrom typing import List\n\nclass Solution:\n    def sort_by_asc(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        O(n)\n        \"\"\"\n        if not nums:\n            return []\n        for i in range(1, len(nums)):\n            val = nums[i]\n            j = i\n            while j > 0 and nums[j - 1] > val:\n                nums[j] = nums[j - 1]\n                j -= 1\n            nums[j] = val\n        return nums\n\n\n    def sort_by_desc(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        O(n)\n        \"\"\"\n        if not nums:\n            return []\n        for i in range(1, len(nums)):\n            val = nums[i]\n            j = i\n            while j > 0 and nums[j - 1] < val:\n                nums[j] = nums[j - 1]\n                j -= 1\n            nums[j] = val\n        return nums\n\n\n    def solution(self, stdin: str) -> str:\n        nums = list(map(int, stdin.split()))\n        sorted_asc = self.sort_by_asc(nums)\n        sorted_desc = self.sort_by_desc(nums)\n        print(*sorted_asc, *sorted_desc)\n        return \"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 47
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\nassert solution(\"4 1 2 3\") == \"1 2 3 4\"\nassert solution(\"4 3 3 3\") == \"3 3 3 4\"\nassert solution(\"4 1 2 3\") == \"1 2 3 4\"\nassert solution(\"4 1 4 1\") == \"1 4 1 4\"\n\"\"\"\n\nimport sys\n\nN = sys.stdin.readline().split()\nN = list(map(int, N))\nN.sort()\nfor i in N:\n    sys.stdout.write(str(i) + \" \")",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\nassert solution(\"5 1 7 9 0\") == \"0 1 7 9\"\n\n\"\"\"\n\nimport unittest\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5') == 'NO'\nassert solution('2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5') == 'NO'\nassert solution('2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5') == 'NO'\nassert solution('3\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5') == 'NO'\nassert solution('2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5') == 'NO'\n",
        "num_ids_2": 80,
        "num_ids_4": 160
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"YES\"\nassert solution(\"5\\n3 3 3\") == \"NO\"\n\"\"\"\n\nn = int(input())\nfor _ in range(n):\n    a = list(map(int, input().split()))\n    odd_sum = 0\n    for i in a:\n        odd_sum += i if i % 2 else 0\n    print(\"YES\" if odd_sum % 2 else \"NO\")\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 3 3 4\") == \"NO\"\nassert solution(\"5\\n2 2 8 8\") == \"NO\"\nassert solution(\"1\\n1 1 1 1\") == \"YES\"\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2 3\\n4\\n2 2 8 8\") == \"YES\"\nassert solution(\"3\\n3 3 3\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"NO\"\nassert solution(\"5\\n1 1 1 1\\n\") == \"YES\"\n\nassert solution(\"2\\n2 3\\n4\\n2 2 8 8\") == \"YES\"\n",
        "num_ids_2": 47,
        "num_ids_4": 83
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2\\n3\\n4\\n2 2 8 8\") == \"YES\"\n\n\"\"\"\n\n\nfrom sys import stdin",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n3\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\") == \"YES\\nNO\\nYES\\nNO\\nNO\"\nprint(solution(\"2\\n3\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\"))",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(example_stdin_1) == example_stdout_1\nassert solution(example_stdin_2) == example_stdout_2\nassert solution(example_stdin_3) == example_stdout_3\n\n\"\"\"\nimport collections\nimport math\nimport sys\nfrom typing import List\n\nsys.setrecursionlimit(10000)\n\n\nclass Solution:\n    def canMakeSum(self, t: int, n: int, ar: List[int], k: int) -> bool:\n        mod = 1000000007\n        dp = [[False for _ in range(k + 1)] for _ in range(t)]\n\n        for i in range(t):\n            dp[i][0] = True\n\n        for i in range(t):\n            for j in range(1, k + 1):\n                if j - ar[i] >= 0:\n                    dp[i][j] = dp[i - 1][j] or dp[i - 1][j - ar[i]]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n\n        return dp[t - 1][k]\n",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3\\n4\\n2 2 8 8\") == 'YES'\nassert solution(\"4\\n3 3\\n4\\n5 5 5 5\") == 'NO'\nassert solution(\"2\\n1 1\\n2\\n1 1\") == 'YES'\nassert solution(\"1\\n1\") == 'YES'\nassert solution(\"3\\n3 3 3\") == 'NO'\n",
        "num_ids_2": 46,
        "num_ids_4": 80
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2 3\") == \"YES\"\nassert solution(\"4\\n2 2 8 8\") == \"NO\"\nassert solution(\"3\\n3 3 3\") == \"YES\"\nassert solution(\"4\\n5 5 5 5\") == \"NO\"\nassert solution(\"1\\n1 1 1 1\") == \"YES\"\n\"\"\"\n\nfrom collections import Counter\nimport string",
        "num_ids_2": 30,
        "num_ids_4": 61
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\\n4\\n1 1 1 1\") == \"YES\"\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n2\\n4\\n6\\n7\\n13\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"6\\n4\\n2\\n4\\n6\\n7\") == \"5 3 6 2 4 1\"\nassert solution(\"6\\n6\\n2\\n4\\n7\\n13\") == \"13 9 7 11 8 4 1 3 5 2 6 10 12\"\nassert solution(\"6\\n7\\n2\\n4\\n13\\n6\") == -1",
        "num_ids_2": 64,
        "num_ids_4": 125
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\n10') == '9 6 10 8 4 7 3 1 5 2\\n-1\\n3 1 4 2\\n5 3 6 2 4 1\\n5 1 3 6 2 4 7\\n13 9 7 11 8 4 1 3 5 2 6 10 12'\n",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"2\") == \"3 1 4 2\"\nassert solution(\"4\") == \"5 3 6 2 4 1\"\nassert solution(\"6\") == \"5 1 3 6 2 4 7\"\nassert solution(\"7\") == \"13 9 7 11 8 4 1 3 5 2 6 10 12\"\n",
        "num_ids_2": 32,
        "num_ids_4": 63
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\n2\\n4\\n6\\n7\\n13\\n') == '9 6 10 8 4 7 3 1 5 2'\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('2') == '-1'\nassert solution('4') == '3 1 4 2'\nassert solution('6') == '5 3 6 2 4 1'\nassert solution('7') == '5 1 3 6 2 4 7'\n",
        "num_ids_2": 30,
        "num_ids_4": 58
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\n2\\n4\\n6\\n7\\n13') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('6\\n4\\n2\\n6') == '-1'\nassert solution('4\\n4\\n2\\n6') == '5 1 3 6 2 4'\nassert solution('2\\n2\\n2') == '5 3 1'\nassert solution('1\\n1\\n1') == '5 3 1'\n",
        "num_ids_2": 54,
        "num_ids_4": 96
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\n2\\n4\\n6\\n7\\n13\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"10\\n2\\n4\\n6\\n7\\n13\")!= \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"10\\n2\\n4\\n6\\n7\\n13\")!= \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"10\\n2\\n4\\n6\\n7\\n13\")!= \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"10\\n2\\n4\\n6\\n7\\n13\")!= \"9 6 10 8 4 7 3 1 5 2\"\n",
        "num_ids_2": 69,
        "num_ids_4": 139
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'6\\n10\\n2\\n4\\n6\\n7\\n13\\n'\n) == '9 6 10 8 4 7 3 1 5 2\\n-1\\n3 1 4 2\\n5 3 6 2 4 1\\n5 1 3 6 2 4 7'\nassert solution(\n'2\\n4\\n'\n) == '2\\n4\\n'\nassert solution(\n'6\\n'\n) == '-1'\nassert solution(\n'1\\n'\n) == '1'\nassert solution(\n'1\\n1\\n'\n) == '1'\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n2\\n4\\n6\\n7\\n13\") == \"9 6 10 8 4 7 3 1 5 2\"\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n2\\n4\\n6\\n7\\n13\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"2\\n4\\n\") == \"-1\"\nassert solution(\"4\\n5\\n\") == \"1 3 2 4\"\nassert solution(\"6\\n7\\n\") == \"5 1 3 6 2 4 7\"\nassert solution(\"13\\n\") == \"13 9 7 11 8 4 1 3 5 2 6 10 12\"\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 49,
        "num_ids_4": 88
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3 2 7 6') == '2'\nassert solution('3\\n3 2 6') == '-1'\nassert solution('1\\n7') == '0'\n",
        "num_ids_2": 32,
        "num_ids_4": 45
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\") == \"2\"\nassert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\") == \"1\"\nassert solution(\"4\\n1\\n7\\n7\\n4 9 2 1 18 3 0\") == \"0\"\n\"\"\"\n\nimport sys\nimport ast\n",
        "num_ids_2": 48,
        "num_ids_4": 76
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('12') == ''\nassert solution('2') == ''\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\\n') == '2\\n1\\n-1\\n0'\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_0) == test_0_result\nassert solution(test_1) == test_1_result\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3\\n2\\n7\\n6\\n\") == 2\nassert solution(\"4\\n3\\n2\\n7\\n6\") == -1\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n''') == '2'\n\n\"\"\"\nfrom typing import List, Tuple\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 2 7 6\") == 2\nassert solution(\"3\\n3 2 6\") == -1\nassert solution(\"1\\n7\") == 0\nassert solution(\"7\\n7\") == 0\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 50
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 2 7 6\") == \"2\"\nassert solution(\"3\\n3 2 6\") == \"1\"\nassert solution(\"1\\n7\") == \"-1\"\nassert solution(\"7\\n7\") == \"0\"\n",
        "num_ids_2": 31,
        "num_ids_4": 57
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 2 7 6\") == '2'\nassert solution(\"3\\n3 2 6\") == '1'\nassert solution(\"1\\n7\") == '-1'\nassert solution(\"7\\n7\") == '0'\n\n\"\"\"\n\n\nfrom typing import List\n",
        "num_ids_2": 31,
        "num_ids_4": 58
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n2 5\\n3 4\\n4 6\\n5 7\\n6 8\\n7 9\\n8 9\") == \"0 -1 1 -1\"\nassert solution(\"7\\n0 1 0 1\\n1 2\\n2 3\\n3 4\\n3 5\\n4 6\\n5 7\\n6 7\\n7 8\\n8 9\\n8 9\") == \"0 -1 1 -1\"\n\n-----Explanation-----\nThe tree of the first example is as follows:\n\n[Image]\n\nThe colors of the vertices are black and white.\n\nThe subtrees of the tree with the color black have the following number of black vertices: 0, 1 and 2.\n\nThe subtrees of the tree with the color white have the following number of black vertices: 1 and 2.\n\nThe maximum possible difference between the number of black and white vertices in the subtrees is 2.\n\nIn the tree of the second example the subtrees are as follows:\n\n[Image]\n\nThe subtrees of the tree with the color black have the following number of black vertices: 0, 1 and 2.\n\nThe subtrees of the tree with the color white have the following number of black vertices: 0 and 1.\n\nThe maximum possible difference between the number of black and white vertices in the subtrees is 1.\n\nIt is clear that for the vertex $2$ the difference between the number of black and white vertices is the greatest.\n\nIt is also clear that for the vertex $1$ the subtrees of the tree have no black vertices.\n\"\"\"",
        "num_ids_2": 136,
        "num_ids_4": 136
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n2') == '0 -1 1 -1'\nassert solution('1\\n2\\n3') == '0 -1 1 -1'\nassert solution('1\\n2\\n3\\n4') == '0 -1 1 -1'\n",
        "num_ids_2": 18,
        "num_ids_4": 57
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3\\n4 5 6\\n7 8 9\\n') == '2 2 2 2 1 1 0 2'\n\n\"\"\"\nfrom collections import deque\n\n\nclass Tree:\n    def __init__(self, adjacency_list: list, weights: list):\n        self.adjacency_list = adjacency_list\n        self.weights = weights\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\\n\") == \"0 -1 1 -1\"\n\n\"\"\"\n\n\nimport unittest\nfrom collections import deque\nfrom collections import Counter\n",
        "num_ids_2": 87,
        "num_ids_4": 87
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n0 0 1 0\\n1 2\\n1 3\\n1 4') == '0 -1 1 -1'\nassert solution('7\\n0 0 1 0 0 0 0 1\\n1 2\\n1 3\\n1 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9') == '2 2 2 2 2 1 1 0 2'\n",
        "num_ids_2": 93,
        "num_ids_4": 93
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 1 1 1\") == \"0 -1 1 -1\"\nassert solution(\"4\\n0 0 1 0\") == \"0 -1 1 -1\"\n\"\"\"\nimport sys\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 6)",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9') == '2 2 2 2 2 1 1 0 2'\nassert solution('4\\n0 0 1 0\\n1 2\\n1 3\\n1 4') == '0 -1 1 -1'",
        "num_ids_2": 94,
        "num_ids_4": 94
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"4\\n0 0 1 0\") == \"0 -1 1 -1\"\n",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '4\\n'\n    '0 1 1 0\\n'\n    '1 2\\n'\n    '1 3\\n'\n    '1 4'\n) == '2 2 2 2 1 1 0 2'\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n1 4\\n\") == \"0 -1 1 -1\"\nassert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n\") == \"2 2 2 2 2 1 1 0 2\"",
        "num_ids_2": 92,
        "num_ids_4": 92
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"15116544\") == \"36\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\") == \"0\"\nassert solution(\"3\\n12\") == \"2\"\nassert solution(\"12345\\n15116544\") == \"12\"\nassert solution(\"12345\\n387420489\") == \"36\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 60
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n5') == '2'\nassert solution('3\\n7') == '2'\nassert solution('4\\n10') == '0'\nassert solution('2\\n4') == '1'\n\nassert solution('2\\n5') == '2'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n10\") == \"1\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"2\\n5\") == \"2\"\nassert solution(\"2\\n1\") == \"1\"\nassert solution(\"2\\n2\") == \"0\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2') == '0'\nassert solution('4\\n5') == '1'\nassert solution('2\\n3') == '-1'\nassert solution('15\\n456') == '8'\nassert solution('12345\\n1234567') == '-1'\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n3\\n12\\n12345\\n15116544\\n387420489\") == '0\\n-1\\n2\\n-1\\n-1\\n12\\n36'\n\"\"\"\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\") == '0'\nassert solution(\"3\\n12\") == '2'\nassert solution(\"4\\n12345\") == '-1'\nassert solution(\"5\\n1234567\") == '-1'\nassert solution(\"6\\n1234567890\") == '12'\n",
        "num_ids_2": 26,
        "num_ids_4": 57
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"11\") == \"2\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\") == 6\nassert solution(\"1\") == 1\nassert solution(\"3\") == -1\nassert solution(\"15116544\") == 36\nassert solution(\"387420489\") == -1\n",
        "num_ids_2": 16,
        "num_ids_4": 36
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n12\\n12345\\n15116544\\n387420489\") == \"0\\n-1\\n2\\n-1\\n-1\\n12\\n36\"\nassert solution(\"7\\n1\\n2\\n3\\n12\\n12345\\n15116544\\n387420489\") == \"0\\n-1\\n2\\n-1\\n-1\\n12\\n36\"\n\n\n\"\"\"\nfrom typing import List\nfrom collections import deque\n\nclass Solution:\n    def solution(self, n: int) -> int:\n        if n == 1:\n            return 0\n        queue = deque([n])\n        while queue:\n            for _ in range(len(queue)):\n                num = queue.popleft()\n                if num == 1:\n                    return len(queue)\n                elif num % 6 == 0:\n                    queue.append(int(num / 6))\n                elif num % 2 == 0:\n                    queue.append(int(num / 2))\n                else:\n                    queue.append(int(num - 1))\n        return -1\n",
        "num_ids_2": 118,
        "num_ids_4": 118
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('BBBGGGGBBBBBBBBBBBBB') == 1\nassert solution('BBRGGRRRRRRRRRRRRRR') == 0\nassert solution('BGRRRBBRRGRRRRRRRR') == 3\n\nassert solution('BBBBBBBBBBB') == 1\nassert solution('BBBBBBBBBBBBBBBBBBB') == 1\n",
        "num_ids_2": 36,
        "num_ids_4": 67
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RGR\") == 0\nassert solution(\"RRR\") == 0\nassert solution(\"RBR\") == 1\nassert solution(\"GBR\") == 1\nassert solution(\"BBR\") == 1\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BGGGG\") == \"1\"\nassert solution(\"RRRRRRRR\") == \"0\"\nassert solution(\"GBBBBBBBB\") == \"3\"\nassert solution(\"GGGGGGGBBB\") == \"8\"\nassert solution(\"BBSBGB\") == \"2\"\n",
        "num_ids_2": 24,
        "num_ids_4": 51
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('R') == 'R'\nassert solution('RR') == 'RR'\nassert solution('RRR') == 'RRR'\nassert solution('RGG') == 'RGG'\n",
        "num_ids_2": 18,
        "num_ids_4": 40
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RBRGR\") == \"RRRRRR\"\nassert solution(\"BBBBBR\") == \"BBBBBB\"\nassert solution(\"RRRRRR\") == \"RRRRRR\"\nassert solution(\"BGBBGB\") == \"BBBBGB\"\nassert solution(\"BBBGBR\") == \"BBBBGB\"\n",
        "num_ids_2": 28,
        "num_ids_4": 57
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('BGGGG') == 1\nassert solution('RBRGR') == 3\nassert solution('BBBRR') == 0",
        "num_ids_2": 19,
        "num_ids_4": 29
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RRRRRRRRRRRRRRRRRRRRRRRRRRRRRGG\") == \"R\"\nassert solution(\"RBRRRRRRRRRRRRRRRRRRRRRRRRRRGG\") == \"R\"\nassert solution(\"RBGRRRRRRRRRRRRRRRRRRRRRRRRRRGG\") == \"R\"\nassert solution(\"RRRRRRRRRRRRRRRRRRRRRRRRRRRRRBB\") == \"R\"\nassert solution(\"RBRRRRRRRRRRRRRRRRRRRRRRRRRRRGG\") == \"R\"\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BGGGG\", 5, 2) == 1\nassert solution(\"BGGGG\", 5, 3) == 0\nassert solution(\"BGGGG\", 5, 5) == 3\n\nassert solution(\"RBRGR\", 5, 2) == 3\nassert solution(\"RBRGR\", 5, 3) == 3\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"RBRGR\") == 0\nassert solution(\"BBBRR\") == 3\n\nassert solution(\"RBRGR\", 5) == 0\nassert solution(\"BBBRR\", 5) == 3\n",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"BGGGG\", 5, 2) == 1\nassert solution(\"RBRGR\", 5, 3) == 0\nassert solution(\"BBBRR\", 5, 5) == 3\n\"\"\"\nfrom collections import Counter\n\nq = int(input())\nfor _ in range(q):\n    n, k = map(int, input().split())\n    s = input()\n    count_r = 0\n    count_g = 0\n    count_b = 0\n    min_r = n\n    min_g = n\n    min_b = n\n    for i in range(len(s)):\n        if s[i] == 'R':\n            count_r += 1\n            min_r = min(count_r, min_r)\n        if s[i] == 'G':\n            count_g += 1\n            min_g = min(count_g, min_g)\n        if s[i] == 'B':\n            count_b += 1\n            min_b = min(count_b, min_b)\n    print(min(min_r, min_b, min_g))\n",
        "num_ids_2": 27,
        "num_ids_4": 41
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 2 3 1\\n7 1 1 1 1 2 2') == 3\nassert solution('5\\n3 1 2 3 1') == 3\nassert solution('7\\n1 1 1 1 1 2 2') == 3\n",
        "num_ids_2": 36,
        "num_ids_4": 53
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 1 1\\n2\\n1 1 1 1\") == 3\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2') == 3\nassert solution('3\\n7\\n1 1 1 1 1 2 2') == 3\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\\n') == '3\\n3\\n3'\nassert solution('4\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\\n') == '3\\n3\\n3'\nassert solution('4\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\\n') == '3\\n3\\n3'\nassert solution('4\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\\n') == '3\\n3\\n3'\nassert solution('4\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\\n') == '3\\n3\\n3'\n",
        "num_ids_2": 80,
        "num_ids_4": 160
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == 3\nassert solution(\"3\\n3 1 2 3 1\") == 3\nassert solution(\"2\\n5\\n3 1 2 3 1\") == 3\nassert solution(\"1\\n7\\n1 1 1 1 1 2 2\") == 3\n",
        "num_ids_2": 42,
        "num_ids_4": 80
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 1 2 3\\n1 1 1 1\\n\") == \"3\\n3\\n3\\n3\\n\"\nassert solution(\"2\\n3 1 2\\n5 5 5\\n\") == \"3\\n3\\n3\\n\"\nassert solution(\"3\\n5\\n4 1 2 3 1\\n\") == \"4\\n2\\n4\\n4\\n4\\n\"\nassert solution(\"3\\n6\\n4 1 2 3 1 4\\n\") == \"4\\n2\\n4\\n4\\n4\\n4\\n\"\nassert solution(\"3\\n5\\n3 1 2\\n3 1 2\\n\") == \"3\\n3\\n3\\n3\\n3\\n\"\n",
        "num_ids_2": 65,
        "num_ids_4": 141
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2\\n2 2 3 2 1\\n2\\n1 1 1 1 1 2 2\\n\") == \"6\"\nassert solution(\"4\\n3\\n1 2 3 4\\n1 2 3 4\\n\") == \"9\"",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2') == '3\\n3'\nassert solution('4\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\\n2\\n3 3\\n4 1\\n1\\n2') == '4\\n4'\nassert solution('4\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\\n2\\n3 3\\n4 1\\n1\\n2') == '4\\n4'\nassert solution('4\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\\n2\\n3 3\\n4 1\\n1\\n2') == '4\\n4'\n",
        "num_ids_2": 81,
        "num_ids_4": 179
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n5\\n3 1 2 3 1\") == \"3\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1 1 1 1 1 2 2\\n\") == \"3\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == \"1 5 2 4 3\"\nassert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\") == \"1 2 3 4\"\n",
        "num_ids_2": 80,
        "num_ids_4": 80
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"1\\n2\") == \"1 2\"\n\"\"\"\nimport re",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == \"1 5 2 4 3 \\n1 2 3 4 \\n1 \\n1 4 3 2 \\n\"\n\n\"\"\"",
        "num_ids_2": 65,
        "num_ids_4": 65
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 4 3') == '1 5 2 4 3'\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\") == \"1 5 2 4 3\"\nassert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\") == \"1 2 3 4\"\nassert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\") == \"1 2 3 4\"\n\nassert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 3 4\") == \"1 5 2 4 3\"\nassert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 3 4\") == \"1 2 3 4\"",
        "num_ids_2": 65,
        "num_ids_4": 130
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3 \"\nassert solution(\"1\\n1\") == \"1 \"\nassert solution(\"4\\n4 3 2 1\") == \"1 2 3 4 \"\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 56
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\n\n\"\"\"\n\n\n\n\nfrom collections import Counter",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n4 3 2 1\\n1 2 4 3\") == \"1 5 2 4 3\"\nassert solution(\"4\\n1 2 4 3\\n1\") == \"1 2 3 4\"\nassert solution(\"2\\n1\\n1\") == \"1\"\nassert solution(\"1\\n1\") == \"1\"\n",
        "num_ids_2": 48,
        "num_ids_4": 77
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n5 4 1 3 2\") == \"1 5 2 4 3 \"\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4 \"\nassert solution(\"1\\n1\") == \"1 \"\n\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 53
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n5\n5 4 1 3 2\n4\n1 2 4 3\n1\n1\n4\n4 3 2 1\n''') == '1 5 2 4 3 '\nassert solution('''\n3\n2\n1\n2\n4\n1 3\n''') == '1 2 3 4 '\nassert solution('''\n2\n2\n1\n2\n1\n''') == '1 2 '\nassert solution('''\n3\n2\n3\n1\n1\n''') == '1 2 3 '\nassert solution('''\n3\n3\n1\n2\n2\n''') == '1 2 3 '\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"NO\"\n\"\"\"\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"YES\\nYES\\nNO\\nYES\\n\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"NO\\nNO\\nNO\\nYES\\n\"\n\"\"\"\n",
        "num_ids_2": 90,
        "num_ids_4": 90
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == 'YES'\nassert solution('5\\n1 2 3 4 5\\n1\\n1\\n5\\n3 2 1 5 4') == 'YES'\nassert solution('5\\n1 2 3 4 5\\n1\\n1\\n5\\n3 2 1 5 4') == 'NO'\n",
        "num_ids_2": 67,
        "num_ids_4": 100
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n4\n1 2 3 4\n3\n1 3 2\n5\n1 2 3 5 4\n1\n1\n5\n3 2 1 5 4''') == 'YES\\nYES\\nNO\\nYES\\nYES'\n\nprint(solution(input()))",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\") == \"NO\"\nassert solution(\"5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\"\nassert solution(\"5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"NO\"\n\nprint(solution(\"5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\"))\n\n\n-----Explanation-----\nThe students in clockwise order are $[2, 3, 4, 5, 1]$, and can start a clockwise round dance.\n\nThe students in clockwise order are $[3, 2, 1, 4]$, and can start a counterclockwise round dance.\n\nIt is not possible to start a round dance.\n\n\"\"\"\n",
        "num_ids_2": 48,
        "num_ids_4": 105
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\\n') == 'YES'\nassert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\\n') == 'NO'\nassert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\\n') == 'YES'\n\n\"\"\"\n\n\"\"\"\n\u4eca\u56de\u306f\u3001\u30eb\u30fc\u30d7\u3092\u3064\u306a\u3050\u305f\u3081\u306e\u8f9e\u66f8\u3092\u4f5c\u308b\u3002\n\n\u30eb\u30fc\u30d7\u306e\u5f0f\u306b\u3064\u3044\u3066\u306f\u3001",
        "num_ids_2": 104,
        "num_ids_4": 156
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5\n4\n1 2 3 4\n3\n1 3 2\n5\n1 2 3 5 4\n1\n1\n5\n3 2 1 5 4\"\"\") == \"\"\"YES\nYES\nNO\nYES\nYES\"\"\"\n\n\"\"\"\n$n$ = 5\n0 1 2 3 4\n\n$q$ = 5\n\n$p$ = 1 2 3 4\n\n$q$ = 1\n\n$p$ = 1 2 3 4\n\n$n$ = 5\n\n$q$ = 5\n\n$p$ = 1 2 3 5 4\n\n\"\"\"",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == 'YES\\nYES\\nNO\\nYES\\nYES'\nassert solution(\n    \"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == 'NO\\nNO\\nYES\\nYES\\nYES'\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\nassert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"NO\\nNO\\nYES\\nYES\\nYES\"\nassert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"NO\\nNO\\nNO\\nYES\\nYES\"\nassert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"NO\\nNO\\nNO\\nNO\\nYES\"\nassert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"NO\\nNO\\nNO\\nNO\\nNO\"\n",
        "num_ids_2": 130,
        "num_ids_4": 260
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n5 4\") == \"6\"\nassert solution(\"1 1\\n1 1\") == \"2\"\nassert solution(\"1 1\\n1 2\") == \"2\"\nassert solution(\"1 1\\n2 2\") == \"2\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2') == '5\\n3'\nassert solution('19 4') == '18\\n10'\nassert solution('12 7') == '10\\n6'\nassert solution('6 2') == '6\\n2'\nassert solution('100000 50010') == '75015\\n75015'\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '5\\n18\\n10\\n6\\n75015'\nassert solution('5 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n",
        "num_ids_2": 1302,
        "num_ids_4": 1302
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5 18 10 6 75015\"\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 3\\n12 7\\n6 2\\n100000 50010\") == \"5 18 10 6 75015\"\nassert solution(\"5\\n2 3\\n12 7\\n6 2\\n100000 50010\") == \"5 18 10 6 75015\"\n\"\"\"\n",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n5 2\") == \"5\"\nassert solution(\"19 4\") == \"18\"\nassert solution(\"12 7\") == \"10\"\nassert solution(\"6 2\") == \"6\"\nassert solution(\"100000 50010\") == \"75015\"\n",
        "num_ids_2": 25,
        "num_ids_4": 47
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '5\\n18\\n10\\n6\\n75015'\nassert solution('4 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '4\\n18\\n10\\n6\\n75015'\nassert solution('5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '5\\n18\\n10\\n6\\n75015'",
        "num_ids_2": 84,
        "num_ids_4": 126
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5 18 10 6 75015\"\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"4\"\nassert solution(\"6 2\") == \"5\"\nassert solution(\"7 3\") == \"12\"\nassert solution(\"7 4\") == \"12\"\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''8\n10 3\n100 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9''') == '''YES\n4 2 4\nYES\n55 5 5 35\nNO\nNO\nYES\n1 1 1 1 1 1 1 1\nNO\nYES\n3 1 1'''\n\nprint(solution(stdin))\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n3\\n100\\n4\\n8\\n97\\n8\") == \"YES\\n4 2 4\"\n\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u0432\u0445\u043e\u0434\u0438\u0442 \u043b\u0438 \u0447\u0438\u0441\u043b\u043e $x$ \u0432 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b $[a,b]$ \u0438\u043b\u0438 \u043d\u0435\u0442.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 $a$ \u0438 $b$, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\nSample Input 1:\n\n-3\n5\n\nSample Output 1:\n\nYES\n\nSample Input 2:\n\n-3\n5\n\nSample Output 2:\n\nNO\n\nSample Input 3:\n\n-3\n-5\n\nSample Output 3:\n\nYES\n\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u0447\u0438\u0441\u043b\u043e $x$ \u0432 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0435 $[a,b]$ \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b $[a,b]$ \u0438\u043b\u0438 \u043d\u0435\u0442.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 $a$ \u0438 $b$, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\nSample Input 1:\n\n-3\n5\n\nSample Output 1:\n\nYES\n\nSample Input 2:\n\n-3\n5\n\nSample Output 2:\n\nNO\n\nSample Input 3:\n\n-3\n-5\n\nSample Output 3:\n\nYES\n\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u0447\u0438\u0441\u043b\u043e $x$ \u0432 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0435 $[a,b]$ \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b $[a,b]$ \u0438\u043b\u0438 \u043d\u0435\u0442.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 $a$ \u0438 $b$, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\nSample Input 1:\n\n-3\n5\n\nSample Output 1:\n\nYES\n\nSample Input 2:\n\n-3\n5\n\nSample Output 2:\n\nNO\n\nSample Input 3:\n\n-3\n-5\n\nSample Output 3:\n\nYES\n\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u0447\u0438\u0441\u043b\u043e $x$ \u0432 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0435 $[a,b]$ \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b $[a,b]$ \u0438\u043b\u0438 \u043d\u0435\u0442.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 $a$ \u0438 $b$, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\nSample Input 1:\n\n-3\n5\n\nSample Output 1:\n\nYES\n\nSample Input 2:\n\n-3\n5\n\nSample Output 2:\n\nNO\n\nSample Input 3:\n\n-3\n-5\n\nSample Output 3:\n\nYES\n\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \ufffd",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''8\n10 3\n100 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9''') == '''YES\n4 2 4\nYES\n55 5 5 35\nNO\nNO\nYES\n1 1 1 1 1 1 1 1\nNO\nYES\n3 1 1\nYES\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120'''\n\nassert solution('''8\n10 3\n100 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9''') == '''YES\n4 2 4\nYES\n55 5 5 35\nNO\nNO\nYES\n1 1 1 1 1 1 1 1\nNO\nYES\n3 1 1\nYES\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120'''\n\n-----Problem-----\n\n\"\"\"\n\n\"\"\"\n10 6\n10 10\n3 3\n5 5\n8 10\n2 2\n6 6\n11 20\n11 11\n17 17\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n10 3') == 'YES\\n4 2 4'\nassert solution('1\\n100 4') == 'YES\\n55 5 5 35'\nassert solution('1\\n8 7') == 'YES\\n1 1 1 1 1 1 1 1'\nassert solution('1\\n97 2') == 'YES\\n55 5 5 35'\nassert solution('1\\n8 8') == 'NO'\n",
        "num_ids_2": 39,
        "num_ids_4": 83
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\") == \"YES\\n4 2 4\"\nassert solution(\"8\\n3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\") == \"YES\\n4 2 4\"\n\"\"\"\n\nfrom itertools import combinations\n\nclass NumArray:\n    def __init__(self, nums):\n        self.prefix = []\n        prefix = 0\n        for n in nums:\n            prefix += n\n            self.prefix.append(prefix)\n    def sumRange(self, left, right):\n        return self.prefix[right] - self.prefix[left] + self.nums[left]\n\nimport sys\n\nfor _ in range(int(sys.stdin.readline().rstrip())):\n    n, k = list(map(int, sys.stdin.readline().split()))\n    nums = list(map(int, sys.stdin.readline().split()))\n    \n    nums.sort()\n    if k == 1:\n        print('NO')\n        continue\n    if k == 2:\n        if nums[0] % 2 == nums[1] % 2:\n            print('YES')\n            print(nums[0], nums[1], nums[0] + nums[1])\n            continue\n        print('NO')\n        continue\n    \n    if nums[0] % 2 == nums[1] % 2 == nums[2] % 2:\n        print('YES')\n        print(nums[0], nums[1], nums[2])\n        continue\n    \n    result = []\n    for i in range(3, k + 1):\n        for c in combinations(nums, i):\n            if sum(c) % 2 == 0:\n                result.append(c)\n    if len(result) == 0:\n        print('NO')\n        continue\n    else:\n        if max(result, key=len) == sorted(max(result, key=len), reverse=True):\n            print('YES')\n            print(*max(result, key=len))\n        else:\n            print('NO')\n",
        "num_ids_2": 96,
        "num_ids_4": 96
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'NO'\nassert solution('7 7') == 'YES'\nassert solution('10 3') == 'NO'\nassert solution('100 4') == 'YES'\nassert solution('8 7') == 'YES'\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3') == 'YES'\nassert solution('5 10') == 'NO'\nassert solution('100 4') == 'YES'\nassert solution('8 7') == 'YES'\nassert solution('97 2') == 'YES'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 3\") == \"YES\\n4 2 4\"\nassert solution(\"100 4\") == \"YES\\n55 5 5\"\nassert solution(\"8 7\") == \"YES\\n1 1 1 1 1 1 1 1\"\nassert solution(\"97 2\") == \"YES\\n3 1 1\"\nassert solution(\"8 8\") == \"NO\"\n",
        "num_ids_2": 32,
        "num_ids_4": 69
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 3') == '4 2 4'\nassert solution('100 4') == 'YES'\nassert solution('8 7') == 'YES'\nassert solution('97 2') == 'YES'\nassert solution('8 8') == 'NO'\n",
        "num_ids_2": 24,
        "num_ids_4": 46
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\n10 3') == 'YES\\n4 2 4'\nassert solution('100 4\\n8 7') == 'YES\\n55 5 5 35'\nassert solution('97 2\\n8 8') == 'YES\\n1 1 1 1 1 1 1 1'\nassert solution('3 10\\n5 3') == 'YES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120'\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 109
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\\n\") == \"3\\n4\\n0\\n\"\nassert solution(\"4\\n1 2 3 4\\n\") == \"2\\n5\\n1\\n\"\nassert solution(\"6\\n1 10 100 1000 1000\\n1 10 100 1000 1000\\n\") == \"3\\n15\\n5\\n\"\n",
        "num_ids_2": 51,
        "num_ids_4": 85
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\nprint(solution(stdin))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open('test.in').read()) == open('test.out').read()\n\nprint(solution(open('in').read()))\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\n\nassert solution('5\\n1 1 1 1 1\\n1 100 100 100 100\\n1 1000 1000 1000 1000\\n1 100 1 100 100\\n1 1000 1000 1000 1000') == '5\\n5\\n4\\n4\\n5'\n",
        "num_ids_2": 103,
        "num_ids_4": 103
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nprint(\"PASSED\")\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n4 0 1 2 3 4 5\") == '4'\nassert solution(\"7\\n4 0 1 2 3 4 5\") == '4'\nassert solution(\"7\\n4 0 1 2 3 4 5\") == '4'\nassert solution(\"7\\n4 0 1 2 3 4 5\") == '4'\nassert solution(\"7\\n4 0 1 2 3 4 5\") == '4'\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3 4') == '4'\nassert solution('1 10 100') == '55'\nassert solution('10000000000000000 10000000000000000 10000000000000000') == '15000000000000000'\nassert solution('23 34 45') == '51'\n\"\"\"\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 55
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45''') == '''4\n55\n15000000000000000\n51'''\n\nprint(solution(stdin))\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nprint(solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\"))\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec\") == '6\\n3\\n5\\n4\\n15\\n10'\nassert solution(\"1 1\\nababa\\n2 3\\necbedececacbcbccbdec\") == '1\\n1'\n\"\"\"",
        "num_ids_2": 123,
        "num_ids_4": 123
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n6 3\nabcbac\n3 6\naaa\n7 1000\nabczgyo\n5 4\nababa\n20 10\naaebdbabdbbddaadaadc\n20 5\necbedececacbcbccbdec\n''') == '3\\n3\\n5\\n4\\n15\\n10'\n\n'''\n--- Solution ---\n\nWe can first use a stack to store the bead values, and when we get a new bead, we will pop from the stack all the beads that are not equal to the new bead. Then we can traverse the stack, if we encounter a bead that has already been visited, we can find the longest length of a k-beautiful necklace.\n\nA naive brute force solution is to run through all the possible orders of bead visits and check each time if the current order is k-beautiful. This would be the time complexity of $O(2^{n}*k)$.\n\nOne solution is to use dynamic programming. Since we are processing all the beads in the store, we can keep a table of $2^{n}$ elements, where the index in the table represents the current bead value.\n\nIf we have a bead value of `i`, and we are processing the last bead, then we will have to check if we can construct a k-beautiful necklace starting from `i`, and if so, we will set the corresponding index in the table to `k`.\n\nOtherwise, if we have a bead value of `i`, we will have to find all the bead values that are not equal to `i` and add them to the stack, and set the corresponding index in the table to the number of the elements in the stack.\n\nWe can then traverse the table in a breadth-first manner, where for each element we will calculate the longest k-beautiful necklace we can construct using that element as the last bead. If the element is equal to `k`, then we will simply add `1` to the current longest length. Otherwise, we will add the number of elements in the stack to the current longest length.\n\nComplexity\n\nThe runtime complexity is $O(n*2^{n})$.\n\nThe space complexity is $O(n)$.\n\n----\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        t = int(stdin[0])\n        n, k = [int(x) for x in stdin[1].split(' ')]\n\n        def k_beautiful(seq: str, k: int) -> int:\n            stack = []\n            for i in seq:\n                if not stack or stack[-1]!= i:\n                    stack.append(i)\n                elif stack[-1] == i:\n                    stack.pop()\n            return len(stack) if len(stack) <= k else 0\n\n        table = [0] * (1 << n)\n        table[0] = k\n\n        for i in range(1 << n):\n            for j in range(n):\n                if (i >> j) & 1 == 1:\n                    k_beaut = k_beautiful(bin(i)[2:].zfill(n), k)\n                    table[i | 1 << j] = max(table[i | 1 << j], k_beaut + table[i])\n\n        ans = []\n        for i in range(1, 1 << n):\n            k_beaut = k_beautiful(bin(i)[2:].zfill(n), k)\n            ans.append(table[i] - k_beaut)\n\n        print('\\n'.join(map(str, ans)))\n\n\nassert Solution().solution('''\n6 3\nabcbac\n3 6\naaa\n7 1000\nabczgyo\n5 4\nababa\n20 10\naaebdbabdbbddaadaadc\n20 5\necbedececacbcbccbdec\n''') == '3\\n3\\n5\\n4\\n15\\n10'\n\nassert Solution().solution('''\n6 3\nabcbac\n3 6\naaa\n7 1000\nabczgyo\n5 4\nababa\n20 10\naaebdbabdbbddaadaadc\n20 5\necbedececacbcbccbdec\n''') == '3\\n3\\n5\\n4\\n15\\n10'\n\nassert Solution().solution('''\n1 1\na\n1 2\n''') == '1\\n2'\n\nassert Solution().solution('''\n2 1\na\n2 2\n''') == '0'",
        "num_ids_2": 15,
        "num_ids_4": 33
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcbac\") == 6\nassert solution(\"aaa\") == 3\nassert solution(\"abczgyo\") == 5\nassert solution(\"ababa\") == 4\nassert solution(\"ecbedececacbcbccbdec\") == 10",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3\\naa\\nabcbac\") == \"3\"\nassert solution(\"6 3\\nabcbac\") == \"3\"\nassert solution(\"6 3\\naaaa\") == \"1\"\nassert solution(\"6 3\\nabczgyo\") == \"5\"\nassert solution(\"6 3\\nabcdee\") == \"4\"\n",
        "num_ids_2": 35,
        "num_ids_4": 66
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3\\nabcbac\") == \"6\"\nassert solution(\"3 6\\naaa\") == \"3\"\nassert solution(\"7 1000\\nabczgyo\") == \"7\"\nassert solution(\"5 4\\nababa\") == \"4\"\nassert solution(\"20 10\\naaebdbabdbbddaadaadc\") == \"10\"\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3\\n\"\n\"abcbac\\n\"\n\"3 6\\n\"\n\"aaa\\n\"\n\"7 1000\\n\"\n\"abczgyo\\n\"\n\"5 4\\n\"\n\"ababa\\n\"\n\"20 10\\n\"\n\"aaebdbabdbbddaadaadc\\n\"\n\"20 5\\n\"\n\"ecbedececacbcbccbdec\\n\") == \"6\\n3\\n5\\n4\\n15\\n10\"\n\"\"\"\n\nimport collections\nimport math\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec\") == '6\\n3\\n5\\n4\\n15\\n10'\nassert solution(\"6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec\") == '6\\n3\\n5\\n4\\n15\\n10'\nassert solution(\"6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec\") == '6\\n3\\n5\\n4\\n15\\n10'\nassert solution(\"6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec\") == '6\\n3\\n5\\n4\\n15\\n10'\nassert solution(\"6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec\") == '6\\n3\\n5\\n4\\n15\\n10'\n",
        "num_ids_2": 178,
        "num_ids_4": 356
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\naaa\\n') == '4'\nassert solution('4 3\\nzzaa\\n') == '3'\nassert solution('4 5\\ncbde\\n') == '5'\nassert solution('4 5\\nabac\\n') == '4'\nassert solution('1 1\\n') == '0'\n",
        "num_ids_2": 33,
        "num_ids_4": 67
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(s) == ans\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3\\nabcbac\") == '3'\nassert solution(\"3 6\\naaa\") == '3'\nassert solution(\"7 1000\\nabczgyo\") == '5'\nassert solution(\"5 4\\nababa\") == '4'\nassert solution(\"20 10\\naaebdbabdbbddaadaadc\") == '10'\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 18 3 14 1') == 'YES\\n1 3 5'\nassert solution('5 4') == 'NO'\nassert solution('1 2 3 4 5') == 'NO'\nassert solution('1 2 8 4 10 2') == 'YES\\n1 3 5'\n",
        "num_ids_2": 30,
        "num_ids_4": 64
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == expected_output\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == \"YES\\n1 3 5\"\nassert solution(\"4\\n4 1\\n1 2 3 4\\n4 2\\n1 2 8 4 10 2\") == \"YES\\n1 3 5\"\nassert solution(\"1\\n5 1\\n1 2 3 4 5\\n5 2\\n1 2 8 4 10 2\") == \"NO\"\n\nprint(solution(\"5\\n3 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\"))",
        "num_ids_2": 86,
        "num_ids_4": 119
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\\n\") == \"YES\\n1 3 5\"\nassert solution(\"5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\\n\") == \"NO\\nNO\"\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10 ** 6)\n",
        "num_ids_2": 94,
        "num_ids_4": 94
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n1 2 3 4 5\\n6 2\") == \"YES\\n1 3 5\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2') == 'YES\\n1 3 5\\nNO'\n\nassert solution('1\\n2\\n3\\n4\\n5') == 'YES\\n1 2 3\\nNO'\n\nassert solution('1\\n5\\n5\\n5\\n5\\n5') == 'YES\\n1 2 5\\nNO'\n\nassert solution('1\\n1\\n1\\n1\\n1\\n1') == 'YES\\n1 1 1\\nNO'\n\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == 'YES\\n1 2 3\\n6 4 5\\nNO'",
        "num_ids_2": 82,
        "num_ids_4": 148
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == \"NO\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 2\\n3 4\\n5 6\\n4\\n1 2\\n2 3\\n3 4\\n3') == 'YES\\n1 3 5\\nNO'\n\"\"\"",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n7 18 3 14 1\") == 'YES\\n1 3 5'\nassert solution(\"5 4\\n1 2 3 4 5\") == 'NO'\nassert solution(\"5 4\\n1 2 3 4 5\") == 'NO'\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 59
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5') == 'YES\\n1 3 5'\nassert solution('2\\n2 1\\n2 1') == 'YES\\n1 2'\nassert solution('2\\n3 1\\n3 1') == 'NO'\n",
        "num_ids_2": 59,
        "num_ids_4": 77
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"00000010100101000001111010011100\") == \"964176192\"\nassert solution(\"111111111111111111111111111111101\") == \"3221225471\"\nassert solution(\"11101111111111111111111111111111011\") == \"3221225471\"\nassert solution(\"111111111111111111111111111111111110111\") == \"3221225471\"\nassert solution(\"11111111111111111111111111111111111011111\") == \"3221225471\"\n",
        "num_ids_2": 45,
        "num_ids_4": 91
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('00000010100101000001111010011100') == '964176192'\nassert solution('111111111111111111111111111111101') == '3221225471'\nassert solution('10111111111111111111111111111111') == '4294967293'\n\"\"\"\n\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        output = 0\n        mask = 1\n        for i in range(32):\n            if n & mask!= 0:\n                output |= mask\n            mask = mask << 1\n        return output\n\n\nclass Solution2:\n    def reverseBits(self, n: int) -> int:\n        return int(bin(n)[2:].zfill(32)[::-1], 2)\n",
        "num_ids_2": 45,
        "num_ids_4": 66
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10000010\") == \"1010\"\nassert solution(\"111111111111111111111111111111101\") == \"10111111111111111111111111111111\"\n\"\"\"\n\nfrom typing import Dict, List\n\n\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        \"\"\"\n        Reverse bits of a given 32 bits unsigned integer.\n\n        Example 1:\n\n        Input: n = 00000010100101000001111010011100\n        Output: 964176192 (00111001011110000010100101000000)\n        Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.\n\n        Example 2:\n\n        Input: n = 11111111111111111111111111111101\n        Output: 3221225471 (10111111111111111111111111111111)\n        Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.\n\n        :param n:\n        :return:\n        \"\"\"\n        ans = 0\n        for _ in range(32):\n            ans <<= 1\n            ans += n & 1\n            n >>= 1\n\n        return ans\n\n\ns = Solution()\nprint(s.reverseBits(10111111111111111111111111111101))\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11100101111111111111111111101') == '3221225471'\nassert solution('11100101111111111111111111110') == '3221225472'\nassert solution('11100101111111111111111111110') == '3221225472'\nassert solution('11100101111111111111111111110') == '3221225472'\nassert solution('11100101111111111111111111110') == '3221225472'\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1110110110111011111111111101') == '10111111111111111111111111111111'\nassert solution('1110110110111011111111111101') == '10111111111111111111111111111111'\nassert solution('1110110110111011111111111101') == '10111111111111111111111111111111'\nassert solution('1110110110111011111111111101') == '10111111111111111111111111111111'\nassert solution('1110110110111011111111111101') == '10111111111111111111111111111111'",
        "num_ids_2": 54,
        "num_ids_4": 108
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('111011011111111111111111111111101') == 3221225471\nassert solution('10111111111111111111111111111101') == 4294967293\n\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('110110110110111011011011011011110111111110111') == '10111111111111111111111111111111'\nassert solution('110110110110111011011011011011110111111110111') == '10111111111111111111111111111111'\nassert solution('111011011111111111101111111111110111111110111111111111111111111111111') == '10111111111111111111111111111111'\nassert solution
        "num_ids_2": 68,
        "num_ids_4": 1676
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"111011111111111111111111111101\") == 3221225471\n\n\"\"\"\n\nimport math",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"111011111111111111111111111101\") == \"3221225471\"\nassert solution(\"1110111111111111111111111111011111\") == \"3221225471\"\nassert solution(\"111011111111111111111111111101111111\") == \"3221225471\"\nassert solution(\"1111111111111111111111111111111111111\") == \"3221225471\"\n\"\"\"",
        "num_ids_2": 43,
        "num_ids_4": 88
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1110111111011110111111111111011\") == \"10111111111111111111111111111111\"\nassert solution(\"1110111111011110111111111111010\") == \"10111111111111111111111111111110\"\nassert solution(\"11101111110111101111111111110111\") == \"10111111111111111111111111111101\"\nassert solution(\"11111111111111111111111111111111\") == \"11111111111111111111111111111111\"\nassert solution(\"111111111111111111111111111111111\") == \"11111111111111111111111111111111\"\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.",
        "num_ids_2": 56,
        "num_ids_4": 108
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n\"\"\"\n\n\nfrom typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 1:\n            return [[1]]\n        if numRows == 0:\n            return []\n\n        triangle = [[1]]\n\n        for i in range(1, numRows):\n            row = []\n            row.append(1)\n            for j in range(i):\n                if j == 0:\n                    row.append(1)\n                elif j == i-1:\n                    row.append(1)\n                else:\n                    row.append(triangle[i-1][j-1] + triangle[i-1][j])\n\n            triangle.append(row)\n\n        return triangle\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\n\"\"\"\n\nimport unittest\n\n\nclass Solution:\n    def generate(self, numRows: int) -> list[list[int]]:\n        \"\"\"\n        result = []\n\n        for i in range(numRows):\n            row = [1] * (i + 1)\n            for j in range(1, i):\n                row[j] = result[i - 1][j - 1] + result[i - 1][j]\n            result.append(row)\n\n        return result\n        \"\"\"\n        result = [[1]]\n        for i in range(1, numRows):\n            row = [1]\n            for j in range(1, i):\n                row.append(result[i - 1][j - 1] + result[i - 1][j])\n            row.append(1)\n            result.append(row)\n\n        return result\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual([[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]], Solution().generate(4))\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == [\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]]\nprint(solution(stdin))\n\n\"\"\"\n\n\n\"\"\"\nDescription:\nGiven a list of strings, write a function that returns the index of the first non-repeated word in the list.\n\nExamples:\n\n- Input: [\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"], Output: 1\n- Input: [\"the\", \"day\", \"is\", \"sunny\", \"the\", \"the\", \"the\", \"sunny\", \"is\", \"is\"], Output: 4\n\"\"\"\n\nimport collections\n\n\nclass Solution:\n    def firstUniqChar(self, s: str) -> int:\n        freq = collections.Counter(s)\n        seen = set()\n        for i, c in enumerate(s):\n            if freq[c] == 1 and c not in seen:\n                return i\n            seen.add(c)\n        return -1\n\n\nclass SolutionTest:\n    @staticmethod\n    def run():\n        test_cases = [\n            ([\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"], 1),\n            ([\"the\", \"day\", \"is\", \"sunny\", \"the\", \"the\", \"the\", \"sunny\", \"is\", \"is\"], 4)\n        ]\n        for string, expected in test_cases:\n            assert Solution().firstUniqChar(string) == expected\n            print(Solution().firstUniqChar(string), expected)\n\n\nSolutionTest.run()",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\nprint(\"Test passed\")\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\nassert solution(\"1\") == [[1]]\nassert solution(\"10\") == [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,35,21,7,1],[1,8,28,56,70,56,28,8,1],[1,9,36,84,126,126,84,36,9,1]]\nassert solution(\"3\") == [[1],[1,1],[1,2,1]]\n\"\"\"\n\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        result = []\n        for i in range(numRows):\n            if i == 0:\n                result.append([1])\n            elif i == 1:\n                result.append([1, 1])\n            else:\n                cur = [1]\n                for j in range(len(result[i - 1]) - 1):\n                    cur.append(result[i - 1][j] + result[i - 1][j + 1])\n                cur.append(1)\n                result.append(cur)\n        return result\n",
        "num_ids_2": 48,
        "num_ids_4": 186
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == [ [1], [1, 1], [1, 2, 1] ]\nassert solution('4') == [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1] ]\nassert solution('5') == [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1] ]\n\n\"\"\"\n",
        "num_ids_2": 57,
        "num_ids_4": 101
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 abc@def.com abc@xyz.pq\") == ['abc@xyz.pq', 'abc@def.com']\nassert solution(\"3 xyz@example.com abc@def.com xyz@example.co.uk\") == ['abc@def.com', 'xyz@example.com', 'xyz@example.co.uk']\nassert solution(\"1 abc@xyz.pq\") == ['abc@xyz.pq']\nassert solution(\"5 xyz@example.com abc@def.com xyz@example.co.uk abc@ghi.jkl\") == ['abc@def.com', 'xyz@example.com', 'xyz@example.co.uk', 'abc@ghi.jkl']\n\nSolution:\n'''",
        "num_ids_2": 89,
        "num_ids_4": 182
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 qwerty@gmail.com 2 qwerty@gmail.com 3 qwerty@gmail.com 4 qwerty@gmail.com 5 qwerty@gmail.com\") == [\n\"2 qwerty@gmail.com\", \"4 qwerty@gmail.com\"]\nassert solution(\"2 qwerty@gmail.com 2 qwerty@gmail.com\") == [\n\"2 qwerty@gmail.com\", \"2 qwerty@gmail.com\"]\nassert solution(\"4 qwerty@gmail.com 4 qwerty@gmail.com\") == [\n\"4 qwerty@gmail.com\", \"4 qwerty@gmail.com\"]\n\"\"\"\n\n\n\n\"\"\"\n",
        "num_ids_2": 70,
        "num_ids_4": 93
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\nalice@google.com\\nalice@gmail.com\\n') == ['alice@gmail.com', 'alice@google.com']\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == []\nassert solution('5\\n') == ['invalid' for _ in range(5)]\nassert solution('4\\nbad email\\ncorrect email\\ngmail.com\\ngmail_2\\ngmail_3\\ngmail_4\\n') == ['correct email', 'gmail.com', 'gmail_2', 'gmail_3', 'gmail_4']\nassert solution('3\\nabc@def\\ndef@ghi\\njkl@ghi\\n') == ['abc@def.ghi', 'def@ghi.ghi', 'jkl@ghi']\nassert solution('2\\nabcd@efg\\nabcd@efg\\n') == ['abcd@efg']\n",
        "num_ids_2": 28,
        "num_ids_4": 140
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == []\nassert solution('5\\nabc\\n') == ['abc']\nassert solution('4\\nabc\\ndef\\nghi\\n') == ['abc', 'def', 'ghi']\nassert solution('3\\nabc\\ndef\\nghi\\n') == ['abc', 'def', 'ghi']\nassert solution('2\\nabc\\nabc\\n') == ['abc', 'abc']\n",
        "num_ids_2": 23,
        "num_ids_4": 81
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\nrich@example.com\\n') == ['rich@example.com']\nassert solution('3\\ncde@fgh.com\\n') == ['cde@fgh.com']\nassert solution('4\\nabc@def.gh\\n') == ['abc@def.gh']\nassert solution('5\\nabc@def.gh\\njkl@xyz.com\\n') == ['abc@def.gh', 'jkl@xyz.com']\nassert solution('6\\npqr@xyz_123.com\\n') == ['pqr@xyz_123.com']\n",
        "num_ids_2": 49,
        "num_ids_4": 113
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\nriya riya@example.com\\njulia julia@julia.me\\njulia sjulia@example.com\\njulia julia@gmail.com\\nbaba@gmail.com\") == ['julia@julia.me', 'julia@gmail.com', 'baba@gmail.com']\nassert solution(\"6\\nrj@rj.com\\nj.j@g.com\\nsj@j.com\\nrjj@r.com\\njj@rj.com\") == ['rj@rj.com', 'rjj@r.com', 'j@g.com', 'jj@rj.com']\n=======\n",
        "num_ids_2": 159,
        "num_ids_4": 159
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\njoe@google.com\\njoe@microsoft.com\\n\") == [\"joe@google.com\", \"joe@microsoft.com\"]\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\nrich@gmail.com\\njoe@gmail.com\") == [\"joe@gmail.com\", \"rich@gmail.com\"]\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2\ndummy@email.com\nmy.ownsite@our-earth.org\n123@dummy.com\nmyownsite@earth.org\nemail@earth.com\n''') == ['dummy@email.com','my.ownsite@our-earth.org', '123@dummy.com','myownsite@earth.org', 'email@earth.com']\nprint('Success')\n\n=====Test Case 1=========\nInput\n\n3\nDUMMY@email.com\nownsite@our-earth.org\nearth@earth.com\n\nOutput\n\n['DUMMY@email.com', 'ownsite@our-earth.org', 'earth@earth.com']\n\nExplanation\n\nTest Case 2:\nInput\n\n2\nabcdefgh@ab.com\nabcdefgh@a.com\n\nOutput\n\n['abcdefgh@ab.com', 'abcdefgh@a.com']\n\nExplanation\n\nTest Case 3:\nInput\n\n1\njohnsmith@mail.com\n\nOutput\n\n['johnsmith@mail.com']\n\nExplanation\n\nTest Case 4:\nInput\n\n0\n\nOutput\n\n[]\n\nExplanation\n\nTest Case 5:\nInput\n\n5\nDUMMY@email.com\nownsite@our-earth.org\nearth@earth.com\nsolarsystem@system.com\nanother.solarsystem@system.com\n\nOutput\n\n['earth@earth.com', 'DUMMY@email.com', 'ownsite@our-earth.org','solarsystem@system.com', 'another.solarsystem@system.com']\n\nExplanation\n\nTest Case 6:\nInput\n\n0\n\nOutput\n\n[]\n\nExplanation\n\nTest Case 7:\nInput\n\n5\ndummy@email.com\ndummy@email.com.net\ndummy@email.com.org\ndummy@email.com.au\ndummy@email.com.py\n\nOutput\n\n['dummy@email.com', 'dummy@email.com.net', 'dummy@email.com.org', 'dummy@email.com.au', 'dummy@email.com.py']\n\nExplanation\n\nTest Case 8:\nInput\n\n1\nA@b.com\n\nOutput\n\n['A@b.com']\n\nExplanation\n\nTest Case 9:\nInput\n\n2\nX@x.com\nY@y.com\n\nOutput\n\n['X@x.com', 'Y@y.com']\n\nExplanation\n\nTest Case 10:\nInput\n\n0\n\nOutput\n\n[]\n\nExplanation\n\nTest Case 11:\nInput\n\n1\nA@b.com\n\nOutput\n\n['A@b.com']\n\nExplanation\n\nTest Case 12:\nInput\n\n1\nA@b.c\n\nOutput\n\n['A@b.c']\n\nExplanation\n\nTest Case 13:\nInput\n\n1\nA@b.c\n\nOutput\n\n['A@b.c']\n\nExplanation\n\nTest Case 14:\nInput\n\n1\nA@b.c\n\nOutput\n\n['A@b.c']\n\nExplanation\n\nTest Case 15:\nInput\n\n1\nA@b.c\n\nOutput\n\n['A@b.c']\n\nExplanation\n\nTest Case 16:\nInput\n\n1\nA@b.c\n\nOutput\n\n['A@b.c']\n\nExplanation\n\nTest Case 17:\nInput\n\n1\nA@b.c\n\nOutput\n\n['A@b.c']\n\nExplanation\n\nTest Case 18:\nInput\n\n2\nA@b.c\nA@b.com\n\nOutput\n\n['A@b.c', 'A@b.com']\n\nExplanation\n\nTest Case 19:\nInput\n\n0\n\nOutput\n\n[]\n\nExplanation\n\nTest Case 20:\nInput\n\n0\n\nOutput\n\n[]\n\nExplanation\n\nTest Case 21:\nInput\n\n2\nA@b.c\nA@b.com\n\nOutput\n\n['A@b.c', 'A@b.com']\n\nExplanation\n\nTest Case 22:\nInput\n\n0\n\nOutput\n\n[]\n\nExplanation\n\nTest Case 23:\nInput\n\n0\n\nOutput\n\n[]\n\nExplanation\n\nTest Case 24:\nInput\n\n0\n\nOutput\n\n[]\n\nExplanation\n\nTest Case 25:\nInput\n\n0\n\nOutput\n\n[]\n\nExplanation\n\nTest Case 26:\nInput\n\n2\nA@b.com\nA@b.com\n\nOutput\n\n['A@b.com', 'A@b.com']\n\nExplanation\n\nTest Case 27:\nInput\n\n2\nA@b.com\nA@b.com\n\nOutput\n\n['A@b.com', 'A@b.com']\n\nExplanation\n\nTest Case 28:\nInput\n\n2\nA@b.com\nA@b.com\n\nOutput\n\n['A@b.com', 'A@b.com']\n\nExplanation\n\nTest Case 29:\nInput\n\n2\nA@b.com\nA@b.com\n\nOutput\n\n['A@b.com', 'A@b.com']\n\nExplanation\n\nTest Case 30:\nInput\n\n2\nA@b.com\nA@b.com\n\nOutput\n\n['A@b.com', 'A@b.com']\n\nExplanation\n\nTest Case 31:\nInput\n\n0\n\nOutput\n\n[]\n\nExplanation\n\nTest Case 32:\nInput\n\n0\n\nOutput\n\n[]\n\nExplanation\n\nTest Case 33:\nInput\n\n0\n\nOutput\n\n[]\n\nExplanation\n\nTest Case 34:\nInput\n\n0\n\nOutput\n\n[]\n\nExplanation\n\nTest Case 35:\nInput\n\n2\nA@b.com\nA@b.com\n\nOutput\n\n['A@b.com', 'A@b.com']\n\nExplanation\n\nTest Case 36:\nInput\n\n2\nA@b.com\nA@b.com\n\nOutput\n\n['A@b.com', 'A@b.com']\n\nExplanation\n\nTest Case 37:\nInput\n\n1\nA@b.com\n\nOutput\n\n['A@b.com']\n\nExplanation\n\nTest Case 38:\nInput\n\n1\nA@b.com\n\nOutput\n\n['A@b.com']\n\nExplanation\n\nTest Case 39:\nInput\n\n1\nA@b.com\n\nOutput\n\n['A@b.com']\n\nExplanation\n\nTest Case 40:\nInput\n\n1\nA@b.com\n\nOutput\n\n['A@b.com']\n\nExplanation\n\nTest Case 41:\nInput\n\n2\nA@b.com\nA@b.com\n\nOutput\n\n['A@b",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(5) == [0, 1, 1, 8, 27]",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == [0, 1, 1, 8, 27]\n\n=========================",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == [0, 1, 1, 8, 27, 64, 125, 216, 343, 512]\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == [1, 1]\nassert solution(\"5\") == [0, 1, 1, 8, 27]\n=====Sample Output=====\n[1, 1, 1, 8, 27]\n\n>>>>>>> b7522ba5389778e8576c407c6c561f68ab2635c7\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(100) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n\nsolution()\n=====Test Case=====\nYour solution should return a list containing the first N fibonacci numbers, 0 being the first number in the list.\n>>>>>>> b7522ba5389778e8576c407c6c561f68ab2635c7\n=====Note=====\nThe first line of the input contains an integer N.\n\nThis is followed by an unknown number of lines each containing one integer \u2014 the i-th fibonacci number.\n\nYou may assume that the input will always be valid and of the expected form.\n\nYou may assume that the input is equally valid for both the positive and the negative numbers.\n\nAny output will be equally valid for both the positive and the negative numbers.\n>>>>>>> b7522ba5389778e8576c407c6c561f68ab2635c7\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == [0, 1, 1, 8]\nprint(solution('4'))\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == [1]\nassert solution('2') == [1, 1]\nassert solution('3') == [1, 1, 1]\nassert solution('4') == [1, 1, 1, 1]\nassert solution('5') == [1, 1, 1, 1, 1]\n\n=====Test Case=====\nInput 1:\n\n3\nOutput 1:\n\n[1, 1, 1]\n\nInput 2:\n\n5\nOutput 2:\n\n[1, 1, 1, 1, 1]\n'''\n",
        "num_ids_2": 22,
        "num_ids_4": 52
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == [1, 8, 27, 64]\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == [0, 1, 1, 8]\n\n======Test time is 0.7s======\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == [0, 1, 1, 8, 27]\nprint('Test passed')\n\n=====Sample Output=====\n[0, 1, 1, 8, 27]\nSample Input\n\n9\nSample Output\n\n[0, 1, 1, 8, 27, 125, 216, 343, 512]\nExplanation\n\nAll fibonacci numbers less than 9 are: 0, 1, 1, 2, 3, 5, 8. \nThe map() can be used to apply a function to every member of an iterable and returns the result.\nCube of each member is calculated and appended to the list.\nprint(list(map(lambda x: x**3, solution('9'))))\n\n=========================================",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n<data>\n    <country name=\"Liechtenstein\">\n        <rank>1</rank>\n        <year>2008</year>\n        <gdppc>141100</gdppc>\n        <neighbor name=\"Austria\" direction=\"E\"/>\n    </country>\n    <country name=\"Singapore\">\n        <rank>4</rank>\n        <year>2011</year>\n        <gdppc>59900</gdppc>\n        <neighbor name=\"Malaysia\" direction=\"N\"/>\n    </country>\n    <country name=\"Panama\">\n        <rank>68</rank>\n        <year>2011</year>\n        <gdppc>13600</gdppc>\n        <neighbor name=\"Costa Rica\" direction=\"W\"/>\n        <neighbor name=\"Colombia\" direction=\"E\"/>\n    </country>\n</data>\n\"\"\") == 3\n\nprint(\"Success\")\n\n=====Answer=====\n3\n\n>>>>>>> b7522ba5389778e8576c407c6c561f68ab2635c7\n",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 0\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author/>\n        <question type=\"multi\">XML 1</question>\n        <question type=\"multi\">XML 2</question>\n    </entry>\n</feed>\n\"\"\") == 2\n\nprint('Success')",
        "num_ids_2": 10,
        "num_ids_4": 15
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('<data>'\n               '   <animal name=\"cat\" age=\"5\">'\n               '       <breed>siamese</breed>'\n               '       <location>Egypt</location>'\n               '       <trick>play dead</trick>'\n               '   </animal>'\n               '   <animal name=\"dog\" age=\"6\">'\n               '       <breed>Chihuahua</breed>'\n               '       <trick>sit tight</trick>'\n               '   </animal>'\n                '</data>') == 2\nassert solution('<stuff>'\n               ' <users>'\n               '   <user x=\"2\">'\n               '     <id>001</id>'\n               '     <name>Chuck</name>'\n               '   </user>'\n               '   <user x=\"7\">'\n               '     <id>009</id>'\n               '     <name>Brent</name>'\n               '   </user>'\n               ' </users>'\n                '</stuff>') == 1\nassert solution('<a>'\n               ' <b>'\n               '   <c>d</c>'\n               '   <e>f</e>'\n               '   <g>h</g>'\n               ' </b>'\n               ' <b>i</b>'\n               ' <j>'\n               '   <k>l</k>'\n               '   <m>n'\n               '     <o>'\n               '       <p>'\n               '         <q>r</q>'\n               '         <s>t</s>'\n               '         <u>v</u>'\n               '       </p>'\n               '     </o>'\n               '   </m>'\n               ' </j>'\n               ' <n>o</n>'\n                '</a>') == 4\nassert solution('<a>'\n               ' <b>'\n               '   <c>d</c>'\n               '   <e>f</e>'\n               '   <g>h</g>'\n               ' </b>'\n               ' <b>i</b>'\n               ' <j>'\n               '   <k>l</k>'\n               '   <m>n'\n               '     <o>'\n               '       <p>'\n               '         <q>r</q>'\n               '         <s>t</s>'\n               '         <u>v</u>'\n               '       </p>'\n               '     </o>'\n               '   </m>'\n               ' </j>'\n               ' <n>o</n>'\n                '</a>') == 4\nassert solution('<a>'\n               ' <b>'\n               '   <c>d</c>'\n               '   <e>f</e>'\n               '   <g>h</g>'\n               ' </b>'\n               ' <b>i</b>'\n               ' <j>'\n               '   <k>l</k>'\n               '   <m>n'\n               '     <o>'\n               '       <p>'\n               '         <q>r</q>'\n               '         <s>t</s>'\n               '         <u>v</u>'\n               '       </p>'\n               '     </o>'\n               '   </m>'\n               ' </j>'\n               ' <n>o</n>'\n                '</a>') == 4\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 3\nassert solution(\"\"\"\n<html>\n  <head><title>HTML Parser - I</title></head>\n  <body data-modal-target class='1'>\n    <h1 class=\"intro\">Welcome to HackerRank</h1>\n    <br/>\n  </body>\n</html>\n\"\"\") == 3\nassert solution(\"\"\"\n<html>\n  <head><title>HTML Parser - I</title></head>\n  <body>\n    <h1 class=\"intro\">Welcome to HackerRank</h1>\n    <br/>\n  </body>\n</html>\n\"\"\") == 3\nassert solution(\"\"\"\n<html>\n  <head><title>HTML Parser - I</title></head>\n  <body data-modal-target class='1'>\n    <h1 class=\"intro\">Welcome to HackerRank</h1>\n    <br/>\n  </body>\n</html>\n\"\"\") == 3\nassert solution(\"\"\"\n<html>\n  <head><title>HTML Parser - I</title></head>\n  <body>\n    <h1 class=\"intro\">Welcome to HackerRank</h1>\n  </body>\n</html>\n\"\"\") == 3\n",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('<data>'\n    '  <item><name>Foo</name><phone type=\"intl\">+1 555 641 2232</phone>'\n    '  <email hide=\"yes\" /></item>'\n    '</data>') == 0, \"Example\"\n\nassert solution('<root>'\n    '<a type=\"root\" />'\n    '<item>'\n    '<name>Foo</name>'\n    '<phone type=\"intl\">+1 555 641 2232</phone>'\n    '<email hide=\"yes\" />'\n    '</item>'\n    '</root>') == 1, \"Simple nesting\"\n\nassert solution('<root>'\n    '<a>'\n    '<a>'\n    '<a type=\"leaf\">Foo</a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '</a>'\n    '</a>'\n    '</a>'\n    '</a>'\n    '</a>'\n    '</root>') == 4, \"Deep nesting\"\n    \nassert solution('<root>'\n    '<a>'\n    '<a type=\"leaf\">Foo</a>'\n    '<a>'\n    '<a type=\"leaf\">Foo</a>'\n    '<a type=\"leaf\">Foo</a>'\n    '<a>'\n    '<a type=\"leaf\">Foo</a>'\n    '<a>'\n    '<a>'\n    '<a type=\"leaf\">Foo</a>'\n    '<a>'\n    '<a type=\"leaf\">Foo</a>'\n    '<a>'\n    '<a type=\"leaf\">Foo</a>'\n    '<a>'\n    '<a type=\"leaf\">Foo</a>'\n    '<a type=\"leaf\">Foo</a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a type=\"leaf\">Foo</a>'\n    '<a>'\n    '<a>'\n    '<a type=\"leaf\">Foo</a>'\n    '<a>'\n    '<a>'\n    '<a type=\"leaf\">Foo</a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a type=\"leaf\">Foo</a>'\n    '</a>'\n    '</a>'\n    '</a>'\n    '</a>'\n    '</root>') == 11, \"Mixed nesting\"\n    \nassert solution('<root>'\n    '<a>'\n    '<a>'\n    '<a type=\"leaf\">Foo</a>'\n    '<a>'\n    '<a type=\"leaf\">Foo</a>'\n    '<a>'\n    '<a>'\n    '<a type=\"leaf\">Foo</a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a type=\"leaf\">Foo</a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<a>'\n    '<",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('<feed xml:lang=' 'en'><title>HackerRank</title><subtitle lang='en'>Programming challenges</subtitle><link rel='alternate' type='text/html' href='https://hackerrank.com/'><updated>2013-12-25T12:00:00</updated></feed>') == 1\nassert solution('<feed xml:lang=' 'en'><title>HackerRank</title><subtitle lang='en'>Programming challenges</subtitle><link rel='alternate' type='text/html' href='https://hackerrank.com/'><updated>2013-12-25T12:00:00</updated></feed>') == 2\nassert solution('<feed xml:lang=' 'en'><title>HackerRank</title><subtitle lang='en'>Programming challenges</subtitle><link rel='alternate' type='text/html' href='https://hackerrank.com/'><updated>2013-12-25T12:00:00</updated></feed>') == 1\nassert solution('<feed xml:lang=' 'en'><title>HackerRank</title><subtitle lang='en'>Programming challenges</subtitle><link rel='alternate' type='text/html' href='https://hackerrank.com/'><updated>2013-12-25T12:00:00</updated></feed>') == 3\nassert solution('<feed xml:lang=' 'en'><title>HackerRank</title><subtitle lang='en'>Programming challenges</subtitle><link rel='alternate' type='text/html' href='https://hackerrank.com/'><updated>2013-12-25T12:00:00</updated></feed>') == 2\n\n=====Test Case 2=====\n\n=====Test Case 3=====\n\n=====Test Case 4=====\n\n=====Test Case 5=====\n\n=====Test Case 6=====\n\n=====Test Case 7=====\n\n=====Test Case 8=====\n\n=====Test Case 9=====\n\n=====Test Case 10=====\n\n=====Test Case 11=====\n\n=====Test Case 12=====\n\n=====Test Case 13=====\n\n=====Test Case 14=====\n\n=====Test Case 15=====\n\n=====Test Case 16=====\n\n=====Test Case 17=====\n\n=====Test Case 18=====\n\n=====Test Case 19=====\n\n=====Test Case 20=====\n\n=====Test Case 21=====\n\n=====Test Case 22=====\n\n=====Test Case 23=====\n\n=====Test Case 24=====\n\n=====Test Case 25=====\n\n=====Test Case 26=====\n\n=====Test Case 27=====\n\n=====Test Case 28=====\n\n=====Test Case 29=====\n\n=====Test Case 30=====\n\n=====Test Case 31=====\n\n=====Test Case 32=====\n\n=====Test Case 33=====\n\n=====Test Case 34=====\n\n=====Test Case 35=====\n\n=====Test Case 36=====\n\n=====Test Case 37=====\n\n=====Test Case 38=====\n\n=====Test Case 39=====\n\n=====Test Case 40=====\n\n=====Test Case 41=====\n\n=====Test Case 42=====\n\n=====Test Case 43=====\n\n=====Test Case 44=====\n\n=====Test Case 45=====\n\n=====Test Case 46=====\n\n=====Test Case 47=====\n\n=====Test Case 48=====\n\n=====Test Case 49=====\n\n=====Test Case 50=====\n\n=====Test Case 51=====\n\n=====Test Case 52=====\n\n=====Test Case 53=====\n\n=====Test Case 54=====\n\n=====Test Case 55=====\n\n=====Test Case 56=====\n\n=====Test Case 57=====\n\n=====Test Case 58=====\n\n=====Test Case 59=====\n\n=====Test Case 60=====\n\n=====Test Case 61=====\n\n=====Test Case 62=====\n\n=====Test Case 63=====\n\n=====Test Case 64=====\n\n=====Test Case 65=====\n\n=====Test Case 66=====\n\n=====Test Case 67=====\n\n=====Test Case 68=====\n\n=====Test Case 69=====\n\n=====Test Case 70=====\n\n=====Test Case 71=====\n\n=====Test Case 72=====\n\n=====Test Case 73=====\n\n=====Test Case 74=====\n\n=====Test Case 75=====\n\n=====Test Case 76=====\n\n=====Test Case 77=====\n\n=====Test Case 78=====\n\n=====Test Case 79=====\n\n=====Test Case 80=====\n\n=====Test Case 81=====\n\n=====Test Case 82=====\n\n=====Test Case 83=====\n\n=====Test Case 84=====\n\n=====Test Case 85=====\n\n=====Test Case 86=====\n\n=====Test Case 87=====\n\n=====Test Case 88=====\n\n=====Test Case 89=====\n\n=====Test Case 90=====\n\n=====Test Case 91=====\n\n=====Test Case 92=====\n\n=====Test Case 93=====\n\n=====Test Case 94=====\n\n=====Test Case 95=====\n\n=====Test Case 96=====\n\n=====Test Case 97=====\n\n=====Test Case 98=====\n\n=====Test Case 99=====\n\n=====Test Case 100=====\n\n=====Test Case 101=====\n\n=====Test Case 102=====\n\n=====Test Case 103=====\n\n=====Test Case 104=====\n\n=====Test Case 105=====\n\n=====Test Case 106=====\n\n=====Test Case 107=====\n\n=====Test Case 108=====\n\n=====Test Case 109=====\n\n=====Test Case 110=====\n\n=====Test Case 111=====\n\n=====Test Case 112=====\n\n=====Test Case 113=====\n\n=====Test Case 114=====\n\n=====Test Case 115=====\n\n=====Test Case 116=====\n\n=====Test Case 117=====\n\n=====Test Case 118=====\n\n=====Test Case 119=====\n\n=====Test Case 120=====\n\n=====Test Case 121=====\n\n=====Test Case 122=====\n\n=====Test Case 123=====\n\n=====Test Case 124=====\n\n=====Test Case 125=====\n\n=====Test Case 126=====\n\n=====Test Case 127=====\n\n=====Test Case 128=====\n\n=====Test Case 129=====\n\n=====Test Case 130=====\n\n=====Test Case 131=====\n\n=====Test Case 132=====\n\n=====Test Case 133=====\n\n=====Test Case 134=====\n\n=====Test Case 135=====\n\n=====Test Case 136=====\n\n=====Test Case 137=====\n\n=====Test Case 138=====\n\n=====Test Case 139=====\n\n=====Test Case 140=====\n\n=====Test Case 141=====\n\n=====Test Case 142=====\n\n=====Test Case 143=====\n\n=====Test Case 144=====\n\n=====Test Case 145=====\n\n=====Test Case 146=====\n\n=====Test Case 147=====\n\n=====Test Case 148=====\n\n=====Test Case 149=====\n\n=====Test Case 150=====\n\n=====Test Case 151=====\n\n=====Test Case 152=====\n\n=====Test Case 153=====\n\n=====Test Case 154=====\n\n=====Test Case 155=====\n\n=====Test Case 156=====\n\n=====Test Case 157=====\n\n=====Test Case 158=====\n\n=====Test Case 159=====\n\n=====Test Case 160=====\n\n=====Test Case 161=====\n\n=====Test Case 162=====\n\n=====Test Case 163=====\n\n=====Test Case 164=====\n\n=====Test Case 165=====\n\n=====Test Case 166=====\n\n=====Test Case 167=====\n\n=====Test Case 168=====\n\n=====Test Case 169=====\n\n=====Test Case 170",
        "num_ids_2": 160,
        "num_ids_4": 320
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'<feed xml:lang = \"en\"> <title>HackerRank</title> <subtitle lang = \"en\">Programming challenges</subtitle> <link rel = \"alternate\" type = \"text/html\" href = \"http://hackerrank.com/\"/> </feed>'\n) == 1\nassert solution(\n'<feed xml:lang = \"en\"> <title>HackerRank</title> <subtitle lang = \"en\">Programming challenges</subtitle> <link rel = \"alternate\" type = \"text/html\" href = \"http://hackerrank.com/\"/> </feed>'\n) == 1\nassert solution(\n'<feed xml:lang = \"en\"> <title>HackerRank</title> <subtitle lang = \"en\">Programming challenges</subtitle> <link rel = \"alternate\" type = \"text/html\" href = \"http://hackerrank.com/\"/> </feed>'\n) == 1\n=====Notes=====\nInput Format:\nThe first line contains N, the number of lines in the XML document.\nThe next N lines follow containing the XML document.\n\nOutput Format:\nOutput a single line containing the maximum level of nesting in the XML document.\n\nSample TestCase 1\nInput\n5\n<feed xml:lang = \"en\"> <title>HackerRank</title> <subtitle lang = \"en\">Programming challenges</subtitle> <link rel = \"alternate\" type = \"text/html\" href = \"http://hackerrank.com/\"/> </feed>\n<feed xml:lang = \"en\"> <title>HackerRank</title> <subtitle lang = \"en\">Programming challenges</subtitle> <link rel = \"alternate\" type = \"text/html\" href = \"http://hackerrank.com/\"/> </feed>\n<feed xml:lang = \"en\"> <title>HackerRank</title> <subtitle lang = \"en\">Programming challenges</subtitle> <link rel = \"alternate\" type = \"text/html\" href = \"http://hackerrank.com/\"/> </feed>\n<feed xml:lang = \"en\"> <title>HackerRank</title> <subtitle lang = \"en\">Programming challenges</subtitle> <link rel = \"alternate\" type = \"text/html\" href = \"http://hackerrank.com/\"/> </feed>\n<feed xml:lang = \"en\"> <title>HackerRank</title> <subtitle lang = \"en\">Programming challenges</subtitle> <link rel = \"alternate\" type = \"text/html\" href = \"http://hackerrank.com/\"/> </feed>\n\nSample Output\n1\nExplanation\nThe feed tag has a nesting level of 1.\nThe title tag has a nesting level of 1.\nThe subtitle tag has a nesting level of 2.\nHence the maximum nesting level is 1.\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 2\n\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 1\n\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 0\n\n'''\nYou are given a list of  integers,, and a list of  integers,. \nYour task is to compute and print the sum of the elements in  and the sum of the elements in.\n\nInput Format\nThe first line contains the space separated elements of list. \nThe second line contains the space separated elements of list.\n\nBoth lists have no duplicate integer elements.\n\nConstraints\n\nOutput Format\n\nPrint the sum of the elements in  on a single line\nPrint the sum of the elements in  on a single line\n\nSample Input\n\n1 2 3 4 5\n3 2 1 4 5\nSample Output\n\n8\n8\nExplanation\n\nSum of the elements in  is a + b + c + d + e + f + g = 8 and \nSum of the elements in  is 3 + 2 + 1 + 4 + 5 +  +  = 8\n\n'''\n'''\nEXPLANATION:\n=========\n\n1) Xml_1:\n    * Feed contains 1 title and 1 subtitle\n    * title contains 1 title and subtitle\n        * Title is of language English\n        * Subtitle is of language English\n    * Feed contains 1 link\n        * Link contains rel, type, href\n    * Feed contains 1 updated\n        * Updated contains no subelements\n\n2) Xml_2:\n    * Feed contains 2 titles and 1 subtitle\n        * Title is of language English\n        * Subtitle is of language English\n    * Feed contains 1 link\n        * Link contains rel, type, href\n    * Feed contains 1 updated\n        * Updated contains no subelements\n\n3) Xml_3:\n    * Feed contains 2 titles and 1 subtitle\n        * Title is of language English\n        * Subtitle is of language English\n    * Feed contains 1 link\n        * Link contains rel, type, href\n    * Feed contains 1 updated\n        * Updated contains no subelements\n\n=====OUTPUT=====\n8\n8\n\n'''\n",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 1\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 2\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <title>Challenge 1</title>\n    </entry>\n    <entry>\n        <title>Challenge 2</title>\n    </entry>\n</feed>\n''') == 3\n'''\n",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('<feed xml:lang='\">\\n'\\\n    '\\t<title>HackerRank</title>\\n'\\\n    '\\t<subtitle lang=''>Programming challenges</subtitle>\\n'\\\n    '\\t<link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\\n'\\\n    '\\t<updated>2013-12-25T12:00:00</updated>\\n'\\\n    '</feed>') == 3\n=====\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == \"YES\"\nassert solution('+91 8522535608') == \"YES\"\nassert solution('8522535608') == \"YES\"\nassert solution('8522 535608') == \"NO\"",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'YES'\nassert solution('7,9,1') == 'NO'\nassert solution('123,1234') == 'YES'\nassert solution('123,12345') == 'NO'\nassert solution('12,1234') == 'YES'\n\n=====Test Case=====\nInput    \n7\n7,9,1\n123,1234\n8,12,1234\n123,12345\n2,123,1234\n7,123,12345\nInput    \n7\n7,9,1\n123,1234\n8,12,1234\n123,12345\n2,123,1234\n7,123,12345\n8,12,1234\n123,12345\nOutput\nYES\nNO\nYES\nNO\nNO\nYES\n'''\n\n\nimport re\n",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"71754353437\") == 'NO'\nassert solution(\"93547884685\") == 'YES'\nassert solution(\"9354788486\") == 'NO'\nassert solution(\"93547439385\") == 'YES'\nassert solution(\"7354793933\") == 'NO'\n",
        "num_ids_2": 29,
        "num_ids_4": 57
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('89999999999') == 'YES'\nassert solution('89999999991') == 'NO'\nassert solution('89999999989') == 'YES'\n\"\"\"\nimport re\n\nfor _ in range(int(input())):\n    print('YES' if bool(re.match(r'^[789]\\d{9}$', input())) else 'NO')\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"(123) 456-7890\") == \"YES\"\nassert solution(\"(123)456-7890\") == \"NO\"\nassert solution(\"(123)456-7895\") == \"NO\"\n=======\n",
        "num_ids_2": 33,
        "num_ids_4": 49
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('(123) 456-7890') == 'YES'\nassert solution('(123)456-7890') == 'NO'\nassert solution('(123)456-7890') == 'NO'\nassert solution('(123)456-7890') == 'YES'\nassert solution('(123) 456-7890') == 'NO'\n",
        "num_ids_2": 33,
        "num_ids_4": 65
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7881234567') == 'YES'\nassert solution('78987654321') == 'YES'\nassert solution('12345') == 'NO'\nassert solution('77654321987654321987654321') == 'NO'",
        "num_ids_2": 28,
        "num_ids_4": 58
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('73567899') == 'YES'\nassert solution('93427839') == 'YES'\nassert solution('67899876543') == 'NO'\nassert solution('645454545') == 'NO'\n\"\"\"\nimport re",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7293 456 0987') == 'YES'\nassert solution('7293 456') == 'NO'\nassert solution('6794 8888 8777') == 'NO'\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == \"YES\"\nassert solution('897 932-1893') == \"NO\"\nassert solution('849-775-1919') == \"YES\"\nassert solution('938-794-1663') == \"NO\"\nassert solution('824-382-2938') == \"YES\"\n\n=====Test Case 0=====\nInput:\n9\n849-775-1919\n938-794-1663\n824-382-2938\n977-888-7771\n849-775-5815\n849-775-1893\n849-775-5815\n849-775-5815\n849-775-5815\n\nOutput:\nYES\nNO\nYES\nNO\nYES\nYES\nYES\n\nExplanation:\nTest Case 0: The first three mobile numbers are valid. The remaining six numbers are not valid.\n\n>>> code = solution('')\n>>> code == 'YES'\nTrue\n>>> code = solution('897 932-1893')\n>>> code == 'NO'\nTrue\n>>> code = solution('849-775-1919')\n>>> code == 'YES'\nTrue\n>>> code = solution('938-794-1663')\n>>> code == 'NO'\nTrue\n>>> code = solution('824-382-2938')\n>>> code == 'YES'\nTrue\n\nTest Cases Passed: 6/6\n\nTest Suite Time: 0.02 s\n\n=====Test Case 1=====\nInput:\n8\n849-775-1919\n938-794-1663\n824-382-2938\n977-888-7771\n849-775-5815\n849-775-1893\n849-775-5815\n849-775-5815\n849-775-5815\n\nOutput:\nYES\nNO\nYES\nNO\nYES\nYES\nYES\n\nExplanation:\nTest Case 1: The first three mobile numbers are valid. The remaining six numbers are not valid.\n\n>>> code = solution('')\n>>> code == 'YES'\nTrue\n>>> code = solution('897 932-1893')\n>>> code == 'NO'\nTrue\n>>> code = solution('849-775-1919')\n>>> code == 'YES'\nTrue\n>>> code = solution('938-794-1663')\n>>> code == 'NO'\nTrue\n>>> code = solution('824-382-2938')\n>>> code == 'YES'\nTrue\n\nTest Cases Passed: 7/7\n\nTest Suite Time: 0.02 s\n\n=====Test Case 2=====\nInput:\n8\n849-775-1919\n938-794-1663\n824-382-2938\n977-888-7771\n849-775-5815\n849-775-1893\n849-775-5815\n849-775-5815\n849-775-5815\n\nOutput:\nYES\nNO\nYES\nNO\nYES\nYES\nYES\n\nExplanation:\nTest Case 2: The first three mobile numbers are valid. The remaining six numbers are not valid.\n\n>>> code = solution('')\n>>> code == 'YES'\nTrue\n>>> code = solution('897 932-1893')\n>>> code == 'NO'\nTrue\n>>> code = solution('849-775-1919')\n>>> code == 'YES'\nTrue\n>>> code = solution('938-794-1663')\n>>> code == 'NO'\nTrue\n>>> code = solution('824-382-2938')\n>>> code == 'YES'\nTrue\n\nTest Cases Passed: 8/8\n\nTest Suite Time: 0.02 s\n\n=====Test Case 3=====\nInput:\n8\n849-775-1919\n938-794-1663\n824-382-2938\n977-888-7771\n849-775-5815\n849-775-1893\n849-775-5815\n849-775-5815\n849-775-5815\n\nOutput:\nYES\nNO\nYES\nNO\nYES\nYES\nYES\n\nExplanation:\nTest Case 3: The first three mobile numbers are valid. The remaining six numbers are not valid.\n\n>>> code = solution('')\n>>> code == 'YES'\nTrue\n>>> code = solution('897 932-1893')\n>>> code == 'NO'\nTrue\n>>> code = solution('849-775-1919')\n>>> code == 'YES'\nTrue\n>>> code = solution('938-794-1663')\n>>> code == 'NO'\nTrue\n>>> code = solution('824-382-2938')\n>>> code == 'YES'\nTrue\n\nTest Cases Passed: 9/9\n\nTest Suite Time: 0.02 s\n\n=====Test Case 4=====\nInput:\n9\n849-775-1919\n938-794-1663\n824-382-2938\n977-888-7771\n849-775-5815\n849-775-1893\n849-775-5815\n849-775-5815\n849-775-5815\n849-775-5815\n\nOutput:\nYES\nNO\nYES\nNO\nYES\nYES\nYES\nNO\n\nExplanation:\nTest Case 4: The first three mobile numbers are valid. The remaining six numbers are not valid.\n\n>>> code = solution('')\n>>> code == 'YES'\nTrue\n>>> code = solution('897 932-1893')\n>>> code == 'NO'\nTrue\n>>> code = solution('849-775-1919')\n>>> code == 'YES'\nTrue\n>>> code = solution('938-794-1663')\n>>> code == 'NO'\nTrue\n>>> code = solution('824-382-2938')\n>>> code == 'YES'\nTrue\n\nTest Cases Passed: 10/10\n\nTest Suite Time: 0.02 s\n\n=====Test Case 5=====\nInput:\n9\n849-775-1919\n938-794-1663\n824-382-2938\n977-888-7771\n849-775-5815\n849-775-1893\n849-775-5815\n849-775-5815\n849-775-5815\n849-775-5815\n\nOutput:\nYES\nNO\nYES\nNO\nYES\nYES\nYES\nNO\n\nExplanation:\nTest Case 5: The first three mobile numbers are valid. The remaining six numbers are not valid.\n\n>>> code = solution('')\n>>> code == 'YES'\nTrue\n>>> code = solution('897 932-1893')\n>>> code == 'NO'\nTrue\n>>> code = solution('849-775-1919')\n>>> code == 'YES'\nTrue\n>>> code = solution('938-794-1663')\n>>> code == 'NO'\nTrue\n>>> code = solution('824-382-2938')\n>>> code == 'YES'\nTrue\n\nTest Cases Passed: 11/11\n\nTest Suite Time: 0.02 s\n\n=====Test Case 6=====\nInput:\n10\n849-775-1919\n938-794-1663\n824-382-2938\n977-888-7771\n849-775-5815\n849-775-1893\n849-775-5815\n849-775-5815\n849-775-5815\n849-775-5815\n849-775-5815\n849-775-5815\n\nOutput:\nYES\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\n\nExplanation:\nTest Case 6: The first three mobile numbers are valid. The remaining six numbers are not valid.\n\n>>> code = solution('')\n>>> code == 'YES'\nTrue\n>>> code = solution('897 932-1893')\n>>> code == 'NO'\n",
        "num_ids_2": 26,
        "num_ids_4": 58
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 3 5 6\\n3\\n2 3 5') == '2\\n6'\n=====END OF OUTPUT=====\n\n>>> \n===== RESTART: /Users/hsiaotingluv/Desktop/python/20200815 (file).py =====\n5\n1 2 3 5 6\n3\n2 3 5\n2\n3 5\n2\n3 5\n2\n3 5\n2\n3 5\n2\n3 5\n\n=====END OF OUTPUT=====\n\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n\"\n                \"2 4 5 9\\n\"\n                \"4\\n\"\n                \"2 4 11 12\") == \"12 9\"\nassert solution(\"5\\n\"\n                \"2 4 11 12 29\\n\"\n                \"5\\n\"\n                \"2 4 11 12\") == \"11 2 29\"\n\"\"\"\n\nm = int(input())\n\nm = set(map(int, input().split()))\n\nn = int(input())\n\nn = set(map(int, input().split()))\n\noutput = sorted(list(m.difference(n).union(n.difference(m))))\n\nfor item in output:\n    print(item)",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''7\n5 1 2 8 10 7 6 9''') == '''6\n9\n8\n10\n7\n2\n'''\nassert solution('''5\n5\n5\n5\n5\n''') == '''5\n'''\nassert solution('''4\n6\n9\n8\n''') == '''9\n8\n'''\nassert solution('''7\n6\n1 2 3 4 5 6 7''') == '''8\n9\n10\n'''\nassert solution('''8\n4\n9\n2\n5\n''') == '''6\n8\n9\n'''\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 3 4 5\\n9 8 5 6 4') == '8\\n6\\n5'\nassert solution('5\\n1 2 3 4 5\\n9 7 8 5') == '8\\n6\\n7'\nassert solution('5\\n1 2 3 4 5\\n9 7 8 6') == '8\\n6\\n7'\nassert solution('5\\n1 2 3 4 5\\n9 7 8 6\\n0') == '8\\n6\\n7\\n0'\nassert solution('5\\n1 2 3 4 5\\n9 7 8 6\\n
        "num_ids_2": 59,
        "num_ids_4": 123
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 4 6 8 10\\n4\\n2 4 11 12') == '6\\n8\\n11\\n12'\n===========================================\n>>> def solution(inp1,inp2):\n    if type(inp1)==list:\n        inp1=set(inp1)\n    if type(inp2)==list:\n        inp2=set(inp2)\n    return sorted(inp1.union(inp2)-inp1.intersection(inp2))\n\n>>> solution([1,1],[1,1])\n[]\n>>> solution([1,2,2,1],[1,2,3,3])\n[2, 3]\n>>> solution([4,9,5],[9,4,9,8,4])\n[5, 8]\n>>> solution([],[4,5,6])\n[4, 5, 6]\n>>> solution([1,2,2],[1,2,3,3])\n[2, 3]\n>>> solution([1,2,2],[1,2,2,3,3])\n[2, 3]\n>>> solution([4,9,5],[9,4,9,8,4])\n[5, 8]\n>>> solution(\"1\\n2\\n2\\n1\",\"1\\n2\\n3\\n3\")\n[2, 3]\n>>> solution(\"4\\n2 4 6 8 10\\n4\\n2 4 11 12\",\"4\\n2 4 11 12\")\n6\n8\n11\n12\n===========================================\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 4\\n9 8 5 6\") == \"5 6 9\"\nassert solution(\"5\\n2 3 9 10 11\\n4 7 13 8 1\") == \"5 10 8 1\"\nassert solution(\"4\\n-1 -2 -3 -4\\n-9 -8 -7 -6\") == \"-9 -7 -5 -3\"\n\n=====Sample Test Case=====\nSample Input 1\n\n5\n9 8 5 6 4\n9 8 7 13 21\nSample Output 1\n\n5\n6\n7\n8\n9\n10\n11\n13\n21\nExplanation 1\n\nConcept\n\nTestcase 1: The symmetric_difference() function returns a new set, which is a set of values that exist in the set M or N, but not in both.\n\nTestcase 2: The set() function returns a new set with all the items in the iterable parameter. If the iterable parameter is not specified, the set() function returns a new empty set.\n\nTestcase 3: -1 is present in the set -9, -8, -7 and -6 but not in both.\n\nCode\n\na, b = int(raw_input()), set(map(int, raw_input().split()))\nc, d = int(raw_input()), set(map(int, raw_input().split()))\nprint '\\n'.join(map(str, sorted(b.union(c) - b.intersection(c))))\n\n=====END=====\n'''\n\n\n'''\nQ7: Given an integer,, and  space-separated integers as input, create a tuple,, of those  integers. Then compute and print the result of hash(t).\n\nNote: hash() is one of the functions in the __builtins__ module, so it need not be imported.\n\nInput Format\n\nThe first line contains an integer,, denoting the number of elements in the tuple.\nThe second line contains  space-separated integers describing the elements in tuple.\n\nOutput Format\n\nPrint the result of hash(t).\n\nSample Input 0\n\n2\n1 2\nSample Output 0\n\n3713081631934410656\n\n\n\n\n\n\n\n>>>>>>> 9b3f396d6abafba7918d9526fcbec2bdc9039439\n",
        "num_ids_2": 51,
        "num_ids_4": 87
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 6 5\\n3\\n2 3 5\") == \"5 6\"\nassert solution(\"4\\n2 3 6 5\\n3\\n2 3\\n\") == \"2 5 6\"\nassert solution(\"4\\n2 3 6 5\\n3\\n10 20\") == \"10 20\"\nassert solution(\"4\\n2 3 6 5\\n3\\n2 3\\n\") == \"2 6\"\nassert solution(\"4\\n2 3 6 5\\n3\\n2 3 6 5\") == \"2 5 6\"\n",
        "num_ids_2": 52,
        "num_ids_4": 102
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n2 4 5 9\n4\n2 4 11 12''') == '''5\n9\n11\n12'''\n=====Test Case=====\nTest 1\n\nInput\n\n3\n1 2 3\n3\n9 8 5\nOutput\n\n2\n3\n5\n9\n8\n'''\n\nTest 2\n\nInput\n\n4\n2 4 5 9\n4\n2 4 11 12\nOutput\n\n5\n9\n11\n12\n\n\nTest 3\n\nInput\n\n4\n1 2 3 4\n5\n9 8 5 6\nOutput\n\n8\n9\n6\n10\n'''\n\nTest 4\n\nInput\n\n4\n2 4 5 9\n4\n2 4 11 12\nOutput\n\n5\n9\n11\n12\n\n\nTest 5\n\nInput\n\n4\n1 2 3 4\n5\n9 8 5 6\nOutput\n\n8\n9\n6\n10\n\nTest 6\n\nInput\n\n4\n1 2 3 4\n5\n9 8 5 6\nOutput\n\n2\n3\n4\n\nTest 7\n\nInput\n\n4\n1 2 3 4\n5\n9 8 5\nOutput\n\n2\n3\n4\n\nTest 8\n\nInput\n\n4\n1 2 3 4\n5\n9 8\nOutput\n\n2\n3\n4\n\nTest 9\n\nInput\n\n4\n1 2 3 4\n5\n9\nOutput\n\n2\n3\n4\n\nTest 10\n\nInput\n\n4\n1 2 3 4\n5\n9\nOutput\n\n2\n3\n4\n\nTest 11\n\nInput\n\n5\n1 2 3 4 5\n6\n9 8 5\nOutput\n\n8\n9\n5\n\nTest 12\n\nInput\n\n5\n1 2 3 4 5\n6\n9 8\nOutput\n\n2\n3\n4\n5\n6\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n') == '1 3 5 7 9', \"Test 1\"\nassert solution('4\\n1 2 3 9 10') == '7 8', \"Test 2\"\nassert solution('2\\n4 5') == '1 3 5 6 7 8 9', \"Test 3\"\nassert solution('2\\n2 4 6 8 10') == '', \"Test 4\"\nassert solution('5\\n3 4 2 1 6') == '10 9 8 7 6 5 4 3 2', \"Test 5\"\n\n=====Function Description=====\nComplete the solution function below.\n\nsolution( ) should print the symmetric difference integers in ascending order, one per line.\n\nThe first line contains M.\nThe second line contains M space-separated integers.\nThe third line contains N.\nThe fourth line contains N space-separated integers.\n=====Sample Test Cases=====\nInput\n4\n1 2 3 4\n4\n2 4 6 8\nOutput\n3 5 7 9\n\nInput\n5\n1 2 3 4 5\n5\n2 3 4 6 8 10\nOutput\n1 2 6 8 9 10\n\nInput\n5\n1 2 3 4 5\n5\n1 2 3 4 6\nOutput\n2 3 4\n\nInput\n5\n1 2 3 4 5\n5\n2 4 6 8 10\nOutput\n2 4 6 8 10\n\nInput\n7\n1 2 3 4 5 6 7\n7\n1 2 3 4 5 6 7\nOutput\n1 2 3 4 5 6 7\n\nInput\n5\n1 2 3 4 5\n5\n2 4 6 8 10\nOutput\n1 2 3 4 5 6 7 9 10\n\n'''\n",
        "num_ids_2": 42,
        "num_ids_4": 86
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 6 7\\n3\\n2 3 5\") == \"5 7\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ID,MARKS,CLASS,NAME\\n1,91,12,peter\\n2,92,12,paul\\n3,93,14,pauline\\n4,94,12,paul\") == '92.33'\n\n\"\"\"\n\nimport collections\n",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\nprint('Success')\n\n=====Sample Test Cases=====\nTest Case 01\nInput\n5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          80         Peter      6\n\nOutput\nAverage: 72.00\n\nTest Case 02\nInput\n5\nMARKS      CLASS      NAME       ID\n92         2          Calum      1\n82         5          Scott      2\n94         2          Jason      3\n55         8          Glenn      4\n82         2          Fergus     5\n\nOutput\nAverage: 81.00\n'''",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n=====Test Case=====\nSample input:\n    2\n    ID         MARKS      NAME       CLASS     \n    1          97         Raymond    7         \n    2          50         Steven     4         \nSample Output:\n    78.00\n'''\nfrom collections import namedtuple\n\nn = int(input())\nfields = input().split()\n\nStudent = namedtuple('Student', fields)\n\ntotal = 0\nfor _ in range(n):\n    total += int(Student._make(input().split()).MARKS)\nprint('{:.2f}'.format(total / n))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\nID,MARKS,CLASS,NAME\\n1,90,2,JACK 1\\n2,85,1,FRANK 2\\n3,80,3,JESS 3\\n4,75,2,CLAU 4\\n') == '80.00'\n=====Sample Input=====\n5\nID,MARKS,CLASS,NAME\n1,90,2,JACK 1\n2,85,1,FRANK 2\n3,80,3,JESS 3\n4,75,2,CLAU 4\n5,70,3,ADAM 5\n\nSample Output\n81.00\n\nExplanation\nThere are 5 students in this class whose average score is calculated as :\n81.00 = (90+85+80+75+70)/5\n\n=====Test Case 1=====\n>>> solution('5\\nID,MARKS,CLASS,NAME\\n1,90,2,JACK 1\\n2,85,1,FRANK 2\\n3,80,3,JESS 3\\n4,75,2,CLAU 4\\n5,70,3,ADAM 5')\n81.00\n'''\n\n\nimport collections\n",
        "num_ids_2": 69,
        "num_ids_4": 69
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    stdin\n) == '0'\n=========\nimport collections\nn = int(input())\nstudent = collections.namedtuple('student',input().split())\nprint(sum([int(i.MARKS) for i in [student(*input().split()) for j in range(n)]])/n)\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\\n') == '5.00'\n\nassert solution('1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\\n') == '5.00'\n\nassert solution('1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\\n') == '5.00'\n\nassert solution('1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\\n') == '5.00'",
        "num_ids_2": 62,
        "num_ids_4": 124
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\nID\\nMARKS\\nCLASS\\nNAME\\n') == '78.00'\nassert solution('1\\nMARKS\\nCLASS\\nNAME\\nID\\n') == '67.50'\n\n\"\"\"\n\n\n\n\n\n\n\n\n\nimport collections\n\nN = int(input())\ncolumns = collections.namedtuple('Columns','id marks class name')\nstudents = [columns(*input().split()) for _ in range(N)]\nprint('%.2f' %(sum(int(std.marks) for std in students) / N))\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n=====Sample Test Cases=====\nTest Case #1\nInput\n4\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n\nOutput\n91.00\n\nTest Case #2\nInput\n5\nMARKS      CLASS      NAME       ID\n92         2          Calum      1\n82         5          Scott      2\n94         2          Jason      3\n55         8          Glenn      4\n82         2          Fergus     5\n\nOutput\n81.00\n\n\"\"\"\nfrom collections import namedtuple",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == \"78.00\"\nassert solution(\"2\\nMARKS\\nCLASS\\nNAME\\nID\\n\") == \"67.50\"\n\"\"\"\n\nfrom collections import namedtuple\n\nNumOfStudents = int(input())\n\nfields = input().split()\n\nStudent = namedtuple('Student', fields)\n\nsum = 0\nfor _ in range(NumOfStudents):\n    student = Student(*input().split())\n    sum += float(student.MARKS)\n\nprint(\"{:.2f}\".format(sum / NumOfStudents))\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n>>>>>>> 714da7048489406f99c5e);\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 'Not Weird'\nassert solution('3') == 'Weird'\nassert solution('4') == 'Not Weird'\nassert solution('5') == 'Weird'\nassert solution('6') == 'Not Weird'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 'Weird'\nassert solution('2') == 'Not Weird'\nassert solution('3') == 'Weird'\nassert solution('4') == 'Not Weird'\nassert solution('5') == 'Weird'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 'Not Weird'\nassert solution('3') == 'Weird'\nassert solution('4') == 'Not Weird'\nassert solution('5') == 'Weird'\nassert solution('6') == 'Not Weird'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == 'Not Weird'\nassert solution('8') == 'Weird'\nassert solution('15') == 'Weird'\nassert solution('24') == 'Not Weird'\nassert solution('42') == 'Not Weird'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(2) == \"Not Weird\"\nassert solution(15) == \"Weird\"\nassert solution(25) == \"Not Weird\"\nassert solution(26) == \"Weird\"\nassert solution(101) == \"Not Weird\"\n'''\n\n'''\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"Weird\"\nassert solution(\"2\") == \"Not Weird\"\nassert solution(\"3\") == \"Weird\"\nassert solution(\"4\") == \"Not Weird\"\nassert solution(\"5\") == \"Weird\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2) == \"Not Weird\"\nassert solution(14) == \"Weird\"\nassert solution(20) == \"Not Weird\"\nassert solution(24) == \"Weird\"\nassert solution(101) == \"Not Weird\"\n\nSolution\n>>>>>>> 958b3c1cd9a1955b7918d9526fcbec2bdc90394c\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"Weird\"\nassert solution(\"3\") == \"Weird\"\nassert solution(\"4\") == \"Not Weird\"\nassert solution(\"6\") == \"Weird\"\nassert solution(\"8\") == \"Weird\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == 'Not Weird'\nassert solution('3') == 'Weird'\nassert solution('4') == 'Not Weird'\nassert solution('10') == 'Weird'\nassert solution('6') == 'Not Weird'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1) == \"Weird\"\nassert solution(2) == \"Not Weird\"\nassert solution(3) == \"Weird\"\nassert solution(4) == \"Not Weird\"\nassert solution(5) == \"Weird\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n    \"\"\") == 10\nassert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n    \"\"\") == 10\nassert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n    \"\"\") == 10\nassert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n    \"\"\") == 10\nassert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n    \"\"\") == 10\n",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n\"\"\") == 10\nassert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n    </feed>\n\"\"\") == 5\nassert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n    </feed>\n\"\"\") == 0\n\n=====Test Case=====\nYour code should not return an error, i.e. any output should be returned only when the test case passes.\n\n=====Sample Input=====\n3\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\nSample Output\n3\n\nExplanation\nAs the feed is valid, the output is: 3\n\nIf the feed is empty or invalid, the output should be: 0\n\n=====Sample Input=====\n4\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n</feed>\n\nSample Output\n0\n\nExplanation\nThe feed is empty so the output is 0.\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 15
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('<elem1 attr1=\"2\" attr2=\"3\" />') == 6\nassert solution('<elem1 attr1=\"2\" attr2=\"3\" />') == 6\n\"\"\"\n\nimport sys",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('<a></a>') == 0\nassert solution('<a><b/></a>') == 1\nassert solution('<a><b><c/></b></a>') == 2\nassert solution('<a><b><c><d/></c></b></a>') == 3\nassert solution('<a><b><c><d/></c></b><b><c><d/></c></b></a>') == 6\n",
        "num_ids_2": 27,
        "num_ids_4": 69
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 25\nassert solution(\"\"\"\n<feed xmlns='http://www.w3.org/2005/Atom' xml:lang='en'>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <link rel='alternate' type='application/vnd.my-bookmark-list' href='http://www.eecs.berkeley.edu/eecs110/books/EECS110.html'/>\n    <link rel='alternate' type='application/vnd.my-course-list' href='http://www.eecs.berkeley.edu/eecs110/courses/handbook.html'/>\n    <id>tag:hackerrank.com,2013:feed</id>\n    <updated>2013-12-25T12:00:00</updated>\n    <title type='text'>HackerRank</title>\n    <subtitle type='html'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <entry>\n        <id>tag:hackerrank.com,2013:feed,1</id>\n        <updated>2013-12-25T12:00:00</updated>\n        <title>HackerRank</title>\n        <subtitle>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <author>\n            <name>HackerRank</name>\n        </author>\n        <published>2013-12-25T12:00:00</published>\n        <entry>\n            <id>tag:hackerrank.com,2013:feed,1,24</id>\n            <updated>2013-12-25T12:00:00</updated>\n            <title>HTML5 Tag: The future of web design</title>\n            <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n            <link rel='alternate' type='application/vnd.my-bookmark-list' href='http://www.eecs.berkeley.edu/eecs110/books/EECS110.html'/>\n            <link rel='alternate' type='application/vnd.my-course-list' href='http://www.eecs.berkeley.edu/eecs110/courses/handbook.html'/>\n            <author>\n                <name>Grady Ward</name>\n            </author>\n            <published>2013-12-25T12:00:00</published>\n            <summary type='text'>HTML5 Tag: The future of web design</summary>\n        </entry>\n    </entry>\n</feed>\n\"\"\") == 73\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 0\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 15
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('<x><a /><b /><c /></x>') == 6\nassert solution('<x><a /><b /><c>d</c></x>') == 4\nassert solution('<x><a /><b /><c>d</c></x>') == 4\nassert solution('<x><a /><b /></x>') == 0\nassert solution('<x><a /><b /><c /><c /></x>') == 6\n",
        "num_ids_2": 45,
        "num_ids_4": 87
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 5\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 10\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 15\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 15\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 15",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 0\n'''\nTest\nInput\n5\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n'''\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == '5'\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == '1'\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == '5'\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == '1'\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == '5'\n",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 25\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 25\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 25\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 25\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 25\n",
        "num_ids_2": 28,
        "num_ids_4": 48
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1 1\") == \"45.00\"\nassert solution(\"1 2 3 4\") == \"90.00\"\nassert solution(\"1 1 -2 2\") == \"180.00\"\nassert solution(\"-1 -2 3 4\") == \"-180.00\"\n\n=====Sample Test=====\n\"\"\"\n\nfrom math import acos, pi, sqrt\n",
        "num_ids_2": 30,
        "num_ids_4": 63
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4') == '45.00'\nassert solution('5 -3 2') == '131.56'\nassert solution('0 0 0 1') == '90.00'\nassert solution('1 1 1 1') == '60.00'\nassert solution('5 -3 2 -6') == '261.56'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1 1 1') == 45\nassert solution('1 1 2 2') == 90\nassert solution('1 1 1 3') == 60\nassert solution('1 1 6 7') == 126\n\n\"\"\"\n\nimport math",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == \"0.0\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 0 1 1') == 60\nassert solution('0 1 2 3') == 90\nassert solution('1 1 1 3') == 0\nassert solution('1 2 3 4') == 0\n\n=====Sample Input=====\n0 0 1 1\n0 1 2 3\n0 0 1 1\n1 1 1 3\n0 1 2 3\n1 2 3 4\n0 1 2 3\n\n=====Sample Output=====\n90.00\n90.00\n90.00\n90.00\n90.00\n90.00\n\n\"\"\"\nimport math",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 -1 -1 -1') == '180.00'\nassert solution('1 1 1 -1') == '90.00'\nassert solution('1 -1 1 2') == '120.00'\nassert solution('-1 -1 1 2') == '180.00'\nassert solution('2 -1 -1 2') == '90.00'\n\n===========================\n\nWrite a function solution(A, B, C) which returns the area of the triangle ABC. The function should throw a ZeroDivisionError if the inputs A, B, C are such that A+B or A+C or B+C are zero.\n\nNote: You should not be using the math.sqrt or math.sin functions.\n\nFor the sake of convenience, here is the list of the trigonometric functions you will need to use:\n\nsine: math.sin(math.radians(A))\ncosine: math.cos(math.radians(A))\ntangent: math.tan(math.radians(A))\n\n=============================================================\n\nWrite a function solution(A, B, C) which returns the area of the triangle ABC. The function should throw a ZeroDivisionError if the inputs A, B, C are such that A+B or A+C or B+C are zero.\n\nNote: You should not be using the math.sqrt or math.sin functions.\n\nFor the sake of convenience, here is the list of the trigonometric functions you will need to use:\n\nsine: math.sin(math.radians(A))\ncosine: math.cos(math.radians(A))\ntangent: math.tan(math.radians(A))\n\n=============================================================\n\nWrite a function solution(A, B, C) which returns the area of the triangle ABC. The function should throw a ZeroDivisionError if the inputs A, B, C are such that A+B or A+C or B+C are zero.\n\nNote: You should not be using the math.sqrt or math.sin functions.\n\nFor the sake of convenience, here is the list of the trigonometric functions you will need to use:\n\nsine: math.sin(math.radians(A))\ncosine: math.cos(math.radians(A))\ntangent: math.tan(math.radians(A))\n\n=============================================================\n",
        "num_ids_2": 34,
        "num_ids_4": 67
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '0.0 1.0 2.0') == '60.00', f'Expected {60.0}, got {solution(\"0.0 1.0 2.0\")}'\nassert solution(\n    '1.0 2.0 3.0') == '90.00', f'Expected {90.0}, got {solution(\"1.0 2.0 3.0\")}'\nassert solution(\n    '2.0 3.0 4.0') == '180.00', f'Expected {180.0}, got {solution(\"2.0 3.0 4.0\")}'\nassert solution(\n    '1.0 1.0 1.0') == '0.00', f'Expected {0.0}, got {solution(\"1.0 1.0 1.0\")}'\nassert solution(\n    '0.0 0.0 0.0') == '0.00', f'Expected {0.0}, got {solution(\"0.0 0.0 0.0\")}'\n\"\"\"\nimport sys\nfrom typing import Tuple, List, Union\n\n\nclass Vector:\n    def __init__(self, coordinates: Tuple[float,...]):\n        self.coordinates = coordinates\n\n    def __len__(self) -> int:\n        return len(self.coordinates)\n\n    def __str__(self) -> str:\n        return f'<{\", \".join(map(str, self.coordinates))}>'\n\n    def __repr__(self) -> str:\n        return f'Vector({self.coordinates})'\n\n    def __getitem__(self, idx: int) -> float:\n        return self.coordinates[idx]\n\n    def __add__(self, other: 'Vector') -> 'Vector':\n        return Vector(tuple(a + b for a, b in zip(self.coordinates, other.coordinates)))\n\n    def __sub__(self, other: 'Vector') -> 'Vector':\n        return Vector(tuple(a - b for a, b in zip(self.coordinates, other.coordinates)))\n\n    def __mul__(self, other: float) -> 'Vector':\n        if not isinstance(other, (int, float)):\n            raise TypeError('Can only multiply a vector by a number')\n        return Vector(tuple(c * other for c in self.coordinates))\n\n    def __rmul__(self, other: float) -> 'Vector':\n        if not isinstance(other, (int, float)):\n            raise TypeError('Can only multiply a vector by a number')\n        return self * other\n\n    def __neg__(self) -> 'Vector':\n        return Vector(tuple(-c for c in self.coordinates))\n\n\nclass Point(Vector):\n    def __init__(self, coordinates: Tuple[float,...]):\n        super().__init__(coordinates)\n\n    def __sub__(self, other: 'Point') -> 'Vector':\n        return super().__sub__(other)\n\n    def __add__(self, other: 'Point') -> 'Point':\n        return Point(tuple(a + b for a, b in zip(self.coordinates, other.coordinates)))\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1.1 2.1 3.1 4.1') == 45.0\n=====End of Output=====\nYou are given four points A, B, C and D in a 3-dimensional Cartesian coordinate system. You are required to print the angle between the plane made by the points A, B, C and B, C, D in degrees(not radians). Let the angle be PHI.\nCos(PHI) = (X.Y)/|X|Y| where X = AB x BC and Y = BC x CD.\nHere, X.Y means the dot product of X and Y, and AB x BC means the cross product of vectors AB and BC. Also, AB = B-A.\n\n=====Problem Statement=====\nYou are given four points A, B, C and D in a 3-dimensional Cartesian coordinate system. You are required to print the angle between the plane made by the points A, B, C and B, C, D in degrees(not radians). Let the angle be PHI.\nCos(PHI) = (X.Y)/|X|Y| where X = AB x BC and Y = BC x CD.\nHere, X.Y means the dot product of X and Y, and AB x BC means the cross product of vectors AB and BC. Also, AB = B-A.\n\n=====Input Format=====\nOne line of input containing the space separated floating number values of the and coordinates of a point.\n\n=====Output Format=====\nOutput the angle correct up to two decimal places.\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 1 0 1') == 45\nassert solution('1 -1 -1 1') == 90\nassert solution('1 2 3 4') == 56.52\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1 1') == '0.0'\nassert solution('1 2 3 4') == '90.0'\nassert solution('1 2 3 2') == '45.0'",
        "num_ids_2": 29,
        "num_ids_4": 44
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 abc iu') == 3\nassert solution('2 ab abc abd abf abj') == 2\nassert solution('3 ab abc abd abf abj abk') == 1\nassert solution('4 ab abc abd abf abj abk abl') == 0\nassert solution('5 ab abc abd abf abj abk abl abm') == 0\n\nprint(solution('1 abc iu'))\n\n==:\n",
        "num_ids_2": 29,
        "num_ids_4": 68
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 0\nassert solution('n') == 2\nassert solution('man') == 2\nassert solution('many') == 1\nassert solution('I') == 1\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2\nhepxx\nbob''') == '3'\nassert solution('''4\nworld\nworld\nhello\nworld''') == '4'\nassert solution('''10\nhello\nmy\nname\nis\nsarah''') == '1'\nassert solution('''3\nwhat\nis\nyour\nname''') == '1'\nassert solution('''2\nbatman\nrobin''') == '2'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 abc') == '1'\nassert solution('2 ab abc') == '1'\nassert solution('3 ab abc') == '2'\nassert solution('1 y') == '1'\nassert solution('4 y') == '3'\n",
        "num_ids_2": 25,
        "num_ids_4": 49
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('qwertyuiopasdfghjklzxcvbnm') == 8, f'Expected 8, got {solution(\"qwertyuiopasdfghjklzxcvbnm\")}'\nassert solution('qwertyuioasdfghjklzxcvbnm') == 6, f'Expected 6, got {solution(\"qwertyuioasdfghjklzxcvbnm\")}'\nassert solution('qwertyuiopasdfghjklzxcvbnm') == 8, f'Expected 8, got {solution(\"qwertyuiopasdfghjklzxcvbnm\")}'\nassert solution('qwertyuiopasdfghjklzxcvbnm') == 8, f'Expected 8, got {solution(\"qwertyuiopasdfghjklzxcvbnm\")}'\nassert solution('qwertyuiopasdfghjklzxcvbnm') == 8, f'Expected 8, got {solution(\"qwertyuiopasdfghjklzxcvbnm\")}'\n=====END OF CONTEXT=====\n\"\"\"\n",
        "num_ids_2": 104,
        "num_ids_4": 208
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\nhello\\nbee') == 2\nassert solution('2\\nhippo\\nqq') == 1\nassert solution('2\\nbee\\nfly') == 0\nassert solution('2\\nllh\\neee') == 0\nassert solution('2\\n') == 0\n\n=============\nProblem Statement\n=============\nThe ancient Egyptians used to express fractions as a sum of several terms where each numerator is one. For example, 4 / 13 can be represented as 1 / 4 + 1 / 18 + 1 / 468.\n\nConsider an Egyptian fraction  where  and.\n\nYour task is to find the smallest denominator d, such that  is.\n\nInput Format\n\nThe input begins with the numerator  and denominator  (the product of the numerator and denominator being ).\n\nAfter this,  lines of input containing the numerators and denominators of terms of  are given.\n\nConstraints\n\nOutput Format\n\nPrint the value of  in a single line.\n\nSample Input\n\n4 / 13\n1 / 4\n1 / 18\n1 / 468\nSample Output\n\n468\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 59
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aretheyhere\") == \"2\"\nassert solution(\"hello\") == \"1\"\nassert solution(\"twelve\") == \"1\"\nassert solution(\"sixteen\") == \"1\"\nassert solution(\"potato\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nhello\\nplay\\nworld\\nfoo\\n\") == 10\nassert solution(\"7\\npalindrome\\nnoon\\nnear\\ntrue\\nrate\\nship\\nshark\\n\") == 5\nassert solution(\"10\\nabracadabra\\ndabra\\nacadabra\\nacadabrabra\\nabacdabrabracadabra\\nacbacdabrabracadabra\\nacabadbacdabrabracadabra\\n\") == 10\n\n=====Test Data=====\nYou can check your solution on some test cases of varying difficulty, but we will ask you to solve this problem in your head:\n\nTest Case 1\n\nIf you can correctly solve this problem by reading the input from the locked stub code, your score will be 10.\n\nTest Case 2\n\nYou can correctly solve this problem by reading the input from the locked stub code, but your score will be 5.\n\nTest Case 3\n\nYou can correctly solve this problem by reading the input from the locked stub code, but your score will be 0.\n\nTest Case 4\n\nYou can correctly solve this problem by reading the input from the locked stub code, but your score will be 15.\n\nTest Case 5\n\nYou can correctly solve this problem by reading the input from the locked stub code, but your score will be 10.\n\nTest Case 6\n\nYou can correctly solve this problem by reading the input from the locked stub code, but your score will be 0.\n\nTest Case 7\n\nYou can correctly solve this problem by reading the input from the locked stub code, but your score will be 20.\n\nTest Case 8\n\nYou can correctly solve this problem by reading the input from the locked stub code, but your score will be 10.\n\nTest Case 9\n\nYou can correctly solve this problem by reading the input from the locked stub code, but your score will be 5.\n\nTest Case 10\n\nYou can correctly solve this problem by reading the input from the locked stub code, but your score will be 0.\n\nYou will be tested on a variety of standard input texts and your program must work correctly for those test cases.\n\nYou can check your score on the given template code template.\n\n\n=====Desired Output=====\nYou will be graded on the score achieved by your program on the given test cases.\n\nYour program must output the correct score for test cases with varying levels of difficulty.\n\nYou cannot import any other modules whatsoever\n\n=====Grading=====\nThis challenge is worth 20 points (see syllabus).\n\nSubmit your code on EdX as a zip file and the grades for all test cases will be available upon submission.\n\nIf you have a question about your score, please do not hesitate to contact us.\n\nWe will make sure that we follow by this order:\n1. Communicate any questions you may have to your instructor.\n2. Communicate with you about the progress on the score you have obtained.\n3. Communicate with you about the grades you are going to be received.\n\nYou must have finished the template at least once before Monday, November 23, 2020 at 11:59 PM EST.\n\nFailure to follow the above order will result in an instant forfeit of the challenge.\n\nIf you have any questions at all, please email us at support@edx.org\n\nTo help us diagnose any issues you encounter, please fill out the form: https://forms.edx.org/u/x/4d9b8440-4d5e-11e9-8b2f-1aa0ffa8d5f6/form/iWxE3\n\nRemember that this is a homework. You are expected to explore and try to solve it on your own, but you have not necessarily to show your work. If you have solved the problem on your own, you can submit the solution by sending a link to your Github repository.\n\"\"\"\n\nimport fileinput",
        "num_ids_2": 56,
        "num_ids_4": 126
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 abc') == 1\nassert solution('2 ab abc') == 2\nassert solution('2 ab abc 3') == 3\nassert solution('2 2 ab abc 3') == 5",
        "num_ids_2": 21,
        "num_ids_4": 46
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 abc 3') == '1 2', 'First'\nassert solution('2 ab ab ab ab') == '2', 'Second'\nassert solution('3 ab ab ab ab ab') == '3', 'Third'\nassert solution('4 ab ab ab ab ab') == '1', 'Fourth'\nassert solution('5 a ab ab ab ab ab') == '3', 'Fifth'\n",
        "num_ids_2": 34,
        "num_ids_4": 70
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('X') == False\nassert solution('XL') == True\nassert solution('CDXXI') == True\nassert solution('CDXXXVIIII') == True\nassert solution('MMMDCCCLXXXVIIII') == True\n",
        "num_ids_2": 16,
        "num_ids_4": 37
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('X') == False\nassert solution('XL') == True\nassert solution('CDXLIII') == True\nassert solution('MMMCMXCIX') == True\nassert solution('CDXCIX') == False\n",
        "num_ids_2": 16,
        "num_ids_4": 38
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('X') == False\nassert solution('XX') == False\nassert solution('IX') == True\nassert solution('IV') == True\nassert solution('XLIX') == True\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('X') == False\nassert solution('XX') == False\nassert solution('IX') == True\nassert solution('IV') == True\nassert solution('XIX') == False\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('XXI') == True\nassert solution('CDXXI') == False\nassert solution('I') == True\nassert solution('MMMCMLXXXVIII') == True\nassert solution('MMMXXXVIII') == False\n\n=====Test Case 0=====\nX\n\n=====Test Case 1=====\nI\n\n=====Test Case 2=====\nI\n\n=====Test Case 3=====\nI\n\n=====Test Case 4=====\nI\n\n=====Test Case 5=====\nI\n\n=====Test Case 6=====\nI\n\n=====Test Case 7=====\nII\n\n=====Test Case 8=====\nII\n\n=====Test Case 9=====\nIII\n\n=====Test Case 10=====\nIII\n\n=====Test Case 11=====\nIV\n\n=====Test Case 12=====\nIV\n\n=====Test Case 13=====\nV\n\n=====Test Case 14=====\nV\n\n=====Test Case 15=====\nV\n\n=====Test Case 16=====\nV\n\n=====Test Case 17=====\nV\n\n=====Test Case 18=====\nV\n\n=====Test Case 19=====\nV\n\n=====Test Case 20=====\nV\n\n=====Test Case 21=====\nV\n\n=====Test Case 22=====\nV\n\n=====Test Case 23=====\nV\n\n=====Test Case 24=====\nV\n\n=====Test Case 25=====\nV\n\n=====Test Case 26=====\nV\n\n=====Test Case 27=====\nV\n\n=====Test Case 28=====\nV\n\n=====Test Case 29=====\nV\n\n=====Test Case 30=====\nV\n\n=====Test Case 31=====\nV\n\n=====Test Case 32=====\nV\n\n=====Test Case 33=====\nV\n\n=====Test Case 34=====\nV\n\n=====Test Case 35=====\nV\n\n=====Test Case 36=====\nV\n\n=====Test Case 37=====\nV\n\n=====Test Case 38=====\nV\n\n=====Test Case 39=====\nV\n\n=====Test Case 40=====\nV\n\n=====Test Case 41=====\nV\n\n=====Test Case 42=====\nV\n\n=====Test Case 43=====\nV\n\n=====Test Case 44=====\nV\n\n=====Test Case 45=====\nV\n\n=====Test Case 46=====\nV\n\n=====Test Case 47=====\nV\n\n=====Test Case 48=====\nV\n\n=====Test Case 49=====\nV\n\n=====Test Case 50=====\nV\n\n=====Test Case 51=====\nV\n\n=====Test Case 52=====\nV\n\n=====Test Case 53=====\nV\n\n=====Test Case 54=====\nV\n\n=====Test Case 55=====\nV\n\n=====Test Case 56=====\nV\n\n=====Test Case 57=====\nV\n\n=====Test Case 58=====\nV\n\n=====Test Case 59=====\nV\n\n=====Test Case 60=====\nV\n\n=====Test Case 61=====\nV\n\n=====Test Case 62=====\nV\n\n=====Test Case 63=====\nV\n\n=====Test Case 64=====\nV\n\n=====Test Case 65=====\nV\n\n=====Test Case 66=====\nV\n\n=====Test Case 67=====\nV\n\n=====Test Case 68=====\nV\n\n=====Test Case 69=====\nV\n\n=====Test Case 70=====\nV\n\n=====Test Case 71=====\nV\n\n=====Test Case 72=====\nV\n\n=====Test Case 73=====\nV\n\n=====Test Case 74=====\nV\n\n=====Test Case 75=====\nV\n\n=====Test Case 76=====\nV\n\n=====Test Case 77=====\nV\n\n=====Test Case 78=====\nV\n\n=====Test Case 79=====\nV\n\n=====Test Case 80=====\nV\n\n=====Test Case 81=====\nV\n\n=====Test Case 82=====\nV\n\n=====Test Case 83=====\nV\n\n=====Test Case 84=====\nV\n\n=====Test Case 85=====\nV\n\n=====Test Case 86=====\nV\n\n=====Test Case 87=====\nV\n\n=====Test Case 88=====\nV\n\n=====Test Case 89=====\nV\n\n=====Test Case 90=====\nV\n\n=====Test Case 91=====\nV\n\n=====Test Case 92=====\nV\n\n=====Test Case 93=====\nV\n\n=====Test Case 94=====\nV\n\n=====Test Case 95=====\nV\n\n=====Test Case 96=====\nV\n\n=====Test Case 97=====\nV\n\n=====Test Case 98=====\nV\n\n=====Test Case 99=====\nV\n\n=====Test Case 100=====\nV\n\n=====Test Case 101=====\nV\n\n=====Test Case 102=====\nV\n\n=====Test Case 103=====\nV\n\n=====Test Case 104=====\nV\n\n=====Test Case 105=====\nV\n\n=====Test Case 106=====\nV\n\n=====Test Case 107=====\nV\n\n=====Test Case 108=====\nV\n\n=====Test Case 109=====\nV\n\n=====Test Case 110=====\nV\n\n=====Test Case 111=====\nV\n\n=====Test Case 112=====\nV\n\n=====Test Case 113=====\nV\n\n=====Test Case 114=====\nV\n\n=====Test Case 115=====\nV\n\n=====Test Case 116=====\nV\n\n=====Test Case 117=====\nV\n\n=====Test Case 118=====\nV\n\n=====Test Case 119=====\nV\n\n=====Test Case 120=====\nV\n\n=====Test Case 121=====\nV\n\n=====Test Case 122=====\nV\n\n=====Test Case 123=====\nV\n\n=====Test Case 124=====\nV\n\n=====Test Case 125=====\nV\n\n=====Test Case 126=====\nV\n\n=====Test Case 127=====\nV\n\n=====Test Case 128=====\nV\n\n=====Test Case 129=====\nV\n\n=====Test Case 130=====\nV\n\n=====Test Case 131=====\nV\n\n=====Test Case 132=====\nV\n\n=====Test Case 133=====\nV\n\n=====Test Case 134=====\nV\n\n=====Test Case 135=====\nV\n\n=====Test Case 136=====\nV\n\n=====Test Case 137=====\nV\n\n=====Test Case 138=====\nV\n\n=====Test Case 139=====\nV\n\n=====Test Case 140=====\nV\n\n=====Test Case 141=====\nV\n\n=====Test Case 142=====\nV\n\n=====Test Case 143=====\nV\n\n=====Test Case 144=====\nV\n\n=====Test Case 145=====\nV\n\n=====Test Case 146=====\nV\n\n=====Test Case 147=====\nV\n\n=====Test Case 148=====\nV\n\n=====Test Case 149=====\nV\n\n=====Test Case 150=====\nV\n\n=====Test Case 151=====\nV\n\n=====Test Case 152=====\nV\n\n=====Test Case 153=====\nV\n\n=====Test Case 154=====\nV\n\n=====Test Case 155=====\nV\n\n=====Test Case 156=====\nV\n\n=====Test Case 157=====\nV\n\n=====Test Case 158=====\nV\n\n=====Test Case 159=====\nV\n\n=====Test Case 160=====\nV\n\n=====Test Case 161=====\nV\n\n=====Test Case 162=====\nV\n\n=====Test Case 163=====\nV\n\n=====Test Case 164=====\nV\n\n=====Test Case 165=====\nV\n\n=====Test Case 166=====\nV\n\n=====Test Case 167=====\n",
        "num_ids_2": 19,
        "num_ids_4": 40
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"I\") == True\nassert solution(\"II\") == True\nassert solution(\"III\") == True\nassert solution(\"IV\") == True\nassert solution(\"IX\") == True\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('X') == False\nassert solution('XX') == False\nassert solution('IX') == True\nassert solution('IV') == True\nassert solution('XL') == True\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"III\") == True\nassert solution(\"IV\") == True\nassert solution(\"IX\") == True\nassert solution(\"LVIII\") == True\nassert solution(\"MCMXCIV\") == True\n",
        "num_ids_2": 16,
        "num_ids_4": 33
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('I') == True\nassert solution('V') == True\nassert solution('X') == True\nassert solution('L') == True\nassert solution('C') == True\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('X') == False\nassert solution('XL') == True\nassert solution('CDXLIII') == True\nassert solution('MMMCMXCIX') == True\nassert solution('i') == False\n",
        "num_ids_2": 16,
        "num_ids_4": 38
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n07895462130\n919875641230\n9195969878''') == '''07895462130\n9195969878\n919875641230'''\n\nassert solution('''2\n91734282458954433\n919875641230''') == '''91734282458954433\n919875641230'''\n\nassert solution('''1\n91734282458954433''') == '''91734282458954433'''\n\nassert solution('''0\n+91734282458954433''') == '''+91734282458954433'''\n\nassert solution('''1\n0''') == '''0'''",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 98675309\") == \"98675309\"\nassert solution(\"926389715\") == \"986370926389715\"\nassert solution(\"926389715 098647075\") == \"986370926389715 98670 098647075\"\nassert solution(\"07827302946 077827302946\") == \"07827302946 077827302946\"\nassert solution(\"94540984915 95640984915\") == \"985640984915 95640984915\"\n",
        "num_ids_2": 36,
        "num_ids_4": 101
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('07895462130') == '+91 78954 62131'\n\nassert solution('919875641230') == '+91 91988 5641230'\n\nassert solution('9195969878') == '+91 91959 69878'\n\nassert solution('01834560987') == '+1 834 56 0987'\n\nassert solution('0183456098') == '+1 834 56 098'",
        "num_ids_2": 42,
        "num_ids_4": 80
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0987654321') == '+91 7865 4321'\nassert solution('9123456789') == '+91 9123 4567'\nassert solution('91234567890123456789') == '+91 9123 4567 8901 2345 6789'\nassert solution('9123456789012') == '+91 9123 4567 8901 2'\nassert solution('912345678901') == '+91 9123 4567 8901'\n",
        "num_ids_2": 38,
        "num_ids_4": 91
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 5 18 56 1 05 35 5 75 81 31 25\") == \n\"\"\"\n9 5 18 56 1 05 35 5 75 81 31 25\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('+91 8866 7288 8') == '+91 8866 7288 8'\nassert solution('91 8866 7288 8') == '+91 91 8866 7288 8'\nassert solution('91 8866 7288 8') == '+91 91 8866 7288 8'\nassert solution('91 8866 7288 8') == '+91 91 8866 7288 8'\nassert solution('91 8866 7288 8') == '+91 91 8866 7288 8'\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('+91 99999 88888') == '+91 99999 88888'\nassert solution('97766 88887') == '+91 97766 88887'\nassert solution('7766 88887') == '+91 97766 88887'\nassert solution('7766 88887') == '+91 97766 88887'\n\n=====Solution=====\n",
        "num_ids_2": 44,
        "num_ids_4": 86
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''9\n0 55 4 5 6 7 8\n0 12 3 5 14 21 22\n0 81 0 7 9 11''') == '''+91 055 4 5 6 7 8\n+91 012 3 5 14 21 22\n+91 81 0 7 9 11'''\nassert solution('''9\n0 55 4 5 6 7 8\n0 12 3 5 14 21 22\n0 81 0 7 9 11''') == '''+91 055 4 5 6 7 8\n+91 012 3 5 14 21 22\n+91 81 0 7 9 11'''\n'''\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"9\n97674223\n1195524421\n862543279\n5694325664\n5635555556\n56752\n456987456\n223569879\n9198756412\"\"\") == \"\"\"+91 97674223\n+91 1195524421\n+91 862543279\n+91 5694325664\n+91 5635555556\n+91 56752\n+91 456987456\n+91 223569879\n+91 9198756412\"\"\"\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9\\n7\\n5\\n3\\n8\\n5\\n7\\n9') == '''+91 7865 3412\n+91 7862 3454\n+91 7865 3454\n+91 7862 3412\n+91 7865 3412\n+91 7862 3454\n+91 7865 3412'''\n\nassert solution('9\\n8\\n6\\n7\\n5\\n3\\n8\\n2\\n1') == '''+91 7865 3412\n+91 7862 3454\n+91 7865 3412\n+91 7862 3412\n+91 7865 3412\n+91 7862 3454\n+91 7865 3412\n+91 7865 3412\n+91 7865 3412\n+91 7865 3412\n+91 7862 3412\n+91 7862 3454\n+91 7865 3412'''\n\nassert solution('9\\n7\\n5\\n3\\n8\\n5\\n7\\n9') == '''+91 7865 3412\n+91 7862 3454\n+91 7865 3412\n+91 7862 3412\n+91 7862 3412\n+91 7862 3454\n+91 7865 3412\n+91 7862 3412\n+91 7865 3412\n+91 7862 3412\n+91 7862 3412\n+91 7862 3454\n+91 7865 3412'''\n\nassert solution('9\\n8\\n6\\n7\\n5\\n3\\n8\\n2\\n1') == '''+91 7865 3412\n+91 7862 3454\n+91 7865 3412\n+91 7862 3412\n+91 7862 3412\n+91 7862 3412\n+91 7862 3454\n+91 7865 3412\n+91 7862 3412\n+91 7862 3412\n+91 7862 3412\n+91 7862 3412\n+91 7862 3454\n+91 7865 3412'''\n\nassert solution('9\\n7\\n5\\n3\\n8\\n5\\n7\\n9') == '''+91 7865 3412\n+91 7862 3454\n+91 7865 3412\n+91 7862 3412\n+91 7862 3412\n+91 7862 3454\n+91 7865 3412\n+91 7862 3412\n+91 7862 3412\n+91 7862 3412\n+91 7862 3412\n+91 7862 3454\n+91 7865 3412'''",
        "num_ids_2": 75,
        "num_ids_4": 150
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\nArjun 70\\nMalika 52\\nMalika' ) == '52.00'\n\nprint(solution(stdin) )\n=====Explanation=====\n>>>Input:\n3\nMalika\nMalika\nMalika\nArjun\nMalika\nquery_name = 'Malika'\n>>>Output:\n52.00\n>>>Input:\n3\nMalika\nMalika\nMalika\nArjun\nMalika\nMalika\nquery_name = 'Malika'\n>>>Output:\n52.00\n\"\"\"\nimport ast\nfor _ in range(int(input())):\n    name, *marks = input().split()\n    print(f'{(sum(list(map(lambda m: int(m), marks))) / 3):.2f}')\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 4 5\\n1 2') == '5.00'\n\"\"\"\nimport numpy as np\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nHelo World\\nPreethi 1 2 3\\nPreethi\") == \"The average marks of student Preethi is 2.00\"\nassert solution(\"2\\nHelo World\\nPreethi 1 2\\nPreethi\") == \"The average marks of student Preethi is 1.50\"\n\n=====Test Case 1=====\nInput\n\n2\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 2.00\n\n=====Test Case 2=====\nInput\n\n2\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 1.50\n\n=====Test Case 3=====\nInput\n\n2\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 1.50\n\n=====Test Case 4=====\nInput\n\n2\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 1.50\n\n=====Test Case 5=====\nInput\n\n4\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 2.00\n\n=====Test Case 6=====\nInput\n\n2\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 1.50\n\n=====Test Case 7=====\nInput\n\n2\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 1.50\n\n=====Test Case 8=====\nInput\n\n4\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 2.00\n\n=====Test Case 9=====\nInput\n\n2\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 1.50\n\n=====Test Case 10=====\nInput\n\n2\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 1.50\n\n=====Test Case 11=====\nInput\n\n2\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 1.50\n\n=====Test Case 12=====\nInput\n\n4\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 2.00\n\n=====Test Case 13=====\nInput\n\n2\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 1.50\n\n=====Test Case 14=====\nInput\n\n2\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 1.50\n\n=====Test Case 15=====\nInput\n\n4\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 2.00\n\n=====Test Case 16=====\nInput\n\n2\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 1.50\n\n=====Test Case 17=====\nInput\n\n2\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 1.50\n\n=====Test Case 18=====\nInput\n\n4\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 2.00\n\n=====Test Case 19=====\nInput\n\n2\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 1.50\n\n=====Test Case 20=====\nInput\n\n2\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 1.50\n\n=====Test Case 21=====\nInput\n\n2\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 1.50\n\n=====Test Case 22=====\nInput\n\n4\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 2.00\n\n=====Test Case 23=====\nInput\n\n2\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 1.50\n\n=====Test Case 24=====\nInput\n\n4\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 2.00\n\n=====Test Case 25=====\nInput\n\n2\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 1.50\n\n=====Test Case 26=====\nInput\n\n2\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 1.50\n\n=====Test Case 27=====\nInput\n\n4\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 2.00\n\n=====Test Case 28=====\nInput\n\n2\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 1.50\n\n=====Test Case 29=====\nInput\n\n2\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 1.50\n\n=====Test Case 30=====\nInput\n\n2\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 1.50\n\n=====Test Case 31=====\nInput\n\n2\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 1.50\n\n=====Test Case 32=====\nInput\n\n2\nHelo World\nPreethi 1 2 3\nPreethi\nOutput\n\nThe average of the marks obtained by the particular student correct to 2 decimal places is 1.50\n\n=====Test Case 33=====\nInput\n\n4\nHelo World\nPreethi 1 2 3\nPreethi\nOutput",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nArjun 70 70 70 Arjun\\nMalika 52 60 62 Malika') == '56.00'\nassert solution('3\\nHarsh 25 26.5 28 Harsh\\nAnurag 26 28 30 Anurag') == '26.50'\n\nInput Format:\nThe first line contains an integer, n, the number of students. \nThe 2n subsequent lines describe each student over 2 lines. \n- The first line contains a student's name. \n- The second line contains their marks.\n\nOutput Format:\nPrint the averages of all students on separate lines.\n\nEach line should contain the name followed by the average marks obtained. The name should be printed in the same order as the students' names appeared in the input.\n\nSample Input:\n2\nHarsh 25 26.5 28 Harsh\nAnurag 26 28 30 Anurag\nHarsh\n\nSample Output:\nHarsh 26.50\nAnurag 26.50\n\nExplanation:\nThere are 2 students in this class whose names and grades are assembled to build the following list:\nStudent Names: Harsh Anurag\nStudent Grades: 25 26.5 28\nThe average grade of Harsh is (25+26.5+28)/3 = 26.5\nThe average grade of Anurag is (26+26.5+30)/3 = 26.5\n\"\"\"\n\nimport sys\nfrom collections import OrderedDict",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(raw_input()) == expected_output\n\n\"\"\"\nimport math\nn = int(input())\n\nstudent_marks = {}\nfor _ in range(n):\n    name, *line = input().split()\n    scores = list(map(float, line))\n    student_marks[name] = scores\n\nquery_name = input()\nprint(\"%.2f\" % (sum(student_marks[query_name]) / len(student_marks[query_name])))",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\nOjas\\t4\\t5\\t4\\nAkans\\t9\\t5\\t3\\nKonstantinos\\t3\\t3\\t3\\n') == 'Ojas\\t4.67'\n\n=====Sample Test Case=====\nNot Required\n\n=====Note=====\nYou must complete the function specified by the question. The other functions have already been implemented for you, so don't worry if your solution is missing them.\n\nThis is one of the few questions where the tester will specifically test your type declaration, using your declared type instead of a flexible type such as Integer or List.\n\nDo not remove lines that check the result of your program.\n\n'''",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\nEeyore\\n74\\nVictory\\n90\\n86\\n90\\n94\\n83\\n78\") == \"88.50\"\n=====END=====\n\n'''\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\nHarsh 25 26.5 28\\nAnurag 26 28 30\\nHarshal 26 26.5 26\\nHarsh 25 26.5 28\") == '26.50'\nassert solution(\"5\\nHarsh 25 26.5 28\\nAnurag 26 28 30\\nHarshal 26 26.5 26\\nHarsh 25 26.5 28\") == '26.50'\nassert solution(\"5\\nHarsh 25 26.5 28\\nAnurag 26 28 30\\nHarshal 26 26.5 26\\nHarsh 25 26.5 28\") == '26.50'\nassert solution(\"5\\nHarsh 25 26.5 28\\nAnurag 26 28 30\\nHarshal 26 26.5 26\\nHarsh 25 26.5 28\") == '26.50'\nassert solution(\"5\\nHarsh 25 26.5 28\\nAnurag 26 28 30\\nHarshal 26 26.5 26\\nHarsh 25 26.5 28\") == '26.50'\n",
        "num_ids_2": 96,
        "num_ids_4": 192
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\nMike Thomson 20 80\\nRobert Bustle 32 90\\nAndria Bustle 50 60\\n') == \"75.00\"\nassert solution('2\\nHarsh 25 26.5 28\\nAnurag 26 28 30') == \"26.50\"\n\n=====Sample Input 0=====\n3\nMike Thomson 20 80\nRobert Bustle 32 90\nAndria Bustle 50 60\n\n=====Sample Output 0=====\n75.00\n\n=====Sample Input 1=====\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\n=====Sample Output 1=====\n26.50\n\n=====Sample Input 2=====\n4\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\n\n=====Sample Output 2=====\n56.00\n\n=====Sample Input 3=====\n2\nHarsh\nAnurag\n\n=====Sample Output 3=====\n0.00\n\n\"\"\"",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(marks) == avg\n>>>\n=====Test Case 1=====\ninput:\n3\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\noutput:\n56.00\n\n=====Test Case 2=====\ninput:\n3\nHarsh 25 26.5 28\nAnurag 26 28 30\nHarsh\noutput:\n26.50\n\"\"\"\n\nfrom functools import reduce",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Henry Davids 17 M\\n Mary George 19 F\") == '\\nMr. Henry Davids\\nMs. Mary George'\n=====END=====\nYou passed: 100.0 % of python3 submissions\n\nimport sys\nimport operator",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Davy\\nDoe\\n25\\nM\") == \"Mr. Davy Doe\\n\"\nassert solution(\"John\\nDoe\\n25\\nM\") == \"Mr. John Doe\\n\"\nassert solution(\"Jane\\nDoe\\n24\\nF\") == \"Ms. Jane Doe\\n\"\n\"\"\"",
        "num_ids_2": 52,
        "num_ids_4": 77
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''George Michael 183 M\nPray viole 138 F\nBraylon 213 M\nXimenes 235 M\nCrayton 138 M\nRaylan 183 M\nAiden 287 M\nTrayvon 128 M\nPrince 251 F\nTristan 239 M\nKrayden 75 M\nJoanna 293 F\nSamuel 236 M\n''') == '''Aiden 287 M\nCrayton 138 M\nGeorge Michael 183 M\nKrayden 75 M\nSamuel 236 M\nXimenes 235 M\nRaylan 183 M\nPrince 251 F\nTrayvon 128 M\nTristan 239 M\n'''\n\nprint(solution('''George Michael 183 M\nPray viole 138 F\nBraylon 213 M\nXimenes 235 M\nCrayton 138 M\nRaylan 183 M\nAiden 287 M\nTrayvon 128 M\nPrince 251 F\nTristan 239 M\nKrayden 75 M\nJoanna 293 F\nSamuel 236 M\n'''))",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"SOL\") == \"SOL\"\nassert solution(\"23\") == \"23\"\nassert solution(\"H W\") == \"H W\"\nassert solution(\"J K\") == \"J K\"\nassert solution(\"M N\") == \"M N\"\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0\\nWill 10\\nMax 20\\nLaura 21F\\nKate 19F\\nPeter 17\\nCameron 18\\n') == 'Mr. Cameron\\nMr. Peter\\nMs. Kate\\nMs. Laura\\nMr. Will\\n'\nassert solution('0\\nLinda 10\\nBarbara 10\\nPeter 20\\nCameron 10\\nCameron 20\\n') == 'Mr. Cameron\\nMr. Peter\\nMs. Barbara\\nMs. Linda\\n'\n",
        "num_ids_2": 118,
        "num_ids_4": 118
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Davy   Dorado    22 M') == 'Mr. Davy Dorado'\nassert solution('John   SMITH    45 M') == 'Mr. John Smith'\nassert solution('Dorothy  WANG    26 F') == 'Ms. Dorothy Wang'\n\nassert solution('David     Dorado    32 M') == 'Mr. David Dorado'\nassert solution('Mary     SMITH    52 F') == 'Ms. Mary Smith'\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\nHarry\\n37\\nBerry\\n37\\nTina\\n37\\nAkriti\\n41\\nHarsh\\n39\") == '''Mr. Harry\nMs. Berry\nMr. Tina\nMs. Akriti\nMr. Harsh\n'''\n\"\"\"\n__author__ = 'Danyang'\n\n\nclass Solution:\n    def __init__(self):\n        self.last_name_array = []\n\n    def solution(self, S):\n        self.last_name_array = S.strip().split(\"\\n\")\n        self.last_name_array.sort(key=lambda x: int(x.split(\" \")[2]))\n\n        return self.last_name_array\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''7\nHarry\n37.21\nBerry\n37.21\nTina\n37.2\nAkriti\n41\nHarsh\n39''') == '''Berry\nHarry\nHarsh\nTina\n37.21\n37.2\n41\n39'''\n\nassert solution('''6\nHarsh\n20\nBeria\n20\nKotli\n20\nMadhur\n20''') == '''Harsh\nKotli\nMadhur\nBeria\n20\n20'''\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('James Davids 22 M') == 'Mr. James Davids'\nassert solution('John George 47 M') == 'Ms. John George'\nassert solution('Davids James 22 M') == 'Mr. Davids James'\nassert solution('Davids John 47 M') == 'Ms. Davids John'\n\"\"\"\n\n\n\nimport operator",
        "num_ids_2": 34,
        "num_ids_4": 72
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Henry Davids Mary George\") == 'Mr. Henry Davids\\nMs. Mary George'\nassert solution(\"John Doe Peter Parker\") == 'Ms. John Doe\\nMr. Peter Parker'\nassert solution(\"Clark Kent Superman\") == 'Mr. Clark Kent\\nSuperman'\n\"\"\"",
        "num_ids_2": 46,
        "num_ids_4": 65
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n1\\n2\\n3\\n') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2]]'\nassert solution('1\\n1\\n2\\n1\\n') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2]]'\nassert solution('1\\n2\\n3\\n4\\n') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [3, 0, 0], [3, 0, 1], [3, 0, 2], [3, 1, 0], [3, 1, 1], [3, 1, 2], [3, 2, 0], [3, 2, 1], [3, 2, 2]]'\n\n\"\"\"\n\nx, y, z, n = int(input()), int(input()), int(input()), int(input())\n\nprint( [[a,b,c] for a in range(x+1) for b in range(y+1) for c in range(z+1) if a+b+c!= n] )\n",
        "num_ids_2": 152,
        "num_ids_4": 361
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '1'\n) == [\n    [0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]\n]\nassert solution(\n    '1'\n) == [\n    [0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]\n]\nassert solution(\n    '1'\n) == [\n    [0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]\n]\nassert solution(\n    '1'\n) == [\n    [0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]\n]\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1 3\") == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2]]\nassert solution(\"2 2 2 2\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\nassert solution(\"2 2 1 2\") == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2]]\nassert solution(\"2 2 1 1\") == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\nassert solution(\"1 2 3 4\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 0], [0, 2, 1], [0, 2, 2], [0, 2, 3], [0, 2, 4], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 0, 4], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 1, 4], [1, 2, 0], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 4], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 0, 3], [2, 0, 4], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 1, 4], [2, 2, 0], [2, 2, 1], [2, 2, 2], [2, 2, 3], [2, 2, 4], [3, 0, 0], [3, 0, 1], [3, 0, 2], [3, 0, 3], [3, 0, 4], [3, 1, 0], [3, 1, 1], [3, 1, 2], [3, 1, 3], [3, 1, 4], [3, 2, 0], [3, 2, 1], [3, 2, 2], [3, 2, 3], [3, 2, 4], [4, 0, 0], [4, 0, 1], [4, 0, 2], [4, 0, 3], [4, 0, 4], [4, 1, 0], [4, 1, 1], [4, 1, 2], [4, 1, 3], [4, 1, 4], [4, 2, 0], [4, 2, 1], [4, 2, 2], [4, 2, 3], [4, 2, 4]]\n\nprint(solution(\"2 2 1 1\"))\nprint(solution(\"2 2 1 2\"))\nprint(solution(\"2 2 1 3\"))\nprint(solution(\"1 1 1 3\"))\n\n=====OUTPUT=====\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2], [3, 0, 0], [3, 0, 1], [3, 0, 2], [3, 1, 0], [3, 1, 1], [3, 1, 2], [3, 2, 0], [3, 2, 1], [3, 2, 2], [3, 3, 0], [3, 3, 1], [3, 3, 2], [3, 4, 0], [3, 4, 1], [3, 4, 2], [4, 0, 0], [4, 0, 1], [4, 0, 2], [4, 0, 3], [4, 1, 0], [4, 1, 1], [4, 1, 2], [4, 1, 3], [4, 2, 0], [4, 2, 1], [4, 2, 2], [4, 2, 3], [4, 3, 0], [4, 3, 1], [4, 3, 2], [4, 3, 3], [4, 4, 0], [4, 4, 1], [4, 4, 2], [4, 4, 3]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2], [3, 0, 0], [3, 0, 1], [3, 0, 2], [3, 1, 0], [3, 1, 1], [3, 1, 2], [3, 2, 0], [3, 2, 1], [3, 2, 2], [3, 3, 0], [3, 3, 1], [3, 3, 2], [3, 4, 0], [3, 4, 1], [3, 4, 2], [4, 0, 0], [4, 0, 1], [4, 0, 2], [4, 1, 0], [4, 1, 1], [4, 1, 2], [4, 2, 0], [4, 2, 1], [4,",
        "num_ids_2": 160,
        "num_ids_4": 299
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n1\\n1\\n2\") == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 2], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 1], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n=====Output=====\n[0, 0, 0]\n[0, 0, 1]\n[0, 0, 2]\n[0, 1, 0]\n[0, 1, 2]\n[0, 2, 1]\n[1, 0, 0]\n[1, 0, 2]\n[1, 2, 1]\n[2, 0, 1]\n[2, 1, 0]\n[2, 1, 2]\n[2, 2, 0]\n[2, 2, 1]\n[2, 2, 2]\n\n>>>>>>> d8f7a3d2edca637f1d0730d5a7edb4da3a8ddd57\n\"\"\"\n",
        "num_ids_2": 156,
        "num_ids_4": 156
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n 1\\n 1\\n 1\\n 1\\n') == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]\nassert solution('2\\n 2\\n 2\\n 3\\n') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\nassert solution('1\\n 2\\n 3\\n 4\\n') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2], [3, 0, 0], [3, 0, 1], [3, 0, 2], [3, 1, 0], [3, 1, 1], [3, 1, 2], [3, 2, 0], [3, 2, 1], [3, 2, 2], [4, 0, 0], [4, 0, 1], [4, 0, 2], [4, 1, 0], [4, 1, 1], [4, 1, 2], [4, 2, 0], [4, 2, 1], [4, 2, 2]]\n=====Output=====\nPrint the list of lists in lexicographic increasing order, where each inner list represents a permutation of [i,j,k]\nPrint an integer k denoting the permutation for which the sum of i+j+k is maximal\nPrint the list in lexicographic increasing order, where each inner list represents a permutation of [i,j,k] for which the sum of i+j+k is minimal\n\n\"\"\"",
        "num_ids_2": 284,
        "num_ids_4": 617
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\n2\n2\n3''') == \"\"\"0 0 0\n0 0 1\n0 1 0\n0 1 1\n0 0 0\n0 0 1\n0 0 2\n0 1 0\n0 1 1\n0 1 2\n0 0 0\n1 0 0\n1 0 1\n1 0 2\n1 0 1\n1 1 0\n1 1 1\n1 1 2\"\"\"\nassert solution('''1\n1\n1\n1\n1''') == \"\"\"0 0 0\n1 0 0\n0 0 0\n1 1 1\n1 1 1\"\"\"\nassert solution('''2\n2\n2\n1''') == \"\"\"0 0 0\n0 0 0\n1 0 0\n0 0 0\n1 1 1\n1 1 1\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 2 2') == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 2]]\n\n=====Output Format=====\nPrint the list of lists in lexicographic increasing order, where each inner list represents a permutation of [i,j,k].\n\n=====Sample Test Cases=====\nInput 1:\n1\n1\n2\n3\nOutput 1:\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 2]]\n\nInput 2:\n2\n2\n2\n2\nOutput 2:\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 2], [1, 0, 0], [1, 0, 2], [1, 1, 1], [1, 1, 2]]\n\nInput 3:\n1\n1\n1\n1\nOutput 3:\n[[0, 0, 0]]\n\n=====Solution=====\n\"\"\"",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [1, 0, 0], [1, 1, 1]]'\nassert solution('1 2 3 5') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 2], [2, 1, 2], [2, 2, 2]]'\nassert solution('2 2 3 4') == '[[0, 0, 0], [0, 1, 0], [0, 1, 1], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 1, 0], [1, 1, 1], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]'\nassert solution('1 1 1 1') == '[]'\nassert solution('2 2 2') == '[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]'\n\n=====Output Format=====\nPrint the list of lists in lexicographic increasing order, where each inner list represents one permutation of (i,j,k).\n\na = int(stdin.readline())\nb = int(stdin.readline())\nc = int(stdin.readline())\nn = int(stdin.readline())\narr = [[i, j, k] for i in range(a) for j in range(b) for k in range(c) if (i+j+k)!=n]\nprint(arr)\n\n\"\"\"",
        "num_ids_2": 157,
        "num_ids_4": 329
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 1\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\nassert solution(\"1 2 3 4\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 0], [0, 2, 1], [0, 2, 2], [0, 2, 3], [0, 2, 4], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 0, 4], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 1, 4], [1, 2, 0], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 4], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 0, 3], [2, 0, 4], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 1, 4], [2, 2, 0], [2, 2, 1], [2, 2, 2], [2, 2, 3], [2, 2, 4]]\nassert solution(\"2 2 2 3\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 1, 3], [0, 2, 0], [0, 2, 1], [0, 2, 2], [0, 2, 3], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 2, 0], [1, 2, 1], [1, 2, 2], [1, 2, 3], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 0, 3], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 2, 0], [2, 2, 1], [2, 2, 2], [2, 2, 3]]\nassert solution(\"1 1 1 1\") == [[0, 0, 0], [1, 1, 1]]\n\n=====Output Format=====\nPrint the list of lists in lexicographic increasing order, each inner list being the coordinates of a point on the cuboid.\n\n=====Sample Test Case=====\nTest 1\nInput\nx = 2\ny = 2\nz = 3\nn = 3\nOutput\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n\n\"\"\"\n",
        "num_ids_2": 419,
        "num_ids_4": 705
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1 1 1') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\nassert solution('1 1 1 3') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n\n>>>>>>> 88d5abf5fdf1224584809c4f7ffbcfc6b01b5095\n",
        "num_ids_2": 188,
        "num_ids_4": 188
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1.00+1.00i'\nassert solution('1 0') == '1.00+0.00i'\nassert solution('0 1') == '0.00+1.00i'\nassert solution('0 0') == '0.00+0.00i'\nassert solution('1 1') == '1.00+1.00i'\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"1 1\") == \"+0.00+1.00i\"\nassert solution(\n\"1 2\") == \"+3.00+0.80i\"\nassert solution(\n\"0 2\") == \"0.00-2.00i\"\nassert solution(\n\"0 0\") == \"0.00+0.00i\"\n\n=====Test Case 1=====\n>>>\n>>>\n>>>\n\n=====Test Case 2=====\n>>>\n>>>\n>>>\n\n=====Test Case 3=====\n>>>\n>>>\n>>>\n\n=====Test Case 4=====\n>>>\n>>>\n>>>\n\n=====Test Case 5=====\n>>>\n>>>\n>>>\n\n>>>>>>> 1d7a64b3f1d6c4c0a92e1c11fa4f5a85fb61f6b5\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1.0 2.0') == '3.00+2.00i'\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"3 4\"\n=====Test Case 1=====\nInput:\n1 2\nOutput:\n3 4\n=====Test Case 2=====\nInput:\n0 1\nOutput:\n0.00+1.00i\n=====Test Case 3=====\nInput:\n2 -1\nOutput:\n1.00-1.00i\n=====Test Case 4=====\nInput:\n0 -1\nOutput:\n0.00-1.00i\n=====Test Case 5=====\nInput:\n1 -1\nOutput:\n1.00-1.00i\n\nimport math\nimport os\nimport random\nimport re\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 + 1i\") == \"0.00+2.00i\"\nassert solution(\"1 - 1i\") == \"0.00-2.00i\"\nassert solution(\"1 + 1i + 1 - 1i\") == \"0.00+3.00i\"\nassert solution(\"1i + 1i\") == \"0.00+1.00i\"\nassert solution(\"0.00 + 2.00i\") == \"0.00+2.00i\"\n\n=====Constraints=====\nGiven number is a valid complex number.\n\n=====Sample Input=====\n1 + 1i\n0 - 2i\n\n=====Sample Output=====\n0.00+3.00i\n0.00-2.00i\n\n>>>>>>> dfaecb2f8b2c4a70f6e55c06ac13dcd9b4ba2512\n",
        "num_ids_2": 40,
        "num_ids_4": 86
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2') == \"3 -1i\"\nassert solution('1 +1i') == \"0 -2i\"\nassert solution('1.0111 + 2.1111i') == \"3.1100 + 3.1111i\"\nassert solution('2 +2i') == \"4 4i\"\nassert solution('1 -1i') == \"0 1i\"\n",
        "num_ids_2": 30,
        "num_ids_4": 70
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == '2.00+2.00i'\n=======\nimport math\n\na = input().split()\na = [float(i) for i in a]\n\nreal = a[0]\nimaginary = a[1]\n\nreal = round(real, 2)\nimaginary = round(imaginary, 2)",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1+1i\\n1-1i\\n1+0i\\n1+0i\\n1.00+0.00i\\n0.00+1.00i'\nassert solution('1+1i') == '1+1i\\n1-1i\\n1+0i\\n1+0i\\n1.00+0.00i\\n0.00+1.00i'\nassert solution('0+0i') == '0+0i\\n0-0i\\n0+0i\\n0+0i\\n0.00+0.00i\\n0.00+0.00i'\nassert solution('0.00+0.00i') == '0.00+0.00i\\n0-0i\\n0+0i\\n0+0i\\n0.00+0.00i\\n0.00+0.00i'\nassert solution('1+0i') == '1+0i\\n1-0i\\n1+0i\\n1+0i\\n1.00+0.00i\\n0.00+1.00i'\n",
        "num_ids_2": 106,
        "num_ids_4": 222
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"0.00+0.00i\\n0.00+1.00i\\n1.00+0.00i\\n0.00+1.00i\\n0.00+1.00i\"\nassert solution(\"0 1\") == \"0.00+1.00i\\n0.00+1.00i\\n1.00+0.00i\\n0.00+1.00i\\n0.00+1.00i\"\nassert solution(\"1 0\") == \"0.00+1.00i\\n0.00+0.00i\\n1.00+0.00i\\n0.00+0.00i\\n0.00+0.00i\"\nassert solution(\"0 0\") == \"0.00+0.00i\\n0.00+0.00i\\n0.00+0.00i\\n0.00+0.00i\\n0.00+0.00i\"\nassert solution(\"0 0 1 1\") == \"0.00+1.00i\\n0.00+1.00i\\n0.00+1.00i\\n1.00+0.00i\\n0.00+0.00i\"\n",
        "num_ids_2": 116,
        "num_ids_4": 232
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1.1 2.2\") == \"3.3 -2.2i\"\nassert solution(\"1.1 2.1\") == \"0.0 +2.0i\"\n\n=====Test Case 0=====\n    0+0i\n    0.0+0.0i\n=====Test Case 1=====\n    1+1i\n    0.0+1.0i\n=====Test Case 2=====\n    1+-1i\n    0.0+-1.0i\n=====Test Case 3=====\n    1.1+2.2i\n    3.3-2.2i\n=====Test Case 4=====\n    1+2i\n    0.0+2.0i\n=====Test Case 5=====\n    1+-1i\n    0.0+-1.0i\n\n\"\"\"\n\nimport math\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nprint(solution(\"xyz\"))\nassert solution(\"abc\") == \"xaybzc\"\nprint(solution(\"abc\"))\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('xyz') == 'xaybzc'\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin), end=\"\")\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('xyz') == 'xaybzc'\nassert solution('abc') == 'xaybzc'\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "num_ids_2": 29,
        "num_ids_4": 49
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('xaybzc') == 'xaybzc'\nassert solution('abc') == 'abc'\nassert solution('xyz') == 'xaybzc'\n\nimport unittest\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        assert solution('xaybzc') == 'xaybzc'\n        assert solution('abc') == 'abc'\n        ",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('xyz') == 'xaybzc'\nassert solution('abc') == 'xaybzc'\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nassert solution(\"abc\") == \"abcabc\"\n\n\"\"\"\n\nimport io",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('xyz') == 'xaybzc'\nassert solution('abc') == 'xaybzc'\nassert solution('aBc') == 'xaybzc'\nassert solution('A1B2C3') == 'xaybzc'\nassert solution('abcABC') == 'xaybzc'\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 64
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcde') == 'adebc'\nassert solution('xaybzc') == 'xaybzc'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('01B0') == '00'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"01B0\"\n) == \"0\"\n\nassert solution(\n    \"0\"\n) == \"0\"\n\nassert solution(\n    \"011\"\n) == \"1\"\n\nassert solution(\n    \"0110\"\n) == \"1\"\n\nassert solution(\n    \"100100\"\n) == \"1\"\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\"\n\nimport unittest\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('01B0') == '00'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('01B0') == '00'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\"\"\"\n\nfrom typing import List\n\nN = int(input())\nA = list(map(int, input().split()))\nA.sort()\n\nresult = 0\n\nfor i in range(N):\n    result += (A[i] - i)\n\nprint(result)\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\"\"\"\nimport math\n\nN = int(input())\na = [int(x) for x in input().split()]\n\nn = 1\ncurr_max = 0\ntotal_max = 0\n\nfor height in a:\n    if height > curr_max:\n        curr_max = height\n        total_max += n\n        n += 1\n    else:\n        total_max += 1\n\nprint(total_max)\n\n\"\"\"\nimport math\n\nN = int(input())\na = [int(x) for x in input().split()]\n\nn = 1\ncurr_max = 0\n\nfor height in a:\n    if height > curr_max:\n        curr_max = height\n    else:\n        n += 1\n\nprint(math.ceil(n / 2))\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 1 5 4 3\") == \"4\"\nassert solution(\"5\\n2 1 5 4 3\") == \"3\"\nassert solution(\"6\\n2 1 5 4 3 6\") == \"6\"\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 52
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\nprint(solution(stdin))\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\nassert solution('3\\n3 3 3\\n') == '4'\n\nassert solution('7\\n1 3 1 4 1 6 1\\n') == '8'\n\nassert solution('7\\n2 1 5 4 3 6 7\\n') == '8'\n\nassert solution('4\\n1 2 3 4\\n') == '0'",
        "num_ids_2": 25,
        "num_ids_4": 67
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1 5 4 3') == '4'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 1 5 4 3') == 4\n\"\"\"\nimport math\nimport sys",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"B\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"B\"\n",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aca\\naccc\\nca\") == \"A\"\n\"\"\"\n\nS_A, S_B, S_C = map(input, range(3))\n\nA = S_A.count(\"a\")\nB = S_B.count(\"b\")\nC = S_C.count(\"c\")",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"B\"\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aca\\naccc\\nca') == 'A'\n\"\"\"\n\nfrom __future__ import annotations\n\nimport string\n\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import Any, List\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aca\\naccc\\nca\\n') == 'A'\n\"\"\"\n\nimport sys\n\nsys.path.append('./')\nfrom module.ctci_solution import ctcis_solution",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aca\\naccc\\nca\\n\") == \"A\"\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin='aca\\naccc\\nca') == 'A'\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aca\\naccc\\nca\\n\") == \"A\"\n\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"B\"\n\nprint(\"Teste OK\")\n",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '5 5 7'\n) == 'YES'\n\n-------------\n// this solution is accepted\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5 7\") == 'YES'\nassert solution(\"2 2 2\") == 'NO'\n\n\"\"\"\n\na, b, c = list(map(int, stdin.strip().split()))\n\na_cnt = b_cnt = c_cnt = 0\nfor _ in range(a): a_cnt += 5\nfor _ in range(b): b_cnt += 7\nfor _ in range(c): c_cnt += 5",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5 7\\n') == 'YES'\nassert solution('5 3 7\\n') == 'NO'\nassert solution('7 3 5\\n') == 'NO'\nassert solution('7 5 3\\n') == 'YES'\nassert solution('3 7 5\\n') == 'YES'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5 7') == 'YES'\nassert solution('7 7 5') == 'NO'\nassert solution('7 7 5 5 5 5 5 5 5 5 7') == 'YES'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100') == 'YES'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 100') == 'NO'\n",
        "num_ids_2": 24,
        "num_ids_4": 153
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"5 5 6\") == \"NO\"\nassert solution(\"1 1 1\") == \"YES\"\nassert solution(\"1 2 2\") == \"NO\"\nassert solution(\"1 3 3\") == \"YES\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 5 7') == \"YES\"\n\nassert solution('7 5 5') == \"NO\"\n\nassert solution('7 7 7') == \"YES\"\n\nassert solution('5 7 5') == \"NO\"\n\nassert solution('7 5 5') == \"YES\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\n\nimport re",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5 7') == 'YES'\nassert solution('3 4 7') == 'NO'\n\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5 7') == 'YES'\nassert solution('6 5 8') == 'NO'\nassert solution('9 2 1') == 'NO'\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5 7') == 'YES'\nassert solution('5 7 5') == 'NO'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == '11'\n\"\"\"\n\n\"\"\"\nimport sys\nn = int(sys.stdin.readline().strip())\n\nn1 = 2\nn2 = 1\n\nwhile n - 2:\n    n1, n2 = n1 + n2, n1\n    n -= 1\n\nprint(n2)\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\nlucas = []\nlucas.append(2)\nlucas.append(1)\n\nfor i in range(2, n):\n    lucas.append(lucas[i - 2] + lucas[i - 1])\n\nprint(lucas[n - 1])\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"11\"\n\n\"\"\"\nimport pytest\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"11\"\n\n-------\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n\nimport sys\n\ntry:\n    n = int(input())\n    if n < 1 or n > 86:\n        sys.exit(1)\n\n    def lucas_function(n):\n        return sum(\n            (1, 2)[index]\n            for index in range(n)\n        )\n\n    print(lucas_function(n))\nexcept ValueError:\n    sys.exit(1)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == '11'\n\"\"\"\n\nfrom typing import List\nfrom collections import deque",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"7\"\nassert solution(\"5\") == \"11\"\nassert solution(\"6\") == \"18\"\n\nprint(\"Successfully solved.\")\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n\") == '6'\nassert solution(\"4\\n\") == '7'\nassert solution(\"5\\n\") == '11'\nassert solution(\"6\\n\") == '18'\n\"\"\"\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n') == '7'\nassert solution('5\\n') == '11'",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n') == '11'\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 2') == '7'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n4\n2''') == '7'",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 2\") == \"7\"\nprint(\"Test PASSED\")\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 2') == '7'",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4 2') == '7'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 2') == '7'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 2\") == 7\nassert solution(\"4 5 2\") == 6\nassert solution(\"100 0 100\") == 50\nassert solution(\"0 0 0\") == 0\nassert solution(\"2 10 2\") == 6\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 2\") == \"7\"\nprint('Test pass.')\n\n---\na=int(input().strip())\nb=int(input().strip())\nh=int(input().strip())\n\nprint((a+b)*h/2)",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '3\\n4\\n2'\n) == '7'\n\"\"\"\n\nimport sys\nimport math\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n4\n2''') == '7'\nassert solution('''1\n1\n2''') == '2'\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n1 2 3 4 5''') == '10'\n\"\"\"\nimport sys\nimport math",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\\n\") == 11\n\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"14\\n\"\nassert solution(\"2\\n1 1\") == \"1\\n\"\nassert solution(\"3\\n1 1 1\") == \"2\\n\"\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('A B C') == 'A * B + A * C + B * C'\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3, \"1 2 3\") == 11\nprint(solution(3, \"1 2 3\"))\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == 11\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '11'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == '11'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 4') == '11'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3 2\\n') == \"YES\"\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 2') == 'YES'\n\n-----",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 2') == 'YES'\nprint(solution('4 3 2'))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\n\"\"\"\n\nfrom collections import deque\n\nnumbers = deque(list(map(int, stdin.strip().split())))\n\nwhile numbers:\n    r = numbers.popleft()\n    g = numbers.popleft()\n    b = numbers.popleft()\n    if r % 4 == 0 or g % 4 == 0 or b % 4 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 2\") == 'YES'\nassert solution(\"4 3 3\") == 'NO'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 2') == 'YES'\nassert solution('1 1 1') == 'NO'\nassert solution('1 2 3') == 'NO'\nassert solution('1 2 1') == 'YES'\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nr, g, b = [int(elem) for elem in stdin.readline().strip().split()]",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\nassert solution(\"7 4 2\") == \"NO\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3 2') == 'YES'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\nprint('Passed')\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 11\\n1') == '30'\n\n-----",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 11\\n1\\n') == '30'\nassert solution('5 3 11\\n2\\n') == '40'\nassert solution('5 3 11\\n3\\n') == '45'\nassert solution('5 3 11\\n4\\n') == '44'\nassert solution('5 3 11\\n5\\n') == '50'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 11\\n1\\n') == \"30\"\nassert solution('7 21 4\\n2\\n') == \"42\"\nassert solution('3 21 11\\n1\\n') == \"42\"\nassert solution('5 31 3\\n1\\n') == \"42\"\nassert solution('5 31 3\\n2\\n') == \"102\"\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 11\\n1\\n\") == \"30\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 11\\n1') == \"30\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '2'\nassert solution('1 2') == '3'\nassert solution('1 2 3') == '6'\nassert solution('2 1 3') == '6'\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('bbbb') == 'No'\nassert solution('aaaa') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 33
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('abab') == 'No'\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abaccaba') == \"Yes\"\nassert solution('aabbccccc') == \"No\"\nassert solution('abccaacb') == \"No\"\nassert solution('abcdefghhgfedecba') == \"Yes\"\nassert solution('cdefghhgfedecba') == \"Yes\"\n",
        "num_ids_2": 26,
        "num_ids_4": 56
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('abbcccb') == 'No'\n\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"abacc\") == \"No\"\nassert solution(\"abbcabb\") == \"No\"\n\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 35
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abaccaba\") == 'Yes'\n\n-----Explanation-----\nFirst we count the number of times each letter appears in w and we check if each letter appears an even number of times.\nIf so, we return Yes and stop.\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"abccccba\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 35
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abaccaba') == 'Yes'",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('abcc') == 'No'\nassert solution('abcdef') == 'Yes'\nassert solution('abb') == 'Yes'",
        "num_ids_2": 23,
        "num_ids_4": 44
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abaccaba\") == 'Yes'\nassert solution(\"abcc\") == 'No'\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\n\"\"\"\n\nimport unittest",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 4\n1 1\n2 2\n3 3''') == '3'\n\"\"\"\n\nimport sys\nfrom collections import Counter\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\") == \"3\"\n\"\"\"\n\n\"\"\"\nGiven K, the number of smaller numbers that are inserted into an array.\nReturn the K-th smallest element in the resulting array.\n\"\"\"\n\nfrom operator import itemgetter\nfrom typing import List",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4\\n1 1\\n2 2\\n3 3') == '3'\n\n\"\"\"\n\n\"\"\"\nsample input:\n3 4\n1 1\n2 2\n3 3\n\nsample output:\n3\n\nsolution(stdin):\n    print(solution)\n\n\"\"\"\n\nimport heapq\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        n, k = [int(x) for x in stdin.split()]\n        h = []\n        for i in range(n):\n            a, b = [int(x) for x in stdin.split()]\n            heapq.heappush(h, [a, b])\n        res = 0\n        while k > 0:\n            res += heapq.heappop(h)[0]\n            k -= 1\n        print(res)\n        return\n\nassert Solution().solve('3 4\\n1 1\\n2 2\\n3 3') == '3'",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4\\n1 1\\n2 2\\n3 3') == '3'\n\"\"\"\n\n\nimport sys\nimport heapq\nimport collections",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\") == '3'\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\\n\") == \"3\"\nprint(\"PASSED\")\n\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n3 3\\n4 5\") == \"3\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 1\\n2 2\\n3 3\") == \"3\"\n\"\"\"\n\nfrom sys import stdin, stdout\n\nn, k = [int(x) for x in stdin.readline().split()]\narr = []\nfor _ in range(n):\n    arr.append([int(x) for x in stdin.readline().split()])\narr.sort()\n\nstdout.write(str(arr[k - 1][0]))\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n2 2\\n3 3') == 3\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n') == '2'\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n') == '2'\nprint(solution(stdin))\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"3 2\") == \"1\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"2\"\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"2\"\nprint(solution(\"1 1\"))",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2') == '2'\nassert solution('3 2') == '2'\nassert solution('2 3') == '6'\nassert solution('1 1') == '0'\nassert solution('100 100') == '91832642'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n') == '2'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"2\"\n\"\"\"\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n\") == 2\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2') == '2'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 10 15\") == 10\n\n\"\"\"\nfrom typing import List\n\nfrom utils import timed\n\nDIRECTIONS = {\n    'N': (0, 1),\n    'E': (1, 0),\n    'S': (0, -1),\n    'W': (-1, 0)\n}\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 3\\n5 10 15\") == \"10\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 10 15') == '10'\nassert solution('20 3') == '10'\n\"\"\"\n\nk, n = [int(x) for x in input().split()]\nhouses = [int(x) for x in input().split()]\nhouses.sort()",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 3\\n5 10 15\") == \"10\"\n\"\"\"\n\n\nimport sys\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '20 3\\n5 10 15'\n) == '10'\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 10 15\") == \"10\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 3\\n5 10 15\") == \"10\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10 15\") == \"10\"\n\"\"\"\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10 15\") == \"10\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n1 2 3 4 5\\n') == '10'\n\n\"\"\"\nimport sys\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 2 7\") == '15'\nassert solution(\"2 2 2 1\") == '2'\nassert solution(\"1 1 1 1\") == '1'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 5 2 7''') == '15'\n\"\"\"\n\nA, B, C, D = map(int, input().split())",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"5 6 2 7\") == \"14\"\nassert solution(\"4 5 3 1\") == \"12\"\nassert solution(\"2 2 2 2\") == \"4\"\nassert solution(\"2 2 1 2\") == \"4\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5 2 7') == '15'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 2 7\") == '15'\nassert solution(\"3 5 2 9\") == '21'\nassert solution(\"1 1 1 1\") == '1'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"4 5 7 6\") == \"14\"\nassert solution(\"5 7 8 9\") == \"28\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n\"\"\"\n\na, b, c, d = input().split()\na = int(a)\nb = int(b)\nc = int(c)\nd = int(d)\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5 2 7\") == \"15\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(sys.stdin.read())) == str(sys.stdin.read())\n\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5 2 7') == '15'\nassert solution('1 1 1 1') == '0'\nassert solution('3 3 3 3') == '9'\nassert solution('1 10 10 5') == '50'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n\"\"\"",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('AC\\nTLE\\nAC\\nAC\\nWA\\nTLE') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\n\"\"\"\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n\"\"\"",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"6\"\n) == \"AC x 3\"\nassert solution(\n    \"AC\\nTLE\"\n) == \"AC x 2\"\nassert solution(\n    \"AC\\nAC\\nWA\"\n) == \"AC x 3\"\nassert solution(\n    \"AC\\nAC\\nAC\\nWA\\nTLE\\nAC\\nAC\\nAC\\nWA\"\n) == \"AC x 3\"\n\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('AC\\nWA\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\n\"\"\"\n\ntest_cases = []",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n\"\"\"\n\nn = int(input())\ncount = [0, 0, 0, 0]\nfor i in range(n):\n    s = input()\n    count[0] += s.count('AC')\n    count[1] += s.count('WA')\n    count[2] += s.count('TLE')\n    count[3] += s.count('RE')\n\nprint(\"AC x {}\".format(count[0]))\nprint(\"WA x {}\".format(count[1]))\nprint(\"TLE x {}\".format(count[2]))\nprint(\"RE x {}\".format(count[3]))\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''6\nAC\nTLE\nAC\nAC\nWA\nTLE\n''') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\\n'\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('AC\\nWA\\nTLE\\nAC\\nAC\\nRE') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('21') == '27'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"\n\nM = int(input())\n\nhours_until_new_year = (24 - M) % 24\nprint(hours_until_new_year)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"\nimport sys\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"21\") == \"27\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('21') == '27'\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('21') == '27'\n\"\"\"\n\nM = int(stdin.readline())\n\nprint(f\"We have {(24-M)%24} hours until New Year at {M} o'clock on 30th, December.\")\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''23''') == '''We have 23 hours until New Year at 23 o'clock on 30th, December.'''\nassert solution('''21''') == '''We have 27 hours until New Year at 21 o'clock on 30th, December.'''\nassert solution('''1''') == '''We have 27 hours until New Year at 1 o'clock on 30th, December.'''\nassert solution('''24''') == '''We have 27 hours until New Year at 24 o'clock on 30th, December.'''\nassert solution('''23''') == '''We have 27 hours until New Year at 23 o'clock on 30th, December.'''\n",
        "num_ids_2": 62,
        "num_ids_4": 124
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"21\") == \"27\"\nprint(solution(\"21\"))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(22) == 0\nassert solution(12) == 13\nassert solution(23) == 24\nassert solution(2) == 5\nassert solution(10) == 20\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(print(solution(str(input()))))\nprint('Sample test passed')\n-----\nfrom typing import List\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n') == '8'\nassert solution('8 3\\n') == 'error'\nassert solution('8 10\\n') == 'error'\nassert solution('9 5\\n') == '12'\nassert solution('100 100\\n') == 'error'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3\") == \"9\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 3') == 'error'\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3\") == \"9\"\nprint(solution(\"6 3\"))\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"6 3\"\n) == \"9\"\n\n-----\n3 3\n4 2\n10 5\n0 0",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 3') == '9'\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 3') == '9'\n\"\"\"\n\nimport sys\n\nlines = stdin.readlines()\n\nfor line in lines:\n    A, B = line.split(' ')\n    if int(A) + int(B) >= 10:\n        print('error')\n    else:\n        print(A + B)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('A B\\n') == 'error'\nassert solution('1 1\\n') == '2'\nassert solution('1 2\\n') == 'error'\nassert solution('2 3\\n') == '5'\n",
        "num_ids_2": 21,
        "num_ids_4": 47
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 3') == '9'\nassert solution('5 3') == '8'\nassert solution('1 1') == '2'\nassert solution('1 1')!= '0'\nassert solution('1 1')!= '3'\n\n\"\"\"\n\n\"\"\"\nSolution:\n\nnums = stdin.split()\nprint(int(nums[0]) + int(nums[1])) if int(nums[0]) + int(nums[1]) < 10 else print('error')\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\n') == '9'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2 7 9') == '7'\nassert solution('5 9 8 9 10') == '5'\nassert solution('2 3 7 9') == '7'\nassert solution('1 1 1 1 1') == '0'\nassert solution('4 5 3 2 4 2') == '5'\n\"\"\"\n\n\"\"\"\nThe idea of this solution is to run the algorithm from both ends (0 and N-1) and keep the max distance found.\nThe max distance will be the answer.\n\"\"\"\n\n\"\"\"\nTo run this solution, we need to know the longest distance that can be travelled from the 0th house to the N-1 house.\nTo get that information, we will use the following algorithm:\n1. Start at the 0th house.\n2. Visit all of the houses starting from 1, up to N.\n3. For every house that we visit, we will keep track of the distance to the previous house (if any).\n4. When we finish visiting all of the houses, we will start to go from the N-1 house backwards.\n5. For every house that we visit, we will keep track of the distance to the next house (if any).\n6. When we finish going backwards, we will keep track of the distance to the previous house (if any).\n7. The maximum distance to the previous house and the maximum distance to the next house will be the answer.\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = int(stdin)\n        houses = [int(x) for x in stdin.split()]\n        houses.append(0)\n        houses.append(0)\n        dist_from_0_to_houses: List[int] = []\n        dist_from_houses_to_N_1: List[int] = []\n        max_dist_to_houses = 0\n        for i in range(len(houses) - 2):\n            dist_from_houses_to_N_1.append(houses[i + 1] - houses[i])\n            max_dist_to_houses = max(max_dist_to_houses, houses[i + 1] - houses[i])\n        for i in range(len(houses) - 1, 1, -1):\n            dist_from_0_to_houses.append(houses[i] - houses[i - 1])\n            max_dist_to_houses = max(max_dist_to_houses, houses[i - 1] - houses[i])\n        dist_from_0_to_houses.append(houses[1] - houses[0])\n        dist_from_houses_to_N_1.append(houses[n] - houses[n - 1])\n        max_dist_to_houses = max(max_dist_to_houses, houses[n - 1] - houses[n])\n        dist_from_0_to_houses.sort(reverse=True)\n        dist_from_houses_to_N_1.sort(reverse=True)\n        max_dist_to_houses = max(max_dist_to_houses, dist_from_0_to_houses[0])\n        max_dist_to_houses = max(max_dist_to_houses, dist_from_houses_to_N_1[0])\n        return str(max_dist_to_houses)\n",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '4\\n2 3 7 9'\n) == '7'\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\nimport sys\nfrom typing import List\n\n\nclass Solution:\n    def distance(self, house_list: List[int], house_no: int) -> int:\n        total_distance = 0\n        last_house = house_list[0]\n        for house in house_list:\n            total_distance += abs(house - last_house)\n            last_house = house\n        return total_distance\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n2 3 7 9\n''') == '7'\n\nprint(solution(stdin))\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 3 7 9') == '7'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 3 7 9') == 7\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 3 7 9\\n') == '7'\n\n\"\"\"\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(example_input) == example_output",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3\\n1 2\\n2 3\\n2 1\\n3 1\\n3 2') == 'Yes'\n\"\"\"\n\n\"\"\"\nAnother solution:",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == \"Yes\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3') == 'Yes'\nassert solution('2 4') == 'No'\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == 'Yes'\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(expected_result)\n\nprint(solution(str(input())))\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'Yes'\nassert solution('1 2') == 'No'\nassert solution('1 3') == 'No'\nassert solution('2 3') == 'Yes'\nassert solution('3 3') == 'Yes'\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3\") == \"Yes\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n12 1') == 'Yes'\nassert solution('1 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n12 1') == 'No'\nassert solution('1 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n12 1') == 'No'\nassert solution('1 2\\n1 3\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 1\\n12 2') == 'No'\nassert solution('1 2\\n1 3\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 1\\n12 2') == 'No'\n",
        "num_ids_2": 106,
        "num_ids_4": 216
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3') == 'Yes'\nassert solution('3 3') == 'No'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"Even\"\nassert solution(\"4 5\") == \"Odd\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"Even\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3') == 'Odd'\nassert solution('2 3') == 'Even'\nassert solution('3 3') == 'Even'\nassert solution('10 3') == 'Even'\nassert solution('3 5') == 'Odd'\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == \"Even\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4') == 'Even'\nassert solution('12 3') == 'Odd'\n\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"Even\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == 'Even'\nassert solution(\"1 4\") == 'Odd'\nassert solution(\"2 3\") == 'Even'\nassert solution(\"7 7\") == 'Odd'\nassert solution(\"6 9\") == 'Even'\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 46
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4\\n') == 'Even'\nassert solution('3 3\\n') == 'Odd'\nassert solution('1 1\\n') == 'Even'\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 40
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"Even\"\nprint(solution(\"3 4\"))",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '3 4'\n) == 'Even'\nassert solution(\n    '2 3'\n) == 'Odd'\nassert solution(\n    '5 1'\n) == 'Even'\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 6\") == 2\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 6\") == \"2\"\nassert solution(\"1 6\") == \"2\"\nassert solution(\"2 5\") == \"1\"\nassert solution(\"1 6\") == \"2\"\nassert solution(\"3 4\") == \"0\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 6\") == \"2\"\nassert solution(\"4 6\") == \"0\"\nassert solution(\"10 13\") == \"4\"\n\n\"\"\"\n\nfrom typing import List, Tuple, Sequence, Optional\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 6\\n\") == 2\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 6\\n\") == \"2\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\">1<\") == \"1\"\nassert solution(\"1<>\") == \"0\"\n\"\"\"\n\nimport math\n\nn, m = map(int, input().split())\nprint(math.ceil(m/2))",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 6') == '2'\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 6') == 2\n\"\"\"\n\nfrom typing import List\nfrom bisect import bisect_right\nfrom itertools import combinations",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 6\\n') == '2'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 6\\n') == '2'\nprint('Success')\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\nassert solution(\"4\\n2 1 4\\n3\\n1 1\\n2 3\\n3\\n1 1\") == \"6\\n9\\n9\"\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\\n\") == \"6\\n9\"\n\"\"\"\n\nN = int(input())\nT = list(map(int, input().split()))\nM = int(input())\nX = list(map(int, input().split()))\n\ntotals = [sum(T[i:]) for i in range(M)]\n\nfor i in range(M):\n    if totals[i] < N:\n        totals[i] = N\n    print(totals[i])\n\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n3') == '1\\n1\\n1'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nT = [int(i) for i in sys.stdin.readline().split()]\nM = int(sys.stdin.readline())\nP = [int(i) for i in sys.stdin.readline().split()]\nX = [int(i) for i in sys.stdin.readline().split()]",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n3\n2 1 4\n2\n1 1\n2 3\n\"\"\"\n) == \"\"\"\n6\n9\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\n\"\"\"\n\n\"\"\"\nSolution for Problem Code: N6\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\"\"\"\n\n\"\"\"\nProblem Statement\n\nWrite a program that takes as input a positive integer and returns its reverse.\n\nExample 1:\n\nInput: 3\nOutput: 3\nExample 2:\n\nInput: 9\nOutput: 9\nExample 3:\n\nInput: 1534236469\nOutput: 0\n\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n2 1 4\") == \"6\\n9\"\nprint(\"PASSED\")\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\\n\") == \"6\\n9\"\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\">1 2\\n>3\\n>1 2\") == \"0\\n0\\n1\\n\"\nassert solution(\">1 2\\n>2\\n>1 2\") == \"1\\n1\\n0\\n\"\nassert solution(\">1 2\\n>2\\n>2\\n>1 2\") == \"0\\n1\\n1\\n1\\n\"\nassert solution(\">1 2\\n>2\\n>2\\n>2\\n>1 2\") == \"1\\n0\\n0\\n0\\n1\\n\"\nassert solution(\">1 2\\n>2\\n>2\\n>2\\n>2\\n>1 2\") == \"1\\n0\\n1\\n1\\n1\\n0\\n\"\n\n\"\"\"\n",
        "num_ids_2": 58,
        "num_ids_4": 137
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\nassert solution(\"10000 10\\n1 2 3 4 5 6 7 8 9 10\") == \"10000\"\n\"\"\"\n\nn, k = map(int, input().split())\nd = set(map(int, input().split()))\nprint(n * k - (n - 1) * k // 9 + (n - 1) // 2 * min(k, n - 2))\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\n\"\"\"\n\nimport re\n\nn, k = map(int, input().split())\n\nd = [int(c) for c in input().split()]\n\nd_s = set(d)\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 8\\n1 3 4 5 6 7 8 9') == '2000'\n\"\"\"\n\nimport math\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\"\"\"\n\nimport sys\n\nN, K = [int(x) for x in sys.stdin.readline().split()]\nD = [int(x) for x in sys.stdin.readline().split()]",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1000 8\n1 3 4 5 6 7 8 9''') == \"2000\"\nassert solution('''100 3\n1 3 4 5 6 7 8 9''') == \"900\"\nassert solution('''1000 8\n0 1 2 3 4 5 6 7 8''') == \"1000\"\nassert solution('''1000 8\n0 2 3 4 5 6 7 8 9''') == \"900\"\nassert solution('''1000 9\n0 1 2 3 4 5 6 7 8''') == \"0\"\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\n\"\"\"\n\nimport sys\n\nsys.stdin = open('input.txt')\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '0'\nassert solution('10 20') == '10'\nassert solution('1000 8') == '2000'\n\"\"\"\n\nn, k = [int(_) for _ in input().split()]\n\ndislikes = [int(_) for _ in input().split()]\n\ndp = [[0] * (k + 1) for _ in range(n + 1)]\ndp[0][0] = 1\n\nfor i in range(n + 1):\n    for j in range(k + 1):\n        for d in dislikes:\n            if i - d >= 0:\n                dp[i][j] = dp[i][j] or dp[i - d][j]\nprint(sum(dp[n][:k + 1]))\n",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\nassert solution(\"5 1\\n1 2 3 4 5\\n1 4\") == \"2\"\n\nassert solution(\"4 4\\n1 3 2 3\\n1 4\") == \"0\"\n\nassert solution(\"7 1\\n1 2 3 4 5 6 7\\n1 7\") == \"2\"\n\nassert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"",
        "num_ids_2": 51,
        "num_ids_4": 96
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == '2'\n\nprint(solution(input()))\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == 2\nassert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == 2\nassert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == 2\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 54,
        "num_ids_4": 81
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == '2'\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == 2\n\nassert solution('4 4\\n2 4 6 8\\n1 2\\n2 3\\n3 4\\n4 5') == 2\n\nassert solution('3 3\\n4 2 5\\n1 2 3\\n2 3 4\\n3 4') == 3\n\nassert solution('3 3\\n4 2 5\\n1 2 3\\n2 3 4\\n3 4\\n4 5') == 3\n\nassert solution('1 1\\n1 1') == 1",
        "num_ids_2": 58,
        "num_ids_4": 118
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\\n\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read()\n\nN, M = list(map(int, stdin.split()))\n\nH = list(map(int, stdin.split(\"\\n\")[1: N + 1]))\n\ngraph = {}\nfor i in range(M):\n    A, B = list(map(int, stdin.split(\"\\n\")[N + 2 + i].split()))\n    graph[(A, B)] = True\n\ngood = set()\nfor i in range(1, N + 1):\n    if graph.get((i, i)) is None:\n        good.add(i)\n\nprint(len(good))\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == '2'\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n') == '10'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n3\n''') == '10'\nassert solution('''4\n3\n''') == '10'\n\nprint(solution(input()))\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3\") == \"10\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"10\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3\") == \"10\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"10\"\n\n-----\nimport unittest\nfrom typing import List, NamedTuple\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n\nclass TestSolution(unittest.TestCase):\n\n    def test_solution(self):\n        assert Solution().solution(\"4 3\") == \"10\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"10\"\nassert solution(\"2 5\") == \"2\"\nassert solution(\"1 5\") == \"10\"\n\n\"\"\"\n\nfrom collections import deque\n\nn, k = input().split()\nn, k = int(n), int(k)\n\nqueue = deque([1])\nwhile queue:\n    next_queue = deque()\n    while queue:\n        cur_val = queue.popleft()\n        if cur_val > n:\n            break\n        if cur_val*2 == n:\n            print(cur_val)\n            exit()\n        next_queue.append(cur_val*2)\n        if cur_val+k == n:\n            print(cur_val+k)\n            exit()\n        next_queue.append(cur_val+k)\n    queue = next_queue\nprint(\"0\")\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"10\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3') == '10'\nassert solution('5 2') == '12'\nassert solution('7 2') == '16'\nassert solution('100 1') == '101'\nassert solution('0 0') == '1'\n\n\"\"\"\n\nimport unittest",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"10\"\nassert solution(\"100 10\") == \"1000\"\nassert solution(\"4 5\") == \"10\"\nassert solution(\"1 5\") == \"5\"\nassert solution(\"1 1\") == \"1\"\n\"\"\"\n\nimport math\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0.00001\") == \"0\"\nassert solution(\"0.1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "num_ids_2": 20,
        "num_ids_4": 1894
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1) == 0\nassert solution(0) == 1",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '0'\nassert solution('0.5') == '0'\nassert solution('0.51') == '1'\nassert solution('0.99') == '0'\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('0') == '0'",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('1') == 1\n'''\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '0'\nassert solution('0.5') == '1'\nassert solution('-0.5') == '1'\nassert solution('0.0') == '0'\n",
        "num_ids_2": 20,
        "num_ids_4": 45
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"33\") == \"56\"\nassert solution(\"123\") == \"132\"\nassert solution(\"32\") == \"43\"\nassert solution(\"22\") == \"44\"\n\"\"\"\n\nfrom itertools import product",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('125') == '176'\nassert solution('1+2+5') == '8'\nassert solution('4+5+3') == '15'\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 38
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('25') == '26'\nassert solution('1+9') == '10'\nassert solution('1+2+5') == '8'\n\nassert solution('1+2+5') == '8'\nassert solution('1+2+5') == '8'\n",
        "num_ids_2": 22,
        "num_ids_4": 50
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('125') == '176'\nassert solution('1+25') == '26'\nassert solution('12+5') == '17'\nassert solution('1+2+5') == '8'\n",
        "num_ids_2": 18,
        "num_ids_4": 42
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"1+25\") == \"26\"\nassert solution(\"12+5\") == \"17\"\nassert solution(\"1+2+5\") == \"8\"",
        "num_ids_2": 22,
        "num_ids_4": 48
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"1234\") == \"44\"\n\n\"\"\"\nimport sys\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == '15'\nassert solution('5+6') == '11'\nassert solution('5+6+7') == '18'\nassert solution('1+2+3+4+5') == '15'\nassert solution('1+2+3+4+5+6') == '21'\n",
        "num_ids_2": 22,
        "num_ids_4": 54
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"25\") == \"26\"\nassert solution(\"2+5\") == \"7\"\nassert solution(\"1+2+5\") == \"8\"\nassert solution(\"1+2+3+4\") == \"10\"\nassert solution(\"8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8\") == \"135\"\n",
        "num_ids_2": 22,
        "num_ids_4": 52
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"5\") == \"10\"\nassert solution(\"12\") == \"20\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"1+25\") == \"26\"\nassert solution(\"12+5\") == \"17\"\nassert solution(\"1+2+5\") == \"8\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 48
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4 5\") == '1'\nassert solution(\"4\\n6 9 10 2 3\") == '0'\n\"\"\"\n\nfrom sys import stdin\nfrom collections import Counter",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 4 5') == '1'\n\"\"\"\n\nimport math\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\n\nx = math.inf\ny = -math.inf\n\nfor i in range(n):\n    x = min(x, a[i])\n    y = max(y, a[i])\n\nprint(abs(x - y))\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"4\\n2 3 4 5\") == \"1\"\nassert solution(\"7\\n5 6 7 8 9 10\") == \"1\"\nassert solution(\"4\\n2 3 4 5\") == \"1\"\n\"\"\"\n\nn = int(input().strip())\narray = list(map(int, input().strip().split()))\n\nprint(sum([abs(array[0] - i) for i in array]))\n",
        "num_ids_2": 30,
        "num_ids_4": 64
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"1\"\n\"\"\"\n\nimport sys\nfrom typing import List\n\nclass Solution:\n    def solution(self, stdin: List[str]) -> str:\n        n = int(stdin[0])\n        cards = [int(x) for x in stdin[1].split()]\n        \n        cards.sort()\n        snuke_cards = cards[:n//2]\n        raccoon_cards = cards[n//2:]\n        \n        snuke_sum = sum(snuke_cards)\n        raccoon_sum = sum(raccoon_cards)\n        \n        result = snuke_sum - raccoon_sum\n        return str(result)",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == '1'\n\"\"\"\nfrom collections import deque\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\\n\") == \"1\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == solution_ref(stdin)\nprint(solution(stdin))",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == '1'\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n1 2 3 4 5 6') == '1'\n\"\"\"\nimport math\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\"\n\nimport math\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"10 11\") == \"110\"\nassert solution(\"10 11 20\") == \"120\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20') == '15800'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20\") == \"15800\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10') == '1000'\nassert solution('20') == '15800'\nassert solution('50') == '222400'\n\nprint(solution(stdin))\n\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20\") == \"15800\"\n\"\"\"\n\nN = int(stdin.readline())\nprint(N*1600 - 200*N)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('20') == '15800'\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"18\"\nassert solution(\"20\") == \"15800\"\nassert solution(\"50\") == \"38400\"\nassert solution(\"100\") == \"787002000\"\nassert solution(\"200\") == \"1677721600\"\n",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"10000\"\nassert solution(\"20\") == \"16800\"\nassert solution(\"30\") == \"22500\"\n\"\"\"\nimport math\nimport sys\n",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"15\\n\") == \"15800\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '3'\nassert solution('9') == '12'\n\"\"\"\n\nn = int(input())\nprint(n*200-16000)\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin_lines) == stdout_lines",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ant') == 'abc'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\nassert solution('ada') == 'ad'\nassert solution('bea') == 'be'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n\nassert solution('zax') == 'zab'\nassert solution('abc') == 'abc'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\nassert solution('qwe') == 'qwe'\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n\n-------Test Input-------\nmamam\nnoha\n\n-------Test Output-------\nmama\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"101\") == 2\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"101\") == \"2\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('101') == 2\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"101\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"101\") == 2\nassert solution(\"110\") == 1\n\"\"\"\n\nimport re\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101\") == 2\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"101\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('101') == 2\nassert solution('000') == 0\n\"\"\"\n\ns1, s2, s3 = input().split()\ns1, s2, s3 = int(s1), int(s2), int(s3)\n\ncount = 0\n\nfor i in range(3):\n    if s1 == 1:\n        count += 1\n    if s2 == 1:\n        count += 1\n    if s3 == 1:\n        count += 1\n\nprint(count)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('101') == 2\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution
        "num_ids_2": 1770,
        "num_ids_4": 1770
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '5\\n'\n    '3\\n'\n    '10000\\n'\n    '9000\\n'\n) == '48000'\n\nprint('Hooray!')\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\") == \"48000\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n3\n10000\n9000''') == '48000'\n\n\"\"\"\nimport re",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\\n\") == \"48000\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 10000 1000\") == \"70000\"\nassert solution(\"3 3 5000 1000\") == \"15000\"\n\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n3\n10000\n9000''') == '48000'\n\nprint(solution(input()))\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2\\n10000\\n9000\") == \"48000\"\n\"\"\"\n\nn = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\nprint(n * x + (k + 1) * y)\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n3\\n10000\\n9000') == '48000'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\") == \"48000\"\nassert solution(\"10\\n4\\n5\\n1\\n1\") == \"5000\"\nassert solution(\"1\\n1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"1\\n1\\n1\\n1\\n1\") == \"10000\"\n\"\"\"\n\nimport sys\n\nN, K, X, Y = map(int, sys.stdin.readline().split())\n\nprint(K * X + Y * (K + 1))\n",
        "num_ids_2": 43,
        "num_ids_4": 87
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 + 2') == '3'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 + 2') == '3'\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 + 2') == '3'\nassert solution('1 - 2') == '-1'\nassert solution('2 - 1') == '1'\nassert solution('5 + 10') == '15'\nassert solution('5 - 10') == '-5'\n",
        "num_ids_2": 25,
        "num_ids_4": 49
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1 + 2) == 3\nprint(solution(1 + 2))",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 + 2\") == 3\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 + 2\") == \"3\"\nassert solution(\"1 - 2\") == \"-1\"\nassert solution(\"3 + 2\") == \"5\"\nassert solution(\"3 - 2\") == \"1\"\nassert solution(\"5 - 4\") == \"1\"\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 + 2\") == 3\nprint(solution(\"1 + 2\"))",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 + 2\") == \"3\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"ABC\"\nassert solution(\"2\") == \"ARC\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000') == 'ABC'\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000\") == \"ABC\"\nassert solution(\"1201\") == \"ARC\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n1000\n''') == 'ABC'\n\nassert solution('''\n5000\n''') == 'ARC'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\nprint(\"Test 1 PASSED\")\n\nassert solution(\"101 0 101\") == \"200\"\nprint(\"Test 2 PASSED\")\n\nassert solution(\"0 0 101\") == \"200\"\nprint(\"Test 3 PASSED\")\n",
        "num_ids_2": 25,
        "num_ids_4": 37
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin=\"700 600 780\") == \"1300\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('700 600 780') == '1300'\nprint('Test passed')",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"700 600 780\") == 1300\n\n\"\"\"\n\na, b, c = map(int, stdin.split())\n\nprice_a = a + b\nprice_b = a + c\nprice_c = b + c\n\nprint(min(price_a, price_b, price_c))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('700 600 780') == '1300'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\n\na, b, c = map(int, input().split())\nmin = (a+b)*(b+c)//2\nprint((a+b)*c//2)\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_stdin) == test_solution\nprint(solution(stdin))\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\n\na, b, c = map(int, input().split())",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"\"\"#####\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 3\nabc\narc''') == '#####\\n#abc#\\n#arc#\\n#####'\n\nassert solution('''2 3\nabc\narc\n\na\nb''') == '#####\\n#abc#\\n#arc#\\n#a#\\n#b#\\n#####'\n\nassert solution('''2 3\nabc\narc\n\na\nb\nc\n\nd''') == '#####\\n#abc#\\n#arc#\\n#a#\\n#b#\\n#c#\\n#d#\\n#####'\n\nassert solution('''2 3\nabc\narc\n\na\nb\nc\n\nd\ne\n\nf''') == '#####\\n#abc#\\n#arc#\\n#a#\\n#b#\\n#c#\\n#d#\\n#e#\\n#f#\\n#####'\n\nassert solution('''2 3\nabc\narc\n\na\nb\nc\n\nd\ne\n\nf\ng''') == '#####\\n#abc#\\n#arc#\\n#a#\\n#b#\\n#c#\\n#d#\\n#e#\\n#f#\\n#g#\\n#####'",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"\\n#####\\n#abc#\\n#arc#\\n#####\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abc\\narc\\n\") == \"#####\\n#abc#\\n#arc#\\n#####\"\n\n\"\"\"\n\n\n\nimport unittest\nfrom unittest.mock import patch\n\n\nclass Test(unittest.TestCase):\n    def test_solution1(self):\n        with patch('builtins.input', side_effect=[\n            '2 3',\n            'abc',\n            'arc',\n        ]):\n            import solution\n            try:\n                solution.solution()\n            except StopIteration:\n                pass\n            result = [\n                '#####',\n                '#abc#',\n                '#arc#',\n                '#####',\n            ]\n            self.assertListEqual(list(solution.SOLUTION), result)\n\n    def test_solution2(self):\n        with patch('builtins.input', side_effect=[\n            '2 3',\n            'abc',\n            'arc',\n        ]):\n            import solution\n            try:\n                solution.solution()\n            except StopIteration:\n                pass\n            result = [\n                '#####',\n                '#abc#',\n                '#arc#',\n                '#####',\n            ]\n            self.assertListEqual(list(solution.SOLUTION), result)\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\"\n\"\"\"\nimport sys",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"#abc#\\n#arc#\\n#####\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\nabc\\narc') == '#####\\n#abc#\\n#arc#\\n#####'\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 3\nabc\narc''') == '#####\\n#abc#\\n#arc#\\n#####'\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\"\nassert solution(\"1 1\\n#\") == \"#\\n\"\nassert solution(\"1 1\\nabc\") == \"abc\\n\"\n",
        "num_ids_2": 47,
        "num_ids_4": 63
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\na\\nc\") == \"#####\\n#a#\\n#c#\\n#####\"\n\nwith open(\"input.txt\", 'r') as file:\n    assert solution(file.read()) == \"#####\\n#a#\\n#c#\\n#####\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"IIDID\") == 2\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"IIDID\") == 2\n\"\"\"\n\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == output()\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nIIDID\") == \"2\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"IIDID\") == 2\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\nIIDID''') == '2'\nassert solution('''4\nDIDDI''') == '1'\nassert solution('''7\nDDDDDD''') == '5'\nassert solution('''6\nIIDIID''') == '3'\nassert solution('''5\nIDIDID''') == '3'\n\n'''\nExplanation:\n\nAfter the first operation, x equals to 1.\nAfter the second operation, x equals to 2.\nAfter the third operation, x equals to 1.\nAfter the fourth operation, x equals to 2.\nAfter the fifth operation, x equals to 1.\nThe maximum value of x is 1, which means x equals to 3.\n'''\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('I') == 'I'\nassert solution('D') == 'I'\nassert solution('IDID') == 'I'\nassert solution('IIID') == 'II'\n",
        "num_ids_2": 18,
        "num_ids_4": 39
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('IIDID') == 2\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('IIIIDID') == 2\nassert solution('IIIDID') == 2\nassert solution('II') == 1\nassert solution('IIII') == 4\nassert solution('IDID') == 0\n",
        "num_ids_2": 20,
        "num_ids_4": 37
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"IIDID\") == 2\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11009 11332') == 4\n'''\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11009 11332\") == 4\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11009 11332\") == \"4\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11009 11332') == 4\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11009 11332') == 4\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11009 11332\") == 4\n\n-----",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11009 11332\") == 4\n\"\"\"\n\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11009 11332\") == 4\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '11009 11332'\n) == '4'\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11009 11332\") == 4\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 4') == '3'\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 1 4''') == '''3\nThree different colors: 1, 3, and 4.\n'''\nprint(solution(stdin))",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 4\") == \"3\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '6'\nassert solution('1 2 2') == '4'\nassert solution('1 1 1') == '3'\nassert solution('1 1 2') == '3'\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 4') == '3'",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 4\") == 3\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 1\\n2 2 2') == '2'\n\"\"\"\n\na, b, c = map(int, stdin.split())\npaint = {i for i in range(1, a + 1)}\npaint.discard(b)\npaint.discard(c)\nprint(len(paint))\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nimport math",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 4\") == \"3\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 4\") == \"3\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == 12\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == 12\n\"\"\"\n\nimport sys\nimport math\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5\\n\") == '12'\nassert solution(\"2 2 2\\n\") == '4'\nassert solution(\"1 2 3\\n\") == '6'\nassert solution(\"5 5 5\\n\") == '10'\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 58
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5 3\n1 2 3 4 5\n\"\"\") == \"12\"\n\"\"\"\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(solution(input()))\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5') == '12'\nassert solution('2\\n2\\n3\\n4\\n5') == '12'\nassert solution('3\\n2\\n3\\n4\\n5') == '12'\nassert solution('4\\n2\\n3\\n4\\n5') == '12'\nassert solution('5\\n2\\n3\\n4\\n5') == '12'\n\"\"\"",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 3 4\") == '12'\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == \"12\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '12'\nassert solution('5 3\\n2 3 4 5 1') == '12'\nassert solution('10 9\\n1 2 3 4 5 6 7 8 9 10') == '110'\nassert solution('10 9\\n1 1 1 1 1 1 1 1 1 1') == '10'\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 82
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 2 3 4') == '12'\nassert solution('5 3\\n1 2 3 4 5') == '12'\nassert solution('6 3\\n1 2 3 4 5 6') == '18'\nassert solution('4 3\\n1 2 3 4') == '12'\nassert solution('5 3\\n1 2 3 4') == '12'\n",
        "num_ids_2": 35,
        "num_ids_4": 71
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(5, 2, 7) == \"B\"\nassert solution(5, 7, 2) == \"B\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == \"B\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\"\n\nx, a, b = [int(i) for i in stdin.split()]",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 7\\n') == 'B'\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 7\") == \"B\"\nprint(\"OK\")\n\n------Solution-----\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\n-----Test Data-----\nIn the first sample, the closer store is store B.\nIn the second sample, the closer store is store A.\n'''\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 7\\n') == 'B'\n\"\"\"\n\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"5 2 7\"\n) == \"B\"\n\"\"\"\n\n\nimport sys\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == \"B\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2017/01/01\") == \"2018/01/01\"\nassert solution(\"2017/01/23\") == \"2018/01/23\"\nassert solution(\"2017/01/31\") == \"2018/01/31\"\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\"\"\"\n\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\nprint(solution(input()))",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\"\"\"\n\nS = input()\nprint(S[0:4]+'/'+'01'+'/'+S[5:])\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\"\n\nimport re",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\nassert solution(\"2017/01/08\") == \"2018/01/08\"\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == aac\n'''",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"cbaa\\ndaacc\\nacacac\") == \"aac\"\n\"\"\"\n\nfrom functools import lru_cache",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\nacac\") == \"aac\"\nassert solution(\"3\\ncbaa\") == \"aac\"\nassert solution(\"3\\ndaacc\") == \"aac\"\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 44
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\ncbaa\\ndaacc\\nacacac') == 'aac'\n\"\"\"\n\nfrom math import inf\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cbaa\") == \"aac\"\nassert solution(\"daacc\") == \"aac\"\nassert solution(\"acacac\") == \"caa\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 38
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"cbaa\") == \"aac\"\n\"\"\"\n\nfrom tools import timing",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\ncbaa\\ndaacc\\nacacac') == 'aac'\n\"\"\"\n\nimport sys",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"cbaa\") == \"aac\"\nassert solution(\"daacc\") == \"aac\"\nassert solution(\"acacac\") == \"caa\"\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 38
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\ncaa\") == \"aac\"\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"cbaa\") == \"aac\"\nassert solution(\"daacc\") == \"aac\"\nassert solution(\"acacac\") == \"caa\"\n\n---\n",
        "num_ids_2": 25,
        "num_ids_4": 38
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3\\n2 4\\n3 5') == '3'\nassert solution('3\\n1 4\\n2 5') == '0'\nassert solution('3\\n3 4\\n3 5') == '3'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n",
        "num_ids_2": 40,
        "num_ids_4": 58
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1, [24,30]) == 7\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n24 30\") == \"7\"\nassert solution(\"2\\n24 30\") == \"5\"\nassert solution(\"3\\n24 30\") == \"8\"\nassert solution(\"4\\n24 30\") == \"7\"\nassert solution(\"5\\n24 30\") == \"9\"\n\"\"\"\n\nfrom collections import namedtuple\n\nseats = namedtuple('seats', ['l', 'r'])\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n24 30\") == \"7\"\nprint(\"Teste OK\")\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n24 30\\n\") == \"7\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 24 30\") == \"7\"\nprint(solution(\"1 24 30\"))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"1\n24 30\n\"\"\") == \"7\"\n\n\"\"\"\nIt is a program that will tell you how many seats there are in the cinema.\n\nInput\nIn the first line, you will receive the number of groups of people.\nIn the next lines, you will be receiving the left border and the right border of each group.\n\nOutput\nYou need to print the number of seats there are in the cinema.\n\"\"\"",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n24 30') == '7'\nassert solution('4\\n1 3\\n2 4\\n3 5') == '3'\nassert solution('4\\n1 3\\n2 5\\n3 6') == '4'\n\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 58
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n24 30\") == \"7\"\n\"\"\"\nimport sys\n\nstdin = sys.stdin.readlines()\n\nprint(len(stdin[0].split()))",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '1\\n24 30'\n) == '7'\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"6\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4') == 6\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4') == '6'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == 6\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"6\"\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('2 2') == '1'\nassert solution('4 1') == '2'\nassert solution('4 2') == '4'\n'''",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == \"6\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4\\n') == '6'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"6\"\n\n'''\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n1 2\\n2 3\\n3 4') == '6'\nassert solution('5 2\\n1 2\\n3 4\\n4 5') == '6'\nassert solution('4 4\\n1 2\\n2 3\\n3 4') == '2'\n\n\"\"\"",
        "num_ids_2": 46,
        "num_ids_4": 69
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5') == 'Possible'\n\"\"\"\n\nA, B = map(int, input().split())",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"Possible\"\nassert solution(\"2 3\") == \"Impossible\"\n\"\"\"\n\nimport sys\nimport os",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\n') == 'Possible'\nassert solution('4 4\\n') == 'Impossible'\nassert solution('2 2\\n') == 'Impossible'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\n') == 'Possible'\nassert solution('4 3\\n') == 'Impossible'\nassert solution('1 5\\n') == 'Impossible'\nassert solution('1 1\\n') == 'Possible'\n\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5') == 'Possible'\nassert solution('8 12') == 'Impossible'\nassert solution('1 0') == 'Impossible'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5') == 'Possible'\nassert solution('4 10') == 'Impossible'\nassert solution('3 10') == 'Impossible'\nassert solution('10 10') == 'Possible'\nassert solution('3 3') == 'Impossible'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5') == 'Possible'\nassert solution('4 6') == 'Impossible'\n\"\"\"\n\na, b = [int(s) for s in input().split()]",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5') == 'Possible'\n\"\"\"\n\n\nfrom math import gcd\nfrom typing import List\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('atcoder') == 'atcoder'\nassert solution('coder') == 'coder'\nassert solution('??t??') == 'UNRESTORABLE'\nassert solution('??t??c??') == 'UNRESTORABLE'\nassert solution('?ct???c??') == 'atcoder'",
        "num_ids_2": 26,
        "num_ids_4": 60
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('tcatc????o') == 'atcoder'\nassert solution('tcatc????x') == 'UNRESTORABLE'\nassert solution('ttca') == 'ttca'\nassert solution('ccc') == 'ccc'\nassert solution('tca') == 'tca'\n",
        "num_ids_2": 34,
        "num_ids_4": 58
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('?t?c??') == 'atcoder'\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('?tc????') == 'atcoder'\n\n\"\"\"\nimport re\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"t?c??????c\") == \"atcoder\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('?tc????') == 'atcoder'\nassert solution('coder') == 'atcoder'\nassert solution('ztcoder') == 'ztcoder'\nassert solution('abd') == 'abd'\nassert solution('a') == 'a'\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(s) == 'atcoder'\n\"\"\"\n\ns = input()\nt = input()",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"atcoder\") == \"atcoder\"\nassert solution(\"btcoder\") == \"atcoder\"\nassert solution(\"ctcoder\") == \"atcoder\"\nassert solution(\"ztcoder\") == \"atcoder\"\nassert solution(\"btc\") == \"atcoder\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('?tc????') == 'atcoder'\nassert solution('coder') == 'coder'\nassert solution('coc????') == 'coc????'\nassert solution('coc???c') == 'coc???c'\nassert solution('coc?????') == 'coc?????'\n",
        "num_ids_2": 26,
        "num_ids_4": 56
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('tc????') == 'atcoder'\nassert solution('tb???') == 'UNRESTORABLE'\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('23') == 23\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2002\\n2017') == '2032'\n\"\"\"\n\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\"\n\nimport unittest\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\"\n\nimport math",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\n----\n\n\nWrite a program that takes a pair of integers m and n as input and prints a pair of positive integers,\nsuch that their sum is equal to m and their product is equal to n.\n\nIf there are more than one pair of such integers, the program should print the first pair in the array.\n\nNote:\nm and n are positive integers, less than or equal to 1000.\n\nInput\nThe first line of the input contains the value of m and the second line of the input contains the value of n.\n\nOutput\nPrint the pair of integers in the format:\n\"{first number} {second number}\"\n\nIf no such pair exists, the program should print:\n\"No\"\n\nConstraints\n0 \\leq m, n \\leq 1000\n\nSample Input\n3\n4\n\nSample Output\n3 7\n\n----\n\n\nGiven two integers a and b, find the maximal value of d such that x/d \u2264 a and y/d \u2264 b.\n\nx and y are two very large positive integers.\n\nWrite a function:",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2001\\n2010\\n\") == \"2010\"\n\"\"\"\n\na, b = [int(x) for x in input().split()]\nprint(int((a+b)/2))\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2002\\n2017') == '2032'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2002\\n2017') == '2032'\n\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"string\") == 4\nassert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n",
        "num_ids_2": 16,
        "num_ids_4": 36
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"string\") == 4\nassert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n",
        "num_ids_2": 16,
        "num_ids_4": 36
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"string\") == 4\nassert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n",
        "num_ids_2": 16,
        "num_ids_4": 36
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('a') == 1\nassert solution('aa') == 0\nassert solution('abc') == 2\nassert solution('abcc') == 1\nassert solution('abccc') == 2\n",
        "num_ids_2": 16,
        "num_ids_4": 33
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"string\") == 4\nassert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 36
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"string\") == \"4\"\nassert solution(\"letter\") == \"2\"\nassert solution(\"aaaaaa\") == \"0\"\nassert solution(\"uncopyrightable\") == \"13\"\nassert solution(\"ambidextrously\") == \"12\"\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"string\") == 4\nassert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n",
        "num_ids_2": 16,
        "num_ids_4": 36
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaaaaa\") == \"0\"\nassert solution(\"uncopyrightable\") == \"13\"\nassert solution(\"ambidextrously\") == \"12\"\nassert solution(\"assesses\") == \"1\"\n\nprint(\"All tests passed.\")\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(string) == answer\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"string\") == 4\nassert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n",
        "num_ids_2": 16,
        "num_ids_4": 36
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10000 5\") == \"AC\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10000 5\") == \"AC\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10000 5\") == \"AC\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('19931568 1000000 6') == 'TLE'\n\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 58
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('19931568 1000000 6') == 'TLE'\n",
        "num_ids_2": 28,
        "num_ids_4": 44
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'\n\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('19931568 1000000 6') == 'TLE'\n",
        "num_ids_2": 27,
        "num_ids_4": 57
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'\n\nSample Case #1:\n\nInput\n100000000\n500\n3\n\nOutput\nTLE\n\nSample Case #2:\n\nInput\n100000000\n10001\n5\n\nOutput\nAC\n\nSample Case #3:\n\nInput\n100000000\n10001\n7\n\nOutput\nAC\n\nSample Case #4:\n\nInput\n100000000\n10001\n2\n\nOutput\nAC\n\nSample Case #5:\n\nInput\n100000000\n10001\n6\n\nOutput\nAC\n\n----",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\n\nprint(\"Success\")",
        "num_ids_2": 111,
        "num_ids_4": 166
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\n\"\"\"\n",
        "num_ids_2": 108,
        "num_ids_4": 163
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0') == '4 4 8 0\\n8 4 0 0\\n32 32 0 0'\nassert solution('4 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n2') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64'\nassert solution('2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n2') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64'\n\"\"\"\n",
        "num_ids_2": 104,
        "num_ids_4": 159
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\") == \"2 16 8 2\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\") == \"2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64\\n\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\\n\"\n\nprint(\"The third sample input is invalid.\")",
        "num_ids_2": 115,
        "num_ids_4": 229
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n8 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\"\n\"\"\"\n\nimport sys\nimport itertools\nimport math\n\nassert len(sys.argv) == 2\n\nstdin = open(sys.argv[1], \"r\").read()\n\nassert len(stdin.split(\"\\n\")) == 5\n\ngrid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n\nmoves = {\n    \"1\": [1, 0],\n    \"2\": [0, 1],\n    \"3\": [-1, 0],\n    \"4\": [0, -1]\n}\n\nfor row in stdin.split(\"\\n\")[1:]:\n    x, y, n, t = map(int, row.split(\" \"))\n    grid[x][y] = n\n",
        "num_ids_2": 111,
        "num_ids_4": 136
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 0 0 2\\\\n4 16 8 2\\\\n2 64 32 4\\\\n1024 1024 64 0\\\\n0\\\\n\") == \"4 0 0 0\\\\n4 16 8 2\\\\n2 64 32 4\\\\n2048 64 0 0\"\n\"\"\"\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0'\n) == '4 0 0 0\\n8 16 8 0\\n32 32 0 0\\n32 32 32 0'\n\nassert solution(\n    '2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0'\n) == '8 4 0 0\\n4 16 8 0\\n32 32 0 0\\n32 32 32 0'\n\nassert solution(\n    '2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2'\n) == '0 0 0 0\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64'\n\nassert solution(\n    '2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3'\n) == '2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64'\n\nprint(\"All tests passed.\")\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n0''') == '4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0'\nassert solution('''2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n1''') == '2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0'\nassert solution('''2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n2''') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64'\nassert solution('''2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n3''') == '2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input) == output\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n''') == '''\n4 0 0 0\n4 16 8 2\n2 64 32 4\n2048 64 0 0\n'''\n\nassert solution('''\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n0\n''') == '''\n0 0 0 4\n4 16 8 2\n2 64 32 4\n0 0 2048 64\n'''\n\nassert solution('''\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n2\n''') == '''\n0 0 0 4\n4 16 8 2\n2 64 32 4\n0 0 2048 64\n'''\n\nassert solution('''\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n3\n''') == '''\n0 0 0 0\n4 16 8 0\n2 64 32 4\n0 0 2048 64\n'''\n\nassert solution('''\n2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n0\n''') == '''\n4 0 0 0\n8 4 0 0\n32 32 0 0\n32 32 32 0\n'''",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"3\"\nassert solution(\"CH3OH 1\") == \"1\"\n",
        "num_ids_2": 21,
        "num_ids_4": 48
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"H 2\") == '0'\nassert solution(\"O\") == '0'\nassert solution(\"C2H6 10\") == '6'\nassert solution(\"C3H8\") == '1'\nassert solution(\"CH3OH 1\") == '1'\n",
        "num_ids_2": 21,
        "num_ids_4": 48
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"CH3OH 1\") == 1\nassert solution(\"C2H6 10\") == 6\nassert solution(\"CH4\") == 1\nassert solution(\"C6H6OCH2O 10\") == 0\nassert solution(\"C6H14 10\") == 12\n",
        "num_ids_2": 23,
        "num_ids_4": 48
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"C6H14 10\") == \"12\"\n\"\"\"\n\nimport sys\nfrom collections import Counter",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"H 2\\nO\") == \"0\"\nassert solution(\"C2H6 10\\nC3H8\") == \"6\"\nassert solution(\"CH3OH 1\\nCH4\") == \"1\"\nassert solution(\"C6H6OCH2O 10\\nHCN\") == \"0\"\nassert solution(\"C6H14 10\\nC5H10\") == \"12\"\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 73
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"C2H6 10\") == \"0\"\nassert solution(\"C3H8\") == \"6\"\nassert solution(\"CH3OH 1\") == \"1\"\nassert solution(\"C6H6OCH2O 10\") == \"0\"\nassert solution(\"C6H14 10\") == \"12\"\n",
        "num_ids_2": 27,
        "num_ids_4": 58
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"6\"\nassert solution(\"CH3OH 1\") == \"1\"\nassert solution(\"C6H6OCH2O 10\") == \"0\"\nassert solution(\"C6H14 10\") == \"12\"\n",
        "num_ids_2": 27,
        "num_ids_4": 58
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\nH2\nO''') == '0'\nassert solution('''\nC2\nH6''') == '0'\nassert solution('''\nC6\nH12''') == '6'\nassert solution('''\nC6\nH10''') == '6'\nassert solution('''\nC6\nH2O''') == '6'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution
        "num_ids_2": 1433,
        "num_ids_4": 1433
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"H2O 5\") == \"2\"\nassert solution(\"C2H6 1\") == \"0\"\nassert solution(\"C3H8 1\") == \"0\"\nassert solution(\"CH3OH 1\") == \"1\"\nassert solution(\"C6H6OCH2O 10\") == \"6\"\n",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\n\"\"\"\n\n\"\"\"\nTLE\n",
        "num_ids_2": 41,
        "num_ids_4": 77
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == 'PASS'\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == 'FAIL'\nassert solution(\"ABC HAPPYBIRTHDAY\") == 'FAIL'\nassert solution(\"SECRET SOMECHORESARETOUGH\") == 'PASS'\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 77
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n\"\"\"\n\nimport sys\nfrom collections import Counter\n",
        "num_ids_2": 41,
        "num_ids_4": 77
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(STDIN_SIO.readline()) == \"PASS\"\n\"\"\"\n\nfrom itertools import zip_longest",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 41,
        "num_ids_4": 77
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\n\"\"\"\n\nstdin = \"\"\"ABC HAPPYBIRTHDAYCACEY\nABC TRAGICBIRTHDAYCACEY\nSECRET SOMECHORESARETOUGH\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 77
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == 'PASS'\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == 'FAIL'\nassert solution(\"ABC HAPPYBIRTHDAY\") == 'FAIL'\nassert solution(\"SECRET SOMECHORESARETOUGH\") == 'PASS'\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 77
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''ABC HAPPYBIRTHDAYCACEY\nABC TRAGICBIRTHDAYCACEY\nABC HAPPYBIRTHDAY\nSECRET SOMECHORESARETOUGH\n''') == 'PASS'\nassert solution('''ABC HAPPYBIRTHDAYCACEY\nABC TRAGICBIRTHDAYCACEY\nABC HAPPYBIRTHDAY\nSECRET SOMECHORESARETOUGH\n''') == 'FAIL'\nassert solution('''ABC HAPPYBIRTHDAYCACEY\nABC TRAGICBIRTHDAYCACEY\nABC HAPPYBIRTHDAY\nSECRET SOMECHORESARETOUGH\n''') == 'FAIL'\nassert solution('''ABC HAPPYBIRTHDAYCACEY\nABC TRAGICBIRTHDAYCACEY\nABC HAPPYBIRTHDAY\nSECRET SOMECHORESARETOUGH\n''') == 'PASS'\n\n\n\n'''\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n",
        "num_ids_2": 41,
        "num_ids_4": 77
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n",
        "num_ids_2": 41,
        "num_ids_4": 77
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"[ { { () () () } ]\") == \"[\"\nassert solution(\"([] [] ]\") == \"]\"\nassert solution(\"(() [] ())\") == \"]\"\nassert solution(\"([] ())\") == \"ok so far\"\nassert solution(\"()\") == \"ok so far\"\n",
        "num_ids_2": 28,
        "num_ids_4": 54
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('([] [] ]') == ']'\nassert solution('(([] [[]] ())') == 'ok so far'\nassert solution('[ { { () () () () } } ] () {}') == ']'\nassert solution('[ { ((())) } ] () {}') == 'ok so far'\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 68
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('([] [] )') == ']'\nassert solution('[([] [])]') == ')'\nassert solution('[([] {})]') == ']'\nassert solution('[[()]]') == ')'\nassert solution('[([] {}})]') == ']'\n",
        "num_ids_2": 26,
        "num_ids_4": 50
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('([] [] ]') == ']'\nassert solution('(([] [[]] ())') == 'ok so far'\nassert solution('[ { { () () () () } } ] () {}') == ']'\nassert solution('[ { [[()]] (({})) } ] () {}') == 'ok so far'\nassert solution('[ { [ { [ [ { [ [ {} ] ] ] ] ] ] } ] } ] {}') == 'ok so far'\n",
        "num_ids_2": 28,
        "num_ids_4": 72
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"([] [] ]\") == \"]\"\nassert solution(\"(([] [[]] ())\") == \"ok so far\"\nassert solution(\"[ { { () () () () } } ] () {}\") == \"]\"\nassert solution(\"[ { ((())) } ] () {}\") == \"ok so far\"\n",
        "num_ids_2": 28,
        "num_ids_4": 68
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"[ { { () () () } ]\") == \"]\"\nassert solution(\"([] [] ]\") == \"]\"\nassert solution(\"[ { { () () () } } ]\") == \"]\"\nassert solution(\"[ { { () () () } } ]\") == \"]\"\nassert solution(\"[]\") == \"ok so far\"\n",
        "num_ids_2": 28,
        "num_ids_4": 62
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"[ { { () () () () } ]\") == \"[\"\nassert solution(\"([] [] ]\") == \"]\"\nassert solution(\"(()\") == \")\"\nassert solution(\"()\") == \"ok so far\"\nassert solution(\"( ( ) )\") == \")\"\n",
        "num_ids_2": 29,
        "num_ids_4": 51
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"[ { [[()]] (({})) } ] () {}\") == \"ok so far\"\nassert solution(\"([] [] ]\") == \"] 3\"\nassert solution(\"[ ([] [] ]\") == \"ok so far\"\nassert solution(\"[] {[()]} \") == \"ok so far\"\n\"\"\"\n\nimport re",
        "num_ids_2": 38,
        "num_ids_4": 71
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"[ { { () } ]\") == \"]\"\nassert solution(\"[ { { () } ]\") == \"\"\nassert solution(\"(()\") == \")\"\nassert solution(\"( [ { [ ] ( ) ) } ]\") == \"]\"\nassert solution(\"([] ( ) )\") == \")\"\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('([] [] )') == ']'\nassert solution('[[]]') == ']'\nassert solution('[{}]') == ']'\nassert solution('([] [])[]{}{') == ']'\nassert solution('([] [])[]{}{') == ']'\n",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('abc') == ''\nassert solution('apple') == 'Fair Game'\nassert solution('apple apple') == 'Fair Game'\n",
        "num_ids_2": 16,
        "num_ids_4": 35
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'Fair Game'\n\n\"\"\"\n\n\"\"\"\nn = int(stdin.readline().strip())",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\napple\\near\\nreal\\nletters\\nstyle') == 'Fair Game'\nassert solution('3\\napple\\nextra\\napple') == 'Player 1 lost'\nassert solution('2\\napple\\nneat') == 'Player 2 lost'\n\"\"\"\n\nfrom collections import deque\n",
        "num_ids_2": 46,
        "num_ids_4": 65
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'Player 1 lost'\nassert solution('abc') == 'Fair Game'\nassert solution('abcd') == 'Player 2 lost'\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\napple\near\nreal\nletters\nstyle\n''') == 'Fair Game'\nassert solution('''3\napple\nextra\napple\n''') == 'Player 1 lost'\nassert solution('''2\napple\nneat\napple\n''') == 'Player 2 lost'\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\") == \"Fair Game\"\nassert solution(\"3\\napple\\nextra\\napple\") == \"Player 1 lost\"\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\napple\\near\\nreal\\nletters\\nstyle') == 'Fair Game'\nassert solution('3\\napple\\nextra\\napple') == 'Player 1 lost'\nassert solution('2\\napple\\neat') == 'Player 2 lost'\n\"\"\"\nimport sys",
        "num_ids_2": 46,
        "num_ids_4": 64
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5\napple\near\nreal\nletters\nstyle\n\"\"\") == \"Fair Game\"\nassert solution(\"\"\"3\napple\nextra\napple\n\"\"\") == \"Player 1 lost\"\nassert solution(\"\"\"2\napple\nneat\n\"\"\") == \"Player 2 lost\"\n",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == \"Fair Game\"\n\"\"\"\nimport re\n\nassert re.findall(r\"([aeiou])\", test_input_1) == [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\nwhile True:\n    N = int(input())\n    if N == 0:\n        break\n    answers = []\n    for i in range(N):\n        answers.append(input())\n    tot = []\n    for i in range(N):\n        tot.append(answers[i])\n        tot.append(answers[i][-1])\n    tot.sort()\n    i = 0\n    while True:\n        if tot[i] == tot[i+1]:\n            i += 1\n        else:\n            break\n    print(\"Player 1 lost\" if tot[i] == tot[i+2] else \"Fair Game\")\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"Fair Game\"\nassert solution(\"\") == \"Player 1 lost\"\nassert solution(\"\") == \"Player 2 lost\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000\\n*\\n100\") == \"100000\"\nassert solution(\"10000\\n+\\n10\") == \"10010\"\nassert solution(\"10\\n+\\n1000\") == \"1010\"\n\"\"\"\n\nimport io\nimport re\n",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 * 100 + 10\") == \"100010\"\nassert solution(\"10000 + 10\") == \"1010\"\nassert solution(\"10 + 1000\") == \"1010\"\nassert solution(\"10 * 1000\") == \"100000\"\n",
        "num_ids_2": 28,
        "num_ids_4": 54
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 * 100\") == \"100000\"\nassert solution(\"10000 + 10\") == \"10010\"\n\nprint(solution(\"1000 * 100\"))\nprint(solution(\"10000 + 10\"))\n\n\"\"\"\nimport sys\n\nclass Solution:\n    def __init__(self):\n        self.signs = [\"+\", \"*\"]\n\n    def solution(self, a: str, s: str, b: str) -> str:\n        a = int(a)\n        b = int(b)\n        if s == \"+\":\n            return str(a + b)\n        else:\n            return str(a * b)",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000 * 100\") == \"10000\"\n\n\"\"\"\nimport sys\nfrom typing import List, Set",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000\\n*\\n100\") == \"100000\"\nassert solution(\"10000\\n+\\n10\") == \"1010\"\nassert solution(\"10\\n+\\n1000\") == \"1010\"",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000\\n*\\n100\\n\") == \"100000\"\nassert solution(\"10000\\n+\\n10\\n\") == \"10010\"\nassert solution(\"10\\n+\\n1000\\n\") == \"1010\"\nassert solution(\"10\\n*\\n1000\\n\") == \"10000\"\n\"\"\"\n\na = int(input())\nop = input()\nb = int(input())\n",
        "num_ids_2": 38,
        "num_ids_4": 75
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000\\n*\\n100\\n\") == \"100000\"\nassert solution(\"10000\\n+\\n10\\n\") == \"10010\"\nassert solution(\"10\\n+\\n1000\\n\") == \"1010\"\n\"\"\"\nimport re\nimport math\n\noperations = {'+':lambda x,y:x+y, '*':lambda x,y:x*y}",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 * 10 + 10\") == \"1010\"\nassert solution(\"1000 + 1000\") == \"1010\"\nassert solution(\"1000000\") == \"10101100\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 41
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1+1') == '10'\nassert solution('1*1') == '10'\nassert solution('1+10') == '11'\nassert solution('1*10') == '10'\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000*100\") == \"100000\"\n\"\"\"\n\nA = int(input())\noperator = input()\nB = int(input())",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 out\") == \"3\\n\"\nassert solution(\"8 in\") == \"6\\n\"\nassert solution(\"52 out\") == \"8\\n\"\n\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 out\") == \"3\\n\"\nassert solution(\"8 in\") == \"6\\n\"\nassert solution(\"52 out\") == \"8\\n\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\nassert solution('52 in') == '8'\n\nprint(solution('8 out'))\nprint(solution('8 in'))\nprint(solution('52 out'))\nprint(solution('52 in'))\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 out') == '3\\n'\nassert solution('8 in') == '6\\n'\nassert solution('52 out') == '8\\n'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\"\"\"\n\n\nimport sys\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 60
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\"\n\nimport re",
        "num_ids_2": 41,
        "num_ids_4": 60
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 60
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\nprint(\"Success\")\n\"\"\"\n\nimport re\n",
        "num_ids_2": 41,
        "num_ids_4": 60
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\n",
        "num_ids_2": 41,
        "num_ids_4": 60
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"",
        "num_ids_2": 41,
        "num_ids_4": 60
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 60
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\nassert solution(\"xenolaxios mox\") == \"xenolaxiosexmox\"\nassert solution(\"tevexa maxos\") == \"tevexaxexmaxos\"\n",
        "num_ids_2": 41,
        "num_ids_4": 84
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\nprint('The code ran Correctly')\n",
        "num_ids_2": 41,
        "num_ids_4": 60
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\n------Problem 011A----------\n\nIn the United States, car insurance rates typically vary widely. The rates for all car manufacturers in the United States are compiled into a database and then randomly selected. Here is a histogram of the insurance rates for the top 500 US car manufacturers in 2010.\n\nThe horizontal axis is the insurance rate. The vertical axis is the number of car manufacturers with the corresponding insurance rate.\n\nPlot a line graph of the insurance rates for the top 500 US car manufacturers in 2010. Assume the x-axis has 500 bars, which is the number of car manufacturers in the database. Note that the insurance rates vary widely, so the exact numbers on the x-axis are meaningless. Rather, the x-axis represents the midpoint of each bar in the histogram, and the x-axis label should indicate this.\n\nPlot the line graph of the insurance rates for the top 500 US car manufacturers in 2010. Assume the x-axis has 500 bars, which is the number of car manufacturers in the database. Note that the insurance rates vary widely, so the exact numbers on the x-axis are meaningless. Rather, the x-axis represents the midpoint of each bar in the histogram, and the x-axis label should indicate this.\n\n-----Problem 011B-----\n\nThe following code generates a random list of $n$ numbers, where $n$ is the number of bars in the histogram.\n\nimport random\nimport numpy as np\n\nn = 500",
        "num_ids_2": 41,
        "num_ids_4": 60
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(2018) == 'yes'\nassert solution(2019) == 'no'\nassert solution(2020) == 'yes'\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\nprint(\"Success\")",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'yes'\nassert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\"\n\nyear = int(input())\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n\"\"\"\n\nimport datetime",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\n\n\"\"\"\nfrom functools import lru_cache\nfrom collections import Counter\nfrom typing import List",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\\n3\") == '64'\nassert solution(\"10 10 10 20 0 10 10 10 10 10\\n4\") == '0'\nassert solution(\"10 10 10 20 0 10 10 10 10 10\\n4\") == '0'\nprint('Passed')\n\n------Time Complexity------\nO(K * N * N!), where N is the length of stdin and K is the length of the number of cards.\n\n------Space Complexity------\nO(K * N), where N is the length of stdin and K is the length of the number of cards.\n\n\"\"\"",
        "num_ids_2": 44,
        "num_ids_4": 66
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 0 0 0 4 0 0 0 0 4') == '64'\nassert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 0 0 0 4 0 0 0 0 4') == '64'\nassert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n\"\"\"\n\nn = list(map(int, stdin.split()))\n\nk = int(stdin.split()[-1])\n\nans = 1\n\nfor i in n:\n    if i > 0:\n        ans *= k\n        k -= 1\n\nprint(ans)\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 0 0 0 4 0 0 0 0 4''') == '64'\nassert solution('''10 10 10 20 0 10 10 10 10 10''') == '1820000'\n\"\"\"",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 0\\n30 270 995 996 997 998 999') == '2 330'\n\"\"\"\n\n\"\"\"\n[\uc544\uc774\ub514\uc5b4]\n\ub9e8 \ucc98\uc74c\uc740 \uc804\uccb4\ub97c \uc0dd\uac01\ud574\uc11c \ucc98\ub9ac\ud574\ubcf4\uace0 \uc2dc\uac04\uc744 \uc904\uc774\ub294 \ubc29\uc2dd\uc744 \uc120\ud0dd\ud588\ub2e4.\n\uac01 \uacbd\uc6b0\uc5d0\uc11c \ub450\ubc88\uc9f8 \ud504\ub85c\uadf8\ub798\ubc0d \ubb38\uc81c\ubd80\ud130 \ucd5c\uc18c \uc2dc\uac04\uc744 \uac00\uc9c0\uace0 \ub2e4\ub978 \ud504\ub85c\uadf8\ub798\ubc0d \ubb38\uc81c\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\ub294\uc9c0 \uc5c6\ub294\uc9c0\ub97c \uc0dd\uac01\ud558\uace0 \ucd5c\uc18c \uc2dc\uac04\uc744 \ucc3e\uc544\ub0c8\ub2e4.\n\uc774 \ubb38\uc81c\ub294 \uc5ec\ub7ec\ubd84\uc774 \ud480\uc5b4\uc57c \ud558\ub294 \ubb38\uc81c\uc778\ub370 \uc5ec\ub7ec\ubd84\uc774 \uc81c\uc77c \uc624\ub798\ub3c4\uc640\uc11c \ucf54\ub4dc\ub97c \uc9dc\ub294\ub370 \uc9e7\uc740 \uc2dc\uac04\uc744 \uac16\ucd94\uace0 \uc2f6\uc5b4\ud558\ub294 \ubb38\uc81c\uc774\ub2e4.\n\uc774 \ubb38\uc81c\ub294 \uc785\ub825 \ucc98\ub9ac\ub97c \ud1b5\ud574 \uc804\ubd80 \ub2e4 \uc77d\uc5c8\uc73c\ubbc0\ub85c \uc804\uccb4\ub97c \ucc98\ub9ac\ud558\ub294 \ubc18\ubcf5\ubb38\uc744 \uc774\uc6a9\ud55c\ub2e4.\n\ud30c\uc774\uc36c\uc5d0\uc11c\ub294 dictionary \uac00 \uc788\ub2e4\ub294 \uac83\uc744 \uba85\uc2ec\ud558\uc790.\n\ub610\ud55c \uba87\uba87 \uacbd\uc6b0\uc5d0\ub294 \ube60\ub978 \uc18d\ub3c4\ub97c \uc704\ud574 \uc804\uccb4 \uc2dc\uac04\uc744 \uc138\uae30 \uc704\ud55c \ubcc0\uc218\uc5d0\uc11c \ucd5c\ub300\ub85c \uc624\ub798\ub3c4\uc640\uc11c \uc785\ub825\uc744 \ubc1b\ub294 \ucd5c\ub300 \uc2dc\uac04\uc744 \ubc1b\uc544\ub0c8\ub2e4.\n\"\"\"\n\n\nimport heapq",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == '2 330'\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == '2 570'\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == '0 0'\nprint('Test passed')\n",
        "num_ids_2": 50,
        "num_ids_4": 75
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\n\nprint(solution(input()))\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"\nprint('Success')\n\"\"\"",
        "num_ids_2": 50,
        "num_ids_4": 75
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 0\\n30 270 995 996 997 998 999') == '2 330'\nassert solution('7 1\\n30 270 995 996 997 998 999') == '2 570'\nassert solution('7 2\\n30 270 995 996 997 998 999') == '0 0'\n\nprint(solution(stdin))\n\"\"\"\n\nimport sys\nimport string\n\nN, p = map(int, sys.stdin.readline().split())\ndurations = list(map(int, sys.stdin.readline().split()))\ndurations.sort()\n\nminutes = 0\n\nfor i in range(N):\n    if minutes + durations[i] > 300:\n        break\n    minutes += durations[i]\n\nprint(str(minutes) + \" \" + str(minutes + 300))\n",
        "num_ids_2": 50,
        "num_ids_4": 75
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''7 0\n30 270 995 996 997 998 999''') == '2 330'\nassert solution('''7 1\n30 270 995 996 997 998 999''') == '2 570'\nassert solution('''7 2\n30 270 995 996 997 998 999''') == '0 0'\n'''\n) == '2 330'\nassert solution('''\n5 3\n40 50 42 60 60\n''') == '0 0'\nassert solution('''\n3 2\n40 40\n40 60\n60 40\n''') == '0 0'\n",
        "num_ids_2": 16,
        "num_ids_4": 30
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 0\\n30 270 995 996 997 998 999') == '2 330'\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 1\\n30 270 995 996 997 998 999\") == \"2 570\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nprint(\"Well done!\")\n\n\"\"\"\n\nn, p = map(int, input().split())\nl = [int(x) for x in input().split()]\n\nl = sorted(l)\n\ntime = 0\ncount = 0\nfor i,x in enumerate(l):\n    if x>=time+300:\n        time += 300\n        count += 1\n    if i == p:\n        break\n\nprint(count, time)\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n7 0\n30 270 995 996 997 998 999\n\"\"\"\n) == \"2 330\"\n\nassert solution(\n\"\"\"\n7 1\n30 270 995 996 997 998 999\n\"\"\"\n) == \"2 570\"\n\nassert solution(\n\"\"\"\n7 2\n30 270 995 996 997 998 999\n\"\"\"\n) == \"0 0\"\n\nassert solution(\n\"\"\"\n8 2\n30 270 995 996 997 998 999\n\"\"\"\n) == \"0 570\"\n\nassert solution(\n\"\"\"\n8 1\n30 270 995 996 997 998 999\n\"\"\"\n) == \"2 570\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabba') == 2\nassert solution('abcdef') == 6\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 27
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\n\nprint('All tests passed.')\n",
        "num_ids_2": 19,
        "num_ids_4": 28
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abbaabba') == 2\nassert solution('abccabba') == 2\nassert solution('abccbab') == 3\nassert solution('abcdef') == 6\n\"\"\"\n\nimport collections",
        "num_ids_2": 19,
        "num_ids_4": 39
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abccba\") == \"2\"\nassert solution(\"abcdef\") == \"6\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == 26\nassert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\n",
        "num_ids_2": 23,
        "num_ids_4": 53
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6",
        "num_ids_2": 19,
        "num_ids_4": 28
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'a'\nassert solution('ab') == 'a'\nassert solution('aab') == 'a'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abbaabbaabba\") == 2\nassert solution(\"aaaaaaaa\") == 1\nassert solution(\"abcdef\") == 6\nprint('Success')\n\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 28
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abccba\") == \"2\"\nassert solution(\"abb\") == \"1\"\nassert solution(\"abccab\") == \"4\"\nassert solution(\"abccabba\") == \"4\"\nassert solution(\"abccab\") == \"4\"\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abcdef') == 6\nassert solution('abcde') == 2\nassert solution('abcdea') == 6\nassert solution('abcdefa') == 6\nassert solution('abcdefaa') == 6\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abbaabba\") == 2\nassert solution(\"abcdef\") == 6\n\"\"\"\nimport sys\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"0\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"0\\n1\"\n\nprint('Successfully passed all test cases!')",
        "num_ids_2": 68,
        "num_ids_4": 122
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n\") == \"2\\n1 2\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 12\n1 2 4 5\n6 8 12 18 26 28 30 34 36 37 39 40''') == '''2\n1 2'''\nassert solution('''5 10\n1 2 3 4 5\n0 1 2 3 4 5 6 7 8 9''') == '''1\n1'''\nassert solution('''3 6\n1 2 4\n11 12 15 19 24 30''') == '''0\n1'''",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    4 12\n    1 2 4 5\n    6 8 12 18 26 28 30 34 36 37 39 40\n    \"\"\"\n) == \"\"\"\n2\n1 2\n\"\"\"\n\nassert solution(\n    \"\"\"\n    5 10\n    1 2 3 4 5\n    0 1 2 3 4 5 6 7 8 9\n    \"\"\"\n) == \"\"\"\n1\n1\n\"\"\"\n\nassert solution(\n    \"\"\"\n    3 6\n    1 2 4\n    11 12 15 19 24 30\n    \"\"\"\n) == \"\"\"\n0\n\"\"\"\n\nprint(solution(input()))",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9') == '1\\n1'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30') == '0\\n1'\n\n\"\"\"",
        "num_ids_2": 68,
        "num_ids_4": 95
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"0\\n1\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nM, N = stdin.readline().split()\nM, N = int(M), int(N)\n\ntimes = [int(i) for i in stdin.readline().split()]\ndistances = [int(i) for i in stdin.readline().split()]\n",
        "num_ids_2": 68,
        "num_ids_4": 95
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9') == '1\\n1'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30') == '0\\n1'\n\"\"\"",
        "num_ids_2": 68,
        "num_ids_4": 95
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == '2\\n1 2'\n\"\"\"\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"0\\n1\"\n",
        "num_ids_2": 68,
        "num_ids_4": 95
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n\"\n) == \"2\\n1 2\\n\"\n\n\"\"\"\nimport sys\nfrom typing import Iterable\n\nassert len(sys.argv) == 3\ninp = sys.argv[1]\nans = sys.argv[2]\n\nm, n = [int(i) for i in inp.split()]\nt = [int(i) for i in sys.stdin.readline().split()]\nx = [int(i) for i in sys.stdin.readline().split()]\n\nfrom collections import Counter",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5551212\") == 1\nassert solution(\"5519876\") == 0\nassert solution(\"5055555\") == 0\n\nprint('Hooray!')\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5551212') == 1\nassert solution('5519876') == 0\nassert solution('5055555') == 0\n\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"5551212\"\"\"\n        output = \"\"\"1\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"5519876\"\"\"\n        output = \"\"\"0\"\"\"\n        self.",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5551212\") == 1\nassert solution(\"555121234\") == 0\nassert solution(\"5551212123\") == 0\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n\nprint('Hooray!')\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5551212\") == 1\nassert solution(\"5519876\") == 0\nassert solution(\"5055555\") == 0\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5551212\") == 1\nassert solution(\"5519876\") == 0\nassert solution(\"5055555\") == 0\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"5519876\") == \"0\"\nassert solution(\"5055555\") == \"0\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"5519876\") == \"0\"\nassert solution(\"5055555\") == \"0\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\n\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 44
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\n",
        "num_ids_2": 28,
        "num_ids_4": 44
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\nassert solution(\"25/1\") == \"25/1\"\nassert solution(\"10/1\") == \"10/1\"\n\nSample Input 1:\n3/2\nSample Output 1:\n1/2\nSample Input 2:\n0/1\nSample Output 2:\n0/1\n\"\"\"\n\n\"\"\"\n\ud835\udc61\u2081\u22c5\ud835\udc61\u2081 = \ud835\udc61\u2082\u22c5\ud835\udc61\u2082\n\ud835\udc61\u2081 = \ud835\udc61\u2082\n\ud835\udc61\u2081 \u2212 \ud835\udc61\u2082 = 0\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 57
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\n\"\"\"\n\nimport math\nimport re\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 44
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\nprint(solution(\"32/1\"))\nprint(solution(\"33/1\"))\nprint(solution(\"-40/1\"))\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'",
        "num_ids_2": 28,
        "num_ids_4": 44
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\nC E G\\nD F# A') == \"Transposition\"\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == \"Inversion\"\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == \"Retrograde\"\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == \"Retrograde\"\nassert solution('3\\nC E G\\nD F# A') == \"Transposition\"\n",
        "num_ids_2": 53,
        "num_ids_4": 113
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"2\\nC E G\\nD F# A\"\n) == \"Transposition\"\n\nassert solution(\n\"7\\nC C G G A A G\\nC C F F D# D# F\"\n) == \"Inversion\"\n\nassert solution(\n\"7\\nA B C D E F G\\nG F E D C B A\"\n) == \"Retrograde\"\n\nassert solution(\n\"3\\nC E G\\nD F# A\"\n) == \"Nonsense\"\n\n-----Note-----\nNote that inversions are always transpositions of each other.\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"",
        "num_ids_2": 53,
        "num_ids_4": 83
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\nC E G\\nD F# A') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == 'Retrograde'\n\n\"\"\"\n\nimport sys\nimport math\n\nsys.setrecursionlimit(10000)",
        "num_ids_2": 53,
        "num_ids_4": 83
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\nassert solution(\"4\\nC E G A\\nD F# A\") == \"Nonsense\"\n",
        "num_ids_2": 53,
        "num_ids_4": 106
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"",
        "num_ids_2": 53,
        "num_ids_4": 83
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Nonsense\"\nassert solution(\"7\\nF G E D C B A\\nG F E D C B A\") == \"Nonsense\"\n",
        "num_ids_2": 53,
        "num_ids_4": 112
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\nassert solution(\"3\\nF# C# D# E# G#\") == \"Nonsense\"\nassert solution(\"4\\nD C G F# A#\") == \"Nonsense\"\n",
        "num_ids_2": 53,
        "num_ids_4": 106
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\nC E G\\nD F# A\\n') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F\\n') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A\\n') == 'Retrograde'\n",
        "num_ids_2": 57,
        "num_ids_4": 89
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == solution(stdin)\nprint(solution(stdin))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"I love ba-na-na\"\n) == \"Gah kove bababa\"\nassert solution(\n    \"Cat-a-pil-lar\"\n) == \"Catacillar\"\nassert solution(\n    \"Co-ding is the best\"\n) == \"Cociccah gs the bestuh\"\n\"\"\"\n\nimport re",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 64
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\"\"\"\nimport sys",
        "num_ids_2": 41,
        "num_ids_4": 64
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\n\"\"\"\n\nimport re",
        "num_ids_2": 41,
        "num_ids_4": 64
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 64
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"",
        "num_ids_2": 41,
        "num_ids_4": 64
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\"\"\"\n\nimport re",
        "num_ids_2": 41,
        "num_ids_4": 64
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 64
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 64
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\n\n-----Test Input-----\n\nI love ba-na-na\n\nCat-a-pil-lar\n\nCo-ding is the best\n\n-----Constraints-----\n\n$1 \\leq \\text{words in sentence \\leq 50$\n$1 \\leq \\text{symbols in sentence \\leq 10^4$\n$1 \\leq \\text{characters in each word \\leq 10^4$\n\n\"\"\"\n\nimport re\n\nregex = r\"([bcgkpt])-?([^ ]+)?([^-]+)?\"\nregex_res = r\"\\1ah\\2\\3\"",
        "num_ids_2": 41,
        "num_ids_4": 64
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '16'\nassert solution('1') == '6'\nassert solution('3') == '14'\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '16'\nassert solution('1') == '6'\nassert solution('3') == '14'\nprint('Test pass.')\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"16\"\nassert solution(\"5\") == \"41\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == 6\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n\"\"\"\n\nimport sys\nimport math\nfrom collections import deque",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"4\") == \"16\"\nassert solution(\"3\") == \"14\"\n\nprint(\"all tests passed.\")",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(int(input()))) == \"16\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 6\\n1 2 3 4 5') == '3'\nassert solution('5 10\\n4 8 1 9 7') == '2'\nassert solution('4 10\\n1 3 1 7') == '4'\nprint('Test pass.')\n",
        "num_ids_2": 36,
        "num_ids_4": 53
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 6\\n1 2 3 4 5') == '3'\nassert solution('5 10\\n4 8 1 9 7') == '2'\nassert solution('4 10\\n1 3 1 7') == '4'\n",
        "num_ids_2": 36,
        "num_ids_4": 53
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 6\\n1 2 3 4 5\\n') == '3', 'Wrong output'\n\n\"\"\"\n\nn, X = [int(i) for i in input().split()]\n\nprices = [int(i) for i in input().split()]\n\ntotal_price = sum(prices)",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\\n\") == \"3\"\n\"\"\"\n\nfrom math import ceil\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 6\\n1 2 3 4 5') == 3\nassert solution('5 10\\n4 8 1 9 7') == 2\nassert solution('4 10\\n1 3 1 7') == 4",
        "num_ids_2": 32,
        "num_ids_4": 47
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5\\n6 7 8 9 10') == '3'\n\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6\\n1 2 3 4 5\\n') == '3'\nassert solution('5 10\\n4 8 1 9 7\\n') == '2'\nassert solution('4 10\\n1 3 1 7\\n') == '4'\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 59
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\\n\") == \"3\"\nassert solution(\"5 10\\n4 8 1 9 7\\n\") == \"2\"\nassert solution(\"4 10\\n1 3 1 7\\n\") == \"4\"\n\n\"\"\"\n\n\nimport sys\nimport functools\nfrom tools import timing",
        "num_ids_2": 40,
        "num_ids_4": 59
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5 6\n1 2 3 4 5\"\"\") == \"3\"\nassert solution(\"\"\"5 10\n4 8 1 9 7\"\"\") == \"2\"\nassert solution(\"\"\"4 10\n1 3 1 7\"\"\") == \"4\"\n\"\"\"\n\nimport unittest\nfrom collections import defaultdict\n\nclass MyTest(unittest.TestCase):\n\n    def test_solution(self):\n        self.assertEqual(solution(\"\"\"5 6\n1 2 3 4 5\"\"\"), \"3\")\n        self.assertEqual(solution(\"\"\"5 10\n4 8 1 9 7\"\"\"), \"2\")\n        self.",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\") == '3'\nassert solution(\"5 10\\n4 8 1 9 7\") == '2'\nassert solution(\"4 10\\n1 3 1 7\") == '4'\n\n\"\"\"\n\n\"\"\"\nSolution Approach\n\nComplexity\nTime: O(nlogn)\nSpace: O(1)\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 53
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2\\n0 1 1\\n1 0 0\\n') == \"possible\"\nassert solution('1 2\\n0 1 1\\n1 0 0\\n') == \"impossible\"\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 1') == 'impossible'\nassert solution('2 1\\n0 1 1') == 'possible'\nassert solution('3 2\\n1 0 1\\n1 1 0') == 'possible'\nassert solution('4 2\\n1 0 1\\n0 1 0\\n0 1 1') == 'possible'\n",
        "num_ids_2": 20,
        "num_ids_4": 59
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n1 0 0\\n0 1 0') == 'possible'\nassert solution('1 2\\n1 0 0\\n0 1 0') == 'impossible'\n\n\"\"\"",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'possible'\nassert solution('0 1 1\\n1 0 0') == 'possible'\nassert solution('1 2\\n1 0 0') == 'impossible'\nassert solution('1 2\\n0 1 0') == 'impossible'\nassert solution('1 2\\n1 1 1') == 'possible'\n",
        "num_ids_2": 29,
        "num_ids_4": 63
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"possible\"\nassert solution(\"1 2\\n1 0 1\\n0 1 0\") == \"impossible\"\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n0 1 1\\n1 0 0\\n1 0 1') == \"possible\"\nassert solution('4 2\\n0 1 1\\n1 0 0\\n1 1 1') == \"impossible\"\nassert solution('2 4\\n2 0 1\\n0 0 0\\n0 0 1') == \"possible\"\nassert solution('2 4\\n2 0 1\\n1 1 1\\n1 1 1') == \"impossible\"\n\nprint(solution(input()))\n\"\"\"\n\nfrom collections import deque\n\nc, n = map(int, input().split())",
        "num_ids_2": 54,
        "num_ids_4": 108
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\\n\") == \"possible\"\nassert solution(\"1 2\\n1 0 0\\n0 1 0\\n\") == \"impossible\"\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"possible\"\nassert solution(\"1 2\\n1 0 1\\n0 1 0\") == \"impossible\"\n\nassert solution(\"1 2\\n1 0 0\\n0 1 1\") == \"impossible\"\nassert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"impossible\"\n\nassert solution(\"1 3\\n1 2 0\\n0 1 1\") == \"possible\"\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"possible\"\nassert solution(\"1 2\\n1 0 0\\n0 1 0\") == \"impossible\"\n\"\"\"\n\n\"\"\"\nRuns in:\n115ms\n\"\"\"",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n0 1 0\\n1 0 0\") == \"possible\"\nassert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"impossible\"\nassert solution(\"1 2\\n0 0 0\\n1 0 1\") == \"impossible\"\nassert solution(\"1 2\\n1 1 1\\n0 1 0\") == \"possible\"\n\"\"\"\n\n\"\"\"\nExplanation:\nThe given input is consistent.\n\"\"\"\n\nimport sys\n\nC, n = [int(n) for n in sys.stdin.readline().split()]\n\ntrains = []\nfor i in range(n):\n    trains.append([int(n) for n in sys.stdin.readline().split()])",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n') == '1'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.8'\nassert solution('6 2\\n') == '4.25'\nassert solution('2 10\\n') == '1.8'\n\nSolution:\n1. The function ends when the roll is ended.\n2. The function is allowed to roll the die only k times.\n\nmax_expected_score(n, k) = \\frac{max_{i = 1}^{k} n}{k}\n\nmax_expected_score(n, k) = max(i(n/k))\n\nmax_expected_score(n, k) = max(max(i(n/k)) for i in range(1, k+1))\n\"\"\"\n\nfrom math import factorial as f",
        "num_ids_2": 21,
        "num_ids_4": 51
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '1.875'\nassert solution('6 2') == '4.25'\n\"\"\"\n\nimport numpy as np",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n') == '1.875'\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\n\n\"\"\"\n\n\nfrom typing import List\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1 1\n''') == '1'\n\nassert solution('''2 3\n''') == '1.875'\n\nassert solution('''6 2\n''') == '4.25'\n\nprint(\"Success\")\n\n\"\"\"\nThe first line contains two integers n and k, the number of sides of the die and the number of times you are allowed to roll.\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n\") == \"1\"\nassert solution(\"2 3\\n\") == \"1.875\"\nassert solution(\"6 2\\n\") == \"4.25\"\n\nprint(solution(input()))\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '1.875'\nassert solution('6 2') == '4.25'\n",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 0\\n\") == \"0 0\"\nassert solution(\"4 2 7\\n\") == \"1 4\"\nassert solution(\"3 0 0\\n\") == \"1 6\"\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 0\\n') == '0 0'\nassert solution('4 2 7\\n') == '1 4'\nassert solution('3 0 0\\n') == '1 6'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"3 0 0\") == \"1 6\"\nassert solution(\"1 1 2\") == \"2 2\"\nassert solution(\"4 1 0\") == \"2 2\"\n\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\nassert solution(\"2 1 1\") == \"0 2\"\nassert solution(\"1 1 1\") == \"0 1\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\nassert solution(\"2 3 4\") == \"1 2\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 0 0') == '0 0'\nassert solution('2 0 0') == '0 0'\nassert solution('3 0 0') == '1 6'\nassert solution('4 2 7') == '1 4'\n'''",
        "num_ids_2": 21,
        "num_ids_4": 47
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\nassert solution('4 2 3') == '1 0'\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1 0\\n') == '0 0'\nassert solution('4 2 7\\n') == '1 4'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('WWBBWBWBBWBWBW') == '1'\nassert solution('WWBWBWBWBBWBWBW') == '0'\nassert solution('BWBWBWBWBBBWBWBWB') == '0'\nassert solution('WBBBWBWBWBBBWBWBW') == '1'\nassert solution('BWBWBWBWBBBWBWBWB') == '0'\n",
        "num_ids_2": 35,
        "num_ids_4": 74
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\") == '1'\nassert solution(\"4\\nBWWB\\nBWBB\\nWBBW\\nWBWW\") == '0'\nassert solution(\"6\\nBWWWWB\\nWBWWWB\\nWBBWWW\\nBBWWWW\\nWBBWWW\") == '0'\n\nprint(solution(stdin))",
        "num_ids_2": 57,
        "num_ids_4": 95
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WBBW\\nWBWB\\nBWWB\\nBWBW\") == \"1\"\nassert solution(\"BWWB\\nWBWB\\nWBBW\\nBBWB\") == \"0\"\nassert solution(\"BWWB\\nWBWW\\nWBBW\\nBWWB\") == \"0\"\nassert solution(\"BWWW\\nWBWW\\nWBBW\\nBBWW\") == \"0\"\n\"\"\"",
        "num_ids_2": 51,
        "num_ids_4": 102
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('WWWWBBWBWBW') == '0'\nassert solution('WBWBWBWB') == '1'\nassert solution('WWBBBWWW') == '0'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nBWWB\\nWBWB\\nBWWB\\nBWBW\") == \"1\"\nassert solution(\"6\\nBWWB\\nWBWB\\nWBBW\\nBBWB\\nBWWB\\nWWBW\") == \"0\"\n\"\"\"",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nWBBW\\nWBWB\\nBWWB\\nBWBW') == '1'\nassert solution('4\\nWBWB\\nBWWB\\nBWBW') == '0'\n\n\"\"\"",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nWBWB\\nBWWB\\nWBBW\\nBWBW\") == '1'\nassert solution(\"4\\nBWBW\\nWBWB\\nBWWB\\nBWBW\") == '0'\n\n'''",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\nBWWB\\nWBWB\\nBWWB\\nBWBW') == '1'\nassert solution('4\\nWBWB\\nWBBW\\nWBWB\\nBWBW') == '0'",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\\n\") == \"1\"\nassert solution(\"4\\nWBWB\\nBWBB\\nWBBW\\nWBWW\\n\") == \"0\"\n\n-----Solution-----\n\n\u25cb Write down all the lines\n\u25cb Look at the first character of every line\n\u25cb If they are all the same, then you know that every row of the grid has the same number of black squares as white squares\n\u25cb If they are not all the same, then you know that every column of the grid has the same number of black squares as white squares\n\u25cb We know that no row or column has 3 or more consecutive squares of the same color\n\u25cb For each line, if there are more white squares, we know that it is incorrect\n\u25cb If there are more black squares, we know that it is incorrect\n\u25cb If there are no black squares, we know that it is incorrect\n\u25cb If none of the conditions are met, then we know that the grid is correct\n\nn = int(stdin.readline().strip())\nrows = []\nfor _ in range(n):\n    rows.append(stdin.readline().strip())\ncols = []\nfor i in range(n):\n    cols.append(''.join([row[i] for row in rows]))\n",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n6\nBWWBWB\nWBBWBW\nWBBWBW\nBBWBWW\nBWWBBW\nWWBWBB\n''') == '0'\n\nassert solution('''\n4\nWBWB\nBWB\nWBWB\nBWB\n''') == '1'\n\nassert solution('''\n4\nBBWB\nBWB\nWBWB\nBWB\n''') == '1'\n\nassert solution('''\n6\nBWBWBW\nWBBWBW\nBWWBWB\nWBWBWB\nBWBWBW\nWBBWBW\n''') == '0'\n\nassert solution('''\n8\nBWBWBW\nWBWBWB\nBWWBWB\nWBWBWB\nBWBWBW\nWBBWBW\nWBWBWB\nBWBWBW\n''') == '1'",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(example) == result\n\"\"\"\nfrom typing import List",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 2\") == \"2 1\"\nassert solution(\"2 6 3 4\") == \"7 3\"\nassert solution(\"2 4 1 3\") == \"3 2\"\nassert solution(\"1 2 1 3\") == \"3 2\"\nassert solution(\"1 4 5 8\") == \"7 9\"\n\n\"\"\"\n\nfrom itertools import combinations\n\nfrom sys import stdin, stdout",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8') == '2 1\\n3 4\\n3 2\\n1 2\\n3 7'\n\n\n-----Test-----\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\\n\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n\"\"\"\n\nfrom collections import defaultdict\n",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nn = int(sys.argv[1])\n\nfor i in range(n):\n    l1, r1, l2, r2 = list(map(int, input().strip().split()))\n    print(\" \".join(map(str, [max(l1, l2), min(r1, r2)])))\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 5 8 4') == '4 2'\nassert solution('1 2 3 4 5') == '1 5'\nassert solution('1 2 1 3') == '2 4'\nassert solution('1 2 1 3 0') == '2 3'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 59
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8') == '2 1\\n3 4\\n3 2\\n1 2\\n3 7'\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n\"\"\"\nimport sys\nimport itertools",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\\n') == '2 1\\n3 4\\n3 2\\n1 2\\n3 7'\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import product",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5\n1 2 1 2\n2 6 3 4\n2 4 1 3\n1 2 1 3\n1 4 5 8\n\"\"\") == \"\"\"2 1\n3 4\n3 2\n1 2\n3 7\"\"\"\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2,1') == '1,2'\nassert solution('2,1,3') == '1,2,3'\nassert solution('2,1,3,1') == '1,2,3,1'\n",
        "num_ids_2": 18,
        "num_ids_4": 50
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == False\n\n'''\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('[]') == False\nassert solution('[3]') == False\nassert solution('[3,2,0,-4]') == True\nassert solution('[1,2]') == True\nassert solution('[1]') == False\n",
        "num_ids_2": 18,
        "num_ids_4": 46
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'false'\nassert solution('[3,2,0,-4]') == 'true'\nassert solution('[1,2]') == 'true'\nassert solution('[1]') == 'false'\nassert solution('[1,2,1]') == 'true'\n",
        "num_ids_2": 28,
        "num_ids_4": 54
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2 0 -4') == True\nassert solution('1 2') == True\nassert solution('1') == True\nassert solution('1 -1') == False\nassert solution('1 -1 -1') == False\n",
        "num_ids_2": 21,
        "num_ids_4": 39
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n3\n2\n0\n-4\n''') == True\n\nassert solution('''\n1\n2\n''') == True\n\nassert solution('''\n1\n''') == False\n\nassert solution('''\n3\n2\n0\n-4\n''') == False\n\nassert solution('''\n3\n2\n0\n-4\n''') == False",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('[3,2,0,-4]') == True\nassert solution('[1,2]') == True\nassert solution('[1]') == False\nassert solution('[]') == False\nassert solution('[3,2,1,-4]') == False\n",
        "num_ids_2": 28,
        "num_ids_4": 46
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3,2,0,-4\") == True\nassert solution(\"1,2\") == True\nassert solution(\"1\") == True\nassert solution(\"1,0\") == True\nassert solution(\"1,2,0\") == True\n",
        "num_ids_2": 24,
        "num_ids_4": 42
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"[3, 2, 0, -4]\\n1\") == True\nassert solution(\"[1, 2]\\n0\") == True\nassert solution(\"[1]\\n-1\") == False\n\nhttps://leetcode.com/problems/linked-list-cycle-ii/discuss/1432995/Python-Solution-with-Detail-Explanation\n\n'''\n",
        "num_ids_2": 35,
        "num_ids_4": 49
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"[3,2,0,-4]\") == True\nassert solution(\"[1,2]\") == True\nassert solution(\"[1]\") == True\nassert solution(\"[1,2,3]\") == False\nassert solution(\"[1,2,3,1]\") == True\n",
        "num_ids_2": 28,
        "num_ids_4": 52
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 7 11 15\") == '0 1'\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == '8 9'\nassert solution(\"2 6 9 11 15\") == '0 1'\nassert solution(\"2 6 9 11 16\") == '0 2'\nassert solution(\"2 6 9 11 17\") == '0 1'\n",
        "num_ids_2": 34,
        "num_ids_4": 64
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution([2, 7, 11, 15]) == [0, 1]\nassert solution([2, 4, 7, 8, 10]) == [1, 4]\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 5 3\") == [1, 2]\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"0 0\") == \"0\"\n",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(nums = [2, 7, 11, 15], target = 9) == [0, 1]\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1 2') == '1'\nassert solution('1 1 1 2') == '1'\nassert solution('1 2 3') == '2'\nassert solution('1 2 3 4 5 6') == '3'\n",
        "num_ids_2": 20,
        "num_ids_4": 45
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 7 11 15') == '0 1'\n\"\"\"\nimport collections\n\n\nclass Solution:\n    def twoSum(self, nums, target):\n        res = []\n        hashmap = collections.defaultdict(list)\n        for index, num in enumerate(nums):\n            hashmap[num] = index\n        for index, num in enumerate(nums):\n            another_num = target - num\n            if another_num in hashmap and hashmap[another_num]!= index:\n                res.append(index)\n                res.append(hashmap[another_num])\n                return res\n\n    def twoSum2(self, nums, target):\n        hashmap = {}\n        for i, num in enumerate(nums):\n            hashmap[num] = i\n\n        for i, num in enumerate(nums):\n            another_num = target - num\n            if another_num in hashmap and hashmap[another_num]!= i:\n                return [i, hashmap[another_num]]\n\n    def twoSum3(self, nums, target):\n        hashmap = {}\n        for i in range(len(nums)):\n            another_num = target - nums[i]\n            if another_num in hashmap:\n                return [hashmap[another_num], i]\n            hashmap[nums[i]] = i\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2, 7, 11, 15\") == [0, 1]\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 7 11 15\") == \"0 1\"\n'''\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i, val_1 in enumerate(nums):\n            for j, val_2 in enumerate(nums):\n                if val_1 + val_2 == target and i!= j:\n                    return [i, j]\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        if len(nums) <= 1:\n            return False\n        buff_dict = {}\n        for i, val in enumerate(nums):\n            if val in buff_dict:\n                return [buff_dict[val], i]\n            else:\n                buff_dict[target - val] = i",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"[2, 7, 11, 15]\") == \"[0, 1]\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(solution.sample_input_1) == solution.sample_output_1\nassert solution(solution.sample_input_2) == solution.sample_output_2\nassert solution(solution.sample_input_3) == solution.sample_output_3\nassert solution(solution.sample_input_4) == solution.sample_output_4",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n\"\"\"\n\nimport itertools\nimport math\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '1'\nassert solution('3') == '0'\n\"\"\"\n\n\"\"\"\nA convex polygon is a simple polygon in which all of its interior angles are less than 180 degrees, \ni.e. for every vertex $v_i$, there is exactly one vertex $v_j$ such that \n$v_i$ is a vertex and $v_j$ is a different vertex.\n\nIn a convex polygon $N$, we can write a pair of diagonals as $d_i = v_i - v_j$, \nwith $i\\in \\{1,\\dots,N\\}$, $j\\in \\{1,\\dots,N\\}$, $v_i\\neq v_j$.\n\nWe define a polygon as being \"convex\" if for every pair of diagonals there is at least one vertex in common. \nNote that a polygon with $N$ vertices is always convex.\n\nLet $P(N)$ be the number of pairs of diagonals in a convex polygon with $N$ vertices. \nFor example, $P(3) = 1$ and $P(4) = 3$ are examples of $P(N)$.\n\nYou are given that $P(4) = 1144$ and $P(8) = 1148$, and $P(12) = 5485366676$ are quite large.\n\nFind $P(15)$.\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n5\n6\n7\n8\n9\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n30\n32\n34\n36\n38\n40\n42\n44\n46\n48\n50\n52\n54\n56\n58\n60\n62\n64\n66\n68\n70\n72\n74\n76\n78\n80\n82\n84\n86\n88\n90\n92\n94\n96\n98\n100''') == '1'\nprint('Test pass.')\n\n'''\nProblem:\n    In a convex polygon with $N$ vertices, no three diagonals intersect in a single point. Find the number of such diagonals.\n\n    Input:\n        The first and only line of input contains a single integer $N$, 3$\\leq N$\\leq 100$.\n\n    Output:\n        Output the number of such diagonals on a single line.\n'''",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n\") == \"0\"\nassert solution(\"4\\n\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == 1\n\"\"\"\n\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == b\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n\nimport sys\n_INPUT_LINES = sys.stdin.read().splitlines()\n_OUTPUT_LINES = solution(_INPUT_LINES)\n\nfor line in _OUTPUT_LINES:\n    print(line)\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\n\"\"\"\n\nn = int(input())\nsocks = list(map(int, input().split()))",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n\nassert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n\nprint('Success')\n\n\"\"\"\n\nfrom math import ceil",
        "num_ids_2": 31,
        "num_ids_4": 62
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2 4\n''') == '''impossible'''\n\nassert solution('''2\n2 3\n''') == '''4'''\n\nassert solution('''2\n2 1\n''') == '''impossible'''\n\nassert solution('''3\n1 2 2 1\n''') == '''4'''\n\nassert solution('''2\n2 3\n''') == '''4'''",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read()\n\nC, K = map(int, stdin.split())\n\na, b = 10, 1\n\nwhile K > 0:\n    if K >= a:\n        C -= a\n        K -= a\n    else:\n        a = a // 10\n        b *= 10\n\nprint(C * b)\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('184 1') == '180'\nassert solution('123450995 1') == '123451000'\nprint('Test pass.')\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('184 1') == '180'\n\"\"\"\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('184 1\\n') == '180'\n\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('184 1') == '180'\nassert solution('123450995 1') == '123451000'\n\nprint(solution(stdin))\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"184 1\\n\") == \"180\"\nassert solution(\"123450995 1\\n\") == \"123451000\"\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(123450995, 1) == 123451000\nassert solution(184, 1) == 180\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('184 1') == '180'\nassert solution('123450995 1') == '123451000'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n0 1\n1 0\n1 1\n''') == '0.000000'\nassert solution('''3\n0 1\n1 0\n-1 1\n''') == '0.333333'\nassert solution('''1\n1 1\n''') == '0.0'\nassert solution('''2\n-1 1\n1 0\n''') == '0.5'\nprint('Passed!')\n\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\") == \"0.0\"\nassert solution(\"0 1\\n1 0\\n1 1\") == \"0.0\"\nassert solution(\"1 1\\n2 2\\n3 3\\n4 4\") == \"0.0\"\nassert solution(\"1 2\\n2 3\\n3 4\") == \"0.0\"\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 88
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3\\n') == '0.000000'",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.0'\nassert solution('3\\n0 1\\n1 0\\n1 1') == '0.0'\n\"\"\"\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\nassert solution('4\\n0 1\\n1 0\\n1 1\\n1 1') == '0.000000'\nassert solution('5\\n0 0\\n1 0\\n1 0\\n2 0') == '0.000000'\nassert solution('5\\n0 0\\n1 0\\n1 1\\n2 0') == '1.000000'\nassert solution('5\\n0 0\\n1 0\\n1 1\\n2 1') == '0.8333333'\n",
        "num_ids_2": 52,
        "num_ids_4": 108
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\\n\") == '0.000000'\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\\n\") == \"0.000000\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n0 1\\n1 0\\n1 1') == '0.000000'\n\nassert solution('3\\n0 1\\n1 0\\n1 1') == '0.000000'\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\") == \"0.000000\"\nassert solution(\"3\\n2 2\\n1 1\\n1 1\") == \"0.000000\"\nassert solution(\"3\\n1 2\\n0 1\\n1 2\") == \"0.333333\"\n\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 73
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2\\n1 2 2\\n3 2 3 4') == '1\\n2'\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('1\\n1') == '1'\nassert solution('2\\n1 1') == '1'\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1\\n2\\n4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\nprint('Passed!')",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3\\n2 1 2\\n3 2 3 4') == '1\\n2\\n4'\nassert solution('8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1') == '1\\n2\\n6\\n8'\nassert solution('5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1') == '1\\n2\\n6\\n8'\nassert solution('6\\n3\\n2 1 2\\n3 2 3 4') == '1\\n2\\n3'\n\n\"\"\"\n\nimport sys\n\nlines = iter(sys.stdin)\n\nn = int(next(lines))\n\nl = [int(line.split('\\n')[0]) for line in lines]\n\nll = [list(map(int, line.split())) for line in lines]",
        "num_ids_2": 82,
        "num_ids_4": 161
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1 2 4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1 2 6 8\"\n",
        "num_ids_2": 72,
        "num_ids_4": 72
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1\\n2\\n4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import product",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1\\n2\\n4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\"\n",
        "num_ids_2": 82,
        "num_ids_4": 177
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1\\n2\\n4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2\\n1 2\\n2 3 4') == '1\\n2\\n4'\nassert solution('8\\n5\\n4 1 3 5 6') == '1\\n2\\n6'\nassert solution('8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1') == '1\\n2\\n6'\n\n\"\"\"\nimport collections\nimport sys",
        "num_ids_2": 54,
        "num_ids_4": 103
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 4\nassert solution(5) == 8\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 5\") == \"60\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\n\"\"\"\n\nimport math",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\nprint(\"All tests passed.\")\n\nSample Input 1:\n3 4 5\nSample Output 1:\n60\nSample Input 2:\n2 2 2\nSample Output 2:\n8\nSample Input 3:\n3 4 3\nSample Output 3:\n24\nSample Input 4:\n1 1 1\nSample Output 4:\n1\nSample Input 5:\n2 3 4\nSample Output 5:\n56\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 4 5''') == '60'\nassert solution('''2 2 2''') == '8'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\n\"\"\"\n\na,b,c = map(int,input().split())\nprint(pow(a,b+c)*pow(a-1,c))\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n\"\"\"\n\nn, t, m = map(int, input().split())\nprint(n*t*m*(n+t+m-1)//2)\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\n\nSample Case 0\nSample Input 0\n2 2 2\n\nSample Output 0\n8\n\nSample Case 1\nSample Input 1\n3 4 5\n\nSample Output 1\n60\n\nSample Case 2\nSample Input 2\n3 4 5\n\nSample Output 2\n60\n\nSample Case 3\nSample Input 3\n1 1 1\n\nSample Output 3\n1\n\nSample Case 4\nSample Input 4\n3 5 4\n\nSample Output 4\n60\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\nassert solution(\"1 1 1\") == \"1\"\n\nprint(\"All tests passed.\")",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n3 0 2\n''') == '1.6666666666666667'\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3 -1 4\") == \"2.5\"\nassert solution(\"2 -1 1\") == \"1.5\"\nassert solution(\"10 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -",
        "num_ids_2": 32,
        "num_ids_4": 1387
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 0 2\\n1 -1 4\") == \"2.5\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3 1 2\") == \"2.5\"\nassert solution(\"1 -1 4\") == \"2.5\"\n\nprint(solution(\"3 1 2\"))\nprint(solution(\"3 0 2\"))\nprint(solution(\"1 -1 4\"))\n\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 31,
        "num_ids_4": 46
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n3 0 2') == '1.6666666666666667'\nassert solution('3\\n1 -1 4') == '2.5'\n\nprint('Successfully solved!') \"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3 -1 4\") == \"2.5\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 0 2') == '1.6667'\nassert solution('3 -1 4') == '2.5'",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 0 2\") == 1.6666\nassert solution(\"3 -1 4\") == 2.5\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 0 2') == '1.6666666666666667'\nassert solution('3 1 2') == '2.5'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input())\narr = list(map(int, input().split()))",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 0 2') == '1.6666666666666667'\nassert solution('3 -1 4') == '2.5'\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n\"\"\"\n\nN, K = [int(i) for i in stdin.split()]\n\nfor i in range(2, N + 1):\n    if K == 1:\n        print(i)\n        break\n    K -= 1\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2 3') == '3'\nassert solution('2 3 4') == '5'\nassert solution('3 5') == '7'\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\") == \"6\"\nassert solution(\"15 12\") == \"7\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 3\\n6\\n7') == '6'\nassert solution('15 12\\n7\\n1\\n3\\n5\\n7\\n9\\n11\\n13\\n15') == '7'\n\"\"\"",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3\\n') == '6'\nassert solution('15 12\\n') == '7'\n\nprint('Success')\n\n------------------------------------------------------------------------------------------------------------------------\n\nWrite a program that reads a list of numbers and returns a list of pairs, each pair containing a number and its frequency.\n\nInput Format:\n- The first line of input contains the number of numbers in the list.\n- The second line contains the space-separated list of numbers.\n\nOutput Format:\n- Output the space-separated pairs of the list of numbers.\n\nSample Input 0:\n5\n3 2 1 2 3\n\nSample Output 0:\n3 1\n2 2\n1 3\n\nSample Input 1:\n5\n3 1 4 1 5\n\nSample Output 1:\n3 1\n1 4\n1 5\n\nSample Input 2:\n8\n4 4 4 4 4 4 4 4\n\nSample Output 2:\n4 8\n4 16\n4 32\n4 64\n4 128\n4 256\n\nSample Input 3:\n5\n1 2 3 3 4\n\nSample Output 3:\n1 2\n3 3\n4 4\n\n-----Tests/Exemplifications-----\n- Test 1:\n    - Input:\n      - 3 1 4 1 5\n    - Output:\n      - 3 1\n    - Expected Output:\n        - 3 1\n    - Your Output:\n        - 3 1\n\n- Test 2:\n    - Input:\n      - 4 4 4 4 4 4 4 4\n    - Output:\n      - 4 8\n    - Expected Output:\n        - 4 16\n    - Your Output:\n        - 4 32\n\n- Test 3:\n    - Input:\n      - 1 2 3 3 4\n    - Output:\n      - 1 2\n    - Expected Output:\n        - 1 2\n    - Your Output:\n        - 1 3\n\n- Test 4:\n    - Input:\n      - 5 1 2 3 3 4\n    - Output:\n      - 1 2\n    - Expected Output:\n        - 1 2\n    - Your Output:\n        - 1 3\n\n- Test 5:\n    - Input:\n      - 8 4 4 4 4 4 4 4\n    - Output:\n      - 4 8\n    - Expected Output:\n        - 4 16\n    - Your Output:\n        - 4 32\n\n- Test 6:\n    - Input:\n      - 5 1 2 3 3 4\n    - Output:\n      - 1 2\n    - Expected Output:\n        - 1 2\n    - Your Output:\n        - 1 3\n\n- Test 7:\n    - Input:\n      - 5 1 2 3 3 4\n    - Output:\n      - 1 2\n    - Expected Output:\n        - 1 2\n    - Your Output:\n        - 1 3\n\n- Test 8:\n    - Input:\n      - 5 1 2 3 3 4\n    - Output:\n      - 1 2\n    - Expected Output:\n        - 1 2\n    - Your Output:\n        - 1 3\n\n- Test 9:\n    - Input:\n      - 5 1 2 3 3 4\n    - Output:\n      - 1 2\n    - Expected Output:\n        - 1 2\n    - Your Output:\n        - 1 3\n\n------------------------------------------------------------------------------------------------------------------------\n\nWrite a program that reads a list of numbers and returns a list of pairs, each pair containing a number and its frequency.\n\nInput Format:\n- The first line of input contains the number of numbers in the list.\n- The second line contains the space-separated list of numbers.\n\nOutput Format:\n- Output the space-separated pairs of the list of numbers.\n\nSample Input 0:\n5\n3 2 1 2 3\n\nSample Output 0:\n3 1\n2 2\n1 3\n\nSample Input 1:\n8\n4 4 4 4 4 4 4 4\n\nSample Output 1:\n4 8\n4 16\n4 32\n4 64\n4 128\n4 256\n\nSample Input 2:\n8\n1 2 3 3 4 4 4 4\n\nSample Output 2:\n1 2\n3 4\n4 8\n4 16\n4 32\n4 64\n4 128\n4 256\n\nSample Input 3:\n8\n4 4 4 4 4 4 4 4\n\nSample Output 3:\n4 8\n4 16\n4 32\n4 64\n4 128\n4 256\n\nSample Input 4:\n5\n1 2 3 3 4\n\nSample Output 4:\n1 2\n3 4\n\nSample Input 5:\n5\n1 2 3 3 4\n\nSample Output 5:\n1 2\n3 4\n\n-----Tests/Exemplifications-----\n- Test 1:\n    - Input:\n      - 3 1 2 3\n    - Output:\n      - 3 1\n    - Expected Output:\n        - 3 1\n    - Your Output:\n        - 3 1\n\n- Test 2:\n    - Input:\n      - 4 4 4 4 4 4 4\n    - Output:\n      - 4 8\n    - Expected Output:\n        - 4 16\n    - Your Output:\n        - 4 32\n\n- Test 3:\n    - Input:\n      - 1 2 3 3 4\n    - Output:\n      - 1 2\n    - Expected Output:\n        - 1 2\n    - Your Output:\n        - 1 3\n\n- Test 4:\n    - Input:\n      - 5 1 2 3 3 4\n    - Output:\n      - 1 2\n    - Expected Output:\n        - 1 2\n    - Your Output:\n        - 1 3\n\n- Test 5:\n    - Input:\n      - 5 1 2 3 3 4\n    - Output:\n      - 1 2\n    - Expected Output:\n        - 1 2\n    - Your Output:\n        - 1 3\n\n- Test 6:\n    - Input:\n      - 5 1 2 3 3 4\n    - Output:\n      - 1 2\n    - Expected Output:\n        - 1 2\n    - Your Output:\n        - 1 3\n\n- Test 7:\n    - Input:\n      - 5 1 2 3 3 4\n    - Output:\n      - 1 2\n    - Expected Output:\n        - 1 2\n    - Your Output:\n        - 1 3\n\n- Test 8:\n    - Input:\n      - 5 1 2 3 3 4\n    - Output:\n      - 1 2\n    - Expected Output:\n        - 1 2\n    - Your Output:\n        - 1 3\n\n- Test 9:\n    - Input:\n      - 5 1 2 3 3 4\n    - Output:\n      - 1 2\n    - Expected Output:\n        - 1 2\n    - Your Output:\n        - 1 3\n\n- Test 10:\n    - Input:\n      - 5 1 2 3 3 4\n    - Output:\n      - 1 2\n    - Expected Output:\n        - 1 2\n    - Your Output:\n        - 1 3\n\n- Test 11:\n    - Input:\n      - 5 1 2 3 3 4\n    - Output:\n      - 1 2\n    - Expected Output:\n        - 1 2\n    - Your Output:\n        - 1 3\n\n- Test 12:\n    - Input:\n      - 5 1 2 3 3 4\n    - Output:\n      - 1 2\n    - Expected Output:\n        - 1 2\n    - Your Output:\n        - 1 3\n\n- Test 13:\n    - Input:\n      - 5 1 2 3 3 4\n    - Output:\n      - 1 2\n    - Expected Output:\n        - 1 2\n    - Your Output:\n        - 1 3\n\n- Test 14:\n    - Input:\n      - 5 1 2 3 3 4\n    - Output:\n      - 1 2\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n\n'''\n\nimport sys\nimport math\n\nN, K = list(map(int, sys.stdin.readline().split()))\n\nprime_numbers = set()\nfor num in range(2, N + 1):\n    prime_numbers.add(num)\n\nfor num in range(2, math.ceil(math.sqrt(N))):\n    if num in prime_numbers:\n        for multiple in range(num * 2, N + 1, num):\n            if multiple in prime_numbers:\n                prime_numbers.discard(multiple)\n\nfor num in sorted(prime_numbers):\n    if K == 1:\n        break\n    K -= 1\nprint(num)",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 3\\n') == '6'\nassert solution('15 12\\n') == '7'\nassert solution('2 1\\n') == '1'\nassert solution('7 9\\n') == '10'\nassert solution('5 1\\n') == '5'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''7 3\n''') == '6'\nassert solution('''15 12\n''') == '7'\nassert solution('''24 6\n''') == '17'\n'''\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3\\n1 2 3 4 5 6 7') == '6'\n\"\"\"\n\nn, k = [int(x) for x in stdin.readline().split()]\nprimes = {i for i in range(2, n + 1) if all(i % j!= 0 for j in range(2, int(i ** 0.5) + 1))}\nfor i, p in enumerate(primes):\n    if i == k:\n        print(p)\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('123864 123865') == '1'\nassert solution('198765 198769') == '0'\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n\n\"\"\"\n\nimport math\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('123864 123865') == '1'\nassert solution('198765 198769') == '0'\n\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('123864 123865') == '1'\nassert solution('198765 198769') == '0'\n\"\"\"\n\nfrom itertools import combinations",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\nprint('All tests passed.')\n\n---\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('123864 123865') == 1\nassert solution('198765 198769') == 0\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n\"\"\"\n\nfrom itertools import product",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"123864 123865\") == 1\nassert solution(\"198765 198769\") == 0\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"0.50000000\"\n\n---Problem---\nOn the first day of Christmas, Santa Claus gave to his nth year six geese a generous gift: a Christmas goose, two hens, a duck and a rooster, a partridge, a Christmas pigeon, and four gold rings. The following year, the gifts become a single new Christmas present: the 25th year of Christmas, a star, a blue star, two plus signs, and a line of Xs.\n\nTo avoid any bad things, Santa needs to get the total number of presents delivered at once (before any of the presents are delivered).\n\n--Solution--\nOn the first day of Christmas, Santa Claus gave to his nth year six geese a generous gift: a Christmas goose, two hens, a duck and a rooster, a partridge, a Christmas pigeon, and four gold rings. The following year, the gifts become a single new Christmas present: the 25th year of Christmas, a star, a blue star, two plus signs, and a line of Xs.\n\nTo avoid any bad things, Santa needs to get the total number of presents delivered at once (before any of the presents are delivered).\n\nThe total number of presents is given by $N = \\dfrac{9 x n}{n}$.\n\nIn the case of the first gift, the number of presents delivered on the first day is $1 = \\dfrac{9}{n}$.\n\nIn the case of the second, the number of presents delivered on the first day is $2 = \\dfrac{9}{n} + \\dfrac{9}{n}$.\n\nIn the case of the third, the number of presents delivered on the first day is $3 = \\dfrac{9}{n} + \\dfrac{9}{n} + \\dfrac{9}{n}$.\n\nIn the case of the $N$th gift, the number of presents delivered on the first day is $N = \\dfrac{9}{n} + \\dfrac{9}{n} + \\dfrac{9}{n} + \\dfrac{9}{n} + \\dfrac{9}{n}$.\n\nIn general, the number of presents delivered on the first day is given by $\\dfrac{9}{n} + \\dfrac{9}{n} + \\dfrac{9}{n} + \\dfrac{9}{n} + \\dfrac{9}{n} + \\dfrac{9}{n} + \\dfrac{9}{n} + \\dfrac{9}{n} + \\dfrac{9}{n} +... + \\dfrac{9}{n}$.\n\nThe probability that at least one of the $n$ presents is delivered to the same citizen is given by the fraction: $1 + \\dfrac{9}{n} + \\dfrac{9}{n} + \\dfrac{9}{n} + \\dfrac{9}{n} + \\dfrac{9}{n} + \\dfrac{9}{n} + \\dfrac{9}{n} +... + \\dfrac{9}{n}$.\n\nThe probability that all $n$ gifts are delivered to different citizens is given by $\\frac{1}{n}$.\n\nThe probability that a citizen is targeted by at least $n$ gifts is given by $\\frac{n}{n + 1}$.\n\n---Examples---\nSample Input 1:\n1\nSample Output 1:\n0.5\n\nSample Input 2:\n2\nSample Output 2:\n0.66666667\n\nSample Input 3:\n3\nSample Output 3:\n0.73333333\n\nSample Input 4:\n4\nSample Output 4:\n0.75\n\nSample Input 5:\n5\nSample Output 5:\n0.8\n\nSample Input 6:\n6\nSample Output 6:\n0.83333333\n\nSample Input 7:\n7\nSample Output 7:\n0.85714286\n\nSample Input 8:\n8\nSample Output 8:\n0.875\n\nSample Input 9:\n9\nSample Output 9:\n0.88888889\n\nSample Input 10:\n10\nSample Output 10:\n0.9\n\nSample Input 11:\n11\nSample Output 11:\n0.9382716049382716\n\nSample Input 12:\n12\nSample Output 12:\n0.9583333333333334\n\nSample Input 13:\n13\nSample Output 13:\n0.9746031746031746\n\nSample Input 14:\n14\nSample Output 14:\n0.9814814814814815\n\nSample Input 15:\n15\nSample Output 15:\n0.9904507785421786\n\nSample Input 16:\n16\nSample Output 16:\n0.9958506224060059\n\nSample Input 17:\n17\nSample Output 17:\n0.9958506224060059\n\nSample Input 18:\n18\nSample Output 18:\n0.9958506224060059\n\nSample Input 19:\n19\nSample Output 19:\n0.9958506224060059\n\nSample Input 20:\n20\nSample Output 20:\n0.9958506224060059\n\nSample Input 21:\n21\nSample Output 21:\n0.9958506224060059\n\nSample Input 22:\n22\nSample Output 22:\n0.9958506224060059\n\nSample Input 23:\n23\nSample Output 23:\n0.9958506224060059\n\nSample Input 24:\n24\nSample Output 24:\n0.9958506224060059\n\nSample Input 25:\n25\nSample Output 25:\n0.9958506224060059\n\nSample Input 26:\n26\nSample Output 26:\n0.9958506224060059\n\nSample Input 27:\n27\nSample Output 27:\n0.9958506224060059\n\nSample Input 28:\n28\nSample Output 28:\n0.9958506224060059\n\nSample Input 29:\n29\nSample Output 29:\n0.9958506224060059\n\nSample Input 30:\n30\nSample Output 30:\n0.9958506224060059\n\nSample Input 31:\n31\nSample Output 31:\n0.9958506224060059\n\nSample Input 32:\n32\nSample Output 32:\n0.9958506224060059\n\nSample Input 33:\n33\nSample Output 33:\n0.9958506224060059\n\nSample Input 34:\n34\nSample Output 34:\n0.9958506224060059\n\nSample Input 35:\n35\nSample Output 35:\n0.9958506224060059\n\nSample Input 36:\n36\nSample Output 36:\n0.9958506224060059\n\nSample Input 37:\n37\nSample Output 37:\n0.9958506224060059\n\nSample Input 38:\n38\nSample Output 38:\n0.9958506224060059\n\nSample Input 39:\n39\nSample Output 39:\n0.9958506224060059\n\nSample Input 40:\n40\nSample Output 40:\n0.9958506224060059\n\nSample Input 41:\n41\nSample Output 41:\n0.9958506224060059\n\nSample Input 42:\n42\nSample Output 42:\n0.9958506224060059\n\nSample Input 43:\n43\nSample Output 43:\n0.9958506224060059\n\nSample Input 44:\n44\nSample Output 44:\n0.9958506224060059\n\nSample",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.66666667'\n\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n'''\n\nimport sys\n\ninput()",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.66666667'\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1') == '0.5'\nassert solution('3\\n1') == '0.66666667'\n\"\"\"\n\nn = int(input())\nprint(1 / (n * (n - 1)))\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n\") == \"0.5\"\nassert solution(\"3\\n\") == \"0.66666667\"\n\"\"\"\n\nimport math\nimport sys\nimport os",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.666666666'\n\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"0.5\"\nassert solution(\"3\") == \"0.66666667\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n\") == \"0.5\"\nassert solution(\"3\\n\") == \"0.6666666666666666\"\n\nprint(solution(stdin.readlines()))\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\"\"\"\n\nN = int(input())\n\nodd = 0\neven = 0\n\nfor i in range(1, N+1):\n    if i % 2 == 0:\n        even += 1\n    else:\n        odd += 1\n\nres = 1 - (odd / (odd + even))\nprint(round(res, 6))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"180\") == \"impossible\"\nassert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\"\n\nprint(solution(\"180\"))\nprint(solution(\"96\"))\n\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"180\") == \"triple 20\\ntriple 20\\ntriple 20\"\nassert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\"\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"180\") == \"triple 20\"\nassert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\"\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"180\") == \"triple 20\\ntriple 20\\ntriple 20\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"180\") == \"triple 20\\ntriple 20\\ntriple 20\"\nassert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\"\nassert solution(\"1\") == \"impossible\"\nassert solution(\"0\") == \"impossible\"\nassert solution(\"19\") == \"impossible\"\n",
        "num_ids_2": 42,
        "num_ids_4": 64
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('180') == 'triple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'impossible'\nassert solution('1') == 'impossible'\nassert solution('20') == 'impossible'\nassert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('97') == 'impossible'\n",
        "num_ids_2": 22,
        "num_ids_4": 55
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 4 7\") == '168'\nprint(solution(\"10 4 7\"))\n\nSample Input 3:\n4 1 1\nSample Output 3:\n1\n\"\"\"\n\nimport math\n\nn, h, v = map(int, input().split())\n\nv_area = n * v\nh_area = n * h\n\nv_area = math.floor(v_area / 4)\nh_area = math.floor(h_area / 4)\n\nmax_area = max(v_area, h_area)\n\nprint(max_area)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nprint(solution(\"10 4 7\"))\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 4 7\") == '168'\nassert solution(\"5 2 2\") == '36'\n\"\"\"\n\nfrom math import sqrt\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n3\n1\n4''') == '8'\n\nassert solution('''10\n5\n1\n7''') == '56'\n\n\"\"\"\n\nn, h, v = [int(i) for i in stdin.split()]\nprint((n-h)*(n-v))",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\nassert solution('1 1 1') == '0'\n\"\"\"\nimport unittest\nfrom math import sqrt\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 1') == '36'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\n\nprint(solution(input()))\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4 7\") == \"168\"\n\"\"\"\n\nfrom math import ceil\n\nl, h, v = [int(x) for x in stdin.split()]\n\nwidth = l * 4\nheight = h * 4\n\nprint(ceil(width * v) + ceil(height * v))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\nassert solution('20 4 5') == '288'\n\n\"\"\"\n\nimport math",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n3 10\\n5 8\\n') == '7'\n\"\"\"\n\nfrom math import ceil",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n3 10\") == \"7\"\nassert solution(\"2\\n3 8\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n2 8\") == \"4\"\nassert solution(\"7\\n1 1\\n1 1\\n3 1\\n1 2\\n1 2\") == \"1\"\n\n\"\"\"\n\nimport math\nfrom typing import List",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2\n3 8\n5 8''') == '1'\nassert solution('''1\n3 10''') == '7'\n'''\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n3 10\\n5 8\") == \"1\"\nassert solution(\"2\\n3 8\\n5 8\") == \"1\"\n\"\"\"\n\nfrom functools import reduce\n\n\"\"\"\nS = reduce(lambda x, y: x * y, list(map(int, stdin.split())))\nB = reduce(lambda x, y: x + y, list(map(int, stdin.split())))\nprint(abs(S - B))\n\"\"\"\n\nN = int(input())\nS = reduce(lambda x, y: x * y, map(int, input().split()))\nB = reduce(lambda x, y: x + y, map(int, input().split()))\nprint(abs(S - B))\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2\\n3 4\\n5 6') == '1'\nprint(solution(stdin))",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n3 10') == '7'\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n3 10\\n5 8') == '7'\n\"\"\"\nimport sys\n\nsys.stdin = open(\"Problem_098_input.txt\")\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10\") == \"7\"\n\"\"\"\n\nimport math",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2\\n2 4\\n3 4') == '3'\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('Simon says \"smile\"') =='smile'\nassert solution('Simon says \"raise your right hand\"') == 'raise your right hand'\nassert solution('Simon says \"Lower your right hand\"') == 'Lower your right hand'\nassert solution('Simon says \"raise your left hand\"') == 'raise your left hand'\n",
        "num_ids_2": 24,
        "num_ids_4": 64
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\nSimon says smile.\\n') =='smile.\\n'\nassert solution('2\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n') == 'raise your right hand.\\nraise your left hand.\\n'\n\nprint(solution(stdin))\n",
        "num_ids_2": 72,
        "num_ids_4": 72
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''Simon says smile.\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\nSimon says hello.\n''') == '''smile.\nraise your right hand.\nraise your left hand.\n'''\n\nassert solution('''Simon says smile.\nSimon says smile.\nSimon says hello.\nSimon says smile.\nSimon says smile.\n''') == '''smile.\nsmile.\nsmile.\n'''\n\nassert solution('''Simon says smile.\nSimon says smile.\nSimon says smile.\nSimon says hello.\nSimon says smile.\nSimon says hello.\nSimon says hello.\nSimon says hello.\nSimon says hello.\nSimon says hello.\nSimon says hello.\n''') == '''smile.\nsmile.\nsmile.\nsmile.\nsmile.\nsmile.\nsmile.\n'''\n\nassert solution('''Simon says hello.\nSimon says hello.\nSimon says hello.\nSimon says hello.\nSimon says hello.\nSimon says hello.\nSimon says hello.\nSimon says hello.\nSimon says hello.\nSimon says hello.\nSimon says hello.\nSimon says hello.\nSimon says hello.\n''') == '''smile.\nsmile.\nsmile.\nsmile.\nsmile.\nsmile.\nsmile.\nsmile.\nsmile.\nsmile.\nsmile.\nsmile.\n'''\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\nSimon says smile.') =='smile.'\nassert solution('1\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\n') == 'Simon says smile.'\nassert solution('2\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\n') == ''\nassert solution('3\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\n') == 'Simon says smile.'\n",
        "num_ids_2": 25,
        "num_ids_4": 103
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('Simon says happy.\\n') == 'happy.'\nassert solution('Simon says touch your nose.\\n') == 'touch your nose.'\nassert solution('Simon says touch your left hand.\\n') == 'touch your left hand.'\nassert solution('Simon says touch your right hand.\\n') == 'touch your right hand.'\n",
        "num_ids_2": 23,
        "num_ids_4": 63
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\nSimon says smile.\\n\") == \"smile.\"\nassert solution(\"2\\nSimon says smile.\\n\") == \"Simon says smile.\"\n\"\"\"\n\nfrom typing import List\nfrom collections import deque",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"1\nSimon says smile.\n\"\"\") == \"\"\" smile.\"\"\"\n\nassert solution(\"\"\"3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\"\"\") == \"\"\" raise your right hand.\"\"\"\n\nassert solution(\"\"\"3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\"\"\") == \"\"\" raise your right hand.\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n1\nSimon says smile.\n''') == '''\nSimon says smile.\n'''\n\nassert solution('''\n3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n''') == '''\nSimon says raise your right hand.\nSimon says raise your left hand.\n'''\n\nassert solution('''\n1\nSimon says smile.\n''') == '''\nSimon says smile.\n'''\n\nassert solution('''\n2\nSimon says smile.\nSimon says raise your right hand.\n''') == '''\nSimon says smile.\n'''\n\nassert solution('''\n3\nSimon says smile.\nSimon says raise your left hand.\nSimon says raise your right hand.\n''') == '''\nSimon says smile.\nSimon says raise your right hand.\nSimon says raise your left hand.\n'''",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"1\nSimon says smile.\n\"\"\") == \"\"\" smile.\n\"\"\"\nassert solution(\"\"\"3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\"\"\") == \"\"\" raise your right hand.\nraise your left hand.\n\"\"\"\n\"\"\"\nimport sys\nimport numpy as np\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\nSimon says smile.\\n\") == \"smile.\"\n\"\"\"\n\nimport sys\nimport re",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 4 6 10 12 16 18\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\n\"\"\"\n\nimport numpy as np",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\n\"\"\"\nimport sys",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\nassert solution(\"1 2 0 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\n\"\"\"\nimport sys",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n3 2\nAA\nAT\nTT\n''') == '3'\nassert solution('''\n4 1\nA\nA\nG\nT\n''') == '2'\nassert solution('''\n3 2\nAA\nAT\nTT\nTC\n''') == '3'\n\nassert solution('''\n4 1\nA\nC\nT\nG\n''') == '2'\nassert solution('''\n4 2\nAAA\nAA\nAT\nTT\n''') == '1'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 2\nAA\nAT\nTT\nTC''') == '3\n0 1\n0 2\n0 3'\n\nassert solution('''4 1\nA\nA\nG\nT''') == '2\n0 1\n0 2\n0 3'\n\nassert solution('''4 2\nGC\nCAT\nACG\nGAT\nCGA\nGCT\nTCA\nTCG\nTCG\nTCG\nCGAT\nCGCA\nCGCC\nCGCCC\nCGAAT\nCGACG\nCGAAT\nCGACG\nCGATG\nCGAGC\nCGAAT\nCGAGC\nCGAAT\nCGAAT\nCGAGC\nCGAGC\nCGAAT\nCGAGC\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGATG\nCGAGC\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGATG\nCGAGC\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGATG\nCGAGC\nCGAAT\nCGAAT\nCGAAT\nCGATG\nCGAGC\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAGC\nCGAAT\nCGAGC\nCGAAT\nCGAGC\nCGAGC\nCGAAT\nCGATG\nCGAGC\nCGAGC\nCGAGC\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAGC\nCGAGC\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAGC\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nCGAAT\nC",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == '3'\nassert solution('4 1\\nA\\nA\\nG\\nT') == '2\\n0 1\\n0 2\\n0 3'\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == '3\\n0 1\\n0 2\\n0 3'\n\"\"\"\nfrom typing import List, Tuple\n\n\nclass Node:\n    def __init__(self, name, children: List[int] = [], weight: int = 0):\n        self.name = name\n        self.children = children\n        self.weight = weight\n    def __repr__(self):\n        return f'Node({self.name}, {self.children}, {self.weight})'\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\"\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\"\n\"\"\"",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input_str) == output_str\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC\\n') == '3\\n0 1\\n0 2\\n0 3\\n'\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == '3'\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == '2'\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC\\n') == '3\\n0 1\\n1 2\\n2 3\\n'\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\\n0 1\\n1 2\\n2 3\"\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\\n0 1\\n0 2\\n0 3\"\nassert solution(\"3 2\\nAC\\nCA\\nCC\") == \"1\\n0 1\"\nassert solution(\"4 1\\nA\\nB\\nC\\nD\") == \"1\\n0 1\\n0 2\"\n\n----Problem Description----\nThe famous dinosaur professor O\u2019Saur has discovered a sample of DNA, and wants to know the evolutionary tree that represents the evolution of the sample. He needs to compute the most likely evolutionary tree, the tree with smallest unlikeliness.\n\nThe DNA sample is a string, where the length of the string is a positive integer at least $2$ and no more than $100$, and the characters of the string are the characters in the string \"ACTG\".\n\nThe evolutionary tree is defined as follows:\n\n- The root of the tree is the sample;\n- The root is an internal node of the tree if the length of the sample is at least $2$;\n- Otherwise, the root is a leaf;\n- Each internal node has exactly two children: one child is the left node and the other is the right node;\n- Each internal node has exactly two edges: the first edge connects the parent node with the left node, and the second edge connects the parent node with the right node;\n- The left node is defined as the child node that has the smaller value of the two numbers of differences in the characters of the DNA strings in the children of the node;\n- The right node is defined as the child node that has the greater value of the two numbers of differences in the characters of the DNA strings in the children of the node;\n- The weight of an edge between two nodes is the number of positions at which the DNA strings in the children of the nodes differ.\n- The unlikeliness of the tree is defined as the sum of the weights of all edges.\n\nThe minimal unlikeliness of the evolutionary tree for the sample is defined as the smallest unlikeliness of an evolutionary tree.\n\nFor instance, the following figure shows the evolution of the sample \"AAATTT\". The optimal tree for this sample is also shown.\n\n-----Solution-----\n\nusing a stack\n\nkeep track of the prefixes (the substrings of the sample that are not a leaf)\nkeep track of the weights of the prefixes\nkeep track of the most likely tree\nwhile the stack is not empty\n    current prefix\n    current weight\n    current most likely tree\n    current number of differences\n    current number of positions of the first DNA strings in the current prefix\n    current number of positions of the second DNA strings in the current prefix\n    current weight of the most likely tree\n    for each of the prefixes in the stack\n        if the prefix is larger than the current prefix\n            then remove the prefix from the stack\n            increment the current weight\n            add the current prefix to the stack\n        else if the prefix is equal to the current prefix\n            increment the current weight\n            increment the current number of differences\n            increment the current number of positions of the first DNA strings in the current prefix\n            increment the current number of positions of the second DNA strings in the current prefix\n            if the current weight is less than the current most likely tree\n                then increment the current most likely tree\n            add the current prefix to the stack\n    output the current most likely tree\n\n'''\n\nfrom sys import stdin",
        "num_ids_2": 70,
        "num_ids_4": 125
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == '-1'\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1_000_000)\n\ninp = sys.stdin.readline().rstrip()\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abba\") == \"abba\"\nassert solution(\"aab\") == \"aba\"\nassert solution(\"abac\") == \"aba\"\nassert solution(\"abacabac\") == \"aba\"\nassert solution(\"abaca\") == \"aba\"\n",
        "num_ids_2": 21,
        "num_ids_4": 45
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"bbbab\") == \"bba\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == -1\nassert solution(\"abba\") == \"ab\"\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 29
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == -1\n\n\"\"\"\n\nimport itertools\nimport string\nfrom typing import List, Tuple, Set, Dict",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == -1\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == '-1'\nassert solution('abb') == '-1'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '-1'\nassert solution('aaaa') == 'a'\nassert solution('bbb') == 'b'\nassert solution('aabbbbbb') == 'a'\nassert solution('abb') == '-1'\n",
        "num_ids_2": 21,
        "num_ids_4": 45
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '-1'\nassert solution('aaaa') == 'a'\nassert solution('ab') == '-1'\nassert solution('abbb') == 'b'\nassert solution('abb') == '-1'\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"aaaa\"\n) == \"a\"\n\nassert solution(\n    \"ab\"\n) == \"-1\"\n\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 100\\n2 3\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"1 1000\\n0 0\") == \"Dr. Chaz needs 1 more piece of chicken!\"\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20 100\\n2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'\nassert solution('100 20\\n3 4') == 'Dr. Chaz needs 2 more piece[s] of chicken!'\nassert solution('10 10\\n5 6') == 'Dr. Chaz needs 0 piece[s] of chicken!'\n\nprint(solution(stdin))",
        "num_ids_2": 53,
        "num_ids_4": 79
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'\nassert solution('10 4') == 'Dr. Chaz needs 2 more piece[s] of chicken!'\n\"\"\"",
        "num_ids_2": 44,
        "num_ids_4": 67
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'\n\n\"\"\"\n\nfrom typing import List, Tuple\nimport math\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20 100\\n2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'\nassert solution('20 100\\n100 100') == 'Dr. Chaz needs 100 pieces of chicken!'\nassert solution('20 100\\n20 100') == 'Dr. Chaz needs 0 pieces of chicken!'\n\"\"\"",
        "num_ids_2": 49,
        "num_ids_4": 72
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 100\\n\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\n\nassert solution(\"2 3\\n\") == \"Dr. Chaz needs 1 more piece of chicken!\"\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''20 100''') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('''2 3''') == 'Dr. Chaz will have 1 piece of chicken left over!'\n'''\n\n\nimport unittest\nimport math\n\n\nclass TestSum(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(solution('20 100'), 'Dr. Chaz will have 80 pieces of chicken left over!')\n\n    def test_case_2(self):\n        self.assertEqual(solution('2 3'), 'Dr. Chaz will have 1 piece of chicken left over!')\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20 100\\n') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3\\n') == 'Dr. Chaz will have 1 piece of chicken left over!'\n\n\"\"\"\n\n\"\"\"\n\u8fd9\u9053\u9898\u7684\u5173\u952e\u662f\u63a8\u5bfc\u4e24\u4e2a\u6570\u5b57\u95f4\u7684\u5dee\u503c\uff0c\u53ef\u4ee5\u505a\u4e3a\u4e24\u4e2a\u6570\u5b57\u7684\u7ec4\u5408\u6570\u7684\u6700\u5c0f\u503c\uff0c\u7136\u540e\u5206\u6790\u5dee\u503c\u7684\u7ed3\u679c\uff0c\u662f\u5426\u80fd\u591f\u88abM\u6574\u9664\n\u4ece\u5934\u5230\u5c3e\u904d\u5386\u4e00\u904d\uff0c\u5bf9\u6bcf\u4e00\u4f4d\u6570\u5b57\uff0c\u5728\u5176\u5de6\u8fb9\u7684\u6570\u5b57\u4e2d\u627e\u51fa\u6700\u5c0f\u7684\u7ec4\u5408\u6570\u4e0e\u8be5\u6570\u5b57\u7684\u5dee\u503c\uff0c\u5728\u5176\u53f3\u8fb9\u7684\u6570\u5b57\u4e2d\u627e\u51fa\u6700\u5c0f\u7684\u7ec4\u5408\u6570\u4e0e\u8be5\u6570\u5b57\u7684\u5dee\u503c\uff0c\u5224\u65ad\u5dee\u503c\u662f\u5426\u80fd\u591f\u88abM\u6574\u9664\uff0c\u82e5\u80fd\uff0c\u5219\u4e3a\u8d1f\u6570\uff0c\u5426\u5219\u4e3a\u6b63\u6570\n\u6700\u540e\u518d\u904d\u5386\u4e00\u904d\uff0c\u7edf\u8ba1\u6b63\u6570\u7684\u4e2a\u6570\n\"\"\"\n\nimport math\n\nN, M = [int(x) for x in input().split(' ')]\n\ncount = 0\n\nfor i in range(0, N):\n    a = math.factorial(N) // (math.factorial(i) * math.factorial(N - i))\n    for j in range(0, M):\n        b = math.factorial(M) // (math.factorial(j) * math.factorial(M - j))\n        c = a - b\n        if c % M == 0:\n            count += 1\n\nprint('Dr. Chaz needs {} more piece[s] of chicken!'.format(count))",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == \"Dr. Chaz needs 2 more piece[s] of chicken!\"\nassert solution('\\n5 10') == \"Dr. Chaz needs 3 more piece[s] of chicken!\"\nassert solution('\\n9 10') == \"Dr. Chaz needs 2 more piece[s] of chicken!\"\nassert solution('\\n5 1') == \"Dr. Chaz will have 1 piece of chicken left over!\"\nassert solution('\\n5 4') == \"Dr. Chaz will have 3 pieces of chicken left over!\"\n",
        "num_ids_2": 47,
        "num_ids_4": 96
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('20 100\\n2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'\nassert solution('20 100\\n5 2') == 'Dr. Chaz needs 2 more piece[s] of chicken!'\nassert solution('20 100\\n4 20') == 'Dr. Chaz needs 1 piece of chicken!'\nassert solution('20 100\\n2 10') == 'Dr. Chaz will have 7 pieces of chicken left over!'\nassert solution('20 100\\n2 100') == 'Dr. Chaz needs 0 piece[s] of chicken!'\n",
        "num_ids_2": 53,
        "num_ids_4": 102
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"-2\"\n\"\"\"\n\nfrom itertools import product",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"0\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 10\\n1 1 1\\n5 2 3\\n5 2 1') == '0'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == -2\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 2 3\") == \"0\"\nassert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"-2\"\nassert solution(\"4 980\\n10 10 10\\n10 5 2\\n5 3 2\\n90 5 2\") == \"0\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.read()",
        "num_ids_2": 42,
        "num_ids_4": 73
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"-2\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 10\\n1 1 2\\n2 2 2\\n3 2 1') == '-2'\nassert solution('3 30\\n1 1 1\\n5 2 3\\n5 2 1') == '0'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('4 10') == '0'\nassert solution('4 30') == '-2'\nassert solution('4 100') == '0'\nassert solution('4 100') == '0'\n",
        "num_ids_2": 19,
        "num_ids_4": 42
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5\\n5 2 3\\n1 1 1') == '0'\nassert solution('4\\n4 4 4\\n2 2 2') == '-1'\nassert solution('4\\n5 2 3\\n4 4 4') == '-2'\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 70
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"0\"\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == \"-2\"\nassert solution(\"4 10\\n4 4 4\\n4 4 4\\n4 4 4\\n\") == \"-8\"\nassert solution(\"2 10\\n1 2 2\\n3 2 1\") == \"0\"\nassert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"0\"\n",
        "num_ids_2": 52,
        "num_ids_4": 101
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#\\n') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as\\n') == 'as'\n\"\"\"\n\nfrom itertools import combinations",
        "num_ids_2": 62,
        "num_ids_4": 62
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 4\nluka\no#a#\nkula\ni#a#''') == 'kala'\nassert solution('''4 4\nluka\no#a#\nkula\ni#as''') == 'as'\nassert solution('''4 4\nluka\no#a#\nkula\ni#a#\nkula\no#a#\nluka\ni#a#\nkula\ni#a#''') == 'kala'\nassert solution('''4 4\nluka\no#a#\nkula\ni#as''') == 'as'\nassert solution('''4 4\nluka\no#a#\nkula\ni#a#\nkula\no#a#\nluka\ni#a#\nkula\ni#a#\nkula\no#a#''') == 'kala'\n\nSample Input 2:\n4 2\nh#h#\na#a#\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    4 4\n    luka\n    o#a#\n    kula\n    i#a#\n    \"\"\"\n) == \"kala\"\n\nassert solution(\n    \"\"\"\n    4 4\n    luka\n    o#a#\n    kula\n    i#as\n    \"\"\"\n) == \"as\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as') == 'as'\n\nSample Output 1:\nkala\n\nSample Output 2:\nas\n\n\"\"\"\n\nfrom collections import defaultdict, deque\nfrom typing import List, Deque\n\nimport unittest\n\nclass Solution:\n    \"\"\"Solution class\"\"\"\n\n    def solve(self, stdin: List[List[str]]) -> str:\n        \"\"\"Finds the shortest word that can be written on the given crossword\n\n        Args:\n            stdin (List[List[str]]): [description]\n\n        Returns:\n            str: The shortest word that can be written on the crossword\n        \"\"\"\n        R, C = len(stdin), len(stdin[0])\n        letters: Deque[str] = deque()\n        blocked: Deque[Deque[str]] = deque()\n        words = defaultdict(list)\n\n        # find words and blocked squares\n        for r in range(R):\n            for c in range(C):\n                if stdin[r][c] == '#':\n                    blocked.append(deque())\n                else:\n                    letters.append(stdin[r][c])\n                    blocked.append(deque())\n                    words[stdin[r][c]].append((r, c))\n        # build a dict of paths for each letter\n        paths = {l: {} for l in letters}\n        for l, pos in zip(letters, words.values()):\n            for r, c in pos:\n                if r == 0:\n                    paths[l][(r, c)] = [(r, c)]\n                else:\n                    paths[l][(r, c)] = [(r, c)] + paths[l][(r - 1, c)]\n\n        # find the shortest word from each letter\n        res = ''\n        for l in letters:\n            seen = set()\n            q = deque([(0, 0, [], [])])\n            while q:\n                r, c, path, p = q.popleft()\n                if r == R - 1:\n                    if not res or len(res) > len(path):\n                        res = path\n                        res.append(l)\n                        res.reverse()\n                    continue\n                for r2, c2 in [(r + 1, c), (r - 1, c), (r, c + 1), (r, c - 1)]:\n                    if (r2, c2) not in paths[l] or (r2, c2) in seen:\n                        continue\n                    seen.add((r2, c2))\n                    q.append((r2, c2, path + [l], p + [p[-1] + (r2, c2)]))\n\n        return ''.join(res)\n\n\nclass Tester(unittest.TestCase):\n    def test_sample_1(self):\n        stdin = [\n            ['l', 'u', 'k', 'a'],\n            ['o', '#', '#', '#'],\n            ['k', 'u', 'l', 'a']\n        ]\n        expected = 'kala'\n        self.assertEqual(Solution().solve(stdin), expected)\n    def test_sample_2(self):\n        stdin = [\n            ['l', 'u', 'k', 'a'],\n            ['o', '#', '#', '#'],\n            ['k', 'u', 'l', 'a']\n        ]\n        expected = 'as'\n        self.assertEqual(Solution().solve(stdin), expected)\n    def test_sample_3(self):\n        stdin = [\n            ['l', 'u', 'k', 'a'],\n            ['o', '#', '#', '#'],\n            ['k', 'u', 'l', 'a']\n        ]\n        expected = 'as'\n        self.assertEqual(Solution().solve(stdin), expected)\n    def test_sample_4(self):\n        stdin = [\n            ['l', 'u', 'k', 'a'],\n            ['o', '#', '#', '#'],\n            ['k', 'u', 'l', 'a']\n        ]\n        expected = 'as'\n        self.",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == 'kala'\nassert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == 'as'",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 4\nluka\no#a#\nkula\ni#a#''') == 'kala'\nassert solution('''4 4\nluka\no#a#\nkula\ni#as''') == 'as'\nassert solution('''4 4\nluka\no#a#\nkula\ni#a#\ni#a#\nSample Input 3:\n4 4\njatko\njatko\njatko\njatko\nSample Output 3:\njatko\n\n-----Constraints-----\n2 <= R, C <= 20\nThe input will always be valid.\n'''):\n    pass\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n4 4\nluka\no#a#\nkula\ni#a#\n\"\"\"\n) == \"kala\"\n\nassert solution(\n    \"\"\"\n4 4\nluka\no#a#\nkula\ni#as\n\"\"\"\n) == \"as\"\n\"\"\"\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n\n    def test_solution(self):\n        pass",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\n\nSample Output\nYour solution\n\n---",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"4 4\\nluka\\no#a#\\nkula\\ni#as\") == \"as\"\nassert solution(\n    \"4 4\\nluka\\no#a#\\nkula\\ni#a#\\nkula\\nluka\") == \"luka\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 4\nluka\no#a#\nkula\ni#a#''') == 'kala'\nassert solution('''4 4\nluka\no#a#\nkula\ni#as''') == 'as'\n\nprint(solution(stdin.read()))\n\n--------------------------",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('WNWENWWE') == '7'\n\nprint('Success')",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"WNWSSESENW\") == \"11\"\nassert solution(\"WNWSSESENWSE\") == \"11\"\nassert solution(\"WNWSSESENWSEW\") == \"12\"\nassert solution(\"WNWSSESENWSEWSEW\") == \"12\"\nassert solution(\"WNWSSESENWSEWSEWSEW\") == \"12\"",
        "num_ids_2": 31,
        "num_ids_4": 67
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('W') == 'W'\nassert solution('NNE') == 'NNE'\nassert solution('NEN') == 'NEN'\nassert solution('NENN') == 'NENN'\n",
        "num_ids_2": 18,
        "num_ids_4": 42
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('WNEENWEENEENE') == 10\nassert solution('NSEW') == 4",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('WNEENWEENEENE') == 10\n\"\"\"\n\nimport operator\nimport itertools",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('WNEENWEENEENE') == 10\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('WNEENWEENEENE') == '10'\nassert solution('NSEW') == '4'\nassert solution('NW') == '3'\nassert solution('ENW') == '3'\nassert solution('N') == '1'\n",
        "num_ids_2": 27,
        "num_ids_4": 48
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('WNEENWEENEENE') == 10\nassert solution('NSEW') == 4",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"WNEENWEENEENE\") == \"10\"\nassert solution(\"NSEW\") == \"4\"\nprint('Success')\n\n\"\"\"\n\nimport sys\nfrom unittest import TestCase, main",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WNEENWEENEENE\") == \"10\"\nassert solution(\"NSEW\") == \"4\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n'\n",
        "num_ids_2": 83,
        "num_ids_4": 83
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4'\n\"\"\"\n\nfrom itertools import permutations\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\"\n\"\"\"\n\n\nfrom itertools import permutations\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n\"\n\n\"\"\"\n",
        "num_ids_2": 83,
        "num_ids_4": 83
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '1 2 3 4'\n) == \"\"\"1 - 2 = 3 - 4\n1 / 2 = 3 / 4\"\"\"\n\nassert solution(\n    '0 4 2 2'\n) == \"problems ahead\"\nassert solution(\n    '1 1 1 1'\n) == \"problems ahead\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n'\n",
        "num_ids_2": 83,
        "num_ids_4": 83
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2'\n\nfrom aocd import data\nimport sys",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"\"\"1 - 2 = 3 - 4\n1 / 2 = 3 / 4\n\"\"\"\nassert solution(\"0 4 2 2\") == \"\"\"0 * 4 = 2 - 2\n0 + 4 = 2 * 2\n0 + 4 = 2 + 2\n0 / 4 = 2 - 2\nproblems ahead\n\"\"\"\n\"\"\"\ni/p :\n1 2 3 4\no/p :\n1 - 2 = 3 - 4\n1 / 2 = 3 / 4\n\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 3 1') == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\"\nassert solution('0 4 2 2') == \"problems ahead\"\n\nimport sys\n\na, b, c, d = map(int, sys.stdin.readline().split())\n\nfor x in range(a, b + 1):\n    for y in range(c, d + 1):\n        if x + y == a + b and x - y == a - b and x * y == a * b:\n            print(x, '-', y, '=', x - y)\n            print(x, '/', y, '=', x / y)\n            print(x, '*', y, '=', x * y)\n            print(x, '+', y, '=', x + y)\n            break\n",
        "num_ids_2": 79,
        "num_ids_4": 79
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \"\"\"\n.P....\n.I....\n.D....\n.Z....\nBANANA\n.M....\n.A....\n\"\"\"[1:]\n\nassert solution(\"MAMA TATA\") == \"\"\"\n.T..\nMAMA\n.T..\n.A..\n\"\"\"[1:]\n\nprint('Success')\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('BAANANPIDZAMAAA') == 'P....\\nI....\\nD....\\nZ....\\nBANANA\\nM....\\nA....'\nassert solution('BANANAPIDZAMATATA') == 'P....\\nI....\\nD....\\nZ....\\nBANANA\\nM....\\nA....'",
        "num_ids_2": 51,
        "num_ids_4": 95
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('BANANA PIDZAMA') == '.P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....'\nassert solution('MAMA TATA') == '.T..\\nMAMA\\n.T..\\n.A..'\n\"\"\"",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\"\nassert solution(\"MAMA TATA\") == \".T..\\nMAMA\\n.T..\\n.A..\"\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('BANANA PIDZAMA') == '''\\\n.P....\n.I....\n.D....\n.Z....\nBANANA\n.M....\n.A....\n'''\nassert solution('MAMA TATA') == '''\\\n.T..\nMAMA\n.T..\n.A..\n'''\n\"\"\"\nABA    CBB\nABBA\nCCBB\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \"P.I.D.Z.A.\\nM.A.\\n.A.\"\n\"\"\"\nimport unittest\nimport textwrap",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('BANANA PIDZAMA') == '.P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....'\nassert solution('MAMA TATA') == '.T..\\nMAMA\\n.T..\\n.A..'\n\"\"\"",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\"\nassert solution(\"MAMA TATA\") == \".T..\\nMAMA\\n.T..\\n.A..\"\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def solution(self, stdin):\n        a = stdin.split(\" \")\n        if len(a[0])!= len(a[1]):\n            return \"\".join([a[1][0] for _ in range(len(a[0]))] + [\"\\n\"] + [\"\".join([a[0][i] for i in range(len(a[0]))]) for _ in range(len(a[1]))])\n\n        else:\n            return \"\".join([a[0][0] for _ in range(len(a[0]))]) + \"\\n\" + \"\".join([a[1][i] for i in range(len(a[0]))])\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"BANANA PIDZAMA\"), \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\")\n        self.assertEqual(solution(\"MAMA TATA\"), \".T..\\nMAMA\\n.T..\\n.A..\")",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('BANANA PIDZAMA') == '.P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....'\nassert solution('MAMA TATA') == '.T..\\nMAMA\\n.T..\\n.A..'\n\"\"\"\n\nimport itertools\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('BANANA PIDZAMA') == '.P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....'\nassert solution('MAMA TATA') == '.T..\\nMAMA\\n.T..\\n.A..'\n\n\"\"\"\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == 10\n\"\"\"\n\nimport sys\nfrom itertools import accumulate\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n10 14\\n13 17\\n25 26') == '10\\n'\n\"\"\"\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\\n\") == \"10\"\nassert solution(\"4\\n1 365\\n20 28\\n1 1\\n2 2\\n\") == \"365\"\nassert solution(\"1\\n1 365\\n\") == \"365\"\nassert solution(\"2\\n1 365\\n2 2\\n\") == \"365\"\nassert solution(\"1\\n1 365\\n\") == \"365\"\n",
        "num_ids_2": 52,
        "num_ids_4": 88
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\\n\") == 10\n\"\"\"\n\n\"\"\"\nIn each line, each integer in the second part of the input represents the number of days until that event. For instance, 10 and 13 refer to a ten-day event and a thirteen-day event, respectively.\n\nIn the first line of the input, there is an integer $N$ denoting the number of events.\n\n-----Sample Input-----\n2\n1 365\n20 28\n-----Sample Output-----\n365\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\nassert solution(\"2\\n1 365\\n20 28\") == \"365\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1 365\\n20 28') == '365'\nassert solution('2\\n1 365\\n20 28') == '365'\nassert solution('2\\n1 365\\n20 28') == '365'\nassert solution('2\\n1 365\\n20 28') == '365'\n\n-----Solution-----\n\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solve(self, stdin: List[str]) -> int:\n        l = [int(e) for e in stdin[1].split(' ')]\n        k = int(stdin[0])\n        m = {}\n        for i in range(k):\n            a = l[i]\n            for j in range(i+1, k):\n                b = l[j]\n                s = a + b\n                if s in m:\n                    m[s] += 1\n                else:\n                    m[s] = 1\n        n = 0\n        for i in range(k):\n            a = l[i]\n            for j in range(i+1, k):\n                b = l[j]\n                s = a + b\n                if s in m and m[s] > 0:\n                    n += 1\n                    m[s] -= 1\n        return n\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\nassert solution(\"2\\n1 365\\n20 28\") == \"365\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10 20\\n30 40\\n50 60\") == \"4\\n10 20\\n30 40\\n50 60\"\nassert solution(\"4\\n10 20\\n30 40\\n50 60\\n2\\n1 1\\n10 10\") == \"4\\n10 20\\n30 40\\n50 60\\n2\\n1 1\\n10 10\"\nassert solution(\"4\\n10 20\\n30 40\\n50 60\\n2\\n1 1\\n10 10\\n21 23\\n30 33\") == \"4\\n10 20\\n30 40\\n50 60\\n2\\n1 1\\n10 10\\n21 23\\n30 33\"\nassert solution(\"4\\n10 20\\n30 40\\n50 60\\n2\\n1 1\\n10 10\\n21 23\\n30 33\\n54 56\") == \"4\\n10 20\\n30 40\\n50 60\\n2\\n1 1\\n10 10\\n21 23\\n30 33\\n54 56\"\nassert solution(\"4\\n10 20\\n30 40\\n50 60\\n2\\n1 1\\n10 10\\n21 23\\n30 33\\n54 56\\n5 5\\n1 1\\n10 10\\n21 23\\n30 33\\n54 56\\n5 5\\n1 1\\n10 10\\n21 23\\n30 33\\n54 56\\n5 5\") == \"4\\n10 20\\n30 40\\n50 60\\n2\\n1 1\\n10 10\\n21 23\\n30 33\\n54 56\\n5 5\\n1 1\\n10 10\\n21 23\\n30 33\\n54 56\\n5 5\"\n\"\"\"",
        "num_ids_2": 90,
        "num_ids_4": 242
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 1\\n1 10\") == \"10\"\nprint(solution(\"3\\n10 14\\n13 17\\n25 26\"))\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n10 14\\n13 17\\n25 26') == 10\nprint('Test pass.')\n\n-----\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '0 1'\nassert solution('4') == '2 3'\nassert solution('45') == '9 15'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4''') == '2 3'\nassert solution('''4''') == '2 3'\nassert solution('''6''') == '1 5'\nassert solution('''1''') == '1 1'\nassert solution('''4''') == '2 3'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == (\"0 1\", \"2 1\")\nassert solution(\"2\") == (\"1 1\", \"2 2\")\nassert solution(\"3\") == (\"2 1\", \"5 3\")\nassert solution(\"4\") == (\"2 1\", \"4 6\")\n\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"0 1\"\nassert solution(\"4\") == \"2 3\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n') == '0 1'\nassert solution('2\\n') == '0 1'\nassert solution('3\\n') == '1 1'\nassert solution('4\\n') == '2 3'\n\"\"\"\n\nimport sys\n\nK = int(sys.stdin.readline().strip())\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0 1\"\nassert solution(\"4\") == \"2 3\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"0 1\"\nassert solution(\"4\") == \"2 3\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"0 1\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\nBA') == '2 3'\nassert solution('20\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB') == '5 3'\nassert solution('4\\nAB') == '0 1'\nassert solution('15\\n
        "num_ids_2": 45,
        "num_ids_4": 1751
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"0 1\"\nassert solution(\"4\") == \"2 3\"\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\nimport typing as t\n\nK = int(input())\n\nprint(K * 4 // 5, K * 4 % 5)\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\\n\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nprint(\"Test 1 OK\")\n\nassert solution(\"5 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\\n\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"\nprint(\"Test 2 OK\")\n",
        "num_ids_2": 116,
        "num_ids_4": 116
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\\n\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nprint(solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\"))\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nGiven a list of votes, assign the voter to the party with a majority of voters (maximum number of voters for which the candidate has more than 50%). If there is no such candidate, assign the voter to the party with the highest turnout (maximum number of voters).\n\n-----Input-----\nThe input is a list of lines. The first line is the number of candidates (1\u2009\u2264\u2009N\u2009\u2264\u20091000), then the list of N lines, each contains three integers: the number of voters for the candidate from party A ($0 \\le a_ i \\le 1\\times 10^9$), the number of voters for the candidate from party B ($0 \\le b_ i \\le 1\\times 10^9$), and the number of voters for the candidate from party C ($0 \\le c_ i \\le 1\\times 10^9$). The voters are numbered from 1 to the total number of voters. The three integers do not have an order.\n\n-----Output-----\nPrint the number of the party with the majority of voters (1\u2009\u2264\u2009p\u2009\u2264\u20093), or the number of the party with the highest turnout (1\u2009\u2264\u2009p\u2009\u2264\u20093).\n\n-----Examples-----\nSample input:\n4\n1 1 1\n1 1 1\n1 1 1\n1 1 1\nSample output:\n1\n1\n2\n3\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nGiven a list of votes, assign the voter to the party with a majority of voters (maximum number of voters for which the candidate has more than 50%). If there is no such candidate, assign the voter to the party with the highest turnout (maximum number of voters).\n\n-----Input-----\nThe input is a list of lines. The first line is the number of candidates (1\u2009\u2264\u2009N\u2009\u2264\u20091000), then the list of N lines, each contains three integers: the number of voters for the candidate from party A ($0 \\le a_ i \\le 1\\times 10^9$), the number of voters for the candidate from party B ($0 \\le b_ i \\le 1\\times 10^9$), and the number of voters for the candidate from party C ($0 \\le c_ i \\le 1\\times 10^9$). The voters are numbered from 1 to the total number of voters. The three integers do not have an order.\n\n-----Output-----\nPrint the number of the party with the majority of voters (1\u2009\u2264\u2009p\u2009\u2264\u20093), or the number of the party with the highest turnout (1\u2009\u2264\u2009p\u2009\u2264\u20093).\n\n-----Examples-----\nSample input:\n4\n1 1 1\n1 1 1\n1 1 1\n1 1 1\nSample output:\n1\n1\n2\n3\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nGiven a list of votes, assign the voter to the party with a majority of voters (maximum number of voters for which the candidate has more than 50%). If there is no such candidate, assign the voter to the party with the highest turnout (maximum number of voters).\n\n-----Input-----\nThe input is a list of lines. The first line is the number of candidates (1\u2009\u2264\u2009N\u2009\u2264\u20091000), then the list of N lines, each contains three integers: the number of voters for the candidate from party A ($0 \\le a_ i \\le 1\\times 10^9$), the number of voters for the candidate from party B ($0 \\le b_ i \\le 1\\times 10^9$), and the number of voters for the candidate from party C ($0 \\le c_ i \\le 1\\times 10^9$). The voters are numbered from 1 to the total number of voters. The",
        "num_ids_2": 112,
        "num_ids_4": 112
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 100 99\\n2 100 99\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5 3\n1 100 200\n2 100 99\n3 100 50\n3 100 50\n2 100 98\n\"\"\") == 'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\nprint(\"The first example is handled correctly.\")\n\nassert solution(\"\"\"\n4 4\n3 100 99\n2 100 99\n1 100 99\n4 100 99\n\"\"\") == 'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372'\nprint(\"The second example is handled correctly.\")\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98') == 'B 100 49\\nA 1 197\\nA 49 100'\nassert solution('4 100 99\\n2 100 99\\n1 100 99\\n4 100 99') == 'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99'\n\n\"\"\"",
        "num_ids_2": 88,
        "num_ids_4": 88
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"\n\"\"\"\n\n\nimport sys",
        "num_ids_2": 112,
        "num_ids_4": 112
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(solution.testcase[0]) == solution.testcase[1]\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\"\nassert solution(\"5 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\"\n\"\"\"\n\nimport numpy as np\n",
        "num_ids_2": 96,
        "num_ids_4": 144
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == \"168\"\nassert solution(\"2\\n1\\n1\") == \"1\"\nprint('All tests passed.')",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1\\n1\") == '1'\nassert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == '168'",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"5\n2\n1\n4\n3\n5\"\"\"\n) == \"168\"\nassert solution(\"\"\"5\n2\n1\n4\n3\n5\"\"\"\n) == \"1\"\nassert solution(\"\"\"5\n3\n1\n4\n2\n5\"\"\"\n) == \"1\"\nassert solution(\"\"\"5\n1\n1\n1\n1\n1\"\"\"\n) == \"1\"\nassert solution(\"\"\"6\n1\n2\n2\n3\n3\n3\"\"\"\n) == \"14\"\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\\n\") == \"168\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"5\\n2\\n3\\n4\\n5\") == \"168\"\n\"\"\"\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1\\n1') == '1'\nassert solution('2\\n1\\n2\\n3\\n4\\n5') == '168'\n\"\"\"\n\nimport math\n\nn = int(input())\n\nsum_n = 0\nfor i in range(1, n + 1):\n    sum_n += i ** 2\n\nmax_sum = 0\nfor i in range(1, n + 1):\n    for j in range(i + 1, n + 1):\n        sum_ij = i ** 2 + j ** 2\n        if sum_ij * (i + j) > max_sum:\n            max_sum = sum_ij * (i + j)\n\nprint(max_sum)\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == \"168\"\n\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2\\n1\\n4\\n3\\n5\\n') == '168'\n\"\"\"\n\nfrom sys import stdin, stdout\n\nn = int(stdin.readline())\nres = 0\nfor i in range(n):\n    res += int(stdin.readline()) ** 2\n\nstdout.write(str(res))\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == 168\n\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2\\n1\\n4\\n3\\n5\\n') == '168'\n\"\"\"\n\nimport math",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\n\"\"\"\n\nimport collections\nimport itertools\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\nprint(solution(stdin))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 3\nABC\nDEF\n2''') == 'CDBEAF'\n\nassert solution('''3 3\nABC\nDEF\n0''') == 'ABCDEF'\n\nassert solution('''3 3\nBCA\nDEF\n2''') == 'CABEDF'\n\nassert solution('''3 3\nABA\nABC\n0''') == 'ABCABA'\n\nassert solution('''3 3\nDBC\nABC\n2''') == 'DBCEAF'",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\nprint(\"OK\")\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n0\") == \"CBADEF\"\nassert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDABFE\"\nassert solution(\"3 3\\nAAAC\\nDBAB\\n0\") == \"AAACDBAB\"\n\nSample Input 3:\n2 4\nAB\nBC\n2\nSample Output 3:\nABBC\nBCAB\n\"\"\"\nimport math",
        "num_ids_2": 45,
        "num_ids_4": 72
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\nFBAB\\nCBAF\\nCABF') == 'FABCBA'\nassert solution('4 4\\nFBAB\\nCBAF\\nCABF') == 'FABCBA'\nassert solution('4 4\\nFBAB\\nCBAF\\nCABF') == 'FABCBA'\nassert solution('4 4\\nFBAB\\nCBAF\\nCABF') == 'FABCBA'\nassert solution('4 4\\nFBAB\\nCBAF\\nCABF') == 'FABCBA'\n",
        "num_ids_2": 56,
        "num_ids_4": 112
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2\\n') == 'CDBEAF'\nassert solution('3 3\\nDEF\\nABC\\n2\\n') == 'CBADEF'\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\nABC\nDEF\n0\n''') == 'CBADEF'\nassert solution('''\n3 3\nABC\nDEF\n2\n''') == 'CDBEAF'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\n\"\"\"\n\nfrom collections import deque\n\nN_1, N_2 = map(int, stdin.readline().split())\nmatrix_1 = [deque(stdin.readline().strip()) for _ in range(N_1)]\nmatrix_2 = [deque(stdin.readline().strip()) for _ in range(N_2)]\nT = int(stdin.readline())\n\nmatrix_1 = list(zip(*matrix_1))\nmatrix_2 = list(zip(*matrix_2))\n\nmatrix_1 = list(map(lambda x: deque(x), zip(*matrix_1)))\nmatrix_2 = list(map(lambda x: deque(x), zip(*matrix_2)))\n\nfor i in range(T):\n    temp_1 = deque([])\n    for j in range(len(matrix_1)):\n        while matrix_1[j][0] in matrix_2[j] and matrix_1[j][-1] in matrix_2[j]:\n            temp_1.append(matrix_1[j].popleft())\n            temp_1.append(matrix_1[j].pop())\n\n    matrix_1 = temp_1\n    temp_2 = deque([])\n    for j in range(len(matrix_2)):\n        while matrix_2[j][0] in matrix_1[j] and matrix_2[j][-1] in matrix_1[j]:\n            temp_2.append(matrix_2[j].popleft())\n            temp_2.append(matrix_2[j].pop())\n\n    matrix_2 = temp_2\n\nprint(\"\".join(map(str, matrix_1)))\nprint(\"\".join(map(str, matrix_2)))",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n5\\n20T\\n50T\\n80T\\n50T\\n30T') == '1'\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n5\\n100 T\\n100 N\\n100 T\\n100 N') == '4'\nassert solution('1\\n5\\n100 T\\n100 N\\n100 T\\n100 N') == '1'\n\"\"\"",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"1\"\n\"\"\"\n\nimport sys\nimport collections",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"5\"\nassert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 N\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\nassert solution('2\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N') == '2'",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"1\"\nassert solution(\"2\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"2\"\nassert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 N\") == \"3\"\nassert solution(\"4\\n5\\n100 T\\n100 N\\n100 T\\n100 N\") == \"4\"\nassert solution(\"5\\n5\\n100 T\\n100 N\\n100 T\\n100 N\") == \"5\"\n",
        "num_ids_2": 66,
        "num_ids_4": 124
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\nassert solution('3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N') == '3'\nassert solution('1\\n5\\n20 T\\n50 N\\n80 T\\n50 N\\n30 N') == '3'\nassert solution('2\\n5\\n20 T\\n50 T\\n80 T\\n50 N\\n30 N') == '4'\nassert solution('1\\n5\\n20 T\\n50 T\\n80 N\\n50 N\\n30 T') == '3'\n\"\"\"",
        "num_ids_2": 66,
        "num_ids_4": 132
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"1\"\nassert solution(\"1\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2",
        "num_ids_2": 1427,
        "num_ids_4": 1427
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n6 8') == '22'\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 2 3 4 5') == '6'\nassert solution('6 8\\n1 2 3 4 6 5 7 8') == '22'",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '6'\nassert solution('2 3') == '6'\nassert solution('1 2 3 4 5 6') == '9'\nassert solution('1 2 3 4 5 6 7 8 9') == '16'\n\nimport io, os, sys\n\n_INPUT_FILE = 'input.txt.test'\n\n\nclass TestDataEmptyInput(object):\n    @staticmethod\n    def input_data():\n        return TestDataEmptyInput()\n\n\nclass TestDataInput(object):\n    @staticmethod\n    def input_data():\n        return TestDataInput(['4', '3', '1 2 3 4 5 6', '1 2 3 4 5 6 7 8 9'])\n",
        "num_ids_2": 20,
        "num_ids_4": 46
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n4 3\") == \"6\"\n\nassert solution(\"6 8\\n6 8\") == \"22\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n4 5\\n1 2\\n2 3\\n3 4\") == '6'\nassert solution(\"6 8\\n2 3\\n3 4\\n4 5\\n5 6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == '22'\n\nprint(solution(input()))\n\nimport time\n\nstart_time = time.time()\nprint(solution(input()))\nend_time = time.time()\nprint('Time elapsed:'+ str(end_time - start_time))",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 3 4 5\\n2 3 4 5\\n3 4 5\\n4 5\") == \"6\"\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3') == '6'\nassert solution('6 8') == '22'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"6\"\nassert solution(\"6 8\") == \"22\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"6\"\nassert solution(\"6 8\") == \"22\"\n\n\"\"\"\n\nimport sys\nimport numpy as np",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 1\\n1 4\\n4 2\\n2 1\") == \"6\"\nassert solution(\"6 8\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 1\\n2 6\\n2 4\\n2 3\\n2 1\\n1 6\\n3 6\\n3 5\\n3 4\\n3 2\\n3 1\\n4 6\\n4 5\\n4 3\\n4 2\\n4 1\\n5 6\\n5 4\\n5 3\\n5 2\\n5 1\\n6 1\") == \"22\"\n\n\"\"\"\n\n\nfrom math import factorial as fact\n",
        "num_ids_2": 154,
        "num_ids_4": 154
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('1 2 3\\n4 3 2\\n5 6 7') == 1\n\"\"\"\n\nimport os\nimport sys\nimport math\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\n\"\"\"\n\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\\n\") == 1\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\nassert solution(\"1 4\\n4 3 2 1\") == \"0\"\n\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2 1\") == \"0\"\nassert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\n\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(solution_task(int(input())))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\n\"\"\"\nimport math\n\n\nclass Matrix:\n    def __init__(self, data):\n        self.data = data\n\n    def __str__(self):\n        return str(self.data)\n\n    def get_height(self, row):\n        return len(self.data)\n\n    def get_width(self):\n        return len(self.data[0])\n\n    def get_cell(self, row, col):\n        return self.data[row][col]\n\n    def set_cell(self, row, col, value):\n        self.data[row][col] = value\n\n    def __add__(self, other):\n        if not isinstance(other, Matrix):\n            raise Exception(\n                \"Can only add to other objects of type Matrix\"\n            )\n        if self.get_width()!= other.get_width():\n            raise Exception(\n                \"Can only add to objects with same width\"\n            )\n        if self.get_height()!= other.get_height():\n            raise Exception(\n                \"Can only add to objects with same height\"\n            )\n        result = []\n        for i in range(self.get_height()):\n            result.append([])\n            for j in range(self.get_width()):\n                result[i].append(\n                    self.get_cell(i, j) + other.get_cell(i, j)\n                )\n        return Matrix(result)\n\n    def __sub__(self, other):\n        if not isinstance(other, Matrix):\n            raise Exception(\n                \"Can only subtract to other objects of type Matrix\"\n            )\n        if self.get_width()!= other.get_width():\n            raise Exception(\n                \"Can only subtract to objects with same width\"\n            )\n        if self.get_height()!= other.get_height():\n            raise Exception(\n                \"Can only subtract to objects with same height\"\n            )\n        result = []\n        for i in range(self.get_height()):\n            result.append([])\n            for j in range(self.get_width()):\n                result[i].append(\n                    self.get_cell(i, j) - other.get_cell(i, j)\n                )\n        return Matrix(result)\n\n    def __mul__(self, other):\n        if not isinstance(other, int):\n            raise Exception(\n                \"Can only multiply to other objects of type int\"\n            )\n        result = []\n        for i in range(self.get_height()):\n            result.append([])\n            for j in range(self.get_width()):\n                result[i].append(\n                    self.get_cell(i, j) * other\n                )\n        return Matrix(result)\n\n    def __truediv__(self, other):\n        if not isinstance(other, int):\n            raise Exception(\n                \"Can only divide by other objects of type int\"\n            )\n        result = []\n        for i in range(self.get_height()):\n            result.append([])\n            for j in range(self.get_width()):\n                result[i].append(\n                    self.get_cell(i, j) / other\n                )\n        return Matrix(result)\n\n    def __floordiv__(self, other):\n        if not isinstance(other, int):\n            raise Exception(\n                \"Can only divide by other objects of type int\"\n            )\n        result = []\n        for i in range(self.get_height()):\n            result.append([])\n            for j in range(self.get_width()):\n                result[i].append(\n                    self.get_cell(i, j) // other\n                )\n        return Matrix(result)\n\n    def __mod__(self, other):\n        if not isinstance(other, int):\n            raise Exception(\n                \"Can only divide by other objects of type int\"\n            )\n        result = []\n        for i in range(self.get_height()):\n            result.append([])\n            for j in range(self.get_width()):\n                result[i].append(\n                    self.get_cell(i, j) % other\n                )\n        return Matrix(result)\n\n    def __pow__(self, power, modulo=None):\n        if not isinstance(power, int):\n            raise Exception(\n                \"Can only raise to power objects of type int\"\n            )\n        result = Matrix(self.data)\n        for _ in range(1, power):\n            result *= Matrix(self.data)\n        return result\n\n    def __invert__(self):\n        if self.get_width()!= self.get_height():\n            raise Exception(\n                \"Can only invert square matrices\"\n            )\n        result = []\n        for i in range(self.get_height()):\n            result.append([])\n            for j in range(self.get_width()):\n                if i == j:\n                    result[i].append(1)\n                else:\n                    result[i].append(0)\n        for i in range(self.get_height()):\n            for j in range(self.get_width()):\n                for k in range(self.get_height()):\n                    result[j][k] -= (self.get_cell(i, k) * result[i][j])\n        for i in range(self.get_height()):\n            for j in range(self.get_width()):\n                result[i][j] /= self.get_cell(i, i)\n        return Matrix",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\nassert solution('1 4\\n4 3 2 1') == '0'\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\nassert solution(\"1 4\\n4 3 2 1\") == \"0\"\n\n\"\"\"\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\n\n\"\"\"\n\nfrom collections import deque\n\nclass Stack:\n    def __init__(self):\n        self.items = deque()\n    \n    def is_empty(self):\n        return len(self.items) == 0\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def peek(self):\n        return self.items[-1]\n\n    def size(self):\n        return len(self.items)",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n3\\n4\\n6\\n2\") == \"28\"\n\"\"\"\n\nx = int(input())\nn = int(input())\nlista = []\nfor i in range(n):\n    lista.append(int(input()))\n\nlast_month = 0\nfor i in range(n):\n    last_month = last_month + lista[i]\n\nprint(last_month - x)\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n3\\n4\\n6\\n2\") == \"28\"\n\n------Solution------\nfrom sys import stdin",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n3\\n10\\n2\\n12') == '16'\nassert solution('10\\n3\\n10\\n2\\n12') == '16'\n\"\"\"\n\nX = int(input())\nN = int(input())\nP = []\nfor _ in range(N):\n    P.append(int(input()))\n\nans = X\nfor i in range(N-1):\n    ans += (X - P[i])\n\nprint(ans)\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n3\\n4\\n6\\n2\") == \"28\"\nassert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\"\nassert solution(\"10\\n3\\n4\\n2\") == \"6\"\nassert solution(\"10\\n3\\n1\") == \"10\"\nassert solution(\"10\\n2\\n6\\n2\") == \"8\"",
        "num_ids_2": 44,
        "num_ids_4": 79
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10\\n3\\n10\\n2\\n12') == '16'\nassert solution('10\\n3\\n10\\n2\\n12') == '16'\nassert solution('100\\n3\\n100\\n2\\n100') == '200'\nassert solution('100\\n3\\n100\\n2\\n100') == '200'\nassert solution('100\\n3\\n100\\n2\\n100') == '200'\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nprint('Everything OK')\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10\\n3\\n10\\n2\\n12') == '16'\n\nassert solution('10\\n3\\n2\\n12') == '28'\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10\\n3\\n4\\n6\\n2') == '28'\n\"\"\"\n\n\nfrom typing import List\nfrom math import ceil",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\n3\\n10\\n2\\n12') == '16'\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('octopuses') == 'no hiss'\nassert solution('mississippi') == 'hiss'\nassert solution('hiss') == 'hiss'\nassert solution('hello') == 'no hiss'\n\nprint(solution(stdin))\n",
        "num_ids_2": 27,
        "num_ids_4": 51
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"hiss\") == \"hiss\"\nassert solution(\"mississippi\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 39
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\nprint('All tests passed.')\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nprint('All tests passed.')\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('hiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nassert solution('spongebob') == 'no hiss'\n\n-----Notes-----\nAssume that there are no repeated letters in the input.\n\"\"\"\n\nimport sys\nimport re",
        "num_ids_2": 26,
        "num_ids_4": 41
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\nprint(\"Passed all tests.\")\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nassert solution('agoodman') == 'no hiss'\nassert solution('aabbcdd') == 'hiss'\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"b\") == \"no hiss\"\nassert solution(\"\") == \"no hiss\"\nassert solution(\"afasdfasdfasdff\") == \"hiss\"\n",
        "num_ids_2": 26,
        "num_ids_4": 49
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\n\"\"\"\n\nfrom typing import Dict",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('mississippi') == 'hiss'\nassert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\n\nprint(solution('mississippi'))\nprint(solution('amiss'))\nprint(solution('octopuses'))\n",
        "num_ids_2": 25,
        "num_ids_4": 39
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\nc\\nc\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n') == 3\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\nc++\\nC++\\nc\\nc#') == '3'\nassert solution('5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux') == '5'\n\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nc\\nC\\nc\\nC\") == \"3\"\nassert solution(\"5\\nC++\\nC++\\nC\\nC\\nC#\") == \"5\"",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nc++\\nC++\\nc\\nc#\\n') == '3'\nassert solution('5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux\\n') == '5'\n\n\"\"\"\n",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nc++\\nC++\\nc\\nc#\\n\") == 3\n\"\"\"\nimport re",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nc++\\nC++\\nC\\nc#\\n\") == 3\nassert solution(\"5\\nc++\\nC++\\nC\\nc#\\n\") == 5\n\nprint(solution(input()))\n\n'''\n\nimport collections\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\nc++\\nC++\\nc\\nc#') == '3'\n\"\"\"\nimport string\n\nn = int(input())\nwords = [input() for _ in range(n)]\nwords = [w.replace(\"-\", \" \") for w in words]\nwords = [w.lower() for w in words]\n\nkwd = set(string.ascii_lowercase)\n\ncnt = 0\nfor w in words:\n    if len(w) == 1:\n        cnt += 1\n    else:\n        d = {}\n        for c in w:\n            if c in d:\n                d[c] += 1\n            else:\n                d[c] = 1\n        for val in d.values():\n            if val == 1:\n                cnt += 1\n            else:\n                break\nprint(cnt)",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\nc\\nc\\nC\\nC\\n') == 3\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\") == 0\nassert solution(\"c++\") == 0\nassert solution(\"c++\") == 0\nassert solution(\"c\") == 1\nassert solution(\"c#\") == 1\n",
        "num_ids_2": 16,
        "num_ids_4": 33
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\nc++\\nC++\\nc\\nc#\") == \"3\"\nassert solution(\"5\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux\") == \"5\"\n\n-----Problem-----\nGiven an integer n, an array of strings A[1], A[2],..., A[n] consists of lowercase English letters. \n\nFor each 1 <= i <= n, we want to consider the word written in word wrap.\n\nFor each 1 <= i <= n, the word written in word wrap is formed by the concatenation of A[i], \nA[i+1],..., A[n] after placing each word in A[i] in a \"new line\" on the left. \nWe'll represent the word written in word wrap by the string s, where s[j] is the character on the jth line of word wrap.\n\nFor example, if A = [\"abcde\", \"abc\", \"abcde\"], then s = \"abcdeabcde\" and for 1 <= i <= n, s[j] is the character on the jth line of word wrap.\n\nNow given the array of strings A and the string s, you should return an array of booleans answer[1], answer[2],..., answer[n] such that:\n\nanswer[i] is true if and only if s[j] is the character on the jth line of word wrap for the 1st, 2nd,..., the i-th line of word wrap.\nFor example, if A = [\"abcde\", \"abc\", \"abcde\"], then s = \"abcdeabcde\" and answer[1] = true, answer[2] = false, and answer[3] = true.\n\nNote:\n\ns will have length between 2 and 100,000.\nThe words in A are all of the same length.\nEach word in A will only consist of lowercase characters from the English alphabet.\n'''\nfrom typing import List\n\nclass Solution:\n    def wordsTyping(self, words: List[str], sentence: str) -> int:\n        k = len(sentence)\n        n = len(words)\n        m = len(words[0])\n        for i in range(n):\n            k += len(words[i])\n        k += m - 1\n        k %= m\n        \n        if k == 0: return n\n        \n        for i in range(n):\n            if sentence in words[i]: return i + 1\n            \n        return n\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"TCGTTC\") == 21\n\"\"\"\n\nimport re",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"TCG\") == \"9\"\nassert solution(\"CCGTC\") == \"25\"\nassert solution(\"GCCTTG\") == \"25\"\nassert solution(\"GCGCGC\") == \"49\"\nassert solution(\"TGCGTC\") == \"25\"\n",
        "num_ids_2": 23,
        "num_ids_4": 48
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('TT') == 0\nassert solution('TTC') == 0\nassert solution('TCTC') == 0\nassert solution('TTTC') == 0\n",
        "num_ids_2": 16,
        "num_ids_4": 35
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('TTTCG') == 9\nassert solution('CCCC') == 16\nassert solution('TTCCG') == 21\nassert solution('CCGGG') == 25\nassert solution('TTTTG') == 9\n",
        "num_ids_2": 19,
        "num_ids_4": 39
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9\nprint('The local tests are done. Click on \"Check\" for more details about case studies.')\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCT\") == 9\nprint('The code ran Correctly')\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('TCGTTC') == 21\nassert solution('CCC') == 9\n\n'''\n\nimport math",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('TCGTTC') == 21\nassert solution('CCC') == 9\n\nprint(solution('TCGTTC'))\nprint(solution('CCC'))\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('315\\n45') == '90'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nprint(\"Solution #1: \", solution(\"315\\n45\"))\n\nassert solution(\"180\\n270\") == \"90\"\nprint(\"Solution #2: \", solution(\"180\\n270\"))\n\nassert solution(\"180\\n0\") == \"180\"\nprint(\"Solution #3: \", solution(\"180\\n0\"))\n\nassert solution(\"180\\n180\") == \"0\"\nprint(\"Solution #4: \", solution(\"180\\n180\"))\n\nassert solution(\"315\\n0\") == \"90\"\nprint(\"Solution #5: \", solution(\"315\\n0\"))",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('315','45') == '90'\nassert solution('180','270') == '90'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('315 45') == '90'\nassert solution('180 270') == '90'\nassert solution('180 -270') == '90'\nassert solution('180 -180') == '0'\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('315 45') == '90'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('315\\n45') == '90'\nassert solution('180\\n270') == '90'\n\nSample Input 3:\n0\n90\nSample Output 3:\n-90\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(315) == '90'\nassert solution(180) == '180'\nassert solution(90) == '180'\nassert solution(135) == '90'\nassert solution(225) == '180'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('315\\n45') == '90'\nassert solution('180\\n270') == '90'\n\"\"\"\n\nimport math\nimport sys\n\ninput_str = sys.stdin.readlines()\ncurr_deg = int(input_str[0].strip())\ncorrect_deg = int(input_str[1].strip())",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"315\"\n    \"45\"\n) == \"90\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('315\\n45') == '90'\nassert solution('180\\n270') == '90'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\nassert solution(\"5\\n11\\n20\\n33\\n40\\n55\") == \"1\"\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\nprint('Test pass.')\n\n-----Solution-----\n\n```python\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\nassert solution(\"5\\n11\\n20\\n33\\n40\\n55\") == \"1\"\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('11') == '1'\nassert solution('20') == '0'\nassert solution('33') == '2'\nassert solution('40') == '1'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\nprint(solution(\"5\\n1\\n23\\n18\\n13\\n99\"))\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(5) == 3\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == 3\nassert solution('5\\n11\\n20\\n33\\n40\\n55') == 1\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\nassert solution(\"5\\n23\\n18\\n13\\n99\") == \"1\"\n\"\"\"\n\nn = int(stdin.readline())\nnames = [int(x) for x in stdin.readlines()]\n\nk = len(set(names))\ni = 0\ncount = 0\nwhile i < n:\n    if k == len(set(names[i:i+k])):\n        count += 1\n    i += k\n\nprint(count)\n",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\nassert solution(\"5\\n11\\n20\\n33\\n40\\n55\") == \"1\"\n\n\"\"\"",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == '3'\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWWWBBB\") == \"1\"\nassert solution(\"BBBBBB\") == \"0\"\nassert solution(\"WWWWBBBW\") == \"1\"\nassert solution(\"BBB\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 51
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWWWBBBWW\") == \"1\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WWWWBBW\") == 0\nassert solution(\"WWBBW\") == 1\nassert solution(\"WBWWBWBWW\") == 0\nassert solution(\"WWBBWBBW\") == 0\nassert solution(\"WWBWWB\") == 1\n",
        "num_ids_2": 21,
        "num_ids_4": 45
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWWBBWWWW\") == \"1\"\nassert solution(\"WWWBBBWWW\") == \"0\"\nassert solution(\"WWWBBWBBW\") == \"0\"\nassert solution(\"WBBWBBW\") == \"0\"\n",
        "num_ids_2": 27,
        "num_ids_4": 57
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"WWBWBB\") == \"1\"\nassert solution(\"WWWWBBW\") == \"0\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWBBWWW') == '0'\nassert solution('WWBWBWW') == '0'\nassert solution('WWWBWBW') == '0'\nassert solution('WWBBBWW') == '0'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWBBWWWW') == '0'\nassert solution('WWBWBWBW') == '1'\nassert solution('WWBBW') == '1'\nassert solution('WWBWBW') == '0'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWBBW\") == \"1\"\nassert solution(\"WWWWBWB\") == \"1\"\nassert solution(\"WWWWBWBW\") == \"0\"\nassert solution(\"WBBWW\") == \"1\"\n",
        "num_ids_2": 25,
        "num_ids_4": 52
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == output()\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWBBWBW\") == \"1\"\n\nprint(\"All tests passed.\")\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 3 3\") == 9\n\"\"\"\n\n\nfrom math import sqrt\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1 1\") == 1.299038105676658\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 3 3\") == 9\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 2 1') == '1.7320508075688772'",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 3 3') == 9\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\n\"\"\"\n\nimport math\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\n\"\"\"\n\nimport math",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1 1\") == 1.299038105676658\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"robert\"\n) == \"robert\"\n\nassert solution(\n\"robert\"\n) == \"robert\"\n\nassert solution(\n\"robert\"\n) == \"robert\"\n\nassert solution(\n\"robert\"\n) == \"robert\"\n\nassert solution(\n\"robert\"\n) == \"robert\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rooobert') == 'robert'\nassert solution('roboobert') == 'roboobert'\nassert solution('robooobert') == 'roboobert'\n\nprint(\"All test cases passed.\")\n",
        "num_ids_2": 25,
        "num_ids_4": 58
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\nassert solution(\"rrroobert\") == \"robert\"\nassert solution(\"roobert\") == \"robert\"\nassert solution(\"roberta\") == \"robert\"\n",
        "num_ids_2": 25,
        "num_ids_4": 52
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"roooobert\") == \"robert\"\nassert solution(\"rrorbbert\") == \"rrorbert\"\nassert solution(\"rrrrrrobertrrrr\") == \"rrorbert\"\nassert solution(\"rrrrorbertrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr",
        "num_ids_2": 26,
        "num_ids_4": 60
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"roobert\") == \"robert\"\nassert solution(\"roooobert\") == \"robert\"\n\nprint(solution(\"roobert\"))\nprint(solution(\"roooobert\"))\n\n\nimport re",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"roobert\") == \"robert\"\nassert solution(\"roooobert\") == \"robert\"\nassert solution(\"rrrooobbbert\") == \"robert\"\nassert solution(\"rrrrrrrrobbertrrrrrrrrr\") == \"robert\"\n\nprint(solution('roobert'))\nprint(solution('roooobert'))\nprint(solution('rrrooobbbert'))\nprint(solution('rrrrrrrrobbertrrrrrrrrr'))\n\nprint(solution('roobert'))\nprint(solution('roooobert'))\nprint(solution('rrrooobbbert'))\nprint(solution('rrrrrrrrobbertrrrrrrrrr'))\n\nprint(solution('roobert'))\nprint(solution('roooobert'))\nprint(solution('rrrooobbbert'))\nprint(solution('rrrrrrrrobbertrrrrrrrrr'))\n",
        "num_ids_2": 27,
        "num_ids_4": 62
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rooobert') == 'robert'\nassert solution('robbert') == 'robert'\nassert solution('roboobert') == 'roboobert'\nassert solution('robooobert') == 'roboobert'\n",
        "num_ids_2": 25,
        "num_ids_4": 53
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rroobert') == 'robert'\nassert solution('rrrooobert') == 'robert'\nassert solution('roberta') == 'roberta'\nassert solution('rooberta') == 'roberta'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\nassert solution(\"rrrooobbbert\") == \"robert\"\nassert solution(\"rrrrrrrrrrrrrrrrrrrrroobert\") == \"robert\"\n\nassert solution(\"aaabbbbccc\") == \"a3b3c3\"\n",
        "num_ids_2": 25,
        "num_ids_4": 62
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rooobert') == 'robert'\nassert solution('rhooobert') == 'robert'\nassert solution('roboobert') == 'robert'\nassert solution('robertapalaxiamethostenes') == 'robert'\n",
        "num_ids_2": 25,
        "num_ids_4": 53
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\n\"\"\"\n\nimport sys\nimport math\nimport unittest\n\n\nclass Solution:\n    def solution(self, input: str) -> str:\n        \"\"\"\n        Get volume of the shipment and the two types of bottles.\n        For each type of bottle, get the volume and calculate how many bottles can be used.\n        \"\"\"\n        volume, bottle_1, bottle_2 = [int(x) for x in input.split(\" \")]\n        if volume % min(bottle_1, bottle_2)!= 0:\n            return \"Impossible\"\n        bottle_1_num, bottle_2_num = volume // min(bottle_1, bottle_2), volume // max(bottle_1, bottle_2)\n        if bottle_1_num < 0 or bottle_2_num < 0:\n            return \"Impossible\"\n        return f\"{bottle_1_num} {bottle_2_num}\"\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution()\n\n    def test_solution(self) -> None:\n        self.assertEqual(self.solution.solution(\"1000 9 7\"), \"108 4\")\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000 9 7') == '108 4'\nassert solution('1000 900 7') == 'Impossible'\n\nimport unittest\nclass Tests(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution('1000 9 7'), '108 4')\n    def test_2(self):\n        self.assertEqual(solution('1000 900 7'), 'Impossible')",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline().split()\nprint(input)\n\ninput_tuple = tuple(map(int, input))\n\na, b, c = input_tuple\n\nprint(a, b, c)\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000 9 7\\n\") == \"108 4\"\nassert solution(\"1000 900 7\\n\") == \"Impossible\"\n\"\"\"\n\ns, *bottles = map(int, input().split())",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000 9 7') == '108 4'\nassert solution('1000 900 7') == 'Impossible'",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin_a) == stdout_a\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input) == output\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000 9 7') == '108 4'\nprint(solution(input()))\n'''\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\"\n\"\"\"",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n#..\\n..X\\n..X\\n#XX\\n\") == (1, 1, 2, 1, 0)\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n#..#\\n..X.') == '1\\n1\\n2\\n1\\n0'\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n#..#\\n..X.\\n..X.\\n#XX#') == '1\\n1\\n2\\n1\\n0'\n\"\"\"",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == '1\\n1\\n2\\n1\\n0'\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == '9\\n0\\n0\\n0\\n0'\n\nprint(\"All tests passed.\")\n",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('.X..X.X.X#.#.#.X.X.XX.') == 9\nassert solution('....\\n....\\n....\\n....\\n') == 0\nassert solution('#.#.#\\n#.#.#\\n#.#.#\\n#.#.#\\n') == 0\n\n\"\"\"",
        "num_ids_2": 44,
        "num_ids_4": 71
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n#..#\\n..X.\\n..X.\\n#XX#\\n') == '1\\n1\\n2\\n1\\n0'\nassert solution('4 4\\n....\\n....\\n....\\n....\\n') == '9\\n0\\n0\\n0\\n0'\nassert solution('4 4\\n...\\n...\\n...\\n...\\n') == '4\\n0\\n0\\n0\\n0'\nassert solution('4 4\\n.X.\\n.X.\\n.X.\\n.X.\\n') == '0\\n0\\n0\\n0\\n0'\nassert solution('4 4\\n.#.\\n.#.\\n.#.\\n.#.\\n') == '0\\n0\\n0\\n0\\n0'\n",
        "num_ids_2": 82,
        "num_ids_4": 164
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n#..#\\n..X.\\n..X.\\n#XX#') == '1\\n1\\n2\\n1\\n0'\nassert solution('4 4\\n....\\n....\\n....\\n....') == '9\\n0\\n0\\n0\\n0'\n\"\"\"\n\nr, c = map(int, stdin.readline().split())\ntable = [list(stdin.readline().rstrip()) for _ in range(r)]\ncar = 2\ncar_count = 0\nfor i in range(r):\n    for j in range(c):\n        if table[i][j] == 'X':\n            car_count += 1\nprint(car_count)\nwhile car <= car_count:\n    car_count = 0\n    for i in range(r):\n        for j in range(c):\n            if table[i][j] == 'X':\n                car_count += 1\n    print(car_count)\n    car += 1\n",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\"\n\nprint('Success')",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n212\\n1253\") == \"1953566\"\nprint(\"Test 1 OK\")\nassert solution(\"5\\n23\\n17\\n43\\n52\\n22\") == \"102\"\nprint(\"Test 2 OK\")\nprint(\"------------------\")",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"212\\n1253\") == \"1953566\"\nprint(\"Tests passed\")",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('212\\n1253') == '1953566'\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n212\\n1253') == '1953566'\nassert solution('5\\n23\\n17\\n43\\n52\\n22') == '102'\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2\n1253\n23''') == '1953566'\nprint('Test success.')",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n212\\n1253') == '1953566'\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"212\\n1253\") == \"1953566\"\nprint(solution(\"212\\n1253\"))",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"2\n212\n1253\"\"\") == \"1953566\"\nassert solution(\"\"\"5\n23\n17\n43\n52\n22\"\"\") == \"102\"\nassert solution(\"\"\"1\n21\"\"\") == \"210\"\nassert solution(\"\"\"3\n21\n19\n26\"\"\") == \"261\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('\\n\\n') == ''\nassert solution('\\n\\n\\n') == ''\nassert solution('1') == ''\n",
        "num_ids_2": 17,
        "num_ids_4": 41
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n212\\n1253\\n') == '1953566'\nassert solution('5\\n23\\n17\\n43\\n52\\n22\\n') == '102'\nprint(solution(input()))\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\nprint(f'Test result: {expected}')\n\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 10 10\\n3 3 3\\n\") == \"0.0 0.0 0.0\"\nprint(solution(\"9 9 9\\n3 2 1\\n\"))\n\n'''",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.0 0.0 0.0\"\nassert solution(\"9 9 9\\n3 2 1\") == \"0.0 3.0 6.0\"\n\"\"\"\n\na, b, c = [int(i) for i in input().split()]\no, a, p = [int(i) for i in input().split()]\n\no = (o * a) // b\np = (p * a) // b\no_, p_ = o - a, p - a\n\nprint(\"%.4f\" % o_, \"%.4f\" % p_, \"%.4f\" % o, \"%.4f\" % p)\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.0 0.0 0.0\"\nassert solution(\"9 9 9\\n3 2 1\") == \"0.0 3.0 6.0\"\n\nprint(solution(input()))\n\"\"\"\n\nA, B, C = [int(i) for i in input().split()]\nI, J, K = [int(i) for i in input().split()]",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == output()\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.0 0.0 0.0\"\nassert solution(\"9 9 9\\n3 2 1\") == \"0.0 3.0 6.0\"\nassert solution(\"6 6 6\\n3 3 1\") == \"0.0 0.0 0.0\"\n",
        "num_ids_2": 50,
        "num_ids_4": 75
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 10 10\\n3 3 3') == '0.000000 0.000000 0.000000'\nassert solution('9 9 9\\n3 2 1') == '0.000000 3.000000 6.000000'\n\"\"\"\nfrom itertools import product",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"10 10 10\"\n) == \"0.0 0.0 0.0\"\nassert solution(\n    \"9 9 9\"\n) == \"0.0 3.0 6.0\"\n\"\"\"\n\na, b, c = map(int, input().split())\nI, J, K = map(int, input().split())",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 10 10\\\\n3 3 3\\\\n') == '0.000000 0.000000 0.000000'\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '10 10 10'\n) == '0.0 0.0 0.0'\n\nassert solution(\n    '9 9 9'\n) == '0.0 3.0 6.0'\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a<bc<') == 'bc'\nassert solution('foss<<rritun') == 'forritun'\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a<bc<) == b\nassert solution(foss<<rritun) == forritun",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\nassert solution(\"abc<ab<ab<abc\") == \"cba\"\nassert solution(\"abc<a<a<ab<abc\") == \"acb\"\nassert solution(\"ab<ab<ab<abc\") == \"a\"\n",
        "num_ids_2": 30,
        "num_ids_4": 66
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\n\n-----Solution-----\n\na = stdin[::-1]\nwhile \"<\" in a:\n    a = a.replace(\"<\", \"\", 1)\n\nreturn a[::-1]\n\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"foss<<rritun\") == \"forritun\"\n\nassert solution(\"a<bc<\") == \"b\"\nassert solution(\"a<<bc<\") == \"ab\"\nassert solution(\"a<<bc<>>\") == \"ab\"\nassert solution(\"a<<bc<>>>>\") == \"ab\"\n",
        "num_ids_2": 30,
        "num_ids_4": 57
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n\"\"\"\n\nimport re\n\nstdin = input()",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n'''\n\nimport re",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n\nprint(solution('a<bc<'))\nprint(solution('foss<<rritun'))\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\nassert solution(\"abc<def<ghi<\") == \"j\"\nassert solution(\"aa<ab<ba<\") == \"a\"\nassert solution(\"abc\") == \"abc\"\n",
        "num_ids_2": 30,
        "num_ids_4": 61
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"KMP\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\nassert solution('Q-Learning') == 'QL'\n\n\"\"\"\n\nimport re",
        "num_ids_2": 33,
        "num_ids_4": 45
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a-b') == 'ab'\nassert solution('a-b-c') == 'abc'\nassert solution('a-b-c-d') == 'abcd'\n",
        "num_ids_2": 18,
        "num_ids_4": 44
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('Knut-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\nassert solution('Rivest-Shamir-Adleman') == 'RSA'\nassert solution('Jeff Goldblum') == 'JGP'\nassert solution('Larry Wall') == 'LW'\n\"\"\"\n\nimport re\n",
        "num_ids_2": 33,
        "num_ids_4": 67
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\nprint(solution(\"Knuth-Morris-Pratt\"))\nprint(solution(\"Mirko-Slavko\"))\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\"\"\"\n\nimport re",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\n\"\"\"\n\nimport re\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"1 1 1\") == \"Province\"\nassert solution(\"0 2 1\") == \"Estate\"\nassert solution(\"1 2 1\") == \"Copper\"\n",
        "num_ids_2": 30,
        "num_ids_4": 56
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"0 1 0\") == \"Estate or Copper\"\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''0 1 0''') == 'Estate or Copper'\nassert solution('''2 1 0''') == 'Province or Gold'\nassert solution('''2 0 1''') == 'Province or Silver'\nassert solution('''0 2 1''') == 'Estate or Copper'\nassert solution('''1 2 1''') == 'Province or Silver'\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('2 2 0') == 'Province or Gold'\nassert solution('0 0 2') == 'Copper'\nassert solution('0 2 2') == 'Province'\n",
        "num_ids_2": 30,
        "num_ids_4": 58
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('2 1 2') == 'Province or Silver'\n\nprint(\"Success!\")\n\nNote that your solution should be independent of the test cases in your sample input.\n\nThis solution is adapted from the lessons on Codechef\n\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('0 1 2') == 'Province or Gold'\nassert solution('0 2 0') == 'Province or Silver'\nassert solution('0 0 3') == 'Estate or Copper'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('0 1 1') == 'Province or Gold'\nassert solution('0 0 2') == 'Estate or Copper'\nassert solution('1 0 2') == 'Province or Gold'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\n70 50\\n') == '90.00'\n\"\"\"\n\nfrom math import sqrt\n\nn, k = [int(x) for x in stdin.readline().rstrip().split()]\nd, s = [int(x) for x in stdin.readline().rstrip().split()]\n\ndiff = k / n\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1\\n70 50') == '90.0'\nassert solution('10 3\\n80 90') == '75.714285'\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n70 50') == '90.0'\nassert solution('10 3\\n80 90') == '75.7142857'\n\"\"\"\n\nfrom fractions import Fraction\nfrom math import gcd",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin_1) == stdout_1\nassert solution(stdin_2) == stdout_2\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1\\n70 50\\n') == '90.0'\nassert solution('10 3\\n80 90\\n') == '75.7142857'",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.0\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\n\"\"\"\n\nn, k = map(int, input().split())\n\ns = (k * 100) / n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n70 50') == '90.0'\nassert solution('10 3\\n80 90') == '75.7142857'\n\nprint('Success')\n\n------------------------------------------------",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2 1\n70 50\n''') == '90.00'\n\nassert solution('''\n10 3\n80 90\n''') == '75.7142857'\n\nprint('Success')",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n70 50\\n\") == \"90.00\\n\"\nassert solution(\"10 3\\n80 90\\n\") == \"75.7142857\\n\"\n\nprint(solution(\"2 1\\n70 50\\n\"))\nprint(solution(\"10 3\\n80 90\\n\"))\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2, 3, 1, 5, 4, 7, 6') == '2, 3, 5, 7'\nassert solution('1, 2, 3, 4, 5') == '1, 2, 3, 4, 5'\n\"\"\"\n\nimport math\n\nN = int(input())\nA = list(map(int, input().split()))",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('12') == '1 2'\nassert solution('123') == '1 2 3'\nassert solution('12345') == '1 2 3 4 5'\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"\nassert solution(\"7\\n1 1 3 4 5 6 7\") == \"0\\n\"\nassert solution(\"1\\n1\") == \"1\\n1\"\n",
        "num_ids_2": 49,
        "num_ids_4": 86
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2 3 1 5 4 7 6\") == \"4\"\n\nassert solution(\"5 1 2 3 4 5\") == \"5\"\n\nassert solution(\"1 2 3 4 5\") == \"5\"\n",
        "num_ids_2": 32,
        "num_ids_4": 46
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n2 3 1 5 4 7 6') == '4\\n2 3 5 7'\nassert solution('5\\n1 2 3 4 5') == '5\\n1 2 3 4 5'\n\"\"\"",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 1 5 4 7 6') == '4', solution('2 3 1 5 4 7 6')\nassert solution('1 2 3 4 5') == '5', solution('1 2 3 4 5')\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == '4\\n2 3 5 7'\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\nassert solution(\"13 22\") == \"12 43\"\n\nassert solution(\"0 0\") == \"23 45\"\nassert solution(\"5 59\") == \"5 14\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\nassert solution('1 2') == '12 59'\nassert solution('0 59') == '23 0'\nassert solution('23 59') == '22 0'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\nassert solution(\"12 22\") == \"11 49\"\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\"\"\"\n\nfrom typing import Tuple, List, Union",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\n\"\"\"\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10\") == \"9 25\"\n\"\"\"\n\nprint(\"{:02d} {:02d}\".format((int(stdin[0:2]) - 45), int(stdin[3:5])))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 10\") == \"9 25\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\nassert solution(\"15 20\") == \"13 55\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\n\"\"\"\n\nimport sys\n\ntime = sys.stdin.readline().split()\nhour, min = int(time[0]), int(time[1])\n\nmin -= 45\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2.000000\") == \"1.414214\"\nassert solution(\"1.000000\") == \"1.000000\"\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.000000\") == \"1.000000\"\nassert solution(\"2.718281\") == \"1.897498\"\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2.000000\") == \"1.414214\"\nassert solution(\"1.000000\") == \"1.000000\"\n\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2.000000\") == \"1.414214\"\nassert solution(\"1.000000\") == \"1.000000\"\nassert solution(\"1.414214\") == \"1.414214\"\nassert solution(\"1.414214\")!= \"1.414215\"\nassert solution(\"1.414214\")!= \"1.414212\"\n",
        "num_ids_2": 29,
        "num_ids_4": 62
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('2') == '1.414214'\nassert solution('0.36788') == '1.414214'\nassert solution('2.718281') == '1.414213'\n\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 54
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2.1') == '2.1102230246251565'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0.36788') == '0.367879'\nassert solution('2.718281') == '2.718282'\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\nassert solution('0.36788') == '0.677987'\nassert solution('0.36788') == '0.677987'\nassert solution('0.36788') == '0.677987'",
        "num_ids_2": 29,
        "num_ids_4": 63
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2.0') == '1.414214'\nassert solution('1.0') == '1.0'\nassert solution('1.9') == '1.414214'\nassert solution('1.10000') == '1.414214'\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 59
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '3: \\n2,1\\n'\nassert solution('50') == '50: \\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25'\n",
        "num_ids_2": 79,
        "num_ids_4": 79
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"3\\n2,1\\n\"\nassert solution(\"50\") == \"50\\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\"\n\"\"\"\n\ns = int(input())",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '3:'\nassert solution('50') == '50:'\nassert solution('1') == '1:1'\nassert solution('2') == '2:1'\nassert solution('50') == '50:2'\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"50\") == \"50\"\n\"\"\"\n\n\"\"\"\n\nReplace the following lines with your code\n\nnumber_of_stars = int(input())\n\nfor number_of_stars in range(1, 32768):\n    for row_length in range(1, number_of_stars//2 + 1):\n        if number_of_stars % row_length == 0 and number_of_stars // row_length > row_length:\n            if row_length * (row_length+1) // 2 + row_length == number_of_stars:\n                print(row_length, number_of_stars // row_length)\n\n\n\"\"\"\n\n\"\"\"\n\nReplace the following lines with your code\n\nnumber_of_stars = int(input())\n\nfor number_of_stars in range(1, 32768):\n    row_length = 1\n    while row_length < number_of_stars//2 + 1:\n        if number_of_stars % row_length == 0 and number_of_stars // row_length > row_length:\n            if row_length * (row_length+1) // 2 + row_length == number_of_stars:\n                print(row_length, number_of_stars // row_length)\n        row_length += 1\n\n\"\"\"\n\n\n\n\"\"\"\n\nReplace the following lines with your code\n\nnumber_of_stars = int(input())\n\nfor number_of_stars in range(1, 32768):\n    row_length = 1\n    while row_length < number_of_stars//2 + 1:\n        if number_of_stars % row_length == 0 and number_of_stars // row_length > row_length:\n            if row_length * (row_length+1) // 2 + row_length == number_of_stars:\n                print(row_length, number_of_stars // row_length)\n        row_length += 1\n\n\"\"\"\n\n\"\"\"\n\nReplace the following lines with your code\n\nnumber_of_stars = int(input())\n\nfor number_of_stars in range(1, 32768):\n    row_length = 1\n    while row_length < number_of_stars//2 + 1:\n        if number_of_stars % row_length == 0 and number_of_stars // row_length > row_length:\n            if row_length * (row_length+1) // 2 + row_length == number_of_stars:\n                print(row_length, number_of_stars // row_length)\n        row_length += 1\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '3:', 'Test 1'\nassert solution('50') == '50:', 'Test 2'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3:\", \"WA\"\nassert solution(\"50\") == \"50:\", \"WA\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '3:','solution({})'.format(3)\nassert solution('50') == '50:','solution({})'.format(50)\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '3:', 'Wrong output'\nassert solution('50') == '50:', 'Wrong output'\n\"\"\"\n\nS = int(stdin.readline())",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3: 2,1\"\nassert solution(\"50\") == \"50: 2,1 2,2 3,2 5,4 5,5 6,5 10,10 13,12 17,16 25,25\"\n\"\"\"\n\nfrom sys import stdin\nfrom math import sqrt",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3''') == '''3:\n2,1\n'''\nassert solution('''50''') == '''50:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n'''",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'yes'\nassert solution('THERE IS NO ANSWER') == 'no'\nassert solution('THE MEETING IS SET') == 'no'\nassert solution('THE THE THE THE THE THE THE') == 'yes'\nassert solution('A A A A A A A A A A A') == 'yes'\n",
        "num_ids_2": 26,
        "num_ids_4": 57
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN THE TWO TIMES\") == \"no\"\n\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 77
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\"\nassert solution(\"WATER SPLITS INTO GRAINS\") == \"no\"\nassert solution(\"THE MIGHTIEST WISH\") == \"yes\"\n",
        "num_ids_2": 33,
        "num_ids_4": 70
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('THE RAIN IN SPAIN') == 'yes'\nassert solution('IN THE RAIN AND THE SNOW') == 'no'\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\"\n\nprint(solution(\"THE RAIN IN SPAIN\"))\nprint(solution(\"IN THE RAIN AND THE SNOW\"))\nprint(solution(\"THE RAIN IN SPAIN IN THE PLAIN\"))\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 53
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'no'\nassert solution('THE RAIN IN SPAIN') == 'yes'\nassert solution('IN THE RAIN AND THE SNOW') == 'no'\nassert solution('THE RAIN IN SPAIN IN THE PLAIN') == 'yes'\nassert solution('THE RAIN IN SPAIN THE PLAIN') == 'no'\n",
        "num_ids_2": 26,
        "num_ids_4": 63
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\"\"\"\n\nimport re",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nprint(\"Passed\")\n\"\"\"\n\nimport re",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('THE RAIN IN SPAIN') == 'yes'\nassert solution('IN THE RAIN AND THE SNOW') == 'no'\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN\") == \"yes\"\n\"\"\"\n\nimport string\n\n_alphabet = string.ascii_uppercase",
        "num_ids_2": 33,
        "num_ids_4": 49
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\n\nprint('Success')\n\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\nassert solution('RBRRLL') == 'SSSSSS'\nassert solution('RBRRRLL') == 'HHHHHH'\n",
        "num_ids_2": 26,
        "num_ids_4": 56
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('RBRR') == 'CS'\nassert solution('RRRBR') == 'C'\nassert solution('RRRBRRRR') == 'CS'\nassert solution('RRRRRRRRRRRR') == 'SS'\n",
        "num_ids_2": 20,
        "num_ids_4": 46
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\nassert solution('RBRRBRR') == 'S'\n\"\"\"\n\nimport re\n",
        "num_ids_2": 33,
        "num_ids_4": 47
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\n\"\"\"\n\nimport os\nimport sys\nimport re\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 7\\n') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7'\nassert solution('2 4 7\\n') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7'\n",
        "num_ids_2": 72,
        "num_ids_4": 72
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\nassert solution('2 4 7') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n'\nassert solution('1 1 1') == '1\\n'\nassert solution('5 9 999') == '1\\n2\\nFizz\\n4\\nBuzz\\nFizz\\n7\\n8\\nFizz\\nBuzz\\n11\\nFizz\\n13\\n14\\nFizzBuzz\\n16\\n17\\nFizz\\n19\\nBuzz\\nFizz\\n22\\n23\\nFizz\\nBuzz\\n26\\nFizz\\n28\\n29\\nFizzBuzz\\n31\\n32\\nFizz\\n34\\nBuzz\\nFizz\\n37\\n38\\nFizz\\nBuzz\\n41\\nFizz\\n43\\n44\\nFizz\\nBuzz\\n46\\nFizz\\n48\\n49\\nFizzBuzz\\n51\\n52\\nFizz\\n54\\nBuzz\\nFizz\\n57\\n58\\nFizz\\nBuzz\\n61\\nFizz\\n63\\n64\\nFizz\\nBuzz\\n66\\nFizz\\n68\\n69\\nFizz\\nBuzz\\n71\\nFizz\\n73\\n74\\nFizz\\nBuzz\\n76\\nFizz\\n78\\n79\\nFizz\\nBuzz\\n82\\nFizz\\n83\\n84\\nFizz\\nBuzz\\n86\\nFizz\\n88\\n89\\nFizz\\nBuzz\\n91\\nFizz\\n93\\n94\\nFizz\\nBuzz\\n96\\nFizz\\n98\\n99\\nFizz\\nBuzz'\nassert solution('5 9 999') == '1\\n2\\nFizz\\n4\\nBuzz\\nFizz\\n7\\n8\\nFizz\\nBuzz\\n11\\nFizz\\n13\\n14\\nFizz\\nBuzz\\n16\\nFizz\\n17\\n18\\nFizz\\nBuzz\\n22\\nFizz\\n23\\n24\\nFizz\\nBuzz\\n26\\nFizz\\n28\\n29\\nFizz\\nBuzz\\n31\\nFizz\\n32\\n33\\nFizz\\nBuzz\\n36\\nFizz\\n37\\n38\\nFizz\\nBuzz\\n41\\nFizz\\n42\\n43\\nFizz\\nBuzz\\n46\\nFizz\\n47\\n48\\nFizz\\nBuzz\\n51\\nFizz\\n52\\n53\\nFizz\\nBuzz\\n56\\nFizz\\n57\\n58\\nFizz\\nBuzz\\n61\\nFizz\\n62\\n63\\nFizz\\nBuzz\\n66\\nFizz\\n67\\n68\\nFizz\\nBuzz\\n71\\nFizz\\n72\\n73\\nFizz\\nBuzz\\n76\\nFizz\\n77\\n78\\nFizz\\nBuzz\\n82\\nFizz\\n83\\n84\\nFizz\\nBuzz\\n86\\nFizz\\n87\\n88\\nFizz\\nBuzz\\n91\\nFizz\\n92\\n93\\nFizz\\nBuzz\\n96\\nFizz\\n97\\n98\\nFizz\\nBuzz'\n\nimport unittest\n\nclass Test_FizzBuzz(unittest.TestCase):\n    def test_solution(self):\n        self.",
        "num_ids_2": 72,
        "num_ids_4": 461
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\nprint('The local tests are done. Try Test Inginer.')\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 7\") == \"\"\"1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7\"\"\"\n\nassert solution(\"2 4 7\") == \"\"\"1\nFizz\n3\nFizzBuzz\n5\nFizz\n7\"\"\"\n\nassert solution(\"1 2 3\") == \"1\\nFizz\\n2\\nFizz\\n3\"",
        "num_ids_2": 22,
        "num_ids_4": 48
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n\"\nprint('Test pass.')",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 7\") == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\nassert solution(\"2 4 7\") == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n'",
        "num_ids_2": 72,
        "num_ids_4": 72
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 7\\n') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\n\nassert solution('2 4 7\\n') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n'\n\nassert solution('2 2 5\\n') == '1\\n2\\nFizz\\n4\\nBuzz\\nFizz\\n5\\n'\n\n\"\"\"\n\nimport math\n",
        "num_ids_2": 76,
        "num_ids_4": 112
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n\"\nassert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n\"\n\n\"\"\"",
        "num_ids_2": 72,
        "num_ids_4": 72
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\nprint(solution('2 4 7'))",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == 'It hadn\\'t snowed this early in 3 years!'\nassert solution(\"2 10\\n0 100\") == 'It hadn\\'t snowed this early in 0 years!'\n\n\"\"\"",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n\n\"\"\"",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\n\"\"\"\n\nimport re",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n\"\"\"",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '4 2\\n3 3 3 2'\n) == 'It hadn\\'t snowed this early in 3 years!'\n\nassert solution(\n    '2 10\\n0 100'\n) == 'It hadn\\'t snowed this early in 0 years!'\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n\"\"\"\n\nimport math\nimport sys\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 2\n3 3 3 2''') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('''2 10\n0 100''') == 'It hadn\\'t snowed this early in 0 years!'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n\n\"\"\"\n\nimport sys\nimport numpy as np",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"4 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n\nimport numpy as np\n\nclass Solution:\n    def solve(self, stdin):\n        n, dm = stdin.split()\n        n, dm = int(n), int(dm)\n        d = np.array([int(i) for i in stdin.split('\\n')[:-1]])\n        m = d.size + 1\n        k = 0\n        for i in range(n):\n            k = max(k, (m - k - 1) - i)\n            if d[m - 1 - i] < dm:\n                k += 1\n        return k",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 10') == '7'\nassert solution('10 2') == '2'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2\") == \"7\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 2') == '2'\nassert solution('10 10') == '7'\n\n\"\"\"\n\ns, n = map(int, input().split())\n\ni = 1\nresult = 0\n\nwhile i <= n:\n    if i % 2 == 0:\n        result = i\n    elif s % 2 == 0:\n        result = i\n    else:\n        result = i - 1\n    i += 1\n\nprint(result)\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 2\") == 2\nassert solution(\"10 10\") == 7\n\nprint(solution(input()))\n\n'''\nimport math",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2\") == \"2\"\nassert solution(\"10 10\") == \"7\"\nprint(\"Tests passed.\")\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\n10''') == '7'\nassert solution('''10\n10''') == '3'\nassert solution('''100\n1''') == '1'\nassert solution('''1\n10''') == '2'\nassert solution('''3\n10''') == '6'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2\") == 2\n\"\"\"\n\nfrom typing import List\nfrom itertools import count\nfrom math import factorial",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3') == '1'\nassert solution('10 10') == '7'",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2\") == \"7\"\nassert solution(\"10 10\") == \"7\"\n\n\"\"\"\n\n\nimport sys\nimport math\n\nfor line in sys.stdin:\n    n, s = line.split()\n    n, s = int(n), int(s)\n    ans = 0\n    while s > 0:\n        if s >= 2 * n:\n            s -= 2 * n\n            ans += n\n        else:\n            ans += s\n            s = 0\n    print(ans)",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2\") == \"2\"\nassert solution(\"10 10\") == \"7\"\n\"\"\"\n\nimport math",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('bok') == 'bok'\nassert solution('kak') == 'kak'\nassert solution('koaski') == 'kakosi'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 38
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"boaski\") == \"koaaski\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 41
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"szjgvusyfzkh\") == \"kvpxqncwxemr\"\nassert solution(\"yhfdhkdla\") == \"pikncvwzg\"\nassert solution(\"pkvldhvwfri\") == \"wfjmxzhtq\"\n",
        "num_ids_2": 26,
        "num_ids_4": 74
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\n\nprint(solution(\"bok\"))\nprint(solution(\"koaski\"))\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('bok') == 'bok'\nassert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\nassert solution('b') == 'b'\nassert solution('b') == 'b'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\nassert solution('kasko') == 'kakoshi'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 40
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"civ\") == \"iv\"\nassert solution(\"abcde\") == \"abcde\"\nassert solution(\"kkkkkk\") == \"kkkkkk\"\n",
        "num_ids_2": 26,
        "num_ids_4": 49
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\n\"\"\"\n\n\"\"\"\nAttempt 1\n\nimport copy\nimport itertools",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"8 3\"\nassert solution(\"6\") == \"8 3\"\nassert solution(\"7\") == \"8 3\"\nassert solution(\"1\") == \"8 1\"\nassert solution(\"10\") == \"8 1\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport math",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6') == '8 2'\nassert solution('7') == '8 3'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n') == '8 2'\nassert solution('7\\n') == '8 3'\n\nprint(solution(input()))\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\") == \"8 1\"\nassert solution(\"8 16\") == \"8 2\"\nassert solution(\"8 32\") == \"8 2\"\nassert solution(\"8 64\") == \"8 2\"\nassert solution(\"8 128\") == \"8 3\"\n",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n') == '8 2'\nassert solution('7\\n') == '8 3'\n\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"8 2\"\nassert solution(\"7\") == \"8 3\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n') == '8 2'\nassert solution('7\\n') == '8 3'\n\"\"\"\n\nfrom math import log\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"8 2\"\nassert solution(\"7\") == \"8 3\"\nassert solution(\"9\") == \"12 4\"\nassert solution(\"10\") == \"12 5\"\nassert solution(\"12\") == \"13 5\"\n\n\"\"\"\n\nn = int(input().strip())",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2') == '2 2'\nassert solution('3\\n1') == '2 1'\n\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"stairs\") == \"YES\"\nassert solution(\"drought\") == \"NO\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('stairs', 2, ['erres', 'airs', 'ares'], ['eet', 'eat'], 2, ['apples and pears', 'plates of meat']) == ['YES', 'NO']\nassert solution('drought', 2, ['aught', 'ought', 'aut', 'acht'], ['ought', 'outte', 'out', 'oute'], 5, ['tasty sprout', 'difficult route', 'worried and', 'forever in doubt', 'apples and pears']) == ['YES', 'YES', 'YES', 'YES', 'NO']\n\"\"\"",
        "num_ids_2": 134,
        "num_ids_4": 134
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('stairs') == 'YES'\nassert solution('drought') == 'YES'\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('foo') == 'foo'\n\"\"\"\n\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('air', 2, ['erre', 'erres', 'ares', 'aires'], ['eet', 'eat']) == 'YES'\nassert solution('drought', 2, ['aught', 'ought', 'aut', 'acht'], ['tasty','sprout', 'difficult', 'worried', 'and', 'frightened']) == 'YES'\nassert solution('scorpion', 2, ['erre', 'erres', 'ares', 'aires'], ['eet', 'eat']) == 'YES'\nassert solution('happiness', 2, ['aught', 'ought', 'aut', 'acht'], ['tasty','sprout', 'difficult', 'worried', 'and', 'frightened']) == 'YES'\nassert solution('happiness', 2, ['erre', 'erres', 'ares', 'aires'], ['eet', 'eat']) == 'NO'\n",
        "num_ids_2": 86,
        "num_ids_4": 174
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('stairs') == 'YES'\nassert solution('drought') == 'YES'\nassert solution('erres') == 'NO'\nassert solution('airs') == 'NO'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"stairs\") == \"NO\"\nassert solution(\"drought\") == \"NO\"\nassert solution(\"tasty sprout\") == \"YES\"\n\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict",
        "num_ids_2": 21,
        "num_ids_4": 34
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\n'''\n\nstairs\n2\nerres airs ears ares aires\neet eat\n2\napples and pears\nplates of meat\nSample Output 1:\nYES\nNO\n\ndrought\n2\naught ought aut acht\nought oubt outte out oute\n5\ntasty sprout\ndifficult route\nworried and frantic\nforever in doubt\napples and pears\nSample Output 2:\nYES\nYES\nYES\nYES\nNO\n\n'''\n\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('stairs') == 'YES'\nassert solution('drought') == 'NO'\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"stairs\") == \"YES\"\nassert solution(\"drought\") == \"NO\"\n\n\"\"\"\n\nimport re",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\") == \"WIN\"\nassert solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\") == \"LOSE\"\n\n\"\"\"",
        "num_ids_2": 63,
        "num_ids_4": 63
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\") == 'WIN'\nassert solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\") == 'LOSE'\n\"\"\"",
        "num_ids_2": 63,
        "num_ids_4": 63
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\n\nimport math",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(HANGMAN) == \"WIN\"\nassert solution(BANANA) == \"LOSE\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\n\nprint(solution(stdin))",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\nassert solution('HANNAM') == 'LOSE'\nassert solution('BANNA') == 'LOSE'\nassert solution('BANAN') == 'WIN'\n",
        "num_ids_2": 25,
        "num_ids_4": 51
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'WIN'\nassert solution('BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'LOSE'",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\\n') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\\n') == 'NEITHER'\nprint(solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\\n\"))\n\nSample Input 3:\n3\nBOO\nBON\nBOB\nSample Output 3:\nINCREASING\n\nSample Input 4:\n6\nGLEEB\nGLEDE\nGLEDE\nGLEE\nGLEE\nGLEE\nSample Output 4:\nDECREASING\n\nSample Input 5:\n4\nOZIM\nNICU\nGULAI\nALEX\nSample Output 5:\nINCREASING\n\nSample Input 6:\n7\nMUSK\nMYSZ\nCISS\nHUSK\nMANG\nHOSK\nHUZK\nSample Output 6:\nDECREASING\n\nSample Input 7:\n4\nBKNS\nBKNS\nBKNS\nBKNS\nSample Output 7:\nINCREASING\n\nSample Input 8:\n8\nWANU\nDANA\nSINJ\nBKNS\nLILJ\nHOLN\nORAN\nNOZN\nSample Output 8:\nNEITHER\n\nSample Input 9:\n8\nMUSK\nCISS\nBKNS\nMYSZ\nHUSK\nALEX\nHUZK\nNICU\nGULAI\nSample Output 9:\nINCREASING\n\nSample Input 10:\n11\nZENY\nLORI\nNORS\nLOLI\nLOLI\nVYNU\nLOZO\nORAN\nNOZN\nBLAO\nBKNS\nSINJ\nSample Output 10:\nNEITHER\n\nSample Input 11:\n4\nJOE\nJOE\nJOE\nJOE\nSample Output 11:\nDECREASING\n\nSample Input 12:\n3\nJOE\nLOLI\nLORI\nSample Output 12:\nINCREASING\n\nSample Input 13:\n10\nGLEEB\nGLEDE\nGLEDE\nGLEE\nGLEE\nGLEE\nGLEE\nGLEE\nGLEE\nGLEE\nGLEE\nSample Output 13:\nDECREASING\n\nSample Input 14:\n6\nHOSK\nHUZK\nHUSK\nHUZK\nHUSK\nHOSK\nSample Output 14:\nDECREASING\n\nSample Input 15:\n6\nGLEEB\nGLEDE\nGLEE\nGLEE\nGLEE\nGLEE\nSample Output 15:\nNEITHER\n\nSample Input 16:\n5\nLOZO\nALEX\nORAN\nSINJ\nGULAI\nSample Output 16:\nINCREASING\n\"\"\"",
        "num_ids_2": 100,
        "num_ids_4": 100
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\n\"\"\"\n\nn = int(input())\n\nlista = list()\n\nfor i in range(n):\n    lista.append(input())\n\nlista.sort()\n\nprint(lista)",
        "num_ids_2": 96,
        "num_ids_4": 96
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\n'''",
        "num_ids_2": 96,
        "num_ids_4": 96
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n\n-----Problem-----\nAn eccentric coach asks players on the team to line up alphabetically at the start of practice. The coach does not tell the players whether they need to line up in increasing or decreasing order, so they guess. If they guess wrong, the coach makes them run laps before practice. Given a list of names, you are to determine if the list is in increasing alphabetical order, decreasing alphabetical order or neither.\n\n\"\"\"",
        "num_ids_2": 96,
        "num_ids_4": 96
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n\n\"\"\"\n\nimport unittest\n\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_solution(self):\n        self.assertEqual(solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\"), \"DECREASING\")\n        self.assertEqual(solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\"), \"NEITHER\")\n",
        "num_ids_2": 96,
        "num_ids_4": 96
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5\nJOE\nBOB\nANDY\nAL\nADAM\n\"\"\") == \"DECREASING\"\nassert solution(\"\"\"11\nHOPE\nALI\nBECKY\nJULIE\nMEGHAN\nLAUREN\nMORGAN\nCARLI\nMEGAN\nALEX\nTOBIN\n\"\"\") == \"NEITHER\"\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'INCREASING'\nassert solution('\\n') == 'INCREASING'\nassert solution('\\n\\n\\n') == 'INCREASING'\nassert solution('\\nJOE\\nBOB\\n') == 'INCREASING'\nassert solution('\\nJOE\\nBOB\\nANDY\\nAL\\n') == 'DECREASING'\n",
        "num_ids_2": 27,
        "num_ids_4": 67
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5\nJOE\nBOB\nANDY\nAL\nADAM\"\"\") == \"DECREASING\"\n\nassert solution(\"\"\"11\nHOPE\nALI\nBECKY\nJULIE\nMEGHAN\nLAUREN\nMORGAN\nCARLI\nMEGAN\nALEX\nTOBIN\"\"\") == \"NEITHER\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\n\"\"\"\nSolution 2\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\nassert solution('4\\nBECKY\\nJULIE\\nMEGHAN\\nALEX') == 'INCREASING'\n\nprint(solution(input()))\n\"\"\"",
        "num_ids_2": 96,
        "num_ids_4": 129
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"3\\n\"\n\"BED\\n\"\n\"BEE\"\n) == \"DECREASING\"\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1') == \\\n'No winner!\\nNo winner!\\nGeorge wins!\\nNina wins!\\nJess wins!'\n",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\"\n",
        "num_ids_2": 85,
        "num_ids_4": 85
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10 13\") == \"George wins!\"\nassert solution(\"4 10 13\") == \"Nina wins!\"\nassert solution(\"1 1 1\") == \"No winner!\"\n\"\"\"\n\nn, p, m = [int(input()) for _ in range(3)]\nparticipants = dict()\n\nfor _ in range(n):\n    s = input()\n    participants[s] = participants.get(s, 0) + 1\n\nscores = dict()\nfor _ in range(m):\n    s, score = input().split()\n    if score == '1':\n        scores[s] = scores.get(s, 0) + 1\n    else:\n        scores[s] = scores.get(s, 0) + 2\n\nfor s, c in scores.items():\n    if c >= p:\n        participants[s] -= 1\n        if participants[s] == 0:\n            participants.pop(s)\n        print(s)",
        "num_ids_2": 27,
        "num_ids_4": 40
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\"\n",
        "num_ids_2": 85,
        "num_ids_4": 85
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\"\n",
        "num_ids_2": 85,
        "num_ids_4": 85
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"\"\"George wins!\nJess wins!\nNo winner!\"\"\"\n\n\"\"\"\n    game_over = False\n    while not game_over:\n        if sum(score.values()) >= p:\n            game_over = True\n            for name in sorted(score.keys()):\n                if score[name] >= p:\n                    print(name, \"wins!\")\n    return name\n\"\"\"",
        "num_ids_2": 94,
        "num_ids_4": 94
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1') == 'George wins!\\nNina wins!\\nJess wins!', 'The result does not match the expected output'\n\nassert solution('4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2') == 'Nina wins!\\nJess wins!\\nNo winner!', 'The result does not match the expected output'\n",
        "num_ids_2": 201,
        "num_ids_4": 201
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == expected\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '3 10 13\\n'\n    'John\\n'\n    'Kelly\\n'\n    'George\\n'\n    'Kelly 1\\n'\n    'George 2\\n'\n    'Kelly 1\\n'\n    'John 2\\n'\n    'George 1\\n'\n    'John 3\\n'\n    'Kelly 3\\n'\n    'Kelly 1\\n'\n    'George 3\\n'\n    'George 1\\n'\n    'John 3\\n'\n    'George 3\\n'\n    'Kelly 1\\n'\n) == 'George wins!\\n'\n\nprint(solution('''4 10 13\nBob\nNina\nJess\nTim\nNina 2\nBob 2\nNina 1\nJess 3\nBob 2\nJess 2\nNina 1\nJess 2\nNina 3\nBob 1\nNina 3\nJess 3\nBob 2\n'''))\n\nassert solution('''3 10 13\nJohn\nKelly\nGeorge\nKelly 1\nGeorge 2\nKelly 1\nJohn 2\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\nGeorge 3\nGeorge 1\nJohn 3\n''') == 'No winner!\\n'\n\nassert solution('''3 10 13\nBob\nNina\nJess\nTim\nNina 2\nBob 2\nNina 1\nJess 3\nBob 2\nJess 2\nNina 1\nJess 2\nNina 3\nBob 1\nNina 3\nJess 3\nBob 2\n''') == 'Nina wins!\\n'\nassert solution('''1 0 1\nNina\nJess\n''') == 'No winner!\\n'\nassert solution('''2 10 5\nJess 1\nBob 2\nJess 2\nBob 1\nJess 3\n''') == 'Jess wins!\\n'\n",
        "num_ids_2": 13,
        "num_ids_4": 31
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nJess wins!\"\nassert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"Nina wins!\\nJess wins!\"\n\"\"\"\n",
        "num_ids_2": 168,
        "num_ids_4": 168
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\n\"\"\"\n\nimport sys\n\nx, y, x1, y1, x2, y2 = map(int, sys.stdin.readline().split())\n\nans = ((abs(x - x1) ** 2 + abs(y - y1) ** 2) ** 0.5 + (abs(x - x2) ** 2 + abs(y - y2) ** 2) ** 0.5) / 2\nprint(\"{:.3f}\".format(ans))\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 0 0 5 4\\n\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\\n\") == \"2.0\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n\"\"\"\n\nimport math",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\n\"\"\"\n\nx, y, x1, y1, x2, y2 = [int(x) for x in stdin.split()]\n\nm_x = min(x1, x2) - x\nm_y = min(y1, y2) - y\n\nprint(max(m_x, m_y))\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n\"\"\"\n\nimport sys",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(expected_result)\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\nfrom math import sqrt\n\nx, y, x1, y1, x2, y2 = [int(i) for i in input().split()]\nl1 = sqrt((x - x1) ** 2 + (y - y1) ** 2)\nl2 = sqrt((x - x2) ** 2 + (y - y2) ** 2)\nprint(min(l1, l2))\n\"\"\"\n\n\"\"\"\nSolution 2\n\nimport math\nx, y, x1, y1, x2, y2 = [int(i) for i in input().split()]\nd = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_str_1) == test_output_str_1\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'\nassert solution('123') == '123'\nassert solution('9') == '9'\nassert solution('0') == '0'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution( \"330\") == '0'\n\nprint(solution(\"330\"))\nprint(solution(\"0\"))\nprint(solution(\"7\"))\nprint(solution(\"11\"))\nprint(solution(\"21\"))\nprint(solution(\"31\"))\nprint(solution(\"41\"))\nprint(solution(\"61\"))\nprint(solution(\"71\"))\nprint(solution(\"81\"))\nprint(solution(\"91\"))\nprint(solution(\"99\"))\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('123') == '132'\nassert solution('9') == '9'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('330') == '0'\nassert solution('156') == '165'\nassert solution('123') == '124'\nassert solution('543') == '544'\nassert solution('421') == '422'\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '0'\nassert solution('156') == '165'\nassert solution('854') == '0'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 31
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"330\") == \"0\"\n\nprint(solution(\"330\"))\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('123') == '132'\nassert solution('21') == '23'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"330\") == \"0\"\nassert solution(\"156\") == \"165\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"65\") == \"66\"\nassert solution(\"56\") == \"57\"\nassert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"100\") == \"110\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"165\") == \"165\"\nassert solution(\"332\") == \"337\"\n\"\"\"\nfrom typing import List\nfrom sys import stdin\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == \"4\"\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n\") == \"3\"\n\n-----Explanation-----\nIn the first example, the tasks are finished in a maximum of 4 intervals. In the second example, the tasks are finished in a maximum of 3 intervals.\n\"\"\"\n\nn, m = input().split()\ntask_times = list(map(int, input().split()))\nquiet_times = list(map(int, input().split()))",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n') == '4'",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == \"4\"\n\nimport codewars_test as test\n\ntest.assert_equals(solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\"), \"4\")\ntest.assert_equals(solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n\"), \"3\")",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000''') == '4'\nassert solution('''4 4\n180000 185000 199999 100000\n199999 180000 170000 120000''') == '3'\nassert solution('''2 2\n3 4\n5 6''') == '1'\nassert solution('''2 3\n4 6\n5 7''') == '2'\nassert solution('''4 4\n3 4\n4 3\n2 2\n2 1\n1 1\n1 1''') == '4'\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000''') == 4\nassert solution('''4 4\n180000 185000 199999 100000\n199999 180000 170000 120000''') == 3\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n') == '4', 'incorrect'\n\"\"\"\n\nn, m = map(int, input().split())\nl1, l2 = map(int, input().split())\nl1_p = [l1]\nl2_p = [l2]\nfor _ in range(n-1):\n    l1, l2 = map(int, input().split())\n    l1_p.append(l1)\n    l2_p.append(l2)\n\ndic = {i: 0 for i in range(n)}",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n') == '4'\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n') == '3'\nassert solution('4 3\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n') == '3'\nassert solution('3 2\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n') == '2'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 68,
        "num_ids_4": 134
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000') == '4'\n\nprint(solution(stdin.strip()))\n\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3\") == \"3\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"4 1 3 4 1 1 4 0\") == \"5\"\nassert solution(\"1 0 2 0 1 0 2 1 1 2 1 0 2 1 2 1 1 1 1 2 1 1 1 1 1 1 1 1 0 1 2 2 2 1 1 2 2 0 1 1 0 1 2 1 2 1 2 2 0 1 1 2 1 2 1 0 1 0 2 1 1 2 1 1 1 2 1 1 0 2 1 1 2 1 1 0 1 1 2 1 2 2 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1",
        "num_ids_2": 23,
        "num_ids_4": 1685
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\") == \"10\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\\n\") == \"1\"\n\nprint(solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\"))",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\n\"\"\"\n\nnums = set()\n\nfor _ in range(10):\n    num = int(input())\n\n    if num % 42 == 0:\n        nums.add(num)\n\nprint(len(nums))\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"0\\n42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\n",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\nassert solution('3\\n39\\n40\\n41\\n0\\n1\\n2\\n40\\n41\\n0') == '6'\n",
        "num_ids_2": 74,
        "num_ids_4": 111
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\") == \"2\"\nassert solution(\"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0",
        "num_ids_2": 104,
        "num_ids_4": 1685
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\nassert solution('0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0') == '1'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\n",
        "num_ids_2": 74,
        "num_ids_4": 142
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\\n') == '1'\n\nprint(solution(\"\"\"1003\n102\n108\n117\n135\n110\n112\n121\n128\n118\n125\n133\n134\n135\n110\n112\n113\n117\n119\n1003\n102\n135\n118\n113\n121\n131\n127\n119\n1003\n110\n101\n102\n110\n119\n121\n132\n1003\n130\n131\n135\n137\n130\n131\n132\n136\n1003\n128\n127\n127\n125\n126\n127\n130\n131\n130\n132\n131\n125\n133\n133\n133\n135\n137\n127\n128\n129\n127\n128\n131\n130\n129\n128\n131\n130\n129\n127\n128\n129\n131\n130\n129\n128\n128\n129\n130\n129\n128\n128\n130\n130\n128\n128\n130\n131\n130\n131\n131\n131\n128\n128\n127\n128\n127\n127\n127\n128\n128\n127\n128\n127\n127\n127\n128\n128\n127\n127\n128\n128\n129\n129\n127\n128\n127\n128\n128\n129\n130\n127\n128\n127\n126\n128\n127\n128\n130\n127\n126\n128\n127\n126\n127\n127\n128\n130\n128\n130\n127\n127\n128\n128\n127\n130\n129\n128\n131\n131\n127\n127\n129\n128\n128\n130\n130\n129\n130\n130\n130\n131\n131\n130\n131\n131\n131\n131\n130\n130\n129\n128\n128\n129\n127\n128\n129\n128\n128\n128\n129\n128\n130\n130\n127\n128\n128\n130\n131\n130\n131\n131\n127\n128\n128\n127\n128\n127\n127\n128\n127\n128\n127\n127\n127\n127\n128\n130\n130\n127\n128\n128\n130\n127\n130\n129\n127\n127\n128\n130\n127\n127\n128\n128\n128\n129\n128\n128\n128\n128\n129\n130\n128\n129\n128\n130\n129\n129\n129\n130\n129\n127\n128\n129\n128\n128\n127\n127\n128\n128\n128\n130\n129\n130\n127\n126\n127\n126\n127\n128\n130\n130\n127\n129\n129\n127\n127\n130\n129\n129\n129\n129\n130\n130\n129\n127\n127\n130\n130\n128\n127\n127\n128\n128\n128\n127\n129\n128\n129\n129\n129\n127\n127\n127\n128\n130\n128\n129\n128\n127\n127\n126\n127\n128\n127\n127\n127\n128\n127\n126\n127\n127\n127\n128\n130\n127\n126\n128\n128\n127\n127\n128\n129\n127\n127\n127\n126\n128\n130\n128\n127\n127\n127\n128\n127\n127\n127\n127\n127\n127\n127\n126\n127\n129\n126\n126\n127\n127\n127\n127\n127\n127\n127\n127\n127\n127\n127\n129\n128\n129\n129\n129\n127\n126\n127\n127\n127\n127\n128\n128\n127\n128\n130\n129\n127\n129\n129\n129\n130\n129\n127\n129\n129\n127\n127\n127\n127\n127\n127\n128\n127\n127\n127\n128\n128\n127\n128\n128\n127\n128\n129\n127\n127\n127\n128\n127\n127\n127\n127\n128\n127\n127\n127\n127\n127\n128\n130\n127\n128\n129\n128\n127\n127\n127\n127\n127\n127\n127\n127\n127\n127\n129\n126\n126\n127\n127\n129\n127\n126\n127\n127\n127\n127\n127\n127\n129\n127\n127\n127\n126\n127\n129\n130\n130\n130\n130\n129\n130\n127\n127\n128\n129\n127\n129\n127\n128\n127\n128\n129\n127\n127\n127\n129\n130\n129\n127\n127\n127\n128\n127\n127\n127\n127\n127\n127\n128\n130\n129\n130\n127\n128\n130\n130\n127\n128\n127\n127\n128\n129\n128\n127\n128\n127\n127\n127\n128\n127\n128\n129\n128\n127\n130\n127\n128\n130\n128\n129\n128\n128\n127\n130\n127\n127\n129\n127\n127\n127\n126\n127\n127\n127\n129\n127\n127\n127\n129\n129\n127\n127\n128\n127\n128\n130\n130\n129\n127\n130\n127\n128\n127\n127\n127\n128\n127\n127\n127\n127\n127\n128\n127\n127\n126\n127\n127\n127\n128\n127\n127\n127\n127\n127\n128\n129\n127\n127\n127\n127\n127\n127\n127\n127\n129\n127\n127\n127\n128\n129\n127\n128\n129\n130\n130\n130\n127\n130\n127\n130\n127\n129\n127\n127\n127\n128\n128\n127\n129\n127\n126\n129\n127\n127\n127\n128\n129\n126\n126\n127\n127\n127\n129\n127\n129\n130\n127\n127\n129\n130\n129\n127\n129\n127\n129\n130\n129\n127\n129\n127\n129\n127\n127\n129\n127\n129\n130\n130\n127\n128\n129\n127\n127\n127\n127\n127\n130\n127\n128\n129\n129\n129\n129\n127\n127\n129\n130\n127\n126\n127\n127\n127\n127\n127\n129\n127\n129\n127\n129\n129\n129\n129\n127\n129\n127\n130\n127\n127\n127\n129\n127\n127\n126\n130\n128\n128\n126\n127\n128\n128\n127\n127\n128\n128\n127\n128\n127\n127\n127\n127\n126\n126\n128\n130\n127\n128\n129\n126\n126\n127\n127\n128\n129\n127\n127\n129\n129\n129\n129\n130\n129\n129\n128\n129\n128\n129\n127\n129\n128\n129\n128\n127\n128\n129\n130\n128\n127\n127\n127\n127\n128\n127\n128\n128\n128\n128\n127\n128\n129\n127\n127\n127\n128\n127\n129\n129\n128\n129\n127\n127\n129\n127\n127\n128\n127\n127\n127\n130\n127\n127\n127\n128\n127\n128\n129\n128\n128\n130\n129\n129\n128\n129\n130\n130\n",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"1 1\") == \"no\"\nassert solution(\"1 2\") == \"no\"\nassert solution(\"3 1\") == \"no\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5 3\n''') == 'yes'\n\nassert solution('''\n12 4\n''') == 'no'\n\nassert solution('''\n11 2\n''') == 'no'\n\nassert solution('''\n10 2\n''') == 'yes'\n\nassert solution('''\n10 3\n''') == 'no'",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('1 10') == 'no'\nassert solution('13 0') == 'no'\nassert solution('1 100') == 'no'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'no'\nassert solution('4 1') == 'yes'\nassert solution('13 3') == 'yes'\n'''\n",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\n\nSample Case 1\nSample Case 2\nSample Case 3\nSample Case 4\n\n-----Notes-----\nYou may not use any additional packages for this challenge.\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"13 3\"\n) == \"yes\"\nassert solution(\n    \"1 0\"\n) == \"yes\"\nassert solution(\n    \"13 3\"\n) == \"yes\"\nassert solution(\n    \"1 0\"\n) == \"yes\"\nassert solution(\n    \"13 3\"\n) == \"yes\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('2 1') == 'no'\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1') == 'no'\nassert solution('1 1') == 'yes'\nassert solution('1 1') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('2 1') == 'no'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'yes'\nassert solution('\\n') == 'no'\nassert solution('11\\n3') == 'no'\nassert solution('11\\n1') == 'yes'\nassert solution('11\\n50') == 'no'\n",
        "num_ids_2": 21,
        "num_ids_4": 47
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('5 2') == 'no'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\nprint(solution(\"P01K02H03H04\"))\nprint(solution(\"H02H10P11H02\"))\n\"\"\"\n\nimport collections",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'GRESKA'\nassert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\nassert solution('P11K22H33K44H55') == '0 0 0 0'\nassert solution('P22P33P44P55') == 'GRESKA'\n",
        "num_ids_2": 32,
        "num_ids_4": 73
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"P01K02H03H04\"\n) == \"12 12 11 13\"\nassert solution(\n    \"H02H10P11H02\"\n) == \"GRESKA\"\nprint(\"All tests passed.\")\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n\n\"\"\"\n\nimport unittest\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\n\nprint(solution(stdin.readline()))\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\nassert solution(\"P01K02H03H04 P06K02H03H04\") == \"12 12 11 13 12 12 11 13\"\nassert solution(\"P01K02H03H04 P06K02H03H04 P06K02H03H04\") == \"GRESKA GRESKA GRESKA GRESKA\"",
        "num_ids_2": 39,
        "num_ids_4": 115
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 3\", \".....\\n.*.*.\\n.....\") == '1'\nassert solution(\"7 6 4\", \"......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\") == '2'\n\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\\n.*.*.\") == \"1\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\") == \"2\"\n",
        "num_ids_2": 70,
        "num_ids_4": 70
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\\n.*.*.\\n\") == \"1\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n\") == \"2\"\n\"\"\"\n\n\nimport numpy as np\nfrom collections import deque",
        "num_ids_2": 75,
        "num_ids_4": 75
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.') == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*') == '2'\n\n\"\"\"",
        "num_ids_2": 63,
        "num_ids_4": 63
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 3\", \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\") == \"1\"\nassert solution(\"3 5 3\", \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\") == \"2\"\nassert solution(\"7 6 4\", \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\") == \"2\"\n\n\"\"\"\n\nfrom math import gcd\n",
        "num_ids_2": 228,
        "num_ids_4": 342
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"3 5 3\\n\"\n\".*.*.\\n\"\n\".*.*.\"\n) == \"1\\n\" + \\\n\"+--..\\n\" + \\\n\"|**|\\n\" + \\\n\"+--..\"\n\nassert solution(\n\"7 6 4\\n\"\n\"......\\n\"\n\"*.*.*.*\\n\"\n\"......\\n\"\n\"*.*.*..\\n\"\n\"..*...\\n\"\n\"..*...\\n\"\n\"*....*\"\n) == \"2\\n\" + \\\n\"......\\n\" + \\\n\"*.*.*.*\\n\" + \\\n\"+----..\\n\" + \\\n\"|******\\n\" + \\\n\"+----..\\n\" + \\\n\"*....*\"\n\nassert solution(\n\"7 6 4\\n\"\n\"......\\n\"\n\"*.*.*.*\\n\"\n\"......\\n\"\n\"*.*.*..\\n\"\n\"..*...\\n\"\n\"..*...\\n\"\n\"*....*\"\n) == \"2\\n\" + \\\n\"......\\n\" + \\\n\"*.*.*.*\\n\" + \\\n\"+----..\\n\" + \\\n\"|******\\n\" + \\\n\"+----..\\n\" + \\\n\"*....*\"",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\") == \"1\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\") == \"2\"\n\n\"\"\"\n\n\"\"\"\nimport os",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 3\", \".....\\n.*.*.\\n.....\") == \"1\"\nassert solution(\"7 6 4\", \"......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n\") == \"2\"\n\nSample Input 1:\n4 7 8\n.....\n.**..\n**..*\n***..\n.....\nSample Output 1:\n1\n***..\n**..*\n**..*\n.....\n\"\"\"\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '3 5 3\\n'\n    '.....\\n'\n    '*.*.*\\n'\n    '.....\\n'\n    '*.*.*\\n'\n    '.....\\n'\n    '***.*\\n'\n    '..**.*\\n'\n    '*.*.*\\n'\n) == '1'\n\nassert solution(\n    '7 6 4\\n'\n    '......\\n'\n    '*.*.*.*\\n'\n    '......\\n'\n    '*.*.*..\\n'\n    '..*...*\\n'\n    '*.*.*..\\n'\n    '......\\n'\n    '***.*.*\\n'\n    '***.*.*\\n'\n    '***.*.*\\n'\n) == '2'\n\nassert solution(\n    '7 6 4\\n'\n    '......\\n'\n    '*.*.*.*\\n'\n    '......\\n'\n    '*.*.*..\\n'\n    '..*...*\\n'\n    '*.*.*..\\n'\n    '......\\n'\n    '***.*.*\\n'\n    '***.*.*\\n'\n    '***.*.*\\n'\n) == '2'\n\nassert solution(\n    '7 6 4\\n'\n    '......\\n'\n    '*.*.*.*\\n'\n    '......\\n'\n    '*.*.*..\\n'\n    '..*...*\\n'\n    '*.*.*..\\n'\n    '......\\n'\n    '***.*.*\\n'\n    '***.*.*\\n'\n    '***.*.*\\n'\n) == '2'\n\nassert solution(\n    '7 6 4\\n'\n    '......\\n'\n    '*.*.*.*\\n'\n    '......\\n'\n    '*.*.*..\\n'\n    '..*...*\\n'\n    '*.*.*..\\n'\n    '......\\n'\n    '***.*.*\\n'\n    '***.*.*\\n'\n    '***.*.*\\n'\n) == '2'",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....') == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*') == '2'\n",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('AC AD AH AS KD') == 4\nassert solution('2C 4D 4H 2D 2H') == 3\nassert solution('5C 5D 5S 5H 5C') == 5\nassert solution('AC AH AS KC KD') == 4\nassert solution('2C 4D 4H 2D 2H') == 3\n",
        "num_ids_2": 29,
        "num_ids_4": 58
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('AC AD AH AS KD') == 4\nassert solution('2C 4D 4H 2D 2H') == 3\nassert solution('3C 3D 3H 3S 3C') == 3\nassert solution('4C 4D 4H 4S 4C') == 4\nassert solution('5C 5D 5H 5S 5C') == 5\n",
        "num_ids_2": 29,
        "num_ids_4": 63
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\n\"\"\"\nimport collections\n\ncards_dict = {\n    \"A\": 1,\n    \"2\": 2,\n    \"3\": 3,\n    \"4\": 4,\n    \"5\": 5,\n    \"6\": 6,\n    \"7\": 7,\n    \"8\": 8,\n    \"9\": 9,\n    \"T\": 10,\n    \"J\": 11,\n    \"Q\": 12,\n    \"K\": 13\n}\n\ncards_list = [\n    \"A\",\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\",\n    \"T\",\n    \"J\",\n    \"Q\",\n    \"K\"\n]",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\n\nprint(solution(\"AC AD AH AS KD\"))\nprint(solution(\"2C 4D 4H 2D 2H\"))\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('AC AD AH AS KD') == '4'\nassert solution('2C 4D 4H 2D 2H') == '3'\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 5\\n2 1 1 1 0 1') == '5'\nassert solution('5 1\\n0 0 0 0 0') == '7'\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 5\\n2 1 1 1 0 1') == '5'\nassert solution('5 1\\n0 0 0 0 0') == '7'\n\"\"\"\n\nfrom itertools import permutations",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\") == \"7\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 1 1 0 1\\n2 3') == '5'\nassert solution('2 1 1 1 0 1\\n1') == '7'\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 0 0 0 1') == 7\nprint(solution('2 1 1 1 0 1'))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\") == \"2\"\nassert solution(\"6 2\") == \"0\"\nassert solution(\"6 4\") == \"0\"\nassert solution(\"6 5\") == \"1\"\nassert solution(\"7 7\") == \"1\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2 3 4\") == \"3\"\nassert solution(\"2 2\\n0 0\") == \"0\"\nassert solution(\"1 2\\n1 1\") == \"0\"\nassert solution(\"1 2\\n0 1\") == \"1\"\nassert solution(\"1 2\\n1 2\") == \"0\"\n\nprint(solution(input()))",
        "num_ids_2": 32,
        "num_ids_4": 62
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\\n1 2 3 4 5\\n\") == \"5\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 5\\n2 1 1 1 0 1') == '5'\nassert solution('5 1\\n0 0 0 0 0') == '7'\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1\\n0 0 0 0 0\") == \"7\"\nassert solution(\"10 10\\n2 1 1 1 1 1 1 1 1 1\\n0 0 0 0 0 0 0 0 0 0\\n1 1 1 1 1 1 1 1 1 1\") == \"101\"\nassert solution(\"20 10\\n
        "num_ids_2": 65,
        "num_ids_4": 1582
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"All your base are belong to us.\\n\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\\n\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n",
        "num_ids_2": 122,
        "num_ids_4": 122
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(solution.__doc__.strip()) == ''\nassert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n",
        "num_ids_2": 1244,
        "num_ids_4": 1244
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\", \"Solution incorrect!\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\", \"Solution incorrect!\"\nprint(\"Correct!\")\n\nThe Western Suburbs Croquet Club has two categories of membership, Senior and Open. They would like your help with an application form that will tell prospective members which category they will be placed.\n\nTo be a senior, a member must be at least 55 years old and have a handicap greater than 7. In this croquet club, handicaps range from -2 to +26; the better the player the lower the handicap.\n\nInput\n\nThere will be two integers on each line,\u00a0a and b.\n\n-104 <= a <= 104\n\n-104 <= b <= 104\n\nOutput\n\nPrint the word\u00a0Senior\u00a0if the member is a senior, or\u00a0Open\u00a0if the member is open.\n\nSample Input 0\n\n55\n\n-2\n\nSample Output 0\n\nSenior\n\nSample Input 1\n\n56\n\n-1\n\nSample Output 1\n\nOpen",
        "num_ids_2": 125,
        "num_ids_4": 125
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@@-@j1 12 @z2 @n7 @k7 @l1 @o1 @h2 @a1 @m2 @n9 @z3 @k4 @p0 @q0 @j7 @a8 @l7 @m4 @b0 @d0 @o2 @z8 @j0 @k3 @a0 @h8 @a5 @o6 @z9 @a4 @b3 @a1 @h1 @o5 @n6 @k6 @d2 @a3 @z4 @b1 @k1 @a0 @g0 @m0 @b9 @n0 @z5 @k2 @a0 @o0 @b8 @n2 @n3 @z6 @n4 @n8 @z7 @n9 @a7 @b4 @a7 @k5 @b9 @b2 @n1 @a8 @c7 @k7 @a6 @a6 @o4 @a5 @e2 @a9 @c8 @n6 @b8 @h2 @n7 @b4 @m0 @k9 @a9 @j2 @b0 @k7 @m1 @n5 @n0 @m9 @o3 @p3 @q4 @k2 @a6 @o5 @b1 @n9 @k7 @m2 @m3 @o8 @o4 @k8 @n7 @o9 @z4 @o1 @j4 @o7 @n7 @k6 @m6 @b2 @n9 @k8 @b5 @a7 @j7 @n3 @o6 @n7 @k5 @k3 @a3 @o8 @o9 @b7 @q2 @k6 @a4 @q7 @k5 @b3 @q9 @k1 @a7 @n6 @k6 @o2 @a8 @m8 @k9 @a7 @m4 @q4 @n4 @m7 @a8 @k7 @j3 @m6 @a0 @j8 @q0 @k6 @m1 @m6 @q5 @k1 @a2 @o9 @k3 @a4 @k3 @j5 @k7 @m3 @m1 @o5 @q1 @k0 @j0 @k8 @k5 @o9 @m5 @o1 @o0 @j0 @k2 @k1 @m0 @q0 @b3 @k3 @o2 @o1 @k5 @m0 @j1 @q0 @k0 @j8 @k2 @a1 @m1 @q1 @a8 @m2 @n2 @b0 @o0 @k8 @o3 @q0 @k5 @n9 @a8 @m1 @k8 @n9 @o4 @o0 @o8 @m1 @k1 @m5 @a8 @a8 @m6 @q1 @a0 @b1 @o6 @o5 @j0 @m5 @b2 @j3 @o3 @j3 @j2 @q2 @k2 @m9 @n6 @o6 @p0 @q0 @j5 @b8 @b7 @q6 @a0 @m8 @q1 @a2 @m4 @a9 @k1 @n5 @a6 @b4 @q3 @q4 @n6 @a0 @k0 @n5 @a4 @a5 @k0 @k5 @n1 @n4 @n1 @o2 @o0 @b5 @b2 @b1 @m4 @n9 @n2 @j8 @n4 @a8 @o4 @m6 @q4 @m9 @j8 @n3 @a4 @q2 @b1 @k0 @m5 @q5 @o5 @j0 @m7 @n2 @k1 @m7 @n1 @j5 @n3 @a8 @a7 @k5 @m0 @k9 @m2 @n1 @j8 @o7 @m9 @b0 @m5 @o4 @q4 @o8 @m2 @j2 @k1 @j7 @m1 @q7 @j7 @o7 @p0 @m5 @b3 @m0 @a1 @a9 @a6 @o7 @o4 @a9 @a8 @m9 @n2 @n1 @j2 @n4 @k5 @o0 @o9 @a3 @q1 @b4 @m1 @o6 @o9 @p0 @q0 @q1 @q2 @q3 @q4 @q5 @q6 @q7 @q8 @q9 @q0 @m7 @n2 @m6 @n0 @m5 @q7 @k7 @m4 @k0 @o0 @m6 @q8 @m3 @m3 @q0 @q0 @o0 @p0 @m2 @o1 @o9 @a0 @q1 @j1 @m1 @o7 @o5 @k0 @m1 @q6 @j0 @n7 @m7 @m1 @m1 @q1 @a3 @q7 @b8 @o1 @o5 @n5 @b5 @m5 @n0 @o5 @q6 @j8 @o2 @n2",
        "num_ids_2": 1244,
        "num_ids_4": 1244
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('All your base are belong to us.\\n') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '\\'][\\'0 |_|$.\\n'\nassert solution('What\\'s the Frequency, Kenneth?\\n') == '\\/\\/[-]@' + '\\'][\\'$ \\']][\\'[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3\\'][\\'[-]?\\n'\n\nSample Input 3:\nMark\u00a0Qi\u00a0Liu\u00a0believes\u00a0that\u00a0two\u00a0toasts\u00a0are\u00a0the\u00a0apparels\u00a0that\u00a0make\u00a0a\u00a0good\u00a0coffee.\u00a0His\u00a0grandfather\u00a0is\u00a0a\u00a0writer\u00a0of\u00a0a\u00a0famous\u00a0novel.\nSample Output 3:\n_22 |*|_0|`/$/0|_||Z.[9]\u00a0[email\u00a0protected]$6.|9|.\n\"\"\"",
        "num_ids_2": 131,
        "num_ids_4": 131
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 \\'][\\'0 |_|$.\\n'\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@\\'][''$ \\'][\\'[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3\\'][\\'[-]?\\n'\nassert solution('The New Alphabet') == 'cqyvglxjhkpts vwzq xjhqpts cqhj vzgkqtyk xjhkz cqqjvjpts gxhjqpts xjhkv wqjxh kqvgpts xjhkq wqhj qvxgjpts cqhj kqwjqx jhvjgpts xjhq kqwjx qvxq jhgkqtyk qvxg qhjk wgqjqx jhgjgpts xjhg jhjgw qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkqwj qhkqgj gjgk qhkq",
        "num_ids_2": 120,
        "num_ids_4": 1243
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"All your base are belong to us
        "num_ids_2": 1244,
        "num_ids_4": 1244
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('All your base are belong to us') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@\\'][''$ '\nassert solution('a') == 'a'\n\nSample Test:\n",
        "num_ids_2": 66,
        "num_ids_4": 76
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n    '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z '\\\n    '[email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z '\\\n    '[email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z '\\\n    '[email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z '\\\n    '[email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z '\\\n    '[email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z '\\\n    '[email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z '\\\n    '[email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z '\\\n    '[email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z '\\\n    '[email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z '\\\n    '[email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z '\\\n    '[email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z '\\\n    '[email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z '\\\n    '[email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z '\\\n    '[email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z '\\\n    '[email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z '\\\n    '[email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z '\\\n    '[email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z '\\\n    '[email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z '\\\n    '[email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z '\\\n    '[email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z '\\\n    '[email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z '\\\n    '[email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\nassert solution('Say hi to Eric for me.') == \"8 8$ #0 #[-]1# |W Z#![-]1#,|_|0[-]1#.'#0|_|$'#'[-]1#[-]1#.\\n\"\n",
        "num_ids_2": 117,
        "num_ids_4": 186
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\nassert solution(\"9\") == \"Alice\"\n\nassert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1\n3\n5\n7\n9\n''') == \"Bob\"\nassert solution('''\n10\n1\n3\n5\n7\n9\n11\n13\n15\n17\n19\n''') == \"Alice\"\nassert solution('''\n10\n1\n3\n5\n7\n9\n11\n13\n15\n17\n19\n''') == \"Bob\"\n'''",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'Bob'\nassert solution('2') == 'Bob'\nassert solution('1') == 'Alice'\nassert solution('3') == 'Alice'\nassert solution('4') == 'Alice'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\nassert solution('7') == 'Bob'\nassert solution('10') == 'Bob'\nassert solution('13') == 'Bob'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == 'Bob'\nassert solution('1') == 'Alice'\nassert solution('11') == 'Alice'\nassert solution('9') == 'Alice'\nassert solution('15') == 'Bob'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2') == 'Bob'\nassert solution('2\\n1') == 'Alice'\nassert solution('3\\n2\\n1') == 'Bob'\nassert solution('4\\n3\\n2\\n1') == 'Alice'\nassert solution('5\\n4\\n3\\n2\\n1') == 'Bob'\n",
        "num_ids_2": 26,
        "num_ids_4": 61
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\nassert solution(\"3\") == \"Alice\"\nassert solution(\"4\") == \"Bob\"\n\nassert solution(\"5\") == \"Alice\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"Bob\"\nassert solution(\"1\") == \"Alice\"\nassert solution(\"4\") == \"Alice\"\nassert solution(\"6\") == \"Bob\"\nassert solution(\"8\") == \"Alice\"\n\n\"\"\"\n\nfrom collections import defaultdict\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1''') == 'Alice'\nassert solution('''2''') == 'Bob'\nassert solution('''1\n2''') == 'Alice'\nassert solution('''2\n1''') == 'Bob'\nassert solution('''3\n4\n2\n1''') == 'Alice'\n",
        "num_ids_2": 26,
        "num_ids_4": 40
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1) == 'Alice'\nassert solution(2) == 'Bob'\nassert solution(3) == 'Alice'\nassert solution(4) == 'Bob'\nassert solution(5) == 'Bob'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 4\") == \"twenty three forty four\"\nassert solution(\"3 2 1\") == \"thirty two one\"\nassert solution(\"3 2 1 7\") == \"thirty two one seven\"\nassert solution(\"3 2 1 7 8\") == \"thirty two one seven eight\"\nassert solution(\"3 2 1 7 8 9\") == \"thirty two one seven eight nine\"\n",
        "num_ids_2": 31,
        "num_ids_4": 67
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13') == 'three'\nassert solution('5') == 'five'\nassert solution('3') == 'three'\nassert solution('7') =='seven'\nassert solution('1') == 'one'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"this sentence has thirtyone letters\") == \"this sentence has $ letters\"\nassert solution(\"$ is the number of letters here\") == \"thirty is the number of letters here\"\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('two') == 'two'\nassert solution('twenty') == 'twenty'\nassert solution('three') == 'three'\nassert solution('threehundred') == 'threehundred'\nassert solution('threehundredninety') == 'threehundredninety'\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"this sentence has $ letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"this sentence has thirtyone letters\") == \"thirty is the number of letters here\"\nassert solution(\"$ is the number of letters here\") == \"thirty is the number of letters here\"\nassert solution(\"this sentence has thirtyone letters$\") == \"thirty is the number of letters here\"\n",
        "num_ids_2": 41,
        "num_ids_4": 87
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"this sentence has $ letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"thirty is the number of letters here\") == \"thirty is the number of letters here\"\nassert solution(\"is there any more letters\") == \"thirty is the number of letters here\"\nassert solution(\"is it $ or more?\") == \"thirty is the number of letters here\"\nassert solution(\"one two three $ four five six\") == \"one two three thirtyone letters here\"\n",
        "num_ids_2": 43,
        "num_ids_4": 86
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\nthis\\nsentence\\nhas\\n$\\nletters') == 'this sentence has thirtyone letters'\nassert solution('7\\n$\\nis\\nthe\\nnumber\\nof\\nletters\\nhere') == 'thirty is the number of letters here'\n\"\"\"\n\nimport unittest\nimport sys\nimport math\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"this sentence has thirtyone letters\") == \"this sentence has $ letters\"\nassert solution(\"this sentence has thirtyone letters\") == \"this sentence has $ letters\"\nassert solution(\"this sentence has thirtyone letters\") == \"this sentence has $ letters\"\nassert solution(\"this sentence has thirtyone letters\") == \"this sentence has $ letters\"\nassert solution(\"this sentence has thirtyone letters\") == \"this sentence has $ letters\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == \"twenty\"\nassert solution('3') == \"thirty\"\nassert solution('4') == \"forty\"\nassert solution('5') == \"fifty\"\nassert solution('6') == \"sixty\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"this sentence has $ letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"$ is the number of letters here\") == \"thirty is the number of letters here\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Abcd') == '0'\nassert solution('EaEbFabG') == '5'\n\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\n\"\"\"\nfrom typing import List, Tuple\n\nfrom utils import timing\n\nINPUT_1 = \"\"\"\nAbcd\n\"\"\"\nINPUT_2 = \"\"\"\nEaEbFabG\n\"\"\"\n\n\nclass NOP:\n    def __init__(self, n: int):\n        self.n = n\n        self.nop = \"NOP\"\n\n    def __str__(self) -> str:\n        return self.nop * self.n\n\n\nclass Instruction:\n    def __init__(self, instruction: str, n: int):\n        self.instruction = instruction\n        self.n = n\n        self.parameters = []\n        self.opcode = \"\"\n        self.size = 0\n        self.fixed_positions = {}\n\n    def set_opcode(self):\n        if len(self.instruction) > 1:\n            self.opcode = self.instruction[0]\n            self.parameters = [int(p) for p in self.instruction[1:]]\n\n    def __str__(self) -> str:\n        return self.instruction\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Abcd\") == 0\nassert solution(\"EaEbFabG\") == 5\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Abcd\") == 0\nassert solution(\"EaEbFabG\") == 5\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\n\"\"\"\n\nimport sys\n\nimport re\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\nprint(solution(stdin.readline()))\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('Abcd') == '0'\nassert solution('EaEbFabG') == '5'\n\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\nassert solution('4 2') == 'Not a moose'\nassert solution('1 1') == 'Not a moose'\n",
        "num_ids_2": 25,
        "num_ids_4": 53
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 2\") == \"Odd 2\"\nassert solution(\"0 0\") == \"Not a moose\"\nassert solution(\"0 2\") == \"Even 2\"\nassert solution(\"2 2\") == \"Even 4\"\n\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 51
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\n\nprint(solution(\"2 3\"))\nprint(solution(\"3 3\"))",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"3 1\") == \"Odd 3\"\nassert solution(\"2 2\") == \"Even 0\"\nassert solution(\"0 0\") == \"Not a moose\"\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(2, 3) == \"Odd 6\"\nassert solution(3, 3) == \"Even 6\"\nassert solution(0, 0) == \"Not a moose\"\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 42
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\nassert solution('0 3') == 'Not a moose'\nassert solution('8 5') == 'Even 10'\nassert solution('0 0') == 'Even 0'\n",
        "num_ids_2": 25,
        "num_ids_4": 51
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"10 10\") == \"Not a moose\"\nassert solution(\"0 0\") == \"Not a moose\"\nassert solution(\"0 10\") == \"Odd 5\"\n",
        "num_ids_2": 25,
        "num_ids_4": 53
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('tomo') == '1'\nassert solution('mono') == '2'\nassert solution('dak') == '2'\nassert solution('6666') == '2'\n\nprint(solution(stdin))\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"hello\") == \"hello\"\nassert solution(\"hello\") == \"hello\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == 'a'\nassert solution('2') == 'b'\nassert solution('3') == 'c'\nassert solution('4') == 'd'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2\\n1\\n\", \"6666\") == 2\nassert solution(\"3\\n2\\n1\\n\", \"52\") == 2\n\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\njano\\ndano\\ntano\\n722') == '2'\nassert solution('2\\nja\\nla\\n52') == '2'\n\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('g-4 i-444 h-44 t-8') == 'ghi'\nassert solution('1-2-3-4-5-6-7-8-9-0') == '123456789'\nassert solution('h-4 m-4 o-4') == 'hom'\nassert solution('q-4 w-4 e-4 r-4 t-4 y-4 u-4 i-4 o-4 p-4 s-4 d-4 f-4 g-4 h-4 j-4 k-4 l-4 z-4 x-4 c-4 v-4 b-4 n-4 m-4') == 'qwertyuiopasdfghjklzxcvbnm'\nassert solution('g-4 i-444 h-44 t-8') == 'ghi'\n",
        "num_ids_2": 53,
        "num_ids_4": 169
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\nla') == 'def'\nassert solution('3\\nmono') =='mono'\nassert solution('3\\ntomo') == 'tomo'\nassert solution('5\\ndak') == 'dak'\nassert solution('2\\nja') == 'ja'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"123456\"\nassert solution(\"1 2 3 4 5 6\", \"8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\") == \"123456789\"",
        "num_ids_2": 65,
        "num_ids_4": 65
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\ntomo\\nmono\\ndak\\n6666\") == 1\nassert solution(\"2\\nja\\nla\\n52\") == 2\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('tomo') == '1'\nassert solution('mono') == '2'\nassert solution('dak') == '1'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\n\n\"\"\"\n",
        "num_ids_2": 89,
        "num_ids_4": 89
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\n",
        "num_ids_2": 89,
        "num_ids_4": 89
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..'\n\"\"\"\n",
        "num_ids_2": 89,
        "num_ids_4": 89
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\\n'\nassert solution('AB') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\\n'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\\n'\n\"\"\"\n\nimport math\nimport functools\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solution(self, stdin: str) -> str:\n        stdin = list(stdin)\n        stdin = list(map(self._turn, stdin))\n        stdin = functools.reduce(self._connect, stdin, [])\n        stdin = functools.reduce(self._connect, stdin, ['*'])\n        return stdin\n\n    def _turn(self, letter: str) -> str:\n        return chr(ord(letter) + 1)\n\n    def _connect(self, a: str, b: str) -> str:\n        if a == b:\n            return a + '*'\n        else:\n            return a + b\n",
        "num_ids_2": 43,
        "num_ids_4": 136
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(TEST_CASE_1) == TEST_CASE_1_RESULT_1\nassert solution(TEST_CASE_2) == TEST_CASE_2_RESULT_2\nassert solution(TEST_CASE_3) == TEST_CASE_3_RESULT_3\n",
        "num_ids_2": 48,
        "num_ids_4": 72
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\\n'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\\n'\n\"\"\"",
        "num_ids_2": 93,
        "num_ids_4": 93
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A\") ==..#..\nassert solution(\"DOG\") ==..#...#...*..\n\"\"\"\n\nimport unittest\n\n\nclass Solution:\n    def __init__(self, stdin: str) -> None:\n        self.stdin = stdin\n\n    def get_result(self, width: int, height: int) -> str:\n        return \"\\n\".join(\n            [\n                \"\".join(\n                    [\n                        \".\"\n                        if (j + i) % width!= 0\n                        else \"*\"\n                        for j in range(width)\n                    ]\n                )\n                for i in range(height)\n            ]\n        )\n\n    def solve(self) -> str:\n        width = int(self.stdin[0])\n        height = int(self.stdin[1])\n        return self.get_result(width, height)\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        _test_cases = [\n            (\"A\", \"..#..\"),\n            (\"DOG\", \"..#...#...*..\"),\n        ]\n\n        solution = Solution(stdin=\"2\\n3\")\n        for stdin, expected in _test_cases:\n            self.assertEqual(solution.solve(), expected)\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A\") == \"...#..#.#..\\n#.##.#.##.\\n.#.A.##.\\n#.##.#.##.\\n..#..#...#\\n\"\nassert solution(\"DOG\") == \"...#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n#.#.#.#.*.*.\\n...#...#...*..\"\n\"\"\"\n\nimport unittest\nfrom typing import List\nimport numpy as np",
        "num_ids_2": 105,
        "num_ids_4": 105
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution
        "num_ids_2": 1683,
        "num_ids_4": 1683
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\\n'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\\n'\nassert solution('CAT') == '...#.##.\\n.##.#.#\\n##.##.\\n.##.#.#\\n...#.##\\n'\n\"\"\"\n\nimport sys\n\nsys.path.append(\"./\")\nimport utils\n",
        "num_ids_2": 43,
        "num_ids_4": 142
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"2\") == \"2.000000\"\nassert solution(\"3\") == \"5.959064\"\nassert solution(\"4\") == \"8.861069\"\nassert solution(\"5\") == \"12.566366\"\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"1\") == 3.141593\nassert solution(\n\"21\") == 1385.442360\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n\") == '3.141593\\n3.141593'\nassert solution(\"21\\n\") == '1385.442360\\n882.000000'\n\"\"\"\n\n\nfrom math import sqrt",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\nassert solution('23') == '1373.043428'\nassert solution('45') == '1585.333333'\n",
        "num_ids_2": 22,
        "num_ids_4": 52
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '3.141593'\nassert solution('2') == '2.000000'\nassert solution('21') == '1385.442360'\n",
        "num_ids_2": 26,
        "num_ids_4": 41
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"21\") == \"1385.442360\"\n\"\"\"\n\nr = int(stdin.readline())",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == 3.141593\nassert solution('21') == 1385.442360\n\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == 3.14159\nassert solution('1') == 3.1416\nassert solution('100') == 314.159265\nassert solution('10000') == 3141592653589793\nassert solution('10001') == 3141592653589793\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"21\") == \"1385.442360\"\nassert solution(\"10000\") == \"42975.664307\"\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 44
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(2) == 3.141593\nassert solution(1) == 2.0\nassert solution(21) == 1385.442360\n\nprint('Success')",
        "num_ids_2": 22,
        "num_ids_4": 35
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\nassert solution(\"5\\n129 44 394 253 147\") == \"0\"\nassert solution(\"10\\n-50000 500000 -200000 50000 50000 50000 -50000 -200000\") == \"150000\"\nassert solution(\"15\\n-2 -3 -1 1 2 -2 1 -1 1 -1 -1 1 1 1 -3 -1 -1 -2 -1 1 1\") == \"0\"\n\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 110
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 -2 3') == 2\nassert solution('5\\n129 44 394 253 147') == 0\n\"\"\"\n\nn = int(input())\nk = list(map(int, input().split()))",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 -2 3') == '2'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\nassert solution(\"5\\n129 44 394 253 147\") == \"0\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 -2 3\\n4 -2 1\") == \"2\"\nassert solution(\"1 -2 3\\n4 -2 1\\n1 2 3\") == \"0\"\nassert solution(\"2 -1 -1\\n-1 2 1\") == \"0\"\nassert solution(\"2 -1 -1\\n-1 2 1\\n2 2 -2\") == \"0\"\nassert solution(\"0 -1 1\") == \"0\"\n",
        "num_ids_2": 43,
        "num_ids_4": 89
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n-2 3\") == \"2\"\nassert solution(\"5\\n129 44 394 253 147\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n-2 3') == '2'\nassert solution('5\\n129 44 394 253 147') == '0'\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 -2 3\\n') == '2'\nassert solution('5\\n129 44 394 253 147\\n') == '0'\n\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\nassert solution(\"5\\n129 44 394 253 147\") == \"0\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 -2 3\\n') == '2'\nassert solution('1 -2 3\\n') == '2'\nassert solution('1 -2 3\\n') == '2'\nassert solution('1 -2 3\\n') == '2'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 2 2') == '6'\nassert solution('3\\n4 1 2') == '8'\n\n----Puzzle Input----\n3\n2 2 2\n7 1 3\n10 5 9\n\n----Puzzle Output----\n12\n\n-----------------------------\n\"\"\"\n\nimport sys",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n4 1 2\") == \"8\"\nassert solution(\"3\\n2 2 2\") == \"6\"\nassert solution(\"2\\n2 2\") == \"4\"",
        "num_ids_2": 30,
        "num_ids_4": 44
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2\") == \"8\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n2 2 2') == '6'\nassert solution('3\\n4 1 2') == '8'\nassert solution('3\\n3 3 3') == '12'\nassert solution('3\\n4 4 4') == '16'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\ntimes = list(map(int, sys.stdin.readline().split()))\ntimes.sort(reverse=True)",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 2 2') == '6'\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2 2 2') == '6'\nassert solution('3\\n4 1 2') == '8'\nassert solution('1\\n0') == '0'\nassert solution('2\\n1 1') == '1'\nassert solution('2\\n3 3') == '6'\n\nprint('Success')\n\n\"\"\"\nfrom typing import List\nfrom math import inf\n",
        "num_ids_2": 30,
        "num_ids_4": 57
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\nassert solution(\"3\\n4 1 2\") == \"8\"\n\"\"\"\n\nimport math",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\") == \"8\"\nassert solution(\"5\\n1 2 3 4 5\") == \"11\"\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 2 2') == '6'\nassert solution('3\\n4 1 2') == '8'",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\nassert solution(\"3\\n4 1 2\") == \"8\"\n\"\"\"\n\nn = int(input())\ntimes = list(map(int, input().split()))\n\nmax_time = max(times)\n\ntotal_time = 0\n\nfor i in range(n):\n    total_time += times[i] * (n - i)\n\nprint(total_time - max_time)",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\n\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11\\n') == '2'\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\nassert solution('2 4 4\\n1111\\n1S01\\n1011\\n0L11') == 'NOT POSSIBLE'\nassert solution('2 4 4\\n1111\\n1S01\\n1011\\n0R11') == 'NOT POSSIBLE'\nassert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U1') == 'NOT POSSIBLE'\n\nprint('Success')\n",
        "num_ids_2": 61,
        "num_ids_4": 125
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"NOT POSSIBLE\"\n\"\"\"\nimport math\nimport sys\n\nsys.setrecursionlimit(1000000)\n",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\n\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"NOT POSSIBLE\"\n\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\\n1U11\\n1D11\\n1R11\\n1L11\\n\") == \"5\"\n\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\\n1U11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1U11\\n1U11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1U11\\n1U11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1U11\\n1U11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1U11\\n1U11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1D11\\n1R11\\n1L11\\n1",
        "num_ids_2": 61,
        "num_ids_4": 1414
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"NOT POSSIBLE\"\n\"\"\"\n\nt, n, m = map(int, input().split())\ngrid = [input() for i in range(n)]",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11\\n') == '2'\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\n\"\"\"\n\nimport sys\nimport numpy as np",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\n\"\"\"\nimport sys\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 5\n3 1 2 1 1''') == 4\nassert solution('''7 5\n1 5 4 3 2 1 1''') == 3\n'''\n\n\nn, c = map(int, stdin.readline().split())\nlst = list(map(int, stdin.readline().split()))",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\n\n\"\"\"\n\nimport sys\nimport os",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 5\n3 1 2 1 1''') == '4'\nassert solution('''7 5\n1 5 4 3 2 1 1''') == '3'\n'''\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == \"4\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1\\n1 2 3') == 3\nassert solution('5 5\\n1 5 4 3 2 1 1') == 3\n\nimport sys\nfrom collections import deque, defaultdict, Counter, OrderedDict\nfrom heapq import heappop, heappush, heappushpop, heapify, heapreplace, merge\nfrom math import ceil, floor, gcd, log, sqrt, pi, factorial, radians, cos, sin, tan  # prod, comb\nfrom copy import deepcopy\nfrom decimal import Decimal\nfrom bisect import bisect, bisect_left, bisect_right",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\n\"\"\"\n\nimport sys\n\nN, C = map(int, sys.stdin.readline().split())\nweights = sorted(map(int, sys.stdin.readline().split()))",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == \"4\"\nassert solution(\"7 5\\n1 5 4 3 2 1 1\") == \"3\"\n\"\"\"\n\nimport math",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 5\n3 1 2 1 1\n''') == '4'\nassert solution('''7 5\n1 5 4 3 2 1 1\n''') == '3'\nassert solution('''7 5\n1 5 4 3 2 2 2\n''') == '3'\nassert solution('''7 5\n1 5 1 3 2 2 2\n''') == '2'\nassert solution('''7 5\n3 1 1 5 2 2 2\n''') == '3'\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == \"4\"\nassert solution(\"7 5\\n1 5 4 3 2 1 1\") == \"3\"\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\"\n",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\"\n",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(s) == sol\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\"",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"SSPPR\") == 5\nassert solution(\"SSPPR\") == 10\nassert solution(\"SSPPR\") == 5\nassert solution(\"SSPPR\") == 10\nassert solution(\"SSPPR\") == 5\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\"",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"SSPPR\") == 5\nassert solution(\"SSPPR\") == 10\n\"\"\"\nimport functools\n\n@functools.lru_cache(None)\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\"\n",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\"\n",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5SSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\nassert solution(\"5SSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\"\nprint(\"PASSED\")\n\nprint(\"HERE\")\n",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n7\\n11\\n') == '4'\nassert solution('5\\n2\\n5\\n9\\n10\\n17\\n') =='still running'\n\"\"\"\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n7\\n11\\n') == '4'\nassert solution('5\\n2\\n5\\n9\\n10\\n17\\n') =='still running'\n\"\"\"\nimport math",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n11\\n') == '4'\nassert solution('2\\n5\\n9\\n10\\n17\\n') =='still running'\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n7\\n11\\n\") == \"4\\nstill running\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\") == \"still running\"\n\"\"\"\n\nn = int(stdin.readline())\n\nstdin = [int(stdin.readline()) for _ in range(n)]\n\nseconds = 0\ntimer = \"still running\"\nfor t in stdin:\n    seconds += t\n    if seconds > 1000:\n        timer = seconds - 1000\n        break\n\nprint(timer)\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5\\n') =='still running'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == '6'\n\"\"\"\n\nfrom collections import deque\n",
        "num_ids_2": 33,
        "num_ids_4": 60
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n7\\n11\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"still running\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n7\\n11\\n\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\") == \"still running\"\n\"\"\"",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n2\n5\n9\n10\n17''') =='still running'\nassert solution('''1\n3\n6\n9\n12\n15''') == '2'\nassert solution('''1\n4\n5\n6\n7\n8''') == '5'\nassert solution('''2\n10\n15\n20\n15\n25\n30''') =='still running'\n\n---",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n7\\n11\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"still running\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n7\\n11\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"still running\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n6 1 3 2 2 3') == '0.6'\nassert solution('2\\n2 2') == 'impossible'\n\nimport math",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 1 3 2 2 3\") == \"0.6\"\nassert solution(\"2 2\") == \"impossible\"\nprint(\"All tests passed.\")\n\n-----Solution-----\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1 3 2 2 3\") == \"0.6\"\nassert solution(\"2 2\") == \"impossible\"\n\"\"\"\nimport collections",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 3 2') == '0.4'\nassert solution('6 1 3 2 2 3') == '0.6'\nassert solution('6 1 3 2') == 'impossible'\n\nimport math\nimport itertools\nimport collections",
        "num_ids_2": 32,
        "num_ids_4": 46
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 1 3 2 2 3\") == \"0.6\"\nassert solution(\"2 2\") == \"impossible\"\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 1 3 2 2 3') == '0.6'\nassert solution('2 2') == 'impossible'\n\n-----Challenge-----\nCan you solve this problem without using strings?\n\n\"\"\"\nimport math\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 1 3 2 2 3\\n2 2') == '0.6'\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a) == b\nprint(solution(a))\n\n-----Test Cases-----\n'''\nimport math\nimport sys\nimport os\nfrom typing import List, Any\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n6 1 3 2 2 3') == '0.6'\nassert solution('2\\n2 2') == 'impossible'\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n6 1 3 2 2 3') == '0.6'\nassert solution('2\\n2 2') == 'impossible'\n\n'''\n\nn = int(stdin.readline().strip())\ncapacities = [int(i) for i in stdin.readline().split()]\nballoon = 1\nfor capacity in sorted(capacities, reverse=True):\n    if balloon * capacity <= n:\n        n -= balloon * capacity\n        balloon += 1\n    else:\n        break\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"\n\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"\n\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Emma'\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"\nassert solution(\"2 2 2 2\\n4 6 1 6\") == \"Gunnar\"\n",
        "num_ids_2": 40,
        "num_ids_4": 61
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 8 1 8\\n1 10 2 5') == 'Tie'\nprint(solution('1 8 1 8\\n1 10 2 5'))\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Emma'\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == \"Emma\"\nassert solution('1 8 1 8\\n1 10 2 5') == \"Tie\"\nassert solution('1 16 1 16') == \"Gunnar\"\nassert solution('2 4 2 4') == \"Tie\"\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 69
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"\n\nimport re",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Emma'\n\"\"\"\n\nimport sys\n\n[a_1, b_1, a_2, b_2] = list(map(int, sys.stdin.readline().strip().split()))\n[a_3, b_3] = list(map(int, sys.stdin.readline().strip().split()))\n\ndie1 = [a_1, a_1 + 1, *range(a_2 + 2, b_1 + 1)]\ndie2 = [a_3, a_3 + 1, *range(a_2 + 2, b_3 + 1)]\n\nprint('Tie' if set(die1) == set(die2) else 'Gunnar' if sum(die1) >= sum(die2) else 'Emma')\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n1 2 3 mumble 5\n''') == \"makes sense\"\nassert solution('''8\n1 2 3 mumble mumble 7 mumble 8\n''') == \"something is fishy\"\nprint('Passed')",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 2 3 mumble mumble 7 mumble 8\") == \"makes sense\"\nassert solution(\"8 1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1 2 3 mumble mumble 7 mumble 8''') =='something is fishy'\nassert solution('''5\n1 2 3\nmumble mumble 7 mumble 8''') =='makes sense'\nassert solution('''5\n5 5 6\nmumble mumble 7 mumble 8''') =='something is fishy'\nassert solution('''1 2 mumble mumble 7 mumble 8''') =='something is fishy'\nassert solution('''1 2 3 mumble\nmumble mumble 7 mumble 8''') =='something is fishy'",
        "num_ids_2": 33,
        "num_ids_4": 65
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\\n\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\\n\") == \"something is fishy\"\n\"\"\"\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8 1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n\nprint(solution(input()))\n\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 3 mumble 5') =='makes sense'\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\n\n\"\"\"",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 mumble 5') =='makes sense'\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\n\n\"\"\"\n\nimport math\n\nn = int(input())\n\nwords = list(map(str, input().split()))\n\nfor i in range(0, n, 2):\n    if words[i] =='mumble':\n        print('something is fishy')\n        break\n    elif int(words[i]) < 0:\n        print('something is fishy')\n        break\n    elif i == n-1 and int(words[i])!= 0:\n        print('something is fishy')\n        break\n    elif int(words[i]) < int(words[i+1]):\n        print('something is fishy')\n        break\n    elif int(words[i+1]) == 0:\n        print('something is fishy')\n        break\n    elif math.log(int(words[i]), 2).is_integer() == False:\n        print('something is fishy')\n        break\n    elif int(words[i+1]) % int(words[i])!= 0:\n        print('something is fishy')\n        break\n    else:\n        print('makes sense')",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'3\\n'\n'1 2 3\\n') =='makes sense'\nassert solution(\n'5\\n'\n'1 2 3 mumble 5\\n') =='makes sense'\nassert solution(\n'8\\n'\n'1 2 3 mumble mumble 7 mumble 8\\n') =='something is fishy'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 3 6 9 12 15\n''') == '1 18'\n\nassert solution('''4 9 25 49 81\n''') == '2 121'\n\nassert solution('''3 5 7 9\n''') == '2 35'\n\nassert solution('''5 3 6 9 12 15\n''') == '1 18'\n\nassert solution('''2 10 3 4 7 5 9\n''') == '2 10'",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\nassert solution('5 3 6 9 12 15') == '1 18'\nassert solution('5 3 6 9 12 15') == '1 18'\nassert solution('5 3 6 9 12 15') == '1 18'\n",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 6 9 12 15\\n\") == \"1 18\"\nassert solution(\"4 9 25 49 81\\n\") == \"2 121\"\nassert solution(\"3 4 5 6 7 8\\n\") == \"0 6\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\\n\") == \"0 6\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\\n\") == \"0 6\"\n",
        "num_ids_2": 35,
        "num_ids_4": 75
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\n",
        "num_ids_2": 70,
        "num_ids_4": 70
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"INCORRECT\"\n\"\"\"\nimport math\n",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\nassert solution('8\\n5 6\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\nassert solution('8\\n6 7\\n2 1\\n0 7\\n6 2\\n1 3\\n0 6\\n3 4\\n5 4') == 'CORRECT'\n\"\"\"\n\nimport math\n",
        "num_ids_2": 66,
        "num_ids_4": 109
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n') == 'CORRECT'\n\"\"\"\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4''') == 'CORRECT'\n\nassert solution('''4\n2 3\n1 0\n0 2\n3 1''') == 'CORRECT'\n\nassert solution('''8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4''') == 'CORRECT'\n\nassert solution('''8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4''') == 'CORRECT'\n\nassert solution('''8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4''') == 'CORRECT'",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\n\"\"\"",
        "num_ids_2": 70,
        "num_ids_4": 70
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4''') == 'CORRECT'\n\nassert solution('''4\n2 3\n1 0\n0 2\n3 1''') == 'CORRECT'\n\nassert solution('''4\n1 3\n2 0\n0 2\n3 1''') == 'INCORRECT'\n\nassert solution('''5\n2 3\n1 0\n0 2\n3 1\n3 4''') == 'INCORRECT'\n\nassert solution('''6\n4 3\n1 0\n0 2\n3 1\n3 4\n5 2\n3 5\n1 4''') == 'CORRECT'",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\nassert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\n\"\"\"\n\n\"\"\"\nN = int(stdin.readline().rstrip())\n\nfor _ in range(N):\n    x, y = map(int, stdin.readline().rstrip().split())\n    if x == 0 or y == 0:\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\"\"\"\n\nN = int(input())\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    if x == 0 or y == 0:\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n",
        "num_ids_2": 70,
        "num_ids_4": 70
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\n\n-----Notes-----\nIn the eight queens problem, queens have to be placed on an 8x8 chessboard such that no two queens attack each other. This means that in any given solution there will be no two queens that share the same row, column, or diagonal.\n\nYou can visualize this solution using a chessboard where black squares are occupied and white squares are empty.\n\"\"\"\nimport sys\nfrom itertools import combinations\n",
        "num_ids_2": 70,
        "num_ids_4": 70
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\nassert solution('8\\n0 1\\n1 6\\n2 2\\n3 5\\n4 3\\n5 0\\n6 4\\n7 7') == 'CORRECT'\nassert solution('8\\n1 4\\n6 2\\n7 1\\n3 5\\n0 6\\n4 2\\n7 3\\n5 3\\n1 5\\n2 2\\n6 6\\n4 5') == 'CORRECT'\n\n'''\n",
        "num_ids_2": 70,
        "num_ids_4": 129
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '1 2'\n'''",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == '1 1 1'\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == '1 2 3 1 11'\n\nimport math\nimport sys\nfrom typing import List, Dict, Set, Optional, Any\n\nMatrix = List[List[int]]",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1 1 1\\n1 1 1 1\\n0 1 1 1\\n1 0 1 1\") == \"1 1 1\"\nassert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"",
        "num_ids_2": 63,
        "num_ids_4": 112
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n0 1 1\n1 0 1\n1 1 0''') == '1 1 1'\nassert solution('''5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0''') == '1 2 3 1 11'\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n0 1 1\\n1 0 1\\n1 1 0') == '1 1 1'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 11\"\n\n------\n\nfor i in range(int(stdin.readline().strip())):\n  l = [int(x) for x in stdin.readline().strip().split()]\n  l = [l[i]-l[i+1] for i in range(len(l)-1)]\n  print(' '.join([str(x) for x in l]))\n",
        "num_ids_2": 75,
        "num_ids_4": 75
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\\n\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\\n\") == \"1 2 3 1 11\"\n\"\"\"\n\nn = int(input())\nmatrix = [[0 for i in range(n)] for j in range(n)]\nfor i in range(n):\n    l = list(map(int, input().split()))\n    for j in range(n):\n        matrix[i][j] = l[j]\n\nfor i in range(n):\n    for j in range(n):\n        if i!= j:\n            print(matrix[i][j] & matrix[i][j], end=\" \")\n    print()\n",
        "num_ids_2": 80,
        "num_ids_4": 80
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\nassert solution('21 9') == 'Wednesday'\nassert solution('15 10') == 'Sunday'\n",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('1 2') == 'Tuesday'\nassert solution('3 1') == 'Saturday'\nassert solution('4 2') == 'Friday'\nassert solution('12 4') == 'Saturday'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"17 1\") == \"Saturday\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"17 1\") == \"Saturday\"\n\"\"\"\n\nimport datetime\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\u20181 1\u2019) == \u2018Thursday\u2019\nassert solution(\u201817 1\u2019) == \u2018Saturday\u2019\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('4 12') == 'Sunday'\nassert solution('8 5') == 'Saturday'\nassert solution('22 2') == 'Monday'\nassert solution('6 1') == 'Sunday'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\nassert solution('1 1') == 'Thursday'",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"12 1\") == \"Saturday\"\nassert solution(\"31 12\") == \"Sunday\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 11\") == \"Sunday\"\n\"\"\"\n\nimport datetime",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\\n\"\nassert solution(\"100\\n500\\n12\\n\") == \"129\\n480\\n\"",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"1\") == \"1\"\n\"\"\"\n\nL = int(input())\nD = int(input())\nX = int(input())\n\n\nfor i in range(L, D + 1):\n    s = str(i)\n    if sum(map(int, s)) == X:\n        print(i)\n        break\n\nfor i in range(D, L - 1, -1):\n    s = str(i)\n    if sum(map(int, s)) == X:\n        print(i)\n        break\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == '4\\n40'\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1) == 4\nassert solution(100) == 4\nassert solution(1) == 4\nassert solution(100) == 4\nassert solution(4) == 4\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40'\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40'\nassert solution('100\\n500\\n12\\n') == '129\\n480'",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\"\nassert solution(\"100\\n500\\n12\\n\") == \"129\\n480\"\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\\n\"\nprint('Hooray!')\n\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100\\n500\\n12\") == \"129\\n480\"\nprint(solution(\"100\\n500\\n12\"))\n\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == '4\\n40'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == '6.0\\n3'\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == '4.0\\n3'\n\n\"\"\"\n\nimport math",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4') == '6.0\\n3'\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\") == \"4.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"6.0\\n3\"\n",
        "num_ids_2": 70,
        "num_ids_4": 70
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == '6.0\\n3'\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"6.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"6.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"6.0\\n3\"\n\"\"\"\n\nimport sys\n\nfrom typing import List, Tuple\n",
        "num_ids_2": 86,
        "num_ids_4": 129
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"\n\"\"\"\n\n\nimport math",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4') == '4.0\\n3'\nassert solution('1 1\\n5 1\\n3 3\\n4') == '6.0\\n3'\nassert solution('1 1\\n5 1\\n3 3\\n4') == '6.0\\n3'\n",
        "num_ids_2": 70,
        "num_ids_4": 97
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '4.0\\n3'\n\n\"\"\"\n\nimport math",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"\n\n\"\"\"",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4') == '4.0\\n3'\nassert solution('3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3') == '6.0\\n3'\n\nimport sys; input = sys.stdin.readline; assert(len(input()) == len(input().rstrip())); import math; input = input().split; print(math.sqrt(((int(input()[0]) - int(input()[2])) ** 2) + ((int(input()[1]) - int(input()[3])) ** 2)) / 2); print(len(set(input()[1:])))\n",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == 2\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\"\"\"\n\nn = int(stdin.readline())\nm = 0\nwhile True:\n    m += 1\n    if m * n % 2 == 1 and not (m ** 2) % n == 0:\n        break\nprint(m)\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\"\"\"\n\n\"\"\"\n3 -> n = 30, m = 7\n\nn * m = 210\n-> 210 % m = 0 -> m is a factor of n\n\nn * m < 210 -> m < n\n-> m < 10\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == 2\n\"\"\"\n\nfrom math import sqrt\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '2'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1') == '1\\nHE GOT AWAY!'",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1 2 4\"\n\"\"\"\n\nimport re",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == '1\\nHE GOT AWAY!'\nprint('Test 1: OK')\n\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == 'HE GOT AWAY!'\nprint('Test 2: OK')\n\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nKRIJUMCAR1\\nN-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == '1\\nHE GOT AWAY!'\nprint('Test 3: OK')\n\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nKRIJUMCAR1\\nN-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == 'HE GOT AWAY!'\nprint('Test 4: OK')\n\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nKRIJUMCAR1\\nN-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == 'HE GOT AWAY!'\nprint('Test 5: OK')\n\"\"\"\n\nimport sys",
        "num_ids_2": 95,
        "num_ids_4": 244
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\nprint(solution(input()))\n'''",
        "num_ids_2": 89,
        "num_ids_4": 89
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"N-FBI1 9A-USKOK I-NTERPOL G-MI6 RF-KGB1\") == '1'\nassert solution(\"N321-CIA F3-B12I F-BI-12 OVO-JE-CIA KRIJUMCAR1\") == 'HE GOT AWAY!'",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1') == '1\\n'\nassert solution('N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1') == 'HE GOT AWAY!\\n'\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 94,
        "num_ids_4": 94
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\\n') == '1\\n'\n\"\"\"",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n",
        "num_ids_2": 89,
        "num_ids_4": 89
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n\n\"\"\"",
        "num_ids_2": 89,
        "num_ids_4": 89
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('6, 8, 5\\n') == '12.0'\n\nprint('Success')",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n3 3 3\\n4 5 4\") == \"6.843530573929037\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 4\\n4 4 5\") == \"8.0\"\n\n\"\"\"\n\n\nimport math",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n3 3 3\\n4 5 4') == '6.843530573929037'\nassert solution('2\\n3 3 3\\n4 5 5') == '8.0000'\nassert solution('2\\n3 3 3\\n3 5 4') == '6.843530573929037'\nassert solution('2\\n3 3 3\\n2 5 5') == '6.843530573929037'\nassert solution('2\\n3 3 3\\n3 1 1') == '6.843530573929037'\n",
        "num_ids_2": 50,
        "num_ids_4": 106
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n",
        "num_ids_2": 1648,
        "num_ids_4": 1648
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n3 3 3\\n4 5 4') == '6.843530573929037'\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3 3 3\\n4 5 4\") == \"8.0\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 3\\n4 5 4\") == \"8.0\"\nassert solution(\"2\\n3 3 3\\n4 5 4\") == \"6.843530573929037\"\n",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 2\") == \"6.843530573929037\"\nprint(\"Test passed\")",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3 3 3\\n4 5 4\") == \"6.843530573929037\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(24) == 24\nassert solution(25) == 27\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\nassert solution(\"156\") == \"157\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('234') == '257'\nassert solution('1000000') == '100000000'\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 40
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(24) == 24\nassert solution(25) == 27\nassert solution(24) == 24\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1+9+8+4\") == '7'\nassert solution(\"1+9+8+4\") == '7'\nassert solution(\"1+9+8+4\") == '7'\nassert solution(\"1+9+8+4\") == '7'\nassert solution(\"1+9+8+4\") == '7'\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4+9+9+9+4\") == \"188\"\nassert solution(\"1+9+8+4+9+9+9+4+9\") == \"194\"\nassert solution(\"1+9+8+4+9+9+9+4+9+4+9+4+9\") == \"188\"\nassert solution(\"1+9+8+4+9+9+9+4+9+4+9+4+9+4+9+9\") == \"178\"\n",
        "num_ids_2": 40,
        "num_ids_4": 100
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\n\n-----------------------------\n\nVery similar to problem 868, but this one has a different method.\n\nThe idea is to solve for the number of distinct terms by summing up the number of terms starting from the last index. For example, if the expression is \"1+2+3+4+5+6+7+8+9\", the number of distinct terms is the sum of all terms starting from the last term: 1+2+3+4+5+6+7+8+9+1 = 15.\n\nThe second term is not distinct, so the number of distinct terms is 13.\n\nThe third term is distinct, so the number of distinct terms is 14.\n\nAs the expression gets longer, the number of distinct terms gradually increases.\n\n-----------------------------\n\nSolution:\nIn this solution, the last term of the expression is the term whose solution we want.\n\nSo we simply find the number of terms starting from the last term, and then find the number of distinct terms.\n\n-----------------------------\n\nInput:\n3+5+4+7+9+1\n\nOutput:\n13\n\n-----------------------------\n\nInput:\n7+9+5+8+2+5+2\n\nOutput:\n17\n\n-----------------------------\n\nInput:\n1+1+2+3+5+8+7+9+5+8+2+5+2+1\n\nOutput:\n31\n\n-----------------------------\n\nInput:\n1+9+8+4+1+9+8+4\n\nOutput:\n15\n\n\"\"\"\nimport unittest\nimport os\nimport sys\n\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        with open(os.path.join(sys.path[0], \"input.txt\")) as f:\n            stdin = f.read().rstrip()\n            with open(os.path.join(sys.path[0], \"output.txt\")) as f:\n                expected = f.read().rstrip()\n            result = solution(stdin)\n            self.assertEqual(result, expected)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1+9+8+4') == 7\nassert solution('1+2+3+4+5+6+7+8+9') == 188\n\n\"\"\"\n\nfrom math import gcd\nfrom fractions import Fraction\nfrom typing import Dict, List, Tuple",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+9+8+9') == '19'\nassert solution('1+9+8+9+9') == '22'\nassert solution('1+9+8+9+9+9') == '31'\nassert solution('1+9+8+9+9+9+9') == '38'\n",
        "num_ids_2": 32,
        "num_ids_4": 70
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1+2+3+4+5+6+7+8+9') == '188'\nassert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4+5+6+7+8+9') == '188'\nassert solution('1+9+8+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18') == '188'\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4+7+9+8+4+7\") == \"188\"\n\n-----Constraints-----\nThe input is guaranteed to contain at least one plus symbol.\nThe maximum number of digits in the input is 18.\n\n\"\"\"\n\nimport unittest\nfrom collections import deque\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_solution(self):\n        self.assertEqual(solution(\"1+9+8+4\"), \"7\")\n        self.assertEqual(solution(\"1+9+8+4+7+9+8+4+7\"), \"188\")\n        self.assertEqual(solution(\"1+9+8+4+7+9+8+4+7+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\nprint(solution(stdin))\n\n-----Problem-----\nGiven a sequence of alternating integers and plus symbols, your task is to determine the number of distinct integers to which the expression can evaluate.\n\n-----Solution-----\nYou can use dynamic programming to solve this problem. You have two possible outcomes: either the current plus symbol is arithmetic addition, in which case the expression can evaluate to any number of different integers from 0 up to the sum of the two numbers, or the current plus symbol is string concatenation, in which case the expression can evaluate to only one distinct integer.\n\nIn order to determine whether the current plus symbol is arithmetic addition or string concatenation, we can just look at the two numbers at the beginning of the expression, and if the first one is larger than the second one, then the plus symbol is string concatenation. Otherwise, it is arithmetic addition.\n\nTo determine whether the expression can be evaluated to only one distinct integer, we can use the following observations:\n- If the expression evaluates to a number larger than 1, it is always arithmetic addition.\n- If the expression evaluates to a number equal to 1, it is always string concatenation.\n- If the expression evaluates to a number smaller than 1, then it must be string concatenation, since we can only concatenate strings.\n\nSo, for each position p in the expression, if p is a plus symbol, then either the expression evaluates to one number larger than 1 (arithmetic addition), or the expression evaluates to one number equal to 1 (string concatenation).\n\nTherefore, if we know the number of distinct numbers the expression evaluates to larger than 1, and if we know the number of distinct numbers the expression evaluates to equal to 1, then we can compute the number of distinct numbers the expression evaluates to by adding the two numbers.\n\nWe know that the expression evaluates to one number larger than 1 by the fact that we know that arithmetic addition is the only possible outcome for larger integers.\n\nFurthermore, we know that the expression evaluates to one number equal to 1 by the fact that we know that string concatenation is the only possible outcome for 1.\n\nSo, for each position p in the expression, if p is a plus symbol, then the expression evaluates to one number larger than 1, so we can add 1 to the number of distinct numbers the expression evaluates to larger than 1.\n\nFor each position p in the expression, if p is not a plus symbol, then the expression evaluates to one number equal to 1, so we can add 1 to the number of distinct numbers the expression evaluates to equal to 1.\n\nTo determine the number of distinct numbers the expression evaluates to, we can create two arrays, one of size 1 and one of size 2. We will initialize the first array with one and the second array with two. For each position p in the expression, we can either add one to the first array, or add two to the second array, or do nothing.\n\nThe number of distinct integers the expression evaluates to is equal to the sum of the numbers in the first array, plus the sum of the numbers in the second array.\n\nTo initialize the first array, we can simply set it to the number of distinct integers the expression evaluated to equal to 1.\n\nTo initialize the second array, we can simply set it to the number of distinct integers the expression evaluated to larger than 1.\n\nThen, for each position p in the expression, if p is a plus symbol, then we can add one to the first array and one to the second array.\n\nThis means that at each position p in the expression, the number of distinct integers the expression evaluates to is equal to the number of distinct integers the expression evaluated to larger than 1, plus the number of distinct integers the expression evaluated to equal to 1.\n\nSo, for each position p in the expression, if p is not a plus symbol, then we can add one to the first array and one to the second array.\n\nNow, for each position p in the expression, if p is a plus symbol, then the expression evaluates to one number larger than 1, so we can add one to the number of distinct numbers the expression evaluates to larger than 1.\n\nFor each position p in the expression, if p is not a plus symbol, then the expression evaluates to one number equal to 1, so we can add one to the number of distinct numbers the expression evaluates to equal to 1.\n\nTherefore, the number of distinct numbers the expression evaluates to is equal to the number of distinct integers the expression evaluated to larger than 1, plus the number of distinct integers the expression evaluated to equal to 1.",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 5 2') == '2 5'\nassert solution('2 2 -4 5') == '5 -2 4'\n\n---------------------\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"1 4 2\") == \"2 4\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"4 -2 -4 5\") == \"5 -2 4\"\nassert solution(\"3 0 -5 -1\") == \"0 -5 4\"\n",
        "num_ids_2": 26,
        "num_ids_4": 56
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"2 3\"\nassert solution(\"2 3\") == \"3 0\"\nassert solution(\"1 1\") == \"0 1\"\nassert solution(\"1 2 3\") == \"2 3\"\nassert solution(\"2 3\") == \"3 0\"\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\nassert solution(\"1 1 1\") == \"1 2 1\"\nassert solution(\"2 0 2\") == \"0 2 2\"\nassert solution(\"1 2 1\") == \"1 2 1\"\n",
        "num_ids_2": 30,
        "num_ids_4": 58
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5 2\\n\") == \"2 5\"\nassert solution(\"2 2 -4 5\\n\") == \"5 -2 4\"\nassert solution(\"3 6 -8 3\\n\") == \"5 0 12\"\n\"\"\"\nimport sys",
        "num_ids_2": 34,
        "num_ids_4": 52
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 5 2') == '2 5'\nassert solution('2 2 -4 5') == '5 -2 4'\nassert solution('2 2 -4 -5') == '2 -4 -2'\n",
        "num_ids_2": 30,
        "num_ids_4": 49
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == '2 3'\n\"\"\"\n\nn = input()\nn = n.split()\nn = list(map(int, n))\nc = n[0]\nfor i in range(1, len(n)):\n    c += n[i]\n    c *= n[i-1]\nprint(c)\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == \"2 2 2 1 1\"\n'''\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n''') == '''\n'''\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\\n\") == \"2 2 2 1 1\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n2 1 2 1 2\\n') == '2 2 2 1 1'\nassert solution('9 3\\n1 3 3 3 2 2 2 1 1\\n') == '1 1 1 3 3 3 2 2 2'\n\nassert solution('4 4\\n2 2 2 2\\n') == '2 2 2 2'\nassert solution('4 4\\n1 1 1 1\\n') == '1 1 1 1'\n\nassert solution('5 2\\n1 1 1 1 1\\n') == '1 1 1 1 1'\n",
        "num_ids_2": 56,
        "num_ids_4": 100
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 2 1 2\\n\") == \"2 2 2 1 1\"\n\nassert solution(\"1 3 3 3 2 2 2 1 1\\n\") == \"1 1 1 3 3 3 2 2 2\"\n\nassert solution(\"1 2 2 1 2 1 2 1\\n\") == \"1 1 2 2 1 2 1 2\"\n",
        "num_ids_2": 48,
        "num_ids_4": 74
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nn, c = map(int, stdin.readline().strip().split(' '))\nlst = list(map(int, stdin.readline().strip().split(' ')))",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\\n\") == \"2 2 2 1 1\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\\n\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\\n\") == \"1 1 1 3 3 3 2 2 2\"\n\n'''\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('38 24') == '875'\nassert solution('1 100') == '100'\nassert solution('2 22') == '0'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(b'6 19\\n') == b'120'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a1) == e1\nassert solution(a2) == e2\nassert solution(a3) == e3\n\nprint('All tests passed.')\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"38 24\") == \"875\"\nassert solution(\"1 100\") == \"100\"\n\"\"\"\n\nn, i = map(int, input().split())\nprint(n - 1 + i // 2)\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('38 24') == '875'\nprint('Test passed')\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 100') == '100'\nassert solution('10 500') == '300'\n\"\"\"\n\nA, I = input().split()\nA, I = int(A), int(I)\n\nprint(A + I - 1)",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"38 24\") == \"875\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == test_output_1\n\nprint(solution(input()))\n\"\"\"\n\n\ntest_input_1 = '38 24'\ntest_output_1 = '875'\n\ntest_input_2 = '1 100'\ntest_output_2 = '100'",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"38 24\") == \"875\"\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''38 24''') == '875'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"734 893\") == \"437\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n\"\"\"\nimport sys\n\nfor line in sys.stdin:\n    a, b = map(int, line.split())\n    a, b = map(str, (a, b))\n    a = a[::-1]\n    b = b[::-1]\n    if a > b:\n        print(a)\n    else:\n        print(b)",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n\"\"\"\n\ninput1 = input()\ninput2 = input()\n\nx = ''.join(reversed(input1))\ny = ''.join(reversed(input2))\n\nprint(''.join(reversed(max(x, y))))",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\n\"\"\"\n\nimport sys\nimport string\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'impossible'\nassert solution('1 1') == 'impossible'\nassert solution('2 4') == 'impossible'\nassert solution('3 10') == 'cntc'\nassert solution('3 25') == 'impossible'\n",
        "num_ids_2": 23,
        "num_ids_4": 48
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\nassert solution('11 172') == 'impossible'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\nassert solution('7 101') == 'impossible'\nassert solution('1 101') == 'impossible'\nassert solution('2 101') == 'impossible'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\nassert solution('4 119') == 'impossible'\nassert solution('5 109') == 'impossible'\nassert solution('8 104') == 'impossible'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\nassert solution(\"10 100\") == \"impossible\"\nassert solution(\"7 8\") == \"impossible\"\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'impossible'\nassert solution('11 131') == 'programming'",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n\"\"\"\n\nimport sys\n\nl, w = list(map(int, sys.stdin.readline().split()))",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 'X'\") == \".X\\n--\"\nassert solution(\"3 12 'A'\") == \"ABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\"\n\"\"\"\nimport re",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 12 'A'\") == \"BBABABABABAB\"\nassert solution(\"2 2 'X'\") == \".X\"\nassert solution(\"1 1 'X'\") == \"X\"\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 48
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 'X'\") == 'XX\\nX'\nassert solution(\"3 12 'A'\") == 'ABABABABABAC\\nBABABABABABB\\nABABABABABAB'\n\n\"\"\"\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input_string) == output_string\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == output()\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 'X'\\nX^\\n--\\n\\n.X\\n--\") == \".^\\n--\\n\\n.^\\n--\"\nassert solution(\"3 12 'A'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\\nBABABABABABA\\nBBABABABABAB\\nBABABABABABA\") == \\\n    \"BBABABABABAC\\nBBBABABABABA\\nBBABABABABAB\\n\\nBBBABABABABA\\nBBBABABABABA\"\n",
        "num_ids_2": 107,
        "num_ids_4": 107
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2 \\'X\\'\\nX^\\n--\\n\\'.X\\n--') == '\\'.^\\n--'\nassert solution('3 12 \\'A\\'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\\nBABABABABABB\\nBBABABABABAB\\nABABABABABAB') == '\\nBBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n'\n\"\"\"",
        "num_ids_2": 129,
        "num_ids_4": 129
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 'X'\\nX^\\n--\\n\\n.X\\n--\") == \".X\\n--\"\nassert solution(\"3 12 'A'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\\nBABABABABABA\\nBBABABABABAB\\nBABABABABABA\") == \"BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n\\nBBABABABABAB\\nBBBABABABABB\\nBABABABABABA\"\n\"\"\"",
        "num_ids_2": 150,
        "num_ids_4": 150
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2 \\'X\\nX^\\n--\\n\\n.X\\n--\\n') == '.X\\n--\\n'\nassert solution('3 12 \\'A\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\\nBABABABABABA\\nBBABABABABAB\\nBABABABABABA\\n') == 'BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n\\nBBABABABABAB\\nBBBABABABABB\\nBBABABABABAB'\n",
        "num_ids_2": 155,
        "num_ids_4": 155
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(output())\n\n------Solution------\n>>>\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\"",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 115,
        "num_ids_4": 115
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n\n\"\"\"",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 4 14\") == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0'\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\nprint(solution('2 4 4 14'))\n\n\"\"\"",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\"\nassert solution(\"100 80 60 240\") == \"0 0 4\"\nassert solution(\"2 2 2 0\") == \"impossible\"\nassert solution(\"100 200 200 200\") == \"100 200 0\"\nassert solution(\"1 2 3 4\") == \"impossible\"\n\n\"\"\"\n\nimport copy",
        "num_ids_2": 30,
        "num_ids_4": 59
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n",
        "num_ids_2": 115,
        "num_ids_4": 115
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0'\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0'\nassert solution('4 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0'\nassert solution('20 15 6 105') == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\n",
        "num_ids_2": 105,
        "num_ids_4": 215
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0'\n\"\"\"",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n3 2 0\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n3 2 0\\n5 0 1\\n5 1 0\\n7 0 0\"\n\n\"\"\"\n\nimport math",
        "num_ids_2": 120,
        "num_ids_4": 180
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3''') == '''1\n2\n3'''\nassert solution('''9''') == '''1\n2\n3\n4\n5\n6\n7\n8\n9'''\nassert solution('''9\n1\n2\n3\n4\n5\n6\n7\n8\n9''') == '''1\n2\n3\n4\n5\n6\n7\n8\n9'''\nassert solution('''9\n1\n2\n3\n4\n5\n6\n7\n8\n9''') == '''1\n2\n3\n4\n5\n6\n7\n8\n9'''\nassert solution('''9\n1\n2\n3\n4\n5\n6\n7\n8\n9''') == '''1\n2\n3\n4\n5\n6\n7\n8\n9'''\n",
        "num_ids_2": 26,
        "num_ids_4": 40
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'good job', 'Empty input'\nassert solution('1\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n') == 'good job', '1 2 3 4 5 7 8 9 10 11 13'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n13\\n') == '1 3 5 6', '1 2 3 4 5 6 7 8 9 10 11 13'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n') == '1 3 5 7 9 11 12 13', '1 2 3 4 5 6 7 8 9 10 11 12 13'\n\nprint(solution(stdin.read()))",
        "num_ids_2": 68,
        "num_ids_4": 200
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n5\n2\n4\n1\n3\n''') == 'good job'\nassert solution('''\n9\n2\n4\n5\n7\n8\n9\n10\n11\n13\n''') == '1\\n3\\n6\\n12\\n'''\n\nassert solution('''\n1\n2\n3\n4\n5\n''') == '6\\n7\\n8\\n9\\n10\\n'''\n",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == 'good job'\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == '1\\n3\\n6\\n12\\n'\n\n'''",
        "num_ids_2": 90,
        "num_ids_4": 90
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1\\n2\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n') == 'good job'\nassert solution('4\\n1\\n2\\n6\\n7\\n8\\n9\\n10\\n11\\n') == '1\\n3\\n5\\n12'\nassert solution('4\\n1\\n2\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n') == 'good job'\nassert solution('4\\n1\\n2\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n') == '1\\n3\\n5\\n12'\nassert solution('4\\n1\\n2\\n6\\n7\\n8\\n9\\n10\\n11\\n') == '1\\n3\\n5\\n12'\n",
        "num_ids_2": 88,
        "num_ids_4": 182
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2\\n3\\n4\\n5\") == 'good job'\nassert solution(\"3\\n1\\n2\\n3\\n4\") == '1\\n6'\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == \"good job\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == \"1 3 6 12\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == \"1 3 6 12\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == \"1 3 6 12\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == \"1 3 6 12\"\n",
        "num_ids_2": 82,
        "num_ids_4": 166
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2\\n6\\n1\\n3\\n5\\n7') == 'good job'\nassert solution('7\\n4\\n1\\n2\\n3\\n5\\n6\\n7') == '1 3 6'\nassert solution('9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13') == '1 3 6 12'\n\"\"\"\nimport re\n\ntest_num = int(input())\n\nfor _ in range(test_num):\n    test_case = input()\n    test_case = re.sub(r'\\d+', '', test_case)\n    print(test_case)\n",
        "num_ids_2": 62,
        "num_ids_4": 102
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n\nprint(solution(data.pop(0)))\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'good job'\nassert solution('1') == '1'\nassert solution('1\\n2') == '1\\n3'\nassert solution('1\\n2\\n3') == 'good job'\nassert solution('1\\n2\\n3\\n4') == '1\\n3\\n6'\n",
        "num_ids_2": 21,
        "num_ids_4": 54
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\nimport math",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nfrom math import sqrt\n\nn, p, s, v = [int(x) for x in input().split()]\n\nprint(s / (1 + 1 / sqrt(n)) / v)\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nfrom math import log2, sqrt\nfrom fractions import Fraction\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 8.9 40075000 272.1') == '157079.04857106 15.598261092309'\n\"\"\"\n\nimport math",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\n-----Test 2-----\nSample Input:\n3 1 2.5 30\nSample Output:\n37.6376041",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nfrom decimal import Decimal\nfrom math import log\n\nn, p, s, v = map(Decimal, input().split())\n\nt = n * log(n, 2) / (p * 10**9)\n\nc = (v * t).sqrt()\n\nprint(t, c)\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == '157079.04857106 15.598261092309'\n\nimport math\n\nn, p, s, v = [float(i) for i in stdin.split(' ')]",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nimport math\n\nn, p, s, v = [float(i) for i in input().split()]",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 0\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"0\"\n\n-----Test Input-----\n0\n1\n5\n10\n20\nSample Output:\n0\n1\n4\n10\n50\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('1') == 0\nassert solution('0') == 0\nassert solution('31') == 3\nassert solution('2') == 0\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == '0'\nassert solution('5') == '8'\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\n\"\"\"\n\n\"\"\"\nM = n * (n-1) // 2\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '4'\nassert solution('2') == '2'\nassert solution('1') == '1'\nassert solution('3') == '0'\nassert solution('4') == '6'\n\"\"\"\n\nn = int(input())",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == 0\nassert solution('3') == 4\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\"\"\"\n\nn = int(input())\nanswers = []\nfor i in range(n):\n    answers.append(input())\nsum = 0\nfor i in range(n):\n    if answers[i] == answers[0]:\n        sum += 1\nprint(sum)\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nA\\nB\\nA\\n\") == 3\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A\\nA\\nA\\nA\") == 3\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == '3'\n\"\"\"\nimport sys\n\ns = sys.stdin.readline()\ns = list(map(str, s.split('\\n')[:-1]))\n\ncount = 0\nfor i in s:\n    if i == 'A':\n        count += 1\n\nprint(count)\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == 3\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == '3'\nassert solution('4\\nA\\nA\\nC\\nC') == '1'\nassert solution('4\\nA\\nB\\nB\\nB') == '2'\n\nassert solution('4\\nA\\nA\\nC\\nC') == '1'\nassert solution('4\\nA\\nA\\nC\\nC') == '1'\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin_lines[0]) == stdout_lines[0]\nprint(f'STDOUT: {stdout_lines[0]}')\n\nassert solution(stdin_lines[1]) == stdout_lines[1]\nprint(f'STDOUT: {stdout_lines[1]}')\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A\\nA\\nA\\nA\") == \"3\"\nassert solution(\"A\\nB\\nA\\nA\") == \"0\"\nassert solution(\"A\\nB\\nA\\nB\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'4'\n) ==\n    '3'\nassert solution(\n'A'\n) ==\n    '0'\nassert solution(\n'B'\n) ==\n    '1'\nassert solution(\n'C'\n) ==\n    '2'\nassert solution(\n'D'\n) ==\n    '3'\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nA\\nB\\nC\\nD\") == \"3\"\nassert solution(\"5\\nA\\nB\\nC\\nD\") == \"4\"\nassert solution(\"6\\nA\\nB\\nC\\nD\") == \"5\"\nassert solution(\"7\\nA\\nB\\nC\\nD\") == \"6\"\n\"\"\"\n\nn = int(input())\n\ncount = 0\nfor i in range(1, n + 1):\n    if input() == 'A':\n        count += 1\nprint(count)",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 1 2\\n.x.\\nx.x\\n.x.') == '..xx..\\nxx..xx\\n..xx..'\nprint('Test pass.')",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\n\n---\n\nSample Input:\n6 5 4 2 5\n.x...x.\nx.x.x.x\n.x...x.\n.x..xx..\n.x..x.x.\nSample Output:\n.x...x.\nx.x.x.x\n.x...x.\n.x..xx..\n.x..x.x.\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3 1 2\\n.x.\\nx.x\\n.x.') == '..xx..\\nxx..xx\\n..xx..'\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(r\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(r'3 3 1 2\\n.x.\\nx.x\\n.x.') == r'.xx.\\nxx.x\\n.xx.'\nassert solution(r'3 3 1 2\\n..x.\\nxx.x\\n.x.') == r'..xx.\\nxx..x\\n..xx.'\nassert solution(r'3 3 1 2\\n...x\\nx.x\\n..x.') == r'...xx\\nxx.x\\n..xx.'\nassert solution(r'3 3 1 2\\n....x\\nx.x\\n.....') == r'....xx\\nx.x\\n....xx.'\nassert solution(r'3 3 1 2\\n.....x\\nx.x\\n......') == r'.....xx\\nx.x\\n.....xx.'\n",
        "num_ids_2": 83,
        "num_ids_4": 161
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5 3 2\\n.x.\\nx.x\\n.x.\\n..xx\\nxx.x\\n..xx\") == \"...xx..\\nxx..xx\\n...xx..\\n..xx..\\nxx.xx\\n..xx..\"\nassert solution(\"5 5 1 1\\n.x.\\nx.x\\n.x.\\n..xx\\nxx.x\\n..xx\") == \"...x..\\nx.xx\\n..x..\\nxx.xx\\n...x..\\n..xx..\"\n\n------\n\nIn the first line of the input, you are given an integer $N$, the number of tests. After that, $N$ lines describing the tests follow.\n\nOn each of the $N$ following lines, you are given two integers $R$ and $C$, the number of rows and columns respectively. After that, $R \\cdot C$ lines follow, each of them representing a single matrix, and every character is a single character of the English alphabet, digits or a period (\u2018.\u2019).\n\n------\n\nWrite 5 lines of code to test the correctness of solution:\nHaving solved the match issue, Mirko faced another challenging problem. His mom ordered him to read an article about the newest couples on the Croatian show-biz scene in the \u201cMoja Tajna\u201d magazine. The article is written in a very small font size which Mirko cannot read. Luckily, Mirko has a scanner in the closet which will enlarge the article for him.\n\nThe article is a matrix of characters with $R$ rows and $C$ columns. The characters are letters of the English alphabet, digits and the character \u2018.\u2019 (period). Mirko\u2019s scanner supports two parameters, $Z_ R$ and $Z_ C$. It substitutes each character it scans with a matrix of $Z_ R$ rows and $Z_ C$ columns, where all entries are equal to the scanned character.\n\nMirko realized his scanner\u2019s software no longer works so he needs your help.\n\n-----Input-----\nThe first row contains four integers, $R$, $C$, $Z_ R$ and $Z_ C$. $R$ and $C$ are between $1$ and $50$, while $Z_ R$ and $Z_ C$ are between $1$ and $5$.\n\nEach of the following $R$ rows contains $C$ characters each, representing the article from \u201cMoja Tajna\u201d.\n\n-----Output-----\nThe output should be a matrix of characters with $R \\cdot Z_ R$ rows and $C \\cdot Z_ C$ columns, the enlarged article.\n\n-----Examples-----\nSample Input:\n3 3 1 2\n.x.\nx.x\n.x.\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n...xx..\nSample Output:\n..xx..\nxx..xx\n",
        "num_ids_2": 134,
        "num_ids_4": 134
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\".x.x.x\") == \"xxxxxxxx\"\nassert solution(\"x.x.x\") == \"xxx.xxx\"\nassert solution(\"xxxxxxxx\") == \"xxxxxxxx\"\nassert solution(\"xxxxxxxxxxx\") == \"xxxxxxxx\"\nassert solution(\"xx.x.x\") == \"xx.xxx\"\n",
        "num_ids_2": 31,
        "num_ids_4": 52
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\nassert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..x..\\nxx.x\\n..x..\"\nassert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..x..\\nxx.x\\n..x..\"\nassert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..x..\\nxx.x\\n..x..\"\nassert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..x..\\nxx.x\\n..x..\"\n",
        "num_ids_2": 78,
        "num_ids_4": 156
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''1\nF 60 13 20''') == '14 20'\nassert solution('''2\nB 31 20 42''') == '0 1'\nassert solution('''3\nF 60 13 20\nB 31 20 42\nB 63 51 56\nB 58 23 42\nB 46 19 21\n''') == '24 22'\nassert solution('''4\nF 60 13 20\nF 59 12 20\nB 59 10 60\nF 61 10 20\n''') == '23 20'\nassert solution('''5\nF 60 13 20\nB 63 51 56\nB 59 23 42\nB 46 19 21\nF 61 10 20\nF 60 13 20\n''') == '24 22'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"B 23 5 30\") == \"3 55\"\n\"\"\"\n\nfrom dataclasses import dataclass\n\n@dataclass\nclass Clock:\n    direction: int\n    hours: int\n    minutes: int\n    seconds: int = 0\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"B 50 11 30\") == \"4 30\"\n\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n\nassert solution(\"B 60 13 20\") == \"11 21\"\nassert solution(\"F 60 13 10\") == \"14 11\"\n\nassert solution(\"B 60 13 30\") == \"11 34\"\nassert solution(\"F 60 13 50\") == \"14 37\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\nF60 13 20') == '14 20'\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == '14 20'\n\"\"\"\n\nimport os",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n\"\"\"\n\nimport unittest\nimport math\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nprint(solution(\"F 60 13 20\"))\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\nF\\n60\\n13\\n20\\n') == '14\\n20'\n'''\n\nimport sys\nimport math\n\nn = int(sys.stdin.readline())\nfor _ in range(n):\n    flag, val, hour, min = sys.stdin.readline().split()\n    hour = int(hour)\n    min = int(min)\n    if flag == 'F':\n        if hour < 12:\n            hour += 1\n        elif hour == 12:\n            hour = 0\n    elif flag == 'B':\n        if hour > 0:\n            hour -= 1\n        elif hour == 0:\n            hour = 12\n    if min > 0:\n        min = min - val\n    elif min < 0:\n        min = min + val\n        hour -= 1\n        if hour < 0:\n            hour = 23\n        if hour == 0:\n            hour = 12\n    print('%d %d' % (hour, min))",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('NOV 25') == 'nope'\nassert solution('JAN 1') == 'yup'\nassert solution('DEC 31') == 'yup'\nassert solution('NOV 32') == 'nope'\n",
        "num_ids_2": 26,
        "num_ids_4": 51
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('SEP 29') == 'nope'\nassert solution('NOV 30') == 'nope'\n\nprint(solution(input()))\n\nimport datetime\nfrom datetime import date",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"NOV 25\") == \"nope\"\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"OCT 32\") == \"nope\"\nassert solution(\"SEP 1\") == \"nope\"\nassert solution(\"SEP 13\") == \"nope\"\nassert solution(\"SEP 12\") == \"yup\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('OCT 32') == 'nope'\nassert solution('NOV 30') == 'nope'\nassert solution('NOV 31') == 'yup'\n\"\"\"\n\nimport datetime as dt",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('NOV 11') == 'nope'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('OCT 30') == 'nope'\nassert solution('NOV 30') == 'nope'\nassert solution('NOV 31') == 'yup'\nassert solution('NOV 32') == 'nope'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"NOV 25\") == \"nope\"\nassert solution(\"NOV 26\") == \"nope\"\nassert solution(\"NOV 27\") == \"yup\"\nassert solution(\"NOV 28\") == \"yup\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('OCT 32') == 'nope'\nassert solution('FEB 31') == 'nope'\nassert solution('DEC 25') == 'yup'\nassert solution('SEP 1') == 'nope'\n\"\"\"\n\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 51
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak') == '#.#.#.#\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#\\n#.#.#.#'\n",
        "num_ids_2": 79,
        "num_ids_4": 79
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n2 2 2 2\nhoni\noker\nnera\nirak\n\"\"\"\n) == \"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 2 2\\nhoni\\noker\\nnera\\nirak\") ==\\\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"\"\"#.#.#.#.\n.#.#.#.#\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\\n') == \"\"\"#.#.#.#.\n.#.#.#.#\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \\\n    \"#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#\\n\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"\"\"#.#.#.#.\n.#.#.#.#\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"\"\"#.#.#.#.\n.#.#.#.#\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2 2 2\\nhoni\\noker\\nnera\\nirak') == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.'\n",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 4\") == \"\"\"#.#.#.#\n.#.#.#.#\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4') == '+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n', 'Correctness check is ok'\nassert solution('Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4') == '+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n', 'Correctness check is ok'\nassert solution('Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4') == '+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n', 'Correctness check is",
        "num_ids_2": 950,
        "num_ids_4": 1423
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4') == 'Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6'\nassert solution('Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == 'White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4'\n\"\"\"\n\n\"\"\"\nQuestion:\n\nWrite a program that reads a chessboard description from the standard input, and prints the positions of the white king and black king.\n\n-----Input Description-----\nThe input will contain the description of the chessboard as specified in the problem statement.\n\n-----Output Description-----\nPrint the positions of the white king and black king on separate lines.\n\n-----Test Input-----\na2\nc3\nd3\nd2\ne3\nb2\nc2\nf3\ng2\nb1\nc1\nd1\ne1\ne2\ng2\nh1\nh2\na3\nb3\nc3\nc4\nd4\ne4\nf4\nf3\ng3\ng4\nh4\nh3\n\nSample Output:\n+---+---+---+---+---+---+---+---+\n|.r.|k.|.r.|.r.|.r.|.r.|.r.|.r.|\n+---+---+---+---+---+---+---+---+\n|.r.|.r.|.r.|.r.|.r.|.r.|.r.|.r.|\n+---+---+---+---+---+---+---+---+\n|.r.|.r.|.r.|.r.|.r.|.r.|.r.|.r.|\n+---+---+---+---+---+---+---+---+\n|.r.|.r.|.r.|.r.|.r.|.r.|.r.|.r.|\n+---+---+---+---+---+---+---+---+\n|.r.|.r.|.r.|.r.|.r.|.r.|.r.|.r.|\n+---+---+---+---+---+---+---+---+\n|.r.|.r.|.r.|.r.|.r.|.r.|.r.|.r.|\n+---+---+---+---+---+---+---+---+\n|.r.|.r.|.r.|.r.|.r.|.r.|.r.|.r.|\n+---+---+---+---+---+---+---+---+\n|.r.|.r.|.r.|.r.|.r.|.r.|.r.|.r.|\n+---+---+---+---+---+---+---+---+\n|.r.|.r.|.r.|.r.|.r.|.r.|.r.|.r.|\n+---+---+---+---+---+---+---+---+\n|.r.|.r.|.r.|.r.|.r.|.r.|.r.|.r.|\n+---+---+---+---+---+---+---+---+\n|.r.|.r.|.r.|.r.|.r.|.r.|.r.|.r.|\n+---+---+---+---+---+---+---+---+\n|.r.|.r.|.r.|.r.|.r.|.r.|.r.|.r.|\n+---+---+---+---+---+---+---+---+\n|.r.|.r.|.r.|.r.|.r.|.r.|.r.|.r.|\n+---+---+---+---+---+---+---+---+\n|.r.|.r.|.r.|.r.|.r.|.r.|.r.|.r.|\n+---+---+---+---+---+---+---+---+\n|.r.|.r.|.r.|.r.|.r.|.r.|.r.|.r.|\n+---+---+---+---+---+---+---+---+\n|.r.|.r.|.r.|.r.|.r.|.r.|.r.|.r.|\n+---+---+---+---+---+---+---+---+\n|.r.|.r.|.r.|.r.|.r.|.r.|.r.|.r.|\n+---+---+---+---+---+---+---+---+\n|.r.|.r.|.r.|.r.|.r.|.r.|.r.|.r.|\n+---+---+---+---+---+---+---+---+\n|.r.|.r.|.r.|.r.|.r.|.r.|.r.|.r.|\n+---+---+---+---+---+---+---+---+\n|.r.|.r.|.r.|.r.|.r.|.",
        "num_ids_2": 216,
        "num_ids_4": 216
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\n) == \"\"\"+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\"\n\nprint(solution(stdin))",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---",
        "num_ids_2": 1022,
        "num_ids_4": 1423
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\n",
        "num_ids_2": 509,
        "num_ids_4": 509
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \\\n\"\"\"+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\"\n\"\"\"\nIf you are getting the wrong output, please check your code against the example input and output. \nIf your output doesn't match the expected output then you can post your code to the Discussion forum for help.\n\"\"\"",
        "num_ids_2": 109,
        "num_ids_4": 109
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(''.join(stdin.split('\\n'))) == ''.join(stdout.split('\\n'))\n\"\"\"\n\n\nimport sys",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\"\n\"\"\"\n",
        "num_ids_2": 252,
        "num_ids_4": 252
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"White: Kd1,qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Kd8,qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n\"\"\"\n\nimport collections\n\nwhite = collections.deque([\n    'Kd', 'qd', 'Ra', 'Rh', 'Bc', 'Bf', 'Nb', 'a2', 'c2', 'd2', 'f2', 'g2', 'h2', 'a3', 'e4'\n])\n\nblack = collections.deque([\n    'Kd', 'qd', 'Ra', 'Rh', 'Bc', 'Ng', 'Nc', 'a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'h7', 'h6'\n])\n",
        "num_ids_2": 214,
        "num_ids_4": 214
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n    \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n    ) == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"White: Ka1,Qc1,Ka2,Qc2,Ra1,Rg1,Bc2,Bb1,Bh1,a2,a3,a4,a5,a6\"\n    \"Black: Kg7,Kc7,Rc6,Rb7,Qb7,Bg6,Qa7,Ka7,Qc7,Kd7,Ke7,Rh7,Rh8,Rh9,Rf8,Rg8,Bg7,Bg8,Bg9\"\n    ) == \"+---+---+---+---+---+---+---+---+\"\n\"\"\"\n    \\s = one space\n    . = any char (except \\n)\n    :: = 1 or more spaces\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s = 1 or more characters\n    :\\s =",
        "num_ids_2": 109,
        "num_ids_4": 109
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"0.9 0.1\") == \"Need more materials!\"\nassert solution(\"2.0 2.0\") == \"Need more materials!\"\nassert solution(\"0.0 5.0\") == \"Need more materials!\"\nassert solution(\"10.0 10.0\") == \"Need more materials!\"\n",
        "num_ids_2": 35,
        "num_ids_4": 69
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nprint(solution(\"1.000000 4.000000\"))\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1.0 4.0') == 'Diablo is happy!'\nassert solution('1.5 4.0') == 'Need more materials!'\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\n\"\"\"\n\na, n = map(float, stdin.split())",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"0.502400 5.234598\") == \"Need more materials!\"\n\n-----Solution-----\n'''",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\n\"\"\"\n\nimport os\nimport sys\n\nsys.stdin = open(\n    \"testdata/testcase2/testcase2_input.txt\", \"r\", encoding=\"utf-8\")\n\nA = float(input())\nN = float(input())",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"2.000000 4.000000\") == \"Need more materials!\"\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\". 1. 2.\") == \"Need more materials!\"\n\"\"\"\n\n\nfrom math import floor\n\nA, N = map(float, input().split())\nprint(\"Diablo is happy!\" if floor(N / A) >= 2 else \"Need more materials!\")\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"2.200000 6.50000\") == \"Need more materials!\"\nassert solution(\"1.000000 2.50000\") == \"Diablo is happy!\"\nassert solution(\"4.200000 6.50000\") == \"Need more materials!\"\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 73
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'use the stairs'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nprint(solution(\"10 1 10 2 1\"))\nprint(solution(\"1 1 1 1 1\"))\n\n------Solution------\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 1 10 2 1') == 'use the stairs'\nassert solution('10 4 2 5 1') == 'use the stairs'\nassert solution('10 10 2 1') == '11'\nassert solution('10 4 2 1') == '9'\nassert solution('10 4 2 1 2') == '13'\n",
        "num_ids_2": 32,
        "num_ids_4": 58
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 1 10 2 1\") == 6\nassert solution(\"20 1 20 2 1\") == \"use the stairs\"\nassert solution(\"100 10 100 50 1000 1001 10 1 1000 1\") == 10\nassert solution(\"1 10 100 1 10 1\") == \"use the stairs\"\n\nprint(\"All tests passed.\")",
        "num_ids_2": 28,
        "num_ids_4": 63
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(10,1,10,2,1) == 6\n\"\"\"\n\nf, s, g, u, d = (int(input()) for _ in range(5))",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"10 1 10 2 5\") == \"use the stairs\"\nassert solution(\"100 1 100 2 100 3 100 4 100 5 100 6 100 7 100 8 100 9 101\") == \"use the stairs\"\n\"\"\"\n\nimport sys\nfrom typing import List\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\n\n-----Explanation-----\nSince the elevator is at the first floor, you must press the UP button to go up one floor, which costs 1 push.\n\nOnce you reach the first floor, the elevator is still there at the first floor, so you cannot press the UP button again. Instead, you must press the DOWN button, which takes you down one floor and costs 1 push.\n\nYou have to press the UP button two more times to get to the goal floor, so the total cost is 3 pushes.\n\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"100 1 1000 2 1000\") == \"use the stairs\"\nassert solution(\"1 1 1 1 1\") == \"use the stairs\"\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 30,
        "num_ids_4": 46
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 1 10 2 1\") == \"use the stairs\"\nassert solution(\"10 10 10 10 10 10\") == \"use the stairs\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1\") == \"use the stairs\"\nassert solution(\"10 2 10 2 1\") == \"5\"\nassert solution(\"10 1 10 2 1\") == \"6\"\n\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 33,
        "num_ids_4": 68
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n500\\n120\\n75') == '128.8'\n\"\"\"\nimport math",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n500\\n120\\n75') == '128.8'\nassert solution('5\\n8\\n1\\n5\\n3\\n2') == '55.0'\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n123\\n4\") == \"12.0\"\nassert solution(\"3\\n100\\n200\\n300\") == \"160.0\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\\n1 2 4\") == \"8.0\"\nassert solution(\"6\\n2 3 4 5 6\\n1 2 4\") == \"16.833333333333333\"\nassert solution(\"6\\n2 3 4 5 6\\n2 3 4\") == \"17.4\"\nassert solution(\"6\\n3 3 3 3 3\\n2 2 2 2\") == \"15.0\"\nassert solution(\"6\\n1 1 1 1 1\\n1 1 1 1\") == \"13.0\"\n",
        "num_ids_2": 53,
        "num_ids_4": 102
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n500\\n120\\n75') == '128.8'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n120\\n500\\n500\\n500\") == \"128.8\\n89.0\"\nassert solution(\"3\\n500\\n120\\n75\") == \"128.8\\n89.0\"\n\"\"\"",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n\") == '2.0'\nassert solution(\"4\\n1\\n2\\n4\\n\") == '2.5'\nassert solution(\"3\\n2\\n3\\n\") == '3.0'\n\"\"\"\n\nn = int(input())\nscores = sorted([int(input()) for _ in range(n)])\n\nassert scores[0] == 1\nassert scores[-1] == 10000\n\navg_scores = []\nfor i in range(n):\n    avg_scores.append(sum([(5 ** i) * scores[j] for j in range(n - 1, i, -1)]) / 5 ** (i + 1))\n\nprint(sum(avg_scores) / len(avg_scores))\n",
        "num_ids_2": 46,
        "num_ids_4": 74
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3\n500\n120\n75\"\"\") == '128.8'\nassert solution(\"\"\"2\n200\n70\"\"\") == '68.8'\nassert solution(\"\"\"4\n1\n2\n4\n5\"\"\") == '13.7'\nassert solution(\"\"\"5\n1000\n200\n10\n20\n40\"\"\") == '14.8'\nassert solution(\"\"\"6\n1\n1\n2\n2\n3\n3\"\"\") == '7.8'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n500\n120\n75''') == '128.8'\n\"\"\"\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n500\n120\n75''') == '128.8\\n89.06666666666666'\nassert solution('''2\n200\n120''') == '96.0\\n96.0'\nassert solution('''4\n100\n100\n100\n100''') == '100.0\\n100.0'\nassert solution('''5\n100\n100\n100\n100\n100''') == '100.0\\n100.0'\nassert solution('''6\n100\n100\n100\n100\n100\n100''') == '100.0\\n100.0'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == 4\n\"\"\"\n\nimport sys",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 45 65 84 346\") == 4\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n\n-----Constraints-----\n1 <= n <= 365\n1 <= d_i <= 365\n\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 45 65 84 346') == '4'\n\"\"\"\n\nfrom datetime import datetime, timedelta\nfrom typing import List\nimport numpy as np\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 45 65 84 346') == '4'\nassert solution('13\\n1 45 65 84 346') == '10'\nassert solution('4\\n1 45 65 84') == '0'\nassert solution('3\\n1 45 65') == '-1'\nassert solution('0\\n1 45 65') == '-1'\n",
        "num_ids_2": 34,
        "num_ids_4": 66
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 45 65 84 346') == '4'\n\"\"\"\n\n\n\"\"\"\nWe use a simple greedy approach to solve this problem. At each point in time, we consider the sum of dirty push weights up to the point. If this sum is larger than or equal to 20, then we do not need to clean up (and we can stop). Otherwise, we need to clean up, and we search for the next max possible sum. This will be done in O(n) time.\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n-----Problem-----\n\n1. Read in the number of dirty pushes.\n\n2. Read in all of the dirty push times.\n\n3. Sort the pushes by the day they occur.\n\n4. Initialize the number of cleanups needed to zero.\n\n5. Iterate over the pushes from high to low.\n\n6. On the first day, if the current push was made after midnight, increment the number of cleanups needed.\n\n7. On the last day, if the current push was made before midnight, decrement the number of cleanups needed.\n\n8. If the number of cleanups needed is greater than zero, print the number of cleanups needed.\n\n-----Hints----\n\n1. You can sort an array in descending order by using bubble sort.\n\n2. The sum of the time periods between a push that is made on a day $i$ and a push that is made on a day $j$ is $\\sum_{k = i}^{j} (j - k)$.\n\n3. You can convert a Unix timestamp (seconds since the beginning of the Unix epoch) to a day number using the formula $day = \\floor (Unix timestamp / 3600)$.\n\n4. Use the following code:\n\n>>> from math import floor\n>>> floor(1400)\n14\n>>> floor(1401)\n14\n>>> floor(1601)\n16\n>>> floor(1701)\n17\n>>> floor(1801)\n18\n5.\n\n6.\n\n7.\n\n8.\n\n\"\"\"\n\nfrom datetime import datetime",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 45 65 84 346\") == \"4\"\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        l = [int(i) for i in stdin.split()]\n        l.sort()\n\n        target = l[-1]\n        prev = l[0]\n        i = 1\n\n        while i < len(l):\n            if target - prev > 20:\n                break\n\n            if l[i] - prev > 20:\n                prev = l[i]\n            elif l[i] - prev < 20:\n                prev = l[i]\n                i += 1\n            else:\n                break\n\n        return i\n\nassert Solution().solution(\"5\") == \"4\"\nassert Solution().solution(\"1 45 65 84 346\") == \"4\"\nassert Solution().solution(\"1\") == \"1\"\nassert Solution().solution(\"1 11\") == \"2\"\n",
        "num_ids_2": 27,
        "num_ids_4": 57
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == 4\n\n-----Explanation-----\nThe first push is pushed on day $1$ since there have been $0$ pushes since the last cleanup phase.\nThe second push is pushed on day $2$ since there have been $1$ pushes since the last cleanup phase.\nThe third push is pushed on day $3$ since there have been $2$ pushes since the last cleanup phase.\nThe fourth push is pushed on day $4$ since there have been $3$ pushes since the last cleanup phase.\nThe last push is pushed on day $5$ since there have been $4$ pushes since the last cleanup phase.\n\nSample Input:\n5\n1 45 65 84 346\nSample Output:\n4",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == 1\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\nprint(solution(stdin))",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == \"1\"\nprint(solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######'))\n\n\"\"\"\n\nimport sys\nimport unittest\n\nimport collections\n\nclass Tile:\n    def __init__(self, char):\n        self.char = char\n\n\nclass Memory:\n    def __init__(self):\n        self.max = 1_000_000\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"\nprint(solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\"))\n\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 5\\nP.G#T\\nG.T#T\\n.G#.T\\n#G#.#\\nT#.#G') == 4\nassert solution('10 10\\nP.G#T\\nG.T#T\\nT.G#P\\nT.G#T\\n.G#.T\\nT#.#G\\n#G#.#\\n#G#.#\\n#G#P#') == 3\n\n'''",
        "num_ids_2": 111,
        "num_ids_4": 111
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\n\n\"\"\"\n\nimport unittest\nfrom typing import List\nfrom copy import deepcopy\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\nassert solution('7 4\\n#######\\n#.TGG#\\n#P.GTG#\\n#######') == '0'\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == '1'\n\n---------------------------------------",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == \"5\"\n",
        "num_ids_2": 316,
        "num_ids_4": 316
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n\") == \"5\"",
        "num_ids_2": 318,
        "num_ids_4": 318
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == output\n\n\"\"\"\n\nimport sys\n\nn, m = map(int, input().split())\narr = []\nfor i in range(n):\n    arr.append(list(map(str, sys.stdin.readline().strip())))\n\ntemp = []\nfor i in range(m):\n    if arr[0][i]!= '_':\n        temp.append(arr[0][i])\n\nfor i in range(1, n):\n    for j in range(m):\n        if arr[i][j] == '_':\n            arr[i][j] = temp[j]\n\ncount = 0\nfor i in range(n):\n    for j in range(m):\n        if arr[i][j] == '_':\n            count += 1\nprint(count)\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$') == '5'\n\"\"\"",
        "num_ids_2": 316,
        "num_ids_4": 316
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$\") == \"5\"\nprint(solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$\") == \"5\")\nassert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$\") == \"5\"\nprint(solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_",
        "num_ids_2": 632,
        "num_ids_4": 632
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == \"5\"\n",
        "num_ids_2": 316,
        "num_ids_4": 316
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_data) == test_data_solution",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stin) == ans\nprint(ans)\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('____$$$_______$$$______$$$________$$$______$$$____\\n' +\n    '____$$$_______$$$______$$$________$$$______$$$____\\n' +\n    '_____$_________$________$__________$________$_____\\n' +\n    '___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n' +\n    '__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\\n' +\n    '_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n' +\n    '$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n' +\n    '_____$_$______$_$_____$_$_________$_$_____$_$_____\\n' +\n    '____$___$____$___$____$___$______$___$____$___$___\\n' +\n    '___$____$___$_____$___$____$____$_____$___$____$__\\n' +\n    '__$_____$___$_____$___$_____$___$_____$___$_____$_\\n' +\n    '__$_____$___$_____$___$_____$___$_____$___$_____$_\\n' +\n    '_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n') == '5'\nassert solution('____$$$_______$$$______$$$________$$$______$$$____\\n' +\n    '____$$$_______$$$______$$$________$$$______$$$____\\n' +\n    '_____$_________$________$__________$________$_____\\n' +\n    '___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n' +\n    '__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\\n' +\n    '_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n' +\n    '$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n' +\n    '_____$_$______$_$_____$_$_________$_$_____$_$_____\\n' +\n    '____$___$____$___$____$___$______$___$____$___$___\\n' +\n    '___$____$___$_____$___$____$____$_____$___$____$__\\n' +\n    '__$_____$___$_____$___$_____$___$_____$___$_____$_\\n' +\n    '__$_____$___$_____$___$_____$___$_____$___$_____$_\\n' +\n    '_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n') == '15'\nassert solution('____$$$_______$$$______$$$________$$$______$$$____\\n' +\n    '____$$$_______$$$______$$$________$$$______$$$____\\n' +\n    '_____$_________$________$__________$________$_____\\n' +\n    '___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n' +\n    '__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\\n' +\n    '_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n' +\n    '$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n' +\n    '_____$_$______$_$_____$_$_________$_$_____$_$_____\\n' +\n    '____$___$____$___$____$___$______$___$____$___$___\\n' +\n    '___$____$___$_____$___$____$____$_____$___$____$__\\n' +\n    '__$_____$___$_____$___$_____$___$_____$___$_____$_\\n' +\n    '__$_____$___$_____$___$_____$___$_____$___$_____$_\\n' +\n    '_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n') == '15'\nassert solution('____$$$_______$$$",
        "num_ids_2": 48,
        "num_ids_4": 82
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iay ay cant speakay piglatinay\"\nassert solution(\"i cant speak english\") == \"iay ay cannthay speakenglishay\"\n\"\"\"\n\nimport re\nfrom typing import Iterable\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\nsolution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\n-----Notes-----\nThis problem was asked by Twitter.\n\nGiven an input string, return the string made of every other character starting with the first, so \"Hello\" yields \"Hlo\".\n\nFor example:\n\nstring_bits('Hello') \u2192 'Hlo'\nstring_bits('Hi') \u2192 'H'\nstring_bits('Heeololeo') \u2192 'Hello'\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    'i cant speak pig latin'\n) == 'iyay antcay eakspay igpay atinlay'\nprint(\"All tests passed.\")\n\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('i cant speak pig latin') == 'iay aycay eakspay igpay atinlay'\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\nSolution:\n\nimport re",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\n\"\"\"\nimport re",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\"\"\"\n\nimport re\n\nVOWELS = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nassert solution(\"i can't speak pig latin\") == \"iyay anctay eakspay igpay atinlay\"\nassert solution(\"i cannot speak pig latin\") == \"iyay ancvay eakspay igpay atinlay\"\n\"\"\"\n",
        "num_ids_2": 57,
        "num_ids_4": 85
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"q\\npotatoes\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n\") == 'nymble'\n\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\nassert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'Anywhere is fine I guess'\nassert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'Anywhere is fine I guess'",
        "num_ids_2": 94,
        "num_ids_4": 143
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n4\\n0\\npea\\nsoup\\n3\\nnymble\\n3\\npancakes\") == \"nymble\"\nassert solution(\"1\\n1\\n0\\npea\\nsoup\\n1\\nnymble\\n1\\npancakes\") == \"nymble\"\nassert solution(\"3\\n4\\n0\\npea\\nsoup\\n3\\nnymble\\n3\\npancakes\") == \"Anywhere is fine I guess\"\nassert solution(\"1\\n1\\n0\\npea\\nsoup\\n1\\nnymble\\n1\\npancakes\") == \"Anywhere is fine I guess\"\n\n\"\"\"",
        "num_ids_2": 76,
        "num_ids_4": 160
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n''') == 'nymble'\n\nassert solution('''\n1\n1\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n''') == 'Anywhere is fine I guess'\n\nassert solution('''\n1\n1\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n''') == 'nymble'\n\nassert solution('''\n2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n''') == 'Anywhere is fine I guess'\n\nassert solution('''\n2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n''') == 'nymble'",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n''') == 'nymble'",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'Anywhere is fine I guess'\nassert solution('pea soup\\npea soup\\nnymble\\n') == 'nymble'\nassert solution('salad\\nnymble\\n') == 'Anywhere is fine I guess'\nassert solution('pancakes\\npancakes\\n') == 'Anywhere is fine I guess'\nassert solution('pea soup\\npancakes\\n') == 'Anywhere is fine I guess'\n",
        "num_ids_2": 39,
        "num_ids_4": 84
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\npea\\nsalad\\n3\\nnymble\\npancakes\\npea\\npunsch\\n\") == \"nymble\"\nassert solution(\"1\\n2\\npea\\nsalad\\n3\\nnymble\\npancakes\\npea\\npunsch\\n\") == \"Anywhere is fine I guess\"\n",
        "num_ids_2": 90,
        "num_ids_4": 90
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\pea soup\\npunsch\") == \"nymble\"\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"nymble\"\nassert solution(\"1\\n1\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"Anywhere is fine I guess\"\nassert solution(\"1\\n1\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"Anywhere is fine I guess\"\n\"\"\"\n",
        "num_ids_2": 94,
        "num_ids_4": 143
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n\"\"\") == \"nymble\"\nassert solution(\"\"\"\n1\n1\npancakes\n\"\"\") == \"Anywhere is fine I guess\"\nassert solution(\"\"\"\n1\n2\npancakes\n\"\"\") == \"Anywhere is fine I guess\"\nassert solution(\"\"\"\n3\n1\nq\npotatoes\n2\nsalad\npancakes\n3\nnymble\npunsch\n\"\"\") == \"Anywhere is fine I guess\"\nassert solution(\"\"\"\n2\n1\nq\nsalad\n2\npotatoes\npancakes\n3\nnymble\npunsch\n\"\"\") == \"Anywhere is fine I guess\"\n",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 0 15\") == \"3\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 0 15\") == \"3\"\nprint(solution(\"5 0 15\"))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(5, 0, 15) == 3\nassert solution(0, 0, 5) == 3\nassert solution(5, 0, 5) == 3\nassert solution(5, 0, 0) == 1\n\nassert solution(5, 0, 25) == 5\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 0 15\") == \"3\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 0 15') == '3'",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 0 15') == '3'\n\"\"\"\n\na,b,h = input().split()\na,b,h = int(a),int(b),int(h)\n\nprint((h-b)/(a-b))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(s) == expected\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 0 15') == 3\nassert solution('1 0 1') == 0\nassert solution('0 1 1') == 0\nassert solution('1 1 1') == 0\nassert solution('1 1 0') == 1",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 0 15') == '3'\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 0 15') == '3'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 15\") == \"19\"\nprint(\"Hooray!\")\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(11) + \" \" + str(15)) == \"19\"\n'''\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 15\") == \"19\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2 4') == '6'\n'''\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '11 15'\n) == '19'\nprint(solution(input()))\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11 15') == '19'\nassert solution('10 10') == '10'\n\n-------\n\u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\n\u041f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c \u041b\u0435\u043e\u043d\u0438\u0434\u0430 \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u0432\u0430\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 ('_') \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430. \u0412 \u0432\u0430\u0448\u0435\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0438\u043b\u0438 \u043d\u0435\u0442. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0432 \u0432\u044b\u0448\u0435\u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0443\u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b:\n\n\u043d\u043e\u043c\u0435\u0440 \u0441\u0442\u0440\u043e\u043a\u0438\n\u043d\u043e\u043c\u0435\u0440 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\n\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\n\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u0443\u043a\u0430\u0437\u0430\u0432, \u043a\u0430\u043a\u043e\u043c\u0443 \u0441\u0442\u043e\u043b\u0431\u0446\u0443 \u0438 \u043d\u0430 \u043a\u0430\u043a\u043e\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f. \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0432\u0435\u0440\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441 \u043f\u0440\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0431\u0443\u0434\u0443\u0442 \u0434\u0430\u043d\u044b \u0432 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435.\n\n\u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b $S$ \u0438 $N$. \u0427\u0438\u0441\u043b\u043e $S$ \u2014 \u043d\u043e\u043c\u0435\u0440 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u043d\u043e\u043c\u0435\u0440 \u0441\u0442\u043e\u043b\u0431\u0446\u0430. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438, \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0435 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u0430 \u0437\u0430\u0442\u0435\u043c \u043d\u043e\u043c\u0435\u0440 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438. \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0432\u0435\u0440\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441 \u043f\u0440\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0432 \u0441\u043b\u0443\u0447\u0430\u0435, \u043a\u043e\u0433\u0434\u0430 \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 \u043d\u043e\u043c\u0435\u0440\u043e\u043c $N$ \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b, \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0431\u044b\u043b\u043e \u0432\u044b\u0431\u0440\u0430\u043d\u043e \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: \u0435\u0441\u043b\u0438 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0431\u044b\u043b \u0441\u0438\u043c\u0432\u043e\u043b \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430, \u0442\u043e \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0442\u0430\u043a\u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0437\u043d\u0430\u043a \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0432\u0430\u043c \u043f\u043e\u043c\u043e\u0447\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0438\u043b\u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u044d\u0442\u043e\u043c \u0444\u0430\u0439\u043b\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 1. \u0415\u0441\u043b\u0438 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0432 \u044f\u0447\u0435\u0439\u043a\u0430\u0445 $S$ \u0438 $N$ \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043d\u0435\u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u043c\u0432\u043e\u043b, \u0442\u043e \u043e\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043a\u0430\u043a \u0437\u043d\u0430\u043a \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 2. \u0421\u0438\u043c\u0432\u043e\u043b \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u0434\u043e\u043b\u0436\u0435",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 16\") == '10'\nassert solution(\"12 10\") == '10'\n\nprint(solution('10 16'))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11 15\") == \"19\"\n\"\"\"\n\na = input().split()\n\nprint(int(a[1]) + int(a[0]))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 15\") == \"19\"\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\nassert solution(\"9 17\") == \"18\"\n\n\"\"\"\n\nimport math",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"West South East\") == \"No\"\nassert solution(\"South East West\") == \"No\"\nassert solution(\"East West South\") == \"No\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('North West South') == 'No'\nassert solution('North East South') == 'No'\nassert solution('South East West') == 'No'\nassert solution('East West North') == 'Yes'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"North West South\") == \"No\"\nassert solution(\"South East South\") == \"Yes\"\n\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('South East West') == 'No'\nassert solution('South West West') == 'No'\nassert solution('South West East') == 'Yes'\nassert solution('South East East') == 'No'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"West South East\") == \"No\"\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"North South West East\") == \"Yes\"\nassert solution(\"North South East West\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"North West East\") == \"No\"\nassert solution(\"South East West\") == \"No\"\nassert solution(\"East South West\") == \"Yes\"\nassert solution(\"North East West\") == \"No\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('North West East') == 'No'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"North East South\") == \"No\"\nassert solution(\"South East West\") == \"No\"\nassert solution(\"North West South\") == \"No\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin='South West East') == 'Yes'\nassert solution(stdin='South East West') == 'No'\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 16\\nagain\\npirpumsemoystoal') =='marywasnosyagain'\n\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") =='marywasnosyagain'\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 16\\nagain\\npirpumsemoystoal') =='marywasnosyagain'\nassert solution('5 16\\nmnop\\nhmopqrstu') =='marywasnosyagain'\nassert solution('5 16\\nxyz\\nabcd') == 'abcdyz'\nassert solution('5 16\\nabc\\nabcd') == 'abcdyz'\n\nSolution for the challenge can be found in the next tab.\n\nMemorization\n\nThis challenge was inspired by the well-known encryption algorithm Caeser Cipher. This algorithm is used to encode messages by shifting each letter by a certain number of places in the alphabet. This means that letter A is replaced by letter A, B is replaced by B, C is replaced by C, and so on, and so on.\n\nIn this particular challenge, I used a variant of the algorithm which is also known as the \"Autokey\" cipher, and uses the secret prefix as the encryption key.\n\nWrite a function solution(s, n) which takes a string s and an integer n, and returns a string which is the encrypted version of s using the secret prefix and the Autokey cipher.\n\nThe letters of the alphabet are $a$ to $z$, and are arranged in an alphabetical order. A prefix of $n$ letters is calculated by taking $a$ to $a$ plus $n - 1$ letters, and then applying the Autokey cipher on it.\n\nExample\n\nFor s = \"goodman\" and n = 2, the output should be\nsolution(s, n) = \"goodmaa\"\n\n\"goodman\" is encrypted as follows:\n\nprefix = \"good\"\n\"man\"\n|a  b  c|\n|d  e  f|\n|g  h  i|\n|j  k  l|\n|m  n  o|\n|p  q  r|\n|s  t  u|\n|v  w  x|\n|y  z  |\nthe ciphertext is \"maa\".\n\n\"maa\" is encrypted as follows:\n\nprefix = \"m\"\n\"aa\"\n|a  b  c|\n|d  e  f|\n|g  h  i|\n|j  k  l|\n|m  n  o|\n|p  q  r|\n|s  t  u|\n|v  w  x|\n|y  z  |\nthe ciphertext is \"mab\".\n\n\"mab\" is encrypted as follows:\n\nprefix = \"m\"\n\"ab\"\n|a  b  c|\n|d  e  f|\n|g  h  i|\n|j  k  l|\n|m  n  o|\n|p  q  r|\n|s  t  u|\n|v  w  x|\n|y  z  |\nthe ciphertext is \"mab\".\n\nFor s = \"pqrstuv\" and n = 1, the output should be\nsolution(s, n) = \"pqrstuv\".\n\n\"pqrstuv\" is encrypted as follows:\n\nprefix = \"p\"\n\"qr\"\n|a  b  c|\n|d  e  f|\n|g  h  i|\n|j  k  l|\n|m  n  o|\n|p  q  r|\n|s  t  u|\n|v  w  x|\n|y  z  |\nthe ciphertext is \"pqrstuv\".\n\n\"pqrstuv\" is encrypted as follows:\n\nprefix = \"q\"\n\"rst\"\n|a  b  c|\n|d  e  f|\n|g  h  i|\n|j  k  l|\n|m  n  o|\n|p  q  r|\n|s  t  u|\n|v  w  x|\n|y  z  |\nthe ciphertext is \"qrstuv\".\n\n\"qrstuv\" is encrypted as follows:\n\nprefix = \"r\"\n\"stu\"\n|a  b  c|\n|d  e  f|\n|g  h  i|\n|j  k  l|\n|m  n  o|\n|p  q  r|\n|s  t  u|\n|v  w  x|\n|y  z  |\nthe ciphertext is \"rstuv\".\n\n\"rstuv\" is encrypted as follows:\n\nprefix = \"s\"\n\"tuv\"\n|a  b  c|\n|d  e  f|\n|g  h  i|\n|j  k  l|\n|m  n  o|\n|p  q  r|\n|s  t  u|\n|v  w  x|\n|y  z  |\nthe ciphertext is \"sutuv\".\n\n\"sutuv\" is encrypted as follows:\n\nprefix = \"t\"\n\"uv\"\n|a  b  c|\n|d  e  f|\n|g  h  i|\n|j  k  l|\n|m  n  o|\n|p  q  r|\n|s  t  u|\n|v  w  x|\n|y  z  |\nthe ciphertext is \"tuv\".\n\n\"tuv\" is encrypted as follows:\n\nprefix = \"u\"\n\"v\"\n|a  b  c|\n|d  e  f|\n|g  h  i|\n|j  k  l|\n|m  n  o|\n|p  q  r|\n|s  t  u|\n|v  w  x|\n|y  z  |\nthe ciphertext is \"uv\".\n\n\"uv\" is encrypted as follows:\n\nprefix = \"v\"\n\"w\"\n|a  b  c|\n|d  e  f|\n|g  h  i|\n|j  k  l|\n|m  n  o|\n|p  q  r|\n|s  t  u|\n|v  w  x|\n|y  z  |\nthe ciphertext is \"w\".\n\n\"w\" is encrypted as follows:\n\nprefix = \"w\"\n\"a\"\n|a  b  c|\n|d  e  f|\n|g  h  i|\n|j  k  l|\n|m  n  o|\n|p  q  r|\n|s  t  u|\n|v  w  x|\n|y  z  |\nthe ciphertext is \"a\".\n\n\"a\" is encrypted as follows:\n\nprefix = \"y\"\n\"b\"\n|a  b  c|\n|d  e  f|\n|g  h  i|",
        "num_ids_2": 55,
        "num_ids_4": 96
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 16\\nagain') =='marywasnosyagain'\n\"\"\"\n\nimport math",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 16\\nagain\\npirpumsemoystoal') =='marywasnosyagain'\nassert solution('5 20\\nbaconp\\nCeGgxwYugpUzD') == 'pirpumsemoystoal'\nassert solution('1 1\\nA\\nA') == 'A'\nassert solution('1 2\\nB\\nC') == 'A'\nassert solution('1 3\\nA\\nA') == 'A'\n",
        "num_ids_2": 64,
        "num_ids_4": 98
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('3 5\\nabcde') == 'dnoefl'\nassert solution('3 6\\nabcde') == 'cdedp'\nassert solution('3 7\\nabcde') == 'dnonjy'\nassert solution('3 9\\nabcde') == 'bdnkvz'\n",
        "num_ids_2": 26,
        "num_ids_4": 61
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\n\nimport string\n\nstring.ascii_lowercase\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\n\"\"\"\n\n\"\"\"\n----SOLUTION----\n\"\"\"\n\nn, m = map(int, input().split())\na = stdin[0:n]\nb = stdin[n:]\n\nres = \"\"\nfor i in range(0, m):\n    res += chr((ord(a[i % n]) - ord('a') + ord(b[i % n]) - ord('a')) % 26 + ord('a'))\nprint(res)\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\">2\\nabc\") == \">2\\na\\nb\\nc\"\nassert solution(\">2\\na\\nb\\nc\") == \">2\\na\\nb\\nc\"\n\"\"\"\n\n\nfrom typing import List",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Even'\n\nassert solution('4') == 'Odd'\nassert solution('5') == 'Even'\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 'Odd'\nassert solution('2') == 'Even'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Even'\nassert solution('5') == 'Odd'\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Either'\nassert solution('4') == 'Even'\nassert solution('5') == 'Either'\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == 'Odd'\nassert solution('3') == 'Even'\nassert solution('11') == 'Even'\nassert solution('7') == 'Odd'\nassert solution('2') == 'Even'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'Either'\nassert solution('1') == 'Odd'\nassert solution('2') == 'Either'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Even'\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"Either\"\nassert solution(\"2\") == \"Odd\"\nassert solution(\"3\") == \"Even\"\nassert solution(\"4\") == \"Odd\"\nassert solution(\"5\") == \"Even\"\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Odd\"\nassert solution(\"2\") == \"Even\"\nassert solution(\"3\") == \"Odd\"\nassert solution(\"4\") == \"Even\"\nassert solution(\"5\") == \"Odd\"\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'Either'\nassert solution('0') == 'Odd'\nassert solution('2') == 'Even'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Even'\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == 'Even'\nassert solution('7') == 'Odd'\nassert solution('2') == 'Either'\nassert solution('15') == 'Either'\nassert solution('11') == 'Even'\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == 'Either'\nassert solution('3') == 'Odd'\nassert solution('100') == 'Even'\n\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\n----------------------",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\n\"\"\"\n\nfrom time import time",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5\n314\n1\n5926\n5\n35897\n\"\"\") == \"\"\"\n3\n1\n4\n1\n5\n\"\"\"\n\nassert solution(\"\"\"\n1\n0\n10\n100\n1000\n\"\"\") == \"\"\"\n1\n1\n2\n3\n4\n\"\"\"\n\nassert solution(\"\"\"\n5\n314\n1\n5926\n5\n35897\n\"\"\") == \"\"\"\n3\n1\n4\n1\n5\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 15
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\nassert solution(\"8\\n115\\n9\\n65\\n8\\n3951\") == \"6\\n2\\n3\\n4\\n5\\n5\"\nassert solution(\"16\\n100\\n11\\n2222\\n3\\n44\\n55\\n66\\n7777\\n9\\n101010\") == \"8\\n4\\n7\\n7\\n9\\n10\"\nprint(\"Success!\")\n\n\"\"\"",
        "num_ids_2": 81,
        "num_ids_4": 139
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\nassert solution(\"5\\n435897\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\"\"\"\n\nimport re\n\nN = int(input())\n\nfor _ in range(N):\n    n = re.findall(r'\\d+', input())[0]\n    print(len(n))\n",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5\n314\n1\n5926\n5\n35897\n\"\"\") == \"\"\"3\n1\n4\n1\n5\"\"\"\n\nassert solution(\"\"\"3\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n780\n781\n782\n783\n784\n785\n786\n787\n788\n789\n790\n791\n792\n793\n794\n795\n796",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\nprint(solution(\"5\\n314\\n1\\n5926\\n5\\n35897\"))\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\nassert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\\n11\\n\") == \"3\\n1\\n4\\n1\\n5\\n1\"\n\"\"\"\n\nimport unittest\n",
        "num_ids_2": 88,
        "num_ids_4": 88
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('\\n'.join(map(str, range(1, 10)))) == '1\\n2\\n3\\n4\\n5'\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 5\\nc\\tr\\ti\\tk\\top\\tro\\tt\\te\\tf\\tu\\tw\\tw\\can\\tt\\the\\tw\\or\\tw\\wer\\tw\\ees\\tw\\at\\th\\is\\tt\\to\\n\\tm\\nn\\nd\") == \"yes\"\nassert solution(\"9 5\\nc\\tr\\ti\\tk\\op\\tro\\tt\\te\\tf\\tu\\tw\\tw\\can\\tt\\the\\tw\\or\\tw\\eer\\tw\\at\\th\\is\\tt\\to\\n\\tm\\nn\\nd\") == \"no\"",
        "num_ids_2": 142,
        "num_ids_4": 142
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 5\\nc t\\n\\ti r\\n\\tk p\\n\\to c\\n\\t\\r o\\n\\t\\t t e\\n\\t\\t f\\n\\tu h\\n\\tw p\\n\\twe we\\n\\tcan the\\n\\ttowork people\\n\\tthe of\\n\\tout the\\n') == 'yes\\nno\\nno\\nyes\\nyes'\nassert solution('9 5\\nc t\\n\\t\\ti r\\n\\t\\tk p\\n\\t\\to c\\n\\t\\t\\r o\\n\\t\\t\\t t e\\n\\t\\t\\t f\\n\\tu h\\n\\tw p\\n\\twe we\\n\\tcan the\\n\\ttowork people\\n\\tthe of\\n\\tout the\\n') == 'yes\\nno\\nno\\nyes\\nyes'\n\"\"\"",
        "num_ids_2": 224,
        "num_ids_4": 224
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 7\\nq j\\nf c\\nv b\\nr j\\nr r\\nw v\\nx x\\nq q\\nj f\\nw r\\nq q\\nr q\\nj q\\n') == 'yes'\nassert solution('5 8\\nf c\\nr j\\nr r\\nw v\\nx x\\nq q\\nj f\\nw r\\nq q\\nr q\\nj q\\n') == 'no'\nassert solution('3 3\\nr c\\nr c\\nh q\\nh r\\nr r\\n') == 'yes'\nassert solution('3 3\\nh h\\nh h\\nh h\\nh h\\nh h\\nh h\\nh h\\nh h\\nh h\\nh h\\n') == 'no'\nassert solution('3 3\\nj c\\nj c\\nj c\\nj c\\nj c\\nj c\\nj c\\nj c\\nj c\\nj c\\nj c\\n') == 'yes'\n",
        "num_ids_2": 111,
        "num_ids_4": 194
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"yes\\nno\\nno\\nyes\\nyes\"\n\n------End-Tag--------\"\"\"\n",
        "num_ids_2": 70,
        "num_ids_4": 70
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"yes\"\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n9 5\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the\n''') == '''\nyes\nno\nno\nyes\nyes\n'''\n\nprint(solution('''\n9 5\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the\n'''))\n\nSample Input:\n9 5\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the\nSample Output:\nyes\nyes\nyes\nno\nno\n'''\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\ror o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\") == \"yes\"\n\n---Problem---\n\nThe word play is a game played by children to teach them about the letters of the alphabet. Players say letters (using English words) that start with vowels (a, e, i, o, and u) and end with vowels, or by a consonant.\n\nThe game is played at the local school in your town. To pass the game, the child must use at least $1$ letter from the letters \u201ca\u201d, \u201ce\u201d, \u201ci\u201d, \u201co\u201d and \u201cu\u201d, and must use all consonants. The game is played with a \"vocab\" board and a dictionary of $5$ words. There is a single word on the board, hidden from the player. The player uses the dictionary to figure out what the word is, using at most $3$ guesses.\n\nAfter each guess, the game displays how many letters have been guessed correctly and which letters have not been guessed. For instance, if the word to guess is \u201capple\u201d, the board might show \u201c_ a p p l e _\u201d. The player can guess \u201cp\u201d, \u201cl\u201d, or \u201ce\u201d (the latter only having two guesses left).\n\nYour task is to write a program that will be used to play the word play game with you.\n\n-----Solution-----\n\n(You should write a solution in C++, Java, JavaScript, and Python)",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 5\\nc t\\n\\ni r\\nk p\\n\\no c\\n\\nr o\\nt e\\n\\nt f\\nu h\\n\\nw p\\nwe we\\ncan the\\nwork people\\n\\nit of\") == \"yes\"\nassert solution(\"9 5\\nc t\\n\\ni r\\nk p\\n\\no c\\n\\nr o\\nt e\\n\\nt f\\nu h\\n\\nw p\\nwe we\\ncan the\\nwork people\\n\\nit of\") == \"no\"\nassert solution(\"9 5\\nc t\\n\\ni r\\nk p\\n\\no c\\n\\nr o\\nt e\\n\\nt f\\nu h\\n\\nw p\\nwe we\\ncan the\\nwork people\\n\\nit of\") == \"no\"\n\nassert solution(\"9 5\\n\\n\\n\\n\\n\\n\") == \"yes\"\nassert solution(\"9 5\\n\\n\\n\\n\\n\\n\") == \"no\"\n",
        "num_ids_2": 132,
        "num_ids_4": 221
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9 5\\nc t\\ni r\\nk p\\no c\\ror o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of') == 'no\\nno\\nyes\\nyes\\nyes'\n\"\"\"\n\n\nimport sys\n",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == '1'\nassert solution('3 4\\ncarrots?\\nhuffle-puff\\nzombies\\njellybeans') == '7'\nassert solution('5 4\\ncarrots?\\nhuffle-puff\\nzombies\\njellybeans') == '3'\nassert solution('7 7\\ncarrots?\\nhuffle-puff\\nzombies\\njellybeans\\nfantasize\\nsweeting\\njuggling') == '9'\nassert solution('3 5\\ncarrots?\\nhuffle-puff\\nzombies\\njellybeans\\nfantasize\\nsweeting\\njuggling') == '2'\n",
        "num_ids_2": 50,
        "num_ids_4": 125
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"\n\"\"\"\n\nN, P = [int(i) for i in input().split()]\nD = {}\nfor i in range(N):\n    D[input()] = i + 1\ns = set()\nfor i in range(P):\n    s.add(input())\nprint(len(s) - len(D))\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == 1\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == '1'\nprint(solution(input()))\n\n------Solution------\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\n\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"\n\nassert solution(\"2 2\\ncarrots?\\nbunnies\") == \"0\"\n\nassert solution(\"1 10\\ncarrots?\\nbunnies\") == \"0\"\n\nassert solution(\"3 9\\ncarrots?\\nTina\\nBoris\\nTeddy\\nOscar\\nbunnies\\nTina\\nBoris\\nTeddy\\nOscar\") == \"9\"\n\nassert solution(\"1 1\\ncarrots?\\nbunnies\") == \"0\"",
        "num_ids_2": 40,
        "num_ids_4": 112
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == 1\nassert solution('2 1\\ncarrots?\\nbunnies') == 1\nassert solution('2 1\\ncarrots?\\nbunnies') == 1\n\nSample Input:\n2 2\nbunnies\nbunnies\nSample Output:\n3\nassert solution('2 2\\nbunnies\\nbunnies') == 3\nassert solution('2 2\\nbunnies\\nbunnies') == 3\n",
        "num_ids_2": 36,
        "num_ids_4": 71
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == 1\nassert solution('2 1\\ncat?\\ndog') == 2\n'''",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == 1\nassert solution('2 1\\ncarrots?\\nbunnies\\ncarrots?\\nbunnies\\n') == 2\nassert solution('2 1\\ncarrots?\\nbunnies\\n') == 0\nassert solution('2 1\\ncarrots?\\nbunnies\\ncarrots?\\nbunnies\\n') == 1\nassert solution('2 1\\ncarrots?\\nbunnies\\ncarrots?\\nbunnies\\n') == 2\n",
        "num_ids_2": 47,
        "num_ids_4": 96
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\n\n\"\"\"\nAn array in Chess notation is a string of one of the following patterns:\n\n- The letters \"K\", \"Q\", \"R\", \"B\", \"N\", and \"P\" are allowed to describe the positions of the king, queen, rook, bishop, knight, and pawn of the white player respectively.\n- The letters \"k\", \"q\", \"r\", \"b\", \"n\", and \"p\" are allowed to describe the positions of the king, queen, rook, bishop, knight, and pawn of the black player respectively.\n- The letters \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", and \"g\" are allowed to describe the positions of the file where the king, queen, rook, bishop, knight, and pawn of the white player are located respectively.\n- The letters \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", and \"G\" are allowed to describe the positions of the file where the king, queen, rook, bishop, knight, and pawn of the black player are located respectively.\n- If, in the input, the black player has an empty position, it should be omitted.\n- If, in the input, the white player has an empty position, it should be omitted.\n- If, in the input, the position of the black player is omitted, it should be filled with \":\".\n- If, in the input, the position of the white player is omitted, it should be filled with \":\".\n- If, in the input, the letter \":\" appears in the input, it should be omitted.\n- If, in the input, the letter \".\" appears in the input, it should be replaced with \":\".\n\nIn order to encode the position of the white player or the black player, the letter \":\" is used between the letters representing the file and the number in the row.\n\nIf the letter \":\" appears in the input, it should be replaced with a \".\".\n\nNote that the numbers of the white player or the black player",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\n\nassert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\n\nassert solution(\"\"\"+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\"\"\nassert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n\"\n\"|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n\"\n\"+---+---+---+---+---+---+---+---+\\n\"\n\"|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n\"\n\"+---+---+---+---+---+---+---+---+\\n\"\n\"|...|:::|.n.|:::|...|:::|...|:p:|\\n\"\n\"+---+---+---+---+---+---+---+---+\\n\"\n\"|:::|...|:::|...|:::|...|:::|...|\\n\"\n\"+---+---+---+---+---+---+---+---+\\n\"\n\"|...|:::|...|:::|.P.|:::|...|:::|\\n\"\n\"+---+---+---+---+---+---+---+---+\\n\"\n\"|:P:|...|:::|...|:::|...|:::|...|\\n\"\n\"+---+---+---+---+---+---+---+---+\\n\"\n\"|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n\"\n\"+---+---+---+---+---+---+---+---+\\n\"\n\"|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n\"\n\"+---+---+---+---+---+---+---+---+\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\nassert solution(\"+---+---+---+---+---+---+---+---+\\n\"\n\"|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n\"\n\"+---+---+---+---+---+---+---+---+\\n\"\n\"|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n\"\n\"+---+---+---+---+---+---+---+---+\\n\"\n\"|...|:::|.n.|:::|...|:::|...|:p:|\\n\"\n\"+---+---+---+---+---+---+---+---+\\n\"\n\"|:::|...|:::|...|:::|...|:::|...|\\n\"\n\"+---+---+---+---+---+---+---+---+\\n\"\n\"|...|:::|...|:::|.P.|:::|...|:::|\\n\"\n\"+---+---+---+---+---+---+---+---+\\n\"\n\"|:P:|...|:::|...|:::|...|:::|...|\\n\"\n\"+---+---+---+---+---+---+---+---+\\n\"\n\"|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n\"\n\"+---+---+---+---+---+---+---+---+\\n\"\n\"|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n\"\n\"",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    stdin=\n    \"\"\"\n    +---+---+---+---+---+---+---+---+\n    |.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n    +---+---+---+---+---+---+---+---+\n    |:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n    +---+---+---+---+---+---+---+---+\n    |...|:::|.n.|:::|...|:::|...|:p:|\n    +---+---+---+---+---+---+---+---+\n    |:::|...|:::|...|:::|...|:::|...|\n    +---+---+---+---+---+---+---+---+\n    |...|:::|...|:::|.P.|:::|...|:::|\n    +---+---+---+---+---+---+---+---+\n    |:P:|...|:::|...|:::|...|:::|...|\n    +---+---+---+---+---+---+---+---+\n    |.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n    +---+---+---+---+---+---+---+---+\n    |:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n    +---+---+---+---+---+---+---+---+\n    \"\"\") == \"\"\"\n    White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\n    Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n    \"\"\"\nassert solution(\n    stdin=\n    \"\"\"\n    +---+---+---+---+---+---+---+---+\n    |.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n    +---+---+---+---+---+---+---+---+\n    |:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n    +---+---+---+---+---+---+---+---+\n    |...|:::|.n.|:::|...|:::|...|:p:|\n    +---+---+---+---+---+---+---+---+\n    |:::|...|:::|...|:::|...|:::|...|\n    +---+---+---+---+---+---+---+---+\n    |...|:::|...|:::|.P.|:::|...|:::|\n    +---+---+---+---+---+---+---+---+\n    |:P:|...|:::|...|:::|...|:::|...|\n    +---+---+---+---+---+---+---+---+\n    |.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n    +---+---+---+---+---+---+---+---+\n    |:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n    +---+---+---+---+---+---+---+---+",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+') == 'White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6'",
        "num_ids_2": 518,
        "num_ids_4": 518
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'Black: Kh1,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh",
        "num_ids_2": 941,
        "num_ids_4": 941
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \"White: Kd1,Nd2,Qe1,Qf2,Qh4,Ra1,Nc2,Kd3,Qd2,Rb1,Nd1,Nb2,Kg1,Qc3,Kb1,Kc1,Qf1,Rd3,Nh1,Kf3,Qh2,Bb2,Bc1,Rc1,Kg3,Kf2,Rh2,Bh1,a4,d3,c3,d4,b5,e5,a5,d2,c1,b4,a3,Nc3,Kd4,Qd3,Rb2,a1,d5,Qe3,Qh1,Ra2,Rh3,Bb3,Bf1,Rb1,a6,b3,Rb2,a4,b4,Rc2,Bd4,Qd4,Rf3,Bb3,Kb4,Kc4,Bd3,Kd5,Qf2,Ng1,Qe2,Kf2,Kd2,Qc3,Qf4,Kb5,a7,b6,c7,d7,e7,f7,g7,h7,a8,d8,Rc8,b7,c6,c5,d5,d6,Qc5,Qf6,Kf7,Kd8,Qd7,Rg8,Rf8,Rg8,a8,d1,Qg7,Qf7,Rc7,b8,b1,c2,d4,e2,f2,b5,g1,h5,h1,a3,b6,Qb3,a5,Rf1,Qe4,Nf1,Rg2,Qh5,Rb6,Qh4,Rc7,Qd8,Qf8,Bd8,Rd8,a7,b7,Rg7,Qc8,Qh7,Nb7,Rb6,Nh7,Qb5,Rb8,a8,Qf8,Rb8,a8,d1,Rb7,",
        "num_ids_2": 941,
        "num_ids_4": 941
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('3 2') == 'You will become a flying monkey!'\nassert solution('10 100') == 'Your wish is granted!'\nassert solution('11 5') == 'You will become a flying monkey!'\nassert solution('11 4') == 'You will become a flying monkey!'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\"\nassert solution(\"8 3\") == \"You will become a flying monkey!\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\n\"\"\"\n\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('6 4') == 'Your wish is granted!'\nassert solution('7 4') == 'Your wish is granted!'\nassert solution('6 2') == 'Your wish is granted!'\nassert solution('1 1') == 'You will become a flying monkey!'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1') == 'Your wish is granted!'\n\"\"\"\n\n\"\"\"\n1. \u0412\u0437\u044f\u0442\u044c N \u0438 K\n2. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0430 \u0447\u0435\u0442\u043d\u043e\u0441\u0442\u044c K \u0438\u043b\u0438 \u043d\u0435\u0447\u0435\u0442\u043d\u043e\u0441\u0442\u044c N\n3. \u0412\u044b\u0431\u0440\u0430\u0442\u044c N \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 N \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0447\u0438\u0441\u0435\u043b\n4. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c \u0441\u043b\u043e\u0432\u0430 isprime(N) \u0434\u043b\u044f \u0447\u0438\u0441\u043b\u0430 N\n5. \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0438\u0437 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u0440\u0430\u0432\u043d\u044b\u0439 \u0441\u043b\u043e\u0432\u0443 isprime(N)\n\"\"\"\n\nimport math",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('7 2') == 'You will become a flying monkey!'\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\"\nassert solution(\"4 2\") == \"You will become a flying monkey!\"\n\"\"\"\n\nN, K = [int(x) for x in stdin.split(\" \")]",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\"\nassert solution(\"4 4\") == \"You will become a flying monkey!\"\nassert solution(\"7 9\") == \"You will become a flying monkey!\"\nassert solution(\"12 9\") == \"Your wish is granted!\"\n\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('8 4') == 'You will become a flying monkey!'\n\"\"\"\n\nimport sys",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('16') == '16'\nassert solution('4') == '4'\nassert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('10') == '10'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('16') == '16'\nassert solution('1') == '2'\nassert solution('0') == '0'\nassert solution('2') == '4'\nassert solution('4') == '8'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"16\") == \"16\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('16') == '16'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('16') == 16\n'''",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('16') == '16'\nassert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '9'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('16') == '16'\n\n\"\"\"\n\n\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('16') == '16'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('4') == '8'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('16') == '16'\nassert solution('16') == '16'\nassert solution('16') == '16'\nassert solution('16') == '16'\nassert solution('16') == '16'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('16') == '16'\n\n-----Solution-----\n\na = int(stdin)",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '1'\nassert solution('2\\n5') == '1'\nassert solution('3\\n10') == '2'\nassert solution('5\\n5') == '1'\n",
        "num_ids_2": 21,
        "num_ids_4": 47
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open('./input.txt').readline()) == open('./output.txt').readline()\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 180\\n45 30 55 20 80 20\") == \"4\"\n\"\"\"\n\nimport sys\nfrom collections import deque\nfrom typing import List\n\nMAX_NUM = 100\nT = int(sys.stdin.readline())\nn = int(sys.stdin.readline())\nl = list(map(int, sys.stdin.readline().split()))\n\nqueue = deque()\nfor i in range(n):\n    queue.append(l[i])\n\ntime = 0\nwhile queue and time <= T:\n    task = queue.popleft()\n    time += task\n    if time <= T:\n        queue.append(task)\nprint(len(queue))\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 180\\n45 30 55 20 80 20\") == \"4\"\n\"\"\"\n\nfrom typing import List\n\nimport sys\n\nDEBUG = False\ndata = sys.stdin.readlines()\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''6 180\n45 30 55 20 80 20''') == '4'\n\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"1 2 3 4 5\"\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input_1) == 4",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 180\\n45 30 55 20 80 20\") == \"4\"\n\"\"\"\n\n\nfrom collections import deque",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 180\\n45 30 55 20 80 20') == '4'",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 180\\n45 30 55 20 80 20\") == \"4\"\n\n\"\"\"\nimport sys\nfrom io import StringIO\nfrom collections import deque",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n\n\"\"\"\n\n\"\"\"\nSolution Approach\n\nAn experiment with a simple example shows that the largest possible javelin can be made up of the first two rods.\n\nFrom there, we can simply take the length of the rods and add to them until they become the same length.\n\nWe can work out the maximum length of the javelin by subtracting the length of the remaining rods and taking the absolute value of that, because if the remaining rods are negative, it means that the maximum length of the javelin has already been calculated.\n\nFor the next step, we can take the maximum length of the javelin and add on the length of the remaining rods.\n\nWe can work out the next largest javelin by subtracting the length of the remaining rods from the previous largest javelin, and taking the absolute value of that.\n\nWe can work out the next largest javelin by taking the absolute value of the difference between the new length of the javelin and the previous largest javelin.\n\nThis process can be repeated until we are able to make a javelin of length $0$, or until we have checked all the possible combinations.\n\nAs we perform each step, we can keep a running list of the maximum javelins so far.\n\"\"\"\n\nimport math",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\n\"\"\"\n\nN = int(stdin.readline())\na = 0\nfor line in stdin.readlines():\n    l = int(line)\n    a = a + l\n\na = int(a/3)\n\nprint(a)\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\nassert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\nassert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\nassert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\nassert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n\"\"\"\n\nn = int(stdin.readline())\nnumbers = []\nfor _ in range(n):\n    numbers.append(int(stdin.readline()))\n\nmin_number = min(numbers)\ntotal_number = 0\nfor i in numbers:\n    total_number += (i - min_number)\n\nprint(total_number + min_number)\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"5 3 3 4\n0 1 4\n\"\"\") == '2 3 0'\nassert solution(\"\"\"7 3 3 4\n1 5 5\n\"\"\") == 'impossible'\nassert solution(\"\"\"4 2 4 3\n1 1 3\n\"\"\") == 'impossible'\nassert solution(\"\"\"5 3 3 4\n0 1 4\n2 4 3\n\"\"\") == '2 3 0'\nassert solution(\"\"\"5 2 3 4\n0 2 4\n0 1 4\n\"\"\") == 'impossible'\n\n---Problem 692---\nA node is selected to become the new root of the tree. If there is any node that is not in the tree and is a descendant of the root, it becomes the new root. The problem is that for the previous step to be valid, the node must also be in the tree, and if it is not, then no descendant of it is also in the tree. The goal of this problem is to find the path from the root to the largest node that is also in the tree.\n\n-----Input-----\nThe first line of input contains a single integer $n$, denoting the number of nodes in the tree. The next line contains $n$ single integers $a_1, \\ldots, a_n$ ($a_i \\in \\{ 1, 2, \\ldots, n \\}$), indicating whether the $i^{\\text {th}}$ node is present in the tree or not.\n\nEach of the next $n$ lines contains a single integer $t$, denoting that the $t^{\\text {th}}$ parent node of the $t^{\\text {th}}$ node is not present in the tree. If $t^{\\text {th}} = a_i$ then the $i^{\\text {th}}$ node is a descendant of the $a_i$ node.\n\n-----Output-----\nOutput a single line containing the path from the root to the largest node that is in the tree. If there are multiple such paths, output any of them.\n\n-----Examples-----\nSample Input:\n6\n0 2 5 3 3 4\n1 2 2 5 3\nSample Output:\n0 1 2\n\nSample Input:\n6\n0 3 3 4 5 4\n0 2 2 4 5\nSample Output:\n0 3 4\n\nSample Input:\n6\n0 1 4 2 4 4\n1 2 3 2 2\nSample Output:\n0 1 2\n\nSample Input:\n6\n0 4 2 5 4 5\n0 3 3 3 4\nSample Output:\n0 3\n\n---Problem 693---\nIn this problem you will be given a directed graph and a source vertex $s$ and a destination vertex $t$. You need to calculate the number of paths from $s$ to $t$.\n\n-----Input-----\nThe first line of input contains two integers $n$ and $m$ indicating the number of vertices and the number of edges in the graph, respectively.\n\nEach of the following $m$ lines contains two integers $u$ and $v$ denoting that there is a directed edge from $u$ to $v$.\n\nThe last line of input contains two integers $s$ and $t$ indicating the source and destination vertices.\n\n-----Output-----\nOutput a single integer denoting the number of paths from $s$ to $t$.\n\n-----Examples-----\nSample Input:\n4 3\n0 1\n1 2\n0 3\nSample Output:\n1\n\nSample Input:\n4 3\n0 1\n0 2\n0 3\n1 2\nSample Output:\n2\n\nSample Input:\n4 3\n0 1\n0 2\n0 3\n1 2\nSample Output:\n1\n\n---Problem 694---\nYou are given a directed graph with $n$ vertices $1, \\ldots, n$ and $m$ edges. You need to find the number of triangles in the graph, which means the number of edges where $u$ and $v$ have common neighbors.\n\n-----Input-----\nThe first line of input contains two integers $n$ and $m$ indicating the number of vertices and the number of edges in the graph, respectively.\n\nEach of the following $m$ lines contains two integers $u$ and $v$ denoting that there is an edge from $u$ to $v$.\n\nThe last line of input contains $n$ integers $a_1, \\ldots, a_n$ which denote the number of triangles in the graph.\n\n-----Output-----\nOutput a single integer denoting the number of triangles in the graph.\n\n-----Examples-----\nSample Input:\n4 3\n0 1\n0 2\n0 3\n1 2\nSample Output:\n1\n\nSample Input:\n4 3\n0 1\n0 2\n0 3\n1 2\nSample Output:\n0\n\nSample Input:\n4 3\n0 1\n0 2\n0 3\n1 2\nSample Output:\n0\n\n---Problem 695---\nYou are given a directed graph with $n$ vertices $1, \\ldots, n$ and $m$ edges. You need to find the number of directed triangles in the graph.\n\nA directed triangle is a directed graph with $3$ vertices $u, v, w$ such that there is an edge from $u$ to $v$ and an edge from $v$ to $w$ but not from $u$ to $w$.\n\n-----Input-----\nThe first line of input contains two integers $n$ and $m$ indicating the number of vertices and the number of edges in the graph, respectively.\n\nEach of the following $m$ lines contains two integers $u$ and $v$ denoting that there is an edge from $u$ to $v$.\n\nThe last line of input contains $n$ integers $a_1, \\ldots, a_n$ which denote the number of directed triangles in the graph.\n\n-----Output-----\nOutput a single integer denoting the number of directed triangles in the graph.\n\n-----Examples-----\nSample Input:\n4 3\n0 1\n0 2\n0 3\n1 2\nSample Output:\n0\n\nSample Input:\n4 3\n0 1\n0 2\n0 3\n1 2\nSample Output:\n1\n\nSample Input:\n4 3\n0 1\n0 2\n0 3\n1 2\nSample Output:\n0\n\n---Problem 696---\nYou are given a directed graph",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\nassert solution(\"4 3 4 4\\n2 0 2\") == \"impossible\"\nassert solution(\"4 2 2 1\\n2 0 1\") == \"impossible\"\n\n-----Explanation-----\nIn this example, if all the students come after the 4th slot, the 2nd slot would become empty in the end. The refill scheme is 2, 3, 0.\n\nIn this example, if all the students come after the 4th slot, the 2nd slot would become empty in the end. The refill scheme is impossible.\n\nIn this example, the students come after the 3rd slot. The 1st slot would become empty in the end. The refill scheme is 2, 3, 0.\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 58
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\nassert solution(\"4 3 3 4\\n0 1 4\") == \"impossible\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5 3 3 4\n0 1 4\n\"\"\") == \"2 3 0\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 3 4\\n0 1 4') == '2 3 0'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 3 4\\n0 1 4') == '2 3 0'\n\n-----Explanation-----\nThe maximum number of students getting a cold bottle is $3$, so there are three possible refill schemes:\n\n{0: 1, 1: 2, 2: 3, 3: 4}\n{0: 4, 1: 3, 2: 2, 3: 1}\n{0: 4, 1: 2, 2: 1, 3: 3}\nThe first one is optimal, because it optimizes the probability of getting a cold bottle.\n\n>>> solution('5 3 3 4\\n0 1 4')\n'2 3 0'\n\"\"\"\n\nfrom sys import stdin, stdout\nimport random",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 3 4\\n0 1 4') == '2 3 0'\nassert solution('1 1 1 1\\n1') == 'impossible'\nassert solution('5 3 3 4\\n0 1 4\\n0 1 2') == '2 3 0'\nassert solution('5 3 3 4\\n0 1 4\\n0 1 2\\n0 1 3') == 'impossible'\nassert solution('5 3 3 4\\n0 1 4\\n0 1 3\\n0 1 2') == 'impossible'\n",
        "num_ids_2": 37,
        "num_ids_4": 91
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 3 4\\n0 1 4') == '2 3 0'\n\n-----Constraints-----\nTime limit: 1 second\nMemory limit: 256 MB\ninput: standard input\noutput: standard output\n\n\"\"\"\n\nimport sys\n\nn, m, s, d = map(int, input().split())\nc = list(map(int, input().split()))\n\nprob = 0\nfor i in range(m):\n    if c[0] > 0:\n        c[0] -= 1\n        prob += 1\n    else:\n        break\nfor i in range(m, n):\n    if c[0] < d:\n        c[0] += 1\n        prob += 1\n    else:\n        break\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 3 3 4\n0 1 4''') == '2 3 0'\n\nassert solution('''5 3 3 4\n1 4 0''') == 'impossible'\n\nassert solution('''5 3 3 4\n1 1 2\n0 2 4''') == '2 0 0'\n\nassert solution('''5 3 3 4\n1 2 4\n0 2 4''') == '2 1 0'\n\nassert solution('''5 3 3 4\n0 1 4\n0 2 4''') == 'impossible'",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\n\n\"\"\"\n\nimport math\nimport random",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nprint(solution(\"0 1 2 2 2 7\"))\n\n-----Explanation-----\nMirko found a set of 6 pieces.\n\nThe first line is the number of kings in the set.\n\nThe second line is the number of queens in the set.\n\nThe third line is the number of rooks in the set.\n\nThe fourth line is the number of bishops in the set.\n\nThe fifth line is the number of knights in the set.\n\nThe sixth line is the number of pawns in the set.\n\nMirko should add 1 king, 1 queen, 2 rooks, 2 bishops, 2 knights and 8 pawns. Therefore the output should be:\n\n\"1 0 0 0 0 1\"\n\nThe first line is the number of pieces of each type Mirko should add. The second line is the number of pieces of each type Mirko should remove.\n\nThe numbers of pieces should be non-negative.\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 0 1 1 2 2\") == \"0 0 0 0 0 0\"\nassert solution(\"0 0 0 1 1 2\") == \"0 0 0 0 0 0\"\nassert solution(\"0 0 0 0 0 1\") == \"0 0 0 0 0 0\"\n\nprint(solution(\"0 1 2 2 2 7\"))\nprint(solution(\"0 0 1 1 2 2\"))\nprint(solution(\"0 0 0 1 1 2\"))\nprint(solution(\"0 0 0 0 0 1\"))\n\n-----Problem-----\nSuppose that the king, queen, rooks, bishops, knights and pawns of two different colors are placed on a chessboard. The position of each piece is given by $x_i$ and $y_i$, where $x_0$ and $y_0$ are the coordinates of the bottom-left corner of the board. The figure below shows a chessboard with some pieces, but the king, queen, rooks, bishops, knights and pawns are missing. The figure also shows the position of the king, queen, rooks, bishops, knights and pawns.\n\n![](https://www.coursera.org/learn/math/img/chessboard-pieces.png)\n\nThe missing pieces can be assumed to be white pawns, black pawns, black rooks, white rooks, black bishops, and white bishops. The figure above shows the position of the missing pawns, rooks, bishops and knights.\n\nThe figure below shows the position of the missing pawns, rooks, bishops and knights.\n\n![](https://www.coursera.org/learn/math/img/missing-pieces.png)\n\nThe missing pieces can be assumed to be white pawns, black pawns, black rooks, white rooks, black bishops, and white bishops. The figure above shows the position of the missing pawns, rooks, bishops and knights.\n\nThe figure below shows the position of the missing pawns, rooks, bishops and knights.\n\n![](https://www.coursera.org/learn/math/img/missing-pieces-2.png)\n\nThe missing pieces can be assumed to be white pawns, black pawns, black rooks, white rooks, black bishops, and white bishops. The figure above shows the position of the missing pawns, rooks, bishops and knights.\n\nThe figure below shows the position of the missing pawns, rooks, bishops and knights.\n\n![](https://www.coursera.org/learn/math/img/missing-pieces-3.png)\n\nThe missing pieces can be assumed to be white pawns, black pawns, black rooks, white rooks, black bishops, and white bishops. The figure above shows the position of the missing pawns, rooks, bishops and knights.\n\nThe figure below shows the position of the missing pawns, rooks, bishops and knights.\n\n![](https://www.coursera.org/learn/math/img/missing-pieces-4.png)\n\nThe missing pieces can be assumed to be white pawns, black pawns, black rooks, white rooks, black bishops, and white bishops. The figure above shows the position of the missing pawns, rooks, bishops and knights.\n\nThe figure below shows the position of the missing pawns, rooks, bishops and knights.\n\n![](https://www.coursera.org/learn/math/img/missing-pieces-5.png)\n\nYou should assume that the missing pieces are all white pieces.\n\nWrite a program to determine how many white pawns, black pawns, black rooks, white rooks, black bishops, and white bishops are needed to complete the missing chess set. Your program should read six integers on a line and print the number of pawns, the number of rooks, the number of knights, the number of bishops, the number of queen and king.\n\n-----Test Format-----\nYou will be given six lines of input. Each line contains six integers, each integer between $0$ and $10$ (inclusive). The first integer is the number of white pawns, the second is the number of black pawns, the third is the number of black rooks, the fourth is the number of white rooks, the fifth is the number of black bishops, and the sixth is the number of white bishops.\n\n-----Constraints-----\nYou may assume that the missing pieces are all white pawns, black pawns, black rooks, white rooks, black bishops, and white bishops.\n\nYou may assume that the missing pieces are all white pieces.\n\n-----Sample Input-----\n2 1 1 1 1 1\n2 1 1 1 1 1\n\n0 0 0 0 0 0\n0 0 0 0 0 0\n\n2 1 1 1 1 1\n1 1 1 1 1 1\n\n0 0 0 0 0 0\n0 0 0 0 0 0\n\n2 1 1 1 1 1\n1 1 1 1 1 1\n\n0 0 0 0 0 0\n0 0 0 0 0 0\n\n-----Sample Output-----\n0 1 1 1 1 1\n0 0 0 0 0 0\n2 1 1 1 1 1\n0 0 0 0 0 0\n2 1 1 1 1 1\n0 0 0 0 0 0\n\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '0 1 2 2 2 7'\n) == '1 0 0 0 0 1'\nassert solution(\n    '2 1 1 2 2 7'\n) == '0 0 1 0 0 1'\nassert solution(\n    '5 7 5 6 6 10'\n) == '0 1 0 0 1 0'\n\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 0 2 2 2 7\") == \"0 0 0 0 0 1\"\nassert solution(\"2 1 2 2 2 7\") == \"1 1 0 0 0 1\"\nassert solution(\"2 2 2 2 2 7\") == \"0 0 0 0 0 1\"\nassert solution(\"7 2 2 2 2 7\") == \"1 1 0 0 0 1\"\n\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\nassert solution('1 0 2 2 2 7') == '1 0 0 0 0 1'\nassert solution('0 0 2 2 2 7') == '1 0 0 0 0 1'\nassert solution('0 0 0 2 2 7') == '1 0 0 0 0 1'\nassert solution('0 0 0 0 2 7') == '1 0 0 0 0 1'\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\n\"\"\"\n\nk, q, r, b, n, p = map(int, input().split())\n\nprint(k - p, q - p, r - p, b - p, n - p, k - p - n)\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\nassert solution('0 1 2 2 2 0') == '1 0 0 0 0 0'\nassert solution('1 1 1 1 1 0') == '2 0 0 0 0 0'\nassert solution('0 0 0 0 0 0') == '0 0 0 0 0 0'\nassert solution('0 0 0 0 1 0') == '0 0 0 1 0 0'\n\n-----Test Data-----\n0\n1\n0\n0\n1\n0\n\n-----Constraints-----\n'''",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\nassert solution(\"1\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3333333333333333\"\n\"\"\"\n\n\"\"\"\nIntroduction to Programming\nFind the number of guesses needed to guess the secret number\nSimple enough, right?\n\nInstead, we will use the number of guesses as a proxy for complexity.\n\nThis is the hint: complexity = log(guesses)\n\nAs a consequence, it is never possible to have guess(n) = n.\n\nIndeed, in the worst case, we would have to guess the number of digits n!\n\nIt is also not possible to have an average complexity of n, for n > 1.\n\nThe average complexity of 1 is, of course, 1.\n\nIn general, the average complexity of n is the sum of the complexities of the factors of n.\n\nFor example, the average complexity of 12 is:\n\n(1 + 1 + 1 + 1 + 1 + 2 + 2) / 6 = 0.5\n\nThe first factor of 12 is 1, so the average complexity of 12 is 0.5.\n\nThe second factor of 12 is 2, so the average complexity of 12 is 0.5.\n\nThe third factor of 12 is 3, so the average complexity of 12 is 0.5.\n\nThe forth factor of 12 is 4, so the average complexity of 12 is 0.5.\n\nThe fifth factor of 12 is 6, so the average complexity of 12 is 0.5.\n\nThe sixth factor of 12 is 6, so the average complexity of 12 is 0.5.\n\nIn general, the average complexity of n is the sum of the average complexities of the factors of n.\n\nFor example, the average complexity of 12 is (0.5 + 0.5 + 0.5 + 0.5 + 0.5 + 0.5) / 6 = 0.5.\n\nThe first factor of 12 is 1, so the average complexity of 12 is 0.5.\n\nThe second factor of 12 is 2, so the average complexity of 12 is 0.5.\n\nThe third factor of 12 is 3, so the average complexity of 12 is 0.5.\n\nThe forth factor of 12 is 4, so the average complexity of 12 is 0.5.\n\nThe fifth factor of 12 is 6, so the average complexity of 12 is 0.5.\n\nThe sixth factor of 12 is 6, so the average complexity of 12 is 0.5.\n\nThe average complexity of 12 is (0.5 + 0.5 + 0.5 + 0.5 + 0.5 + 0.5) / 6 = 0.5.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nIn general, the average complexity of n is the sum of the average complexities of the factors of n.\n\nFor example, the average complexity of 12 is (0.5 + 0.5 + 0.5 + 0.5 + 0.5 + 0.5) / 6 = 0.5.\n\nThe first factor of 12 is 1, so the average complexity of 12 is 0.5.\n\nThe second factor of 12 is 2, so the average complexity of 12 is 0.5.\n\nThe third factor of 12 is 3, so the average complexity of 12 is 0.5.\n\nThe forth factor of 12 is 4, so the average complexity of 12 is 0.5.\n\nThe fifth factor of 12 is 6, so the average complexity of 12 is 0.5.\n\nThe sixth factor of 12 is 6, so the average complexity of 12 is 0.5.\n\nThe average complexity of 12 is (0.5 + 0.5 + 0.5 + 0.5 + 0.5 + 0.5) / 6 = 0.5.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nIn general, the average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of the factors of n.\n\nThe average complexity of n is the sum of the average complexities of",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\n\nSample Input:\n3\n111111 0.3333\n222222 0.3333\n222222 0.3333\nSample Output:\n2.3333\nassert solution(\"3\\n111111 0.3333\\n222222 0.3333\\n222222 0.3333\") == \"2.3333\"\n\nSample Input:\n4\n123456 0.1111\n111111 0.3333\n222222 0.3333\n222222 0.3333\nSample Output:\n2.1111\nassert solution(\"4\\n123456 0.1111\\n111111 0.3333\\n222222 0.3333\\n222222 0.3333\") == \"2.1111\"\n\nSample Input:\n5\n111111 0.1111\n222222 0.3333\n111111 0.3333\n222222 0.3333\n111111 0.1111\nSample Output:\n4.1111\nassert solution(\"5\\n111111 0.1111\\n222222 0.3333\\n111111 0.3333\\n222222 0.3333\\n111111 0.1111\") == \"4.1111\"\n\n\"\"\"",
        "num_ids_2": 64,
        "num_ids_4": 155
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"5.6666\"\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2\n123456 0.6666\nqwerty 0.3334\"\"\") == \"1.3334\"\nassert solution(\"\"\"4\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\"\"\") == \"1.1233\"\n\"\"\",\n\"\"\"\n2\n123456 0.6666\nqwerty 0.3334\n\n3\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n\n4\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n\n5\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n\n6\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n123321 0.1233\n1233",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\n\"\"\"\n\nimport math\nimport sys\nfrom decimal import Decimal",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n\n------Test Case Input-----\n5\nasdf 0.1\nasdfgh 0.2\nfdsa 0.3\nqwert 0.4\nzxcv 0.5\n3\nasdf 0.4\nqwer 0.5\nzxcv 0.3\nSample Output:\n1.0\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str([1, 2, 4])) == '1'\nprint(solution(str([1, 2, 4])))\n\n\"\"\"\nimport math\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 4\\n') == '1'\nassert solution('3 1\\n') == '1'\nassert solution('5 2\\n') == '4'\nassert solution('3 7\\n') == '3'\n\nprint(solution(stdin))\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\n'''\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n1 2 4\") == '1'\n\"\"\"\nfrom sys import stdin\n\nLIMIT = 100_000",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n1 2 4\") == '1'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n1 2 4\") == \"1\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n1 2 4\") == \"1\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\n\"\"\"\n\nimport math\nimport sys\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 4\\n1') == '1'\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n1 2 4\") == \"1\"\nprint(solution(stdin_lines))\n\"\"\"\n\nimport math\nimport sys\nimport os\nimport time\nfrom typing import List\n\nsys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                             os.path.pardir))\nfrom utils import file_into_list\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:                                                               \\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:                                                  *        \\ng: -----------------------------------------------*----------\\nf:                                                           \\ne: ----------------------------------------------------------\\nd:                                                           \\nc:                                                           \\nb:                                                           \\na: ----------------------------------------------------------'\n\n\"\"\"",
        "num_ids_2": 168,
        "num_ids_4": 168
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\n\nassert solution('5\\nC D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:\nF: -----------------------------*-----------------*--------\nE:         *        *             *   *                  \nD: ----*------*-------**-----*-------------*-------*--------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\n\nassert solution('8\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:\nF: ------------------------------*---------------------*--------\nE:         *        *             *   *                  \nD: ----*--------**-----*-------------*-------*--------**--------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*--------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\n\nassert solution('10\\nC D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:\nF: -------------------------------*-------------------*--------\nE:         *        *             *   *                  \nD: ----*--------**-----*-------------*-------*--------**--------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*--------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\n\nassert solution('12\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:\nF: ----------------------------*------------------*--------\nE:         *        *             *   *                  \nD: ----*--------**-----*-------------*-------*--------**--------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*--------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------",
        "num_ids_2": 87,
        "num_ids_4": 174
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nC D E F G A B\") == \"G:           \\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------*-----*------\\nA:                                                  *        \\ng: -----------------------------------------------*----------\\nf:                                                           \\ne: ----------------------------------------------------------\\nd:                                                           \\nc:                                                           \\nb:                                                           \\na: ----------------------------------------------------------\"\n",
        "num_ids_2": 139,
        "num_ids_4": 139
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n27\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\n''') == '''\nG:                                                            \nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                            \ne: ----------------------------------------------------------\nd:                                                            \nc:                                                            \nb:                                                            \na: ----------------------------------------------------------\n'''\n\nassert solution('''\n12\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\n''') == '''\nG:                                                                        \nF: -------------------------------------*----------------------*-----\nE:       *   *          *             *   *                  *       *\nD: ----*-------**-----*-------------*-------*-----------------*-----*------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        *\ng: -----------------------------------------------*----------*----------\nf:                                                                        \ne: ----------------------------------------------------------*---------\nd:                                                                        \nc:                                                                        \nb:                                                                        \na: ----------------------------------------------------------*---------\n'''\n\nassert solution('''\n26\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\n''') == '''\nG:                                                                        \nF: -------------------------------------*----------------------*-----\nE:       *   *          *             *   *                  *       *\nD: ----*-------**-----*-------------*-------*-----------------*-----*------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        *\ng: -----------------------------------------------*----------*----------\nf:                                                                        \ne: ----------------------------------------------------------*---------\nd:                                                                        \nc:                                                                        \nb:                                                                        \na: ----------------------------------------------------------*---------\n'''\n\nassert solution('''\n12\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\n''') == '''\nG:                                                                        \nF: -------------------------------------*----------------------*-----\nE:       *   *          *             *   *                  *       *\nD: ----*-------**-----*-------------*-------*-----------------*-----*------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        *\ng: -----------------------------------------------*----------*----------\nf:                                                                        \ne: ----------------------------------------------------------*---------\nd:                                                                        \nc:                                                                        \nb:                                                                        \na: ----------------------------------------------------------*---------\n'''\n\nassert solution('''\n12\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\n''') == '''\nG:                                                                        \nF: -------------------------------------*----------------------*-----\nE:       *   *          *             *   *                  *       *\nD: ----*-------**-----*-------------*-------*-----------------*-----*------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        *\ng: -----------------------------------------------*----------*----------\nf:                                                                        \ne: ----------------------------------------------------------*---------\nd:                                                                        \nc:                                                                        \nb:                                                                        \na: ----------------------------------------------------------*---------\n'''",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n----\n\nWrite a program that takes an input that specifies the number of notes in a song and for each note the pitch and duration. Your program should print a text-based representation of the song on one staff. Each staff should have the following format: a $5$-line staff (for the treble clef), middle c, and one more line (for the top of the bass clef):\n\nG:           \nF: ----------------------------------------------------------\nE:           \nD: ----------------------------------------------------------\nC:           \nB: ----------------------------------------------------------\nA:           \ng: ----------------------------------------------------------\nf:           \ne: ----------------------------------------------------------\nd:           \nc:           \nb:           \na: ----------------------------------------------------------\n\nFor each song\u2019s note, print a single asterisk on a line (or between lines) indicating its pitch. Use one asterisk for the default duration, two asterisks for notes twice as long, three asterisks for notes three times as long, etc. Leave a single separating column between each pair of consecutive notes. The staff lines should be only as long as necessary to complete the song. Notes that are between lines (i.e. b-d, f, A, C, E, G) should pad with spaces out to the end the staff lines.\n\nInput Format:\nThe first line of input contains an integer $1 \\le n \\le 100$ that specifies the number of notes in the song.\nEach of the following $n$ lines contains a string of $2$ or $3$ characters, where the first character is the pitch and the second character (if present) is the duration.\n\nOutput Format:\nPrint a text-based representation of the song on one staff. Each staff should have the following format: a $5$-line staff (for the treble clef), middle c, and one more line (for the top of the bass clef):\n\nG:           \nF: ----------------------------------------------------------\nE:           \nD: ----------------------------------------------------------\nC:           \nB: ----------------------------------------------------------\nA:           \ng: ----------------------------------------------------------\nf:           \ne: ----------------------------------------------------------\nd:           \nc:           \nb:           \na: ----------------------------------------------------------\n\nFor each song\u2019s note, print a single asterisk on a line (or between lines) indicating its pitch. Use one asterisk for the default duration, two asterisks for notes twice as long, three asterisks for notes three times as long, etc. Leave a single separating column between each pair of consecutive notes. The staff lines should be only as long as necessary to complete the song. Notes that are between lines (i.e. b-d, f, A, C, E, G) should pad with spaces out to the end the staff lines.\n\nSample Input:\n9\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\nSample Output:\nG:                                                       \nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                       \ne: ----------------------------------------------------------\nd:                                                       \nc:                                                       \nb:                                                       \na: ----------------------------------------------------------",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:                                                                                            \\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\na:                                                  *        \\ng: -----------------------------------------------*----------\\nf:                                                                           \\ne: ----------------------------------------------------------\\nd:                                                                           \\nc:                                                                           \\nb:                                                                           \\na: ----------------------------------------------------------'\n\"\"\"\n\nfrom typing import List\n\npitches = {'C': 0, 'D': 2, 'E': 4, 'F': 5, 'G': 7, 'A': 9, 'B': 11}",
        "num_ids_2": 172,
        "num_ids_4": 172
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:    \nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stu_in) == stu_out\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\nC E2 G B') == 'G:    F: ----------------------\\n'\\\n                                             'E:    E     E    E    E    E\\n'\\\n                                             'D: ----------------------\\n'\\\n                                             'C:    C     C    C    C    C\\n'\\\n                                             'B:     B     B    B    B    B\\n'\\\n                                             'A:     A     A    A    A    A\\n'\\\n                                             'g: -------------------\\n'\\\n                                             'f:     f     f    f    f    f\\n'\\\n                                             'e: -------------------\\n'\\\n                                             'd:     d     d    d    d    d\\n'\\\n                                             'c:     c     c    c    c    c\\n'\\\n                                             'b:     b     b    b    b    b\\n'\\\n                                             'a: -------------------'\n\nassert solution('8\\nC D E F G A B C D E2 F G A B C2') == 'G:    F: -------------------------------------*--------------------\\n'\\\n                                             'E:    E     E    E    E    E    E    E    E    E\\n'\\\n                                             'D: -------------------------------------*------------------------------\\n'\\\n                                             'C:     C     C    C    C    C    C     C     C\\n'\\\n                                             'B:     B     B    B    B    B     B     B     B\\n'\\\n                                             'A:     A     A    A    A    A     A     A     A\\n'\\\n                                             'g: -------------------*----------*----------*----------*----------*----------\\n'\\\n                                             'f:     f     f    f    f     f     f     f     f     f\\n'\\\n                                             'e: -------------------*----------*----------*----------*----------*----------\\n'\\\n                                             'd:     d     d    d     d     d     d     d     d     d\\n'\\\n                                             'c:     c     c     c     c     c     c     c     c     c\\n'\\\n                                             'b:     b     b     b     b     b     b     b     b     b\\n'\\\n                                             'a: -------------------'\n\nassert solution('1\\n
        "num_ids_2": 66,
        "num_ids_4": 622
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 2\\n1 2 3\") == \"possible\"\nassert solution(\"3 2 2\\n1 2 3\") == \"possible\"\nassert solution(\"2 2 2\\n3 2 1\") == \"impossible\"\nassert solution(\"1 1 1\\n1 1 1\") == \"impossible\"\nassert solution(\"4 2 2\\n2 4 4\") == \"possible\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('3\\n1 1 2') == 'possible'\nassert solution('3\\n1 1 3') == 'possible'\nassert solution('3\\n1 2 2') == 'possible'\nassert solution('3\\n1 1 3') == 'possible'\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 1\\n1 1 1') == 'possible'\nassert solution('1 1 1\\n1 1 1') == 'possible'\nassert solution('1 1 1\\n1 1 1') == 'possible'\nassert solution('2 1 1\\n1 1 1') == 'possible'\nassert solution('1 1 1\\n2 1 1') == 'possible'\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 1\\n1 1 1\") == \"possible\"\nassert solution(\"3 1 1\\n1 1 1\\n1 1 1\") == \"possible\"\nassert solution(\"3 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"possible\"\nassert solution(\"3 1 1\\n1 2 2\\n1 1 1\") == \"possible\"\nassert solution(\"3 1 1\\n1 1 1\\n1 1 1\\n1 2 2\") == \"possible\"\n",
        "num_ids_2": 41,
        "num_ids_4": 92
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('4\\n1 1 1 2') == 'possible'\nassert solution('2\\n1 2') == 'impossible'\nassert solution('7\\n2 4 6 8 10 12 14') == 'impossible'\n\nprint(solution(input()))\n",
        "num_ids_2": 33,
        "num_ids_4": 68
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"6\\n1 2 2 3 3 3\") == \"possible\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"possible\"\nassert solution(\"5\\n1 2 3 3 3\") == \"possible\"\nassert solution(\"5\\n1 2 4 5 6\") == \"possible\"\n",
        "num_ids_2": 35,
        "num_ids_4": 72
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 1\\n1 1 1\") == \"possible\"\nassert solution(\"3 2 2\\n1 1 1\") == \"possible\"\nassert solution(\"3 2 2\\n1 1 2\") == \"impossible\"\nassert solution(\"2 1 1\\n1 1 1\") == \"impossible\"\nassert solution(\"3 2 2\\n1 1 3\") == \"impossible\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 1\\n1 1 1\") == 'possible'\n\nSample Input:\n4\n1 1 2\nSample Output:\nimpossible\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 1\\n') == 'possible'\nassert solution('1 1 0\\n') == 'impossible'\nassert solution('1 1 1\\n') == 'possible'\nassert solution('1 0 1\\n') == 'impossible'\nassert solution('0 1 1\\n') == 'impossible'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1 1') == \"possible\"\nassert solution('3\\n2 2 3') == \"possible\"\nassert solution('3\\n3 3 4') == \"possible\"\nassert solution('3\\n1 1 1') == \"possible\"\nassert solution('3\\n5 5 5') == \"possible\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''10\n4 3 3 2 1 2 2 1 1 3''') == 3\n\n'''\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n3\n3\n2\n1\n2\n2\n1\n1\n3''') == '3'\n\n-----Solution-----\n\"\"\"\n\nfrom collections import deque\n\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def push(self, data):\n        newNode = Node(data)\n        newNode.next = self.head\n        self.head = newNode\n\n    def remove_node(self, node):\n        curr = self.head\n        while curr.next.data!= node:\n            curr = curr.next\n        curr.next = curr.next.next\n\n    def length(self):\n        curr = self.head\n        count = 0\n        while curr:\n            count += 1\n            curr = curr.next\n        return count\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 3 2 1 2 2 1 1 3') == 3\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 3 2 1 2 2 1 1 3\") == 3\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5\\n3 2 1 2 1 3') == '3'\nassert solution('5\\n4 3 2 1 2 1 3') == '3'\nassert solution('5\\n4 3 2 1 1 3') == '2'\nassert solution('5\\n4 3 3 2 1 2 1 3') == '2'\n",
        "num_ids_2": 26,
        "num_ids_4": 63
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 3 2 1 2 2 1 1 3\") == 3\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''10\n4 3 3 2 1 2 2 1 1 3''') == '3'\nassert solution('''7\n5 2 1 2 1 1 1''') == '2'\nassert solution('''1\n1''') == '1'\n'''\n__author__ = 'jake'\n__project__ = 'leetcode'\nclass Solution(object):\n    def towers_of_hanoi(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 1\n        if n == 1:\n            return 2\n        return 2**(n-1) * self.towers_of_hanoi(n-1) + self.towers_of_hanoi(n-1)",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n3 4 1 2') == '3'\n\nassert solution('5\\n1 3 4 2') == '0'\n\nassert solution('7\\n4 1 3 2 4 1 3') == '4'\n\nassert solution('7\\n4 4 1 3 2 3 4') == '0'\n\nassert solution('7\\n5 4 4 4 1 3') == '2'",
        "num_ids_2": 32,
        "num_ids_4": 70
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == 3\n\"\"\"\n\nfrom sys import stdin\n\nclass Stack(object):\n    def __init__(self):\n        self.stack = []\n    \n    def push(self, value):\n        self.stack.append(value)\n    \n    def pop(self):\n        return self.stack.pop()\n    \n    def isEmpty(self):\n        return self.stack == []\n\nclass Stack2(object):\n    def __init__(self):\n        self.stack = []\n    \n    def push(self, value):\n        self.stack.append(value)\n    \n    def pop(self):\n        return self.stack.pop()\n    \n    def isEmpty(self):\n        return self.stack == []",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61') == '35.54'\n\n'''\n\nwith open('1.in', 'r') as f:\n    n = int(f.readline())\n    for _ in range(n):\n        line = f.readline()\n        name, a, b, c, d, e, f, g, h, i = line.split()\n        a, b, c, d, e, f, g, h, i = [float(x) for x in (a, b, c, d, e, f, g, h, i)]\n        \n    \n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\nASHMEADE 9.90 8.85\\nBOLT 9.69 8.72\\nCARTER 9.78 8.93') == '35.54\\nCARTER\\nBOLT\\nPOWELL'\nassert solution('1\\nASHMEADE 9.90 8.85') == '9.90'\nassert solution('2\\nBOLT 9.69 8.72\\nCARTER 9.78 8.93') == '9.69\\nCARTER\\nBOLT\\nPOWELL'\nassert solution('2\\nBOLT 9.69 8.72\\nCARTER 9.78 8.93\\nASHMEADE 9.90 8.85') == '9.69\\nCARTER\\nBOLT\\nPOWELL\\nASHMEADE'\nassert solution('3\\nBOLT 9.69 8.72\\nCARTER 9.78 8.93\\nASHMEADE 9.90 8.85\\nFRATER 9.88 8.92') == '9.69\\nCARTER\\nBOLT\\nPOWELL\\nASHMEADE\\nFRATER'\n",
        "num_ids_2": 81,
        "num_ids_4": 191
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\nASHMEADE 9.90 8.85\nBLAKE 9.69 8.72\nBOLT 9.58 8.43\nCARTER 9.78 8.93\nFRATER 9.88 8.92\nPOWELL 9.72 8.61\n\"\"\") == \"35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE\"\n\"\"\"\n",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\"\n\n---",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61') == '35.54'\n\nassert solution('6\\nFLUHER 9.92 8.47\\nBLAKE 8.72 7.97\\nFLUHER 9.88 8.47\\nBLAKE 8.72 7.97\\nBOLT 8.88 8.49\\nCARTER 9.95 8.43\\nPOWELL 9.70 8.74') == '38.18'\n\nassert solution('6\\nLAMB 5.19 8.44\\nDODGE 9.18 7.22\\nMULLER 8.04 6.56\\nDODGE 9.18 7.22\\nLAMB 5.19 8.44\\nMULLER 8.04 6.56\\nFLUHER 9.96 7.63\\nDODGE 9.18 7.22') == '22.22'\n\nassert solution('6\\nLAMB 5.19 8.44\\nDODGE 9.18 7.22\\nMULLER 8.04 6.56\\nDODGE 9.18 7.22\\nLAMB 5.19 8.44\\nMULLER 8.04 6.56\\nFLUHER 9.96 7.63\\nDODGE 9.18 7.22') == '22.22'\n\nassert solution('6\\nFLUHER 9.96 7.63\\nDODGE 9.18 7.22\\nMULLER 8.04 6.56\\nDODGE 9.18 7.22\\nLAMB 5.19 8.44\\nMULLER 8.04 6.56\\nFLUHER 9.96 7.63\\nDODGE 9.18 7.22') == '22.22'",
        "num_ids_2": 164,
        "num_ids_4": 364
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n\"\"\"\n\nimport math",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\\nCARTER\\nBOLT\\nPOWELL\"\n\n\"\"\"\n",
        "num_ids_2": 90,
        "num_ids_4": 90
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == '10.0'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n1\\n') == '15.0'\n\"\"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 69
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6\nASHMEADE 9.90 8.85\nBLAKE 9.69 8.72\nBOLT 9.58 8.43\nCARTER 9.78 8.93\nFRATER 9.88 8.92\nPOWELL 9.72 8.61''') == '35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE'",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2\\n2 4') == 2\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6') == '2'\nassert solution('2\\n1 2\\n5 6') == '1'\nassert solution('3\\n1 2\\n3 4\\n5 6') == '1'\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 62
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdi) == '''\n'''\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2\\n2 4\\n5 6\\n\") == \"2\"\n\n---Problem 1:\nImplement the solution function for this problem.\n\nInput Format:\nThe first line contains a non-negative integer $2 \\leq N \\leq 100$, giving the number of minions in your company.\nThe next $N$ lines each describe the temperature preferences of all your minions. The $i$-th line consists of two single space separated integers $L$ and $U$ ($1 \\le L \\le U \\le 2N$), which denotes that the $i$-th minion likes any temperature between $L$ and $U$, inclusively.\n\nConstraints:\n1 <= N <= 100\n1 <= L <= U <= 2N\n\nOutput Format:\nPrint an integer denoting the minimum number of rooms you need to set up such that it would be possible to assign minions to rooms as discussed earlier.\n\nSample Input:\n2\n1 2\n2 4\nSample Output:\n1\n---Problem 2:\nYou are the boss of ACM (Air Conditioned Minions), an upstanding company with a single goal of world domination.\n\nThe company has $N$ minions. Each minion works evilly from early morning until evening inside a super secret bunker in Helsinki. After much deliberation, you decided to move your headquarters to Singapore. However, unlike Helsinki, Singapore is very hot, so the entire complex must be air conditioned. With strenuous working hours (under minimum wage too), it is imperative that all your minions work under optimal work condition. In particular, all minions must like the temperatures of the rooms they are in.\n\nYou are planning to construct several rooms in your new hideout, and assign your minions there. You fix the temperature of each room to any value you want (different rooms may have different temperatures). After you fix the temperatures, you will assign each of your minions to these rooms (a room can hold any number of minions). You want all minions to like the temperatures of their assigned rooms. Each minion likes an interval of temperature, and these preferences will be given to you.\n\nAir conditioners are very expensive to maintain. Thus, you want to construct as few rooms as possible. What is the minimum number of rooms you need to set up such that it would be possible to assign minions to rooms as discussed earlier?\n\n-----Input-----\nThe first line contains a non-negative integer $2 \\leq N \\leq 100$, giving the number of minions in your company. The next $N$ lines each describe the temperature preferences of all your minions. The $i$-th line consists of two single space separated integers $L$ and $U$ ($1 \\le L \\le U \\le 2N$), which denotes that the $i$-th minion likes any temperature between $L$ and $U$, inclusively.\n\n-----Output-----\nPrint an integer denoting the minimum number of rooms you need to set up such that it would be possible to assign minions to rooms as discussed earlier.\n\nSample Input:\n4\n1 2\n2 4\n3 5\n5 7\nSample Output:\n2\n---Problem 3:\nImplement the solution function for this problem.\n\nInput Format:\nThe first line contains a non-negative integer $2 \\leq N \\leq 100$, giving the number of candidates in the election.\nThe next $N$ lines each describe the ballots of all the candidates. The $i$-th line consists of $N$ single space separated integers which are the preferences of the $i$-th candidate.\n\nConstraints:\n1 <= N <= 100\n1 <= L <= U <= 2N\n\nOutput Format:\nPrint an integer denoting the number of winners of the election, in the range of $1$ to $N$.\n\nSample Input:\n4\n1 2 3 4\n2 3 1 4\n1 2 4 3\n3 4 1 2\nSample Output:\n2\n---Problem 4:\nImplement the solution function for this problem.\n\nInput Format:\nThe first line contains a non-negative integer $2 \\leq N \\leq 100$, giving the number of candidates in the election.\nThe next $N$ lines each describe the ballots of all the candidates. The $i$-th line consists of $N$ single space separated integers which are the preferences of the $i$-th candidate.\n\nConstraints:\n1 <= N <= 100\n1 <= L <= U <= 2N\n\nOutput Format:\nPrint an integer denoting the number of winners of the election, in the range of $1$ to $N$.\n\nSample Input:\n4\n1 2 3 4\n2 3 1 4\n1 2 4 3\n3 4 1 2\nSample Output:\n1\n---Problem 5:\nImplement the solution function for this problem.\n\nInput Format:\nThe first line contains a non-negative integer $2 \\leq N \\leq 100$, giving the number of candidates in the election.\nThe next $N$ lines each describe the ballots of all the candidates. The $i$-th line consists of $N$ single space separated integers which are the preferences of the $i$-th candidate.\n\nConstraints:\n1 <= N <= 100\n1 <= L <= U <= 2N\n\nOutput Format:\nPrint an integer denoting the number of winners of the election, in the range of $1$ to $N$.\n\nSample Input:\n4\n1 2 3 4\n2 3 1 4\n1 2 4 3\n3 4 1 2\nSample Output:\n2\n---Problem 6:\nImplement the solution function for this problem.\n\nInput Format:\nThe first line contains a non-negative integer $2 \\leq N \\leq 100$, giving the number of candidates in the election.\nThe next $N$ lines each describe the ballots of all the candidates. The $i$-th line consists of $N$ single space separated integers which are the preferences of the $i$-th candidate.\n\nConstraints:\n1 <= N <= 100\n1 <= L <= U <= 2N\n\nOutput Format:\nPrint an integer denoting the number of winners of the election, in the range of $1$ to $N$.\n\nSample Input:\n4\n1 2 3 4\n2 3 1 4\n1 2 4 3\n3 4 1 2\nSample Output:\n1\n---Problem 7:\nImplement the solution function for this problem.\n\nInput Format:\nThe first line contains a non-negative integer $2 \\leq N \\leq 100$, giving the number of candidates in the election.\nThe next $N$ lines each describe the ballots of all the candidates. The $i$-th line consists of $N$ single space separated integers which are the preferences of the $i$-th candidate.\n\nConstraints:\n1 <= N <= 100\n1 <= L <= U <= 2N\n\nOutput Format:\nPrint an integer denoting the number of winners of the election,",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2\n2 4\n5 6''') == '2'\n\nassert solution('''2\n1 2\n2 4''') == '1'\n\nassert solution('''1\n1 2''') == '0'\n'''",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n5 6\") == \"2\"\nassert solution(\"1 1\\n3 3\") == \"1\"\n\"\"\"\n\nn = int(input())\nl = []\nfor _ in range(n):\n    l.append(input().split(\" \"))\nl = [list(map(int, i)) for i in l]\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2\\n2 4\\n5 6\") == '2'\nprint(solution(\"3\\n1 2\\n2 4\\n5 6\"))\n\nsolution(stdin)",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 2\n2 4\n5 6\n''') == '2'\nassert solution('''\n2\n1 2\n2 4\n5 6\n''') == '1'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2\\n2 4\\n5 6\") == '2'\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n2 3\\n5 6\\n') == '2'",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('hey') == 'heey'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"hey\") == \"heey\"\nassert solution(\"huey\") == \"heehe\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('hey') == 'hee'\nassert solution('yeh') == 'yehe'\nassert solution('hye') == 'hee'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"heey\") == \"heehee\"\nassert solution(\"hey\") == \"heey\"\nassert solution(\"heeey\") == \"heehee\"\nassert solution(\"heeeeee\") == \"heehee\"\nassert solution(\"heyhey\") == \"heehee\"\n",
        "num_ids_2": 23,
        "num_ids_4": 49
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"hey\") == \"heey\"\nassert solution(\"hee\") == \"hee\"\nassert solution(\"h\") == \"h\"\nassert solution(\"he\") == \"hee\"\nassert solution(\"heyyyyy\") == \"heeeee\"\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"hey\") == \"heey\"\nassert solution(\"hee\") == \"hee\"\nassert solution(\"heeeee\") == \"heeeeee\"\nassert solution(\"hee\") == \"hee\"\nassert solution(\"Hello\") == \"heeellooo\"\n",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('hey') == 'heey'\nassert solution('Later!') == 'LaterAlligator!'\nassert solution('Later!!') == 'LaterAlligator!!'\nassert solution('Later! Later!') == 'LaterAlligator! LaterAlligator!'\n\"\"\"\n\ns = input()\nprint(''.join([s[i]*2 for i in range(len(s))]))",
        "num_ids_2": 24,
        "num_ids_4": 57
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"hey\") == \"heey\"\nassert solution(\"hee\") == \"hee\"\nassert solution(\"heeeeee\") == \"heeeeeeeeeee\"\nassert solution(\"h\") == \"h\"\nassert solution(\"heeeeeyy\") == \"heeeeeyy\"\n",
        "num_ids_2": 21,
        "num_ids_4": 46
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('hey') == 'hee'\nassert solution('heeeeee') == 'hee'\nassert solution('heeeeee ee') == 'heeeeee ee'\nassert solution('hey hey hey hey') == 'hee hee hee hee hee'\n",
        "num_ids_2": 18,
        "num_ids_4": 48
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"hey\") == \"heey\"\nassert solution(\"a\") == \"hee\"\nassert solution(\"heeeeee\") == \"heeheeee\"\nassert solution(\"goodbye\") == \"gheeoggdbye\"\nassert solution(\"hello world\") == \"heeeeeeellllllllooo world\"\n",
        "num_ids_2": 21,
        "num_ids_4": 51
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\nprint(\"Passed!\")\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\nassert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\nassert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\nassert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\n\nassert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\n",
        "num_ids_2": 86,
        "num_ids_4": 172
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(sample_input) == solution(\n    '\\n'.join(map(lambda line:''.join(map(str, line)), sample_input.split('\\n')[:-1]))\n)\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\nassert solution(\"3\\n0 1 2\\n1 0 2\\n2 2 0\") == \"1 2\"\nassert solution(\"2\\n0 1\\n1 0\") == \"1\"\nassert solution(\"2\\n0 1\\n1 0\") == \"1\"\nassert solution(\"2\\n0 1\\n1 0\") == \"1\"\n",
        "num_ids_2": 69,
        "num_ids_4": 105
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\\n\"\n\nprint(solution(stdin))\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n0\\n1\\n2') == '1\\n2\\n1\\n3'\nassert solution('2\\n1\\n0\\n1\\n2') == '1\\n2\\n1\\n3'\nassert solution('3\\n1\\n0\\n2\\n3') == '1\\n2\\n1\\n3'\nassert solution('3\\n2\\n0\\n1\\n3') == '1\\n2\\n3\\n1\\n0'\n\nSample Input:\n5\n0 1 1 2 3\n1 0 2 3 4\n1 2 0 4 5\n2 3 0 5 6\n3 4 0 6 7\nSample Output:\n1 2\n1 3\n1 4\n2 4\n3 4\n",
        "num_ids_2": 36,
        "num_ids_4": 98
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0''') == '1 2\\n1 3\\n1 4\\n'\n\nassert solution('''2\n0 1 1\n1 0 2\n1 2 0''') == '1 2\\n'\n\nassert solution('''5\n3 0 2 0 3\n1 0 2 3 4\n2 3 0 3 4\n4 3 3 0 4\n4 2 3 3 0''') == '2 3\\n3 4\\n'\n\nassert solution('''2\n1 1 0\n1 0 2''') == '1 2\\n'\n\nprint(solution(input()))",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\nassert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\n",
        "num_ids_2": 86,
        "num_ids_4": 86
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nassert solution(\"WGDRMJYB\") == \"KWEHWJ\"\nassert solution(\"WGDRMJYB\") == \"KWEHWJ\"\nassert solution(\"WGDRMJYB\") == \"KWEHWJ\"\nassert solution(\"WGDRMJYB\") == \"KWEHWJ\"\n\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 72
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\n\n-----\nDRM Encryption is a new kind of encryption. Given an encrypted string (which we\u2019ll call a DRM message), the decryption process involves three steps: Divide, Rotate and Merge. This process is described in the following example with the DRM message \u201cEWPGAJRB\u201d:Divide\n\n\u2013 First, divide the message in half to \u201cEWPG\u201d and \u201cAJRB\u201d.Rotate\n\n\u2013 For each half, calculate its rotation value by summing up the values of each character ($\\textrm{A} = 0, \\textrm{B} = 1, \\ldots, \\textrm{Z} = 25$). The rotation value of \u201cEWPG\u201d is $4 + 22 + 15 + 6 = 47$. Rotate each character in \u201cEWPG\u201d $47$ positions forward (wrapping from Z to A when necessary) to obtain the new string \u201cZRKB\u201d. Following the same process on \u201cAJRB\u201d results in \u201cBKSC\u201d.Merge\n\n\u2013 The last step is to combine these new strings (\u201cZRKB\u201d and \u201cBKSC\u201d) by rotating each character in the first string by the value of the corresponding character in the second string. For the first position, rotating \u2018Z\u2019 by \u2018B\u2019 means moving it forward 1 character, which wraps it around to \u2018A\u2019. Continuing this process for every character results in the final decrypted message, \u201cABCD\u201d.\n\n----\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"EWPGAJRB\") == 'ABCD'\nassert solution('WPIWYGKL') == 'ENKQAUIC'\nassert solution('KXGKPWK') == 'AEJOUTC'\nassert solution('NQWKLK') == 'IMYX'\nassert solution('KWXQOE') == 'AXW'\n",
        "num_ids_2": 35,
        "num_ids_4": 71
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nassert solution(\"ZRKB\") == \"ABCD\"\nassert solution(\"FJE\") == \"ABCD\"\nassert solution(\"VFZLXWY\") == \"ABCD\"\nassert solution(\"CRF\") == \"ABCD\"\n\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 58
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abccba\") == 2\nassert solution(\"abccdba\") == 0\nassert solution(\"abccedba\") == 4\nassert solution(\"abcbabcc\") == 3\nassert solution(\"abcbdbca\") == 3\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"abccba\") == 0\nassert solution(\"\") == 0\nassert solution(\"abcde\") == 3\nassert solution(\"abcdef\") == 0\n",
        "num_ids_2": 18,
        "num_ids_4": 34
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('a') == 0\nassert solution('b') == 0\nassert solution('c') == 1\nassert solution('d') == 1\nassert solution('ab') == 1\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('abcdef') == 0\nassert solution('abab') == 1\nassert solution('ab') == 1\nassert solution('abac') == 1\n",
        "num_ids_2": 17,
        "num_ids_4": 34
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abc') == 2\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaa\") == 0\nassert solution(\"abca\") == 1\nassert solution(\"abcc\") == 1\nassert solution(\"abcd\") == 2\nassert solution(\"abcde\") == 1\n",
        "num_ids_2": 17,
        "num_ids_4": 35
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abc\") == 2\n\n-----Note-----\nI hope the above tests don't fail. If you think you have a correct solution, please check out the solution tab and give it a very thumbs up. If you think your solution is sub-optimal, feel free to post your thoughts on the discussion tab.",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abc\") == \"2\"\nassert solution(\"abcdd\") == \"2\"\nassert solution(\"ac\") == \"1\"\nassert solution(\"a\") == \"0\"\nassert solution(\"aa\") == \"0\"\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"abcd\") == 0\nassert solution(\"aab\") == 2\n\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 26
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abc') == 2, 'WA'\n\nassert solution('adc') == 0, 'WA'\n\nassert solution('aabb') == 1, 'WA'\n\nassert solution('abcd') == 0, 'WA'\n\nassert solution('aabbcc') == 2, 'WA'",
        "num_ids_2": 25,
        "num_ids_4": 51
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aaah') == 'no'\nassert solution('aaaaah') == 'go'\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaah\") == \"no\"\nassert solution(\"a\") == \"go\"\nassert solution(\"aa\") == \"go\"\nassert solution(\"aaaaa\") == \"no\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aaah\") == \"no\"\nassert solution(\"aaaaah\") == \"go\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"hhhhh\") == \"no\"\nassert solution(\"aaaaa\") == \"no\"\nassert solution(\"aaaaaa\") == \"go\"\nassert solution(\"h\") == \"no\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aaah') == 'go'\nassert solution('aah') == 'no'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aaah') == 'go'\nassert solution('aaaah') == 'go'\nassert solution('a') == 'no'\n\nprint(\"All tests passed.\")\n",
        "num_ids_2": 22,
        "num_ids_4": 32
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aaah') == 'no'\nassert solution('aaaaaah') == 'go'\n\nprint(solution('aaah'))\nprint(solution('aaaaaah'))\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaah\") == \"no\"\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaah\") == \"no\"\n\"\"\"\n\naaah = input()\naah = input()",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aaah\") == \"no\"\nassert solution(\"aaaaah\") == \"go\"\nassert solution(\"aaaaaaaaaaaaaaaaaah\") == \"no\"\nassert solution(\"aaaaaaaaaaaaaaah\") == \"go\"\nassert solution(\"aaaaaaaaaaaaaaaah\") == \"go\"\n",
        "num_ids_2": 22,
        "num_ids_4": 50
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"B2A1B2A2B1A2A2A2\") == \"B\"\nassert solution(\"B2A1B2A2B1A2A2A2\") == \"A\"\nassert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A2B1A2B2A1A2') == 'B'\n\"\"\"",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"B2A1B2A2B1A1A2A2A2\") == \"B\"\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''A2B1A2B2A1A2A2A2''') == 'A'\nassert solution('''A2B1A2B2A1A2A2A2''') == 'B'\n'''",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\n\n\"\"\"\n\nimport itertools\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"B2B2B1A1A1A1B1A2B2\") == \"B\"\n\"\"\"\n\nfrom __future__ import annotations\n\nimport re\n\nre_points = re.compile(r'(?P<letter>[AB])1+(?P<points>[12])')\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n\"\"\"\n\nimport re\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2B1A2B2A1A2\") == \"A\"\nassert solution(\"B2B1A2B2\") == \"B\"\nassert solution(\"A2B1A2A2B2\") == \"A\"\n\"\"\"\n\nimport numpy as np\n",
        "num_ids_2": 46,
        "num_ids_4": 82
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n\"\"\"\n\nimport re\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n1\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\",
        "num_ids_2": 1358,
        "num_ids_4": 1358
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == \"21\"\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n2 3\") == \"2\"\n\"\"\"\n\nN, M = input().split()\nA, B, K, G = input().split()\nA, B, K, G = int(A), int(B), int(K), int(G)\nroads = [[int(x) for x in input().split()] for i in range(M)]\nroads = [x for x in roads if x[0]!= x[1]]\ntime_to_complete = float('inf')\n\nfor x in roads:\n    if x[0] == A and x[2] == K:\n        time_to_complete = min(time_to_complete, x[1] + K)\n    elif x[1] == B and x[2] == K:\n        time_to_complete = min(time_to_complete, x[0] + K)\n    elif x[0] == A and x[2] == G:\n        time_to_complete = min(time_to_complete, x[1] + G)\n    elif x[1] == B and x[2] == G:\n        time_to_complete = min(time_to_complete, x[0] + G)\n\nprint(time_to_complete)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n4 4\n1 6 20 4\n5 3 2 4\n1 2 2\n2 3 8\n2 4 3\n3 6 10\n3 5 15\nSample Output:\n2\n\"\"\"\n\n\"\"\"\n8 10\n1 7 3\n1 8 4\n2 5 2\n3 4 6\n3 8 6\n4 7 1\n4 8 3\n5 6 3\n6 7 1\nSample Output:\n6\n\"\"\"\n\n\"\"\"\n3 3\n1 2 5\n1 3 2\n1 2 3\nSample Output:\n3\n\"\"\"\n\n\"\"\"\n4 4\n1 6 20 4\n5 3 2 4\n1 2 2\n2 3 8\n2 4 3\n3 6 10\n3 5 15\nSample Output:\n2\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == \"21\"\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''6 5\n1 6 20 4\n5 3 2 4\n1 2 2\n2 3 8\n2 4 3\n3 6 10\n3 5 15''') == '21'\n\nassert solution('''8 5\n1 6 20 4\n5 3 2 4\n1 2 2\n2 3 8\n2 4 3\n3 6 10\n3 5 15\n4 7 9\n4 8 10\n4 9 12\n4 10 13\n4 11 15\n5 7 15\n5 8 18\n5 9 19\n5 10 20\n5 11 22\n5 12 23\n5 13 25\n5 14 26\n6 7 19\n6 8 21\n6 9 24\n6 10 25\n6 11 26\n6 12 27\n6 13 28\n6 14 29\n6 15 30\n6 16 31\n7 8 28\n7 9 32\n7 10 33\n7 11 34\n7 12 35\n7 13 36\n7 14 37\n7 15 38\n7 16 39\n7 17 40\n7 18 41\n7 19 42\n7 20 43\n7 21 44\n7 22 45\n7 23 46\n8 9 34\n8 10 35\n8 11 36\n8 12 37\n8 13 38\n8 14 39\n8 15 40\n8 16 41\n8 17 42\n8 18 43\n8 19 44\n8 20 45\n8 21 46\n8 22 47\n8 23 48\n8 24 49\n8 25 50\n9 10 33\n9 11 34\n9 12 35\n9 13 36\n9 14 37\n9 15 38\n9 16 39\n9 17 40\n9 18 41\n9 19 42\n9 20 43\n9 21 44\n9 22 45\n9 23 46\n9 24 47\n9 25 48\n9 26 49\n10 11 36\n10 12 37\n10 13 38\n10 14 39\n10 15 40\n10 16 41\n10 17 42\n10 18 43\n10 19 44\n10 20 45\n10 21 46\n10 22 47\n10 23 48\n10 24 49\n10 25 50\n10 26 51\n10 27 52\n10 28 53\n10 29 54\n10 30 55\n10 31 56\n10 32 57\n10 33 58\n10 34 59\n10 35 60\n10 36 61\n10 37 62\n10 38 63\n10 39 64\n10 40 65\n10 41 66\n10 42 67\n10 43 68\n10 44 69\n10 45 70\n10 46 71\n10 47 72\n10 48 73\n10 49 74\n10 50 75\n10 51 76\n10 52 77\n10 53 78\n10 54 79\n10 55 80\n10 56 81\n10 57 82\n10 58 83\n10 59 84\n10 60 85\n10 61 86\n10 62 87\n10 63 88\n10 64 89\n10 65 90\n10 66 91\n10 67 92\n10 68 93\n10 69 94\n10 70 95\n10 71 96\n10 72 97\n10 73 98\n10 74 99\n10 75 100\n10 76 101\n10 77 102\n10 78 103\n10 79 104\n10 80 105\n10 81 106\n10 82 107\n10 83 108\n10 84 109\n10 85 110\n10 86 111\n10 87 112\n10 88 113\n10 89 114\n10 90 115\n10 91 116\n10 92 117\n10 93 118\n10 94 119\n10 95 120\n10 96 121\n10 97 122\n10 98 123\n10 99 124\n10 100 125\n10 101 126\n10 102 127\n10 103 128\n10 104 129\n10 105 130\n10 106 131\n10 107 132\n10 108 133\n10 109 134\n10 110 135\n10 111 136\n10 112 137\n10 113 138\n10 114 139\n10 115 140\n10 116 141\n10 117 142\n10 118 143\n10 119 144\n10 120 145\n10 121 146\n10 122 147\n10 123 148\n10 124 149\n10 125 150\n10 126 151\n10 127 152\n10 128 153\n10 129 154\n10 130 155\n10 131 156\n10 132 157\n10 133 158\n10 134 159\n10 135 160\n10 136 161\n10 137 162\n10 138 163\n10 139 164\n10 140 165\n10 141 166\n10 142 167\n10 143 168\n10 144 169\n10 145 170\n10 146 171\n10 147 172\n10 148 173\n10 149 174\n10 150 175\n10 151 176\n10 152 177\n10 153 178\n10 154 179\n10 155 180\n10 156 181\n10 157 182\n10 158 183\n10 159 184\n10 160 185\n10 161 186\n10 162 187\n10 163 188\n10 164 189\n10 165 190\n10 166 191\n10 167 192\n10 168 193\n10 169 194\n10 170 195\n10 171 196\n10 172 197\n10 173 198\n10 174 199\n10 175 200\n10 176 201\n10 177 202\n10 178 203\n10 179 204\n10 180 205\n10 181 206\n10 182 207\n10 183 208\n10 184 209\n10 185 210\n10 186 211\n10 187 212\n10 188 213\n10 189 214\n10 190 215\n10 191 216\n10 192 217\n10 193 218\n10 194 219\n10 195 220\n10 196 221\n10 197 222\n10 198 223\n10 199 224\n10 200 225\n10 201 226\n10 202 227\n10 203 228\n10 204 229\n10 205 230\n10 206 231\n10 207 232\n10 208 233\n10 209 234\n10 210 235\n10 211 236\n10 212 237\n10 213 238\n10 214 239\n10 215 240\n10 216 241\n10 217 242\n10 218 243\n10 219 244\n10 220 245\n10 221 246\n10 222 247\n10 223 248\n10 224 249\n10 225 250\n10 226 251\n10 227 252\n10 228 253\n10 229 254\n10 230 255\n10 231 256\n10 232 257\n10 233 258\n10 234 259\n10 235 260\n10 236 261\n10 237 262\n10 238 263\n10 239 264\n10 240 265\n10 241 266\n10 242 267\n10 243 268\n10 244 269\n10 245 270\n10 246 271\n10 247 272\n10 248 273\n10 249 274\n10 250 275\n10 251 276\n10 252 277\n10 253 278\n10 254 279\n10 255 280\n10 256",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6 20 4\\\\n5 3 2 4\\\\n1 2 2\\\\n2 3 8\\\\n2 4 3\\\\n3 6 10\\\\n3 5 15\") == \"21\"",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 0 0\\n4 1 1\\n2 3 2\") == \"4\"\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 2 1\") == \"7\"\nassert solution(\"1 1 1 1\") == \"0\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 2 1\\n1 2 2\\n1 3 1\\n2 3 1\\n2 3 1\\n3 4 1\") == \"2\"\n\"\"\"\n\nN, M, A, B, K, G = map(int, input().split())\nintersections = {}\nfor _ in range(M):\n    start, end, time = map(int, input().split())\n    intersections[start] = intersections.get(start, []) + [(end, time)]\n    intersections[end] = intersections.get(end, []) + [(start, time)]\n    intersections[start][0][1] -= K\n    intersections[end][0][1] -= K\n    if intersections[start][0][1] < 0:\n        intersections[start].pop(0)\n    if intersections[end][0][1] < 0:\n        intersections[end].pop(0)\nG = list(map(int, input().split()))\nG.sort()\nG = [0] + G\n\nstart, end, shortest = G[0], G[0], 0\nfor i in range(1, len(G)):\n    if end < G[i]:\n        shortest += G[i] - end\n        end = G[i]\n\nfor i in range(1, len(G)):\n    if intersections[start][0][0] == G[i]:\n        shortest += intersections[start][0][1]\n        start = intersections[start][0][0]\n        intersections[start].pop(0)\n    else:\n        shortest += intersections[start][0][1] + (G[i] - G[i - 1])\n        start = G[i]\n\nprint(shortest)\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\\n1 1 5') == '21'\n\n\"\"\"\n\nfrom collections import deque, defaultdict\nfrom typing import NamedTuple, Dict, Set\nimport unittest\nfrom copy import deepcopy\n\nclass Intersection(NamedTuple):\n    id: int\n    in_streets: Dict[int, int]\n    out_streets: Dict[int, int]\n\n\nclass Solution:\n    def __init__(self, n, m, k, g):\n        self.intersections = defaultdict(Intersection)\n        self.streets = defaultdict(list)\n        self.build_intersections(n, m, k, g)\n        self.time = 0\n\n    def build_intersections(self, n, m, k, g):\n        for i in range(n):\n            self.intersections[i + 1] = Intersection(\n                id=i + 1,\n                in_streets={},\n                out_streets={}\n            )\n        for i in range(m):\n            a, b, c = [int(j) for j in stdin.readline().split()]\n            self.streets[a].append((b, c))\n            self.streets[b].append((a, c))\n            self.intersections[a].out_streets[b] = c\n            self.intersections[b].in_streets[a] = c\n        self.start = k + 1\n        self.finish = g + 1\n\n    def start_intersections(self):\n        for i in self.intersections:\n            self.intersections[i].in_streets[self.start] = 0\n\n    def dfs_min_time(self, curr, curr_time, visited, road_times):\n        if curr in visited:\n            return float('inf')\n        visited.add(curr)\n        if curr == self.finish:\n            return curr_time\n        res = float('inf')\n        for neighbour, road_time in self.intersections[curr].out_streets.items():\n            if neighbour not in visited:\n                res = min(res, road_time + self.dfs_min_time(neighbour, curr_time, visited, road_times))\n        road_times[curr] = res\n        return res\n\n    def dfs_min_time_with_start(self, curr, curr_time, visited, road_times):\n        if curr in visited:\n            return float('inf')\n        visited.add(curr)\n        if curr == self.start:\n            return 0\n        res = float('inf')\n        for neighbour, road_time in self.intersections[curr].in_streets.items():\n            if neighbour not in visited:\n                res = min(res, road_time + self.dfs_min_time_with_start(neighbour, curr_time, visited, road_times))\n        road_times[curr] = res\n        return res\n\n    def min_time(self):\n        self.start_intersections()\n        visited = set()\n        road_times = {}\n        return self.dfs_min_time_with_start(self.start, 0, visited, road_times)\n\n    def min_time_with_all_times(self):\n        self.start_intersections()\n        visited = set()\n        road_times = {}\n        road_times[self.start] = 0\n        return self.dfs_min_time(self.start, 0, visited, road_times)\n\n    def solve(self):\n        print(min(self.min_time(), self.min_time_with_all_times()))\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution1(self):\n        stdin = open('test_files/Y14R5P1/A.in')\n        n, m, k, g = [int(i) for i in stdin.readline().split()]\n        self.assertEqual(solution(stdin, n, m, k, g), '21')",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\"\"\"\n\nimport re",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\nassert solution(\"D 3e2l3o1W1o3r4l2d1!2\") == \"HHHeellloWooorrrrlld!!\"\n",
        "num_ids_2": 80,
        "num_ids_4": 80
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!\"\nassert solution(\"D 2H3e2l3o1W1o3r4l2d1!2\") == \"HHHeellloWooorrrrlld!!\"\n\"\"\"\n\nimport re",
        "num_ids_2": 80,
        "num_ids_4": 80
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 'Alice'\nassert solution('3') == 'Bob'\n\nassert solution('10') == 'Alice'\nassert solution('11') == 'Bob'\n\nassert solution('100') == 'Alice'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2''') == 'Bob'\nassert solution('''1''') == 'Alice'\nassert solution('''3''') == 'Alice'\nassert solution('''5''') == 'Bob'\nassert solution('''10000''') == 'Alice'",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n') == 'Alice'\nassert solution('3\\n') == 'Bob'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == 'Bob'\nassert solution('4') == 'Alice'\nassert solution('1') == 'Alice'\nassert solution('3') == 'Alice'\nassert solution('5') == 'Alice'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n') == 'Alice'\nassert solution('1\\n') == 'Bob'\nassert solution('1\\n') == 'Bob'\nassert solution('1\\n') == 'Alice'\nassert solution('1\\n') == 'Bob'\n\n-----Problem-----\nWe want to represent a family of problems as a single function.\n\nYou are given a family of one or more problems that share the same shape. Your task is to find out whether they can all be solved using the same algorithm.\n\nThe problems are represented by a given function, f.\n\nYou are also given a collection of integers, a1,..., an, that specifies the length of the problems.\n\nTo solve the problems, you start with a single branch that is made out of one or more pieces.\n\nAt each step of the solution process, you take a piece from the collection of pieces and break it into two pieces, such that each piece has an integer length.\n\nIf the piece you take has length $1$, then the process is complete.\n\nOtherwise, you repeat the process with the first and second parts of the piece you just removed.\n\nInput Format:\nThe first line contains one integer t (1\u2264t\u22641000) \u2014 the number of problems.\n\nThe second line contains one integer n (1\u2264n\u226410^9) \u2014 the length of the longest problem.\n\nThe third line contains n integers a1,..., an (1\u2264ai\u226410^9) \u2014 the lengths of the problems.\n\nThe fourth line contains one integer c (1\u2264c\u2264n) \u2014 the number of pieces in the first problem.\n\nThe next c lines contain one integer ai (1\u2264ai\u2264n) \u2014 the lengths of the pieces of the first problem.\n\nConstraints\n1\u2264t\u22641000\n1\u2264n\u226410^9\n1\u2264ai\u2264n\n1\u2264c\u2264n\n\nOutput Format:\nIf the problems can all be solved using the same algorithm, print \"Yes\" (without the quotes). Otherwise, print \"No\" (without the quotes).\n\nSample Input 0:\n2\n4\n3 2 3 2\n1\n3\n2 2\n1\n2\n3\nSample Output 0:\nYes\n2\n3\n2\n2\n2\n2\nSample Input 1:\n2\n5\n3 7 1 4\n2\n1\n2\n3\nSample Output 1:\nYes\n4\n5\n4\n3\n3\nSample Input 2:\n1\n10\n10\n10\nSample Output 2:\nNo\n10\n10\n10\nSample Input 3:\n1\n5\n1 2 3 4 5\n3\n1 2 2\n1\n2\n3\nSample Output 3:\nNo\n3\n1\n2\n2\nSample Input 4:\n1\n5\n1 2 3 4 5\n1\n1\n1\n1\nSample Output 4:\nYes\n2\n2\n2\n2\n3\nSample Input 5:\n1\n1\n1\n1\nSample Output 5:\nYes\n1\n1\n1\n2\nSample Input 6:\n1\n2\n1 2\n1\n2\n2\nSample Output 6:\nNo\n1\n1\n1\n1\n2\nSample Input 7:\n1\n3\n1 2 3\n1\n2\n2\nSample Output 7:\nYes\n2\n2\n2\n2\n3\nSample Input 8:\n1\n3\n1 2 3\n1\n2\n2\nSample Output 8:\nNo\n1\n1\n1\n2\n2\nSample Input 9:\n1\n5\n1 2 3 4 5\n1\n1\n1\n1\nSample Output 9:\nYes\n2\n2\n2\n2\n3\nSample Input 10:\n1\n7\n1 2 3 4 5 6 7\n1\n1\n1\n1\nSample Output 10:\nNo\n1\n1\n1\n1\n2\n2\n2\nSample Input 11:\n1\n9\n1 2 3 4 5 6 7 8 9\n1\n1\n1\n1\nSample Output 11:\nYes\n2\n2\n2\n2\n3\n3\n3\n3\n3\nSample Input 12:\n1\n8\n1 2 3 4 5 6 7 8\n1\n1\n1\n1\nSample Output 12:\nYes\n2\n2\n2\n2\n2\n2\n2\n2\n2\nSample Input 13:\n1\n9\n1 2 3 4 5 6 7 8 9\n1\n1\n1\n1\nSample Output 13:\nNo\n1\n1\n1\n1\n2\n2\n2\n2\n2\nSample Input 14:\n1\n10\n1 2 3 4 5 6 7 8 9 10\n1\n1\n1\n1\nSample Output 14:\nYes\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\nSample Input 15:\n1\n5\n1 2 3 4 5\n2\n1\n1\n1\nSample Output 15:\nYes\n1\n2\n2\n2\n2\nSample Input 16:\n1\n5\n1 2 3 4 5\n1\n1\n1\n1\nSample Output 16:\nYes\n2\n2\n2\n2\n2\nSample Input 17:\n1\n6\n1 2 3 4 5 6\n1\n1\n1\n1\nSample Output 17:\nYes\n2\n2\n2\n2\n2\n2\nSample Input 18:\n1\n9\n1 2 3 4 5 6 7 8 9\n1\n1\n1\n1\nSample Output 18:\nYes\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\nSample Input 19:\n1\n9\n1 2 3 4 5 6 7 8 9\n1\n1\n1\n1\nSample Output 19:\nNo\n1\n1\n1\n1\n2\n2\n2\n2\n2\n2\nSample Input 20:\n1\n7\n1 2 3 4 5 6 7\n1\n1\n1\n1\nSample Output 20:\nYes\n2\n2\n2\n2\n2\n2\n2\n2\n2\nSample Input 21:\n1\n6\n1 2 3 4 5 6\n1\n1\n1\n1\nSample Output 21:\nYes\n2\n2\n2\n2\n2\n2\nSample Input 22:\n1\n8\n1 2 3 4 5 6 7 8\n1\n1\n1\n1\nSample Output 22:\nYes\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\nSample Input 23:\n1\n9\n1 2 3 4 5 6 7 8 9\n1\n1\n1\n1\nSample Output 23:\nNo\n1\n1\n1\n1\n2\n2\n2\n2\n2\n2\nSample Input 24:\n1\n7\n1 2 3 4 5 6 7\n1\n1\n1\n1\nSample Output 24:\nYes\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\nSample Input 25:\n1\n10\n1 2 3 4 5 6 7 8 9 10\n1\n1\n1\n1\nSample Output 25:\nYes\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\nSample Input 26:",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"1\") == \"Bob\"\nassert solution(\"3\") == \"Alice\"\nassert solution(\"7\") == \"Alice\"\nassert solution(\"10\") == \"Bob\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2') == 'Alice'\nassert solution('3\\n3') == 'Bob'\nassert solution('4\\n1') == 'Alice'\nassert solution('5\\n2') == 'Bob'\nassert solution('8\\n4') == 'Alice'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"9\") == \"Bob\"\nassert solution(\"1\") == \"Alice\"\nassert solution(\"3\") == \"Alice\"\nassert solution(\"4\") == \"Bob\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'Bob'\nassert solution('1') == 'Alice'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"1\") == \"Alice\"\nassert solution(\"3\") == \"Bob\"\nassert solution(\"7\") == \"Alice\"\nassert solution(\"5\") == \"Bob\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 8') == '5+3=8'\nprint('Tests passed!')\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\n\"\"\"\n\ninput_list = [int(i) for i in input().split()]\n\nprint(input_list[0], input_list[1], input_list[2], sep='+')\nprint(input_list[0], input_list[2], input_list[1], sep='-')\nprint(input_list[0], input_list[1], input_list[2], sep='*')\nprint(input_list[0], input_list[2], input_list[1], sep='/')\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"5 3 10\") == \"5+3=10\"\nassert solution(\"5 3 5\") == \"5+5=10\"\nassert solution(\"5 3 15\") == \"5+5=15\"\nassert solution(\"5 3 20\") == \"5+5=20\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5 3 8) == 5 + 3 = 8\nassert solution(5 3 7) == 5 - 3 = 2\nassert solution(5 3 5) == 5 * 3 = 15\nassert solution(5 3 4) == 5 / 3 = 1\nassert solution(5 3 2) == 5 // 3 = 1\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"4 2 5\") == \"4+2=5\"\nassert solution(\"7 9 1\") == \"7+9=1\"\nassert solution(\"3 9 3\") == \"3+9=3\"\nassert solution(\"3 7 6\") == \"3+7=6\"\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"8 5 3\") == \"8-5=3\"\nassert solution(\"12 5 9\") == \"12/5=2\"\nassert solution(\"15 8 7\") == \"15*7=60\"\nassert solution(\"15 15 15\") == \"15*15=75\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 8') == '5 + 3 = 8'\nassert solution('2 2 4') == '2 + 2 = 4'\nassert solution('9 4 0') == '9 + 4 = 13'\nassert solution('7 1 0') == '7 - 1 = 6'\nassert solution('6 1 0') == '6 - 1 = 5'\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 8\") == \"5 + 3 = 8\"\n\"\"\"\n\na, b, c = [int(x) for x in stdin.split()]",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5 3 8) == \"5+3=8\"\nassert solution(5 3 2) == \"5+3=2\"\nassert solution(7 3 9) == \"7+3=9\"\nassert solution(1 5 1) == \"1+5=6\"\nassert solution(4 8 6) == \"4+8=12\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''8\n3 2 2 1 1 3 1 1''') == 'YES'\nassert solution('''9\n3 2 2 1 1 3 1 1''') == 'NO'\n'''",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\nassert solution('8\\n1 1 1 1 1 1 1 1') == 'NO'\n\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"\nassert solution(\"8\\n2 2 1 1 3 1 1\") == \"NO\"\nassert solution(\"8\\n2 1 1 3 1 1\") == \"NO\"\nassert solution(\"8\\n1 1 3 1 1\") == \"NO\"\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 74
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'YES'\nassert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\nassert solution('8\\n2 2 2 1 1 3 1 1') == 'NO'\nassert solution('8\\n4 2 2 1 1 3 1 1') == 'YES'\nassert solution('8\\n3 2 2 1 1 3 1 1') == 'NO'\n",
        "num_ids_2": 30,
        "num_ids_4": 70
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\nassert solution('10\\n1 1 3 2 2 3 2 1 1 2') == 'YES'\nassert solution('10\\n1 1 1 1 1 1 1 1 1 1') == 'NO'\nassert solution('10\\n1 2 4 3 2 3 2 1 1 2') == 'YES'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == 'YES'\n",
        "num_ids_2": 42,
        "num_ids_4": 86
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 2 1 1 3 1 1\") == \"YES\"\nassert solution(\"8 3 2 1 1 3 1 1\") == \"YES\"\nassert solution(\"8 3 2 1 1 3 1 0\") == \"YES\"\nassert solution(\"8 3 2 1 1 3 1 1\") == \"NO\"\nassert solution(\"7 3 2 1 1 3 1 0\") == \"NO\"\n\nprint(solution(stdin))",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\nassert solution('6\\n2 1 2 1 2 3') == 'NO'\nassert solution('9\\n1 1 2 1 3 1 3 1') == 'NO'\nassert solution('5\\n2 2 3 1 1') == 'YES'\nassert solution('5\\n1 2 3 1 1') == 'NO'\n",
        "num_ids_2": 38,
        "num_ids_4": 75
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 3 1') == 'YES'\nassert solution('4 2 3 1 5') == 'NO'\nassert solution('4 2 3 1 5 3') == 'YES'\nassert solution('4 2 3 1 5 3 1') == 'NO'\nassert solution('4 2 3 1 5 3 1 3') == 'YES'\n",
        "num_ids_2": 27,
        "num_ids_4": 58
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 2 3 1\") == \"YES\"\nassert solution(\"2\\n1 1\") == \"YES\"\nassert solution(\"2\\n1 1 1\") == \"NO\"\nassert solution(\"3\\n2 1 3\") == \"YES\"\nassert solution(\"5\\n2 1 2 3 1\") == \"NO\"\n",
        "num_ids_2": 31,
        "num_ids_4": 61
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\") == \"ghost\"\nassert solution(\"5\\nmummy\\nghost\\ndemon\\nwitch\\ndemon\") == \"mummy\"\nassert solution(\"6\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\") == \"mummy\"\nassert solution(\"10\\nmummy\\nghost\\ndemon\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\"\nassert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\") == \"witch\"\n\n\"\"\"\n\nfrom itertools import groupby\nfrom collections import Counter\n\nn = int(input())\nans = []\nfor i in range(n):\n    c = list(input().lower())\n    ans.append(c[0])\n\nans_d = Counter(ans)\nans_d_s = ans_d.most_common()",
        "num_ids_2": 54,
        "num_ids_4": 123
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\\nmummy\\nwitch\"\n\"\"\"\n\nn = int(stdin.readline())\ncollegues = []\nfor i in range(n):\n    collegues.append(stdin.readline().strip())\nd = {}\nfor i in collegues:\n    d[i] = d.get(i, 0) + 1\nmaxi = 0\nfor i in d:\n    if d[i] > maxi:\n        maxi = d[i]\nfor i in sorted(d.keys()):\n    if d[i] == maxi:\n        print(i)",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon') == 'ghost\\nmummy'\nassert solution('ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon') == 'ghost\\nmummy'\nassert solution('ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon') == 'ghost\\nmummy'\nassert solution('ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon') == 'ghost\\nmummy'\n\nassert solution('ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon') == 'ghost\\nmummy'\n",
        "num_ids_2": 62,
        "num_ids_4": 124
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\"\n\nassert solution(\"ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"mummy\"\n\nassert solution(\"ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"witch\"\n\nassert solution(\"ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"demon\"\n\nassert solution(\"ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"demon\"",
        "num_ids_2": 57,
        "num_ids_4": 113
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcdef\") == \"abcdef\"\nassert solution(\"a\") == \"a\"\nassert solution(\"ab\") == \"a\"\nassert solution(\"aabb\") == \"aa\"\nassert solution(\"abcd\") == \"ab\"\n",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n\nSample Input:\n10\nman\nmummy\nghost\nghost\nwitch\nman\nman\nman\nman\nman\nSample Output:\nmummy",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\") == 'ghost'\nassert solution(\"2\\nghost\\nwitch\") == 'ghost'\nassert solution(\"4\\nmummy\\ndemon\\nwitch\\nwitch\") =='mummy'\n\"\"\"\n\nimport sys",
        "num_ids_2": 50,
        "num_ids_4": 73
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ghost') == 'ghost'\nassert solution('mummy') =='mummy'\nassert solution('witch') == 'witch'\nassert solution('demon') =='mummy'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ghost') == 'ghost'\nassert solution('mummy') =='mummy'\nassert solution('witch') == 'witch'\nassert solution('demon') in {'demon','mummy', 'ghost'}\n\nprint('Success')\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\nn = int(sys.stdin.readline().strip())\nd = defaultdict(list)\nfor i in range(n):\n    d[sys.stdin.readline().strip()].append(i + 1)\n\nfor i in d.keys():\n    if len(d[i]) == n:\n        print(i)",
        "num_ids_2": 22,
        "num_ids_4": 50
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon') == 'ghost'\nassert solution('4\\nghost\\nmummy\\nwitch\\ndemon') =='mummy'\nassert solution('3\\nghost\\nmummy\\nwitch') == 'witch'\nassert solution('2\\nghost\\nmummy') =='mummy'\nassert solution('1\\nghost') == 'ghost'\n\nprint(solution(stdin))\n",
        "num_ids_2": 51,
        "num_ids_4": 87
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\"\"\"\n\nSample Input:\nArtist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\nSample Output:\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n\"\"\"",
        "num_ids_2": 101,
        "num_ids_4": 101
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\"\"\"\nprint(\"Passed\")\n\nassert solution(\"Artist Album Song_Title Length_seconds\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\"\"\"\nprint(\"Passed\")",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\n\"\n\"James_Taylor Dad_Loves_His_Work Hard_Times 192\\n\"\n\"James_Taylor Dad_Loves_His_Work London_Town 236\\n\"\n\"James_Taylor Dad_Loves_His_Work Summers_Here 163\\n\"\n\"George_Winston Summer Lullaby 215\") == \"Artist Album Song_Title Length_seconds\\n\" \\\n                                          \"James_Taylor Dad_Loves_His_Work Hard_Times 192\\n\" \\\n                                          \"James_Taylor Dad_Loves_His_Work London_Town 236\\n\" \\\n                                          \"George_Winston Summer Lullaby 215\\n\" \\\n                                          \"Tchaikovsky Piano_Favorites November 163\\n\" \\\n                                          \"James_Taylor Dad_Loves_His_Work Summers_Here 163\\n\"\n\nassert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\n\"\n\"James_Taylor Dad_Loves_His_Work Hard_Times 192\\n\"\n\"James_Taylor Dad_Loves_His_Work London_Town 236\\n\"\n\"James_Taylor Dad_Loves_His_Work Summers_Here 163\\n\"\n\"George_Winston Summer Lullaby 215\") == \"Artist Album Song_Title Length_seconds\\n\" \\\n                                          \"James_Taylor Dad_Loves_His_Work Hard_Times 192\\n\" \\\n                                          \"James_Taylor Dad_Loves_His_Work London_Town 236\\n\" \\\n                                          \"George_Winston Summer Lullaby 215\\n\" \\\n                                          \"Tchaikovsky Piano_Favorites November 163\\n\" \\\n                                          \"James_Taylor Dad_Loves_His_Work Summers_Here 163\\n\"\n\n\"\"\"\n",
        "num_ids_2": 62,
        "num_ids_4": 62
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\\n\") == \"\"\"\nArtist Album Song_Title Length_seconds\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n\"\"\"\n\n\"\"\"\nhttps://app.codility.com/demo/results/trainingJWV7BD-HV3/\nUser: Codility_Challenge\nSolution:",
        "num_ids_2": 110,
        "num_ids_4": 110
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215') == 'Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163'\nprint(\"Test complete.\")\n\n-----Explanation-----\nAll of these algorithms are iterative because they keep repeating until the end of the list.\n\nThe first sort starts from the initial order of the songs in the input. The result is that the list of songs are sorted by artist, then song name, in that order.\n\nThe second sort starts from the result of the first sort, in the order artist, then song name. The result is that the list of songs are sorted by artist, then album, then song name.\n\nThe third sort starts from the result of the second sort, in the order artist, then album, then song name. The result is that the list of songs are sorted by artist, then album, then song name, then length.\n\nFinally, the fourth sort starts from the result of the third sort, in the order artist, then album, then song name, then length. The result is that the list of songs are sorted by artist, then album, then song name, then length, in that order.\n\nIt is important to note that the order in which the sort orders are given should NOT matter.\n\nFinally, the last sort starts from the result of the fourth sort, in the order artist, then album, then song name, then length. The result is that the list of songs are sorted by artist, then album, then song name, then length.\n\nSorting by song title and then artist, in that order, can be implemented as follows.\n\n1. Sort the list by song name, least to greatest.\n2. Sort the list by artist, least to greatest.\n3. Print the list.\n\nThe first sort starts from the order of the input. Each subsequent sort starts from the order given by the previous sort. All sorting should be done least to greatest, in lexicographic order.\n\n-----Challenge-----\nUse the new feature of sorting to sort by length, then title, then artist, then album.\n\n>>> import random, time\n>>> rand = lambda x: random.randint(0,x)\n>>> def solution(stdin: str) -> str:\n    pass",
        "num_ids_2": 177,
        "num_ids_4": 177
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\") == 'Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n'\nassert solution(\"Artist Album Song_Title Length_seconds\") == 'Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n'\nassert solution(\"Artist Album Song_Title Length_seconds\") == 'Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n'\nassert solution(\"Artist Album Song_Title Length_seconds\") == 'Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n'\nassert solution(\"Artist Album Song_Title Length_seconds\") == 'Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n'\n",
        "num_ids_2": 202,
        "num_ids_4": 404
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\") == \"Artist Album Song_Title Length_seconds\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\"\n\nSample Input:\nArtist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\nSample Output:\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nGeorge_Winston Summer Lullaby 215\nTchaikovsky Piano_Favorites November 163\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\n\nArtist Album Song_Title Length_seconds\n\nassert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\") == \"Artist Album Song_Title Length_seconds\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\"\n\nSample Input:\nArtist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nAlbum Artist Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nSong_Title\nLength_seconds\nSample Output:\nArtist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames",
        "num_ids_2": 354,
        "num_ids_4": 354
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\") == \\\n    \"Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n\"",
        "num_ids_2": 93,
        "num_ids_4": 93
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\") == \"Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n\"\nprint(\"Test 1: PASS\")\n\nassert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\") == \"Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n\"\nprint(\"Test 2: PASS\")\n",
        "num_ids_2": 358,
        "num_ids_4": 358
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\nimport sys\n\nALPHABET = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_')",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('2 10 7\\n4 4 4 4 4 4 4') == 'NO'\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"2 10 7\\n5 5 5 5 5 5 5\"\n) == \"YES\"\nassert solution(\n\"2 10 7\\n3 5 4 4 3 3 2\"\n) == \"NO\"\nassert solution(\n\"2 10 7\\n3 5 4 4 3 3\"\n) == \"NO\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == 'YES'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n2 10 7\n5 5 5 5 5 5 5\n''') == 'YES'\nassert solution('''\n2 10 7\n1 5 5 5 5 5 5\n''') == 'NO'\n'''\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\n\"\"\"\n\nimport math\nimport collections",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == 'YES'\nassert solution(\"2 10 7\\n5 5 5 5 5 5\") == 'NO'",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\n\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 10 7\n5 5 5 5 5 5 5''') == 'YES'\nassert solution('''2 10 7\n5 5 5 5 5 5 5''') == 'YES'\nassert solution('''2 10 7\n5 5 5 5 5 5 5''') == 'NO'\nassert solution('''2 10 7\n5 5 5 5 5 5 5''') == 'NO'\nassert solution('''2 10 7\n5 5 5 5 5 5 5\n5 5 5 5 5 5 5''') == 'NO'\n\n'''",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''10\nNYNY\nNNYY\nNYYY\nNYYN\nNNNY\nYYNN\nYYYN\nYYNY\nYYNN\nYYNY''') == 'Not Effective\\n66.666667\\n50.000000'\n\n\"\"\"\n\n\nimport string\nimport math\nimport sys\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nNYYY\\nYYNN\\nYYNN\\nYYNN\") == \"66.666667\"\n\"\"\"\n\nN = int(input())\n\nvac_list = []\nfor i in range(N):\n    vac_list.append(input())\n\nst_list = [0 for i in range(3)]\nfor i in range(N):\n    for j in range(3):\n        if vac_list[i][j] == 'Y':\n            st_list[j] += 1\n\nst_list = [x/N for x in st_list]\n\nprint(\"Not Effective\") if st_list[0] >= st_list[1] or st_list[0] >= st_list[2] else print(format(st_list[0], '.6f')) if st_list[1] >= st_list[2] else print(format(st_list[1], '.6f'))\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"NYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\\nYYNY\") == \"Not Effective\"\nassert solution(\"NYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\\nYYNY\") == \"66.666667\"\nassert solution(\"NYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\\nYYNY\") == \"50.000000\"\n",
        "num_ids_2": 98,
        "num_ids_4": 147
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYNN\\nYYNY') == '66.666667\\n50.000000'\nassert solution('1\\nY\\nN\\nN\\nY') == 'Not Effective'\nassert solution('4\\nN\\nN\\nY\\nN') == 'Not Effective'\n\"\"\"",
        "num_ids_2": 73,
        "num_ids_4": 96
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nyyy\\nnyy\\nyy\\nnn\\nnyy\\n') == 'Not Effective\\n66.666667\\n50.000000'\nprint(solution(stdin))\n\n------------Solution------------\nfrom typing import IO\nimport math\n\nn = int(input())\nstrain_A = 0\nstrain_B = 0\nstrain_C = 0\nfor _ in range(n):\n    a, b, c = input()\n    if a == 'Y':\n        if b == 'Y':\n            strain_A = math.floor((strain_A + 1) * 100 / 66.666667)\n            strain_B = math.floor((strain_B + 1) * 100 / 66.666667)\n            strain_C = math.floor((strain_C + 1) * 100 / 66.666667)\n        elif b == 'N':\n            strain_A = math.floor((strain_A + 1) * 100 / 50)\n            strain_C = math.floor((strain_C + 1) * 100 / 66.666667)\n        else:\n            strain_A = math.floor((strain_A + 1) * 100 / 66.666667)\n            strain_B = math.floor((strain_B + 1) * 100 / 66.666667)\n    elif a == 'N':\n        if b == 'Y':\n            strain_A = math.floor((strain_A + 1) * 100 / 50)\n            strain_C = math.floor((strain_C + 1) * 100 / 66.666667)\n        elif b == 'N':\n            strain_C = math.floor((strain_C + 1) * 100 / 66.666667)\n        else:\n            strain_A = math.floor((strain_A + 1) * 100 / 66.666667)\n            strain_B = math.floor((strain_B + 1) * 100 / 66.666667)\n    else:\n        if b == 'Y':\n            strain_A = math.floor((strain_A + 1) * 100 / 66.666667)\n            strain_B = math.floor((strain_B + 1) * 100 / 66.666667)\n        elif b == 'N':\n            strain_A = math.floor((strain_A + 1) * 100 / 66.666667)\n            strain_C = math.floor((strain_C + 1) * 100 / 66.666667)\n        else:\n            strain_A = math.floor((strain_A + 1) * 100 / 66.666667)\n            strain_B = math.floor((strain_B + 1) * 100 / 66.666667)\n            strain_C = math.floor((strain_C + 1) * 100 / 66.666667)\n\nprint('{:.3f}\\n{:.3f}\\n{:.3f}'.format(strain_A / 100, strain_B / 100, strain_C / 100))\n\n------------Solution------------\nfrom typing import IO\nimport math\n\nn = int(input())\na = 0\nb = 0\nc = 0\nfor _ in range(n):\n    b, c = input()\n    if b == 'Y':\n        a += 1\n    elif b == 'N':\n        c += 1\na = a * 100 / 66.666667\nb = b * 100 / 66.666667\nc = c * 100 / 66.666667\nprint('{:.3f}\\n{:.3f}\\n{:.3f}'.format(a, b, c))\n\n-----------------Number of elements in a range that are prime------------\nfrom typing import IO\nimport math\n\nn = int(input())\nfor _ in range(n):\n    l, r = map(int, input().split())\n    count = 0\n    for num in range(l, r + 1):\n        if is_prime(num):\n            count += 1\n    print(count)",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nYNNY\\nYYN\\nNNYY\\nNNNN') == '66.666667'\n\nassert solution('10\\nYYNNYY\\nYYN\\nNNNN\\nNYNN\\nNYN\\nYYNN\\nYNN\\nNNNN') == '50.000000'\n\n\"\"\"\n",
        "num_ids_2": 75,
        "num_ids_4": 75
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\") == \"Not Effective\\n66.666667\\n50.000000\"\nassert solution(\"10\\nNYYNY\\nNNNNY\\nYYYYY\\nYYNNY\\nYYYYN\\nYYNYY\\nYYYNN\\nYYYNY\\nYYNNN\") == \"Not Effective\\n66.666667\\n50.000000\"\nassert solution(\"10\\nNNYNY\\nNNYY\\nYYYNN\\nNYYN\\nYYYNY\\nYYYN\\nYYNN\\nYYYNY\\nYYYYN\") == \"Not Effective\\n66.666667\\n50.000000\"\nassert solution(\"10\\nNNNY\\nNNYY\\nNYYNN\\nNNYNY\\nYYYNY\\nYYYYY\\nYYYYN\\nYYNNN\\nYYYYY\") == \"Not Effective\\n66.666667\\n50.000000\"\nassert solution(\"10\\nNNNNY\\nNNNY\\nYYYYN\\nNNNNN\\nYYYNY\\nYYYYY\\nYYYNY\\nYYNNY\\nYYYNY\\nYYYNY\") == \"Not Effective\\n66.666667\\n50.000000\"\n",
        "num_ids_2": 125,
        "num_ids_4": 253
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\\nYYNY\") == \"Not Effective\\n66.666667\\n50.000000\"\nassert solution(\"8\\nYNNY\\nYNNY\\nNNNY\\nNNNN\\nYNNN\\nNNNN\\nNNNN\") == \"50.000000\\n66.666667\\n66.666667\"\n\"\"\"",
        "num_ids_2": 117,
        "num_ids_4": 117
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\") == \"Not Effective\\n66.666667\\n50.000000\"\n\"\"\"\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\") == \"Not Effective\\n66.666667\\n50.000000\"\n\nprint(solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\"))\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BAACC\") == \"Bruno\"\nprint(solution(\"BAACC\"))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BAACC\") == \"2\"\nassert solution(\"ABCC\") == \"0\"\nassert solution(\"ACAC\") == \"2\"\nassert solution(\"AAB\") == \"1\"\n\"\"\"\n\nimport numpy as np\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('BAACC') == 3\nassert solution('ABCCA') == 1\nassert solution('AABBC') == 3\nassert solution('BCABC') == 1\nassert solution('ABCB') == 1\n\nprint(solution('BAACC'))\nprint(solution('ABCCA'))\nprint(solution('AABBC'))\nprint(solution('BCABC'))\nprint(solution('ABCB'))\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BAACC\") == \"Bruno\"\nassert solution(\"BAABC\") == \"Bruno\"\nassert solution(\"BBAAB\") == \"Bruno\"\nassert solution(\"BBBAA\") == \"Goran\"\nassert solution(\"BBBAAB\") == \"Goran\"\n",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('BAACC') == '3\\nBruno'\nassert solution('CBA') == '2\\nBruno'\nassert solution('ABC') == '0\\n'\nassert solution('BAA') == '3\\nBruno'\nassert solution('AAA') == '3\\nBruno'\n\"\"\"\n\nfrom typing import List, Tuple, Set\n",
        "num_ids_2": 32,
        "num_ids_4": 60
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BAACC\") == \"3\"\nassert solution(\"ABBAA\") == \"Goran\"\nassert solution(\"CCB\") == \"Adrian\"\nassert solution(\"BB\") == \"Adrian\"\nassert solution(\"A\") == \"Adrian\"\n",
        "num_ids_2": 24,
        "num_ids_4": 47
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BAACC\") == \"3\"\nassert solution(\"BCABA\") == \"1\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('BAACC') == '3', 'WA'\nassert solution('ABCCBACCA') == '2', 'WA'\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BAACC\") == \"3, Bruno\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('BAACC') == 3\nassert solution('AABBC') == 2\nassert solution('AAABBC') == 3\nassert solution('ABC') == 0\nassert solution('AAABC') == 1",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\n\n\"\"\"",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\") == \"3 543\"\n\n\"\"\"\n\n\nimport sys\nfrom collections import defaultdict",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == (3, 543)\n\"\"\"\n\nfrom typing import List, Dict, Any, Union",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\") == \"3 543\"\n\nprint(solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\"))\n\nassert solution(\"7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\") == \"4 502\"\n\nprint(solution(\"7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\"))\n\nassert solution(\"1 A right\\n2 A right\\n2 A wrong\\n2 B wrong\\n2 C wrong\\n1 D wrong\\n1 E wrong\") == \"0 202\"\n\nprint(solution(\"1 A right\\n2 A right\\n2 A wrong\\n2 B wrong\\n2 C wrong\\n1 D wrong\\n1 E wrong\"))\n\nassert solution(\"1 A right\\n2 A right\\n2 A wrong\\n2 B wrong\\n2 C wrong\\n1 D wrong\\n1 E wrong\") == \"0 202\"\n\nassert solution(\"2 A wrong\\n2 B wrong\\n2 C wrong\\n2 D wrong\\n2 E wrong\\n2 B right\\n2 C right\\n2 D right\\n2 E right\\n2 B wrong\\n2 C wrong\\n2 D wrong\\n2 E wrong\\n1 A right\\n2 A right\\n2 A wrong\\n2 B wrong\\n2 C wrong\\n2 D wrong\\n2 E wrong\\n2 B right\\n2 C right\\n2 D right\\n2 E right\\n2 A wrong\\n2 B wrong\\n2 C wrong\\n2 D wrong\\n2 E wrong\\n2 B right\\n2 C right\\n2 D right\\n2 E right\\n1 A right\") == \"4 202\"\n\nprint(solution(\"2 A wrong\\n2 B wrong\\n2 C wrong\\n2 D wrong\\n2 E wrong\\n2 B right\\n2 C right\\n2 D right\\n2 E right\\n2 A wrong\\n2 B wrong\\n2 C wrong\\n2 D wrong\\n2 E wrong\\n1 A right\\n2 A right\\n2 A wrong\\n2 B wrong\\n2 C wrong\\n2 D wrong\\n2 E wrong\\n2 B right\\n2 C right\\n2 D right\\n2 E right\\n2 A wrong\\n2 B wrong\\n2 C wrong\\n2 D wrong\\n2 E wrong\\n2 B right\\n2 C right\\n2 D right\\n2 E right\\n2 A wrong\\n2 B wrong\\n2 C wrong\\n2 D wrong\\n2 E wrong\\n2 B right\\n2 C right\\n2 D right\\n2 E right\\n2 A wrong\\n2 B wrong\\n2 C wrong\\n2 D wrong\\n2 E wrong\\n2 B right\\n2 C right\\n2 D right\\n2 E right\\n1 A right\"))\n\n\"\"\"\n\n\"\"\"\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n\n543\n\n543\n4 502\n\n0 202\n\n0 202\n\n0 202\n\n0 202\n\n4 202\n\"\"\"",
        "num_ids_2": 107,
        "num_ids_4": 193
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right') == '3 543'\nassert solution('7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n') == '4 502'\nassert solution('7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n') == '4 502'\nassert solution('7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n') == '4 502'\nassert solution('7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n') == '4 502'\n",
        "num_ids_2": 109,
        "num_ids_4": 229
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1''') == (3, 543)\n\nassert solution('''2 A right\n4 E right\n-1''') == (2, 100)\n\nassert solution('''10 C wrong\n2 E right\n-1''') == (10, 200)\n\nassert solution('''6 E right\n6 C wrong\n-1''') == (6, 300)\n\nassert solution('''2 E right\n5 A wrong\n-1''') == (2, 70)",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == [3, 543]\n\n\"\"\"\nimport re",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right') == '3 543'\n\n---\nSample Input:\n2 E right\n5 A wrong\n4 B wrong\n50 B right\n100 C wrong\n200 D right\n-1\nSample Output:\n2 406\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(r\"\"\"\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n\"\"\") == '3 543'\n\nassert solution(r\"\"\"\n2 A right\n5 B right\n-1\n\"\"\") == '2 50'\n\nassert solution(r\"\"\"\n7 H right\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong\n\"\"\") == '4 502'\n\nassert solution(r\"\"\"\n10 B right\n-1\n\"\"\") == '0 0'\n\nassert solution(r\"\"\"\n2 A right\n5 B right\n-1\n\"\"\") == '2 50'",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(5,3,6, [0, 0, 3, 4, 3, 2, 1, 5, 3, 2, 2, 1, 0, 0, 5, 2, 1, 2, 1, 1, 5, 4, 1, 4, 3, 5, 5, 3, 2, 3, 1, 0, 3, 2, 5, 2, 2, 1, 2, 3, 3, 4, 3, 1, 1, 2, 4, 2, 1, 3, 2, 3, 0, 0, 3, 2, 4, 5, 4, 2, 3, 1, 3, 0, 1, 4, 0, 0, 3, 0, 0, 0, 3, 2, 1, 0, 2, 1, 0, 2, 2, 3, 1, 0, 0, 1, 1, 1, 2, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 0, 1, 1, 1, 2, 3, 0, 3, 0, 0, 3, 3, 4, 4, 0, 0, 3, 2, 0, 0, 0, 0, 4, 2, 2, 1, 0, 0, 0, 0, 0, 3, 0, 0, 2, 4, 1, 3, 4, 2, 3, 2, 2, 0, 0, 0, 0, 3, 1, 1, 1, 3, 4, 2, 1, 1, 2, 2, 2, 3, 3, 2, 2, 1, 3, 2, 0, 3, 4, 1, 4, 4, 0, 4, 0, 0, 4, 4, 3, 4, 0, 0, 0, 1, 4, 2, 0, 2, 1, 2, 3, 4, 4, 0, 0, 1, 3, 3, 2, 4, 3, 3, 3, 0, 1, 1, 4, 3, 0, 3, 3, 0, 0, 0, 0, 1, 2, 0, 3, 4, 3, 0, 4, 2, 2, 1, 3, 2, 2, 0, 2, 3, 3, 1, 4, 1, 3, 3, 0, 0, 0, 3, 3, 0, 0, 0, 0, 3, 3, 0, 4, 4, 3, 1, 3, 1, 3, 1, 2, 2, 0, 3, 0, 0, 2, 2, 0, 0, 3, 2, 0, 2, 0, 0, 2, 3, 3, 2, 3, 0, 4, 2, 3, 3, 4, 1, 4, 4, 1, 2, 3, 2, 3, 0, 3, 1, 2, 0, 0, 3, 1, 1, 3, 0, 4, 3, 0, 1, 0, 0, 2, 3, 0, 0, 3, 0, 0, 0, 4, 0, 3, 4, 3, 1, 3, 2, 4, 3, 0, 1, 0, 0, 0, 0, 4, 1, 0, 3, 1, 3, 1, 0, 4, 3, 0, 4, 0, 2, 2, 0, 4, 1, 2, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 4, 0, 0, 3, 2, 0, 4, 0, 3, 0, 3, 2, 1, 4, 4, 0, 2, 0, 3, 3, 2, 3, 0, 4, 0, 1, 0, 2, 1, 1, 3, 1, 0, 1, 0, 0, 0, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 0, 3, 4, 1, 0, 0, 0, 3, 0, 4, 2, 0, 1, 0, 0, 0, 1, 3, 3, 1, 3, 3, 3, 3, 4, 2, 0, 1, 0, 0, 0, 1, 1, 4, 0, 2, 2, 2, 0, 0, 0, 2, 1, 2, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 0, 4, 0, 2, 3, 2, 0, 4, 3, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 4, 1, 0, 0, 2, 0, 0, 1, 1, 0, 1, 3, 0, 2, 0, 2, 3, 0, 3, 4, 2, 1, 0, 0, 2, 2, 1, 0, 4, 1, 2, 3, 3, 3, 2, 0, 0, 3, 2, 0, 4, 0, 3, 1, 0, 1, 2, 4, 2, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 0, 1, 2, 0, 0, 1, 2, 1, 4, 1, 4, 0, 2, 0, 0, 1, 3, 3, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
        "num_ids_2": 1510,
        "num_ids_4": 1510
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2') == '5'\n\n\"\"\"\n\nimport heapq",
        "num_ids_2": 131,
        "num_ids_4": 131
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\\n\") == \"5\"\nprint(solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\\n\"))\n\nSample Input:\n3 1\n2 1\n3 1\n3 2\nSample Output:\n-1\n",
        "num_ids_2": 133,
        "num_ids_4": 133
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '10 5\\n'\n    '5 1 3 4 2 4 2 1 2 1\\n'\n    '4 5 3 4 1 5 3 1 1 4\\n'\n    '4 2 4 1 5 4 5 2 4 1\\n'\n    '5 2 1 5 5 3 5 2 3 2\\n'\n    '5 5 2 3 2 3 1 5 5 5\\n'\n    '3 4 2 4 2 2 4 4 2 3\\n'\n    '1 5 1 1 2 5 4 1 5 3\\n'\n    '2 2 4 1 2 5 1 4 3 5\\n'\n    '5 3 2 1 4 3 5 2 3 1\\n'\n    '3 4 2 5 2 5 3 4 4 2'\n) == '5'\n\"\"\"\n\nfrom math import inf\nfrom unittest import TestCase",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == \"5\"\nassert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == \"-1\"\nassert solution(\"10 5\\n1 1 5 1 1 1 1 1 1 1\\n1 1 5 1 1 1 1 1 1 1 1\\n1 1 5 1 1 1 1 1 1 1 1\\n1 1 5 1 1 1 1 1 1 1 1\\n1 1 5 1 1 1 1 1 1 1 1\\n1 1 5 1 1 1 1 1 1 1 1\\n1 1 5 1 1 1 1 1 1 1 1\\n1 1 5 1 1 1 1 1 1 1 1\\n1 1 5 1 1 1 1 1 1 1 1\\n1 1 5 1 1 1 1 1 1 1 1\") == \"10\"",
        "num_ids_2": 238,
        "num_ids_4": 378
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == \"5\"\n\"\"\"\n\nimport sys\nfrom math import inf\n",
        "num_ids_2": 119,
        "num_ids_4": 119
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5') == '5'\nprint('Test pass.')",
        "num_ids_2": 107,
        "num_ids_4": 107
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == 5\n\"\"\"\n\nimport itertools\n",
        "num_ids_2": 117,
        "num_ids_4": 117
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\\n\") == \"5\"\n",
        "num_ids_2": 133,
        "num_ids_4": 133
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == \"5\"\n\nassert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == \"-1\"\n\n-----Explanation-----\nThe shortest path from any tile numbered $1$ to any tile numbered $k$ is as follows:\n\nStart at tile number $1$\nHop to tile number $2$\nHop to tile number $3$\nHop to tile number $4$\nHop to tile number $2$\nHop to tile number $3$\nHop to tile number $4$\nHop to tile number $5$\nHop to tile number $1$\nHop to tile number $2$\nHop to tile number $1$\nThe distance is $8$, and this is the shortest distance over a complete game of hopscotch.\n\nThe shortest distance from tile $1$ to tile $k$ is therefore $8$.\n\nIf there is no path from $1$ to $k$, then the answer is $-1$ instead.\n\n-----Constraints-----\n1 <= n, k <= 50\n1 <= x <= k for all i\n1 <= y <= n\n1 <= y' <= n for all i, j\n-----Test cases-----\nSample input:\n5 2\n1 1\n2 2\n3 3\n4 4\n5 5\n1 2\n2 3\n3 4\n4 5\nSample output:\n3\n2\n2\n2\n1\nExplanation:\nThere is a shortest path from tile $1$ to tile $2$,\nfrom tile $1$ to tile $3$, from tile $1$ to tile $4$,\nfrom tile $1$ to tile $5$, and from tile $1$ to tile $5$.\nThis is a total distance of $3$.\n\nSample input:\n2 3\n1 1\n2 2\n3 3\nSample output:\n-1\n3\nExplanation:\nThere is no path from tile $1$ to tile $2$.\n\nSample input:\n3 3\n1 1\n2 2\n3 3\nSample output:\n-1\n\nSample input:\n10 5\n1 1 2 1 2 1 2 1 2 1\n1 2 1 1 2 1 2 1 2 1\n1 2 2 1 2 1 2 1 2 1\n1 2 2 1 1 2 1 2 1 2\n1 2 2 1 1 2 1 2 1 2\n1 2 2 1 1 2 1 2 1 2\n1 2 1 1 2 1 2 1 1 2\n2 1 2 1 2 1 2 1 1 2\n2 1 1 2 1 2 1 1 2 1\n1 2 1 1 2 1 2 1 1 2\n2 1 1 1 2 1 2 1 1 2\n2 1 1 1 2 1 2 1 1 2\nSample output:\n13\n\nSample input:\n10 5\n1 1 2 1 2 1 2 1 2 1\n1 2 1 1 2 1 2 1 2 1\n1 2 2 1 2 1 2 1 2 1\n1 2 2 1 1 2 1 2 1 2\n1 2 2 1 1 2 1 2 1 2\n1 2 1 1 2 1 2 1 1 2\n2 1 2 1 2 1 2 1 1 2\n2 1 1 2 1 2 1 1 2 1\n2 1 1 1 2 1 2 1 1 2\n1 2 1 1 2 1 2 1 1 2\n2 1 1 1 2 1 2 1 1 2\nSample output:\n14\n\nSample input:\n10 5\n3 1 2 3 4 2 3 1 2 1\n1 2 1 1 2 1 2 1 2 1\n1 2 2 1 2 1 2 1 2 1\n1 2 2 1 1 2 1 2 1 2\n1 2 2 1 1 2 1 2 1 2\n1 2 1 1 2 1 2 1 1 2\n2 1 2 1 2 1 2 1 1 2\n2 1 1 2 1 2 1 1 2 1\n2 1 1 1 2 1 2 1 1 2\n2 1 1 1 2 1 2 1 1 2\nSample output:\n-1\n\n\"\"\"\n\n\"\"\"\nIf the distance from tile 1 to tile 2 is d, then the distance from tile 1 to tile k is d + 1.\n\nHowever, when we consider all the possible combinations of k, we have n! combinations.\n\nFor example, if we are considering the case when k = 5, we have\n\n5!\n5!\n5!\n5!\n5!\n(3! = 6)\n(3! = 6)\n(3! = 6)\n(3! = 6)\n(3! = 6)\nSo we have a total of n! = 6! = 720 possibilities.\n\nIt's not possible to solve this problem quickly, since the runtime will be very large.\n\nTo solve it in reasonable time, we need to go through each possibility and check whether the distance from 1 to k is greater than or equal to d.\n\nIf it is, we should stop and return d.\n\n\"\"\"",
        "num_ids_2": 238,
        "num_ids_4": 238
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 7\") == \"edward is right\"\nassert solution(\"2\\n5 5\") == \"gunilla has a point\"\n\"\"\"\nimport numpy\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 7\\n5 5') == 'gunilla has a point'\nassert solution('1\\n1 7\\n5 5') == 'edward is right'\nassert solution('2\\n1 7\\n5 5\\n3 3\\n4 6') == 'edward is right'\nassert solution('2\\n1 7\\n5 5\\n3 3\\n4 6\\n4 6') == 'edward is wrong'\nassert solution('2\\n1 7\\n5 5\\n3 3\\n4 6\\n4 7\\n4 8') == 'edward is right'\n'''\n\n\nimport sys\n",
        "num_ids_2": 43,
        "num_ids_4": 105
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 7\\n5 5') == 'gunilla has a point'\nassert solution('2\\n1 5\\n7 4') == 'edward is right'\nassert solution('3\\n1 7\\n5 5\\n2 9\\n4 5\\n6 5\\n7 4') == 'edward is right'\nassert solution('3\\n1 7\\n5 5\\n2 9\\n4 5\\n6 5\\n7 4') == 'edward is right'\n'''",
        "num_ids_2": 43,
        "num_ids_4": 117
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\\\n1 7\") == 'edward is right'\nassert solution(\"3\\\\n1 7\\\\n5 5\") == 'gunilla has a point'\nassert solution(\"4\\\\n1 3\\\\n5 5\\\\n7 7\") == 'edward is right'\nassert solution(\"5\\\\n1 3\\\\n5 5\\\\n7 7\\\\n9 9\") == 'gunilla has a point'\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 39,
        "num_ids_4": 94
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 7') == 'gunilla has a point'\nassert solution('2\\n5 5') == 'edward is right'\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n5 5\") == \"gunilla has a point\"\n\"\"\"\n\n\"\"\"\nThe idea here is to iterate over the input in pairs, check whether the intervals overlap, and if so, return the one which is smaller\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n2 5\\n1 2') == 'edward is right'\n\n\"\"\"\n\nimport numpy as np",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 7\\n5 5') == 'gunilla has a point'\n\nSample Input:\n3\n1 2\n2 1\n4 4\nSample Output:\nedward is right\n'''\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 7\") == \"edward is right\"\nassert solution(\"2\\n5 5\") == \"gunilla has a point\"\n\"\"\"\n\nfrom dataclasses import dataclass, field\nfrom typing import List\n\n\n@dataclass\nclass BoilingIntervals:\n    start: int\n    end: int\n\n\n@dataclass\nclass BoilingIntervalsLog:\n    intervals: List[BoilingIntervals] = field(default_factory=list)\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1 7\\n5 5') == 'gunilla has a point'\n\nassert solution('4\\n2 10\\n5 4\\n3 7\\n1 5') == 'edward is right'\n\"\"\"\n\nimport math\n",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    10 11\n    t 1 10\n    t 1 2\n    t 1 3\n    s 1\n    s 2\n    s 3\n    s 4\n    t 5 6\n    s 5\n    s 6\n    s 10\n    \"\"\"\n    ) == \"\"\"\n    4\n    4\n    4\n    1\n    2\n    2\n    4\n    \"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 11\\n\"\n\"t 1 10\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 4\\n\"\n\"t 5 6\\n\"\n\"s 5\\n\"\n\"s 6\\n\"\n\"s 10\\n\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\n\n\"\"\"\nfrom collections import Counter",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10''') == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\nprint('OK')\n\n---------------\n\na, b = int(stdin.readline().split())\n\nfor i in range(a):\n    if stdin.readline()[0] == 't':\n        a, b = [int(x) for x in stdin.readline().split()[1:]]\n    else:\n        print(a + b)\n\n---------------\n\na, b = [int(x) for x in stdin.readline().split()]\n\nfor i in range(a):\n    if stdin.readline()[0] == 't':\n        a, b = [int(x) for x in stdin.readline().split()[1:]]\n    else:\n        print(a + b)\n\n---------------\n\nfor _ in range(int(stdin.readline())):\n    stdin.readline()\n    if stdin.readline()[0] == 't':\n        a, b = [int(x) for x in stdin.readline().split()[1:]]\n    else:\n        print(a + b)\n\n---------------\n\nq = int(stdin.readline())\nfor _ in range(q):\n    stdin.readline()\n    if stdin.readline()[0] == 't':\n        a, b = [int(x) for x in stdin.readline().split()[1:]]\n    else:\n        print(a + b)\n\n---------------\n\nq = int(stdin.readline())\nfor _ in range(q):\n    a, b = [int(x) for x in stdin.readline().split()]\n    if stdin.readline()[0] == 't':\n        a, b = [int(x) for x in stdin.readline().split()[1:]]\n    else:\n        print(a + b)\n\n---------------\n\nfor _ in range(int(stdin.readline())):\n    if stdin.readline()[0] == 't':\n        a, b = [int(x) for x in stdin.readline().split()[1:]]\n    else:\n        print(a + b)\n\n---------------\n\nfor _ in range(int(stdin.readline())):\n    a, b = [int(x) for x in stdin.readline().split()]\n    if stdin.readline()[0] == 't':\n        a, b = [int(x) for x in stdin.readline().split()[1:]]\n    else:\n        print(a + b)\n\n---------------\n\nwhile True:\n    try:\n        a, b = [int(x) for x in stdin.readline().split()]\n        if stdin.readline()[0] == 't':\n            a, b = [int(x) for x in stdin.readline().split()[1:]]\n        else:\n            print(a + b)\n    except:\n        break\n\n---------------\n\na, b = [int(x) for x in stdin.readline().split()]\n\nfor _ in range(int(stdin.readline())):\n    if stdin.readline()[0] == 't':\n        a, b = [int(x) for x in stdin.readline().split()[1:]]\n    else:\n        print(a + b)\n\n---------------\n\na, b = [int(x) for x in stdin.readline().split()]\n\nwhile True:\n    try:\n        if stdin.readline()[0] == 't':\n            a, b = [int(x) for x in stdin.readline().split()[1:]]\n        else:\n            print(a + b)\n    except:\n        break\n\n---------------\n\nfor _ in range(int(stdin.readline())):\n    if stdin.readline()[0] == 't':\n        a, b = [int(x) for x in stdin.readline().split()[1:]]\n    else:\n        print(a + b)\n\n---------------\n\nfor _ in range(int(stdin.readline())):\n    a, b = [int(x) for x in stdin.readline().split()]\n    if stdin.readline()[0] == 't':\n        a, b = [int(x) for x in stdin.readline().split()[1:]]\n    else:\n        print(a + b)\n\n---------------\n\nfor _ in range(int(stdin.readline())):\n    if stdin.readline()[0] == 't':\n        a, b = [int(x) for x in stdin.readline().split()[1:]]\n    else:\n        print(a + b)\n\n---------------\n\nwhile True:\n    try:\n        a, b = [int(x) for x in stdin.readline().split()]\n        if stdin.readline()[0] == 't':\n            a, b = [int(x) for x in stdin.readline().split()[1:]]\n        else:\n            print(a + b)\n    except:\n        break\n\n---------------\n\na, b = [int(x) for x in stdin.readline().split()]\n\nwhile True:\n    try:\n        if stdin.readline()[0] == 't':\n            a, b = [int(x) for x in stdin.readline().split()[1:]]\n        else:\n            print(a + b)\n    except:\n        break\n\n---------------\n\na, b = [int(x) for x in stdin.readline().split()]\n\nwhile True:\n    try:\n        if stdin.readline()[0] == 't':\n            a, b = [int(x) for x in stdin.readline().split()[1:]]\n        else:\n            print(a + b)\n    except:\n        break\n\n---------------\n\na, b = [int(x) for",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n\\n\\n\\nt1 3\\n\\n\\n\\n\\nt1 4') == '1\\n1\\n1\\n0'\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10\"\"\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 11\\n\"\n                \"t 1 10\\n\"\n                \"t 1 2\\n\"\n                \"t 1 3\\n\"\n                \"s 1\\n\"\n                \"s 2\\n\"\n                \"s 3\\n\"\n                \"s 4\\n\"\n                \"t 5 6\\n\"\n                \"s 5\\n\"\n                \"s 6\\n\"\n                \"s 10\\n\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\nassert solution(\"10 11\\n\"\n                \"t 1 2\\n\"\n                \"t 1 3\\n\"\n                \"t 1 10\\n\"\n                \"s 1\\n\"\n                \"s 2\\n\"\n                \"s 3\\n\"\n                \"s 10\\n\") == \"1\\n2\\n2\\n\"\nassert solution(\"10 11\\n\"\n                \"t 1 3\\n\"\n                \"t 1 10\\n\"\n                \"t 1 2\\n\"\n                \"s 1\\n\"\n                \"s 2\\n\"\n                \"s 3\\n\"\n                \"s 10\\n\") == \"1\\n1\\n1\\n\"\nassert solution(\"10 11\\n\"\n                \"t 1 10\\n\"\n                \"t 1 3\\n\"\n                \"t 1 2\\n\"\n                \"s 1\\n\"\n                \"s 2\\n\"\n                \"s 3\\n\"\n                \"s 10\\n\") == \"1\\n2\\n2\\n\"\nassert solution(\"10 11\\n\"\n                \"t 1 3\\n\"\n                \"t 1 2\\n\"\n                \"t 1 10\\n\"\n                \"s 1\\n\"\n                \"s 2\\n\"\n                \"s 3\\n\"\n                \"s 10\\n\") == \"1\\n2\\n2\\n\"\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 11\\n1 2\\n1 3\\n1 4\\n5 6\\n5 7\\n5 8\\n5 9\\n10') == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n4\"",
        "num_ids_2": 63,
        "num_ids_4": 63
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 11\\n'\n't 1 10\\n'\n't 1 2\\n'\n't 1 3\\n'\n's 1\\n'\n's 2\\n'\n's 3\\n'\n's 4\\n'\n't 5 6\\n'\n's 5\\n'\n's 6\\n'\n's 10\\n') == '4'\n\n\"\"\"\nfrom sys import stdin",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 4\\n'\n        't 1 3\\n'\n        's 1\\n'\n        't 1 5\\n'\n        't 1 6\\n'\n        's 1\\n'\n        't 1 2\\n'\n        't 1 4\\n'\n        't 1 7\\n'\n        't 1 8\\n'\n        's 1\\n'\n        't 1 4\\n'\n        '1\\n') == '8'\n\nassert solution('8 9\\n'\n        't 1 5\\n'\n        's 1\\n'\n        't 1 6\\n'\n        's 1\\n'\n        't 1 3\\n'\n        't 1 7\\n'\n        's 1\\n'\n        't 1 8\\n'\n        't 1 1\\n'\n        't 1 9\\n'\n        's 1\\n'\n        '1\\n') == '9'\n\nassert solution('9 10\\n'\n        't 1 2\\n'\n        's 1\\n'\n        't 1 3\\n'\n        's 1\\n'\n        't 1 8\\n'\n        's 1\\n'\n        't 1 9\\n'\n        's 1\\n'\n        't 1 1\\n'\n        't 1 7\\n'\n        's 1\\n'\n        't 1 6\\n'\n        't 1 4\\n'\n        't 1 5\\n'\n        's 1\\n'\n        '1\\n') == '9'\n\nassert solution('6 6\\n'\n        't 1 1\\n'\n        't 1 2\\n'\n        't 1 3\\n'\n        's 1\\n'\n        't 1 4\\n'\n        '1\\n'\n        't 1 5\\n'\n        't 1 6\\n'\n        's 1\\n'\n        '1\\n') == '6'\n\nassert solution('4 3\\n'\n        't 1 1\\n'\n        't 1 2\\n'\n        't 1 3\\n'\n        's 1\\n'\n        't 1 2\\n'\n        't 1 4\\n'\n        's 1\\n'\n        '1\\n') == '3'",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 11\\n\"\n    \"t 1 2\\n\"\n    \"t 1 3\\n\"\n    \"s 1\\n\"\n    \"t 5 6\\n\"\n    \"s 5\\n\"\n    \"s 6\\n\"\n    \"s 10\") == \"4\"\n\nassert solution(\"10 11\\n\"\n    \"t 1 3\\n\"\n    \"s 1\\n\"\n    \"s 2\\n\"\n    \"s 3\\n\"\n    \"s 4\\n\"\n    \"t 5 6\\n\"\n    \"t 5 7\\n\"\n    \"s 5\\n\"\n    \"s 6\\n\"\n    \"s 10\") == \"4\"\n\nassert solution(\"10 11\\n\"\n    \"t 1 3\\n\"\n    \"s 1\\n\"\n    \"s 2\\n\"\n    \"s 3\\n\"\n    \"s 4\\n\"\n    \"t 5 7\\n\"\n    \"t 5 8\\n\"\n    \"s 5\\n\"\n    \"s 6\\n\"\n    \"s 10\") == \"4\"\n\nassert solution(\"10 11\\n\"\n    \"t 1 3\\n\"\n    \"s 1\\n\"\n    \"s 2\\n\"\n    \"s 3\\n\"\n    \"s 4\\n\"\n    \"t 5 7\\n\"\n    \"t 5 8\\n\"\n    \"s 5\\n\"\n    \"s 6\\n\"\n    \"s 10\") == \"4\"\n\nassert solution(\"10 11\\n\"\n    \"t 1 3\\n\"\n    \"s 1\\n\"\n    \"s 2\\n\"\n    \"s 3\\n\"\n    \"s 4\\n\"\n    \"t 5 7\\n\"\n    \"t 5 8\\n\"\n    \"s 5\\n\"\n    \"s 6\\n\"\n    \"s 10\") == \"4\"",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2015\\n1982\\n2016\\n\"\n\"\"\"\n\n\nfrom typing import List\nimport sys\n\n\nclass Solution:\n    def __init__(self, data: List[str]) -> None:\n        self.data = data\n\n    def solution(self) -> str:\n        \"\"\"\n        Example solution.\n        \"\"\"\n        pass\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n4\nIceland 2016\nSweden 2015\nIceland 1982\nNorway 1999\n\"\"\") == \"2016\\n1982\\n2016\\n1999\"\nassert solution(\n\"\"\"\n5\nIceland 2016\nSweden 2015\nIceland 1982\nNorway 1999\nIceland 1998\n\"\"\") == \"1998\\n2016\\n1998\\n1999\\n2007\"\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2016\\n1982\\n2016\"\nassert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2015\\n2016\\n2012\\n2016\"\n\n\"\"\"\n\nfrom collections import defaultdict\n",
        "num_ids_2": 111,
        "num_ids_4": 111
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\nIceland 2016\nSweden 2015\nIceland 1982\nNorway 1999''') == '''2016\n1982\n2016\n'''\n\nprint(solution(stdin))\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\") == \"2015\\n1982\\n2016\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\nIceland 2016\nSweden 2015\nIceland 1982\nNorway 1999\n3\nSweden 1\nIceland 1\nIceland 2''') == '2015\\n1982\\n2016'\n\n\"\"\"\nfrom collections import defaultdict\nfrom dataclasses import dataclass\nfrom typing import NamedTuple, List, Dict\n\nfrom utils import timing\n\n\n@dataclass\nclass Country:\n    name: str\n    years: List[int]\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2016\\n1982\\n2016\\n\"\nprint(solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\"))\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open('test_input', 'r').read()) == open('test_output', 'r').read()\nprint(solution(open('input', 'r').read()))\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2015\\n1982\\n2016\"\n\n-----Problem-----\n\"\"\"\n\nimport sys\n\nINPUT_FILENAME = 'input.txt'",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(read()) == write()\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abbcccddddeeeee') == 10\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abbcccddddeeeee') == 10\n\nSolution.solution('abbcccddddeeeee')\n-----\nfor i in range(0, len(stdin) - 1):\n    #print(i)\n    pass\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abbcccddddeeeee') == 10",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abbcccddddeeeee') == 10\nassert solution('abbcccddddeeeeeeeeeeeeeeeeeee') == 0",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abbcccddddeeeee') == 10\nassert solution('aaaabbbbccc') == 4\nassert solution('ababac') == 3\nassert solution('abcbac') == 0\nassert solution('aabbccddddeee') == 0\n",
        "num_ids_2": 26,
        "num_ids_4": 46
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abbcccddddeeeee') == 10\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"abbcccddddeeeee\"\n) == 10\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\nassert solution(\"abbbbbbbbccccccddddddeeeeeee\") == 1\nassert solution(\"a\") == 0\nassert solution(\"aaa\") == 0\nassert solution(\"aab\") == 1\n",
        "num_ids_2": 34,
        "num_ids_4": 50
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    'abbcccddddeeeee'\n) == 10\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a') == 0\nassert solution('aa') == 0\nassert solution('ab') == 0\nassert solution('aab') == 1\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its humanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its humanity'\nprint(\"Test pass.\")\n",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'''Engineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity'''\n) == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its humanity'\n\nprint('Hooray!')\n'''\nHooray!\n'''\n\n-----Notes-----\nIf you run this function on the full input, it will have a runtime of about 30 minutes.\n\n'''\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\n",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\n",
        "num_ids_2": 114,
        "num_ids_4": 228
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nprint(\"Passed!\")\n\n-----Test Input-----\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\n\n-----Test Output-----\nEngineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\n\n-----Test Input-----\nInefficiency is a blight on the world and its\nhumanity\n\n-----Test Output-----\n. is a blight on.. and its\nhumanity\n\n-----Test Input-----\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\n\n-----Test Output-----\nEngineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\n\n\"\"\"\n\nimport re\n",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n",
        "num_ids_2": 114,
        "num_ids_4": 228
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n\"\"\"\n\nimport sys\nimport re",
        "num_ids_2": 114,
        "num_ids_4": 171
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\n",
        "num_ids_2": 114,
        "num_ids_4": 228
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\") == \"Engineering will save the world from inefficiency.. is a blight on.. and its\"\nassert solution(\"Inefficiency is a blight on the world and its\") == \"Inefficiency is a blight on the world and its\"\nassert solution(\"Inefficiency is a blight on the world and its\") == \"Inefficiency is a blight on the world and its\"\n\"\"\"\n\nimport re\n",
        "num_ids_2": 77,
        "num_ids_4": 107
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin_lines) == stdout_lines\n\n-----Solution-----\n'''",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n-2 3\\n1 -2 3\") == \"satisfactory\"\nassert solution(\"5 2\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\n\n\"\"\"\n",
        "num_ids_2": 69,
        "num_ids_4": 69
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\nassert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"satisfactory\"\n\n\"\"\"\nimport sys\nfrom typing import List",
        "num_ids_2": 90,
        "num_ids_4": 90
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n') == 'unsatisfactory'\n",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\n\"\"\"\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\nassert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"satisfactory\"\n\"\"\"",
        "num_ids_2": 90,
        "num_ids_4": 90
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\nassert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') =='satisfactory'\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 90,
        "num_ids_4": 90
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\nassert solution(\"4 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"satisfactory\"\n\"\"\"\n",
        "num_ids_2": 90,
        "num_ids_4": 90
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n') == 'unsatisfactory'\nassert solution('4 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n') =='satisfactory'\n\n\"\"\"",
        "num_ids_2": 94,
        "num_ids_4": 94
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\nassert solution(\"4 2\\n-1 -1\\n1 1\\n1 -1\\n1 1\\n\") == \"unsatisfactory\"\nassert solution(\"4 2\\n-1 1\\n1 1\\n1 -1\\n1 1\\n\") == \"satisfactory\"\nassert solution(\"4 2\\n-1 1\\n1 1\\n1 -1\\n-1 1\\n\") == \"satisfactory\"\nassert solution(\"4 3\\n-1 -1\\n1 1\\n1 1\\n1 -1\\n1 1\\n\") == \"satisfactory\"\n",
        "num_ids_2": 79,
        "num_ids_4": 146
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\n\"\"\"",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(input())\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\ni = sys.stdin.readline().split()",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n1 1 1 5 3 4 6 6') == '4'\n\n-------------\nSample Input:\n3\n2 3 1\nSample Output:\nnone\n-------------\nSample Input:\n3\n5 6 1 2\nSample Output:\nnone\n\n-------------\nSample Input:\n4\n1 2 3 4\nSample Output:\nnone\n-------------\nSample Input:\n4\n3 2 2 1\nSample Output:\n3\n\n-------------\nSample Input:\n5\n1 2 3 4 5\nSample Output:\nnone\n\n-------------\nSample Input:\n4\n1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n3\n1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n5\n2 3 1 1 2\nSample Output:\n3\n\n-------------\nSample Input:\n4\n3 1 1 1\nSample Output:\n3\n\n-------------\nSample Input:\n2\n2 3\nSample Output:\nnone\n\n-------------\nSample Input:\n6\n1 2 2 2 1 2\nSample Output:\nnone\n\n-------------\nSample Input:\n6\n3 3 3 1 1 1\nSample Output:\n3\n\n-------------\nSample Input:\n3\n2 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n4\n1 2 2 1\nSample Output:\nnone\n\n-------------\nSample Input:\n6\n2 2 2 2 2 2\nSample Output:\n0\n\n-------------\nSample Input:\n5\n1 2 1 2 1\nSample Output:\nnone\n\n-------------\nSample Input:\n8\n2 3 4 1 1 2 2 3\nSample Output:\n6\n\n-------------\nSample Input:\n7\n2 2 2 2 2 2 2\nSample Output:\nnone\n\n-------------\nSample Input:\n6\n1 1 1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n7\n1 2 3 4 2 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n9\n1 2 2 3 2 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n9\n1 1 1 1 1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n10\n1 2 2 3 2 1 1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n4\n2 3 2 1\nSample Output:\nnone\n\n-------------\nSample Input:\n8\n1 1 1 1 1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n7\n1 1 1 1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n7\n1 1 1 1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n5\n2 1 2 1 2\nSample Output:\nnone\n\n-------------\nSample Input:\n8\n3 3 3 3 3 3 3\nSample Output:\nnone\n\n-------------\nSample Input:\n8\n2 3 3 2 2 2 2\nSample Output:\nnone\n\n-------------\nSample Input:\n9\n2 2 2 3 3 2 2 1\nSample Output:\nnone\n\n-------------\nSample Input:\n8\n2 3 3 2 2 2 2 2\nSample Output:\nnone\n\n-------------\nSample Input:\n5\n1 1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n4\n2 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n6\n1 1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n6\n1 2 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n7\n1 1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n8\n2 1 2 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n4\n1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n4\n2 2 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n5\n1 1 2 2 1\nSample Output:\nnone\n\n-------------\nSample Input:\n6\n3 2 2 3 2\nSample Output:\nnone\n\n-------------\nSample Input:\n5\n2 3 1 2 1\nSample Output:\nnone\n\n-------------\nSample Input:\n6\n1 1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n5\n3 1 2 2 2\nSample Output:\nnone\n\n-------------\nSample Input:\n5\n2 1 1 1 2\nSample Output:\nnone\n\n-------------\nSample Input:\n6\n1 1 1 1 2\nSample Output:\nnone\n\n-------------\nSample Input:\n6\n1 2 1 1 2\nSample Output:\nnone\n\n-------------\nSample Input:\n8\n1 2 2 3 2 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n9\n1 2 2 3 2 1 1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n9\n1 1 1 1 1 1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n10\n1 1 1 1 1 1 1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n8\n1 1 1 1 1 1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n10\n2 2 2 1 2 2 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n7\n1 1 1 1 1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n7\n1 1 1 1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n8\n1 1 1 1 1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n9\n1 1 1 1 1 1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n9\n1 1 1 1 1 1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n6\n2 1 2 1 2 1\nSample Output:\nnone\n\n-------------\nSample Input:\n6\n2 2 1 1 2 1\nSample Output:\nnone\n\n-------------\nSample Input:\n7\n1 1 1 1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n10\n1 1 1 1 1 1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n7\n1 1 1 1 1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n10\n1 1 1 1 1 1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n6\n2 1 2 1 2 1\nSample Output:\nnone\n\n-------------\nSample Input:\n5\n2 2 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n6\n1 1 1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n5\n1 1 2 2 1\nSample Output:\nnone\n\n-------------\nSample Input:\n3\n1 1 1\nSample Output:\nnone\n\n-------------\nSample Input:\n6\n1 1 1 1 1\nSample Output:\nnone\n\n-------------",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3 5 2 1 1\") == \"none\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == '4'\nassert solution(\"8\\n3 3 3 3 3 3 3 3\") == 'none'\n\n'''\n\nfrom collections import Counter\n\nimport sys",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''8\n1 1 1 5 3 4 6 6''') == '4'\nassert solution('''8\n3 3 3 5 3 3 3 3''') == 'none'\nassert solution('''8\n4 4 4 4 4 4 4 4''') == 'none'\nassert solution('''8\n6 6 6 6 6 6 6 6''') == 'none'\nassert solution('''8\n6 1 1 5 3 4 6 6''') == 'none'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 1 5 3 4 6 6') == '4'\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline())\noutcomes = [int(x) for x in stdin.readline().split()]\noutcomes_set = set(outcomes)\noutcomes_unique = len(outcomes_set)\nwinning_index = outcomes.index(max(outcomes))\n\nwhile outcomes_unique!= 1:\n    outcomes_set.remove(outcomes.pop(winning_index))\n    outcomes_unique = len(outcomes_set)\n\nprint(outcomes[winning_index])\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'none'\nassert solution('1') == 'none'\nassert solution('1\\n1') == 'none'\nassert solution('1\\n1\\n1') == 'none'\nassert solution('1\\n1\\n1\\n1') == 'none'\n",
        "num_ids_2": 20,
        "num_ids_4": 49
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n') == 'none'\n\"\"\"\n\nimport sys\n\ntry:\n    n = int(sys.stdin.readline())\n    arr = list(map(int, sys.stdin.readline().split()))\n    unique_arr = list(set(arr))\n    unique_arr.sort()\n    if len(unique_arr) == 1:\n        print('none')\n    else:\n        print(arr.index(unique_arr[len(unique_arr)-1]))\nexcept:\n    print('none')\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\n\nprint(solution(stdin=input()))\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\n1 1 1 5 3 4 6 6') == '4'\nassert solution('8\\n3 1 1 4 3 4 6 6') == 'none'\n\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('20:00:00') == '08:00:00'\n\"\"\"\n\nimport sys\nimport datetime\n\ntime_string = str(sys.stdin.readline()).strip()\ntime_obj = datetime.datetime.strptime(time_string, '%H:%M:%S')\ntime_obj = time_obj.replace(day=datetime.datetime.now().day)\ntime_obj = time_obj + datetime.timedelta(days=1)\ntime_obj = time_obj.replace(hour=23, minute=59, second=59, microsecond=999999)\nprint(time_obj.strftime('%H:%M:%S'))\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\n\"\"\"\n\nfrom datetime import datetime, timedelta\n\nnow = datetime.strptime(stdin, \"%H:%M:%S\")\nbomb = datetime.strptime(stdin, \"%H:%M:%S\")\n\nwhile True:\n    bomb += timedelta(seconds=1)\n    if bomb.hour < now.hour or (bomb.hour == now.hour and bomb.minute < now.minute) or (bomb.hour == now.hour and bomb.minute == now.minute and bomb.second <= now.second):\n        break\n\nprint(bomb.strftime(\"%H:%M:%S\"))\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20:00:00\", \"04:00:00\") == \"08:00:00\"\n\"\"\"\n\nimport datetime\nimport unittest\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''20:00:00''') == '08:00:00'\nassert solution('''04:00:00''') == '08:00:00'\n'''\n\nimport math\n\nhours, minutes, seconds = [int(i) for i in input().split(':')]\nexplosion_hours, explosion_minutes, explosion_seconds = [int(i) for i in input().split(':')]\n\nseconds_elapsed = (hours * 3600) + (minutes * 60) + seconds\nexplosion_seconds_elapsed = (explosion_hours * 3600) + (explosion_minutes * 60) + explosion_seconds\n\ntime_diff = abs(explosion_seconds_elapsed - seconds_elapsed)\n\ntime_diff_in_hours = math.floor(time_diff/3600)\n\ntime_diff_in_minutes = time_diff - (time_diff_in_hours * 3600)\n\ntime_diff_in_seconds = time_diff_in_minutes - (time_diff_in_hours * 60)",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"12:00:00\") == \"12:00:00\"\nassert solution(\"23:59:59\") == \"23:59:59\"\nassert solution(\"00:00:00\") == \"00:00:00\"\n\n\"\"\"\n\nimport sys\n\na = sys.stdin.readline().strip()\nb = sys.stdin.readline().strip()\n\na = list(map(int, a.split(\":\")))\nb = list(map(int, b.split(\":\")))\n\na = a[0] * 3600 + a[1] * 60 + a[2]\nb = b[0] * 3600 + b[1] * 60 + b[2]\n\nresult = b - a",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"21:00:00\") == \"22:00:00\"\nassert solution(\"00:00:00\") == \"00:00:00\"\nassert solution(\"23:59:59\") == \"00:00:00\"\nassert solution(\"23:59:60\") == \"23:59:59\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"05:34:45\") == \"12:34:45\"\nassert solution(\"08:00:01\") == \"16:00:01\"\nassert solution(\"20:00:00\") == \"08:00:00\"\n\"\"\"\nimport sys",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20:00:00', '04:00:00') == '08:00:00'",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"19:59:59\") == \"07:59:59\"\nassert solution(\"19:59:59\") == \"07:59:59\"\nassert solution(\"0:0:0\") == \"23:59:59\"\nassert solution(\"0:0:0\") == \"23:59:59\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"04:00:00\") == \"08:00:00\"\nassert solution(\"06:00:00\") == \"08:00:00\"\nassert solution(\"23:59:59\") == \"01:00:00\"\n\"\"\"\n\ntime_now = input()\ntime_exp = input()\n\nhour_now = int(time_now[:2])\nhour_now += (int(time_now[3:5]) + int(time_now[6:8])) / 60\n\nhour_exp = int(time_exp[:2])\nhour_exp += (int(time_exp[3:5]) + int(time_exp[6:8])) / 60\n\nhour_now = int(round(hour_now, 2))\nhour_exp = int(round(hour_exp, 2))\n\nprint(str(hour_now) + ':' + str(hour_exp).split('.')[0])\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('31 6') == '4'\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('31 6') == '4'\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('31 6') == 4\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('31 6') == '4'\n\"\"\"\n\n\nfrom sys import stdin",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\nprint(solution(''))\n\nassert solution('5 6') == '4'\n\nprint(solution('5 6'))\n\nassert solution('2 5') == '1'\n\nprint(solution('2 5'))\n\nassert solution('4 9') == '2'\n\nprint(solution('4 9'))\n\nassert solution('4 10') == '2'\n\nprint(solution('4 10'))",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"31 6\") == \"4\"\n\nassert solution(\"20 6\") == \"0\"\n\nassert solution(\"10 10\") == \"0\"\n\nassert solution(\"10 4\") == \"0\"\n\nassert solution(\"10 1\") == \"1\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"31 6\") == \"4\"\nassert solution(\"3 5\") == \"2\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 1000\") == \"0\"\nassert solution(\"1 2\") == \"1\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"31 6\") == 4\n\"\"\"\n\n\nimport sys\nimport math",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"31 6\") == \"4\"\n\n-----\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == '2.6666666666666665'\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\nassert solution(\"4\") == \"2.833333333333333\"\nassert solution(\"5\") == \"2.833333333333333\"\nassert solution(\"6\") == \"2.833333333333333\"\nassert solution(\"7\") == \"2.833333333333333\"\n",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == 2.6666666666666665",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == 2.6666666666666665\n\"\"\"\n\nn = int(input())\n\nresult = 1\n\nfor i in range(1, n + 1):\n    result += 1 / i\n\nprint(result)\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '2.6666666666666665'\n\"\"\"\n\nimport math\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == 2.718281828459045\nassert solution('100') == 2.71828182845905\nassert solution('1000') == 2.718281828459\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 45
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3''') == '2.6666666666666665'\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == 2.6666666666666665\n\n-----Problem-----\nEuler\u2019s number (you may know it better as just $e$) has a special place in mathematics. You may have encountered $e$ in calculus or economics (for computing compound interest), or perhaps as the base of the natural logarithm, $\\ln {x}$, on your calculator.\n\nWhile $e$ can be calculated as a limit, there is a good approximation that can be made using discrete mathematics. The formula for $e$ is:\\begin{align*} e & = \\displaystyle \\sum _{i=0}^n\\dfrac {1}{i!}\\\\ & = \\dfrac {1}{0!} +\\dfrac {1}{1!} +\\dfrac {1}{2!}+\\dfrac {1}{3!}+\\dfrac {1}{4!} + \\cdots \\\\ \\end{align*}\n\nNote that $0! = 1$. Now as $n$ approaches $\\infty $, the series converges to $e$. When $n$ is any positive constant, the formula serves as an approximation of the actual value of $e$. (For example, at $n=10$ the approximation is already accurate to $7$ decimals.)\n\nYou will be given a single input, a value of $n$, and your job is to compute the approximation of $e$ for that value of $n$.\n\n-----Input-----\nA single integer $n$, ranging from $0$ to $10000$.\n\n-----Output-----\nA single real number \u2013 the approximation of $e$ computed by the formula with the given $n$. All output must be accurate to an absolute or relative error of at most $10^{-12}$.\n\n-----Examples-----\nSample Input:\n3\nSample Output:\n2.6666666666666665\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 7') == 'paul'\nassert solution('5 7 3') == 'opponent'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"3 7 5\") == \"opponent\"\n\"\"\"\n\nn, p, q = [int(i) for i in input().split()]",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 7\\n') == 'paul'\nassert solution('5 3 5\\n') == 'opponent'\n\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 7\\n\") == \"paul\"\nassert solution(\"6 4 7\\n\") == \"opponent\"\n\"\"\"\n\nimport sys\n\nN, P, Q = map(int, sys.stdin.readline().rstrip().split())",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\n\nassert solution(\"7 4 6\") == \"opponent\"\n\nassert solution(\"6 4 6\") == \"paul\"\n\n\"\"\"\n\nimport math\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"5 7 3\") == \"opponent\"\nassert solution(\"7 7 7\") == \"draw\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 38
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 7') == 'paul'\nassert solution('6 4 0') == 'opponent'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"5 3 5\") == \"opponent\"\nassert solution(\"5 2 6\") == \"paul\"\nassert solution(\"5 2 5\") == \"opponent\"\nassert solution(\"5 1 7\") == \"paul\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"7 3 2\") == \"opponent\"\n\n-----Explanation-----\nThe first line of the input contains integers $N$, $P$ and $Q$.\n\nThe second line of the input contains integers $N$ and $P$ only.\n\nThe third line of the input contains integers $N$ and $Q$ only.\n\nThe first line tells us that Paul has performed $5$ serves, $3$ of them before switching to his opponent, and $7$ before switching to himself.\n\nThe second line tells us that Paul\u2019s score is $3$.\n\nThe third line tells us that Paul\u2019s opponent\u2019s score is $2$.\n\nSince Paul\u2019s score is greater than his opponent\u2019s score, it is obvious that Paul will win the game. Since Paul serves the first ball, we output paul.\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"5 3 1\") == \"opponent\"\nassert solution(\"5 4 7\") == \"opponent\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 2\n\n-----Explanation-----\nIn the first example the only valid solution is to cut the chessboard into 2 pieces.\n\nSample Input:\n1\nSample Output:\n3\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == 2\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '8'\nassert solution('5') == '13'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '4'\n\nSample Input:\n3\nSample Output:\n2\n\n---\nInput:\n\n1\n\nOutput:\n\n2\n---\nInput:\n\n9\n\nOutput:\n\n4\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n') == '2'\nassert solution('10\\n') == '14'\n\"\"\"\nfrom collections import deque\n\nclass Solution:\n    def solve(self, N):\n        board = deque([[]] * 10)\n        for _ in range(int(N)):\n            m, n = map(int, stdin.readline().split())\n            board[n].append(m)\n        return max(len(board[i]) + len(board[i + 1]) for i in range(9))",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"1\") == \"1\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == 2\n\"\"\"\n\nimport math\n\nN = int(input())\n\nprint(math.ceil(math.sqrt(N)))",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '0'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n') == '2'\nassert solution('5\\n') == '2'\nassert solution('5\\n') == '2'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == 2\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('123') == 'Yes'\nassert solution('123a') == 'No'\nassert solution('1a2b3') == 'Yes'\nassert solution('a1a2a3a') == 'Yes'\n\n---Problem Statement---\nWrite a program which, given a positive integer n, computes the nth Fibonacci number in O(n) time.\n\nFor example, given n = 5, your program should return 3 (since the 5th Fibonacci number is 3).\n\nFor more information on the Fibonacci numbers, see https://en.wikipedia.org/wiki/Fibonacci_number.\n\nWrite a program which, given a positive integer n, returns the sum of the first n Fibonacci numbers.\n\nFor example, given n = 5, your program should return 8 (since F(5) = 3, F(4) = 2 and F(3) = 1, so F(5) + F(4) + F(3) + F(2) + F(1) = 8).\n\nFor n = 10, your program should return 44, since F(10) = 55, F(9) = 34, F(8) = 21, F(7) = 16, F(6) = 13, F(5) = 8 and F(4) = 5.\n\n-----Notes-----\nThis problem is considered easy, being worth only 1 mark.\n\n-----Hints-----\nThe Fibonacci sequence can be defined recursively in terms of the Fibonacci numbers of the previous two terms:\n\nF(n) = F(n-1) + F(n-2), where F(0) = 0 and F(1) = 1.\n\nThe Fibonacci numbers are a set of numbers that follow the Fibonacci sequence. For example, they start with 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, and so on.\n\n---Solution---\nFor this problem, the solution is the Fibonacci numbers. We can compute the nth Fibonacci number in O(n) time, using the formulae:\n\nF(n) = F(n-1) + F(n-2), where F(0) = 0 and F(1) = 1.\n\nTo compute the Fibonacci number of a particular n, we can compute the Fibonacci number of n-1 and n-2 in constant time (i.e., O(1)). Then, we can use a recursive formula to compute the nth Fibonacci number:\n\nF(n) = F(n-1) + F(n-2), where F(0) = 0 and F(1) = 1.\n\nYou can then use the fact that F(n) = F(n-1) + F(n-2) to write a recursive formula for the Fibonacci number of n:\n\nF(n) = F(n-1) + F(n-2)\n\nThe base cases are F(0) = 0, and F(1) = 1, so that the recursive formula can be written as:\n\nF(n) = F(n-1) + F(n-2), or equivalently:\n\nF(n) = F(0) + F(1) + F(2) + F(3) + F(4) +... + F(n-2) + F(n-1).\n\nTo compute the sum of the first n Fibonacci numbers, we can simply compute the sum of the first n Fibonacci numbers in O(n) time. Then, we can use the fact that F(n) = F(n-1) + F(n-2), so that:\n\nF(n) = F(n-1) + F(n-2), or equivalently:\n\nF(n) = F(0) + F(1) + F(2) + F(3) +... + F(n-1) + F(n-2).\n\nThe base cases are F(0) = 0, F(1) = 1, so that the recursive formula can be written as:\n\nF(n) = F(0) + F(1) + F(2) + F(3) +... + F(n-1) + F(n-2), or equivalently:\n\nF(n) = F(0) + F(1) + F(2) + F(3) +... + F(n-1), or equivalently:\n\nF(n) = F(0) + F(1) + F(2) + F(3) +... + F(n-1) = F(0) + F(1) + F(2) +... + F(n-1).\n\nSo, we can compute the sum of the first n Fibonacci numbers in O(n) time by implementing the formula:\n\nF(n) = F(0) + F(1) + F(2) + F(3) +... + F(n-1).\n\n-----Test Cases-----\nInput:\n1\n1\nOutput:\n1\n\nInput:\n2\n1\nOutput:\n1\n1\n\nInput:\n3\n1\nOutput:\n1\n1\n1\n\nInput:\n4\n1\nOutput:\n1\n1\n1\n1\n\nInput:\n5\n1\nOutput:\n1\n1\n1\n1\n1\n\nInput:\n10\n1\nOutput:\n1\n1\n1\n1\n1\n2\n4\n\nInput:\n15\n1\nOutput:\n1\n1\n1\n1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n89\n144\n233\n377\n\nInput:\n20\n1\nOutput:\n1\n1\n1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n89\n144\n233\n377\n1151\n2389\n3884\n5765\n7742\n11133\n23776\n38721\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 51
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"123a\") == \"Yes\"\nassert solution(\"123456\") == \"No\"\nassert solution(\"12345a\") == \"Yes\"\nassert solution(\"1234567\") == \"No\"\n",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123\", \"123\") == \"Yes\"\nassert solution(\"123\", \"123a\") == \"No\"\nassert solution(\"aBc\", \"AbC\") == \"Yes\"\nassert solution(\"aBc\", \"ABC\") == \"No\"\nassert solution(\"aBc\", \"AbC\") == \"Yes\"\n\nprint(solution(stdin.strip()))\n\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 58
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"123a\") == \"No\"\nassert solution(\"1234\") == \"No\"\n\"\"\"\n\nS = input()\nP = input()",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('123') == 'Yes'\nassert solution('1234') == 'No'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123\") == \"No\"\nassert solution(\"123a\") == \"No\"\nassert solution(\"123a1\") == \"Yes\"\nassert solution(\"12a1\") == \"Yes\"\nassert solution(\"12a0\") == \"No\"\n",
        "num_ids_2": 21,
        "num_ids_4": 45
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('1234qwer') == 'No'\nassert solution('123a') == 'Yes'\nassert solution('123A') == 'Yes'\nassert solution('123abc') == 'Yes'\n",
        "num_ids_2": 26,
        "num_ids_4": 48
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(123) == \"Yes\"\nassert solution(123a) == \"No\"\n\n\"\"\"\n\nimport string\n\nclass Solution:\n    def isValidPassword(self, S, P):\n        if S == P:\n            return 'Yes'\n\n        S = S.lower()\n        P = P.lower()\n        temp = P + P\n        if S in temp:\n            return 'Yes'\n        \n        if S.replace(S[0], str(int(S[0]))) == P:\n            return 'Yes'\n        if S.replace(S[-1], str(int(S[-1]))) == P:\n            return 'Yes'\n        return 'No'",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('123') == 'Yes'\nassert solution('123a') == 'No'\nassert solution('123aa') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"123a\") == \"No\"\nassert solution(\"123abc\") == \"No\"\nassert solution(\"123aBc\") == \"Yes\"\nassert solution(\"123A\") == \"Yes\"\n",
        "num_ids_2": 21,
        "num_ids_4": 45
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\n\"\"\"\n\nimport string\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('kemija') == 'kempipijapa'\nassert solution('paprika') == 'papapripikapa'\nassert solution('dzepedzelepepenapa') == 'dzepedzelepenapapripikapa'\n\nprint(solution(input()))\n\n-----\n\n\"\"\"\n\nimport re",
        "num_ids_2": 33,
        "num_ids_4": 62
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\nassert solution(\"jogajopa svp\") == \"joga svp\"\n\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\nassert solution(\"kpipipipipiapipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipipip",
        "num_ids_2": 1746,
        "num_ids_4": 1746
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('zepelepenapa') == 'zelena paprika'\nassert solution('papapa') == 'papapa'\nassert solution('papapripikapa') == 'paprika'\nassert solution('kemija') == 'kepemipijapa'\n\n\"\"\"\n\nimport string\nimport re",
        "num_ids_2": 31,
        "num_ids_4": 65
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\nprint(solution(stdin), end=\"\\n\")",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('32 2') == '-32'\n\nassert solution('32 2') == '-32'\n\nassert solution('32 2') == '-32'\n\nassert solution('32 2') == '-32'\n\nassert solution('32 2') == '-32'",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('32 2') == '-32'",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"32 2\") == \"-32\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('32 2') == '-32'\nassert solution('65 3') == 'IMPOSSIBLE'\nassert solution('73 7') == 'ALL GOOD'\n\"\"\"\n\nimport sys\nimport math\n",
        "num_ids_2": 26,
        "num_ids_4": 38
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('32 2') == '-32'\n\"\"\"\n\nfrom math import floor\nfrom decimal import *",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"32 2\") == \"-32\"\n\nassert solution(\"7 5\") == \"IMPOSSIBLE\"\n\"\"\"\n\nx, y = map(int, input().split())\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('32 2') == '-32'\nassert solution('32 2') == '-32'\nassert solution('32 2') == '-32'\nassert solution('32 2') == '-32'\nassert solution('32 2') == '-32'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"32 2\") == \"-32\"\n\n\"\"\"\n\nfrom math import log10, ceil, floor\n\nA = [int(x) for x in stdin.split()]\n\nx = A[0]\ny = A[1]\n\nb = int(ceil(log10(A[1])))\n\nprint(A[0] - y * (log10(A[1]) - b))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"32 2\") == \"ALL GOOD\"\n\"\"\"\n\nx, y = list(map(int, stdin.split()))",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'IMPOSSIBLE'\nassert solution('32 2') == '-32'\nassert solution('32 3') == 'IMPOSSIBLE'\n'''",
        "num_ids_2": 25,
        "num_ids_4": 39
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\n\nassert solution(\"1 3 4\") == \"one\"\n\nassert solution(\"1 3 2\") == \"none\"\n\nassert solution(\"1 2 3 4\") == \"none\"\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2 3 3\\n1 3 4') == 'both'\nassert solution('2 2 3 3\\n1 4 7') == 'one'\nassert solution('2 2 3 3\\n2 6 8') == 'none'\nassert solution('2 2 3 3\\n2 7 2') == 'none'\n\n\"\"\"\n\nimport math\n\nA, B, C, D = map(int, stdin.readline().split())\nP, M, G = map(int, stdin.readline().split())\n\nn = math.ceil(P / (A + B))\nm = math.ceil(M / (C + D))\ng = math.ceil(G / (A + C))\n\nboth = n * m * g\none = n * m * (g + 1)\nnone = n * m * (g + 1) * 2\n\nprint(min(both, one, none))\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"none\"\nassert solution(\"1 3 4 2\") == \"both\"\nassert solution(\"2 4 2 1\") == \"both\"",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 3 3\\n1 3 4\") == \"both\\none\\nnone\"\nassert solution(\"2 2 3 3\\n1 3 4\\n2 2 5\") == \"both\\none\\none\\none\"\nassert solution(\"2 2 3 3\\n1 3 4\\n2 2 5\\n2 2 5\") == \"both\\none\\none\\none\"\nassert solution(\"2 2 3 3\\n1 3 4\\n2 2 5\\n2 2 5\\n2 2 5\") == \"both\\none\\none\\none\\none\"\n\"\"\"",
        "num_ids_2": 52,
        "num_ids_4": 127
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 3 3\\n1 3 4\") == \"both\"\nassert solution(\"2 2 3 3\\n1 3 4\\n4 3 2\") == \"both\"\nassert solution(\"2 2 3 3\\n1 3 4\\n4 3 2\\n5 3 2\") == \"one\"\nassert solution(\"2 2 3 3\\n1 3 4\\n4 3 2\\n5 3 2\\n6 3 2\") == \"none\"\nassert solution(\"2 2 3 3\\n1 3 4\\n4 3 2\\n5 3 2\\n6 3 2\\n7 3 2\") == \"none\"\n\n\"\"\"\n\nimport sys\n\nA = list(map(int, sys.stdin.readline().split()))\n",
        "num_ids_2": 41,
        "num_ids_4": 102
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 3 3\\n1 3 4\") == \"both\"\nassert solution(\"2 2 3 3\\n1 3 4\") == \"one\"\nassert solution(\"2 2 3 3\\n1 3 4\") == \"none\"\n\"\"\"\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 3 3\\n1 3 4\") == \"both\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"one\"\nassert solution(\"3 3 4\") == \"none\"\n\nprint(\"All tests passed.\")\n",
        "num_ids_2": 25,
        "num_ids_4": 37
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2 3 3\\n1 3 4') == 'both'\nassert solution('2 2 3 3\\n1 3 4') == 'one'\nassert solution('2 2 3 3\\n1 3 4') == 'none'\nassert solution('2 2 3 3\\n1 3 4') == 'both'\nassert solution('2 2 3 3\\n1 3 4') == 'one'\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"one\"\nassert solution(\"1 2 3 4\") == \"none\"\n\n-----Test Data-----\nSample 1\n2 2 3 3\n1 3 4\n\nSample 2\n2 2 2 2\n1 3 4\n\nSample 3\n3 4 5 6\n7 8 9 10\n\n\"\"\"\n\nimport sys\nimport os",
        "num_ids_2": 25,
        "num_ids_4": 38
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6 8\") == \"10\"\nassert solution(\"10 6 8\") == \"10\"\nassert solution(\"0 10 8\") == \"10\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 6 8\") == \"10\"\n\"\"\"\n\n\"\"\"\n\u0412 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 2 \u0434\u043e 99 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c,\n\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u043d\u0438\u0445 \u043a\u0440\u0430\u0442\u043d\u044b \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 2 \u0434\u043e 9.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: 8 \u0440\u0430\u0437\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e n - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c.\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 10000.\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b n \u0447\u0438\u0441\u0435\u043b - \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c.\n\u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 n \u0441\u0442\u0440\u043e\u043a \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0449\u0435\u0435 10000.\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412 \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0439 \u0444\u0430\u0439\u043b \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u043a\u0430\u0436\u0434\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443. \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b, \u043a\u0440\u0430\u0442\u043d\u044b\u0445 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 2 \u0434\u043e 9. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0430\u043c\u0438 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n8\n6 8 10 12 14 16 18\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n0\n6\n8\n6\n8\n10\n12\n14\n16\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435\n\u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0446\u0438\u043a\u043b for.\n\u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e reduce.\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('3 5 7') == '10'\nassert solution('1 3 5') == '10'\nassert solution('5 9 1') == '5'\nassert solution('3 5 9') == '10'\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 6 8') == '10'\nassert solution('2 2 2') == '3'\nassert solution('-1 -1 -1') == '0'\nassert solution('100 -1 -1') == '99'\nassert solution('1 1 1') == '4'\n",
        "num_ids_2": 24,
        "num_ids_4": 53
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6 8\") == \"10\"\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 6 8') == 10\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 6 8') == 10\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 6 8') == '10'\n\"\"\"\nimport sys\n\nnums = sys.stdin.readlines()[0].split()\n\nfor i in range(len(nums)):\n    nums[i] = int(nums[i])\n\nnums.sort()\nprint(nums[-1] + nums[-2] - nums[-3])\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1 1 1') == ''\nassert solution('2 1 2') == ''\nassert solution('2 1 1') == '2'\n",
        "num_ids_2": 16,
        "num_ids_4": 36
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 6 8') == '10'\nassert solution('4 8 10') == '14'\nassert solution('-4 6 8') == '-10'\nassert solution('-10 -14 -18') == '-22'\n",
        "num_ids_2": 24,
        "num_ids_4": 54
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"500 70\") == \"533\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"500 70\") == \"533\"\nassert solution(\"4 90\") == \"8\"\nassert solution(\"4 89\") == \"8\"\nassert solution(\"5 89\") == \"8\"\nassert solution(\"4 89\") == \"8\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(read()) == write()",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('500 70') == '533'\nassert solution('500 70') == '533'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('500 70') == '533'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"500 70\") == \"533\"\n\"\"\"\n\nfrom math import sqrt",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"500 70\") == \"533\"\n\"\"\"\n\nh, v = map(int, input().split())\nprint(h * math.sin(math.radians(v)) + (h * math.cos(math.radians(v)))/2)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"500 70\") == \"533\"\nprint(solution(\"500 70\"))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"500 70\") == \"533\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(read_input()) == write_output()",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'\n\nimport math\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == '39.0\\n30.0'\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n\"\"\"\nimport math\n\ninput_data = input().split(\" \")\nn = int(input_data[0])\ng = int(input_data[1])\n\ninput_data = []\n\nfor _ in range(n):\n    input_data.append([int(x) for x in input().split(\" \")])",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'\n\"\"\"\n\nfrom typing import List, Dict\nfrom math import cos, acos, sin, pi\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n\"\"\"\n\n\nfrom math import sqrt, cos\n\nimport sys\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == '39.0\\n30.0'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 9\n69 60\n100 60''') == '''39.0\n30.0'''\n\n\"\"\"\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n23 27 31 28 30''') == '2 28'\n\nassert solution('''3\n-20 -10 -20''') == '1 0'\n\nassert solution('''5\n30 30 30 30 30''') == '0 30'\n\nassert solution('''8\n29 35 40 28 34 12 38 26''') == '3 20'\n\nassert solution('''13\n29 35 40 28 34 12 38 26 30 30''') == '5 20'",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\nassert solution(\"3\\n30 40 40\") == \"0 0\"\nassert solution(\"6\\n30 40 40 20 20 20\") == \"1 0\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 34,
        "num_ids_4": 53
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n\nprint(solution(stdin.read()))\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\nassert solution(\"7\\n30 31 32 36 42 45\") == \"6 36\"\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n23 27 31 28 30\") == \"2 28\"\nassert solution(\"6\\n23 27 31 28\") == \"2 27\"\nassert solution(\"5\\n23 27 31\") == \"2 27\"\nassert solution(\"3\\n23 27\") == \"2 27\"\nassert solution(\"2\\n23 27\") == \"1 27\"\n\nprint('Success')\n\n-----\nSample input:\n10\n-2 -1 -4 -5 -9 -11 -13 -16 -20 -19\nSample output:\n1 -2\n\n-----\n\nSample input:\n20\n-2 -1 -4 -5 -9 -11 -13 -16 -20 -19 -27 -26\nSample output:\n1 1\n\n-----\nSample input:\n1\n-2\nSample output:\n1 1\n\n-----\nSample input:\n3\n-2 -1\nSample output:\n1 1\n\n-----\nSample input:\n5\n-2 -1 -4 -5 -9\nSample output:\n1 1\n\n-----\nSample input:\n10\n-2 -1 -4 -5 -9 -11 -13 -16 -20 -19 -27 -26\nSample output:\n1 1\n\n-----\nSample input:\n5\n23 27 31 28 30\nSample output:\n2 28\n\n-----\nSample input:\n5\n23 27 31 28\nSample output:\n1 1\n\n-----\nSample input:\n3\n23 27\nSample output:\n2 27\n\n-----\nSample input:\n3\n23 27\nSample output:\n1 1\n\n-----\nSample input:\n2\n23 27\nSample output:\n1 1\n\n-----\nSample input:\n2\n23 27\nSample output:\n1 1\n\n-----\nSample input:\n3\n23 27\nSample output:\n1 1\n\n-----\nSample input:\n1\n23\nSample output:\n1 1\n\n-----\nSample input:\n5\n22 -15 -1 -2 -3\nSample output:\n0 1\n\n-----\nSample input:\n3\n22 -15 -1\nSample output:\n1 1\n\n-----\nSample input:\n1\n22\nSample output:\n1 1\n\n-----\nSample input:\n4\n22 -15 -1 -2\nSample output:\n1 1\n\n-----\nSample input:\n6\n22 -15 -1 -2 -3\nSample output:\n0 1\n\n-----\nSample input:\n8\n22 -15 -1 -2 -3 -4\nSample output:\n0 1\n\n-----\nSample input:\n1\n22\nSample output:\n1 1\n\n-----\nSample input:\n4\n22 -15 -1 -2\nSample output:\n0 1\n\n-----\nSample input:\n5\n22 -15 -1 -2 -3\nSample output:\n0 1\n\n-----\nSample input:\n3\n22 -15 -1\nSample output:\n0 1\n\n-----\nSample input:\n1\n22\nSample output:\n1 1\n\n-----\nSample input:\n4\n22 -15 -1 -2\nSample output:\n0 1\n\n-----\nSample input:\n2\n22 -15\nSample output:\n0 1\n\n-----\nSample input:\n5\n22 -15 -1 -2 -3\nSample output:\n0 1\n\n-----\nSample input:\n5\n22 -15 -1 -2 -3\nSample output:\n0 1\n\n-----\nSample input:\n1\n22\nSample output:\n1 1\n\n-----\nSample input:\n1\n22\nSample output:\n1 1\n\n-----\nSample input:\n8\n-1 -2 -3 -4 -5 -6 -7 -8\nSample output:\n8 -1\n\n-----\nSample input:\n10\n-1 -2 -3 -4 -5 -6 -7 -8 -9 -10\nSample output:\n10 -1\n\n-----\nSample input:\n2\n-1 -2\nSample output:\n2 -1\n\n-----\nSample input:\n5\n-1 -2 -3 -4 -5\nSample output:\n1 1\n\n-----\nSample input:\n8\n-1 -2 -3 -4 -5 -6 -7 -8\nSample output:\n8 -1\n\n-----\nSample input:\n10\n-1 -2 -3 -4 -5 -6 -7 -8 -9 -10\nSample output:\n10 -1\n\n-----\nSample input:\n7\n-1 -2 -3 -4 -5 -6 -7\nSample output:\n1 1\n\n-----\nSample input:\n4\n-1 -2 -3 -4\nSample output:\n1 1\n\n-----\nSample input:\n1\n-1\nSample output:\n1 1\n\n-----\nSample input:\n1\n-1\nSample output:\n1 1\n\n-----\nSample input:\n5\n-1 -2 -3 -4 -5\nSample output:\n1 1\n\n-----\nSample input:\n1\n-1\nSample output:\n1 1\n\n-----\nSample input:\n1\n-1\nSample output:\n1 1\n\n-----\nSample input:\n3\n-1 -2 -3\nSample output:\n1 1\n\n-----\nSample input:\n6\n-1 -2 -3 -4 -5 -6\nSample output:\n6 -1\n\n-----\nSample input:\n4\n-1 -2 -3 -4\nSample output:\n6 -1\n\n-----\nSample input:\n2\n-1 -2\nSample output:\n2 -1\n\n-----\nSample input:\n3\n-1 -2 -3\nSample output:\n3 -1\n\n-----\nSample input:\n8\n-1 -2 -3 -4 -5 -6 -7 -8\nSample output:\n8 -1\n\n-----\nSample input:\n9\n-1 -2 -3 -4 -5 -6 -7 -8 -9\nSample output:\n9 -1\n\n-----\nSample input:\n7\n-1 -2 -3 -4 -5 -6 -7\nSample output:\n7 -1\n\n-----\nSample input:\n5\n-1 -2 -3 -4 -5\nSample output:\n5 -1\n\n-----\nSample input:\n5\n-1 -2 -3 -4 -5\nSample output:\n5 -1\n\n-----\nSample input:\n3\n-1 -2 -3\nSample output:\n3 -1\n\n-----\nSample input:\n6\n-1 -2 -3 -4 -5 -6\nSample output:\n6 -1\n\n-----\nSample input:\n9\n-1 -2 -3 -4 -5 -6 -7 -8 -9\nSample output:\n9 -1\n\n-----\nSample input:\n10\n-1 -2 -3 -4 -5 -6 -7 -8 -9 -10\nSample output:\n10 -1\n\n-----\nSample input:\n7\n-1 -2 -3 -4 -5 -6 -7\nSample output:\n7 -1\n\n-----\nSample input:\n1\n-1\nSample output:\n1 1\n\n-----\nSample input:\n6\n-1 -2 -3 -4 -5 -6\nSample output:\n6 -1\n\n-----\nSample input:\n3\n-1 -2",
        "num_ids_2": 35,
        "num_ids_4": 66
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\n\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\nprint(\"all tests passed.\")\n\n--------------------------------------------------------------------------------------------------------------------------------\n\nimport math",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 6\n1 2 3''') == '2'\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 6\\n1 2 3') == 2\n\n\"\"\"\n\nimport math",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 6\\n1 2 3') == '2'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2 3 4\") == \"2\"\nassert solution(\"3 2\\n1 1\\n2 1\") == \"1\"\nassert solution(\"4 4\\n1 1\\n2 1\\n3 1\") == \"0\"\nassert solution(\"5 4\\n1 1\\n2 1\\n3 1\\n4 1\") == \"0\"\nassert solution(\"6 4\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\") == \"1\"\n",
        "num_ids_2": 36,
        "num_ids_4": 86
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(sample_input_lines)) == str(sample_output)\nprint(solution(str(stdin.readlines())))\n\n-----Problem-----\nStar Platinum\n\nBy travelling through space in a series of battles you can determine how many ships aton has left over in each solar system after the series. What is the maximum number of battles that Atli can win?\n\"\"\"\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n1 1 2 3\\n\") == 2\n\"\"\"\nimport sys\nimport numpy as np",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"2\"\nassert solution(\"5 5\") == \"0\"\n\n\"\"\"\n\nimport math\nimport sys",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\\n1 2 3\") == 2\n'''\nimport math\nimport re\n\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == 2\n\n\"\"\"\n\nimport sys\n\nn, a = [int(i) for i in sys.stdin.readline().split()]\ne = [int(i) for i in sys.stdin.readline().split()]\n\nwin = 0\nfor i in e:\n    win += a // i\n\nprint(win)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\n1 2 3\") == \"2\"\nassert solution(\"3 6\\n1 1 1\") == \"0\"\nassert solution(\"3 6\\n2 2 2\") == \"1\"\nassert solution(\"3 6\\n1 2 2\") == \"1\"\n\"\"\"\n\nfrom collections import defaultdict\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('MWWMMMMM') == 9\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"MWWMWMMWM\") == 9\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WWMWM\") == \"3\"\nassert solution(\"MWMWM\") == \"5\"\nassert solution(\"MWMMW\") == \"6\"\nassert solution(\"M\") == \"1\"\nassert solution(\"\") == \"0\"\n\"\"\"\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n\n    def setUp(self):\n        pass\n\n    def test_case_1(self):\n        self.",
        "num_ids_2": 24,
        "num_ids_4": 46
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1WWWWWMMM\") == \"9\"\nassert solution(\"1WMMMWWWW\") == \"5\"\n\"\"\"\n\n\"\"\"\nThis problem is a fun one.\n\nGiven a string consisting of only W and M (or vice-versa) characters, determine the number of people who can enter the club.\n\nYour task is to implement a function that, given a string of length n and an integer k, determines the number of people who can enter the club.\n\nNote: You can assume k is always a valid number (0\u2264k\u2264n).\n\nSample Input:\n1\nWWMWWMMW\nSample Output:\n3\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1MWWMWMMWM\") == \"9\"\nassert solution(\"1WMWMWMWM\") == \"3\"\nassert solution(\"1W\") == \"1\"\nassert solution(\"WWWMMMWW\") == \"4\"\nassert solution(\"WMMMWWMW\") == \"4\"\n",
        "num_ids_2": 30,
        "num_ids_4": 55
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"MWWMWMMWM\") == \"9\"\nassert solution(\"WWMWWWMW\") == \"8\"\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('MWWMMMM') == 9\nassert solution('WWWWMMMWW') == 10\nassert solution('MMMMWWWMW') == 10\nassert solution('MWWMWMMMW') == 9\nassert solution('MMMMWWWMW') == 10\n",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"MWWMWMMMW\") == \"9\"\nassert solution(\"MWWMMMWM\") == \"8\"\nassert solution(\"M\") == \"1\"\n\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 38
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"WMWMWMWMW\") == 9\nassert solution(\"MWMWMWMW\") == 6\nassert solution(\"MWMWM\") == 4\nassert solution(\"WW\") == 2\nassert solution(\"\") == 0\n",
        "num_ids_2": 23,
        "num_ids_4": 41
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"MWWMWMMWM\") == 9",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\n\"\"\"\n\nn, k = [int(i) for i in input().split()]\n\nthrow = input().split()\n\nfor t in throw:\n    if t[0] == '-':\n        i = int(t[1:])\n        n -= i\n        if n < 0:\n            n = n + (2 * n)\n    else:\n        i = int(t)\n        n += i\n        if n >= n:\n            n = n - (2 * (n - i))\n\nprint(n)",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"5 4\\n8 -2 3 undo 2\") == '3'\nassert solution(\n    \"4 1\\n-2 1\") == '0'\nassert solution(\n    \"4 1\\n1 -2\") == '1'\nassert solution(\n    \"5 4\\n8 0\") == '0'\nassert solution(\n    \"5 4\\n8 -3\") == '4'\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\n\nprint(solution(input()))\n'''\n\nn, k = [int(x) for x in input().split()]\n\ncommands = []\nfor _ in range(k):\n    commands.append([int(x) for x in input().split()])\n\ncurrent_child = 0\negg_holder = 0\n\nfor command in commands:\n    if command[0] == 0:\n        current_child = (current_child + 1) % n\n    else:\n        egg_holder = (egg_holder + 1) % n\n\n\nprint(current_child)\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 -2 3 undo 2\\n\") == \"3\"\n\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(read_input()) == write_output()\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\nassert solution('5 4\\n8 -2 3 undo 2') == '3'\n\"\"\"\n\nimport sys\nimport collections\nimport heapq",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\\n3 2 1\") == \"6 7\"\nassert solution(\"1 2 3\\n2 3 1\") == \"6 5\"\nassert solution(\"1 2 3\\n2 2 1\") == \"4 4\"\nassert solution(\"1 2 3\\n1 1 1\") == \"1 3\"\nassert solution(\"1 2 3\\n3 3 3\") == \"8 9\"\n\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\n1 2 3\\n3 2 1') == '6 7'\n\n\"\"\"\nimport heapq\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(sample_input_1)) == str(sample_output_1)\n\nprint(\"All tests passed.\")\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 2 3') == '6 7'\n\"\"\"\n\nimport sys",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n1 2 3\\n3 2 1') == '6 7'",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(a) == b\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"\nassert solution(\"5 1\\n2 3 1 2 5\\n1 1 1 1 1\") == \"3 4\"\nassert solution(\"1 1\\n1 1\") == \"1\"\nassert solution(\"3 2\\n1 1 1\\n1 1 1\") == \"1\"\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 84
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2 3\n1 2 3\n3 2 1\n\"\"\") == '6 7'\n\nassert solution(\"\"\"\n3 1\n2 3\n1 2 1\n\"\"\") == '3 2'\n\nassert solution(\"\"\"\n1 1\n2 2\n1 1\n\"\"\") == '1'\n\nassert solution(\"\"\"\n1 1\n2 2\n2 2\n\"\"\") == '1'\n",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\\n3 2 1\") == \"6 7\"\nassert solution(\"1 2 3\\n3 2 1\\n1 1 1\") == \"6 4\"\n\n\"\"\"\n\nimport math\nimport time",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\\n\") == \"64 correct\\n665 incorrect\"\nassert solution(\"4\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\\n\") == \"31 correct\\n31 incorrect\"\nassert solution(\"5\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nals mollens incorrect\\nmollen mills incorrect\\n\") == \"31 correct\\n64 incorrect\"\n\"\"\"\n\n\nfrom collections import Counter",
        "num_ids_2": 112,
        "num_ids_4": 175
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(mollen) == ('64', '665')\nassert solution(als) == ('4', '4')\nassert solution(when) == ('2', '0')\n\nprint(\"All tests passed.\")\n",
        "num_ids_2": 27,
        "num_ids_4": 40
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\"\"\"\n\nimport sys\nfrom itertools import product\nfrom collections import defaultdict",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect') == '64\\n665'\nassert solution('6\\nlass mollen mollen mollen mollen mollen\\nmatten lassen correct\\nmollen lassen incorrect\\n') == '8\\n1'\nassert solution('6\\nlass mollen mollen mollen mollen mollen\\nmatten lassen correct\\n\\n\\nmatten lassen correct\\n\\n\\n') == '8\\n4'\nassert solution('5\\nlass mollen mollen mollen mollen mollen\\nmatten lassen correct\\n\\nmatten lassen correct\\n\\n\\n') == '8\\n4'\nassert solution('7\\nlass mollen mollen mollen mollen mollen\\nmatten lassen correct\\n\\nmatten lassen correct\\n\\n\\n\\nmatten lassen correct') == '8\\n4'\n",
        "num_ids_2": 76,
        "num_ids_4": 174
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\\n\") == \"64\\n665\"\nassert solution(\"7\\njesse jesse jesse jesse jesse jesse jesse jesse\\n4\\njesse jumping jesse jumping jesse jumping jesse jumping jesse\\n\") == \"1\\n1\\n1\\n1\\n0\"\n\n\"\"\"\n\n\"\"\"\nSolution Approach\n\nThe logic here is to match the translations of each word in the sentence with the words in the dictionary, and keep a counter of how many translations of each word match the word in the dictionary.\n\nI then calculate the minimum of the number of translations of each word, and if the minimum is equal to the number of words in the sentence, then I have a unique translation, and I return the length of the sentence and the word counter.\n\nOtherwise, if there is more than one translation, then I calculate the number of different translations of each word, then I return the length of the sentence and the word counter with the \"correct\" number of translations, which is the minimum of the number of translations of each word.\n\"\"\"\n\nfrom typing import List, Set, Dict\n",
        "num_ids_2": 115,
        "num_ids_4": 115
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect''') == '64 correct\\n665 incorrect'\n\nassert solution('''6\nminimis\nsi\nminimis\nminimi\nsimulor\nsimulor\nsimulor\nminimis\nminimi\nsimulor\nsimulor\nminimi\nsimulor\nsimulor\nminimi\nminimi\nsimulor\nsimulor\nminimis\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nminimi\nminimi\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nminimi\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nminimi\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nminimi\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor\nsimulor",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect') == '64 correct\\n665 incorrect'\n\nimport re\nimport itertools\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_solution(self):\n        pass",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\nprint(solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\"))\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\\n\") == \"64 correct\\n665 incorrect\"\n\"\"\"",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(read_input()) == write_output()\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 3 4 3') == '7'\nassert solution('8\\n5 6 5 4 2') == '0'\nassert solution('9\\n8 5 7 2 5 3 5 3 2') == '8'\n\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 54
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\n\n\"\"\"\n\nimport sys\nimport math\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n4 3 1 4') == '7'\n\"\"\"\n\nfrom math import gcd",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\nassert solution(\"4\\n1 1 1 1\") == \"1\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\nassert solution(\"100\\n1 100 100 100 100\") == \"1\"\nassert solution(\"100\\n1 2 2 3 3\") == \"7\"\nassert solution(\"100\\n1 2 3 4 5 6 7 8 9 10\") == \"10\"\n\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 72
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n2 2') == '2'\n\nassert solution('5\\n3 4 5 2 4') == '2'\n\nassert solution('7\\n2 3 3 3 3 4') == '3'\n\nassert solution('9\\n1 1 2 3 4 5 6 7 8') == '5'\n\nassert solution('4\\n1 1 1 1') == '1'",
        "num_ids_2": 31,
        "num_ids_4": 70
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\n2 3 4 3''') == '7'",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(st.rstrip()) == expected\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\nassert solution(\"3\\n0 0\\n1 1\\n0 2\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\n\n------Hints------\nTry creating a grid with cookie cutters and growing/shrinking it by the specified area.\n\n------Bibliography------\n\"\"\"\n\nfrom math import *\n",
        "num_ids_2": 86,
        "num_ids_4": 86
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0\\n1 1\\n0 2\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\n\n\"\"\"\n\nimport math",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n0 0\\n1 1\\n0 2') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n\n---\nimport re\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3\n0 0\n1 1\n0 2\n4\"\"\") == \"\"\"0.0 0.0\n2.0 2.0\n0.0 4.0\"\"\"\n\nassert solution(\"\"\"2\n1 1\n0 1\n1 2\n2\"\"\") == \"\"\"1.0 0.0\n0.0 2.0\"\"\"\n\nassert solution(\"\"\"4\n0 0\n0 1\n2 0\n0 2\n0 1\n1 1\n1 1\n1 2\n0 0\n2 1\n0 1\n0 1\n1 1\n1 2\n1 2\n2 2\n0 1\n0 1\n2 0\n1 1\n0 1\n0 1\n1 1\n1 2\n0 0\n1 1\n1 1\n0 1\n0 0\n0 1\n2 2\n1 2\n2 1\n1 2\n0 1\n1 2\n0 1\n1 1\n1 1\n1 1\n2 1\n0 1\n0 1\n1 1\n2 1\n0 1\n0 1\n2 1\n1 1\n2 1\n0 0\n1 2\n1 1\n0 1\n0 1\n1 1\n1 1\n0 2\n1 1\n0 2\n0 1\n1 1\n1 1\n0 1\n1 1\n1 1\n1 1\n1 1\n0 0\n0 1\n0 2\n2 1\n1 1\n0 1\n0 1\n0 1\n1 1\n1 1\n1 1\n0 1\n1 1\n1 1\n0 1\n1 1\n0 2\n0 1\n0 1\n1 1\n0 1\n0 1\n1 1\n1 1\n0 0\n1 2\n0 2\n1 2\n0 0\n0 1\n2 2\n0 0\n0 1\n0 0\n0 0\n1 1\n2 2\n0 1\n0 0\n1 1\n1 1\n1 1\n0 1\n2 1\n1 1\n0 1\n0 1\n1 1\n0 1\n0 1\n1 1\n0 1\n1 1\n0 1\n0 1\n1 1\n0 1\n1 1\n0 1\n0 1\n2 1\n1 1\n0 0\n1 2\n1 1\n0 1\n1 1\n0 1\n1 1\n1 1\n1 1\n0 1\n0 1\n1 1\n0 1\n1 1\n0 0\n0 1\n2 1\n0 1\n0 0\n0 1\n1 1\n0 1\n0 0\n1 1\n0 1\n0 1\n0 0\n0 0\n0 1\n1 1\n0 1\n0 1\n0 0\n0 0\n0 1\n1 1\n0 1\n1 1\n1 1\n0 1\n0 1\n0 1\n2 2\n0 1\n0 1\n0 1\n0 0\n1 1\n1 1\n0 1\n0 1\n0 1\n1 1\n0 1\n0 1\n0 1\n1 1\n1 1\n0 1\n0 1\n0 1\n0 1\n2 2\n0 0\n0 1\n0 1\n0 1\n0 1\n1 1\n0 0\n0 1\n0 1\n0 0\n0 0\n1 1\n1 1\n1 1\n0 1\n0 1\n0 1\n0 1\n1 1\n1 1\n1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n1 1\n1 1\n0 1\n0 1\n0 1\n0 0\n0 1\n1 1\n0 1\n0 1\n0 1\n0 1\n1 1\n1 1\n0 1\n0 1\n0 0\n0 0\n0 0\n1 1\n0 0\n1 1\n0 1\n1 1\n1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n1 1\n0 1\n1 1\n0 1\n1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n1 1\n0 1\n1 1\n0 0\n0 1\n1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n1 1\n0 1\n0 1\n0 1\n1 1\n0 1\n0 1\n1 1\n0 1\n0 1\n0 1\n0 1\n1 1\n0 0\n0 1\n0 0\n0 1\n0 0\n1 1\n0 1\n1 1\n1 1\n0 1\n1 1\n0 1\n0 1\n1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n1 1\n1 1\n0 1\n0 0\n0 0\n0 0\n0 1\n1 1\n0 0\n0 1\n1 1\n0 1\n0 0\n1 1\n0 0\n1 1\n0 0\n1 1\n0 1\n1 1\n0 0\n0 1\n0 1\n0 1\n0 0\n1 1\n0 1\n0 0\n0 1\n1 1\n0 0\n0 0\n0 1\n0 0\n0 1\n0 0\n1 1\n0 1\n0 0\n0 0\n0 1\n0 0\n0 0\n0 1\n0 0\n0 1\n0 1\n1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n1 1\n1 1\n0 0\n0 1\n0 0\n0 0\n1 1\n1 1\n0 1\n0 0\n1 1\n1 1\n0 1\n0 1\n1 1\n0 1\n0 1\n0 1\n1 1\n0 1\n0 1\n0 1\n0 0\n0 1\n0 0\n0 1\n0 1\n0 0\n0 0\n1 1\n1 1\n0 0\n0 1\n1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n1 1\n0 0\n0 1\n0 1\n0 1\n0 1\n1 1\n0 1\n0 1\n0 1\n0",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\n\"\"\"\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3\n0 0\n1 1\n0 2\n4\n\"\"\") == \"\"\"0.0 0.0\n2.0 2.0\n0.0 4.0\n\"\"\"\n\nassert solution(\"\"\"5\n1.764892 1.764892\n0.827092 0.827092\n0.0 0.0\n0.827092 0.827092\n0.827092 1.764892\n0.827092 1.764892\n0.0 2.0\n0.0 2.0\n0.0 0.0\n0.0 0.0\n1.764892 1.764892\n0.827092 0.827092\n0.0 0.0\n0.827092 0.827092\n0.827092 1.764892\n0.827092 1.764892\n0.0 2.0\n0.0 2.0\n0.0 0.0\n0.0 0.0\n1.764892 1.764892\n0.827092 0.827092\n0.0 0.0\n0.827092 0.827092\n0.827092 1.764892\n0.827092 1.764892\n0.0 2.0\n0.0 2.0\n0.0 0.0\n0.0 0.0\n1.764892 1.764892\n0.827092 0.827092\n0.0 0.0\n0.827092 0.827092\n0.827092 1.764892\n0.827092 1.764892\n0.0 2.0\n0.0 2.0\n0.0 0.0\n0.0 0.0\n1.764892 1.764892\n0.827092 0.827092\n0.0 0.0\n0.827092 0.827092\n0.827092 1.764892\n0.827092 1.764892\n0.0 2.0\n0.0 2.0\n0.0 0.0\n0.0 0.0\n1.764892 1.764892\n0.827092 0.827092\n0.0 0.0\n0.827092 0.827092\n0.827092 1.764892\n0.827092 1.764892\n0.0 2.0\n0.0 2.0\n0.0 0.0\n0.0 0.0\n1.764892 1.764892\n0.827092 0.827092\n0.0 0.0\n0.827092 0.827092\n0.827092 1.764892\n0.827092 1.764892\n0.0 2.0\n0.0 2.0\n0.0 0.0\n0.0 0.0\n1.764892 1.764892\n0.827092 0.827092\n0.0 0.0\n0.827092 0.827092\n0.827092 1.764892\n0.827092 1.764892\n0.0 2.0\n0.0 2.0\n0.0 0.0\n0.0 0.0\n1.764892 1.764892\n0.827092 0.827092\n0.0 0.0\n0.827092 0.827092\n0.827092 1.764892\n0.827092 1.764892\n0.0 2.0\n0.0 2.0\n0.0 0.0\n0.0 0.0\n1.764892 1.764892\n0.827092 0.827092\n0.0 0.0\n0.827092 0.827092\n0.827092 1.764892\n0.827092 1.764892\n0.0 2.0\n0.0 2.0\n0.0 0.0\n0.0 0.0\n1.764892 1.764892\n0.827092 0.827092\n0.0 0.0\n0.827092 0.827092\n0.827092 1.764892\n0.827092 1.764892\n0.0 2.0\n0.0 2.0\n0.0 0.0\n0.0 0.0\n1.764892 1.764892\n0.827092 0.827092\n0.0 0.0\n0.827092 0.827092\n0.827092 1.764892\n0.827092 1.764892\n0.0 2.0\n0.0 2.0\n0.0 0.0\n0.0 0.0\n1.764892 1.764892\n0.827092 0.827092\n0.0 0.0\n0.827092 0.827092\n0.827092 1.764892\n0.827092 1.764892\n0.0 2.0\n0.0 2.0\n0.0 0.0\n0.0 0.0\n1.764892 1.764892\n0.827092 0.827092\n0.0 0.0\n0.827092 0.827092\n0.827092 1.764892\n0.827092 1.764892\n0.0 2.0\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\n\"\"\"\n\nfrom math import gcd\nimport collections\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Polygon:\n    def __init__(self, points):\n        self.points = points\n        self.n = len(points)\n\n    def clone(self):\n        return Polygon(self.points)\n\n    def area(self):\n        # Assume that the polygon has non-zero area.\n        return sum(self.points[i].x * self.points[(i + 1) % self.n].y - self.points[(i + 1) % self.n].x * self.points[i].y for i in range(self.n)) / 2\n\n    def rotate_90(self):\n        return Polygon(self.points[i].y, -self.points[i].x for i in range(self.n))\n\n    def rotate_180(self):\n        return Polygon(-self.points[i].x for i in range(self.n))\n\n    def rotate_270(self):\n        return Polygon(-self.points[i].y for i in range(self.n))\n\n    def scale(self, f):\n        return Polygon(Point(f * self.points[i].x, f * self.points[i].y) for i in range(self.n))",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3\n0 0\n1 1\n0 2\n4\n''') == '''\n0.0 0.0\n2.0 2.0\n0.0 4.0\n'''\n\nprint(solution(stdin))\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n3\n0 0\n1 1\n0 2\n4\n''') == '''\n0.0 0.0\n2.0 2.0\n0.0 4.0\n'''.strip()\n\nassert solution('''\n3\n0 0\n1 1\n0 2\n4\n''') == '''\n0.0 0.0\n2.0 2.0\n0.0 4.0\n'''.strip()\n\nassert solution('''\n3\n0 0\n1 1\n0 2\n4\n''') == '''\n0.0 0.0\n2.0 2.0\n0.0 4.0\n'''.strip()\n\nassert solution('''\n3\n-2 -1\n2 1\n0 2\n4\n''') == '''\n0.0 0.0\n1.0 -1.0\n-2.0 2.0\n'''.strip()\n\nassert solution('''\n3\n-1 -2\n2 1\n0 2\n4\n''') == '''\n-1.0 -2.0\n2.0 1.0\n-1.0 2.0\n'''.strip()",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1) == 1\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '9'\nassert solution('4') == '14'\nassert solution('5') == '22'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(5) == 6\nassert solution(10) == 10\nassert solution(11) == 13\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\n\n\"\"\"\n\n\"\"\"\nThe key insight to this problem is that the number of statues needed will be the sum of three values.\n\n1. The amount of statues needed for the current day\n2. The number of statues needed for the next day\n3. The number of statues needed for the next to next day\n\nThis means that the number of days is just the minimum of the three. We can use the recursive formulation of the problem:\n\nIf the number of statues we need to produce today is 0, then we are done, and we need 0 days to produce them all.\nOtherwise, we will need to produce the number of statues we need for today, and for each of the next two days.\nSo we can compute the number of days needed for today, by taking the minimum of the three.\n\"\"\"\n\nn = int(input())",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == 2\nassert solution(\"11\") == 5\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('3') == '2'\nassert solution('6') == '4'\nassert solution('30') == '14'\nassert solution('10000') == '10001'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\n\"\"\"\n\nimport math",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == 1\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\\n12 16\") == \"34\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12 16') == '34'\n\"\"\"\n\nimport sys\nimport math\n\na, b, m, sigma = map(int, sys.stdin.readline().split())\n\nprint(a * (math.ceil((m - 1 - 2 * sigma) / (2 * a)) + math.ceil(sigma / a)))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 1\n12 16''') == '34'\nprint(solution(stdin))\n\n'''\n3\n4 1\n9 14\n3 5\n'''\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12 16\\n 2 5') == '31'\nassert solution('12 16\\n 1 5') == '30'\nassert solution('12 16\\n 1 6') == '31'\nassert solution('12 16\\n 4 8') == '39'\nassert solution('12 16\\n 3 7') == '38'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1\\n12 16') == '34'\n\"\"\"\n\nimport math\n\na, b = [int(x) for x in stdin.split(' ')]\nm, s = [int(x) for x in stdin.split(' ')]\n\np = a * m + b * s\nprint(math.floor(p))\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1\\n12 16') == '34'\n\n\"\"\"\n\nimport math",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n12 16\") == \"34\"\n\"\"\"\n\nimport sys\nfrom typing import Tuple\nfrom collections import namedtuple\n\nPosition = namedtuple(\"Position\", [\"y\", \"x\"])\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n12 16\\n2 2\") == \"34\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n12 16\") == \"34\"\nassert solution(\"4 7\\n15 28\\n16 38\\n18 63\\n22 100\") == \"2493\"\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n12 16\") == \"34\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\nassert solution(\"5\\n2 4 5 3 2\") == 5\nassert solution(\"7\\n1 2 4 5 3 6 7\") == 7\nassert solution(\"8\\n2 1 3 4 5 6 7 8\") == 8\nassert solution(\"9\\n2 3 4 5 6 7 8 9\") == 9\n",
        "num_ids_2": 29,
        "num_ids_4": 64
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\n\"\"\"\n\nn = int(stdin.readline())\narr = list(map(int, stdin.readline().split()))\n\narr.sort()\n\nprint(max(arr[n - 1] - arr[i] + 1 for i in range(n - 1)))\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3 1') == 3\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\\\n1 2 3 1\") == \"3\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\n\"\"\"\n\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3 1') == 3\n\"\"\"\n\nfrom collections import defaultdict, deque",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '4\\n1 2 3 1'\n) == '3'\n\nassert solution(\n    '5\\n1 2 3 4 5'\n) == '3'\n\nassert solution(\n    '10\\n1 2 3 4 5 6 7 8 9 10'\n) == '1'\n\n\"\"\"\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 1\") == \"3\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1.0') == '1088'\nassert solution('3.4') == '724'\nassert solution('3.5') == '775'\nassert solution('0.5') == '431'\nassert solution('2') == '404'\n",
        "num_ids_2": 26,
        "num_ids_4": 50
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1.0') == '1088'\nassert solution('1.1') == '1100'\nassert solution('1.2') == '1100'\nassert solution('1.3') == '1100'\nassert solution('1.4') == '1100'\n",
        "num_ids_2": 25,
        "num_ids_4": 49
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2.0') == '2'\nassert solution('3.0') == '4'\nassert solution('6.0') == '9'\nassert solution('8.0') == '11'\nassert solution('10.0') == '12'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1.0) == 1088",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1.0\") == \"1088\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1.0') == '1088'\nassert solution('2.0') == '2988'\nassert solution('3.0') == '3988'\nassert solution('4.0') == '4988'\nassert solution('5.0') == '5988'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1.0\") == 1088\n'''\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1.0\") == \"1088\"\nassert solution(\"0.9\") == \"1088\"\nassert solution(\"2.5\") == \"2116\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1.0') == '1088'\nassert solution('0.123') == '155'\nassert solution('123.456') == '3706'\nassert solution('3.0') == '1088'\nassert solution('5.123') == '2621'\n",
        "num_ids_2": 25,
        "num_ids_4": 51
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1.0') == '1088'\n\"\"\"\n\nimport math",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n2 3 4\\n') == '4.0'\n\"\"\"\n\nimport sys\nimport numpy as np\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 4\\n-1.500000 0.400000 100.400000\\n0.400000 -1.500000 100.400000\\n100.400000 0.400000 -1.500000\\n100.400000 100.400000 0.400000\") == \"25.000000\"\n",
        "num_ids_2": 72,
        "num_ids_4": 72
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 1 1 1\\n2 2 2 2\") == \"12.000000000\"\nassert solution(\"1 1\\n0 0 0 0\") == \"100.000000000\"\nassert solution(\"10 10\\n0 0 0 0\") == \"100.000000000\"\nassert solution(\"3 1\\n2 2 1\\n3 3 3\\n4 4 4\") == \"5.0200000\"\n\"\"\"\n\nfrom itertools import groupby",
        "num_ids_2": 46,
        "num_ids_4": 95
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''0 4\n2040 0 0\n0 2040 0\n-2040 0 0\n0 -2040 0\n50 0 0\n0 50 0\n-50 0 0\n0 -50 0\n0 0 50\n0 0 -50\n40 0 0\n0 40 0\n-40 0 0\n0 -40 0\n50 0 50\n0 50 50\n-50 0 50\n0 -50 50\n0 0 50\n0 0 -50''') == '25.000000000\\n25.000000000\\n25.000000000\\n25.000000000\\n'\n\nassert solution('''0 1\n0 0 0\n0 0 0\n50 0 50\n0 50 50\n50 0 50\n0 0 50\n0 0 50\n-50 0 50\n0 -50 50\n0 -50 50\n0 0 50\n0 0 -50\n0 0 50\n-50 0 50\n0 0 50\n0 0 -50''') == '100.000000000'\n\nassert solution('''0 1\n0 0 0\n0 0 0\n100 0 100\n0 100 100\n100 0 100\n0 0 100\n0 0 100\n100 0 100\n0 100 100\n100 0 100\n-100 0 100\n0 -100 100\n0 0 100\n100 0 100\n-100 0 100\n0 0 100\n0 0 100''') == '100.000000000'\n\nassert solution('''0 1\n0 0 0\n0 0 0\n100 0 100\n0 100 100\n100 0 100\n0 0 100\n0 0 100\n100 0 100\n-100 0 100\n0 -100 100\n0 0 100\n100 0 100\n-100 0 100\n0 0 100\n0 0 100''') == '25.000000000'\n'''\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 4\\n1 0 1 1\\n2 0 2 1\\n3 0 3 1\\n4 0 4 1\") == \"0.000000000\\n25.000000000\\n25.000000000\\n25.000000000\"\n\"\"\"\n\nimport math\n\ns = int(input())\nhole = []\nfor i in range(s):\n    s1,s2,s3,s4 = list(map(int,input().split()))\n    x,y,z = s2,s3,s4\n    r = math.sqrt((x-s1)**2 + (y-s2)**2)\n    hole.append((r,x,y,z))\nhole = sorted(hole)\nt = hole[0][0]\nfor i in hole[1:]:\n    t += i[0]\n    if t%100!=0:\n        print(\"%.6f\"%t)\n    else:\n        print(t)\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n1 0 0 1\\n0 0 1 0\\n0 1 0 0\\n1 0 0 0\\n0 1 0 1\\n1 0 0 0\\n1 1 1 1') == '25.000000000'\n\n\"\"\"\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test(self):\n        stdin = ['5 2\\n1 0 0 1\\n0 0 1 0\\n0 1 0 0\\n1 0 0 0\\n0 1 0 1\\n1 0 0 0\\n1 1 1 1']\n        ans = ['25.000000000', '25.000000000', '25.000000000', '25.000000000', '25.000000000', '25.000000000']\n        self.assertListEqual(ans, [solution(stdin[0]) for i in range(len(stdin))])",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '100.000000000'\nassert solution('5\\n3 1 -1 100\\n4 1 1 100\\n4 1 1 100') == '50.0'\nassert solution('5\\n3 1 -1 100\\n4 1 1 100\\n4 1 1 100') == '50.0'",
        "num_ids_2": 23,
        "num_ids_4": 85
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('2 1\\n1 5\\n') == '4.00000'\n'''\nimport math\nimport numpy as np",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 4\") == \"25.000000000\\n25.000000000\\n25.000000000\\n25.000000000\\n\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 4\\n0 0 0 50\\n0 0 0 50') == '25.000000000\\n25.000000000\\n25.000000000\\n25.000000000'\n    \nSample Input:\n2 3\nSample Output:\n25.000000000\n25.000000000\n25.000000000\n25.000000000\n25.000000000\n25.000000000\n'''\n\nn, s = [int(x) for x in input().split(' ')]\nholes = []\nfor i in range(n):\n    x, y, z, r = [int(x) for x in input().split(' ')]\n    holes.append([x, y, z, r])",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 4\\n3\\n4\\n5\\n6\\n7') == 'DA DA DA NE NE'\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA DA DA NE NE\"\nprint(\"Test 1 OK\")\n\nassert solution(\"10 3 10\\n4\\n10\\n3\\n4\\n9\\n4\\n8\\n5\\n6\\n2\\n6\\n8\\n9\\n6\\n3\\n4\\n3\\n2\\n1\\n2\\n2\\n2\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\",
        "num_ids_2": 1683,
        "num_ids_4": 1683
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 4\\n3\\n4\\n5\\n6\\n7') == 'DA\\nDA\\nDA\\nNE\\nNE'\nprint(solution(stdin.rstrip('\\n')))\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 4\\n3\\n4\\n5\\n6\\n7\\n') == 'DA'\n'''\n\ninputs = []\nwhile True:\n    try:\n        inputs.append(input().split())\n    except:\n        break\n\nfor n in inputs:\n    n = list(map(int, n))\n    w, h, wt, ht = n[0], n[1], n[2], n[3]\n    n = sorted(n[4:])\n    out = []\n    for i in n:\n        if i <= ht and i <= wt:\n            out.append('DA')\n        else:\n            out.append('NE')\n\n    for i in out:\n        print(i)\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 3 4\n3\n4\n5\n6\n7''') == 'DA\\nDA\\nDA\\nNE\\nNE'\nassert solution('''2 3 4\n3\n3\n4\n6\n5''') == 'DA\\nDA'\n\n-----Constraints-----\n1 <= N <= 50\n1 <= W, H <= 100\n1 <= L[i] <= 1000\n\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == 'DA'\nassert solution('1\\n2\\n3') == 'NE'\n'''\n",
        "num_ids_2": 21,
        "num_ids_4": 37
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA DA DA NE NE\"\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 4\\n3\\n4\\n5\\n6\\n7') == 'DA\\nDA\\nDA\\nNE\\nNE\\n'\n\n-----Explanation-----\nThe first line of the input is the number of matches that Mirko had.\n\nMirko threw 5 matches.\n\nMirko\u2019s mother gave him a box with dimensions 3x4.\n\nOne of the matches, of length 3, can be placed on the floor, so he decided to throw matches of lengths 3, 4, 5, 6, 7.\n\nAll of the lengths 3, 4, 5 fit in the box.\n\nThe last match, 6, is too big for the box and Mirko threw it into the neighbour\u2019s garbage.\n\nThe output for the first match is \u201cDA\u201d, since it can be placed.\n\nThe output for the last match is \u201cNE\u201d, since it is too big for the box.\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nx, y = map(int, sys.stdin.readline().split())\nlst = []\nfor _ in range(N):\n    lst.append(int(sys.stdin.readline()))",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 3 4\n3\n4\n5\n6\n7''') == 'DA\\nDA\\nDA\\nNE\\nNE'\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n0 0\\n7 42\\n') == '6'\nassert solution('1\\n0 0\\n1 1\\n') == '1'\n\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n2\n0 0\n7 42\n''') == '6'\n\n\"\"\"\nimport math",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n0 0\\n7 42') == '6'\n\nimport sys; x = open(sys.argv[1]).read().split('\\n')\nprint(solution(x))\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n7 42\") == '6'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n0 0\\n7 42') == '6'\n\"\"\"\n\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n2 3\") == \"6\"\n\"\"\"\n\n\"\"\"\nfrom typing import List\n\nfrom collections import defaultdict",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n7 42\") == '6'\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 0\\n7 42') == '6'\nprint(solution(stdin))\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n0 0\\n7 42') == '6'\nassert solution('3\\n0 0\\n10 5\\n5 15') == '10'\n\n\"\"\"\n\nfrom itertools import groupby",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2\n0 0\n7 42''') == '6'\nassert solution('''3\n2 0\n0 0\n1 3''') == '6'\nassert solution('''3\n4 0\n0 0\n1 3''') == '8'\nassert solution('''2\n0 0\n7 42''') == '6'\nassert solution('''3\n2 0\n0 0\n1 3''') == '6'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\n\") == \"correct\"\nassert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\n\") == \"1\"\nassert solution(\"2\\n-> ALICE\\n-> BOB\\nALICE -> CARL\\n\") == \"1\"\nassert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE -> CARL\\n\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 62,
        "num_ids_4": 120
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 -> 2\\n2 -> 3\\n3 -> 1\\n\") == \"correct\"\nassert solution(\"2 -> 4\\n4 -> 3\\n3 -> 2\\n\") == \"1\"\nassert solution(\"1 -> 4\\n4 -> 3\\n3 -> 2\\n\") == \"2\"\n\nprint(solution(stdin))\n\n\n\n-----Solution-----\n\nfrom typing import List",
        "num_ids_2": 48,
        "num_ids_4": 72
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 1 0 0\") == \"correct\"\nassert solution(\"1 1 0 0 0\") == \"3\"\nassert solution(\"1 1 1 1 1\") == \"correct\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\n\") == \"correct\"\n\nimport re\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL') == 'correct'\n\"\"\"\n\nimport sys\nfrom itertools import groupby\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'correct'\nassert solution('AAB -> BOB') == 'correct'\nassert solution('AAB -> ALICE') == '1'\nassert solution('AAB -> BOB AA') == '1'\nassert solution('AAB -> ALICE AA') == '1'\n",
        "num_ids_2": 24,
        "num_ids_4": 53
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\nassert solution(\"1\\n-> APPLE\\nAPPLE -> APPLE\\nAPPLE -> APPLE\") == \"correct\"\nassert solution(\"2\\n-> APPLE\\nAPPLE -> APPLE\\nAPPLE -> APPLE\\nAPPLE -> APPLE\") == \"2\"\nassert solution(\"3\\n-> APPLE\\nAPPLE -> APPLE\\nAPPLE -> APPLE\\nAPPLE -> APPLE\") == \"correct\"\n\n\"\"\"\n",
        "num_ids_2": 58,
        "num_ids_4": 130
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\n\nassert solution(\"4\\n-> A\\n-> B\\n-> C\\n-> D\\nA B -> C\\nB C -> D\") == \"correct\"\n\nassert solution(\"2\\n-> A\\n-> B\\nA B -> C\") == \"3\"\n\nassert solution(\"3\\n-> A\\n-> B\\nA B -> C\\nC -> B\") == \"1\"\n\nassert solution(\"1\\n-> A\\nA -> B\") == \"1\"",
        "num_ids_2": 67,
        "num_ids_4": 120
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\n') == 'correct'\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(r\"3\\n\"\n    r\"-> ALICE\\n\"\n    r\"-> BOB\\n\"\n    r\"ALICE BOB -> CARL\\n\") == \"correct\"\nassert solution(r\"1\\n\"\n    r\"-> ALICE\\n\"\n    r\"ALICE -> CARL\\n\") == \"1\"\nassert solution(r\"1\\n\"\n    r\"-> ALICE\\n\"\n    r\"ALICE -> CARL\\n\"\n    r\"-> BOB\\n\"\n    r\"ALICE BOB -> CARL\\n\") == \"2\"\nassert solution(r\"2\\n\"\n    r\"-> ALICE\\n\"\n    r\"-> BOB\\n\"\n    r\"ALICE -> CARL\\n\"\n    r\"-> BOB\\n\"\n    r\"ALICE BOB -> CARL\\n\") == \"correct\"\nassert solution(r\"2\\n\"\n    r\"-> ALICE\\n\"\n    r\"-> BOB\\n\"\n    r\"ALICE -> CARL\\n\"\n    r\"-> BOB\\n\"\n    r\"CARL -> ALICE\\n\") == \"2\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Connie Froggatt\"\n",
        "num_ids_2": 145,
        "num_ids_4": 293
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\n",
        "num_ids_2": 151,
        "num_ids_4": 305
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"Penny Franklin\\n\"\n    \"Marti Graham\\n\"\n    \"Connie Froggatt\\n\"\n    \"Joseph Ivers\\n\"\n    \"Connie Froggatt\\n\"\n    \"Penny Franklin\\n\"\n    \"Connie Froggatt\\n\"\n    \"Bruce Stanger\\n\"\n    \"Connie Froggatt\\n\"\n    \"Barbara Skinner\\n\"\n    \"Barbara Skinner\\n\"\n    \"***\\n\") == \"Connie Froggatt\"\nassert solution(\n    \"Penny Franklin\\n\"\n    \"Marti Graham\\n\"\n    \"Connie Froggatt\\n\"\n    \"Joseph Ivers\\n\"\n    \"Connie Froggatt\\n\"\n    \"Penny Franklin\\n\"\n    \"Connie Froggatt\\n\"\n    \"Bruce Stanger\\n\"\n    \"Connie Froggatt\\n\"\n    \"Barbara Skinner\\n\"\n    \"Barbara Skinner\\n\"\n    \"***\\n\") == \"Runoff!\"\nassert solution(\n    \"Penny Franklin\\n\"\n    \"Marti Graham\\n\"\n    \"Connie Froggatt\\n\"\n    \"Joseph Ivers\\n\"\n    \"Connie Froggatt\\n\"\n    \"Penny Franklin\\n\"\n    \"Connie Froggatt\\n\"\n    \"Bruce Stanger\\n\"\n    \"Connie Froggatt\\n\"\n    \"Barbara Skinner\\n\"\n    \"Barbara Skinner\\n\"\n    \"***\\n\") == \"Penny Franklin\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Mack O'Malley\\nJeff Beggs\\nBud Bettis\\nJoseph Smith\\nMack O'Malley\\nJeff Beggs\\nBud Bettis\\nJoseph Smith\\nMack O'Malley\\nJeff Beggs\\nBud Bettis\\n***\") == \"Runoff!\"\nassert solution(\"Paul Crawford\\nPaul Crawford\\nPaul Crawford\\nPaul Crawford\\nPaul Crawford\\nPaul Crawford\\nPaul Crawford\\nPaul Crawford\\nPaul Crawford\\n***\") == \"Paul Crawford\"\n\n\"\"\"\n\nimport collections\nimport re",
        "num_ids_2": 153,
        "num_ids_4": 200
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Penny Franklin\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\n",
        "num_ids_2": 151,
        "num_ids_4": 300
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == 'Connie Froggatt'\n\"\"\"",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Connie Froggatt\"\n\"\"\"\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Penny Franklin\"\n\n\"\"\"\n\nimport sys\nimport re",
        "num_ids_2": 151,
        "num_ids_4": 226
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Connie Froggatt\"\n\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Runoff!\"\n\"\"\"\n",
        "num_ids_2": 145,
        "num_ids_4": 145
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Runoff!\"\n\"\"\"\n\n\nfrom collections import Counter\nfrom math import floor",
        "num_ids_2": 145,
        "num_ids_4": 145
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\\n\"\nassert solution(\"2\\nFran\\nIan\\nPolly\\nSpencer\") == \"0\\n\"\nprint(solution(stdin))\n",
        "num_ids_2": 117,
        "num_ids_4": 117
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic') == '2'\nassert solution('3\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic') == '0'\n\"\"\"",
        "num_ids_2": 176,
        "num_ids_4": 176
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\\nJabba-the-Hutt R2D2\"\n\n\"\"\"",
        "num_ids_2": 101,
        "num_ids_4": 101
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic') == '2'\n\n'''",
        "num_ids_2": 88,
        "num_ids_4": 88
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\\n\") == '2'\n\"\"\"",
        "num_ids_2": 90,
        "num_ids_4": 90
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n\"\"\") == \"2\"\n\n-----Problem-----\nYou\u2019ve just heard that one of your guests can speak English and doesn\u2019t speak any other language. Unfortunately, your guests can only communicate in English via an interpreter. Unfortunately, interpreters are expensive to operate, so you want to minimize the number of interpreters required.\n\nWrite a program to find the minimum number of interpreters needed to communicate with all guests. For example, there are five guests and the guests can speak any two of three languages. If you want to translate everything, you need three interpreters.\n\n-----Solution-----\nIn order to solve this problem, you need to find a way to assign interpreters to language combinations (a language combination is a list of languages spoken by all guests). Since languages are not required to be understood by all guests, you cannot assign the interpreters in a lexicographic ordering. Instead, you need to assign them by optimizing a number of criteria.\n\nGiven that the guest languages are given in the same order as they appear in the input, you can make the following decision:\n\nStart with no interpreters (0).\nAssign an interpreter to each language.\nIf the number of interpreters is greater than the number of guests, assign all the interpreters to the guests.\nIf the language of an interpreter is not among the languages spoken by the guest, do not assign the interpreter to the guest.\nIf the language of an interpreter is the same as the language spoken by the guest, assign the interpreter to the guest.\nThis process should be repeated until all of the guests and interpreters have been assigned.\n\nIf there is a valid way to assign interpreters, then you should output the number of interpreters needed. Otherwise, output -1.\n\n-----Solution-----\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\n\nimport itertools",
        "num_ids_2": 88,
        "num_ids_4": 88
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(read()) == '2'\n\n---\nSample Input 1:\n7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\nSample Output 1:\n2\n---\nSample Input 2:\n9\nTatooine Cantina\nHuttese Basic Jawaese Shakespeare\nShyriiwook Basic Jawaese Polish\nBasic Binary Jawaese Shakespeare\nBasic Binary Jawaese Polish\nShyriiwook Basic Jawaese Polish\nHuttese Basic Jawaese Polish\nShyriiwook Basic Jawaese Polish\nBasic Binary Jawaese Polish\nSample Output 2:\n3\n---\n\nSample Output 1:\n2\n\nSample Output 2:\n3\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\n\"\"\"\n\n\nfrom typing import List, Tuple",
        "num_ids_2": 88,
        "num_ids_4": 88
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == '2'\nassert solution(\"8\\nHan Solo Basic\\nShyriiwook Basic\\nPol Dokku Dekku Basic\\nQui-Gon Jinn Basic\\nTarthis Basic\\nBak Naboo Basic\\nAnakin Skywalker Basic\\nYoda Basic\\nBen Solo Basic\\nPol Dokku Dekku Basic\\nQui-Gon Jinn Basic\\nTarthis Basic\\nBak Naboo Basic\\nAnakin Skywalker Basic\\nYoda Basic\") == '0'\n\"\"\"\n",
        "num_ids_2": 198,
        "num_ids_4": 198
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\n\"\"\"\n\nstdin = input()\nN, B, H, W = map(int, stdin.split())\nprices = [int(input()) for _ in range(H)]\nbeds = [int(input()) for _ in range(W)]\n\n\"\"\"\nprices.sort(reverse=True)\nbeds.sort(reverse=True)\n\nmax_beds = beds[0]\nmax_price = prices[0]\nsum_price = 0\nsum_beds = 0\n\nfor i in range(W):\n    for j in range(H):\n        if beds[i] >= max_beds:\n            sum_price += max_price\n            sum_beds += max_beds\n            break\n\n        if prices[j] <= max_price:\n            max_beds = beds[i]\n            max_price = prices[j]\n\n    if sum_beds <= B:\n        break\n\n    max_beds = beds[i]\n    max_price = prices[j]\n\"\"\"\n\nmin_price = 200\nfor p in prices:\n    if p < min_price:\n        min_price = p\n\nbeds.sort()\n\nmin_beds = 0\nmax_beds = beds[-1]\n\nfor b in beds:\n    if b < min_beds:\n        break\n    \n    if b >= max_beds:\n        min_beds = b",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == 900\n\"\"\"\n\nimport sys\nimport collections\nimport itertools",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\nprint(\"Test finished.\")",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(output())\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n\\n') == ''\nassert solution('1\\n1\\n1') == '1'\nassert solution('2\\n1\\n1\\n1') == '1'\nassert solution('3\\n3\\n3') == '3'\n",
        "num_ids_2": 20,
        "num_ids_4": 55
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\n\"\"\"\n\nimport sys\n\nsys.stdin = open('test.txt', 'r')\n\nfrom itertools import product\n\nN, B, H, W = map(int, input().split())\nprices = [int(input()) for _ in range(H)]\nbudgets = [list(map(int, input().split())) for _ in range(H)]\n\nprices.sort(reverse=True)\nbudgets.sort(reverse=True)",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\nassert solution('5 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\nassert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\n\nSample Input:\n3 1000 2 3\n200\n0 2 2\n300\n27 3 20\nSample Output:\nstay home\n\nSample Input:\n3 1000 2 3\n200\n0 2 2\n300\n27 3 20\nSample Output:\nstay home\n\"\"\"",
        "num_ids_2": 58,
        "num_ids_4": 87
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nprint(solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20'))\n'''\n\nimport math\n\nlines = [line.strip().split() for line in open('test_files/Y11R5P1/A.in')]\nn = int(lines[0][0])\nb = int(lines[0][1])\nh = int(lines[0][2])\n\nlines = [line.strip().split() for line in open('test_files/Y11R5P1/A.in')]",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_data) == expected\n\n'''\n\nfrom collections import Counter\nfrom sys import stdin\n\nbudget = int(stdin.readline())\nhotels = int(stdin.readline())\nhotel_prices = {int(x): int(y) for x, y in [stdin.readline().split() for _ in range(hotels)]}\nweekends = int(stdin.readline())\nweekends_prices = {int(x): int(y) for x, y in [stdin.readline().split() for _ in range(weekends)]}",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"A B C D E F G A B C D\") == \"A# C D# F G A# B\"\nassert solution(\"A B C D E F G A B C D E F G A B C D\") == \"A# C D# F G A# B C D# E F G A# B C D# E F G A# B\"\nassert solution
        "num_ids_2": 53,
        "num_ids_4": 1431
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"A# C D# F\"\nassert solution(\"100\") == \"A# C D# F G# A G F# C\"\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12 10 3 10 20') == 'D A# C D# D F F# D D F'\nassert solution('13 10 3 20 10 10 3 10') == 'A A# C D# D E F F# D D F'\nassert solution('13 10 3 20 10 10 3 10 20 10 10 3 10') == 'A A# C D# D E F F# D D F D F#'\nassert solution('13 10 3 20 10 10 3 10 20 10 10 3 10 10 3 10') == 'A A# C D# D E F F# D D F D F# A A#'\nassert solution('13 10 3 20 10 10 3 10 20 10 10 3 10 20 10 10 3 10 10 3 10') == 'A A# C D# D E F F# D D F D F# A A# C D# D E F'\n\n'''",
        "num_ids_2": 56,
        "num_ids_4": 138
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution((\"10\\n\"\n                 \"C D F D C D F F F C\")) == \"A# C D# F\"\nassert solution((\"8\\n\"\n                 \"C D F F C C D F F F C\")) == \"none\"\nassert solution((\"10\\n\"\n                 \"C D F D C D F F F C\")) == \"A# C D# F\"\n\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 27
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\nC D F D C D F F F C\") == \"A# C D# F\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 C D F D C D F F F C') == 'A# C D# F'\nassert solution('4 C D F D C D F F F C') == 'A# C D# F'\nassert solution('4 C D F D C D F F F C') == 'A# C D# F'\nassert solution('4 C D F D C D F F F C') == 'A# C D# F'\nassert solution('4 C D F D C D F F F C') == 'A# C D# F'\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12\") == \"C D E F G\"\nassert solution(\"15\") == \"C D E F G A B C\"\nassert solution(\"9\") == \"C D E F G A B C\"\nassert solution(\"13\") == \"C D E F G A B C D E F G\"\nassert solution(\"18\") == \"C D E F G A B C D E F G A B C D E F G\"\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 69
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"C D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"C D F D C D F F F C C C C C C D\") == \"none\"\nassert solution(\"C D F D C D F F F C C C C C C D\") == \"A# C D# F\"\n\nprint(solution(\"C D F D C D F F F C C C C C C D\"))\n",
        "num_ids_2": 49,
        "num_ids_4": 79
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"C D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"D C D C D F F G A D\") == \"A# C D# F# G\"\nassert solution(\"C D D D F F A A A B C\") == \"A# C D# D# D F# A# A# B C\"\nassert solution(\"C D D D C C C F C C C C C\") == \"A# C D# D# D F# A# A# B C\"\nassert solution(\"C C C C D C C C F C C C C C\") == \"A# C D# D# D F# A# A# B C\"\n",
        "num_ids_2": 50,
        "num_ids_4": 122
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('A C# B C#') == 'A# C# B'\nassert solution('A D E F G') == 'A# D# E# F G'\nassert solution('A G# B F# C# D# E#') == 'A# G# B F# C# D# E#'\n",
        "num_ids_2": 18,
        "num_ids_4": 58
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae ae ju traeligt va haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae ae ju traeligt va haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\n\n\"\"\"",
        "num_ids_2": 60,
        "num_ids_4": 144
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\n\n-----Constraints-----\nTime limit: 20 seconds\nMemory limit: 1 MB\ninput: STDIN\noutput: STDOUT\n\nTest 1\nSample Input:\ndae ae ju traeligt va\nSample Output:\ndae ae ju traeligt va\n\nTest 2\nSample Input:\nhaer talar vi rikssvenska\nSample Output:\nhaer talar vi rikssvenska\n\"\"\"\n\nfrom typing import List\nimport sys\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        # this can be done a bit easier using regex\n        # But for my tests, regex is too slow\n        words: List[str] = stdin.split()\n        count_a = 0\n        for word in words:\n            for letter in word:\n                if letter == \"a\":\n                    count_a += 1\n        if count_a / len(words) > 0.4:\n            return \"dae ae ju traeligt va\"\n        return \"haer talar vi rikssvenska\"",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\nassert solution('dae ae ju traeligt v\u00e4dder') == 'haer talar vi rikssvenska'\nassert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\n\n'''",
        "num_ids_2": 60,
        "num_ids_4": 121
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"hai vad heter du\") == \"haer talar vi rikssvenska\"\n\"\"\"\n\nimport string\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae jju traeligt va\") == \"haer talar vi rikssvenska\"\n\"\"\"",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''dae ae ju traeligt va''') == 'dae ae ju traeligt va'\nassert solution('''dae ae ju traeligt va''') == 'dae ae ju traeligt va'\nassert solution('''haer talar vi rikssvenska''') == 'haer talar vi rikssvenska'\nassert solution('''a b c''') == 'a b c'\nassert solution('''a b ca''') == 'a b ca'\n",
        "num_ids_2": 62,
        "num_ids_4": 114
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"hello i'm learning python\") == \"hello i'm learning python\"\nassert solution(\"somestringwithonlywordsinistgotsentence\") == \"somestringwithonlywordsinistgotsentence\"\nassert solution(\"iamverystrongbutnotverysmart\") == \"iamverystrongbutnotverysmart\"\n",
        "num_ids_2": 60,
        "num_ids_4": 112
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ju traeligt va\") == \"dae ju traeligt va\"\nassert solution(\"ju traeligt va\") == \"haer talar vi rikssvenska\"\n\"\"\"",
        "num_ids_2": 52,
        "num_ids_4": 78
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\nassert solution('\u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4r \u00e4",
        "num_ids_2": 60,
        "num_ids_4": 1673
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju traeligt va\")!= \"haer talar vi rikssvenska\"\nassert solution(\"dae ae ju traeligt va\")!= \"dae ae ju traeligt v\u00e4\"\n\"\"\"\n",
        "num_ids_2": 59,
        "num_ids_4": 89
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'",
        "num_ids_2": 62,
        "num_ids_4": 62
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n\"\"\"\n",
        "num_ids_2": 62,
        "num_ids_4": 62
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n",
        "num_ids_2": 62,
        "num_ids_4": 62
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n\nassert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n\"\"\"\n\n\nfrom typing import List\n\n\nclass Solution:\n    def __init__(self):\n        self.n: int = 0\n        self.m: int = 0\n        self.arr: List[List[str]] = []\n\n    def solution(self, stdin: str) -> str:\n        self.read_input(stdin)\n        res = self.helper(0, 0)\n        return res\n\n    def read_input(self, stdin: str):\n        lines = stdin.split('\\n')\n        self.n = int(lines[0].split()[0])\n        self.m = int(lines[0].split()[1])\n        self.arr = [list(x) for x in lines[1:]]\n\n    def helper(self, i: int, j: int) -> str:\n        if self.arr[i][j] == '.':\n            return '.'\n\n        if self.arr[i][j] == '#':\n            if i == 0:\n                self.arr[i][j] = 'E'\n                return 'E'\n\n            if i - 1 >= 0 and self.arr[i - 1][j]!= 'E':\n                self.arr[i][j] = 'E'\n                return 'E'\n\n            self.arr[i][j] = 'E'\n            return 'E'\n\n        if j == 0:\n            self.arr[i][j] = 'E'\n            return 'E'\n\n        if j - 1 >= 0 and self.arr[i][j - 1]!= 'E':\n            self.arr[i][j] = 'E'\n            return 'E'\n\n        self.arr[i][j] = 'E'\n        return 'E'\n\n    def print_output(self, res: str):\n        print(res)\n",
        "num_ids_2": 124,
        "num_ids_4": 124
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\".#.\\n.##\\n..#\\n....\\n...#\\n#..#\\n#.#.\") == \"E#E\"\nassert solution(\".#.\\n.##\\n..#\\n....\\n...#\\n#..#\\n#.#.\") == \"E.#E\"\nassert solution(\".#.\\n.##\\n..#\\n....\\n...#\\n#..#\\n#.#.\") == \".E...E\"\nassert solution(\".#.\\n.##\\n..#\\n....\\n...#\\n#..#\\n#.#.\") == \"..E.#E\"\nassert solution(\".#.\\n.##\\n..#\\n....\\n...#\\n#..#\\n#.#.\") == \"E.E#E\"\n",
        "num_ids_2": 76,
        "num_ids_4": 153
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\n\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 62,
        "num_ids_4": 62
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n\n\"\"\"",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5 6\n....#.\n....#.\n",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"....#\\n....#\\n#.....\\n......\\n##...#\") == \"E..E#\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\nprint(\"all test cases passed.\")\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\nassert solution('2 8 2 4 10 3 25 14') == '10 8 4 2 3 12'\nassert solution('6 10 4 8 2 12 3') == '12 10 3 8 2 6'\nassert solution('3 8 2 10 5 6 1') == '8 2 6 10 3 1'\nassert solution('4 6 1 7 3 9 8') == '6 1 3 7 4 9'\n",
        "num_ids_2": 44,
        "num_ids_4": 86
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\n-----Notes-----\nAssume that the input is sorted from smallest to largest.\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\nSolution:\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\nprint('Test pass.')\n\nSample Input:\n9 5 5 5 6 7\nSample Output:\n5 7 6 9 5\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\"\"\"\n\ninput_list = list(map(int, input().split()))\nt1_height = input_list[0]\nt1_boxes = sorted(input_list[1:])\nt2_height = input_list[-2]\nt2_boxes = sorted(input_list[-1:0:-1])\n\nt1_boxes = t1_boxes[::-1]\nt2_boxes = t2_boxes[::-1]\n\nfor i in range(0, 6, 2):\n    t1_boxes[i] += t1_boxes[i + 1]\n    t2_boxes[i] += t2_boxes[i + 1]\n\nprint(t1_boxes)\nprint(t2_boxes)\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\nassert solution('16 12 6 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\nassert solution('18 12 6 8 2 4 10 3 25 14') == '18 12 6 8 2 4 2'\nassert solution('1 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\nassert solution('1 8 2 4 10 3 25 11') == '12 10 3 8 4 2'\n",
        "num_ids_2": 46,
        "num_ids_4": 93
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\nassert solution('1 2 1 3 1 4 1 5') == '5 3 4 2 1 1 1'\nassert solution('1 2 1 3 1 4 1 5 2') == '5 4 3 2 1 1 1'\n'''",
        "num_ids_2": 16,
        "num_ids_4": 61
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9 0 3') == '4'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''9 0 3''') == '4'\nassert solution('''3 2 0''') == '0'\nassert solution('''3 0 3''') == '3'\nassert solution('''3 0 2''') == '1'\nassert solution('''3 0 1''') == '2'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 0 3\") == \"4\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9 0 3') == '4'\n\"\"\"\n\ne, f, c = map(int, stdin.split())\ns = e - f\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9 0 3') == '4'\nassert solution('0 9 3') == '4'\nassert solution('0 0 3') == '0'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 0 3') == '4'\n\n-----Notes-----\nFor the first and second test cases, we provided the input, so we don\u2019t expect the function to return any output.\nIf the three inputs are distinct, the number of sodas he drank on the first day is equal to the sum of the numbers of the first three inputs.\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 0 3\\n') == '4'\nassert solution('9 0 3\\n8 0 3') == '3'\nassert solution('0 9 0\\n1 0 3') == '1'\nassert solution('0 9 3\\n8 0 3') == '3'\n'''",
        "num_ids_2": 31,
        "num_ids_4": 65
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('9 0 3') == '4'\nassert solution('9 2 3') == '0'\nassert solution('9 1 3') == '0'\nassert solution('9 1 2') == '1'\nassert solution('9 1 1') == '1'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9 0 3') == '4'\nassert solution('9 0 3') == '4'\n\"\"\"\n\nfrom operator import mul\nfrom functools import reduce\n\n\"\"\"\nWe know from the example above that on day four there were no empty bottles found during the day, and we need four more to buy a new one.\n\nSo we need the following:\n\n1. On day one, there were nine bottles in Tim\u2019s possession.\n2. On day two, there were nine bottles in Tim\u2019s possession.\n3. On day three, there were nine bottles in Tim\u2019s possession.\n4. On day four, there are now nine + 9 + 9 = 18 bottles in Tim\u2019s possession.\n\nTherefore, we can compute the total number of sodas by adding the number of bottles in Tim\u2019s possession on each day.\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 0 3\") == \"4\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"0 0 3\") == \"3\"\nassert solution(\"9 0 0\") == \"0\"\nassert solution(\"4 5 2\") == \"2\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1010\") == \"12\"\nprint(solution(\"1010\"))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1010') == '12'",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1010') == '12'\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1010') == 12\nassert solution
        "num_ids_2": 1772,
        "num_ids_4": 1772
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1010') == '12'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1010') == '12'\nassert solution('10101') == '17'\nassert solution('111111') == '63'\nassert solution('101111011011110111111111') == '493'\n\nprint('All tests passed.')\n",
        "num_ids_2": 22,
        "num_ids_4": 50
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1010\") == \"12\"\nprint(solution(\"1010\"))",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1010') == '12'\n\"\"\"\n\nimport unittest\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1010\") == \"12\"\nassert solution(\"101010\") == \"14\"\nassert solution(\"1100\") == \"10\"\n\nprint(solution(\"1010\"))\nprint(solution(\"101010\"))\nprint(solution(\"1100\"))\n\"\"\"\nimport unittest\n",
        "num_ids_2": 22,
        "num_ids_4": 32
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(010) == 12\nassert solution(100) == 104\nassert solution(101) == 105\nassert solution(110) == 108\nassert solution(111) == 107\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('1\\noo') == 2\nassert solution('2\\noo.o') == 3\nassert solution('3\\no.o.o') == 7\nassert solution('4\\nooo') == 4\n",
        "num_ids_2": 19,
        "num_ids_4": 46
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin='') == ''\n'''\n\nrows, seats = [int(x) for x in stdin.split()]\n\nhands = 0\n\nfor i in range(rows):\n    row = stdin.readline()\n    for j in range(seats - 1):\n        if row[j] == \"o\" and row[j + 1] == \".\":\n            hands += 1\n\nprint(hands)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('.o.\\noo') == 2\n\"\"\"\n\n\n\"\"\"\n\uc608\uc678 \ucc98\ub9ac \ud544\uc694\n\"\"\"\n\nrows, seats = map(int, stdin.readline().split())\nseating_order = [stdin.readline() for _ in range(rows)]\n\n\nfrom collections import deque",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\".o..\") == \"2\"\nassert solution(\".o.o.\") == \"0\"\nassert solution(\"o.o.\") == \"1\"\nassert solution(\"..oo\") == \"0\"\nassert solution(\"...o\") == \"0\"\n",
        "num_ids_2": 25,
        "num_ids_4": 48
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == \"2\"\n\nprint(solution(stdin))\n\nprint(solution(stdin))",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\".o.\") == 1\nassert solution(\".oo\") == 0\nassert solution(\"ooo\") == 0\nassert solution(\"o.o\") == 2\nassert solution(\"oo.\") == 1\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n..o\\no..') == 2\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 4\\n..o\\no..\") == 2\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('.oo') == 1\nassert solution('o.o') == 0\nassert solution('oo.') == 0\nassert solution('ooo') == 0\nassert solution('ooo.') == 0\n",
        "num_ids_2": 19,
        "num_ids_4": 36
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"2 3\n..o\no..\"\"\") == \"2\"\nassert solution(\"\"\"2 3\n..o\n.oo\"\"\") == \"1\"\nassert solution(\"\"\"2 3\nooo\n...\"\"\") == \"0\"\nassert solution(\"\"\"2 3\n.oo\n..o\"\"\") == \"0\"\n\n\"\"\"\nSo, for a line of seats, we do the following:\n\ncreate a matrix of 1s and 0s, where each row is the row of the seating arrangement and each column is a seat\nfor each seat, there is a corresponding person sitting on that seat\ncreate a person queue, to store the people sitting in the order in which they entered\n\nonce we have a matrix, for each row we will iterate over its seats, and for each seat, we will iterate over its neighbours, and if we can sit with a person sitting on that seat\nwe will get a number of people sitting next to each other in the queue, but we need to check if this number is less than the capacity of the seat, otherwise we will stop the loop, and we will not sit with this person\n\nonce the loop finishes, we will iterate over the people in the queue and for each of them, we will check if the number of people sitting next to them is equal to the capacity of the seat\nthen we will add the number of people sitting next to them to the number of people sitting next to the person who was sitting in the seat\nthen we will check if the number of people sitting next to that person is equal to the capacity of the seat, then we will add that number to the number of people sitting next to the person who was sitting in the seat\n\nfor the last person in the queue, we will add the capacity of the seat to the number of people sitting next to the person who was sitting in the seat\n\nat the end of this loop, we will have the number of people sitting next to each person in the queue, and then we will add all of them together, which is the number of people that have to shake hands with Mirko\n\nonce we calculated the number of people that have to shake hands with Mirko, we will subtract 1 from it, because we already are sitting with him\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\n\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\n\nfor i in range(n):\n    x, y = map(int, stdin.readline().split())\n    print(\"LADICA\" if x < m else \"SMECE\")\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\"\n\"\"\"\n\nn, l = map(int, stdin.readline().split())\nA = []\nB = []\n\nfor i in range(n):\n    x, y = map(int, stdin.readline().split())\n    A.append(x)\n    B.append(y)\n\nprint('LADICA' if A.count(1) % 2 == 0 else 'SMECE')\nprint('LADICA' if B.count(1) % 2 == 0 else 'SMECE')\nprint('LADICA' if A.count(2) % 2 == 0 else 'SMECE')\nprint('LADICA' if B.count(2) % 2 == 0 else 'SMECE')\nprint('LADICA' if A.count(3) % 2 == 0 else 'SMECE')\nprint('LADICA' if B.count(3) % 2 == 0 else 'SMECE')\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n\"\"\"\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\nprint(solution(stdin))\n\n-----Explanation-----\nMirko has $N$ items (labeled with numbers from $1$ to $N$) and $L$ drawers (labeled with numbers from $1$ to $L$). All items are currently scattered throughout his room, so he decided to clean them up. Each drawer can contain one item, and in order to make it easier for Mirko to find them later, he has determined in advance exactly two drawers ($A_ i$ and $B_ i$) for each item $i$.\n\nMirko stores the items in order from $1$ to $N$ using the first rule he can apply:\n - If the drawer $A_ i$ is empty, he stores the item $i$ in that drawer.\n - If the drawer $B_ i$ is empty, he stores the item $i$ in that drawer.\n - Try to move the item from $A_ i$ to its other drawer; if that one\u2019s filled too, try moving that item to its other drawer, and so on until you either succeed or get back to a previously seen drawer. In case of success, store the item $i$ in the drawer $A_ i$. In case of failure, continue to next rule.\n - Try moving the item from $B_ i$ to its other drawer; if that one\u2019s filled too, try moving that item to its other drawer, and so on until you either succeed or get back to a previously seen drawer. In case of success, store the item $i$ in the drawer $B_ i$. In case of failure, continue to next rule.\n - Give up and throw away the item $i$.\n\nFor given pairs of drawers for each item, determine which items will be stored and which will be thrown away.\n\n\"\"\"",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\n\"\"\"\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\n\"\"\"\n\nimport sys\n\nN, L = map(int, sys.stdin.readline().split())\ndrawers = {i: set() for i in range(1, N + 1)}\nfor i in range(1, N + 1):\n    A, B = map(int, sys.stdin.readline().split())\n    drawers[i].add(A)\n    drawers[i].add(B)\n    if A == 1:\n        drawers[i].add(2)\n    if B == 1:\n        drawers[i].add(2)\n    if A == L:\n        drawers[i].add(L + 1)\n    if B == L:\n        drawers[i].add(L + 1)\nfor i in range(1, N + 1):\n    if len(drawers[i]) == 4:\n        print(\"LADICA\")\n    elif len(drawers[i]) == 2:\n        print(\"SMECE\")\n    else:\n        print(\"WRONG\")\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\n\"\"\"",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\n\"\"\"\n\nfrom collections import Counter\n\nN, L = map(int, input().split())\n\ndrawers = [[int(a), int(b)] for a, b in [input().split() for _ in range(N)]]\ndrawers_count = Counter(list(map(lambda x: x[0], drawers)))",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n0') == '1 2'\nassert solution('1\\n1') == '0'\nassert solution('3\\n0 1') == '1 2 0'\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 43
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n0') == '1 2'\n\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n0\") == \"1 2\"\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1') == '1 2'\nassert solution('3\\n0 1\\n2') == '2 1 3'\nassert solution('2\\n1 1') == '1 1 2'\nassert solution('3\\n0 2\\n0') == '1 2 3'\nassert solution('3\\n0 2\\n1') == '2 1 3'\n",
        "num_ids_2": 33,
        "num_ids_4": 68
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n0') == '1 2'\n\n-----Explanation-----\nSample Case 1\n\nThe first line of input is 2 which means there are 2 people in the line.\n\nThe second line is 0 which means that between Jimmy and the first person there are no other people.\n\nIn the original lineup, Jimmy is first and the other person is second.\n\nIn the new lineup, Jimmy is first and the other person is last.\n\nSample Case 2\n\nThe first line of input is 2 which means there are 2 people in the line.\n\nThe second line is 0 which means that between Jimmy and the first person there are no other people.\n\nIn the original lineup, Jimmy is first and the other person is last.\n\nIn the new lineup, Jimmy is last and the other person is first.\n'''",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0\") == \"1 2\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"4\") == \"2 1 3\"\nassert solution(\"5\") == \"3 1 4 2\"\n\nprint(\"All test cases passed.\")\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 47
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0\\n0\") == \"1 2\"\nassert solution(\"1\\n0\") == \"1\"\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n0') == '1 2'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2\n0''') == '1 2'\nassert solution('''3\n0\n0\n0''') == '2 1 3'\n\nSample Input:\n4\n1\n2\n3\n4\nSample Output:\n1 2 3 4\nassert solution('''4\n0\n0\n0\n0''') == '1 2 3 4'\nassert solution('''4\n0\n1\n1\n1\n''') == '2 1 3 4'\n\nSample Input:\n6\n0\n1\n0\n2\n1\nSample Output:\n1 2 4 5 3\nassert solution('''6\n0\n0\n1\n0\n0\n0\n''') == '1 2 4 5 3'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2\n0\n''') == '1 2'\nprint(solution(stdin))\n'''",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"\nprint(solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\"))\n\nsolution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\")",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 1\") == \"2\"\nassert solution(\"6 2 4\") == \"4\"\nassert solution(\"5 1 7\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 3\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2') == '1'\n\nassert solution('6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2') == '3'\n\"\"\"\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 2\\n0 1\\n0 2\\n1 2\\n0 3') == '0'\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == '1'\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5 3\\n1 2\\n2 3\\n3 4\\n0 1\\n4 0\") == \"3\"\n\"\"\"\n\nimport sys\nimport heapq\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 6 7\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\n''') == '1'\n\"\"\"\n\nfrom collections import defaultdict\nimport math\n\nN, H, L = [int(i) for i in stdin.readline().split()]\nhorrors = set([int(i) for i in stdin.readline().split()])\nsimilarities = defaultdict(set)\nfor i in range(L):\n    a, b = [int(i) for i in stdin.readline().split()]\n    similarities[a].add(b)\n    similarities[b].add(a)\n\nhorrors = sorted(horrors)\nmax_index = 0\nfor i in range(N):\n    if i in horrors:\n        continue\n\n    direct_similarities = set()\n    for j in horrors:\n        for k in similarities[j]:\n            direct_similarities.add(k)\n\n    similarities[i] = direct_similarities\n    if len(similarities[i]) == 0:\n        continue\n\n    max_index = max(max_index, max([similarities[i][j] for j in similarities[i]]) + 1)\nprint(max_index)\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2') == '1'\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"\nassert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n\") == \"1\"\n'''",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\nassert solution(\"1\\n1\") == \"impossible\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nn = int(input())\nl = [int(i) for i in input().split()]\nl.sort()\n\nfor i in range(1, len(l)):\n    if l[i] - l[i-1] < l[i+1] - l[i]:\n        print(l[i+1], l[i], l[i-1])\n    else:\n        print(\"impossible\")\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\n\nassert solution(\"5\\n3 -1 1 2 6\") == \"impossible\"\n\nassert solution(\"5\\n1 3 5 2 4\") == \"impossible\"\n\nassert solution(\"4\\n4 -1 1 4 2\") == \"impossible\"\n\nassert solution(\"4\\n2 3 3 2\") == \"2 2 3 3\"",
        "num_ids_2": 36,
        "num_ids_4": 73
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 6 1 7 3\") == '5 4 3 2 6 1 7'\nassert solution(\"5\\n1 2 4 7 3\") == 'impossible'\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 3 4\\n') == '4 3 1'\nassert solution('3\\n1 3 4\\n')!= '4 3 1'\nassert solution('3\\n4 1 3\\n') == '4 1 3'\nassert solution('3\\n4 1 3\\n')!= '4 1 3'\nassert solution('3\\n4 1 3\\n') == 'impossible'\n",
        "num_ids_2": 39,
        "num_ids_4": 78
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n1 3 4''') == '4 3 1'\nassert solution('''2\n3 2''') == 'impossible'\nassert solution('''1\n3''') == 'impossible'\nassert solution('''4\n1 2 3 4''') == 'impossible'\nassert solution('''4\n3 2 1''') == '3 2 1'\n'''",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 1\") == \"impossible\"\nassert solution(\"4\\n3 3\") == \"impossible\"\nassert solution(\"4\\n2 2 2\") == \"4 2\"\nassert solution(\"4\\n2 4 2\") == \"4 2\"\nassert solution(\"5\\n4 2 2 3 1\") == \"impossible\"\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\nassert solution(\"1\\n4\") == \"impossible\"\nassert solution(\"3\\n2 3 5\") == \"impossible\"\nassert solution(\"3\\n5 1 4\") == \"impossible\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\narr = [int(i) for i in sys.stdin.readline().rstrip().split(\" \")]\n\ndp = [float(\"inf\") for _ in range(n)]\ndp[0] = 0\ndp[1] = abs(arr[0] - arr[1])\n\nfor i in range(2, n):\n    dp[i] = min(abs(arr[i-1] - arr[i]) + dp[i-1], abs(arr[i] - arr[i-1]) + dp[i-2])",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3 4\") == \"4 3 1\"\nassert solution(\"3\\n1 3 4\") == \"impossible\"\nassert solution(\"3\\n1 4 2\") == \"impossible\"\n",
        "num_ids_2": 33,
        "num_ids_4": 49
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\nassert solution(\"3\\n2 5 4\") == \"impossible\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip('\\n'))\nnumbers = sys.stdin.readline().rstrip('\\n').split()",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 20 15\n3 10''') == '18.400'\n'''\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 20 15\\n3 10') == '18.400'\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\n\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 20 15\\n3 10') == '18.400'\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 20 15\\n3 10') == '18.4'\n\nimport io\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        def readlines():\n            for line in io.TextIOWrapper(io.BytesIO(solution), encoding='utf-8'):\n                yield line.strip('\\n')\n\n        lines = readlines()\n        while True:\n            try:\n                line = next(lines)\n                n, p, k = [int(x) for x in line.split(' ')]\n                lines.next()\n                ts = [int(x) for x in lines.next().split(' ')]\n                r = solution(n, p, k)\n                self.assertEqual(len(str(r)), len(str(r.n)))\n            except StopIteration:\n                break",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 20 15\n3 10''') == '18.400'\n'''\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"2 20 15\n3 10\n\"\"\") == '18.400'\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 20 15\", \"3 10\") == '18.400'\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\n\"\"\"\n\nn, p, k = map(int, input().split())\ntimes = list(map(int, input().split()))\n\ntotal = 0\n\nfor i in range(n - 1):\n    total += (times[i + 1] - times[i]) / k\n\nprint(\"{:.6f}\".format(total * k * p / 100))\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\") == \"5\"\nassert solution(\"7\\n.....\\nS.....\\n.....\\nH.....\\n.....\\n.....\") == \"3\"\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n.H.\\n...\\nS..\\n....\") == 5",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '....H\\n'\n    '.....\\n'\n    'S....\\n'\n    '....H\\n'\n    '.....\\n'\n) == '5'\n\nassert solution(\n    '....H\\n'\n    '.....\\n'\n    'S....\\n'\n    '....H\\n'\n    '.....\\n'\n) == '5'\n\nassert solution(\n    '....H\\n'\n    '.....\\n'\n    'S....\\n'\n    '....H\\n'\n    '.....\\n'\n) == '5'\n\nassert solution(\n    '....H\\n'\n    '.....\\n'\n    'S....\\n'\n    '....H\\n'\n    '.....\\n'\n) == '5'\n\nassert solution(\n    '....H\\n'\n    '.....\\n'\n    'S....\\n'\n    '....H\\n'\n    '.....\\n'\n) == '5'",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n...H\\n.....\\nS....\\n....H\\n.....') == '5'\n\n-----Notes-----\nFor the input above, the maximum Manhattan distance that any spy has to travel to reach the nearest safe house is 5 blocks.\n-----Hint-----\nFor each city block, you can calculate the Manhattan distance between it and the nearest safe house, and update the answer if necessary.",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\nprint('Test PASSED')\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"....H\\n.....\\nS....\\n....H\\n.....\") == 5\n\n-----Solution-----\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == 5\n\"\"\"\n\nn = int(input())\n\ncity = []\nsafe = []\nfor _ in range(n):\n    city.append(input())\n\nfor i in range(n):\n    for j in range(n):\n        if city[i][j] == \"S\":\n            safe.append((i, j))",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\nassert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\nassert solution('5\\nS....\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\nassert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\n\nassert solution('5\\nS....\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\n",
        "num_ids_2": 56,
        "num_ids_4": 116
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5\n....H\n.....\nS....\n....H\n.....\n\"\"\") == '5'\n\nassert solution(\"\"\"\n5\n....H\n.....\nS....\n....H\n.....\n\"\"\") == '5'\n\nassert solution(\"\"\"\n5\n....H\n.....\nS....\n....H\n.....\n\"\"\") == '5'\n\nassert solution(\"\"\"\n3\n...H\n...S\n...S\n\"\"\") == '3'\n\nassert solution(\"\"\"\n4\n....H\n....S\n....S\n\"\"\") == '1'",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nclass Solution:\n    def solution(self, stdin: str) -> int:\n        # setup\n        width, height = [int(x) for x in stdin.split('\\n')[0].split()]\n        grid = [[x for x in line.split()] for line in stdin.split('\\n')[1:]]\n        # solve\n        queue = deque()\n        for y in range(height):\n            for x in range(width):\n                if grid[y][x] == 'H':\n                    queue.append((x, y))\n        \n        distances = {(x, y): float('inf') for y in range(height) for x in range(width) if grid[y][x]!= 'H'}\n        for x, y in queue:\n            distances[(x, y)] = 0\n            queue.append((x + 1, y))\n            queue.append((x - 1, y))\n            queue.append((x, y + 1))\n            queue.append((x, y - 1))\n        \n        while queue:\n            x, y = queue.popleft()\n            for newx, newy in ((x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)):\n                if (newx, newy) in distances:\n                    distances[(newx, newy)] = min(distances[(newx, newy)], distances[(x, y)] + 1)\n                    queue.append((newx, newy))\n        \n        # return\n        return min(distances.values())\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == \"0\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 0\nassert solution(3) == 0\nassert solution(4) == 0\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5\\n') == '0'\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n4\\n1 3 5') == '0'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 2 3\n2 4\n1 3 5''') == '0'\nassert solution('''5 2 3\n2 4\n1 3 5\n1 2\n2 3\n2 4\n1 3''') == '0'\nassert solution('''5 2 3\n2 4\n1 3 5\n1 2\n2 3\n2 4\n1 3''') == '0'\nassert solution('''5 2 3\n2 4\n1 3 5\n1 2\n2 3\n2 4\n1 3''') == '2'\nassert solution('''5 2 3\n2 4\n1 3 5\n1 2\n2 3\n2 4\n1 3''') == '1'\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == \"0\"\n\"\"\"\n\nfrom collections import defaultdict\n\nN, S, R = [int(x) for x in stdin.split()]\n\nteam_numbers = [int(x) for x in stdin.split()[1:]]\n\ns, r = set(team_numbers), set(team_numbers)\n\ncnt = defaultdict(int)\n\nfor i in range(N):\n    cnt[i] += 1\n    if i - 1 in s and i + 1 in r:\n        cnt[i - 1] += 1\n        cnt[i + 1] += 1\n    elif i - 1 in s:\n        cnt[i + 1] += 1\n    elif i + 1 in r:\n        cnt[i - 1] += 1\n\nprint(min(cnt.values()))\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5 2 3\n2 4\n1 3 5\"\"\") == \"0\"\n\nassert solution(\"\"\"5 2 3\n2 4\n1 3 5\n3 2\"\"\") == \"0\"\n\nassert solution(\"\"\"5 2 3\n2 4\n1 3 5\n3 1\"\"\") == \"4\"\n\nassert solution(\"\"\"5 2 3\n2 4\n1 3 5\n3 1\n3\"\"\") == \"3\"\n\nassert solution(\"\"\"5 2 3\n2 4\n1 3 5\n3 1\n3\n3\n3\n3\n\"\"\") == \"5\"",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == 0\nassert solution('5 2 3\\n3 4\\n1 2 4') == 0\nassert solution('5 2 3\\n3 4\\n1 5 4') == 1\nassert solution('5 2 3\\n2 4\\n1 3 5') == 1\nassert solution('5 2 3\\n3 4\\n1 4 5') == 2\n\"\"\"\n\nimport unittest",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '0'\nassert solution('2\\n1 2') == '0'\nassert solution('4\\n3 4') == '0'\nassert solution('4\\n2 3') == '0'\n",
        "num_ids_2": 21,
        "num_ids_4": 49
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == 0\nprint(\"Test success\")\n\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"0.000000\"\n\"\"\"\n\nC, R = map(int, input().split())\nprint(R ** 2 * 3.14159265358979 - (C * 2 * 3.14159265358979 * R))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"0.000000\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0.000000'\nassert solution('2 3') == '0.666667'\n\"\"\"\n\nfrom fractions import Fraction",
        "num_ids_2": 21,
        "num_ids_4": 35
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1\\n') == '0.000000'\nassert solution('4 6\\n') == '0.500000'\nassert solution('5 10\\n') == '0.50000'\nassert solution('3 1\\n') == '0.66667'\nassert solution('4 1\\n') == '0.66667'\n",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1') == '0.000000000'\n\"\"\"\n\nx, y = map(int, stdin.readline().split())\n\npercentage = 100 * (x-y)/x\n\nprint(\"%.9f\" % percentage)\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"0.000000\"\nassert solution(\"3 1\") == \"0.333333\"\nassert solution(\"3 10\") == \"0.30000\"\nassert solution(\"1 100\") == \"0.1\"\nassert solution(\"10 100\") == \"0.1\"\n",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == '0.0'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0.000000000'\nassert solution('1 2') == '0.500000000'\nassert solution('2 2') == '1.000000000'\nassert solution('3 3') == '0.6666666667'\n",
        "num_ids_2": 22,
        "num_ids_4": 50
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1') == '0.000000000'\nassert solution('1 2') == '0.5'\nassert solution('1 3') == '0.66666667'\nassert solution('1 4') == '0.75'\nassert solution('1 5') == '0.83333333'\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n') == '0.000000000'\n\"\"\"\n\na, b = map(int, stdin.readline().split())\np = a * b / 2 / 100\nprint(round(p, 6))\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n100 101 102 103\n488''') == '2'\nassert solution('''5\n100 101 102 103\n101 102\n101 102\n101 102\n101 102''') == '5'\nassert solution('''3\n101 101\n101 101\n101 101''') == '0'",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"\nassert solution(\"1\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == \"1\"\nassert solution(\"0\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == \"0\"\n\"\"\"\nimport math",
        "num_ids_2": 66,
        "num_ids_4": 99
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == 2\nassert solution(\"1\\n4\\n4\\n5\\n4\") == 0\nassert solution(\"2\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == 2\nassert solution(\"1\\n4\\n5\\n4\") == 1\nassert solution(\"1\\n4\\n4\\n4\") == 1\n",
        "num_ids_2": 51,
        "num_ids_4": 99
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3 4\\n4 1 2 3\\n4 3 2 1\\n4 4 4 4') == '0'\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\\n') == '2'\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100') == '2'\nassert solution('7\\n100 101 102 103 104 548\\n102 103 104 549 105\\n102 104 105 548 101\\n104 105 549 102\\n103 105 548 101\\n105 549 102 104\\n101 548 104 105\\n105 548 101 104') == '0'\nassert solution('3\\n103 101 102 104 548\\n101 105 105 549\\n102 104 105 548 101\\n104 105 549 102\\n103 105 548 101\\n105 549 102 104\\n101 548 104 105\\n105 548 101 104') == '1'\nassert solution('7\\n100 101 102 103 104 548\\n101 105 105 549\\n102 104 105 548 101\\n104 105 549 102\\n103 105 548 101\\n105 549 102 104\\n101 548 104 105\\n105 548 101 104') == '2'\nassert solution('7\\n101 105 105 549\\n102 104 105 548 101\\n104 105 549 102\\n103 105 548 101\\n105 549 102 104\\n101 548 104 105\\n105 548 101 104') == '3'\n",
        "num_ids_2": 103,
        "num_ids_4": 240
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100') == 2\n\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n4\\n3\\n4\\n5\") == 2\n\"\"\"\n\nimport numpy as np",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100 101 102 103 488') == 2\nassert solution('100 200 300 101 102') == 0\nassert solution('103 102 101 488 100') == 2\n\"\"\"\n\n\"\"\"\nSOLUTION:\n\nConsider all combinations of 5 courses:\n\nFor the first example, we have:\n\n100 101 102 103 488\n100 200 300 101 102\n103 102 101 488 100\n\nThe two most popular combinations of courses are 100 101 102 and 100 200 300 101 102.\n\nFor the second example, we have:\n\n100 200 300 101 102\n\nThe only possible combination of courses is 100 200 300 101 102. This is not the most popular combination of courses, so we skip it.\n\nFor the third example, we have:\n\n103 102 101 488 100\n\nThe two most popular combinations of courses are 103 102 101 and 488 100.\n\nSince the three most popular combinations of courses are distinct, there is no tie.\n\n\"\"\"\n\nfrom itertools import combinations\n\nn = int(input())\n\nnum_courses = 0\ncourses = []\nfor _ in range(n):\n    courses.append(input().split())\n\nnum_courses = len(set(sum(combinations(courses, 5), ())))\nprint(num_courses)\n",
        "num_ids_2": 25,
        "num_ids_4": 38
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1730\") == \"1729\"\nassert solution(\"400000\") == \"none\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1730\") == \"1729\"\nassert solution(\"1234\") == \"None\"\nassert solution(\"2\") == \"None\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 33
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1730''') == '''1729'''\nassert solution('''1000''') == ''\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == None\nassert solution('1730') == '1729'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1730') == '1729'\nassert solution('400000') == 'none'\nassert solution('5') == '2'\nassert solution('100') == 'none'\nassert solution('42') == 'none'\n",
        "num_ids_2": 23,
        "num_ids_4": 43
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1730\") == \"1729\"\nassert solution(\"1732\") == \"1731\"\nassert solution(\"1832\") == \"1831\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1730\") == \"1729\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1730') == '1729'\nassert solution('3') == 'None'\nassert solution('1') == 'None'\nassert solution('400000') == 'None'\nassert solution('7') == 'None'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1730\") == \"1729\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1730\") == \"1729\"\nassert solution(\"400000\") == \"none\"\nassert solution(\"101010\") == \"none\"\nassert solution(\"123456\") == \"none\"\nassert solution(\"14\") == \"14\"",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('65536') == '16'\nassert solution('1048576') == '32'\nassert solution('131072') == '31'\nassert solution('2097152') == '63'\nassert solution('4194304') == '126'\n",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"65536\") == \"16\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('65536') == 16\nprint(solution('65536'))\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"65536\") == \"16\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('65536') == 16\nassert solution('1000000') == 0\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('65536') == 16\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == 1\nassert solution('2') == 2\nassert solution('1 2') == 1\nassert solution('2 2') == 4\n",
        "num_ids_2": 16,
        "num_ids_4": 33
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('65536') == 16\nprint(solution('65536'), end=\"\")\n\n-----Constraints-----\n1 \u2264 X \u2264 10^9\n\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('65536') == '16'\nprint(solution(input()))\n\n-----Solution-----\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('65536') == 16\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"....\\n....\\n....\\n...K\") == \"2\"\nassert solution(\"####\\n#.K\\n#.\\n####\") == \"3\"\nassert solution(\"#####\\n....\\n#...\\n....\\nK..#\") == \"3\"\nassert solution(\"#####\\n....\\n#...\\n....\\nK.#.\") == \"5\"\n\n---------------\nSample Input:\n3\n",
        "num_ids_2": 42,
        "num_ids_4": 93
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n....\\n....\\n....\\n...K\") == 2\n\"\"\"\n\nimport sys",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n4\n....\n....\n....\n...K\n''') == 2\nprint('Tests passed!')\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\".K....\") == '4'\nassert solution(\"....K...\") == '-1'\nassert solution(\"...K....\") == '-1'\nassert solution(\"K...K.K\") == '-1'\nassert solution(\"K....K..\") == '-1'\n\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 25,
        "num_ids_4": 53
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n4\n....\n....\n....\n...K\n\"\"\") == 2\n\nassert solution(\n\"\"\"\n2\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n...\\n#\\n...') == 1\nassert solution('3\\n....\\n..#\\n....') == -1",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n....\\n....\\n....\\n...K') == '2'\nassert solution('5\\n....K\\n....\\n....\\n...K') == '3'\nassert solution('2\\n.#K\\nK.#') == '-1'\n\n------------Solution------------\n",
        "num_ids_2": 47,
        "num_ids_4": 66
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('....\\n....\\n....\\n...K') == '2'\nassert solution('....\\n....\\n....\\n...#') == '-1'\n\n\"\"\"\n\nN = int(input())\nchess_board = [input() for _ in range(N)]\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\n....\n....\n....\n...K') == '2'\nassert solution('4\n....\n....\n....\n...K') == '2'\nassert solution('4\n....\n....\n....\nK...') == '0'\nassert solution('4\n....\n....\n....\nK...') == '1'\n\n-----Notes-----\nThe knight can move in a L shape.\nA-2, B-1, C+2, D+1\nA+2, B+1, C+2, D-1\nA+2, B-1, C-2, D+1\nA-2, B-1, C-2, D+1\n\nA-1, B-2, C-2, D-1\nA+1, B-2, C-2, D-1\nA+1, B-2, C-2, D-1\nA-1, B-2, C-2, D-1\n\nA-1, B+2, C+2, D-1\nA+1, B+2, C+2, D+1\nA+1, B+2, C+2, D+1\nA-1, B+2, C+2, D-1\n\nA-1, B+2, C-2, D-1\nA+1, B+2, C-2, D+1\nA+1, B+2, C-2, D+1\nA-1, B+2, C-2, D-1\n\nA-1, B-2, C-2, D-1\nA+1, B-2, C-2, D+1\nA+1, B-2, C-2, D+1\nA-1, B-2, C-2, D-1\n\nA-2, B-1, C-2, D-1\nA+2, B-1, C-2, D+1\nA+2, B-1, C-2, D+1\nA-2, B-1, C-2, D+1\n\nA-2, B-1, C+2, D+1\nA+2, B-1, C+2, D-1\nA+2, B-1, C+2, D-1\nA-2, B-1, C+2, D+1\n\nA-2, B+1, C+2, D-1\nA+2, B+1, C+2, D+1\nA+2, B+1, C+2, D+1\nA-2, B+1, C+2, D-1\n\nA-2, B+1, C-2, D-1\nA+2, B+1, C-2, D+1\nA+2, B+1, C-2, D+1\nA-2, B+1, C-2, D-1\n\nA-1, B+2, C+2, D-1\nA+1, B+2, C+2, D+1\nA+1, B+2, C+2, D+1\nA-1, B+2, C+2, D-1\n\nA-1, B+2, C-2, D-1\nA+1, B+2, C-2, D+1\nA+1, B+2, C-2, D+1\nA-1, B+2, C-2, D-1\n\nA-1, B-2, C-2, D-1\nA+1, B-2, C-2, D+1\nA+1, B-2, C-2, D+1\nA-1, B-2, C-2, D-1\n\nA-1, B-2, C+2, D-1\nA+1, B-2, C+2, D+1\nA+1, B-2, C+2, D+1\nA-1, B-2, C+2, D-1\n\nA-1, B-2, C+2, D+1\nA+1, B-2, C+2, D-1\nA+1, B-2, C+2, D-1\nA-1, B-2, C+2, D+1\n\nA-1, B+2, C+2, D-1\nA+1, B+2, C+2, D+1\nA+1, B+2, C+2, D+1\nA-1, B+2, C+2, D-1\n\nA-2, B-1, C-2, D-1\nA+2, B-1, C-2, D+1\nA+2, B-1, C-2, D+1\nA-2, B-1, C-2, D-1\n\nA-2, B+1, C-2, D+1\nA+2, B+1, C-2, D+1\nA+2, B+1, C-2, D+1\nA-2, B+1, C-2, D+1\n\nA-2, B+1, C+2, D+1\nA+2, B+1, C+2, D+1\nA+2, B+1, C+2, D+1\nA-2, B+1, C+2, D+1\n\nA-2, B+1, C+2, D-1\nA+2, B+1, C+2, D+1\nA+2, B+1, C+2, D+1\nA-2, B+1, C+2, D-1\n\nA-1, B+2, C+2, D-1\nA+1, B+2, C+2, D+1\nA+1, B+2, C+2, D+1\nA-1, B+2, C+2, D-1\n\nA-1, B+2, C-2, D-1\nA+1, B+2, C-2, D+1\nA+1, B+2, C-2, D+1\nA-1, B+2, C-2, D-1\n\nA-1, B-2, C-2, D-1\nA+1, B-2, C-2, D+1\nA+1, B-2, C-2, D+1\nA-1, B-2, C-2, D-1\n\nA-1, B-2, C+2, D-1\nA+1, B-2, C+",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"....\\n....\\n....\\nK...\") == '3'\nassert solution(\"........\\n........\\n........\\nK......\") == '-1'\nassert solution(\"......\\n......\\n......\\n....K.\") == '0'\nassert solution(\"........\\n........\\n........\\n....K.\") == '-1'\n\nimport collections\n",
        "num_ids_2": 41,
        "num_ids_4": 82
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1\\n') == '23'\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\nassert solution(\"100 4\\n42\\n3\\n2\\n99\\n1\") == \"too late\"\n\nimport time\nstart_time = time.time()\nresult = solution(\"100 5\\n42\\n3\\n2\\n99\\n1\")\nprint(\"%s seconds\" % (time.time() - start_time))\nprint(result)",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\n\nSee https://github.com/ox-G/ox-G_archive/blob/master/2004/2004-10.pdf for more info.\n\"\"\"\n\nfrom typing import List, Union\n\nlines = [line for line in stdin.split('\\n') if line]\n\nr, n = [int(num) for num in lines[0].split()]\nrooms: List[int] = [int(num) for num in lines[1].split()]",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'too late'\nassert solution('1\\n1') == '1'\nassert solution('2\\n1\\n2') == '2'\nassert solution('3\\n1\\n2\\n3') == '3'\nassert solution('4\\n1\\n2\\n3\\n4') == 'too late'\n",
        "num_ids_2": 24,
        "num_ids_4": 59
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''100 5\n42\n3\n2\n99\n1''') == '23'\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"KPQNIGDQGCFCQXPTWYJBMSIFL\"\n\"\"\"\nimport re\nimport string\n\nLETTER_MATRIX = [[0, 0, 0, 0, 0, 0, 0, 0],\n                 [0, 0, 0, 0, 0, 0, 0, 0],\n                 [0, 0, 0, 0, 0, 0, 0, 0],\n                 [0, 0, 0, 0, 0, 0, 0, 0],\n                 [0, 0, 0, 0, 0, 0, 0, 0],\n                 [0, 0, 0, 0, 0, 0, 0, 0],\n                 [0, 0, 0, 0, 0, 0, 0, 0],\n                 [0, 0, 0, 0, 0, 0, 0, 0]]\n\nLETTER_MATRIX_ROW_LENGTHS = [0, 0, 0, 0, 0, 0, 0, 0]\n\nKEY_PHRASE_LETTER_MAP = {}\n\nTEXT_LETTER_MAP = {}",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''playfair example\nhide the gold in the tree stump''') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\n\"\"\"\n\nimport string\nimport re",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('playfair example') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\nassert solution('hide the gold in the tree stump') == 'JZQDYMBIKXHVNVEZQTNMUJIGD'\n\"\"\"\n",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"playfair example\"\n) == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\n    \"hide the gold in the tree stump\"\n) == \"TKBZWQQSQYZQEJQHTDQMUBHBCN\"\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"playfair example\"\n) == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\n\"hide the gold in the tree stump\"\n) == \"PQAJGALIHZHVMJAGZHVQGJIWLN\"\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    'playfair example\\nhide the gold in the tree stump') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('playfair example') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\nassert solution('hide the gold in the tree stump') == 'JFNBVXBDQKYPWFXKFVXUIJKMDNLQTZEZIZWFLQKDVYJYJ'\nassert solution('the quick brown fox jumps over the lazy dog') == 'TIJXUYXDRNQMVDKZRFQZVFHXMPGYJXLWXCJUYWXFZQTHXWKG'\nassert solution('the quick brown fox jumps over the lazy dog') == 'TIJXUYXDRNQMVDKZRFQZVFHXMPGYJXLWXCJUYWXFZQTHXWKG'\nassert solution('the quick brown fox jumps over the lazy dog') == 'TIJXUYXDRNQMVDKZRFQZVFHXMPGYJXLWXCJUYWXFZQTHXWKG'\n",
        "num_ids_2": 78,
        "num_ids_4": 190
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('playfair example') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"MVDKMBUHQXFVZWZDMKVUHIWFNSSO\"\n\"\"\"\n",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"HZJVYXDINYYYMGCILTTSXKUQGMD\"\n\nimport re\nimport sys\nsys.setrecursionlimit(10000)",
        "num_ids_2": 63,
        "num_ids_4": 63
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1.0, 1.0, 2.0, 2.0) == 'The gopher cannot escape.'\nassert solution(1.0, 1.0, 2.0, 2.0) == 'The gopher cannot escape.'\n\n'''\n\n\n\nimport math",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1.000 1.000 2.000 2.000') == 'The gopher cannot escape.'\nassert solution('1.500 1.500') == 'The gopher can escape through the hole at (1.500, 1.500).'",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == 'The gopher cannot escape.'\nassert solution(\"1.000 1.000 2.000 2.000\\n3.000 3.000\\n2.500 2.500\") == 'The gopher can escape through the hole at (3.000, 3.000).'\nassert solution(\"1.000 1.000 2.000 2.000\\n3.000 3.000\\n2.500 2.500\\n5.000 5.000\\n4.500 4.500\") == 'The gopher can escape through the hole at (5.000, 5.000).'",
        "num_ids_2": 87,
        "num_ids_4": 157
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1.0 1.0 2.0 2.0\\n1.5 1.5') == 'The gopher can escape through the hole at (1.5, 1.5)'\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1.000 1.000 2.000 2.000\\n1.500 1.500') == 'The gopher cannot escape.'\n\n-----Notes-----\nBecause the gopher is not a math major, she will not attempt to calculate the proper escape path. As such, her solution should be efficient, direct, and simple.\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == 'The gopher can escape through the hole at (1.500, 1.500)'\n\"\"\"\n\nx_gopher, y_gopher = map(float, stdin.readline().split())\nx_dog, y_dog = map(float, stdin.readline().split())\nx_hole, y_hole = map(float, stdin.readline().split())",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1.0 1.0 2.0 2.0\\n1.5 1.5\") == 'The gopher cannot escape.'\nassert solution(\"1.0 1.0 2.0 2.0\\n1.500 1.500\") == 'The gopher can escape through the hole at (-0.0, -0.0).'\nassert solution(\"1.0 1.0 2.0 2.0\\n1.500 1.500\\n1.0 1.0 2.0 2.0\\n1.500 1.500\") == 'The gopher can escape through the hole at (-0.0, -0.0).'\n\"\"\"\nimport math",
        "num_ids_2": 80,
        "num_ids_4": 149
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\nassert solution(\"1.000 1.000 2.000 2.000\\n1.900 1.900\") == \"The gopher can escape through the hole at (1.00, 1.00).\"\n",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1.000 1.000 2.000 2.000\\n1.500 1.500') == 'The gopher cannot escape.'\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1.0 1.0 2.0 2.0\\n1.5 1.5') == 'The gopher can escape through the hole at (1.0, 1.0).'\nassert solution('1.0 1.0 2.0 2.0\\n1.5 1.5\\n1.0 1.0\\n1.5 1.5') == 'The gopher can escape through the hole at (1.0, 1.0).'\nassert solution('1.0 1.0 2.0 2.0\\n1.5 1.5\\n1.0 1.0\\n1.5 1.5\\n1.5 1.5') == 'The gopher can escape through the hole at (1.0, 1.0).'\nassert solution('1.0 1.0 2.0 2.0\\n1.5 1.5\\n1.0 1.0\\n1.5 1.5\\n1.5 1.5\\n1.0 1.0') == 'The gopher can escape through the hole at (1.0, 1.0).'\nassert solution('1.0 1.0 2.0 2.0\\n1.5 1.5\\n1.0 1.0\\n1.5 1.5\\n1.5 1.5\\n1.5 1.5\\n1.0 1.0') == 'The gopher can escape through the hole at (1.0, 1.0).'\n",
        "num_ids_2": 108,
        "num_ids_4": 256
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 4\n3 3\n3''') == 'Y'\n\"\"\"\n\nfrom collections import deque\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\nassert solution(\"3 4\\n3 1\\n3\") == \"N\"\nassert solution(\"3 4\\n4 3\\n3\") == \"Y\"\nassert solution(\"3 4\\n4 4\\n3\") == \"N\"\nassert solution(\"3 4\\n4 4\\n5\") == \"N\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\nassert solution(\"1 -1\\n1 1\\n3\") == \"Y\"\nassert solution(\"1 -1\\n1 1\\n3\") == \"N\"\n\n-----Problem-----\nThe number $n$ is given in the input. Write a program to compute $n-1$.\n\n-----Solution-----\n",
        "num_ids_2": 37,
        "num_ids_4": 56
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n2 2\\n3\") == \"Y\"\nassert solution(\"4 3\\n2 2\\n2\") == \"N\"\nassert solution(\"2 2\\n3 4\\n3\") == \"N\"\n\nimport itertools",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('3 4\\n4 3\\n3') == 'N'\nassert solution('3 4\\n4 4\\n3') == 'N'\nassert solution('3 4\\n4 4\\n1') == 'N'\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('3 4\\n3 4\\n3') == 'N'\nassert solution('3 4\\n4 4\\n3') == 'N'\n\nprint(solution(stdin))\n",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('3 4\\n3 3\\n10') == 'N'\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\nassert solution(\"4 3\\n3 4\\n3\") == \"N\"\nassert solution(\"1 2\\n2 1\\n1\") == \"N\"\n\"\"\"\n\nimport sys\n\na, b = map(int, sys.stdin.readline().split())\nc, d = map(int, sys.stdin.readline().split())\nt = int(sys.stdin.readline())",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"Y\"\nassert solution(\"7 7\") == \"N\"\nassert solution(\"-3 -3\") == \"Y\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 22,
        "num_ids_4": 35
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3, 4, 3) == \"Y\"\nassert solution(1, 3, 10) == \"N\"\nassert solution(4, 1, 5) == \"N\"\nassert solution(0, 0, 5) == \"N\"\nassert solution(2, 1, 5) == \"Y\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\".V..\") == \"...V...\\n...V...\\n..VVV..\\nVV#VV.\\n.V###V.\"\nassert solution(\".......\\n#..#.#.\\n#..#.#.\\n#..#.#.\\n#..#.#.\\n.#.##.#\") == \"...V...\\n...V...\\n..VVV..\\nVV#VV.\\n.V###V.\"\n",
        "num_ids_2": 110,
        "num_ids_4": 110
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\".V..\") == \".VV..\\nVV.V.\\n..VVV.\"\nprint(solution(\".V..\"))\n\n'''\n\nfrom collections import deque\n\nrows, cols = [int(el) for el in input().split()]\n\ngrid = [[el for el in input()] for _ in range(rows)]\n\ndirections = {\n    'w': (-1, 0),\n    'e': (1, 0),\n    's': (0, 1),\n    'n': (0, -1),\n}",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 7\\n....\\n.......\\n...#...\\n..###..') == '....\\n....\\n..VVV\\nVV#VV\\nV###V'\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\".#..#\\n.....\\n#####\\n....#\\n...##\") == \"VVVVV\\nVVVVV\\nVV#VV\\n#V#V#\"\n\"\"\"",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\n",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.') == '...V...\\n...V...\\n..VVV..\\n.V#V#V.\\n.V#V#V.'\n\"\"\"",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\n----Solution----\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \\\n    \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\n\"\"\"\n\nN, M = map(int, stdin.readline().split())\n\ngrid = [list(stdin.readline().strip()) for _ in range(N)]\n\nfor i in range(N):\n    for j in range(M):\n        if grid[i][j] == \"V\":\n            for x, y in ((i - 1, j), (i, j + 1), (i + 1, j), (i, j - 1)):\n                if 0 <= x < N and 0 <= y < M and grid[x][y] == \".\":\n                    grid[x][y] = \"V\"\n\n        if grid[i][j] == \"#\":\n            for x, y in ((i - 1, j), (i, j + 1), (i + 1, j), (i, j - 1)):\n                if 0 <= x < N and 0 <= y < M and grid[x][y] == \".\":\n                    if (x, y)!= (i, j):\n                        grid[x][y] = \"#\"\n\nfor row in grid:\n    print(\"\".join(row))",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\".V....V\") == \".VVVVVV\"\nassert solution(\".V#...VV\") == \".V#VVVVV\"\nassert solution(\".V.V..#VV\") == \".V#VVVVV\"\nassert solution(\".V#V.V..#VV\") == \".V#VVVVV\"\nassert solution(\".VV..#V.#VV\") == \".VVVVVVV\"\n",
        "num_ids_2": 39,
        "num_ids_4": 87
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"\"\"..VVV..\n.VV#VV.\n.V###V.\n\"\"\"\nassert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"\"\"..VVV..\n.VV#VV.\n.V###V.\n\"\"\"\nassert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"\"\"..VVV..\n.V#V#V.\n.V###V.\n\"\"\"\n\n\"\"\"\n\n\"\"\"",
        "num_ids_2": 70,
        "num_ids_4": 105
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13\") == \"11\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11101\") == \"101\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13') == '11'\n\nassert solution('-13') == '-11'\n\nassert solution('0') == '0'\n\nassert solution('1') == '1'\n\nassert solution('-1') == '-1'",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('13') == '11'\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('100') == '1'\nassert solution('101') == '101'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1101') == '1011'\n'''",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('13') == '11'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('13') == '11'\nassert solution('3') == '1'\nassert solution('9') == '1'\nassert solution('101') == '101'\nassert solution('1000') == '100'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13') == '11'\nprint(solution('13'))\n\n--------------------\n----CODE----\n--------------------\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13\") == \"11\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13') == '11'\n\nimport sys\n\nlines = []\nwhile True:\n    line = sys.stdin.readline()\n    if line:\n        lines.append(line.strip())\n    else:\n        break\n\nfor line in lines:\n    print(solution(line))\n\n\"\"\"\nimport re",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\\npink\\ntequilaSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\n",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrise\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npinKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12\\npink\\ntequilaSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == '9'\nassert solution(\"1\\npink\") == \"I must watch Star Wars with my daughter\"\nassert solution(\"2\\nEaPmPInG\\nFoRmArT\\nAuRd\") == \"1\"\nassert solution(\"3\\nCoQLiCOrE\\nDaYpLoWhIe\\nNuMblIe\\nCaPoInG\\nBlUe\\nCoQLiCOrE\") == \"0\"\nassert solution(\"4\\nPuRpUrE\\nTeQuIeLl\\nLaZoRa\\nSeEbLe\\nLaZoRa\") == \"2\"\n",
        "num_ids_2": 93,
        "num_ids_4": 180
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\\n\") == \"9\"\n\"\"\"\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'I must watch Star Wars with my daughter'\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('4') == '2'\n",
        "num_ids_2": 27,
        "num_ids_4": 47
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12\\n'\n    'teaquilSunrse\\n'\n    'mExicanPInK\\n'\n    'Coquelicot\\n'\n    'turqrose\\n'\n    'roSee\\n'\n    'JETblack\\n'\n    'pink\\n'\n    'babypink\\n'\n    'pInKpinkPinK\\n'\n    'PInkrose\\n'\n    'lazerlemon') == '9'\n\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nimport re",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12\\npink\\ntequilaSunrise\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\n",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12\\npink\\ntequilaSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\nPInkrose\\nlazerlemon\") == \"9\"",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12\") == \"I must watch Star Wars with my daughter\"\nassert solution(\"0\") == \"I must watch Star Wars with my daughter\"\nassert solution(\"1\") == \"I must watch Star Wars with my daughter\"\nassert solution(\"5\") == \"I must watch Star Wars with my daughter\"\nassert solution(\"6\") == \"I must watch Star Wars with my daughter\"\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nassert solution(\"3 5 1\") == \"3 1 5\"\nassert solution(\"7 6 2\") == \"7 2 6\"\nassert solution(\"5 5 5\") == \"5 5 5\"\nassert solution(\"3 3 3\") == \"3 3 3\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 5 3') == '1 3 5'\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nprint(\"PASSED\")\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nassert solution(\"5 1 3\") == \"1 5 3\"\nassert solution(\"3 5 1\") == \"1 3 5\"\n\"\"\"\n\nstdin = input()\nprint(*sorted(stdin))\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(    '1 5 3') == '1 3 5'\nassert solution(    '5 3 1') == '1 3 5'\nassert solution(    '5 3 1') == '1 3 5'\n\nSample Input:\n4 9 2\nABBC\nSample Output:\n4 2 9\n",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == sys.stdout.read()\n\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(1, 5, 3) == '1 3 5'\nassert solution(3, 5, 1) == '3 5 1'\n\n------------\n\nfrom collections import deque",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nassert solution(\"7 5 2\") == \"5 2 7\"\nassert solution(\"9 9 7\") == \"9 7 9\"\nassert solution(\"9 8 9\") == \"8 9 9\"\nassert solution(\"7 2 5\") == \"2 5 7\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(solution.__doc__, \"1 5 3\") == \"1 3 5\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\\n\") == \"8.00000000\"\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(Sample input) == \"73.8\"\n\n-----Challenge-----\nYour task is to solve this problem without using the Python built-in max function.\n\nPlease write a function that returns the total number of crowns obtained in the final sale of stock after Mittens\u2019s death.\n\nHint:\n\nAs it turns out, the max function can be used to find the largest number in a given list. For example, the max of [1, 2, 3] is 3, and the max of [1, -2, -3] is -2.\n\nFor the purposes of this exercise, the maximum is defined as the largest number that is not greater than any of the numbers in its list.\n\nPlease see the resources below for hints and further explanation.\n\n-----Resources-----\n\n\"\"\"\n\n\n\n\"\"\"\nMax is builtin\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"buy 1 15\\n split 3\\n sell 1 5\\n die 4\") == \"8.0\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\") == \"8.00000000\"\n\n\"\"\"\n\nimport re",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('buy 2 15\\nsplit 3\\nsell 1 5\\nmerge 2\\ndie 3') == '8.0'\nassert solution('buy 1 15\\nsplit 3\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsplit 3\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsplit 3\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsplit 3\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nbuy 1 15\\n",
        "num_ids_2": 1002,
        "num_ids_4": 1002
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('buy 1 15\\n'\n'buy 1 15\\n'\n'split 3\\n'\n'sell 1 5\\n'\n'die 4\\n') == '8.00000000'\nassert solution('buy 1 15\\n'\n'buy 1 15\\n'\n'split 3\\n'\n'sell 1 5\\n'\n'die 4\\n'\n'buy 1 15\\n'\n'split 3\\n'\n'sell 1 5\\n'\n'buy 1 15\\n'\n'buy 1 15\\n'\n'die 4\\n'\n'sell 1 5\\n') == '8.00000000'\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(sample_input_1) == \"3.500000000\"\nassert solution(sample_input_2) == \"73.800000000\"\n\"\"\"\n\ninput_ = [\n    'buy 10 5',\n    'sell 10 7',\n    'buy 5 10',\n    'sell 5 6',\n    'buy 2 10',\n    'sell 2 9',\n    'buy 4 10',\n    'sell 4 6',\n    'buy 2 10',\n    'sell 2 9',\n    'buy 2 10',\n    'sell 2 9',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'die 4',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    'buy 1 10',\n    'sell 1 10',\n    ",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('buy 1 15\\\\nsplit 3\\\\nsell 1 5\\\\ndie 4\\\\n') == '8.0'\n\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n''') == '8.0'\n\nassert solution('''\nbuy 1 15\nsplit 3\nsell 1 5\nsplit 2\nsell 1 5\ndie 4\n''') == '19.0'\n\nassert solution('''\nbuy 1 15\nsplit 3\nsell 1 5\nsplit 2\nsell 1 5\nsplit 2\nsell 1 5\ndie 4\n''') == '33.0'\n\nassert solution('''\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n''') == '15.0'\n\nassert solution('''\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\nbuy 2 15\nsplit 2\nsell 1 5\ndie 4\nbuy 3 15\nsplit 2\nsell 1 5\ndie 4\nbuy 4 15\nsplit 2\nsell 1 5\ndie 4\nbuy 5 15\nsplit 2\nsell 1 5\ndie 4\nbuy 6 15\nsplit 2\nsell 1 5\ndie 4\nbuy 7 15\nsplit 2\nsell 1 5\ndie 4\nbuy 8 15\nsplit 2\nsell 1 5\ndie 4\nbuy 9 15\nsplit 2\nsell 1 5\ndie 4\nbuy 10 15\nsplit 2\nsell 1 5\ndie 4\n''') == '64.0'",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\\n\") == \"8.00000000\"\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"123456789\") == \"1\"\nassert solution(\"100\") == \"0\"\nassert solution(\"111111\") == \"6\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 44
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"808\") == \"8\"\n\nSample Input:\n4\nSample Output:\n2\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"808\") == \"8\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"808\") == \"8\"\n\"\"\"\n\nimport math\nimport sys\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"1\") == \"1\"\nassert solution(\"123456789\") == \"9\"\nassert solution(\"9\") == \"9\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(808) == '8'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('808') == '8'\n\nassert solution('100') == '0'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('808') == '8'\nassert solution('999') == '8'\n\n\"\"\"\n\nimport unittest",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('808') == '8'\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"123\") == \"3\"\nassert solution(\"999\") == \"9\"\n\n-----Instructions-----\nRead in the nonnegative integer $x$.\nMultiply the digits in $x$ until there are no digits left. If the product of any two digits is greater than $9$, replace it with the sum of its two digits. If the product of all digits is greater than $9$, replace it with $9$.\n\nReturn the final product.",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(['5 5', 'LWCECLWE', 'LWCCELW', 'LWCCECL', 'LWCCECL', 'LWCCECL', 'LWCCECL', 'LWCECLWE']) == 3\nassert solution(['4 4', 'LWCEC', 'LWCCE', 'LWCCE', 'LWCCE']) == 0\n\"\"\"",
        "num_ids_2": 94,
        "num_ids_4": 94
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\"\"\"\n\nimport unittest",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\"\"\"\n\nfrom typing import List\n\n\"\"\"\nn * m\nsolution: O(n * m)\n\"\"\"\nclass Solution:\n    def min_islands(self, rows: List[str], cols: int) -> int:\n        def find(x):\n            if parents[x]!= x:\n                parents[x] = find(parents[x])\n            return parents[x]\n\n        def union(x, y):\n            px, py = find(x), find(y)\n            if px == py:\n                return False\n            parents[px] = py\n            return True\n\n        parents = [i for i in range(rows * cols)]\n        for i in range(rows):\n            for j in range(cols):\n                if i * cols + j >= rows * cols or i * cols + j < 0 or i < 0 or j < 0:\n                    continue\n                if rows * cols - 1 - i * cols - j < rows * cols - 1 or i * cols + j >= rows * cols or i >= cols or j >= rows:\n                    continue\n                if rows[i][j] == \"L\" and union(i * cols + j, rows * cols - 1):\n                    islands += 1\n        return islands\n\nassert Solution().min_islands(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\", 4, 5) == 0\n",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 5\nCCCCC\nCCCCC\nCCCCC\nCCCCC''') == 0\n\n-------------------\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC') == '0'\nprint(solution(stdin))\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC') == 0\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\"\"\"\n\nimport sys",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\"\"\"\n\nimport sys\n\nlines = sys.stdin.readlines()\nr, c = [int(v) for v in lines[0].strip().split()]\n\nland = [list(v.strip()) for v in lines[1:r + 1]]\n\nprint(land)",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == \"0\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 C\") == \"0\"\nassert solution(\"2 S\") == \"0\"\nassert solution(\"1 S\") == \"0\"\nassert solution(\"1 H\") == \"14\"\nassert solution(\"1 C\") == \"0\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 D') == '30'\nassert solution('3 C') == '0'\nassert solution('3 S') == '0'\nassert solution('3 H') == '3'\nassert solution('3 K') == '0'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'\nassert solution('1 S\\nKH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '0'\nassert solution('2 C\\nTD\\nJS\\n9C\\nKS\\nQS\\nAH\\nJH') == '0'\n\n\"\"\"",
        "num_ids_2": 77,
        "num_ids_4": 112
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4H 4C 2S KS AS 2H JS TS 5S JS QS 9S 9D 9H 9S 9C 7S 3S 6S 6D 6H 6S 6C KC KS 4H 4S 3S KS AS KC 3S 3D 3H 3S 3C 3D 2S 2D 9C JS JC JS JD 2H JS KS 7S 7S 7D QS QC 9S 7S KC 2H 9S KS JD KS 5S QS 8S 2S AD QS 9S 2H TS KS AS 3S AD 9H 3D KH JS JD KS AS KC 7S QD 4H 2S KH 9D TS JS JD KS 4C AS KS 4S 7H 9D 8S 4S AD 8S QS 3D 4S 9H 9S 4H 9C KC 8S 6H 6S 6D 7S QS JS 3S 8C 4S QS 2S 8S 6S 3S QS 9H TS 6S 9C QC JS QS 9S KS 3S JC 5H AS 8C 7D KS 4C 3D TS JS KS 5S 7S QH 2S 3H 3C AC AH JD KC 4C 6C JS JC 4S 4D TH 5C QS QH 3H TS 3S 8H 9S KS 6S 3C 7C 4S KC 5H AS JS QC TS 9S 6S JS 4S 2S 9D KS 4H 4S 3S 4C 8S 9S KS 7H 4D JS KH AC 2D TS 3S 6H 3S 2D JS KS 9H 6S JS QC 3S AS 7S JS 8S 9S 6S 2C 7S JS 5C 2H QS QS 9C QH TS QD 3S 6D 6S QH AS QS 4H 7S 6S JC AS 8H QS QS 7S 5H AS 8S JD 2C 3S 6S KS 4S 2S 9H 9S 3H JS 5C 6H AS 3S 3C 9S JS 8H 4S QS TH 6S 3S KC 9S 6C 7S 7S 7H AS QH 7S 9C 3C 7C 8C 9S QS 5D 4C KC 6S QS JS 2C 8S 6C 9H QH 3S 3D QS QS KS AS JS 3C 8H 9C 5S QD 7S TC 4S QC KS AS 9D KS AS 9C KH 8D QS JS 4H QC JS 6S JS QC 8C AC 3C 4D 6S JS 3S QC QD TS 9S 4C 9S 5S QS QC QD 8H 9S 6S 5S 7H 7S JS 9S 9D 7S 7C AS KS 7S 5C AC KH 3S QH QS 8S JS 2S 7S KC 5S 8H 4H 5S KS 3S AS 7S KC 8D QC 9S QS JS 4H KS 9S 2C KS 3S QH QC 9S 7S AS KC 2C 7S 7C QC KH AS QS 8S 5S 9D 6S 3S QS 6S 9S 3S JS 9H KS 8D QC JS AH AC 3C 8C KC 8S QC JS 3D 6H 9C KS QS TS 8S 2C 6S AS JS 7H 2S KS AS QH 8S AH QC KS 3C TS AS 8S 7S QH 7S 6H QC JS 9H KD 4S 7S 7S 9C 8S KH 9H 5C 8S 9S KS 5S 6H 9S 4H 9D 8D KS 7H 9C QS QH KC 5H QS 7S 2H 7S KS 5H 5S 4C 8H AS 3C QD KS 9S 6S 8C 7C 9S KS JC 5S 4S QS 4D QD KS 9C 7S QS 3S 9H JC KC 9S 7S 8S 8H 9H 5C QD 7H TC 3H TH 8S 9C 4H 7C QH 8S AS KS JS KH 9S 9D 9H 8H 3S TH QH 8C 7H 2H 7S 6S KC JS KS 8C 4S QS 3S 9S 7S 4H QS JS 7S 5S 9C KC 8H 5S JS AH AC 8S 6H TS QS AC AS 8H TS 3C 8S AS 6S AD 6S 7S 6H QS KS 7S 2S 6C 4S 3S AS 8H KC KS 3S 5H AS QS QC JS 3S TS 9H 5S 7S 3S KS 6H QS 9C JS 9S TC 8S 6C TH 3C JS KH 9H 6C QS JS 9S 7C KC 8S 3S 5H 8C JS 7S QH 7S AS 9S 4H QS 9C QD JS 9H 9C 9S 5S 4H 5S AD JS QH 5S 9C JS 5S 9S 9H QH KS 4D AH 6S KS 9C 2S 5C AC 2H 5H 3S JC 6S 4C QS TC 8H JS 9H 9S 9S 9D TH QS 6S 7S 4C TH 2S 8D 2H 8H 9S KS 9S 2D JS TS 8S 5S 7S AC KS 8S TH 6S TS QS JS 9S 3D 8S QS 6S 4S 9D 5S AS 2H AS JS 2S 5C AD JS 4S 9C 7S 5S JC 3S 3H 4S QS KS AS 5S AH 9D 6H 3S 5S 4H AC AS 7C KC 2S 5H 7C 3S AC 2H AS JS TS 9S 8S 9C QH TS AS JS 6C 2S 3S 2C AC 2D TH 6S QS 6S 3S 4S KS AS 7S 4D QS 6H 5C 4H QC 9S TS 2H 8C KS QH 7S QC 5S 8H JS KS AS KC JC 7H 4S 7S 9C 9D 5S 2H 5S 8S AD 6S 9S KD 3C QS KH 8C JS 7C QH 5S QD 8S JS KS AS 9S QS 5S 8S 6S QS 6S 9D 8S 5H 8H 9S KS 9S 5S 7C JS QS 6H TS 9S 4S 8S QH AS 8S 7S JS 7C 3S 3D AS 3C 6D 8S JS QS QS 4S 3C AS 8D 9S JS 4S 8S 9C KS 6S AD 7C 6S TS 7S 3S QS KS QH 8S 3S 4S 9D KS 8H 9S 6C QS QC 3H 9H AS KS 5",
        "num_ids_2": 1519,
        "num_ids_4": 1519
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\\n') == '60'\n\"\"\"\n\ninput()\n\ncard = {\n    \"S\": 0,\n    \"H\": 1,\n    \"D\": 2,\n    \"C\": 3\n}\n\nsuit = {\"S\": 0, \"H\": 1, \"D\": 2, \"C\": 3}\n\nhand = {\n    \"AH\": 0,\n    \"KH\": 1,\n    \"QH\": 2,\n    \"JH\": 3,\n    \"TH\": 4,\n    \"9H\": 5,\n    \"8H\": 6,\n    \"7H\": 7,\n    \"6H\": 8,\n    \"5H\": 9,\n    \"4H\": 10,\n    \"3H\": 11,\n    \"2H\": 12,\n    \"1H\": 13,\n    \"0H\": 14,\n    \"AS\": 15,\n    \"KS\": 16,\n    \"QS\": 17,\n    \"JS\": 18,\n    \"TS\": 19,\n    \"AD\": 20,\n    \"KS\": 21,\n    \"QS\": 22,\n    \"JS\": 23,\n    \"TS\": 24,\n    \"AD\": 25,\n    \"KS\": 26,\n    \"QS\": 27,\n    \"JS\": 28,\n    \"TS\": 29,\n    \"AD\": 30,\n    \"KS\": 31,\n    \"QS\": 32,\n    \"JS\": 33,\n    \"TS\": 34,\n    \"AD\": 35,\n    \"KS\": 36,\n    \"QS\": 37,\n    \"JS\": 38,\n    \"TS\": 39,\n    \"AD\": 40,\n    \"KS\": 41,\n    \"QS\": 42,\n    \"JS\": 43,\n    \"TS\": 44,\n    \"AD\": 45,\n    \"KS\": 46,\n    \"QS\": 47,\n    \"JS\": 48,\n    \"TS\": 49,\n    \"AD\": 50,\n    \"KS\": 51,\n    \"QS\": 52,\n    \"JS\": 53,\n    \"TS\": 54,\n    \"AD\": 55,\n    \"KS\": 56,\n    \"QS\": 57,\n    \"JS\": 58,\n    \"TS\": 59,\n    \"AD\": 60,\n    \"KS\": 61,\n    \"QS\": 62,\n    \"JS\": 63,\n    \"TS\": 64,\n    \"AD\": 65,\n    \"KS\": 66,\n    \"QS\": 67,\n    \"JS\": 68,\n    \"TS\": 69,\n    \"AD\": 70,\n    \"KS\": 71,\n    \"QS\": 72,\n    \"JS\": 73,\n    \"TS\": 74,\n    \"AD\": 75,\n    \"KS\": 76,\n    \"QS\": 77,\n    \"JS\": 78,\n    \"TS\": 79,\n    \"AD\": 80,\n    \"KS\": 81,\n    \"QS\": 82,\n    \"JS\": 83,\n    \"TS\": 84,\n    \"AD\": 85,\n    \"KS\": 86,\n    \"QS\": 87,\n    \"JS\": 88,\n    \"TS\": 89,\n    \"AD\": 90,\n    \"KS\": 91,\n    \"QS\": 92,\n    \"JS\": 93,\n    \"TS\": 94,\n    \"AD\": 95,\n    \"KS\": 96,\n    \"QS\": 97,\n    \"JS\": 98,\n    \"TS\": 99,\n    \"AD\": 100,\n    \"KS\": 101,\n    \"QS\": 102,\n    \"JS\": 103,\n    \"TS\": 104,\n    \"AD\": 105,\n    \"KS\": 106,\n    \"QS\": 107,\n    \"JS\": 108,\n    \"TS\": 109,\n    \"AD\": 110,\n    \"KS\": 111,\n    \"QS\": 112,\n    \"JS\": 113,\n    \"TS\": 114,\n    \"AD\": 115,\n    \"KS\": 116,\n    \"QS\": 117,\n    \"JS\": 118,\n    \"TS\": 119,\n    \"AD\": 120,\n    \"KS\": 121,\n    \"QS\": 122,\n    \"JS\": 123,\n    \"TS\": 124,\n    \"AD\": 125,\n    \"KS\": 126,\n    \"QS\": 127,\n    \"JS\": 128,\n    \"TS\": 129,\n    \"AD\": 130,\n    \"KS\": 131,\n    \"QS\": 132,\n    \"JS\": 133,\n    \"TS\": 134,\n    \"AD\": 135,\n    \"KS\": 136,\n    \"QS\": 137,\n    \"JS\": 138,\n    \"TS\": 139,\n    \"AD\": 140,\n    \"KS\": 141,\n    \"QS\": 142,\n    \"JS\": 143,\n    \"TS\": 144,\n    \"AD\": 145,\n    \"KS\": 146,\n    \"QS\": 147,\n    \"JS\": 148,\n    \"TS\": 149,\n    \"AD\": 150,\n    \"KS\": 151,\n    \"QS\": 152,\n    \"JS\": 153,\n    \"TS\": 154,\n    \"AD\": 155,\n    \"KS\": 156,\n    \"QS\": 157,\n    \"JS\": 158,\n    \"TS\": 159,\n    \"AD\": 160,\n    \"KS\": 161,\n    \"QS\": 162,\n    \"JS\": 163,\n    \"TS\": 164,\n    \"AD\": 165,\n    \"KS\": 166,\n    \"QS\": 167,\n    \"JS\": 168,\n    \"TS\": 169,\n    \"AD\": 170,\n    \"KS\": 171,\n    \"QS\": 172,\n    \"JS\": 173,\n    \"TS\": 174,\n    \"AD\": 175,\n    \"KS\": 176,\n    \"QS\": 177,\n    \"JS\": 178,\n    \"TS\": 179,\n    \"AD\": 180,\n    \"KS\": 181,\n    \"QS\": 182,\n    \"JS\": 183,\n    \"TS\": 184,\n    \"AD\": 185,\n    \"KS\": 186,\n    \"QS\": 187,\n    \"JS\": 188,\n    \"TS\": 189,\n    \"AD\": 190,\n    \"KS\": 191,\n    \"QS\": 192,\n    \"JS\": 193,\n    \"",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n\nassert solution(\"2 C\\nKD\\nJS\\nJH\") == \"20\"\n\nassert solution(\"2 H\\n9C\\n3C\\nJS\\nTD\") == \"0\"\n\nassert solution(\"2 C\\n7C\\nJS\\n9S\\n4D\") == \"0\"\n\nassert solution(\"2 D\\nJH\\n5H\\n9C\\n2D\") == \"0\"",
        "num_ids_2": 60,
        "num_ids_4": 111
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\nassert solution(\"2 H\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"45\"\nassert solution(\"2 D\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"30\"\nassert solution(\"2 C\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"15\"\nassert solution(\"2 S\\n3H\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n",
        "num_ids_2": 76,
        "num_ids_4": 152
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n\nprint(solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\"))\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\nassert solution(\"2 H\\nKH\\nQH\\nTH\\n4H\\nTH\\n6H\") == \"6\"\nassert solution(\"1 C\\nKH\\nQS\\nJS\\nTD\\n4H\\n5H\\n6H\") == \"12\"\nassert solution(\"1 C\\nKH\\nQS\\nJS\\nTD\\n4H\\n5H\\n6H\") == \"12\"\nassert solution(\"1 S\\nKH\\nQS\\nJS\\nTD\\n4H\\n5H\\n6H\") == \"24\"\n",
        "num_ids_2": 71,
        "num_ids_4": 145
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('this is very annoying') =='se'\n\"\"\"\n\nimport re",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('aa') == ''\nassert solution('ab') == ''\nassert solution('abab') == ''\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\nassert solution(\"help me!\") == \"!\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 39
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\nSample Input 2:\ni see why they make so much money\nii eee ii see why they make so much money\nSample Output 2:\ni\n\nSample Input 3:\nab cd\nabcd\nSample Output 3:\na\n\nSample Input 4:\nab a b\nabab\nSample Output 4:\nb\n\nSample Input 5:\ntheday\nthatday\nSample Output 5:\nd\n\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('this is very annoying') =='se'\n\nassert solution('thiss iss veery annoying') =='se'\n\nassert solution('this is very boring') == ''\n\nassert solution('x y z') == ''\n\nassert solution('abc xyz') == ''",
        "num_ids_2": 28,
        "num_ids_4": 49
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\nassert solution(\"beep boop beer!\") == \"b\"\nassert solution(\"a\") == \"\"\nassert solution(\"\") == \"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 51
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n------Notes-----\n\n- There is one space at the end of each string, thus the final character in $s$ will never be one of the characters in $t$.\n- The strings are guaranteed to be the same length.\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\nassert solution(\"this is very annoying\") == \"se\"\nassert solution(\"this is very annoying\") == \"se\"\nassert solution(\"this is very annoying\") == \"se\"\n",
        "num_ids_2": 28,
        "num_ids_4": 54
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\nassert solution('5 3 5\\n0 0 1 1 2') == 1\nassert solution('5 3 10\\n0 0 1 1 2') == 0\nassert solution('5 3 2\\n0 0 1 1 2') == 2\nassert solution('5 3 1\\n0 0 1 1 2') == 2\n\"\"\"\n\nimport sys\n\nS, C, K = [int(n) for n in sys.stdin.readline().strip().split()]\ncolors = [int(n) for n in sys.stdin.readline().strip().split()]\n\ncount = 0\ncurrent_sum = 0\nfor color in colors:\n    if abs(current_sum + color) <= K:\n        current_sum += color\n        count += 1\n    else:\n        current_sum = color\n        count += 1\n\nprint(count)\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 1 1 2\") == 3\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 3 0\n0 0 1 1 2''') == '3'\n\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\n\"\"\"\n\nimport sys",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\n\n\"\"\"\n\nimport sys\n\nS, C, K = [int(i) for i in sys.stdin.readline().strip().split(' ')]\ncolors = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n\ncan_sock = 0\ncount = 0\n\nfor i in range(S):\n    if colors[i] <= K:\n        can_sock += 1\n        count += 1\n    else:\n        can_sock += 1\n        count += 1\n        count += 1\n    if can_sock == C:\n        can_sock = 0\n        count += 1\n\nprint(count)\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n1\\n1\\n1\\n') == '1'\n'''\n\nimport sys\nimport math",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == '3'\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '2'\nassert solution('1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6",
        "num_ids_2": 20,
        "num_ids_4": 1681
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"4\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n3\") == \"1\\n2\\n6\"\nprint(\"Success\")\n\"\"\"\n\nimport os\nfrom io import StringIO\nimport unittest\nimport sys\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3\n1\n2\n3\"\"\"\n        output = \"\"\"1\n2\n6\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"5\n12345\n654321\n432154\n7654321\n6543215\"\"\"\n        output = \"\"\"5\n3\n1\n2\n5\"\"\"\n        self.assertIO(input, output)\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '6'\nassert solution('4') == '2'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1\\n2\\n') == '6'\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n3\") == \"6\"\nassert solution(\"2\\n3\\n4\") == \"6\"\n\"\"\"\n\nimport sys\n\nfor i in range(int(sys.stdin.readline())):\n    sys.stdout.write(str(int(pow(int(sys.stdin.readline()), 10))))\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n3\") == \"6\"\nassert solution(\"2\\n22\\n333\") == \"6\"\n\n\"\"\"\n\nimport sys\n\nassert sys.argv[1:] == [\"1\", \"2\", \"3\"]\n\nimport fileinput\n\nfor line in fileinput.input():\n    n = int(line)\n    print(\n        sum(\n            int(num)\n            for num in str(\n                1\n                * n\n            )\n        ) % 10\n    )\n",
        "num_ids_2": 32,
        "num_ids_4": 51
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3\\n4\") == \"6\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\n\nassert solution(\"1\\n2\\n3\\n\") == \"6\"\n\nassert solution(\"2\\n3\\n\") == \"6\"\n\nassert solution(\"3\\n\") == \"6\"\n",
        "num_ids_2": 25,
        "num_ids_4": 52
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2\\n1') == '6'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3) == 6\n\"\"\"\n\n\"\"\"\nA = [\n  [1, 2, 3, 4, 5],\n  [6, 7, 8, 9, 10],\n  [11, 12, 13, 14, 15],\n  [16, 17, 18, 19, 20],\n  [21, 22, 23, 24, 25],\n]\n\nB = [list(i) for i in zip(*A)]\n\nprint(A)\nprint(B)\n\"\"\"\n\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2') == '4 2'\nassert solution('5\\n2 3 3 1 3') == '14 6'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nnums = list(map(int, sys.stdin.readline().strip().split()))\n\nalice, bob = 0, 0\nalice_turn = True\nwhile nums:\n    n = nums.pop(0) if alice_turn else nums.pop()\n    alice += n\n    alice_turn = not alice_turn\n\nprint(alice, bob)\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2\\n') == '4 2'\nassert solution('4\\n3 1 2\\n') == '7 7'\nassert solution('2\\n2 1\\n') == '1 1'\n\"\"\"\n",
        "num_ids_2": 35,
        "num_ids_4": 52
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 2') == '4 2'\nprint(solution('1\\n1 2 3'))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2') == '4 2'\nassert solution('4 1 2') == '5 2'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('0\\n0') == '0\\n0'\nassert solution('1\\n2') == '3\\n1'\nassert solution('1\\n2\\n2\\n1\\n2\\n1\\n2\\n1\\n1\\n0\\n2\\n1\\n2\\n2\\n1\\n2\\n2\\n1\\n1\\n2\\n1\\n2\\n1\\n0\\n1\\n1\\n2\\n1\\n2\\n2\\n2\\n2\\n2\\n0\\n2\\n2\\n1\\n1\\n0\\n1\\n2\\n1\\n2\\n0\\n2\\n0\\n1\\n0\\n1\\n0\\n1\\n2\\n1\\n0\\n0\\n2\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n2\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0",
        "num_ids_2": 24,
        "num_ids_4": 1644
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1 2\\n') == '4 2'\nassert solution('1\\n') == '1 0'\nassert solution('2\\n') == '2 2'\nassert solution('3\\n') == '6 3'\nassert solution('4\\n') == '12 4'\n\nimport sys\n",
        "num_ids_2": 28,
        "num_ids_4": 54
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\"\"\"\n\nn = int(stdin.readline().rstrip())\na = list(map(int, stdin.readline().rstrip().split()))\na.sort()\nb = sum(a)\n\nprint(b, sum(a[::2]) + sum(a[1::2]))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 1') == 2\n'''",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 1\") == \"2\"\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('5 2 1\\n') == '2'\nassert solution('2 1 1\\n') == '0'\nassert solution('5 2 3\\n') == '1'\n",
        "num_ids_2": 17,
        "num_ids_4": 45
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 2 1''') == '''2'''\n\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 1\") == 2\n\"\"\"\n\nprint(\n    solution(\n        \"5 2 1\"\n    )\n)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 1\") == \"2\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 3 3\") == \"3\"\nassert solution(\"1 3 1\") == \"2\"\nassert solution(\"3 1 1\") == \"4\"\nassert solution(\"3 2 1\") == \"2\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(r\"\"\"5 2 1\n\"\"\") == 2\n\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 1\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 1\") == 2\nprint(solution(\"5 2 1\"))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == 36\nassert solution('7') == 288\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == 36\nassert solution(\"7\") == 288\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == 36\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"36\"\nassert solution(\"7\") == \"288\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"36\"\nassert solution(\"7\") == \"288\"\n\"\"\"\n\n\"\"\"\nHere is an interesting theory in mathematics that states that if a number can be written as the sum of two odd numbers, then the number is called a semi-deficient number. The first few such numbers are {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99} and the sum of all such numbers is 96. The sum of all the integers from 1 to 100, then, is:\n\nsolution(100) == 5050\n\nWrite 5 lines of code to test the correctness of solution:\n\n1.    Your solution should have the same result as calculating the sum of all the numbers in the sequence by hand. To test this, use the fact that the sum of the numbers in a sequence is the sum of all odd numbers from 1 to the maximum number in the sequence.\n\n2.    Now, write a function solution(n) that uses a recursive function to calculate the sum of all the values in the hailstone sequence for a given positive integer $n$.\n\n3.    In the solution, you will need to use the following pattern:\n\n- If n is even, the sequence is composed of n followed by the sequence solution(n/2),\n- If n is odd, the sequence is composed of n followed by the sequence solution(3*n + 1).\n\n4.    The recursive definition of the hailstone sequence is always valid for all integers $n$ and $0 \\leqslant n \\leqslant 2^{32}-1$. However, it is not valid for all positive integers $n$. For example, the recursive definition of the hailstone sequence for $n=8$ is:\n\nsolution(8) = 8 + solution(4) = 8 + 4 + solution(2) = 8 + 4 + 2 + 1 = 17 + solution(1) = 17 + 1 = 18\n\nWe will not test the correctness of your solution on the Kattis test set, since the sum of the numbers in the sequence will not be valid for all integers from 0 to 2^{32}-1.\n\nsolution(0) = 0\n\n5.    Now, test the solution by calculating the sum of the numbers in the hailstone sequence for the numbers $5$ and $7$.\n\nsolution(5) == 36\n\nsolution(7) == 288\n\"\"\"\n\n\"\"\"\nSample Input:\n8\nSample Output:\n18\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == '36'\n\"\"\"\n\nn = int(input())",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == 36\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5') == 36\nassert solution('7') == 288\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"36\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == 36\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n\nassert solution(\"4\\n1 2 3 4\") == \"impossible\"\n\nassert solution(\"4\\n4 1 2 3\") == \"impossible\"\n\nassert solution(\"4\\n1 2 3 4\") == \"impossible\"\n\nassert solution(\"4\\n2 3 4 1\") == \"impossible\"",
        "num_ids_2": 36,
        "num_ids_4": 70
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(4)) == '2 3 4 1'\nassert solution(str(2)) == '2 3 1'\nassert solution(str(3)) == '2 3 4 1'\nassert solution(str(1)) == '1'\nassert solution(str(5)) == 'impossible'\n\nimport itertools\nimport math",
        "num_ids_2": 29,
        "num_ids_4": 56
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution([\"2\", \"3\", \"3\", \"1\"]) == \"2 3 4 1\"\n\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n\"\"\"\n\nimport sys\nfrom collections import deque\nfrom random import randint\n\nN = int(sys.stdin.readline())\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'impossible'\nassert solution('1') == '1'\nassert solution('2') == 'impossible'\nassert solution('3') == '3 1'\nassert solution('4') == '4 1 3'\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'impossible'\nassert solution('4\\n1 3 1 2') == '2 3 4 1'\nassert solution('4\\n2 1 3 1') == 'impossible'\nassert solution('4\\n1 2 1') == '1 2 3 4'\n\"\"\"\n\nimport math\nimport random\n",
        "num_ids_2": 30,
        "num_ids_4": 65
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 3 3 1') == '2 3 4 1'\nassert solution('4\\n2 3 3 1')!= '2 3 1 4'\nassert solution('4\\n2 3 3 1')!= '2 1 4 3'\n\"\"\"\n\nn = int(input())\ns = list(map(int, input().split()))\ncnt = 0\n\nfor i in range(n):\n    cnt += s[i]\n",
        "num_ids_2": 39,
        "num_ids_4": 59
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\n\n---Problem set 1---\n\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\n\"\"\"\n\nimport unittest\nimport itertools\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\n\n-------------------\n\nfrom collections import Counter\n\nn, d = map(int, stdin.readline().split())\nparts = [stdin.readline().rstrip() for _ in range(n)]\nans = d\nfor cnt in Counter(parts).values():\n    ans = min(ans, d - cnt + 1)\nprint(ans)\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == '4'\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 5\nleft_oar\nright_oar\nleft_oar\nhull\nright_oar''') == '4'\nassert solution('''3 5\nhull\nleft_oar\nright_oar\nleft_oar\nhull''') == '1'\nassert solution('''3 5\nhull\nhull\nleft_oar\nhull''') == '1'\nassert solution('''3 5\nleft_oar\nright_oar\nleft_oar\nhull\nright_oar''') == '0'\nassert solution('''3 5\nleft_oar\nright_oar\nleft_oar\nhull\nleft_oar''') == '0'\n\n
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\nassert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"paradox avoided\"\n\nprint(\"You should verify the input and print the result manually.\")\n",
        "num_ids_2": 81,
        "num_ids_4": 81
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\n\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\nleft_oar right_oar\\nhull\") == '4'\nprint(solution(\"2 5\\nleft_oar right_oar\\nhull\"))\n\n-----Explanation-----\nFor example, if the boat consists of two parts, the first is left_oar and the second is hull, then he will replace the left_oar of day 4, and the hull of day 5.\n\nThe day he replaced the last existing part from the previous season is day 4.\n\"\"\"\n\np, n = map(int, input().split())\nparts = [input() for _ in range(n)]\nfor day in range(n):\n    if parts[day] not in parts[:day]:\n        print(day+1)\n        break\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n4 5\\n4 6\\n4 7\\n3 7\\n1 2\\n1 3') == '1 2'\nassert solution('2 2\\n2 3\\n3 3\\n3 4\\n2 4\\n2 5\\n2 6') == '2 2'\nassert solution('1 1\\n1 2\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n1 7\\n1 8\\n1 9') == '1 2'\nassert solution('2 5\\n3 5\\n4 5\\n5 5\\n1 2\\n3 4\\n4 6\\n5 7\\n2 2\\n3 2\\n4 2\\n5 2\\n1 2\\n3 2\\n4 2\\n5 2\\n1 3\\n2 4\\n3 4\\n5 6\\n6 7\\n4 7\\n5 7\\n1 4\\n5 6\\n6 7\\n4 7\\n1 3\\n1 5\\n2 6\\n3 7\\n3 8\\n4 8\\n5 8\\n3 8\\n4 8\\n5 8\\n3 8\\n4 8\\n5 8\\n3 8\\n4 8\\n5 8') == '1 3'\n\"\"\"\n\nimport numpy as np\nimport unittest\n",
        "num_ids_2": 72,
        "num_ids_4": 300
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n2 1\\n3 2\\n4 2\") == \"3 2\"\nassert solution(\"1 1\\n1 1\\n1 1\\n1 1\") == \"4 4\"\nassert solution(\"1 1\\n1 1\\n1 1\\n1 1\\n2 2\") == \"4 4\"\n\"\"\"\nimport math\n",
        "num_ids_2": 48,
        "num_ids_4": 76
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\nassert solution(\"1 1\\n2 1\") == \"2 1\"\nassert solution(\"1 1\\n2 2\") == \"1 2\"\nassert solution(\"1 1\\n2 2\\n3 2\") == \"1 2\"\n\nprint(solution(\"1 1\\n2 2\\n3 2\\n4 2\"))\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\\n4 4\\n5 5\") == \"5 5\"\nassert solution(\"3 5\\n2 4\\n1 1\\n4 3\\n5 1\") == \"4 4\"\nassert solution(\"1 2\\n1 2\\n1 2\\n2 3\") == \"2 3\"\nassert solution(\"1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\") == \"10 10\"\nassert solution(\"7 7\\n7 8\\n8 9\\n9 10\") == \"9 9\"\n\"\"\"\n\na = input().split()\nb = input().split()\nc = input().split()\n\nd = input().split()\ne = input().split()\nf = input().split()",
        "num_ids_2": 56,
        "num_ids_4": 128
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5 7\\n5 7\\n7 5\") == '7 7'\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\nassert solution(\"5 5\\n5 5\\n5 7\") == \"5 5\"\n\n'''\n\nimport math",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == '7 7'\nassert solution(\"1 1\\n1 5\\n5 1\") == '1 5'\n\nassert solution(\"5 5\\n5 7\\n7 5\\n5 5\") == '5 5'\nassert solution(\"5 5\\n5 7\\n5 5\\n5 7\") == '5 5'\n\nassert solution(\"5 5\\n5 5\\n5 5\\n5 5\") == '5 5'\n",
        "num_ids_2": 40,
        "num_ids_4": 88
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5\\n5 7\\n7 5') == '7 7'\nassert solution('2 4\\n4 2\\n6 1') == '1 2'\nassert solution('1 1\\n1 2\\n2 1') == '2 1'\nassert solution('1 2\\n1 1\\n2 2') == '1 2'\nassert solution('1 3\\n1 2\\n2 3') == '3 3'\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\nassert solution(\"5 5\\n5 7\\n7 5\\n1 1\") == \"7 7\"\nassert solution(\"1 2\\n2 2\\n3 2\\n3 1\") == \"1 1\"\nassert solution(\"0 1\\n0 2\\n0 3\\n1 1\") == \"1 1\"\nassert solution(\"2 2\\n1 2\\n1 1\") == \"2 2\"\n",
        "num_ids_2": 44,
        "num_ids_4": 92
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"measurement error\"\nassert solution(\"1 61\") == 1.016666667\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 61\") == 1.016666667\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 61\") == \"measurement error\"\nassert solution(\"1 61\\n2 56\") == \"1.016666667\"\nassert solution(\"1 61\\n2 60\") == \"1.016666667\"\nassert solution(\"1 61\\n2 35\") == \"2.25\"\nassert solution(\"1 61\\n2 36\") == \"1.5\"\n",
        "num_ids_2": 33,
        "num_ids_4": 69
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n61\") == '1.016666667'\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n1 61') =='measurement error'\nassert solution('2\\n1 61') == '1.016666667'\nassert solution('2\\n59 3601') == '59.0'\nassert solution('3\\n60 3600') == '59.016666667'\n\nprint(solution(stdin.read()))\n",
        "num_ids_2": 35,
        "num_ids_4": 71
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 61\\n\") == \"measurement error\"\nassert solution(\"2\\n2 61\\n\") == 1.016666667\nassert solution(\"2\\n3 61\\n\") == 1.933333333\n\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 55
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n1 61') =='measurement error'\n\"\"\"\n\nimport math",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n1\n1 61\n''') =='measurement error'\n\nassert solution('''\n1\n59 41\n''') == '58.66666667'\n\nassert solution('''\n1\n59 38\n''') == '59.0'\n\nassert solution('''\n1\n59 36\n''') == '59.0'\n\nassert solution('''\n1\n59 36\n''') == '59.0'",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n--------\n\nSample input:\n1\n123 321\n\nSample output:\nmeasurement error\n\n--------\nSample Input:\n4\n1234 1620\n1234 3456\n1234 5680\n1234 6784\nSample Output:\n4.01\n2.68\n2.92\n2.85\n\n--------\n\nSample Input:\n4\n1234 1620\n1234 3456\n1234 5680\n1234 6784\nSample Output:\nmeasurement error\n\n--------\nSample Input:\n1\n1 7\nSample Output:\n0.016666667\n\n--------\nSample Input:\n1\n60 3600\nSample Output:\n1.0\n\n--------\nSample Input:\n3\n60 3600\n60 6784\n60 6784\nSample Output:\n2.68\n2.68\n2.69\n\n--------\nSample Input:\n2\n60 3600\n60 6784\nSample Output:\nmeasurement error\n\n--------\nSample Input:\n1\n100 200\nSample Output:\n0.02\n\n--------\nSample Input:\n4\n100 200\n100 300\n100 400\n100 500\nSample Output:\n0.01\n0.01\n0.01\n0.01\n\n--------\nSample Input:\n1\n1200 1200\nSample Output:\nmeasurement error\n\n--------\nSample Input:\n2\n1200 1200\n1200 3600\nSample Output:\n1.0\n2.0\n\n--------\nSample Input:\n2\n100 100\n100 100\nSample Output:\nmeasurement error\n\n--------\nSample Input:\n4\n100 100\n100 100\n100 100\n100 100\nSample Output:\nmeasurement error\n\n--------\nSample Input:\n1\n3600 3600\nSample Output:\n1.0\n\n--------\nSample Input:\n3\n3600 3600\n3600 3600\n3600 3600\nSample Output:\n1.0\n1.0\n1.0\n\n--------\nSample Input:\n2\n3600 3600\n3600 3600\nSample Output:\n0.01\n0.01\n\n--------\nSample Input:\n2\n60 3600\n60 6784\nSample Output:\n2.68\n2.68\n\n--------\nSample Input:\n2\n60 3600\n60 6784\nSample Output:\n0.01\n0.01\n\n--------\nSample Input:\n3\n60 3600\n60 6784\n60 6784\nSample Output:\n0.01\n0.01\n0.01\n\n--------\nSample Input:\n1\n0 0\nSample Output:\nmeasurement error\n\n--------\nSample Input:\n1\n60 3600\nSample Output:\n0.02\n\n--------\nSample Input:\n3\n60 3600\n60 6784\n60 6784\nSample Output:\n2.68\n2.68\n2.69\n\n--------\nSample Input:\n2\n60 3600\n60 6784\nSample Output:\nmeasurement error\n\n--------\nSample Input:\n1\n60 3600\nSample Output:\n0.02\n\n--------\nSample Input:\n1\n60 3600\nSample Output:\n0.02\n\n--------\nSample Input:\n2\n60 3600\n60 6784\nSample Output:\n0.02\n0.02\n\n--------\nSample Input:\n4\n60 3600\n60 6784\n60 6784\n60 6784\nSample Output:\n0.02\n0.02\n0.02\n0.02\n\n--------\nSample Input:\n3\n60 3600\n60 6784\n60 6784\nSample Output:\nmeasurement error\n\n--------\nSample Input:\n2\n60 3600\n60 6784\nSample Output:\n0.02\n0.02\n\n--------\nSample Input:\n1\n60 3600\nSample Output:\n0.02\n\n--------\nSample Input:\n3\n60 3600\n60 6784\n60 6784\nSample Output:\n2.68\n2.68\n2.69\n\n--------\nSample Input:\n4\n60 3600\n60 6784\n60 6784\n60 6784\nSample Output:\n2.68\n2.68\n2.69\n2.69\n\n--------\nSample Input:\n3\n60 3600\n60 6784\n60 6784\nSample Output:\n0.01\n0.01\n0.01\n\n--------\nSample Input:\n1\n60 3600\nSample Output:\n0.02\n\n--------\nSample Input:\n2\n60 3600\n60 6784\nSample Output:\nmeasurement error\n\n--------\nSample Input:\n1\n60 3600\nSample Output:\n0.02\n\n--------\nSample Input:\n2\n60 3600\n60 6784\nSample Output:\nmeasurement error\n\n--------\nSample Input:\n2\n60 3600\n60 6784\nSample Output:\n0.02\n0.02\n\n--------\nSample Input:\n2\n60 3600\n60 6784\nSample Output:\n0.02\n0.02\n\n--------\nSample Input:\n4\n60 3600\n60 6784\n60 6784\n60 6784\nSample Output:\nmeasurement error\n\n--------\nSample Input:\n1\n60 3600\nSample Output:\n0.02\n\n--------\nSample Input:\n2\n60 3600\n60 6784\nSample Output:\n0.02\n0.02\n\n--------\nSample Input:\n2\n60 3600\n60 6784\nSample Output:\n0.02\n0.02\n\n--------\nSample Input:\n2\n60 3600\n60 6784\nSample Output:\n0.02\n0.02\n\n--------\nSample Input:\n4\n60 3600\n60 6784\n60 6784\n60 6784\nSample Output:\n0.02\n0.02\n0.02\n0.02\n\n--------\nSample Input:\n2\n60 3600\n60 6784\nSample Output:\n0.02\n0.02\n\n--------\nSample Input:\n1\n60 3600\nSample Output:\n0.02\n\n--------\nSample Input:\n2\n60 3600\n60 6784\nSample Output:\n0.02\n0.02\n\n--------\nSample Input:\n1\n60 3600\nSample Output:\n0.02\n\n--------\nSample Input:\n3\n60 3600\n60 6784\n60 6784\nSample Output:\n0.02\n0.02\n0.02\n\n--------\nSample Input:\n1\n60 3600\nSample Output:\n0.02\n\n--------\nSample Input:\n2\n60 3600\n60 6784\nSample Output:\nmeasurement error\n\n--------\nSample Input:\n1\n60 3600\nSample Output:\n0.02\n\n--------\nSample Input:\n1\n60 3600\nSample Output",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') =='measurement error'\nassert solution('6 12\\n1 61\\n5 11\\n7 7\\n1 2\\n1 8\\n7 11\\n7 23\\n1 2\\n1 8\\n5 15\\n3 18\\n6 7\\n6 7\\n1 1\\n1 10\\n4 11\\n4 22\\n1 1\\n1 10\\n1 11\\n1 10\\n1 8\\n1 16\\n1 12\\n1 18\\n1 9\\n1 16\\n1 8\\n1 16\\n1 16\\n1 14\\n1 10\\n1 16\\n1 12\\n1 12\\n1 10\\n1 8\\n1 4\\n1 16\\n1 16\\n1 12\\n1 10\\n1 8\\n1 16\\n1 16\\n1 10\\n1 16\\n1 16\\n1 10\\n1 20\\n1 10\\n1 12\\n1 10\\n1 12\\n1 10\\n1 10\\n1 16\\n1 14\\n1 10\\n1 10\\n1 10\\n1 20\\n1 20\\n1 10\\n1 20\\n1 10\\n1 10\\n1 20\\n1 20\\n1 10\\n1 20\\n1 20\\n1 10\\n1 10\\n1 14\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 14\\n1 14\\n1 14\\n1 16\\n1 16\\n1 14\\n1 16\\n1 14\\n1 12\\n1 18\\n1 12\\n1 12\\n1 14\\n1 18\\n1 18\\n1 12\\n1 10\\n1 12\\n1 12\\n1 10\\n1 20\\n1 20\\n1 10\\n1 12\\n1 10\\n1 8\\n1 4\\n1 14\\n1 16\\n1 12\\n1 10\\n1 14\\n1 14\\n1 10\\n1 14\\n1 14\\n1 14\\n1 14\\n1 10\\n1 10\\n1 14\\n1 16\\n1 10\\n1 10\\n1 20\\n1 10\\n1 10\\n1 10\\n1 10\\n1 20\\n1 14\\n1 10\\n1 14\\n1 10\\n1 14\\n1 14\\n1 12\\n1 20\\n1 14\\n1 16\\n1 20\\n1 10\\n1 20\\n1 10\\n1 8\\n1 16\\n1 20\\n1 10\\n1 12\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 14\\n1 14\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 14\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 16\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 12\\n1 10\\n1 12\\n1 10\\n1 12\\n1 10\\n1 12\\n1 10\\n1 10\\n1 12\\n1 10\\n1 10\\n1 10\\n1 16\\n1 14\\n1 16\\n1 10\\n1 12\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 14\\n1 14\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 14\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 14\\n1 14\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 14\\n1 10\\n1 14\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 14\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 14\\n1 10\\n1 14\\n1 10\\n1 10\\n1 14\\n1 10\\n1 14\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 14\\n1 16\\n1 10\\n1 10\\n1 10\\n1 14\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 14\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 14\\n1 10\\n1 10\\n1 10\\n1 10\\n1 14\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 14\\n1 14\\n1 14\\n1 14\\n1 10\\n1 10\\n1 14\\n1 14\\n1 10\\n1 14\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 14\\n1 14\\n1 14\\n1 10\\n1 10",
        "num_ids_2": 1559,
        "num_ids_4": 1559
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"CPMCRYY\", \"ALBERTA\") == \"CALGARY\"\nassert solution(\"SQDHWCBH\", \"ALBERTA\") == \"HEYJUDSON\"\n\"\"\"\n\nimport numpy as np\nimport unittest\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('CPMCRYY') == 'CALGARY'\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"AMMKKC\") == \"AMMYYY\"\nassert solution(\"EQVRFY\") == \"EQVERF\"\nassert solution(\"ZPHWTFSS\") == \"ZPHFTFSS\"\nassert solution(\"DQKMQGZFX\") == \"DQKMQGZFX\"\n\"\"\"\n\nimport string\nfrom functools import reduce",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"VIRGINIA\") == \"VIGRIFY\"\nassert solution(\"BHYLGXKF\") == \"QUOIARED\"\nassert solution(\"GCDVXIHG\") == \"GIVENCH\"\nassert solution(\"RFWVRLK\") == \"RKFWVRL\"\n",
        "num_ids_2": 34,
        "num_ids_4": 72
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"CAMTAN\") == \"CAISAE\"\nassert solution(\"CALGOR\") == \"CAGOOR\"\nassert solution(\"CALGPRO\") == \"CAGNOPR\"\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 64
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('CPMCRYY') == 'CALGARY'\nassert solution('YPLMOU') == 'CALGARY'\nassert solution('QKPHV') == 'CALGARY'\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"CPMCRYY\", \"ALBERTA\") == \"CALGARY\"\nassert solution(\"DUQCMO\", \"ALBERTA\") == \"CALGARY\"\n\"\"\"\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('CPMCRYY') == 'CALGARY'\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"CPMCRYY\") == \"ALBERTA\"\nassert solution(\"NOGVYZP\") == \"NOONVGZP\"\nassert solution(\"BXTHGJK\") == \"BOOMSKY\"\nassert solution(\"MOUEYXLG\") == \"MONKEY\"\nassert solution(\"AQEQYTZW\") == \"ARCHE\"\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 67
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('AB') == '3'\n\nassert solution('ABBC') == '2'\nassert solution('CABAC') == '1'\nassert solution('ABC') == '1'\nassert solution('BBAC') == '2'\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"AC\") == \"1\"\nassert solution(\"BA\") == \"2\"\nassert solution(\"CAB\") == \"3\"\nassert solution(\"CB\") == \"2\"\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABC') == '3'\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('AB') == '3'\nassert solution('ABABC') == '2'\nassert solution('AABBCC') == '3'\nassert solution('BAABBB') == '1'\nassert solution('A') == '1'\n",
        "num_ids_2": 22,
        "num_ids_4": 47
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AB') == '3'\nassert solution('BA') == '1'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"CC\") == \"1\"\nassert solution(\"AA\") == \"1\"\nassert solution(\"BB\") == \"2\"\nassert solution(\"BBB\") == \"2\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AB\") == \"3\"\n\nprint(solution(\"AB\"))\n\nhttps://algospot.com/judge/problem/read/SWAP\n\n[\ub4dc\ub514\uc5b4]\n\uc22b\uc790\ub85c \ubc14\uafb8\uae30 \uadc0\ucc2e\uc740\ub370 \uc5b4\ub5a4 \uc791\uc5c5\uc744 \ud574\uc57c\ud558\ub294\uc9c0 \ub2e4 \uad6c\ud558\uace0 \uc791\uc131\ud558\ub294\ub370 \ub108\ubb34\ub108\ubb34 \ubb34\uc2dd\ud558\uac8c \ud47c\uac70\uc600\uc74c.\n\uc54c\uace0\ub9ac\uc998\uc744 \ucc38\uc870\ud558\uc5ec \uc774\ud574\ud558\uace0 \ub354 \ud480\uc5b4\ubcf4\ub824\uace0 \ud588\uc73c\ub098 \uc81c\ucd9c\ud558\ub824\uace0 \ud55c\ub2e4.\n\n[\uc544\uc774\ub514\uc5b4]\n\uc870\uac74\uc774 \uc5c6\uc5b4\uc11c \ub2e4 \uad6c\ud574\ub193\uace0 \ub9de\ucd94\ub824\uace0 \ud588\uc73c\ub098 \uc544\uc608 \uc774\ud574\uac00 \uc798 \uc548\ub418\uc11c \uadf8\ub0e5 \uc791\uc131\ud574\ubd04.\n\n[\uc2dc\uac04\ubcf5\uc7a1\ub3c4]\nO(N)\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('ABC') == ''\nassert solution('ABCAB') == ''\nassert solution('ABCC') == '3'\nassert solution('ABCCAB') == ''\n",
        "num_ids_2": 16,
        "num_ids_4": 36
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC\") == \"3\"\nassert solution(\"BAA\") == \"1\"\nassert solution(\"ABBC\") == \"2\"\nassert solution(\"CABB\") == \"2\"\nassert solution(\"CBCB\") == \"1\"\n",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABC\") == \"3\"\nassert solution(\"ABB\") == \"2\"\nassert solution(\"ACB\") == \"1\"\nassert solution(\"BAC\") == \"1\"\nassert solution(\"BBB\") == \"3\"\n\n-----Notes-----\nThis problem is easier than it looks.\n\nDon't overthink it: just write a program.\n\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n1 2 3 4\n''') == 3\nassert solution('''\n1 2 1 2\n''') == 2\nassert solution('''\n1 2 2 1\n''') == 4\nassert solution('''\n1 1 1 1\n''') == 1",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('1 2 3 4') == '3'\nassert solution('1 2 3 4') == '3'\n\nassert solution('1 2 3 4') == '3'\nassert solution('1 2 3 4') == '3'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 2 3 5\") == \"2\"\nassert solution(\"1 2 5 3\") == \"1\"\nassert solution(\"1 5 2 3\") == \"0\"\nassert solution(\"3 4 1 2\") == \"1\"",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 2 3 4\") == \"3\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n''') == '''\n'''\nassert solution('''\n1 1 1 1\n''') == '''\n1\n'''\nassert solution('''\n2 2 2 2\n''') == '''\n1\n'''\nassert solution('''\n1 1 1 1\n''') == '''\n3\n'''\nassert solution('''\n3 3 3 3\n''') == '''\n4\n'''\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('1 2 3 5') == '0'\nassert solution('3 2 1 4') == '2'\nassert solution('3 2 3 4') == '0'\nassert solution('1 4 7 4 1') == '4'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 4 2 5\") == \"5\"\nassert solution(\"4 3 2 1\") == \"4\"\n\n\"\"\"\n\nimport math\nimport sys\n\n_, *args = sys.stdin.readlines()\nA, B, C, D = [int(arg) for arg in args]\n\n\"\"\"\nA = 4\nB = 3\nC = 2\nD = 1\n\"\"\"\n\n\"\"\"\nA = 1\nB = 2\nC = 3\nD = 4\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('1 2 3 7') == '4'\nassert solution('1 2 7 5') == '4'\nassert solution('2 8 3 5') == '8'\nassert solution('6 7 8 9') == '9'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\n\"\"\"\n\na, b, c, d = input().split()\na, b, c, d = int(a), int(b), int(c), int(d)\n\nprint(max(a*b, c*d, a*c, a*d, b*c, b*d))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('103 27') == '4'\nassert solution('1 0') == '1'\nassert solution('1 1') == '0'\nassert solution('123 1') == '0'\nassert solution('123 123') == '0'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"103 27\") == 4\n\"\"\"\n\nimport sys",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('103 27') == '4'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '103 27'\n) == '4'\n\"\"\"\n\na, b = map(int, input().split())\nx = 0\nwhile a!= b:\n    if a % 2 == 0:\n        a = a / 2\n        x += 1\n    else:\n        a = a + 1\n        x += 1\nprint(x)\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('103 27') == '4'\nassert solution('10 2') == '5'\nassert solution('1 1') == '0'\nassert solution('1 10') == '2'\nassert solution('1 100') == '7'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('103 27') == '4'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('103 27') == '4'\n\nprint(solution(\"103 27\"))\n\nSolution for Two Sum\nGiven an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.\n\nExample 1:\n\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nOutput: Because nums[0] + nums[1] == 9, we return [0, 1].\nExample 2:\n\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\nExample 3:\n\nInput: nums = [3,3], target = 6\nOutput: [0,1]",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('103 27') == '4'\nassert solution('10 10') == '0'\nassert solution('4 9') == '0'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('103 27') == 4\n\n-----Notes-----\n- https://codeforces.com/contest/1342/problem/C\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('103 27') == '4'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    }
]