[
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"",
        "num_ids_2": 86,
        "num_ids_4": 172
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6') == '5\\n1 8 6'\nassert solution('3\\n1 2\\n2 3') == '2\\n1 3'\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5') == '5\\n1 8 6'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7') == '7\\n1 8 6'\n",
        "num_ids_2": 43,
        "num_ids_4": 96
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n2 3\\n3 4\\n4 5\\n4 6') == '5\\n1 8 6'",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"1 3\\n1 4\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\\n5 4\") == \"1 4\\n1 5\"\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"1 2\\n1 3\\n1 4\\n1 5\"\nassert solution(\"3\\n1 2\\n2 3\") == \"1 2\\n1 3\"\n",
        "num_ids_2": 70,
        "num_ids_4": 140
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n1 3\") == '5\\n1 3 6'\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == '5\\n1 8 6'\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n8 4\\n4 1\") == '5\\n1 8 6'\nassert solution(\"5\\n1 2\\n2 3\\n3 4\") == '1 4'\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n8 4\\n4 1\") == '5\\n1 8 6'\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n8 4\\n4 1\") == '5\\n1 8 6'\n",
        "num_ids_2": 94,
        "num_ids_4": 168
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2\\n2 3\\n3 4\") == \"5\"\nassert solution(\"3 3\\n1 2\\n2 3\") == \"1 3 2\"\n\n\"\"\"",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n2 3\\n3 4\") == '5'\nassert solution(\"5 3\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\") == '1 8 6'",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2\\n2 3\\n3 4\\n4 5') == '5\\n1 2\\n3 4'\nassert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\nassert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\nassert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\nassert solution('9\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n8 9') == '5\\n1 8 6'\n",
        "num_ids_2": 77,
        "num_ids_4": 163
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readlines()\n\nN = int(input[0])\n\nedges = []\n\nfor line in input[1:]:\n    edges.append(tuple(map(int, line.strip().split())))\n\nedges.sort()\n\nres, prev = 0, 0\n\nfor a, b in edges:\n    if a!= prev:\n        res += 1\n        prev = b\n\nprint(res, edges[-3], edges[-2], edges[-1])\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\nimport math\n\nn = int(input())\nls = list(map(int, input().split()))",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10\\n10 2 8 1 2 4 1 20 4 5') == '20 8'",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('5') == '1 2 3 5'\nassert solution('6') == '1 2 3 6'\nassert solution('7') == '1 2 3 5 7'\n",
        "num_ids_2": 18,
        "num_ids_4": 44
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 1 1 3 4 1 1 2 3\") == \"3 2\"\nassert solution(\"1 1 2 4 5 7 8\") == \"1 1 2 3 4 5\"\nassert solution(\"4 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98\") == \"4 6 8 10 12 16 20 24 28 36 42 48 54 60 72 84 96\"\n",
        "num_ids_2": 41,
        "num_ids_4": 115
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\nimport sys",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 1 3\") == \"3 1\"\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\n10 2 8 1 2 4 1 20 4 5') == '20 8'\nassert solution('10\\n1 2 4 1 2 20 4 5') == '1 2 4 20 8'\nassert solution('10\\n1 1 2 4 20 4 5') == '1 2 4 20 8'\n\"\"\"\n",
        "num_ids_2": 47,
        "num_ids_4": 70
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 3') == '24'\nassert solution('5 5 4') == '56'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'\nassert solution('5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6') == '56'\n",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n\") == \"24\"\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'\nassert solution('5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6') == '56'\n",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4\\nR R R\"\nassert solution(\"4\\n1 2 3 4\") == \"4\\nR R R\"\nassert solution(\"2\\n1 2\") == \"1\\nR\"\nassert solution(\"2\\n1 2\") == \"1\\nR\"\nassert solution(\"1\\n1\") == \"1\\nL\"\n",
        "num_ids_2": 42,
        "num_ids_4": 76
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nLRLRRR\"\nassert solution(\"3\\n2 2 2\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRR\"\n\"\"\"\n",
        "num_ids_2": 45,
        "num_ids_4": 83
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 4 3 2\\n\") == \"4\\nLRRR\"\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin_str) == output_str",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4\\nLRRR'\nassert solution('7\\n1 3 5 6 5 4 2') == '6\\nLRLRRR'\nassert solution('3\\n2 2 2') == '1\\nR'\nassert solution('4\\n1 2 4 3') == '4\\nLLRR'\n\n\"\"\"\n\nfrom math import inf\nfrom collections import deque\nfrom typing import List, Set, Deque, Tuple\n\n__all__ = ['solution']\n",
        "num_ids_2": 47,
        "num_ids_4": 85
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n7\n1 3 5 6 5 4 2\n\"\"\") == \"\"\"\n6\nLRRR\"\"\", solution(\"\"\"\n7\n1 3 5 6 5 4 2\n\"\"\") == \"\"\"\n6\nLRRR\"\"\"\n\"\"\"",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4\\nLRRR'\n\"\"\"\n\nimport itertools",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == '4\\nLRRR'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\"\nassert solution(\"3\\n2 2 2\") == \"1\"\nassert solution(\"4\\n1 2 4 3\") == \"4\"",
        "num_ids_2": 36,
        "num_ids_4": 67
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nLRLRRR\"\nassert solution(\"3\\n2 2 2\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRR\"\n\n\"\"\"\n",
        "num_ids_2": 47,
        "num_ids_4": 85
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str([2, 8])) == 3\nassert solution(str([1, 4, 7, 7])) == 3\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n8\") == \"3\"\nassert solution(\"1\\n4\\n4\\n7\\n4\\n1\") == \"3\"\nassert solution(\"1\\n4\\n7\\n7\") == \"3\"\nassert solution(\"1\\n4\\n7\\n7\\n5\") == \"-1\"\nassert solution(\"1\\n4\\n7\\n7\\n5\\n8\") == \"3\"\n",
        "num_ids_2": 38,
        "num_ids_4": 79
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 4 7 4 1\") == \"3\"\nassert solution(\"5 2 5 2 5\") == \"3\"\nassert solution(\"5 2 5 2 5\") == \"3\"\nassert solution(\"5 2 5 2 5\") == \"3\"\nassert solution(\"4 1 3 7\") == \"-1\"\n",
        "num_ids_2": 29,
        "num_ids_4": 57
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_0) == test_0_result\nassert solution(test_1) == test_1_result\nassert solution(test_2) == test_2_result\nassert solution(test_3) == test_3_result\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 2 3 4\") == \"3\"\n\"\"\"\n\n\"\"\"\nn = int(input())\na = list(map(int, input().split()))\n\nmax_a = max(a)\nmin_a = min(a)",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4\\n5 6 7 8') == '3'\nassert solution('1 2\\n5 6') == '-1'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\ns = sum(a)\na.sort()\n\nfor i in range(n):\n    if 2 * a[i] < s:\n        d = a[i]\n        break\nelse:\n    d = -1\nprint(d)\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8\") == 3\nassert solution(\"1 4 4 7 4 1\") == 3\nassert solution(\"2 2 5 2 5\") == 3\nassert solution(\"1 3 3 7\") == -1\nassert solution(\"2 8\") == 3\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\\n\") == \"3\"\nassert solution(\"5\\n2 2 5 2 5\\n\") == \"3\"\nassert solution(\"4\\n1 3 3 7\\n\") == \"-1\"\nassert solution(\"2\\n2 8\\n\") == \"3\"\n",
        "num_ids_2": 39,
        "num_ids_4": 73
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"3\"\nassert solution(\"5\\n1 2 3 7 4\") == \"3\"\nassert solution(\"5\\n1 2 3 7 5\") == \"3\"\nassert solution(\"5\\n1 2 3 7 6\") == \"-1\"\nassert solution(\"5\\n1 2 3 7 8\") == \"3\"\n",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 4 4 7 4 1\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\nassert solution(\"1 3 3 7\") == \"-1\"\nassert solution(\"2 8\") == \"3\"\n\nprint(\"All tests passed.\")",
        "num_ids_2": 29,
        "num_ids_4": 53
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\nassert solution(\"0 0 499999 1000000\") == \"YES\"\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\") == \"YES\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\n\"\"\"\n\nimport math",
        "num_ids_2": 50,
        "num_ids_4": 107
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"0 0 4 6\n0 0 7 4\"\"\"\n) == \"YES\"\n\nassert solution(\n\"\"\"0 0 1000000 1000000\n0 0 499999 1000000\n500000 0 1000000 1000000\n\"\"\"\n) == \"YES\"\n\nassert solution(\n\"\"\"2 2 4 4\n1 1 3 5\n3 1 5 5\"\"\"\n) == \"NO\"\n\nassert solution(\n\"\"\"0 0 10 10\n0 0 10 10\"\"\"\n) == \"YES\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 2 2\") == \"NO\"\nassert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"2 2 3 4\") == \"YES\"\nassert solution(\"1 1 3 5\") == \"NO\"\nassert solution(\"3 1 5 5\") == \"YES\"\n\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\nassert solution(\"0 0 499999 1000000\") == \"YES\"\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\nassert solution(\"0 0 499999 1000000\") == \"YES\"\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\n\n\"\"\"\n",
        "num_ids_2": 50,
        "num_ids_4": 82
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"1 1 3 5\") == \"YES\"\nassert solution(\"3 1 5 5\") == \"YES\"\n\n\nassert solution(\"0 0 4 6\") == \"YES\"\nassert solution(\"0 0 7 4\") == \"YES\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 4 4\") == 'NO'\nassert solution(\"3 1 7 6\") == 'YES'\nassert solution(\"0 0 4 6\") == 'YES'\nassert solution(\"5 2 10 5\") == 'YES'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1098\") == 20\n\"\"\"\n\nimport sys",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10098\") == 20\nassert solution(\"10\") == 19",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\nassert solution(\"77\") == 18\n\"\"\"\n\nimport sys",
        "num_ids_2": 17,
        "num_ids_4": 25
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1098') == 20\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1098\") == \"20\"\nassert solution(\"10\") == \"19\"\nassert solution(\"1\") == \"0\"\n",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1098\") == \"20\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\n\"\"\"\n\nimport sys\nfrom typing import List\n\nsys.setrecursionlimit(10 ** 6)\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\n\"\"\"\n\nfrom collections import deque\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n5 0 0 2 4\\n\") == \"5 3 1 2 4\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5\\n2 1 0 0 0\") == \"2 1 4 5 3\"\n",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '5\\n5 0 0 2 4'\n) == '5 3 1 2 4'\n\nassert solution(\n    '7\\n7 0 0 1 4 0 6'\n) == '7 3 2 1 4 5 6'\n\nassert solution(\n    '7\\n7 4 0 3 0 5 1'\n) == '7 4 2 3 6 5 1'\n\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\\n\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\n\"\"\"",
        "num_ids_2": 49,
        "num_ids_4": 75
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n5 0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\\n\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nls = list(map(int, sys.stdin.readline().split()))\n\nls2 = [0] * n\n\nfor i, v in enumerate(ls):\n    if v > 0:\n        ls2[v - 1] = i + 1",
        "num_ids_2": 50,
        "num_ids_4": 77
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n5 0 0 2 4\\n\") == '5 3 1 2 4'\nassert solution(\"7\\n7 0 0 1 4 0 6\\n\") == '7 3 2 1 4 5 6'\nassert solution(\"7\\n7 4 0 3 0 5 1\\n\") == '7 4 2 3 6 5 1'\n\"\"\"",
        "num_ids_2": 50,
        "num_ids_4": 77
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n5 0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\\n\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5\\n2 1 0 0 0\\n\") == \"2 1 4 5 3\"\nassert solution(\"7\\n4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n7\n7 0 0 1 4 0 6\n''') == '7 3 2 1 4 5 6'\n\nassert solution('''\n7\n4 0 0 3 0 5 1\n''') == '4 2 3 6 5 1'\n\nassert solution('''\n5\n2 1 0 0 0\n''') == '2 1 4 5 3'\n\nassert solution('''\n5\n4 0 0 2 4\n''') == '5 3 1 2 4'\n\nprint(\"All tests passed.\")\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\n\n\"\"\"\n\nn = int(input())\n\nmatrix = [int(i) for i in input().split(' ')]\n\ns = set()\nfor i in matrix:\n    if i == 0:\n        s.add(i)",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == '2 1 4 5 3'\n\"\"\"\n\nfrom collections import Counter\n\nN = int(input())\nf = list(map(int, input().split()))",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution([\"4 2\", \"1 2 1 2 3\"]) == 'NO'\nassert solution([\"5 2\", \"3 2 1 2 3\"]) == 'YES'\nassert solution([\"5 2\", \"2 1 1 2 1\"]) == 'NO'\nassert solution([\"5 2\", \"1 1 1 2 1\"]) == 'YES'\n\"\"\"\n\nimport sys\nimport math\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n2 1 1 1 2\") == \"NO\"\n\nprint(\"All cases passed\")\n",
        "num_ids_2": 48,
        "num_ids_4": 84
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'NO'\nassert solution('a') == 'NO'\nassert solution('ab') == 'NO'\nassert solution('ab\\n') == 'NO'\nassert solution('3\\n1 1 2') == 'NO'\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n2 1 1 2 1\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n\"\"\"\n",
        "num_ids_2": 50,
        "num_ids_4": 68
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\nassert solution(\"4 2\\n1 1 1 1\") == \"NO\"\n",
        "num_ids_2": 48,
        "num_ids_4": 83
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"YES\\n2 1 1 2 1\"\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 66
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n    4 2\n    1 2 2 3\n    \"\"\"\n    ) == 'YES\\n1 1 2 2'\nassert solution(\n    \"\"\"\n    5 2\n    3 2 1 2 3\n    \"\"\"\n    ) == 'YES\\n2 1 1 2 1'\nassert solution(\n    \"\"\"\n    5 2\n    2 1 1 2 1\n    \"\"\"\n    ) == 'NO'\nassert solution(\n    \"\"\"\n    5 3\n    2 1 1 2 1\n    \"\"\"\n    ) == 'NO'\nassert solution(\n    \"\"\"\n    5 2\n    2 1 1 1 2\n    \"\"\"\n    ) == 'NO'\n\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 2 2 3\\n') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 3\\n') == 'NO'\nassert solution('5 2\\n1 2 1 2 1\\n') == 'NO'\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 45,
        "num_ids_4": 65
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n",
        "num_ids_2": 48,
        "num_ids_4": 66
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\nassert solution(\"11 5 10000\") == \"10000\"\nassert solution(\"100 100 100 100\") == \"0\"\nassert solution(\"1000 100 100 1\") == \"1\"\n",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\n\n-----\n1. n = 11\n2. x = 5\n3. y = 2\n\n-----\n1. n = 11\n2. x = 5\n3. y = 1\n\n-----\n11\n100101\n10011\n\n\n11\n100101\n10011\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\nassert solution(\"11 5 0\") == \"0\"\nassert solution(\"10 10 9\") == \"2\"\nassert solution(\"10 10 10\") == \"0\"\n\"\"\"\nfrom collections import deque\nfrom sys import stdin\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11 5 2\\n11010100101') == '1'\nassert solution('11 5 1\\n11010100101') == '3'\nassert solution('11 5 1\\n11010101010') == '0'\nassert solution('11 5 1\\n11010101110') == '1'\nassert solution('11 5 1\\n11011101110') == '1'\n\nprint(\"Check test.py for more examples.\")\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == '1'\nassert solution(\"11 5 1\\n11010100101\") == '3'\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n\n\"\"\"\nimport sys\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 5 2\") == \"1\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n\nassert solution(\"11 5 4\") == \"2\"\nassert solution(\"11 6 5\") == \"1\"\n\nassert solution(\"11 7 4\") == \"1\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1') == 'YES'\nassert solution('3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1') == 'YES'\nassert solution('3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1') == 'NO'\nassert solution('3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1') == 'NO'\nassert solution('3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1') == 'NO'\n",
        "num_ids_2": 84,
        "num_ids_4": 168
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\n\"\"\"",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1\\n3\") == \"YES\"\nassert solution(\"3\\n1 2 2\\n3\") == \"YES\"\nassert solution(\"1\\n2\") == \"NO\"\nassert solution(\"1\\n2\\n2\\n3\") == \"NO\"\n\"\"\"\n\nfrom typing import List, Union, Callable\n",
        "num_ids_2": 33,
        "num_ids_4": 65
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"NO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"NO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"YES\"\n\n\"\"\"\n",
        "num_ids_2": 120,
        "num_ids_4": 240
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\n\"\"\"",
        "num_ids_2": 50,
        "num_ids_4": 75
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 4\") == 'YES'\nassert solution(\"4\\n1 2 3 5\") == 'NO'\n\nassert solution(\"4\\n1 2 1 4\") == 'YES'\nassert solution(\"4\\n1 2 1 3\") == 'NO'\n\nassert solution(\"5\\n1 2 2 1\") == 'YES'\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 2 2 1\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 2 2 2 1\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 2 2 2 1\") == \"NO\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 1 2\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 1 2\") == \"NO\"\n",
        "num_ids_2": 51,
        "num_ids_4": 101
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 1\") == \"YES\"\nassert solution(\"5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 1 2\") == \"NO\"\nassert solution(\"4\\n1 2 2 1\") == \"YES\"\nassert solution(\"10\\n1 1 2 2 3 3 4 4 5 5\") == \"NO\"\n\n----Problem----\n\nIn a forest, each rabbit has some color. Some subset of rabbits (possibly all of them) tell you how many other rabbits have the same color as them. Those answers are placed in an array.\n\nReturn the minimum number of rabbits that could be in the forest.\n\nThe number of rabbits in the forest doesn't exceed $10^9$.\n\nExamples\n\nInput\n4\n1 2 3 4\nOutput\n4\n\nInput\n2\n1 2\n3 4\nOutput\n2\n\nInput\n3\n1 2 1\n3 4 1\nOutput\n2\n\nInput\n10\n1 2 3 4 5 6 7 8 9 10\nOutput\n1\n\n\"\"\"\n\n\nfrom collections import defaultdict",
        "num_ids_2": 32,
        "num_ids_4": 63
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\n",
        "num_ids_2": 114,
        "num_ids_4": 114
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5') == 'YES'\nassert solution('3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5') == 'NO'\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(5000)\nimport re\nimport itertools",
        "num_ids_2": 114,
        "num_ids_4": 114
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1337') == '1553'\n\nassert solution('11111') == '99999'\nassert solution('9 8 7 6 5 4 3 2 1') == '99999'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 43
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11111\") == \"99999\"\nassert solution(\"1337\") == \"1557\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\n1337\n1 2 5 4 6 6 3 1 9\") == \"1557\"\n\"\"\"\nimport sys",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1337\") == \"1557\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"333\") == \"33333\"\n",
        "num_ids_2": 24,
        "num_ids_4": 35
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1337') == '1553'\n\nassert solution('11111') == '99999'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1337') == '1553'\n\"\"\"\nimport sys\n\nsys.stdin = open('input.txt')\ninput = sys.stdin.readline\n\nn = int(input())\na = input()\nf = list(map(int, input().split()))",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1337') == '1553'\nassert solution('11111') == '99999'\nassert solution('33') == '33'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 34
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"111111\") == \"99999\"\nassert solution(\"1234\") == \"1234\"\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"333\") == \"3\"\nassert solution(\"11110\") == \"999\"\nassert solution(\"11101\") == \"999\"\n",
        "num_ids_2": 24,
        "num_ids_4": 45
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"33\") == \"33\"\nprint(\"Passed\")\n",
        "num_ids_2": 24,
        "num_ids_4": 34
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46') == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48'",
        "num_ids_2": 110,
        "num_ids_4": 110
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n3') == '1\\n1 1 3'\nassert solution('2\\n1 2 3') == '1\\n2 1 3'\nassert solution('3\\n123 321 456') == '1\\n2 1 3'\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 62
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2 3\") == \"1 1 3\"\nassert solution(\"123 321 456\") == \"1 2 3\"\nassert solution(\"5 10 15\") == \"1 1 2\"\nassert solution(\"15 18 21\") == \"1 1 1\"\n",
        "num_ids_2": 21,
        "num_ids_4": 50
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3\\n12 34 56\") == \"1\\n1 2 3\\n2\\n4 8 16\"\nassert solution(\"5\\n1 2 3\\n12 34 56\\n5 10 15\\n15 18 21\\n100 100 101\") == \"1\\n1 2 3\\n102\\n4\\n4 8 16\\n114 228 456\"\n",
        "num_ids_2": 90,
        "num_ids_4": 90
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46') == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48'\nprint('Success')\n\n\"\"\"\n\nimport sys\n\nDEBUG = False",
        "num_ids_2": 110,
        "num_ids_4": 110
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3\\n123 321 456') == '1\\n1 1 3'\nassert solution('5\\n1 2 3\\n123 321 456') == '4\\n1 2 3'\nassert solution('8\\n1 2 3\\n123 321 456') == '4\\n1 2 3'\nassert solution('8\\n1 2 3\\n123 321 456') == '4\\n1 2 3'\n\"\"\"\n\nimport sys",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"1\"\nassert solution(\"123 321 456\") == \"1\"\nassert solution(\"5 10 15\") == \"2\"\nassert solution(\"15 18 21\") == \"3\"\nassert solution(\"100 100 101\") == \"1\"\n",
        "num_ids_2": 25,
        "num_ids_4": 49
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 2') == '1\\n1 2 3'\nassert solution('3 5 8') == '4\\n5 3 8'\nassert solution('1 1 1') == '0\\n1 1 1'\nassert solution('1 2 3') == '0\\n1 2 3'\nassert solution('2 1 3') == '2\\n1 2 3'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == ''\nassert solution('1 2 3') == '1 1 3'\nassert solution('1 2 3\\n1 2 3') == '1 1 3'\nassert solution('1 2 3\\n1 2 3\\n') == '1 1 3'\n",
        "num_ids_2": 18,
        "num_ids_4": 51
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\\n\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\"\n\"\"\"\n",
        "num_ids_2": 115,
        "num_ids_4": 115
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 3 7\") == '2'\nassert solution(\"2\\n1 100000\") == '0'",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3 3 7\") == 2\nassert solution(\"2\\n1 100000\") == 0\nassert solution(\"4\\n1 3 3 7\") == 2\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 41
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n\n\n\"\"\"\n\n\"\"\"\nsolution 1\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 2\n1 3 1\n1 5 1''') == '1 2 3 0 3'\nassert solution('''3 2\n1 3 1\n1 2 1''') == '-1'\nassert solution('''10 3\n4 7 2\n1 10 3\n8 9 1''') == '2 2 2 1 1 0 4 3 4 4'\nassert solution('''5 2\n1 3 1\n1 5 1''') == '1 2 3 0 3'\nassert solution('''3 2\n1 3 1\n1 2 1''') == '-1'\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == result",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == '1 2 3 0 3'\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == '-1'\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == '2 2 2 1 1 0 4 3 4 4'",
        "num_ids_2": 47,
        "num_ids_4": 82
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"0\"\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"-1\"\n",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open(\"examples/15.txt\").read()) == \"3 2 2 1 1 0 4 3 4 4\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 2\\n1 10 3\\n8 9 1\") == '2 2 2 1 1 0 4 3 4 4'\nassert solution(\"5 3\\n1 3 1\\n1 2 1\") == '-1'\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == '2 2 2 1 1 0 4 3 4 4'\n",
        "num_ids_2": 53,
        "num_ids_4": 88
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 2\n1 3 1\n1 2 1''') == '1 2 3 0 3'\n\nassert solution('''5 2\n1 3 1\n1 5 1''') == '-1'\n\nassert solution('''10 3\n4 7 2\n1 10 3\n8 9 1''') == '2 2 2 1 1 0 4 3 4 4'\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2\\n1 3 1\\n1 5 1') == '1 2 3 0 3'\nassert solution('3 2\\n1 3 1\\n1 2 1') == '-1'\nassert solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'\n",
        "num_ids_2": 47,
        "num_ids_4": 82
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"no solution\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\nassert solution('120 51840') == '7'\nassert solution('42 42') == '0'\n",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 24,
        "num_ids_4": 35
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n",
        "num_ids_2": 24,
        "num_ids_4": 35
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n",
        "num_ids_2": 24,
        "num_ids_4": 35
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution([\"120\", \"51840\"]) == \"7\"\nassert solution([\"42\", \"42\"]) == \"0\"\nassert solution([\"48\", \"72\"]) == \"-1\"\n\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 46
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n",
        "num_ids_2": 24,
        "num_ids_4": 35
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n\nprint(solution(input()))\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aba') == 'abababa'\nassert solution('cat') == 'catcat'\nassert solution('aaaaaaaaaaa') == 'aaaaaaaaaaa'\n\n-----Implementation-----\n\nTime Complexity: O(n ^ 2)\nSpace Complexity: O(n)\n\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 37
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aba\", 3) == \"ababababa\"\nassert solution(\"cat\", 2) == \"catcat\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"abababa\"\nassert solution(\"cat\") == \"catcat\"\nassert solution(\"abc\") == \"abcabcabc\"\nassert solution(\"abac\") == \"abacabac\"\nassert solution(\"abacd\") == \"abacdabacd\"\n",
        "num_ids_2": 23,
        "num_ids_4": 49
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 3\nababa''') == 'ababababa'\nassert solution('''5 2\ncat''') == 'catcat'\nassert solution('''5 3\nababa''') == 'ababababa'\nassert solution('''3 2\ncat''') == 'catcat'\nassert solution('''3 1\ncat''') == 'cat'",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == \"ababababa\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aba') == 'ababababa'\n\nassert solution('cat') == 'catcat'\n\nprint(solution(stdin))",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aba') == 'ababababa'\nassert solution('cat') == 'catcat'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aba') == 'abababa'\n\nassert solution('cat') == 'catcat'\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 2\ncat''') == 'catcat'\nassert solution('''5 4\nababa''') == 'ababababa'\nassert solution('''1 1\na''') == 'a'\nassert solution('''4 4\naaaa\n''') == 'aaaa'\nassert solution('''4 3\naaba\n''') == 'aabaaba'\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\ns = stdin.readline().rstrip()\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aba') == 'ababababa'\nassert solution('cat') == 'catcat'\n\n\"\"\"\n\nimport sys\nfrom collections import Counter, deque\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5 1 2 2\") == \"3\"\nassert solution(\"8 3 5 2\") == \"2 1 4\"\nassert solution(\"2 1 2 4 3\") == \"0\"\n",
        "num_ids_2": 29,
        "num_ids_4": 43
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 1 2 2\\n\") == \"3\\n4 1 5\"\nassert solution(\"4\\n8 3 5 2\\n\") == \"2\\n1 4\"\nassert solution(\"5\\n2 1 2 2\\n\") == \"0\"\nassert solution(\"4\\n8 3 5 2\\n\") == \"2\\n1 4\"",
        "num_ids_2": 45,
        "num_ids_4": 85
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 5 1 2 2\") == \"3\\n4 1 5\"\nassert solution(\"4\\n8 3 5 2\") == \"2\\n1 4\"\nassert solution(\"5\\n2 1 2 4 3\") == \"0\"\n",
        "num_ids_2": 42,
        "num_ids_4": 59
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5 1 2 2\") == \"3\"\nassert solution(\"8 3 5 2\") == \"2\"\nassert solution(\"8 3 5 2\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 40
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 1 2 2 4 3') == '3\\n4 1 5'\nassert solution('4\\n8 3 5 2') == '2\\n1 4'\nassert solution('5\\n2 1 2 4 3') == '0'\nassert solution('4\\n3 4 5 6') == '0'\nassert solution('8\\n1 2 3 4 5 6 7 8') == '1\\n7 8'\n",
        "num_ids_2": 43,
        "num_ids_4": 76
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 1 2 2\\n\") == \"3\\n1 4\"\nassert solution(\"4\\n8 3 5 2\\n\") == \"2\\n1 4\"\nassert solution(\"5\\n2 1 2 4 3\\n\") == \"0\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 44,
        "num_ids_4": 63
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n2 5 1 2 2') == '3\\n4 1 5'\nassert solution('5\\n2 1 2 4 3') == '0'\nassert solution('4\\n8 3 5 2') == '2\\n1 4'\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 39,
        "num_ids_4": 59
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 1 2 2\") == \"3\\n1 4\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 5 1 2 2') == '3\\n4 1 5'\nassert solution('4\\n8 3 5 2') == '2\\n1 4'\nassert solution('5\\n2 1 2 4 3') == '0'\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 59
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5 1 2 2\") == \"3\"\nassert solution(\"2 1 2 4 3\") == \"0\"\nassert solution(\"8 3 5 2\") == \"2\"\nassert solution(\"2 1 2 4 3\") == \"0\"\n\n\"\"\"\n\nfrom typing import List, Dict\n\nclass Solution:\n    def sum_dict(self, dict: Dict[int, int]):\n        s = 0\n        for _, num in dict.items():\n            s += num\n        return s\n\n    def solve(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n <= 2:\n            return 0\n        dict = {}\n        for i in range(n):\n            dict[nums[i]] = dict.get(nums[i], 0) + 1\n\n        res = {}\n        for key, value in dict.items():\n            sub = dict.copy()\n            sub[key] = 0\n            sum = self.sum_dict(sub)\n            if sum == value:\n                res[key] = value\n        if res:\n            return len(res)\n        else:\n            return 0\n",
        "num_ids_2": 28,
        "num_ids_4": 55
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\nasdf\") == '4'\nassert solution(\"5 6\\naaaaa\") == '15'\nassert solution(\"5 7\\naaaaa\") == '-1'\nassert solution(\"10 100\\najihiushda\") == '233'\n\n\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 61
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 asdf') == '4'\nassert solution('5 6 aaaa') == '15'\nassert solution('5 7 aaaa') == '-1'\nassert solution('10 100 ajihiushda') == '233'\n",
        "num_ids_2": 26,
        "num_ids_4": 57
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ajihiushda\") == 233\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"asdf\") == \"4\"\nassert solution(\"aaaaa\") == \"15\"\nassert solution(\"ajihiushda\") == \"233\"\n\n\"\"\"\n\nn, k = [int(n) for n in stdin.readline().split()]\ns = stdin.readline().strip()\ncost = {n: i for i, n in enumerate(s)}\nsubstring = sorted(cost.keys())\n\nmin_cost = 0\nfor substring_length in range(1, len(substring) + 1):\n    substring_start = 0\n    substring_cost = 0\n    while substring_start + substring_length <= len(s):\n        substring_cost += cost[substring[substring_start]]\n        substring_start += 1\n    if substring_cost <= k:\n        min_cost = min(min_cost, substring_cost)\n    else:\n        break\n\nprint(min_cost if min_cost!= 0 else -1)\n",
        "num_ids_2": 22,
        "num_ids_4": 36
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abaca\") == \"abaca\"\nassert solution(\"abbc\") == \"abbc\"\nassert solution(\"abca\") == \"abca\"\nassert solution(\"aaabbc\") == \"aaabbc\"\nassert solution(\"aaaaa\") == \"aaaaa\"\n",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 5\nasdf''') == '4'\nassert solution('''5 6\naaaaa''') == '15'\nassert solution('''5 7\naaaaa''') == '-1'\nassert solution('''10 100\najihiushda''') == '233'\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5', 'asdf') == 4\nassert solution('5 6', 'aaaaa') == 15\nassert solution('5 7', 'aaaaa') == -1\nassert solution('10 100', 'ajihiushda') == 233\nassert solution('8 2', 'aaaaaaaaaaa') == 8\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 56
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\nsdf\") == \"4\"\nassert solution(\"5 6\\naaaaa\") == \"15\"\nassert solution(\"5 7\\naaaaa\") == \"-1\"\nassert solution(\"10 100\\najihiushda\") == \"233\"\n",
        "num_ids_2": 28,
        "num_ids_4": 60
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 5\nasdf''') == '4'\nassert solution('''5 6\naaaaa''') == '15'\nassert solution('''5 7\naaaaa''') == '-1'\nassert solution('''10 100\najihiushda''') == '233'\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"asdf\") == \"4\"\nassert solution(\"aaaaa\") == \"15\"\nassert solution(\"ajihiushda\") == \"233\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 36
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\"\"\"",
        "num_ids_2": 84,
        "num_ids_4": 112
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\n\"\"\"",
        "num_ids_2": 84,
        "num_ids_4": 112
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\"\n\n\"\"\"\n\nimport collections\n\n\"\"\"\nunion-find\n\n\"\"\"\n",
        "num_ids_2": 84,
        "num_ids_4": 84
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n2 3\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n",
        "num_ids_2": 92,
        "num_ids_4": 120
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == 'YES\\n1 2\\n1 4\\n4 1'\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == 'NO'\nassert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == 'YES\\n1 2\\n1 3\\n1 4'\nassert solution(\"5 7 2\\n1 2\\n1 3\\n1 4\\n1 5\\n2 5\\n3 5\\n4 5\\n2 4\\n3 4\\n4 3\\n5 4\") == 'NO'\n",
        "num_ids_2": 84,
        "num_ids_4": 156
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution('4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'YES\\n1 2\\n1 3\\n4 1\\n2 3\\n3 4'\n",
        "num_ids_2": 96,
        "num_ids_4": 96
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4''') == 'YES\\n2 1\\n2 3'\nassert solution('''4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4''') == 'YES\\n1 2\\n1 3\\n4 1\\n4 3'\nassert solution('''4 4 3\n1 2\n1 4\n2 3\n3 4''') == 'NO'\n\n\n-----Test cases-----\n\n=>>=\n\n\n-----Solution-----\n\n'''",
        "num_ids_2": 18,
        "num_ids_4": 27
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n3 1\\n4 3\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\nassert solution(\"4 4 4\\n1 2\\n1 3\\n2 3\\n3 4\") == \"NO\"\nassert solution(\"4 4 4\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"NO\"\n",
        "num_ids_2": 88,
        "num_ids_4": 144
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\\n3 2\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\n\"\"\"\n",
        "num_ids_2": 88,
        "num_ids_4": 116
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n2 1\\n2 3\\n3 4\\n\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n1 2\\n1 3\\n4 1\\n\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n1 2\\n1 3\\n4 1\\n\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\\n\") == \"NO\\n\"\nassert solution(\"4 4 2\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"NO\\n\"\n\n\"\"\"\n",
        "num_ids_2": 96,
        "num_ids_4": 176
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nimport datetime",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10:00 11:00') == '10:30'\nassert solution('11:10 11:12') == '11:11'\nassert solution('01:02 03:02') == '02:02'",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:00') == '11:00'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\n\n---\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\n\"\"\"\n\nx1, x2 = input().split(':')\ny1, y2 = input().split(':')\nx1, x2, y1, y2 = int(x1), int(x2), int(y1), int(y2)",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10:00 11:00\") == \"10:30\"\nassert solution(\"11:10 11:12\") == \"11:11\"\nassert solution(\"01:02 03:02\") == \"02:02\"\n",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10:00 11:00\") == \"10:30\"\nassert solution(\"11:10 11:12\") == \"11:11\"\nassert solution(\"01:02 03:02\") == \"02:02\"\n\n\"\"\"\n\nimport sys\nimport re",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10:00\\n11:00') == '10:30'\nassert solution('11:10\\n11:12') == '11:11'\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\n\nprint(solution(stdin))\n\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:00') == '11:00'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\n\"\"\"\nimport time",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\n\nprint(solution('2'))\nprint(solution('4'))\nprint(solution('27'))\nprint(solution('42'))",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2') == 1\nassert solution('3') == 2\n\"\"\"\n\na = int(input())\n\nprint(1 if a & 1 else 2 if a & 2 else 3 if a & 4 else 4 if a & 8 else 5 if a & 16 else 6 if a & 32 else 7 if a & 64 else 8)\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(2) == 1\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == 1\nassert solution('2') == 2\nassert solution('3') == 3\nassert solution('4') == 4\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(2) == 1\nprint(solution(2))\nassert solution(4) == 2\nprint(solution(4))\nassert solution(27) == 5\nprint(solution(27))\nassert solution(42) == 6\nprint(solution(42))\nprint('The local tests are done. Something else?')",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\n\nprint('All tests passed.')",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '2'\nassert solution('27') == '5'\nassert solution('42') == '6'\n\"\"\"\n\nfrom math import ceil, log2",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"27\") == \"5\"\nassert solution(\"42\") == \"6\"\n\nprint(\"all tests passed.\")",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\n\"\"\"\n\nfrom math import log2\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n2 2') == '0'\nassert solution('2 1\\n1 2') == '2'\nassert solution('2 2\\n2 1') == '1'\n\nassert solution('') == ''\n",
        "num_ids_2": 23,
        "num_ids_4": 53
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\\n\"\n",
        "num_ids_2": 60,
        "num_ids_4": 106
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\\n\"",
        "num_ids_2": 60,
        "num_ids_4": 106
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\"\n",
        "num_ids_2": 56,
        "num_ids_4": 96
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\\n\"\n\"\"\"",
        "num_ids_2": 60,
        "num_ids_4": 104
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 3\\n2 6\\n0 4\\n3 3') == '1'\nassert solution('5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4') == '2'\nassert solution('3\\n4 5\\n1 2\\n9 20') == '0'\nassert solution('2\\n3 10\\n1 5\\n') == '7'\n",
        "num_ids_2": 56,
        "num_ids_4": 98
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\"\n",
        "num_ids_2": 56,
        "num_ids_4": 96
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\"\n",
        "num_ids_2": 56,
        "num_ids_4": 98
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\\n\"",
        "num_ids_2": 60,
        "num_ids_4": 104
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'",
        "num_ids_2": 32,
        "num_ids_4": 46
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"2\\n10 5\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"2\\n10 10\\n10 10\") == \"YES\"\n",
        "num_ids_2": 29,
        "num_ids_4": 57
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n2 1 1 2 5''') == 'YES'\nassert solution('''3\n4 5 3''') == 'NO'\nassert solution('''2\n10 10''') == 'YES'",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 32,
        "num_ids_4": 46
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\n\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 46
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"YES\"\nassert solution(\"1 1 1 1 1 1\") == \"YES\"\nassert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"2 1 1 2 5\") == \"NO\"\n",
        "num_ids_2": 24,
        "num_ids_4": 52
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 1 2 5') == 'YES'\nassert solution('3 4 5') == 'NO'\nassert solution('4 5 3') == 'YES'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 38
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n",
        "num_ids_2": 32,
        "num_ids_4": 46
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n5\n2 1 1 2 5\n''') == 'YES'\n\nassert solution('''\n3\n4 5 3\n''') == 'NO'\n\nassert solution('''\n2\n10 10\n''') == 'YES'\n",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == 233\nassert solution(\"a\") == 0\nassert solution(\"\") == 0\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('asdf') == 4\n\"\"\"\n\nimport collections\nimport sys",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 asdf\") == \"4\"\nassert solution(\"5 6 aaaa\") == \"15\"\nassert solution(\"5 7 aaaa\") == \"-1\"\n\n\"\"\"\nimport itertools\n\nfrom collections import Counter\nfrom functools import reduce\nfrom itertools import combinations\nfrom typing import List, Dict\n\nfrom utils import timer\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abaca\") == \"abaca\"\nassert solution(\"abac\") == \"abac\"\nassert solution(\"aabaca\") == \"abaca\"\nassert solution(\"aabac\") == \"abac\"\nassert solution(\"aabaca\") == \"abaca\"\n",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ajihiushda\") == 233\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('asdf') == 4\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\nasdf\") == \"4\"\nassert solution(\"5 6\\naaaaa\") == \"15\"\nassert solution(\"5 7\\naaaaa\") == \"-1\"\nassert solution(\"10 100\\najihiushda\") == \"233\"\n\"\"\"\nimport sys\n",
        "num_ids_2": 28,
        "num_ids_4": 60
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('asdf') == 4\nassert solution('aaaaa') == 15\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\nasdf') == '4'\nassert solution('5 6\\naaaaa') == '15'\nassert solution('5 7\\naaaaa') == '-1'\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"asdf\") == \"4\"\nassert solution(\"aaaaa\") == \"15\"\nassert solution(\"ajihiushda\") == \"233\"\n\n\"\"\"\nfrom itertools import combinations",
        "num_ids_2": 22,
        "num_ids_4": 36
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\") == '4'\nassert solution(\"3 2 2\") == '7'\nassert solution(\"1 100 1\") == '3'\nassert solution(\"30 20 10\") == '39'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\n\"\"\"\n\na, b, c = [int(i) for i in input().split()]\n\nn_sunday = c // a\nn_monday = b // a\nn_tuesday = c // b\nn_wednesday = (c - n_tuesday * b) // a\nn_thursday = (c - n_wednesday * a) // b\nn_friday = (c - n_thursday * b) // a\nn_saturday = (c - n_friday * a) // b\n\nn_total = n_sunday + n_monday + n_tuesday + n_wednesday + n_thursday + n_friday + n_saturday\n\nprint(n_total)\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2 1') == 4\nassert solution('1 100 1') == 3\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 100 1') == '4'\nassert solution('30 20 10') == '39'\nassert solution('100 1 1') == '4'\nassert solution('30 20 10') == '39'\n\n\"\"\"\n\na, b, c = map(int, input().split())\nl = [a, b, c]\n\nday = {'mon': {'fish': a}, 'thu': {'fish': b,'stake': c}, 'wed': {'stake': c}, 'fri': {'fish': b,'stake': c},'sat': {'fish': a,'stake': c},'sun': {'fish': a}}\n\nday_keys = day.keys()\nday_values = day.values()\nday_tuple = tuple(day_values)\n\nl.sort(reverse=True)",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\nprint('Passed')\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 1\\n') == '4'\nassert solution('3 2 2\\n') == '7'\nassert solution('1 100 1\\n') == '3'\n\n\"\"\"\nimport math\nimport itertools\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2 1 1\n''') == \"4\"\nassert solution('''\n3 2 2\n''') == \"7\"\nassert solution('''\n1 100 1\n''') == \"3\"\nassert solution('''\n30 20 10\n''') == \"39\"",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\n\na, b, c = map(int, stdin.split())\n\nd = (a - b - c)\nm = min(a, b, c)\n\ns = max(0, d // m)\n\nprint(s)",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n\") == \"YES\"\n",
        "num_ids_2": 137,
        "num_ids_4": 137
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(s) == \"YES\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n3 4\n1 2\n2 3\n1 2\n1 2\n1 2\n\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n3 4\n1 2\n2 3\n2 3\n1 2\n\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n3 4\n1 2\n2 3\n1 2\n\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n3 4\n1 2\n2 3\n1 2\n\n\"\"\") == \"YES\"\n",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\") == \"YES\"\nassert solution(\"3 4\\n5 5\\n5 7\") == \"NO\"\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\") == \"YES\"\n\n\"\"\"\n",
        "num_ids_2": 95,
        "num_ids_4": 95
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\") == \"YES\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\") == \"NO\"\n\"\"\"\n\nimport sys\n\nnum = int(sys.stdin.readline())\n\nfor _ in range(num):\n    n, m = map(int, sys.stdin.readline().split())\n    \n    tiles = []\n    for _ in range(n):\n        a, b = map(int, sys.stdin.readline().split())\n        tiles.append((a, b))\n    tiles.sort()\n\n    ans = 'NO'\n    cur_tile = tiles[0]\n    used = {}\n\n    for t in tiles[1:]:\n        if t[0] in used:\n            if used[t[0]] == t[1]:\n                ans = 'YES'\n                break\n            else:\n                ans = 'NO'\n                break\n        else:\n            used[cur_tile[0]] = cur_tile[1]\n            cur_tile = t\n\n    print(ans)\n",
        "num_ids_2": 182,
        "num_ids_4": 182
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n1 1\\n1 1') == 'YES'\nassert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2') == 'YES'\nassert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2') == 'YES'\nassert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2') == 'NO'\nassert solution('1 1\\n1 2\\n2 2') == 'NO'\n",
        "num_ids_2": 74,
        "num_ids_4": 184
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n') == 'YES'\n",
        "num_ids_2": 113,
        "num_ids_4": 113
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\") == \"YES\"\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10000000)",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2') == 'YES'\nassert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2') == 'NO'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 122,
        "num_ids_4": 122
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\") == \"0\"\nassert solution(\"1 2 3 7 8 9 10\") == \"1\"\nassert solution(\"1 2 3 4 7 8 9 10\") == \"1\"\n\"\"\"\n\nfrom typing import List, Dict\nimport sys\n\nDEBUG = False\n",
        "num_ids_2": 30,
        "num_ids_4": 47
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == '0'\nassert solution(\"5\") == '1'\nassert solution(\"6\") == '1'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n\n\n\n-----",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"3\") == \"0\"\n\"\"\"\nimport sys\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('1\\n2\\n') == '0'\nassert solution('1\\n2\\n3\\n') == '0'\nassert solution('1\\n2\\n3\\n4\\n') == '1'\n",
        "num_ids_2": 20,
        "num_ids_4": 53
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('4') == 0\nassert solution('1 2 3 4') == 1\nassert solution('1 2 3 4 5') == 1\nassert solution('1 2 3 4 5 6') == 1\n",
        "num_ids_2": 16,
        "num_ids_4": 39
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"3\") == \"0\"\n\"\"\"\n\nfrom typing import List, Tuple, Set\nimport sys\n\nN: int = int(sys.stdin.readline())\n\nA: List[int] = [int(sys.stdin.readline()) for _ in range(N)]\n\nA_sum: int = sum(A)\nB_sum: int = 0\nfor i in range(N - 1):\n    if i % 2 == 0:\n        B_sum += A[i]\n    else:\n        A_sum -= A[i]\n\nprint(abs(A_sum - B_sum))\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '1'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"(()))()\") == 5\nassert solution(\"(()()))()\") == 4\nassert solution(\"((((()))()()))\") == 5\nassert solution(\"((((()))()()))\") == 5\nassert solution(\"((((()))()())\") == 5\n",
        "num_ids_2": 23,
        "num_ids_4": 51
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\") == 0\nassert solution(\"()\") == 1\nassert solution(\"(((()))())\") == 4\nassert solution(\"((()))()\") == 5\nassert solution(\"(((((((((((((((((((((((((((((((((((())))))()))((((()))(\") == 2047 \n",
        "num_ids_2": 15,
        "num_ids_4": 38
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"()))()\") == \"5\"\nassert solution(\"(()))()\") == \"4\"\nassert solution
        "num_ids_2": 25,
        "num_ids_4": 1510
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"()))()\") == \"5\"\nassert solution(\"(()))()\") == \"4\"\nassert solution(\"(((()))())\") == \"0\"\nassert solution(\"((()))()()\") == \"4\"\nassert solution(\"(()(()))()\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 53
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"(()))()\") == 5\nassert solution(\"(((())))\") == 4\nassert solution(\"(((((((((())))))()()((((()(((((((((((((((((((((((())))((())))((())((())))((((())))((((()()()(()(((((((((((((((((((((((((())())((()(()((()(()((()())((())(()((()()((()())))((((((((((((((((()())))((())(()()(()((()())((()()((()()())((()())((())(((((()))(()()((()(()()((()()(((()((((()(((((())(()())(()(()()((()(((((((()(((()())((())))(()()()()(()((((()()()(((())))((())))(()()()((()((((((()()((((((()())((()())((())))(()(()()(()(((((()((()(((((()())))((()())((())))((()))(())()((()()(((((((((()()())((()())((((((((((((((((((((((((((((((()(((((()((()(((())((()(()()(())()((()()(()(()((()())(((())(((())))(()(((()))(()((()()()(()(((((((((((((((())((()()))(()(((((((((((((((((((()())((((((((((((((()))(()(()(((())((()(())()(())()(()(((((((((((((((((((((())))(()()(()(()((()()(((((((((((((((((((()(((()((()(((((((((((((((((()()))(())()(()(()(()(()((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((",
        "num_ids_2": 22,
        "num_ids_4": 1510
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()()))\") == 4\nassert solution(\"(()()\") == 4\nassert solution(\"(()()\") == 0\nassert solution(\"(((()))\") == 0\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(((()))())\") == 4\nassert solution(\"(((((((((((((((((((((((((((((((((((((())))))))))))))))))))))))))))))))))))))))\") == 0",
        "num_ids_2": 22,
        "num_ids_4": 59
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()(()))()\") == 4\nassert solution(\"((((((((((((((((((()))))))))))))))))\")) == 0\n",
        "num_ids_2": 23,
        "num_ids_4": 44
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"(((())))\") == \"4\"\nassert solution(\"(()())\") == \"2\"\nassert solution(\"()((()))\") == \"0\"\nassert solution(\"(()((()(()))(())))(()((()()((())((())))(())))(((((()()(((()((()(()()(((((())))))))))))))))((()(()(())))((()))())\") == \"8208\"\n\n\"\"\"\n\n\nfrom collections import Counter",
        "num_ids_2": 25,
        "num_ids_4": 106
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution
        "num_ids_2": 1510,
        "num_ids_4": 1510
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n\n\n\"\"\"\n\nfrom tools import timing",
        "num_ids_2": 21,
        "num_ids_4": 34
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('705') == '1'\nassert solution('1241367') == '-1'\nassert solution('5071') == '4'\n\"\"\"\nimport math\nimport sys\n",
        "num_ids_2": 23,
        "num_ids_4": 34
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5071') == '4'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5071\") == 4\nassert solution(\"705\") == 1\n\n-------",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1234567\") == -1\nassert solution(\"1234\") == 1\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5071') == '4'\n\nassert solution('705') == '1'\n\nassert solution('1241367') == '-1'\n",
        "num_ids_2": 21,
        "num_ids_4": 34
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"705\") == 1\nassert solution(\"5071\") == 4\nassert solution(\"1241367\") == -1\n\"\"\"\nimport unittest\n",
        "num_ids_2": 17,
        "num_ids_4": 28
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'a'\nassert solution('aab') == 'a'\nassert solution('abac') == 'a'\n",
        "num_ids_2": 18,
        "num_ids_4": 39
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacbecfd\") == \"2\", \"String abacbecfd is not sorted in 2 swaps\"\nassert solution(\"abcde\") == \"1\", \"String abcde is not sorted in 1 swap\"\nassert solution(\"aaabbcbb\") == \"2\", \"String aaabbcbb is not sorted in 2 swaps\"\nassert solution(\"aabbcbb\") == \"2\", \"String aabbcbb is not sorted in 2 swaps\"\nassert solution(\"abcd\") == \"1\", \"String abcd is not sorted in 1 swap\"\n",
        "num_ids_2": 49,
        "num_ids_4": 102
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abcdedc') == '1 1 1 1 1 2 3', 'First'\nassert solution('aaabbcbb') == '1 2 1 2 1 2 1 2 1', 'Second'\nassert solution('abcdefgh') == '1 2 1 2 1 2 1 1', 'Third'",
        "num_ids_2": 45,
        "num_ids_4": 67
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abacbecfd') == '2'\nassert solution('aaabbcbb') == '2'\nassert solution('abcdedc') == '3'\nassert solution('abcde') == '1'",
        "num_ids_2": 26,
        "num_ids_4": 49
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcd\") == \"1 1 2 1 1\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abcdedc') == '1 2 1 2 1 2 1 1'\nassert solution('aaabbcbb') == '1 2 1 2 1 2 1 1'\nassert solution('abcde') == '1 1 1 1 1 2 3'\nassert solution('abcdef') == '1 1 1 1 1 2 2 3'\nassert solution('abcdefg') == '1 1 1 1 1 2 2 2 3'\n",
        "num_ids_2": 39,
        "num_ids_4": 74
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abacbecfd') == '2'\nassert solution('aaabbcbb') == '2'\nassert solution('abcdedc') == '3'\nassert solution('abcde') == '1'\nassert solution('abc') == '1'\n\n-----Notes-----\n\n\n-----Source-----\n\nThis problem was asked by Twitter.\n\n'''",
        "num_ids_2": 26,
        "num_ids_4": 49
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abacbecfd') == '2'\nassert solution('aaabbcbb') == '2'\nassert solution('abcdedc') == '3'\nassert solution('abcde') == '1'\nassert solution('a') == '1'\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 26,
        "num_ids_4": 49
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'abc'\nassert solution('aabbc') == 'aabbc'\nassert solution('abacdedc') == 'aabbc'\nassert solution('abacbecfd') == 'aabbc'",
        "num_ids_2": 18,
        "num_ids_4": 47
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abacbecfd') == '2'\nassert solution('aaabbcbb') == '2'\nassert solution('abcde') == '1'\nassert solution('abcdedc') == '3'\nassert solution('abbcde') == '1'\n",
        "num_ids_2": 26,
        "num_ids_4": 49
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'NO'\nassert solution('a') == 'YES'\nassert solution('ab') == 'NO'\nassert solution('abacaba') == 'YES'\nassert solution('qwerty') == 'YES'\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('a\\naba\\nabacaba\\nba\\naba\\nabab') == 'YES\\na\\nba\\naba\\naba\\nabacaba\\n'\nassert solution('qwerty\\nqwerty\\nqwerty') == 'YES\\nqwerty\\nqwerty\\nqwerty'\n",
        "num_ids_2": 83,
        "num_ids_4": 83
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\naba\\nabacaba\\nba\\naba\\nabab\") == \"YES\\naba\\nba\\naba\\nabacaba\"\nassert solution(\"5\\na\\nabacaba\\nba\\naba\\nabab\") == \"NO\"\n\"\"\"\n\n\"\"\"\nn = int(input())\n\nlst = []\nfor _ in range(n):\n    lst.append(input())\n\ni = 0\nwhile i < n:\n    s = set()\n    for j in range(n):\n        s.add(lst[j][i:i+len(lst[j])])\n    if len(s)!= n:\n        print(\"NO\")\n        break\n    else:\n        print(\"YES\")\n        i += len(lst[0])\n        print(lst[0])\n        for j in range(1, n):\n            print(lst[j])\nelse:\n    print(\"YES\")\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 69,
        "num_ids_4": 69
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('a\\naba\\nabacaba\\nba\\naba\\nabab\\n') == 'YES\\na\\nba\\naba\\naba\\nabacaba\\n'\nassert solution('a\\nabacaba\\nba\\naba\\nabab\\n') == 'NO\\n'\n\"\"\"\n\n\nfrom collections import defaultdict\n\nimport sys",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"qwerty\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\"\nassert solution(\"aba\") == \"YES\\na\\nba\\naba\"\nassert solution(\"abab\") == \"NO\"\nassert solution(\"qwerty\") == \"YES\\nq\\nqw\\nqwe\\nqwer\\nqwerty\"\n\"\"\"",
        "num_ids_2": 46,
        "num_ids_4": 89
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abba\") == \"NO\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"abab\") == \"NO\"\nassert solution(\"abcd\") == \"NO\"\nassert solution(\"abcde\") == \"NO\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aba') == 'YES'\nassert solution('abacaba') == 'YES'\nassert solution('abacab') == 'NO'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 34
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"for\") == \"NO\"\nassert solution(\"for\") == \"YES\"\nassert solution(\"for\") == \"NO\"\nassert solution(\"qwerty\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"for\") == \"NO\"\nassert solution(\"aba\") == \"YES\"\nassert solution(\"a\") == \"NO\"\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n",
        "num_ids_2": 39,
        "num_ids_4": 57
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2\") == \"0\"\nassert solution(\"6 3\") == \"1\"\nassert solution(\"6 4\") == \"3\"\nassert solution(\"6 5\") == \"5\"\nassert solution(\"6 6\") == \"6\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 100\\n12 34 55 43 21') == '5'\nassert solution('5 2\\n3 1 2 1 3') == '0'\nassert solution('5 2\\n3 1 2 1') == '5'",
        "num_ids_2": 36,
        "num_ids_4": 53
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\n\n\"\"\"\n\nimport sys\n\ninp = sys.stdin.read()\nn, k = map(int, inp.split())\narr = list(map(int, inp.split()))\n\nl, r = 0, len(arr) - 1\n\nwhile True:\n    if arr[l] >= k or arr[r] >= k:\n        break\n    else:\n        l += 1\n        r -= 1\nprint(len(arr) - max(l, r))\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 4') == '5'\nassert solution('5 2') == '0'\nassert solution('5 100') == '5'\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 4\\n4 2 3 1 5 1 6 4') == '5'\nassert solution('5 2\\n3 1 2 1 3') == '0'\nassert solution('5 100\\n12 34 55 43 21') == '5'\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 57
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 4\") == \"5\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"5 100\") == \"5\"\nassert solution(\"12 34 55 43 21\") == \"5\"\n\n\n-----Source-----\nhttps://www.codewars.com/kata/56ef6ac3ad9ed923780000a7/python\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 47
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\">5<\") == 0\nassert solution(\">2<\") == 1\n\"\"\"\n\nimport math\n\na, k = list(map(int, input().split()))\narr = list(map(int, input().split()))\narr.sort()\n\ncount = 0\n\nfor i in range(len(arr)):\n    if arr[i] < k:\n        count += 1\n    else:\n        break\n\nprint(count)",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected_result\n\n\"\"\"\n\nfrom typing import List, Tuple",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"12\"\n\"\"\"\n\nimport sys\nimport math\n\nA, B = list(map(int, sys.stdin.readline().split()))\n\nl = math.ceil(A/2) + math.ceil(B/2)\n\nprint(l*2)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2\\n3 4') == '10'\nassert solution('3 9\\n6 6') == '14'\nassert solution('7 9\\n8 7') == '14'\nassert solution('6 9\\n8 6') == '12'\nassert solution('7 9\\n8 7') == '14'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(4,4) == 12\nassert solution(3,9) == 14\nassert solution(9,3) == 14\nassert solution(3,6) == 12\nassert solution(506, 2708) == 3218",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 9\") == \"14\"\nassert solution(\"4 4\") == \"12\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 9\") == \"14\"\nassert solution(\"4 4\") == \"12\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4') == '12'\n\nassert solution('3 9') == '14'\n\nassert solution('9 3') == '14'\n\nassert solution('3 6') == '12'\n\nassert solution('506 2708') == '3218'",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcd\") == \"abcd\"\nassert solution(\"abcdee\") == \"eeabcd\"\nassert solution(\"abceff\") == \"ffaebcd\"\nassert solution(\"abcd12\") == \"12abcd\"\nassert solution(\"dcba\") == \"dcba\"\n",
        "num_ids_2": 26,
        "num_ids_4": 55
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abacbecfd') == \"YES\\n001010101\"\nassert solution('aaabbcbb') == \"YES\\n01011011\"\nassert solution('abcdedc') == \"NO\\n\"\nassert solution('abcde') == \"YES\\n00000\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom queue import PriorityQueue\nimport sys",
        "num_ids_2": 38,
        "num_ids_4": 66
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abacbecfd') == 'NO'\nassert solution('aaabbcbb') == 'YES'\nassert solution('abcdedc') == 'NO'\nassert solution('abcde') == 'YES'\n\"\"\"\n\nimport collections\nimport itertools\nfrom typing import Dict, List\n\nfrom icontract import require, ensure, DBC\n\n\nclass Mapping(DBC):\n    \"\"\"Represent a mapping.\"\"\"\n\n    @require(lambda mapping: all(key in mapping for key in ['0', '1']))\n    @require(lambda mapping: all(value in ['0', '1'] for value in mapping.values()))\n    def __init__(self, mapping: Dict[str, str]) -> None:\n        \"\"\"Initialize with a mapping.\"\"\"\n        self.mapping = mapping\n\n    def __repr__(self) -> str:\n        \"\"\"Represent the mapping as a string.\"\"\"\n        return f'Mapping({self.mapping!r})'\n\n\nclass Colors(DBC):\n    \"\"\"Represent the color of a character.\"\"\"\n\n    @require(lambda mapping: all(key in mapping for key in ['0', '1']))\n    @require(lambda mapping: all(value in ['0', '1'] for value in mapping.values()))\n    def __init__(self, mapping: Dict[str, str]) -> None:\n        \"\"\"Initialize the colors.\"\"\"\n        self.coloring = mapping\n\n    def __repr__(self) -> str:\n        \"\"\"Represent the colors as a string.\"\"\"\n        return f'Colors({self.coloring!r})'\n\n\nclass Fmt(DBC):\n    \"\"\"Represent a fmt string.\"\"\"\n\n    @require(lambda fmt: all(char in '0' for char in fmt))\n    @require(lambda fmt: all(fmt[i] < fmt[i + 1] for i in range(len(fmt) - 1)))\n    def __init__(self, fmt: str) -> None:\n        \"\"\"Initialize with a fmt string.\"\"\"\n        self.fmt = fmt\n\n    def __repr__(self) -> str:\n        \"\"\"Represent the fmt string as a string.\"\"\"\n        return f'Fmt({self.fmt!r})'\n\n\nclass Fmts(DBC):\n    \"\"\"Represent all valid fmt strings.\"\"\"\n\n    def __init__(self, fmts: List[Fmt]) -> None:\n        \"\"\"Initialize with a list of all valid fmt strings.\"\"\"\n        self.fmts = fmts\n\n    def __repr__(self) -> str:\n        \"\"\"Represent the fmt strings as a string.\"\"\"\n        return f'Fmts({self.fmts!r})'\n\n\nclass Swaps(DBC):\n    \"\"\"Represent swaps made on a mapping.\"\"\"\n\n    @require(lambda mapping: all(key in mapping for key in ['0', '1']))\n    @require(lambda mapping: all(value in ['0', '1'] for value in mapping.values()))\n    def __init__(self, mapping: Dict[str, str], swaps: List[Tuple[str, str]]) -> None:\n        \"\"\"Initialize with a mapping and swaps.\"\"\"\n        self.mapping = mapping\n        self.swaps = swaps\n\n    def __repr__(self) -> str:\n        \"\"\"Represent the swaps as a string.\"\"\"\n        return f'Swaps({self.mapping!r}, {self.swaps!r})'\n\n\nclass Mappings(DBC):\n    \"\"\"Represent all mappings from a string to a color.\"\"\"\n\n    @require(lambda string: all(char in string for char in 'ab'))\n    @require(lambda string: len(string) == len(set(string)))\n    def __init__(self, string: str) -> None:\n        \"\"\"Initialize with a string.\"\"\"\n        self.string = string\n\n    def __repr__(self) -> str:\n        \"\"\"Represent the mapping as a string.\"\"\"\n        return f'Mappings({self.string!r})'\n\n\nclass Solution:\n    \"\"\"Solve the problem.\"\"\"\n\n    @require(lambda string: len(string) > 1)\n    @require(lambda string: all(char in string for char in 'ab'))\n    @require(lambda string: len(string) == len(set(string)))\n    def solve(self, string: str) -> bool:\n        \"\"\"Solve.\"\"\"\n        return self.__help(string)\n\n    @require(lambda mappings: all(mappings[i]!= mappings[j] for i, j in itertools.combinations(mappings, 2)))\n    def __help(self, mappings: Mappings) -> bool:\n        \"\"\"Evaluate the string.\"\"\"\n\n        coloring = dict()  # type: Dict[str, str]\n        for char in mappings.string:\n            coloring[char] = '1' if char in 'ab' else '0'\n\n        mapping = Mapping(coloring)\n\n        swaps = list()  # type: List[Tuple[str, str]]\n        for old, new in itertools.combinations(coloring, 2):\n            if coloring[old]!= coloring[new]:\n                swaps.append((old, new))\n                coloring[old] = coloring[new]\n                coloring[new] = '1' if coloring[new] == '0' else '0'\n\n        mapping = Mapping(coloring)\n        return Swaps(mapping, swaps).can_be_sorted()\n",
        "num_ids_2": 26,
        "num_ids_4": 49
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abacbecfd') == \"YES\\n001010101\"\nassert solution('aaabbcbb') == \"YES\\n01011011\"\nassert solution('abcdedc') == \"NO\"\nassert solution('abcde') == \"YES\\n00000\"\nassert solution('aabbbcccd') == \"NO\"\n",
        "num_ids_2": 38,
        "num_ids_4": 64
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abacbecfd') == 'YES\\n001010101'\nassert solution('aaabbcbb') == 'YES\\n01011011'\nassert solution('abcdedc') == 'NO'\nassert solution('abcde') == 'YES\\n00000'",
        "num_ids_2": 38,
        "num_ids_4": 64
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abacbecfd') == 'YES\\n001010101'\nassert solution('aaabbcbb') == 'YES\\n01011011'\nassert solution('abcde') == 'YES\\n00000'\nassert solution('abc') == 'NO'\n\"\"\"\n\nn = int(input())\ns = input()",
        "num_ids_2": 38,
        "num_ids_4": 62
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcd\") == \"NO\"\nassert solution(\"abcde\") == \"YES\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"YES\"\nassert solution(\"abcd\") == \"NO\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"YES\"",
        "num_ids_2": 22,
        "num_ids_4": 56
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcdedc\") == \"YES\"\nassert solution(\"abacbecfd\") == \"YES\"\nassert solution(\"aaabbcbb\") == \"YES\"\nassert solution(\"aabbcd\") == \"NO\"\nassert solution(\"abcd\") == \"NO\"\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcd\") == \"YES\\n101\"\nassert solution(\"abce\") == \"YES\\n100\"\nassert solution(\"abcd\") == \"NO\"\nassert solution(\"abcde\") == \"YES\\n100\"\n\n\"\"\"\n\ns = input()\nn = len(s)\ns = list(s)",
        "num_ids_2": 28,
        "num_ids_4": 53
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"25\"\nprint(\"Test 1: OK\")\n\n\"\"\"\nimport math",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n') == '25'\n\"\"\"\n\nimport sys\n\ndata = list(map(int, sys.stdin.readlines()))\nprice, tax = data[0] - 1, data[1]",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2') == 25\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"2 2\"\n) == 25\n\"\"\"\n\nimport math\n\nA, B = input().split(' ')\nA, B = int(A), int(B)\n\nmin_c, max_c = math.floor(A * 0.08), math.floor(A * 0.1)\nprice = (A - min_c) * B",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"25\"\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"2 5\") == \"25\"\nassert solution(\"5 10\") == \"25\"\nassert solution(\"10 20\") == \"25\"\nassert solution(\"5 10\") == \"25\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"100 100\") == \"-1\"\nassert solution(\"100 101\") == \"102\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2') == '25'\nassert solution('2 1') == '-1'\nassert solution('1 1') == '-1'\nassert solution('1 10') == '-1'\nassert solution('10 10') == '-1'\n\n\"\"\"\n\na, b = map(int, stdin.split())\n",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n2') == '25'\nassert solution('2 1\\n2') == '-1'\n\"\"\"\nfrom math import floor",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == 25\nassert solution(\"4 3\") == -1\nassert solution(\"2 2\") == 25\nassert solution(\"4 3\") == -1\nassert solution(\"1 1\") == -1\n",
        "num_ids_2": 19,
        "num_ids_4": 38
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"26 6\\n\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"8 3\\n\") == \"NO\\n\"\nassert solution(\"1 1\\n\") == \"YES\\n1\"\nassert solution(\"9 4\\n\") == \"NO\\n\"\n\nprint(solution(stdin))\n",
        "num_ids_2": 36,
        "num_ids_4": 67
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'8 3'\n) == 'YES\\n1 2 4 5 6 8'\nassert solution(\n'1 1'\n) == 'YES\\n1'\nassert solution(\n'1 4'\n) == 'NO'\nassert solution(\n'2 2'\n) == 'NO'\nassert solution(\n'8 10'\n) == 'NO'\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"26 6\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"8 3\") == \"NO\\n\"\nassert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"9 4\") == \"NO\\n\"\n",
        "num_ids_2": 32,
        "num_ids_4": 59
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"26 6\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"8 3\") == \"NO\"\nassert solution(\"1 1\") == \"YES\\n1\"\n",
        "num_ids_2": 30,
        "num_ids_4": 44
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('26 6') == 'YES'\nassert solution('8 3') == 'NO'\nassert solution('1 1') == 'YES'\nassert solution('9 4') == 'NO'\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 2 3\") == \"NO\"\nassert solution(\"1 2 4\") == \"YES\\n1 2 4\"\nassert solution(\"1 2 4 6\") == \"NO\"\n",
        "num_ids_2": 25,
        "num_ids_4": 54
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('26 6') == 'YES\\n1 2 4 5 6 8'\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"26 6\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"8 3\") == \"NO\\n\"\nassert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"9 4\") == \"NO\\n\"\nassert solution(\"8 2\") == \"YES\\n1 2 4 6\"\n",
        "num_ids_2": 32,
        "num_ids_4": 59
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2\\n3 4\\n5 6\\n7 8') == 'YES\\n1 2 4 5 6\\n7 8'\nassert solution('4 2\\n1 3\\n2 4\\n2 3\\n1 2') == 'NO'\nassert solution('5 2\\n2 4\\n3 5\\n4 5\\n5 6') == 'NO'\nassert solution('8 3\\n1 2\\n4 6\\n5 7\\n3 4\\n2 5\\n1 3\\n6 7\\n7 8') == 'YES\\n1 3\\n5 7\\n6 7\\n7 8'\n\nimport json\nimport pytest\nimport random\n",
        "num_ids_2": 61,
        "num_ids_4": 147
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3\\n\") == \"YES\\n1 2 4\"\nassert solution(\"5 2\\n\") == \"YES\\n1 3\"\nassert solution(\"1 1\\n\") == \"YES\\n1\"\nassert solution(\"10 9\\n\") == \"NO\"\nassert solution(\"3 4\\n\") == \"NO\"\n",
        "num_ids_2": 35,
        "num_ids_4": 64
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == 3\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\\n\") == '3'\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\\n\") == '5'\n\"\"\"\n\n\"\"\"\n2\n1 2\n1 -1\n\n\"\"\"\n\n\"\"\"\n2\n0 1\n1 2\n\n\"\"\"",
        "num_ids_2": 63,
        "num_ids_4": 63
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n300 -300\\n1 299\\n1 123') == '3'\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == '5'\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1 2\\n') == '2'\nassert solution('1 2 3\\n') == '2'\nassert solution('1 2 3\\n4 5 6') == '3'\n",
        "num_ids_2": 20,
        "num_ids_4": 47
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4') == '2'\nassert solution('2 3\\n1 2\\n3 4') == '1'\nassert solution('2 3\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10') == '3'\nassert solution('2 3\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n11 12\\n13 14\\n15 16') == '4'",
        "num_ids_2": 23,
        "num_ids_4": 73
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 3\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == 5",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == '3'\n\"\"\"\n\nimport sys",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == '3'\n\"\"\"\n\nimport collections",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 6\\n10 -2\\n8 -1') == '3'\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\"",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution('1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'NO'\n",
        "num_ids_2": 77,
        "num_ids_4": 133
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('4\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('1\\n10') == 'YES\\n10'\nassert solution('2\\n1 1') == 'NO'\n",
        "num_ids_2": 83,
        "num_ids_4": 130
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\n",
        "num_ids_2": 83,
        "num_ids_4": 99
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(1000000)\n\nN = int(input())\nnumbers = [int(s) for s in input().split()]\n\nvalid = False",
        "num_ids_2": 83,
        "num_ids_4": 127
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"1\\n1\") == \"YES\\n1 1\"\n\n\"\"\"",
        "num_ids_2": 83,
        "num_ids_4": 100
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'NO'\n\nassert solution('4\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3\\n1 3 1\\n1 3 1'\n\nassert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\\n') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\\n'\n\n\"\"\"\n",
        "num_ids_2": 51,
        "num_ids_4": 107
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\n\n\"\"\"\n\nimport collections",
        "num_ids_2": 83,
        "num_ids_4": 111
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == \"YES\"\nassert solution(4) == \"YES\"\nassert solution(2) == \"NO\"\n\n\"\"\"\n\n\nfrom typing import List\n\nfrom utils.decorators import timer\n\n\n@timer\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == 'YES\\n1 3 1\\n3 1 3'\nassert solution(\"4\\n1 1 1 1 1 3 3 3 3\") == 'YES\\n1 3 1\\n3 1 3'\nassert solution(\"1\\n10\") == 'YES\\n10'\nassert solution(\"1\\n1\") == 'YES\\n1'\n",
        "num_ids_2": 83,
        "num_ids_4": 130
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\n\"\"\"",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 10\\n10 0\\n10 -10\\n30 0') == 'YES'\nassert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 'YES'\nassert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2') == 'YES'\nassert solution('3 5\\n4 -5\\n4 -2\\n1 3\\n') == 'YES'\n\"\"\"\n\nn, r = map(int, input().split())",
        "num_ids_2": 49,
        "num_ids_4": 105
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n3 4\n4 6\n10 -2\n8 -1\n\"\"\"\n) == 'YES'\n\nassert solution(\n\"\"\"\n3 5\n4 -5\n4 -2\n1 3\n\"\"\"\n) == 'YES'\n\nassert solution(\n\"\"\"\n4 4\n5 2\n5 -3\n2 1\n4 -2\n\"\"\"\n) == 'YES'\n\nassert solution(\n\"\"\"\n3 10\n10 0\n10 -10\n30 0\n\"\"\"\n) == 'NO'\n\nassert solution(\n\"\"\"\n4 4\n5 2\n5 -3\n2 1\n4 -2\n\"\"\"\n) == 'NO'",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\nassert solution(\"4 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n",
        "num_ids_2": 52,
        "num_ids_4": 109
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"",
        "num_ids_2": 52,
        "num_ids_4": 78
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"\n",
        "num_ids_2": 52,
        "num_ids_4": 76
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n",
        "num_ids_2": 52,
        "num_ids_4": 78
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n",
        "num_ids_2": 52,
        "num_ids_4": 107
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n') == 'YES'\nassert solution('3 10\\n10 0\\n10 -10\\n30 0\\n') == 'NO'\nassert solution('3 4\\n4 6\\n10 -2\\n8 -1\\n') == 'YES'\n\"\"\"",
        "num_ids_2": 57,
        "num_ids_4": 84
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"NO\"",
        "num_ids_2": 52,
        "num_ids_4": 105
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n",
        "num_ids_2": 53,
        "num_ids_4": 80
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 2\\n1 2 1\\n\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\\n\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\\n\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n\"\"\"\n\nfrom typing import List, Tuple, Union\nimport sys\n",
        "num_ids_2": 57,
        "num_ids_4": 86
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3 2\\n1 2 1\\n\") == \"YES\\n0 1 0 2 2 0 3\\n\"\nassert solution(\"10 1 11\\n1\\n\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1\\n\"\nassert solution(\"10 1 5\\n2\\n\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0\\n\"\n",
        "num_ids_2": 62,
        "num_ids_4": 94
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"4 3 2\\n2\\n1 2 1\") == \"YES\\n0 0 0 0 1 1 0 0 0\"\nassert solution(\"7 3 2\\n1 2 1\\n2\\n2\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0\\n0 0 0 0 1 1 0 0 0\"\nassert solution(\"7 3 2\\n1 2 1\\n2\\n1 2\\n2\\n2\\n2\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0\\n0 0 0 0 1 1 0 0 0\\n0 0 0 0 1 1 0 0 0\\n0 0 0 0 1 1 0 0 0\\n0 0 0 0 1 1 0 0 0\\n0 0 0 0 1 1 0 0 0\\n0 0 0 0 1 1 0 0 0\"\nassert solution(\"5 3 2\\n1 2\\n1 2\\n1 2\\n1 2\") == \"YES\\n0 0 0 0 1 1 0 0 0\\n0 0 0 0 1 1 0 0 0\\n0 0 0 0 1 1 0 0 0\\n0 0 0 0 1 1 0 0 0\\n0 0 0 0 1 1 0 0 0\\n0 0 0 0 1 1 0 0 0\"\n",
        "num_ids_2": 57,
        "num_ids_4": 218
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3 2\\n1 2 1\\n') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('10 1 11\\n1\\n') == 'YES\\n0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2\\n') == 'YES\\n0 0 0 0 1 1 0 0 0 0'\n",
        "num_ids_2": 57,
        "num_ids_4": 86
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 1 5\\n2\\n\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\nassert solution(\"7 3 2\\n1 2 1\\n\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"7 3 2\\n2\\n\") == \"NO\"\nassert solution(\"7 3 2\\n1\\n\") == \"NO\"\nassert solution(\"7 3 2\\n4\\n\") == \"NO\"\n",
        "num_ids_2": 57,
        "num_ids_4": 91
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 2\\n1 2 1\\n\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\\n\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\\n\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\nassert solution(\"6 1 5\\n3\\n\") == \"NO\"\n",
        "num_ids_2": 57,
        "num_ids_4": 103
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3 \"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1 \"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0 \"\n\n\nassert solution(\"10 5 9\\n2\\n4\\n8\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1",
        "num_ids_2": 54,
        "num_ids_4": 911
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0\"\n",
        "num_ids_2": 54,
        "num_ids_4": 82
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\nassert solution(\"10 1 5\\n3\") == \"NO\"\nassert solution(\"10 1 5\\n7\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n\nprint(\"Successfully solved warmup-1\")",
        "num_ids_2": 53,
        "num_ids_4": 95
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"bbba\") == 3\nassert solution(\"bb\") == 0\nassert solution(\"a\") == 0\nassert solution(\"\") == 0\n",
        "num_ids_2": 17,
        "num_ids_4": 33
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"test\") == 3, \"Test\"\n\nassert solution(\"asdf\") == 0, \"Asdf\"\n\n\"\"\"\n\ns1 = \"test\"\ns2 = \"tst\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 1\nassert solution(\"\") == 0\n\nassert solution(\"baaba\") == 2\nassert solution(\"ab\") == 0",
        "num_ids_2": 17,
        "num_ids_4": 33
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('bbaba') == 3\nassert solution('bb') == 1\nassert solution('abcde') == 0\nassert solution('asdfasdf') == 3\nassert solution('asdf') == 2\n\n\n---\npython [utility.py](./utility.py)\n\n### The only difference between easy and hard versions is the length of the string.\n\nYou are given a string $s$ and a string $t$, both consisting only of lowercase Latin letters. It is guaranteed that $t$ can be obtained from $s$ by removing some (possibly, zero) number of characters (not necessary contiguous) from $s$ without changing order of remaining characters (in other words, it is guaranteed that $t$ is a subsequence of $s$).\n\nFor example, the strings \"test\", \"tst\", \"tt\", \"et\" and \"\" are subsequences of the string \"test\". But the strings \"tset\", \"se\", \"contest\" are not subsequences of the string \"test\".\n\nYou want to remove some substring (contiguous subsequence) from $s$ of maximum possible length such that after removing this substring $t$ will remain a subsequence of $s$.\n\nIf you want to remove the substring $s[l;r]$ then the string $s$ will be transformed to $s_1 s_2 \\dots s_{l-1} s_{r+1} s_{r+2} \\dots s_{|s|-1} s_{|s|}$ (where $|s|$ is the length of $s$).\n\nYour task is to find the maximum possible length of the substring you can remove so that $t$ is still a subsequence of $s$.\n\n\n-----Input-----\n\nThe first line of the input contains one string $s$ consisting of at least $1$ and at most $200$ lowercase Latin letters.\n\nThe second line of the input contains one string $t$ consisting of at least $1$ and at most $200$ lowercase Latin letters.\n\nIt is guaranteed that $t$ is a subsequence of $s$.\n\n\n-----Output-----\n\nPrint one integer \u2014 the maximum possible length of the substring you can remove so that $t$ is still a subsequence of $s$.\n\n\n-----Examples-----\nInput\nbbaba\nbb\n\nOutput\n3\n\nInput\nbaaba\nab\n\nOutput\n2\n\nInput\nabcde\nabcde\n\nOutput\n0\n\nInput\nasdfasdf\nfasd\n\nOutput\n3\n",
        "num_ids_2": 17,
        "num_ids_4": 37
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcd\") == 1\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == 26\nassert solution(\"bca\") == 1\nassert solution(\"b\") == 0\nassert solution(\"\") == 0\n\"\"\"\n\ns, t = input().strip(), input().strip()\ncnt = 0\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        if len(s) - i < len(t):\n            break\n        for j in range(len(t)):\n            if t[j] == s[i+j]:\n                if j == len(t) - 1:\n                    cnt += 1\n                continue\n            else:\n                break\nprint(len(s) - cnt)\n",
        "num_ids_2": 30,
        "num_ids_4": 47
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 1\nassert solution(\"tt\") == 0\nassert solution(\"et\") == 1\nassert solution(\"test\") == 3\n",
        "num_ids_2": 17,
        "num_ids_4": 33
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('test') == 0\nassert solution('abcde') == 0\nassert solution('baaba') == 3\nassert solution('bb') == 3\n\nprint('Test passed\\n')\n\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 34
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"test\") == 2\nassert solution(\"tst\") == 0\nassert solution(\"tt\") == 1\nassert solution(\"et\") == 2\nassert solution(\"asdf\") == 0\n",
        "num_ids_2": 17,
        "num_ids_4": 33
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('bbaba') == '3'\nassert solution('baaba') == '2'\nassert solution('abcde') == '0'\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('test') == 5\n\"\"\"\n\ns, t = [input() for _ in range(2)]\n\nl = 0\nr = 0",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\"\n\nimport math",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1.200000) == \"3 2\"\nassert solution(2.572479) == \"10 3\"\nassert solution(4.024922) == \"9 9\"",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1.1') == '3 2'\nassert solution('1.2') == '3 2'\nassert solution('1.3') == '3 2'\nassert solution('1.4') == '3 2'\nassert solution('1.5') == '3 2'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('.1') == '1 1'\nassert solution('.8') == '1 2'\nassert solution('.7') == '2 1'\nassert solution('.3') == '2 2'\nassert solution('.2') == '3 1'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\"\nimport math",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"8 5 5\") == \"NO\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1 3\\n') == 'NO'\nassert solution('6 3 3\\n') == 'YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6'\nassert solution('6 2 3\\n') == 'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7'\nassert solution('8 5 3\\n') == 'YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7'\n",
        "num_ids_2": 48,
        "num_ids_4": 148
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3 3\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\\n\"\nassert solution(\"6 2 3\") == \"NO\\n\"\nassert solution(\"8 5 3\") == \"YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\\n\"\n\n\"\"\"\n",
        "num_ids_2": 48,
        "num_ids_4": 98
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"8 10 3\") == \"NO\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 5 3\") == \"YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\"\nassert solution(\"6 3 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\n",
        "num_ids_2": 52,
        "num_ids_4": 100
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 4 3') == 'YES'\nassert solution('6 2 3') == 'NO'\nassert solution('8 5 3') == 'YES'\nassert solution('1 1 1') == 'YES'\nassert solution('10 5 3') == 'YES'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 3 3\\n') == 'YES'\nassert solution('6 2 3\\n') == 'NO'\nassert solution('8 5 3\\n') == 'YES'\nassert solution('10 4 3\\n') == 'YES'\n\nimport sys\n\nfor line in sys.stdin:\n    stdin = line.strip()\n    if stdin == '':\n        break\n    n, d, k = map(int, stdin.split())\n    if d == 0:\n        if k == 0:\n            print('YES')\n            for _ in range(n - 1):\n                print(n, n - 1)\n        else:\n            print('NO')\n    else:\n        print('YES')\n        for i in range(1, n):\n            print(i, i + (d - 1))",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 3\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\"\nassert solution(\"10 4 3\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\n",
        "num_ids_2": 80,
        "num_ids_4": 80
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"6 3 3\"\n) == \"YES\"\n\nassert solution(\n    \"6 2 3\"\n) == \"NO\"\n\nassert solution(\n    \"10 4 3\"\n) == \"YES\"\n\nassert solution(\n    \"8 5 3\"\n) == \"YES\"\n\nassert solution(\n    \"1 2 3\"\n) == \"NO\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 3\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\n",
        "num_ids_2": 44,
        "num_ids_4": 92
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 2') == '101100'\nassert solution('5 3 6') == '01010100'\n\n\"\"\"\n\n\nfrom itertools import product",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"101010\") == \"110010\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"01010\") == \"1100\"\nassert solution(\"111001\") == \"101100\"\nassert solution(\"1101010\") == \"110010\"\nassert solution(\"10101010\") == \"100110\"\nassert solution(\"011101010\") == \"1101101010\"\n",
        "num_ids_2": 23,
        "num_ids_4": 49
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\"\nassert solution(\"5 5 2\") == \"01010110\"\nassert solution(\"5 6 5\") == \"010101100\"\n\"\"\"\n\nfrom math import ceil\n",
        "num_ids_2": 25,
        "num_ids_4": 54
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 1 3\") == \"101100\"\nassert solution(\"1 1 1\") == \"110010\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"01010\") == \"110010\"\nassert solution(\"111001\") == \"101100\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10 3\") == \"101010\"\nassert solution(\"7 7 3\") == \"0111010\"\nassert solution
        "num_ids_2": 27,
        "num_ids_4": 1628
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 6') == '101100'\nassert solution('2 2 1') == '1100'\nassert solution('5 3 6') == '01010100'",
        "num_ids_2": 25,
        "num_ids_4": 39
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1\") == \"1100\"\nassert solution(\"2 2 1\") == \"0011\"\nassert solution(\"3 2 1\") == \"101100\"\nassert solution(\"5 2 1\") == \"01010100\"\n\nprint(\"PASSED\")\n\n'''",
        "num_ids_2": 25,
        "num_ids_4": 52
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11 1 0') == '1010'\nassert solution('1 1 0') == '101'\nassert solution('11 1 1') == '110'\nassert solution('1 1 1') == '1010'\n\nassert solution('1 1 1') == '1010'\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"cb\"\nassert solution(\"bb\") == \"bc\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aa\") == \"YES\"\nassert solution(\"bc\") == \"YES\"\nassert solution(\"ab\") == \"YES\"\n\nassert solution(\"cba\") == \"YES\"\nassert solution(\"abc\") == \"YES\"\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ab\") == \"acb\"\nassert solution(\"ca\") == \"cc\"\nassert solution(\"bb\") == \"cbc\"\nassert solution(\"ba\") == \"cbb\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ac\") == \"bc\"\nassert solution(\"bb\") == \"bc\"\nassert solution(\"ca\") == \"cb\"\nassert solution(\"cb\") == \"cac\"\n\"\"\"\n\nimport sys\n\na = int(sys.stdin.readline())\ns = sys.stdin.readline().strip()\nt = sys.stdin.readline().strip()\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1\na\na\n''') == 'YES\\naa'\nassert solution('''1\nc\nb\n''') == 'YES\\ncc'\nassert solution('''2\na\na\n''') == 'NO'\nassert solution('''1\nc\nb\n''') == 'YES\\ncc'\nassert solution('''2\nc\nb\n''') == 'NO'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"bb\"\nassert solution(\"bb\") == \"cba\"\nassert solution(\"cb\") == \"cba\"\nassert solution(\"bc\") == \"cba\"",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"cbac\"\nassert solution(\"bb\") == \"cbac\"\n\nassert solution(\"aa\") == \"ac\"\nassert solution(\"bc\") == \"cbac\"\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"bc\") == \"bc\"\nassert solution(\"ca\") == \"cc\"\n\nassert solution(\"aa\") == \"cac\"\nassert solution(\"bc\") == \"bc\"\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ab') == 'ac'\nassert solution('ca') == 'bb'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aa\") == \"YES\"\nassert solution(\"bc\") == \"YES\"\nassert solution(\"ca\") == \"YES\"\nassert solution(\"ab\") == \"YES\"\nassert solution(\"ac\") == \"YES\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 2') == '3 1 2'\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1 2') == '3 1 2'\nassert solution('5 1 1 1') == '5 1 2 3 4'\nassert solution('4 1 2') == '4 2 1 3'\n\nprint(solution(input()))\n",
        "num_ids_2": 31,
        "num_ids_4": 46
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n-2 1\") == \"3 1 2\"\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4\\n-1 2 2\") == \"-1\"\nassert solution(\"5\\n4 2 3 1\") == \"-1\"\nassert solution(\"5\\n1 2 3 4\") == \"1 2 3 4 5\"\n",
        "num_ids_2": 37,
        "num_ids_4": 69
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n-2 1\") == \"3 1 2\"\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n-2 1\") == \"3 1 2\"\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4\\n-1 2 2\") == \"-1\"\nprint(\"Tests passed.\")",
        "num_ids_2": 37,
        "num_ids_4": 53
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1 2') == '3 1 2'\nassert solution('5 1 1 1') == '1 2 3 4 5'\nassert solution('4 1 2') == '1 2 3 4'\nassert solution('3 1 -1') == '3 1 -1'\nassert solution('3 1 -1') == '3 1 -1'\n",
        "num_ids_2": 31,
        "num_ids_4": 62
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 2\") == \"3 1 2\"\nassert solution(\"5 1 2\") == \"3 1 2\"\nassert solution(\"5 -1 2\") == \"4 3 1\"\nassert solution(\"5 -1 1 1\") == \"4 2 3\"\nassert solution(\"5 -1 2 1\") == \"4 3 1\"\n",
        "num_ids_2": 28,
        "num_ids_4": 59
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 -2 1\") == \"3 1 2\"\nassert solution(\"5 -1 1\") == \"1 2 3 4 5\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"2 1\"\nassert solution(\"2 2\") == \"3 1\"\nassert solution(\"1 2\") == \"2 1\"\nassert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"1 1 1\") == \"1 2 3\"\n",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n-2 1\") == \"3 1 2\"\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nfor i in range(n - 1):\n    if a[i] == -1:\n        continue\n    if a[i + 1] == a[i] + 1:\n        print(*[i + 1 for i in range(n) if a[i] == i])\n        break\nelse:\n    print(-1)\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('3 2 3') == '1'\nassert solution('5 2 2 3 3') == '2'\nassert solution('5 2 2 3 3 5') == '2'\nassert solution('5 2 2 3 3 5 7') == '3'\n\n----",
        "num_ids_2": 20,
        "num_ids_4": 49
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n2') == '1'\nassert solution('2\\n2') == '1'\nassert solution('2\\n1') == '2'\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 2 2 3 3') == '2'\nassert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\n\"\"\"\nimport sys\nfrom collections import Counter",
        "num_ids_2": 32,
        "num_ids_4": 49
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5) == 2\nprint('Test pass.')\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == '5'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == '5'\nassert solution('5') == '0'\n\"\"\"\nimport math\n\nn = int(input())",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n') == '3'\nassert solution('10\\n') == '5'\n\"\"\"\n\nimport math\nimport sys\nimport os\n\nDEBUG = False\ndata_dir = '/home/kunal_2010/code/python/DS_Stacks_Queues/stacks/data/'",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '5'\nassert solution('1') == '0'\n\n\"\"\"\n\nfrom itertools import product\nimport unittest\n\n\nclass Solution:\n    def moves_to_square(self, n: int) -> int:\n        square = self.get_square(n)\n        return sum([abs(n - v) for v in square])\n\n    def get_square(self, n: int) -> list:\n        max_value = n ** 0.5\n        result = [v * v for v in range(1, max_value + 1)]\n        return result + [v * v for v in range(max_value + 1, n + 1)]\n\n\nclass SolutionTest(unittest.TestCase):\n    def test_solution(self):\n        assert Solution().moves_to_square(10) == 5\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == '5'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"5\"\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == '5'\nassert solution('20') == '10'\nassert solution('30') == '15'\nassert solution('40') == '20'\nassert solution('50') == '25'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == '5'\nassert solution('5') == '2'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1'\nassert solution('15\\n5 5 5\\n5 5 5') == '0 15'\nassert solution('3\\n0 0 3\\n3 0 0') == '3 3'\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334'\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"0 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 63
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"3 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 63
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1\") == \"0 1\"\nassert solution(\"1 1 0\") == \"1 1\"\nassert solution(\"15 5 5\") == \"0 15\"\nassert solution(\"5 5 5\") == \"0 15\"\nassert solution(\"3 0 3\") == \"3 3\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"0 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n",
        "num_ids_2": 42,
        "num_ids_4": 63
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 1 1\\n1 1 0\") == '0 1'\nassert solution(\"15 5 5\\n5 5 5\") == '0 15'\nassert solution(\"3 0 3\\n0 0 0\") == '3 3'\nassert solution(\"686\\n479 178 29\\n11 145 530\") == '22 334'\n\n\"\"\"\n\n\nimport math\n",
        "num_ids_2": 36,
        "num_ids_4": 75
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == '0 1'\nassert solution(\"15\\n5 5 5\\n5 5 5\") == '0 15'\nassert solution(\"686\\n479 178 29\\n11 145 530\") == '22 334'\n\"\"\"\n\nn = int(input())\na = [0] * 3\nb = [0] * 3\na[0], a[1], a[2] = map(int, input().split())\nb[0], b[1], b[2] = map(int, input().split())\n\nalice_rounds_min = float('inf')\nalice_rounds_max = -1\n\nbob_rounds_min = float('inf')\nbob_rounds_max = -1\n\nfor i in range(n):\n    if i % 2 == 0:\n        alice_rounds_max = max(alice_rounds_max, a[i % 3])\n        bob_rounds_min = min(bob_rounds_min, b[i % 3])\n    else:\n        alice_rounds_min = min(alice_rounds_min, a[i % 3])\n        bob_rounds_max = max(bob_rounds_max, b[i % 3])\n\nprint(max(alice_rounds_max - 1, 0), max(alice_rounds_min, bob_rounds_max + 1))",
        "num_ids_2": 42,
        "num_ids_4": 63
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == solution(str(input()))\n\n-----Testcases-----\n\nPrecondition:\n\n1 <= n <= 10^9\n\n0 <= a_i <= n\n\n0 <= b_i <= n\n\n0 <= a_i + b_i <= n\n\n>>> solution(\"2\\n0 0 1\\n1 1 0\")\n'0 1'\n>>> solution(\"3\\n0 0 3\\n3 0 0\")\n'3 3'\n>>> solution(\"686\\n479 178 29\\n11 145 530\")\n'22 334'\n>>> solution(\"319\\n10 53 256\\n182 103 34\")\n'119 226'\n>>> solution(\"15\\n5 5 5\\n5 5 5\")\n'0 15'\n>>> solution(\"2\\n1 1 0\")\n'0 1'\n>>> solution(\"3\\n0 0 3\")\n'3 3'\n>>> solution(\"1\\n0 0 1\")\n'0 1'\n>>> solution(\"4\\n0 0 4\\n4 0 0\")\n'0 4'\n>>> solution(\"5\\n0 0 5\\n5 0 0\")\n'0 5'\n>>> solution(\"1\\n0 0 1\\n0 0 0\")\n'0 1'\n>>> solution(\"2\\n0 0 1\\n1 1 0\")\n'0 1'\n>>> solution(\"1\\n1 1 0\")\n'0 1'\n>>> solution(\"3\\n0 0 3\\n1 0 0\")\n'1 2'\n>>> solution(\"4\\n0 0 4\\n4 0 0\")\n'0 4'\n>>> solution(\"5\\n0 0 5\\n5 0 0\")\n'0 5'\n>>> solution(\"1\\n1 1 0\")\n'1 2'\n>>> solution(\"1\\n0 1 1\")\n'0 1'\n>>> solution(\"2\\n1 0 1\\n0 1 1\")\n'0 1'\n>>> solution(\"3\\n1 1 0\\n0 0 3\")\n'1 2'\n>>> solution(\"5\\n1 1 0\\n1 1 0\")\n'0 1'\n>>> solution(\"1\\n1 1 0\")\n'1 2'\n>>> solution(\"3\\n2 2 0\")\n'0 3'\n>>> solution(\"2\\n1 1 0\\n1 0 1\")\n'1 1'\n>>> solution(\"1\\n0 1 1\")\n'0 1'\n>>> solution(\"1\\n1 0 1\")\n'0 1'\n>>> solution(\"1\\n1 1 0\")\n'1 2'\n>>> solution(\"1\\n0 1 1\")\n'0 1'\n>>> solution(\"3\\n0 1 1\\n1 1 0\")\n'1 2'\n>>> solution(\"1\\n0 0 1\\n0 0 0\")\n'0 1'\n>>> solution(\"2\\n1 0 1\\n1 1 0\")\n'1 1'\n>>> solution(\"1\\n1 0 1\")\n'1 1'\n>>> solution(\"3\\n0 0 3\\n1 1 0\")\n'1 1'\n>>> solution(\"3\\n0 0 3\\n1 1 0\")\n'1 1'\n>>> solution(\"1\\n1 1 0\")\n'1 1'\n>>> solution(\"1\\n0 1 1\")\n'0 1'\n>>> solution(\"3\\n1 1 0\\n0 0 3\")\n'1 1'\n>>> solution(\"2\\n0 1 1\\n1 1 0\")\n'1 1'\n>>> solution(\"2\\n1 0 1\\n0 0 3\")\n'1 1'\n>>> solution(\"2\\n1 1 0\\n0 0 3\")\n'1 1'\n>>> solution(\"2\\n1 0 1\\n0 0 3\")\n'1 1'\n>>> solution(\"1\\n1 0 1\")\n'1 1'\n>>> solution(\"2\\n0 0 1\\n1 1 0\")\n'0 1'\n>>> solution(\"2\\n0 0 1\\n1 1 0\")\n'0 1'\n>>> solution(\"2\\n0 0 1\\n1 1 0\")\n'0 1'\n>>> solution(\"2\\n0 0 1\\n1 1 0\")\n'0 1'\n>>> solution(\"2\\n1 0 1\\n0 0 3\")\n'0 3'\n>>> solution(\"2\\n1 0 1\\n1 0 3\")\n'0 3'\n>>> solution(\"2\\n1 0 1\\n0 0 3\")\n'0 3'\n>>> solution(\"2\\n0 0 1\\n1 0 3\")\n'0 3'\n>>> solution(\"2\\n1 1 0\\n1 1 0\")\n'1 1'\n>>> solution(\"3\\n1 1 0\\n1 1 0\")\n'0 1'\n>>> solution(\"2\\n1 0 1\\n1 1 0\")\n'1 1'\n>>> solution(\"2\\n1 0 1\\n1 0 3\")\n'0 3'\n>>> solution(\"2\\n1 0 1\\n1 0 3\")\n'1 3'\n>>> solution(\"2\\n1 0 1\\n1 0 3\")\n'0 3'\n>>> solution(\"2\\n0 0 1\\n1 0 3\")\n'0 3'\n>>> solution(\"2\\n0 0 1\\n1 0 3\")\n'0 3'\n>>> solution(\"2\\n1 0 1\\n0 0 3\")\n'0 3'\n>>> solution(\"2\\n0 1 1\\n1 0 3\")\n'0 3'\n>>> solution(\"2\\n0 1 1\\n0 0 3\")\n'",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"15\\n5 5 5\\n5 5 5\") == \"0 15\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\nassert solution(\"319\\n10 53 256\\n182 103 34\") == \"119 226\"\n\n\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 1') == '1 0'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\"\nassert solution(\"4\\n1 1\") == \"1\\n1 1\"\n\n\"\"\"\n\n\nimport sys\n",
        "num_ids_2": 55,
        "num_ids_4": 93
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 2 2 1 5 3\\n') == '3'\n\nsolution('7 1 2 2 1 5 3\\n') == '3'\n\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5\\n') == '2'\n\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5\\n') == '2'\n\nassert solution('7 1 2 2 1 5 3\\n') == '3'\n\nassert solution('4 1 2 2 1 5 3\\n') == '3'",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n\") == \"2\\n3 4\\n1 1\\n2 2\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"4\\n4 4\\n1 1\"\nassert solution(\"4\\n1 1 1\\n\") == \"2\\n3 3\\n1 1\"\n\n\"\"\"\n\nimport sys\n\nINT_MAX = sys.maxsize\n\n\nclass LinkedList:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n    def __repr__(self):\n        result = [self.val]\n        node = self.next\n        while node:\n            result.append(node.val)\n            node = node.next\n        return str(result)\n\n\nclass HashTable:\n    def __init__(self, size=101):\n        self.size = size\n        self.slots = [None] * self.size\n        self.data = [None] * self.size\n\n    def put(self, key, data):\n        hash_value = self.hash_function(key, len(self.slots))\n\n        if self.slots[hash_value] is None:\n            self.slots[hash_value] = key\n            self.data[hash_value] = data\n        else:\n            if self.slots[hash_value] == key:\n                self.data[hash_value] = data  # replace\n            else:\n                next_slot = self.rehash(hash_value, len(self.slots))\n                while self.slots[next_slot] is not None and self.slots[next_slot]!= key:\n                    next_slot = self.rehash(next_slot, len(self.slots))\n\n                if self.slots[next_slot] is None:\n                    self.slots[next_slot] = key\n                    self.data[next_slot] = data\n                else:\n                    self.data[next_slot] = data  # replace\n\n    @staticmethod\n    def hash_function(key, size):\n        return key % size\n\n    @staticmethod\n    def rehash(old_hash, size):\n        return (old_hash + 1) % size\n\n    def get(self, key):\n        start_slot = self.hash_function(key, len(self.slots))\n\n        data = None\n        stop = False\n        found = False\n        position = start_slot\n        while self.slots[position] is not None and not found and not stop:\n            if self.slots[position] == key:\n                found = True\n                data = self.data[position]\n            else:\n                position = self.rehash(position, len(self.slots))\n                if position == start_slot:\n                    stop = True\n        return data\n\n    def __getitem__(self, key):\n        return self.get(key)\n\n    def __setitem__(self, key, data):\n        self.put(key, data)\n\n\nclass Solution:\n    def __init__(self):\n        self.result = []\n\n    def get_result(self, blocks):\n        blocks = sorted(blocks)\n        blocks = list(map(str, blocks))\n        print(' '.join(blocks))\n\n    def get_blocks(self, n):\n        blocks = []\n        for i in range(1, n + 1):\n            blocks.append(i)\n        return blocks\n\n    def find_max_blocks(self, a):\n        n = len(a)\n        if n == 1:\n            return 1\n        blocks = []\n        for i in range(n):\n            blocks.append(a[i] + 1)\n        max_blocks = 1\n        for i in range(1, n):\n            if blocks[i] > blocks[i - 1]:\n                max_blocks += 1\n        return max_blocks\n\n    def find_max_sets(self, a, max_blocks):\n        n = len(a)\n        if n == 1:\n            return max_blocks\n        if n == 2:\n            return max_blocks + 1\n        max_sets = 1\n        for i in range(1, n - 1):\n            if a[i] > a[i - 1] and a[i] > a[i + 1]:\n                max_sets += 1\n        return max_sets\n\n    def solve(self, a):\n        n = len(a)\n        max_blocks = self.find_max_blocks(a)\n        max_sets = self.find_max_sets(a, max_blocks)\n        return max_sets\n",
        "num_ids_2": 75,
        "num_ids_4": 126
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"4\\n1 1 1 1\") == \"4\"",
        "num_ids_2": 47,
        "num_ids_4": 63
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3\\n7 7'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4'\nassert solution('4\\n1 1 1 1') == '4\\n4 4'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4'\n",
        "num_ids_2": 55,
        "num_ids_4": 107
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n1 1 1 1\n''') == '4\\n4\\n1 1\\n2 2\\n3 3'\n\nassert solution('''7\n4 1 2 2 1 5 3\n''') == '3\\n7 7\\n2 3\\n4 5'\n\nassert solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '2\\n3 4\\n1 1\\n2 2\\n3 3'\n\nassert solution('''4\n1 1 1 1\n''') == '4\\n4\\n1 1\\n2 2\\n3 3'\n\nassert solution('''7\n4 1 2 2 1 5 3\n''') == '3\\n7 7\\n2 3\\n4 5'",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\nassert solution('7 4 1 2 2 1 5 3') == '3'",
        "num_ids_2": 42,
        "num_ids_4": 59
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\n\n\"\"\"\n\nimport sys\nimport collections",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == '3\\n7 7'\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == '2\\n3 4'\nassert solution(\"4\\n1 1 1 1\") == '4\\n4 4'\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == '2\\n3 4'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nres = 0\nleft = []\nright = []\n\nfor i in range(n):\n    left.append(a[i])\n    right.append(a[-(i+1)])\n\nleft.sort()\nright.sort()\n\nres = 0\nfor i in range(n):\n    for j in range(n):\n        if i!= j:\n            if left[i] + right[j] > res:\n                res = left[i] + right[j]\n\nprint(res)",
        "num_ids_2": 55,
        "num_ids_4": 107
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"YES\"\nassert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 3 3\") == \"NO\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\") == \"YES\"\nassert solution(\"3 3 3 4 4 4 4 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9",
        "num_ids_2": 24,
        "num_ids_4": 75
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 1 2 3\") == \"YES\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 1 2 3\") == \"NO\"\nassert solution(\"1 1 1\") == \"YES\"\n",
        "num_ids_2": 25,
        "num_ids_4": 37
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\"\nassert solution(\"5\\n4 2 3 5 1\") == \"YES\"\n\nprint(solution(input()))\n\"\"\"\n\nn = int(input())\narray = list(map(int, input().split()))",
        "num_ids_2": 30,
        "num_ids_4": 47
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2') == 'NO'\nassert solution('1 2 3') == 'YES'\n\nfrom collections import deque\nimport copy\n\nclass Stack:\n    def __init__(self, maxsize=None):\n        self.maxsize = maxsize\n        self.items = deque()\n    def push(self, x):\n        if not self.maxsize or self.size() < self.maxsize:\n            self.items.append(x)\n        else:\n            raise ValueError\n    def pop(self):\n        if self.items:\n            return self.items.pop()\n        else:\n            raise ValueError\n    def size(self):\n        return len(self.items)\n    def is_empty(self):\n        return not self.items\n    def peek(self):\n        if self.items:\n            return self.items[-1]\n        raise ValueError\n    def __repr__(self):\n        return \"Stack({!r})\".format(list(self.items))\n    def __str__(self):\n        return \"Stack({})\".format(list(self.items))\n    def __len__(self):\n        return self.size()",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"YES\"\nassert solution(\"3 1 2\") == \"NO\"\nprint(solution(stdin))\n\n-----",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 2') == 'NO'\nassert solution('3 1 2 3') == 'NO'\nassert solution('4 1 2 3') == 'YES'\nassert solution('4 1 2 3 1 2 3') == 'YES'\nassert solution('4 1 2 3 1') == 'YES'\n",
        "num_ids_2": 25,
        "num_ids_4": 54
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2\") == \"YES\"\nassert solution(\"4 2 1\") == \"NO\"\nassert solution(\"5 2 4 3 1\") == \"YES\"\nassert solution(\"7 4 1 5 6 2 3\") == \"YES\"\nassert solution(\"6 2 4 1 5 3\") == \"NO\"\n",
        "num_ids_2": 24,
        "num_ids_4": 54
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 1 2\") == \"NO\"\n\nprint(solution(\"3 1 2\"))\n\n\n\n\n------BEST SOLUTION------",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcdef\", \"abdcef\") == \"4 5 4 5\"\nassert solution(\"abcd\", \"accd\") == \"-1\"\nassert solution(\"\", \"abcd\") == \"0\"\nassert solution(\"\", \"\") == \"0\"\nassert solution(\"abcd\", \"abcde\") == \"5 5 5 5\"\n",
        "num_ids_2": 35,
        "num_ids_4": 59
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abcdef') == 'abdcef'\nassert solution('abdfec') == 'abdcfe'\n\nassert solution('abc') == 'abcc'\nassert solution('abbcc') == 'abbcc'\nassert solution('abcddd') == 'abbddd'",
        "num_ids_2": 28,
        "num_ids_4": 51
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcd\") == \"0\"\nassert solution(\"accd\") == \"-1\"\n\"\"\"\n\n\"\"\"\nExample\nInput:\n5\nabcdef\nabdfec\n\nOutput:\n4\n3 5 4 5\n\n\"\"\"\n\nn = int(input())\ns = input()\nt = input()\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abcdef') == 'abdcef'\nassert solution('abcd') == '-1'\n\"\"\"\n\nimport sys\nfrom typing import List",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"abcdef\"\n) == \"abdcef\"\nassert solution(\n\"abcd\"\n) == \"accd\"\nassert solution(\n\"abcde\"\n) == \"accde\"\nassert solution(\n\"abcdefghijklmnopqrstuvwxyz\"\n) == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\n\"abcdef\"\n) == \"abdcef\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('abcdef') == 'abdcef'\nassert solution('abdfec') == 'abdcfe'\nassert solution('abcd') == 'accd'\nassert solution('abc') == 'abdc'\n",
        "num_ids_2": 22,
        "num_ids_4": 48
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\nassert solution(\"abdcfe\") == \"abdfec\"\n\"\"\"\n\nn = int(input())\ns = input()\nt = input()",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\n\"\"\"\nimport sys",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\nassert solution(\"abcd\") == \"accd\"\nassert solution(\"accd\") == \"accd\"\nassert solution(\"abc\") == \"acc\"\n",
        "num_ids_2": 28,
        "num_ids_4": 52
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"abdcef\") == \"abdcef\"\nassert solution(\"abdcefg\") == \"abdcefg\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\ns = sys.stdin.readline()\nt = sys.stdin.readline()",
        "num_ids_2": 29,
        "num_ids_4": 61
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba\") == \"PS\"\nassert solution(\"aaaaa\") == \"SPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"\") == \"PS\"\nassert solution(\"aa\") == \"PS\"\n",
        "num_ids_2": 22,
        "num_ids_4": 41
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\na\\nb\\nc\\nd\\n') == 'SPSP'\nassert solution('5\\naa\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\n') == 'PSPS'\nassert solution('3\\naa\\nbb\\ncc\\n') == 'PS'\nassert solution('1\\na\\n') == 'SP'\nassert solution('2\\na\\na\\na\\n') == 'SSS'\n",
        "num_ids_2": 54,
        "num_ids_4": 89
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"PS\"\n\nassert solution(\"ba\") == \"SP\"\n\nassert solution(\"ab\") == \"PS\"\n\nassert solution(\"a\") == \"S\"\n\nassert solution(\"c\") == \"P\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"PPS\"\nassert solution(\"ac\") == \"SP\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abab') == 'PPSS'\nassert solution('aa') == 'PPS'\nassert solution('aba') == 'PS'\n\n'''\n",
        "num_ids_2": 24,
        "num_ids_4": 34
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == \"PS\"\nassert solution(\"aaa\") == \"PPS\"\nassert solution(\"abab\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"c\") == \"PS\"\n",
        "num_ids_2": 21,
        "num_ids_4": 45
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aba\") == \"PPS\"\nassert solution(\"baba\") == \"PPS\"\nassert solution(\"ac\") == \"PS\"\nassert solution(\"c\") == \"P\"\nassert solution(\"abab\") == \"PSPSPSPS\"\n",
        "num_ids_2": 23,
        "num_ids_4": 43
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aba\") == \"SPS\"\nassert solution(\"aa\") == \"PS\"\nassert solution(\"ac\") == \"SP\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ba') == 'PS'\nassert solution('a') == 'PS'\nassert solution('abab') == 'PSPSPSPS'\nassert solution('a') == 'PS'\nassert solution('aba') == 'PSS'\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba\") == \"PS\"\nassert solution(\"abbabababbbaabab\") == \"PSPSPSPSPSPSPSPS\"\nassert solution(\"baba\") == \"PS\"\nassert solution(\"aa\") == \"PPS\"\nassert solution(\"aaa\") == \"PPSS\"\n",
        "num_ids_2": 33,
        "num_ids_4": 55
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 6 8 10') == '1'\nassert solution('1 2 3 4 5') == '5'\nassert solution('3 2 1') == '2'\nassert solution('2 3 4 5 1') == '5'\nassert solution('1 2 3 4 5 6 7 8') == '8'\n",
        "num_ids_2": 28,
        "num_ids_4": 54
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"1 1 1 1 1 1\") == \"6\"\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6 8 10\") == 1\nprint(solution(\"4 6 8 10\"))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\n\n-----Explanation-----\n\nIn the standard order, the first line of the input contains numbers 2, 4, 6, 8, 10. In this order, the smallest number is 2, the second is 4, the third is 6, the fourth is 8, and the fifth is 10. So, the number with the smallest ordinal is 2.\n\na)\n\n\n-----\n\n2 4 6 8 10\n\na) 2\nb) 4\nc) 6\nd) 8\ne) 10\n\n-----\n\n5 9 5 8 3\n\na) 1\nb) 2\nc) 3\nd) 5\ne) 4\n\n\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4 6 8 10') == '1'\nprint(solution('2 4 6 8 10'))\n\n-----Constraints-----\n\na_i are integers in the range [0, 100].\n\n\n-----Comments-----\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nFugiat ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 4 6 8 10''') == '1'\nassert solution('2 4 6 8 10') == '1'\nassert solution('2 4 6 8') == '1'\nassert solution('2 4 6 8 9 10') == '2'\nassert solution('2 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100') == '2'\n\nInput\n2 4 6 8\n\nOutput\n0\n",
        "num_ids_2": 31,
        "num_ids_4": 59
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\n\"\"\"\na = [int(x) for x in input().split(\" \")]\nprint(min(a))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\n\"\"\"\n\na = [int(x) for x in input().split(' ')]\nprint(1 if sum(a)//2 == len(a) else 0)\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\n\"\"\"\n\n\nfrom typing import List, Tuple\nimport operator\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 6 8 10') == 1\n\n\"\"\"\n\nfrom typing import List, Set, Dict\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n\n\nimport sys\n",
        "num_ids_2": 39,
        "num_ids_4": 55
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n1 1 0 1 1 0 1 0 1 0\\n') == '2'\nassert solution('5\\n1 1 0 0 0\\n') == '0'\nassert solution('4\\n1 1 1 1\\n') == '0'\n\"\"\"\n",
        "num_ids_2": 43,
        "num_ids_4": 61
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == '2'\nassert solution(\"5\\n1 1 0 0 0\") == '0'\nassert solution(\"4\\n1 1 1 1\") == '0'\nassert solution(\"2\\n1 1\") == '1'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nk = 0\ns = set()\n\nfor i in range(1, n - 1):\n    if a[i - 1] == 1 and a[i] == 1 and a[i + 1] == 1:\n        k += 1\n        s.add(i)\n\nprint(len(s))\n",
        "num_ids_2": 39,
        "num_ids_4": 69
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == '2'\nassert solution(\"5\\n1 1 0 0 0\") == '0'\nassert solution(\"4\\n1 1 1 1\") == '0'\n\nstdin = \"\"\"10\n1 1 0 1 1 0 1 0 1 0\n\"\"\"\nassert solution(stdin) == '2'\n\nstdin = \"\"\"5\n1 1 0 0 0\n\"\"\"\nassert solution(stdin) == '0'\n\nstdin = \"\"\"4\n1 1 1 1\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 66
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5 1 1 0 0 0\") == \"0\"\nassert solution(\"4 1 1 1\") == \"0\"\n",
        "num_ids_2": 35,
        "num_ids_4": 48
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 1 1\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\nassert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"3\\n1 1 1\") == \"0\"\n\nprint(\"Well done!\")\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 69
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n\nprint('Success')\n\n\"\"\"\n\nimport sys\nimport os\n\nfrom typing import List, Dict\n\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solution(self, stdin: str) -> str:\n        n = int(stdin.readline().strip())\n        arr = list(map(int, stdin.readline().strip().split(\" \")))\n        arr_len = len(arr)\n        i = 0\n        while i < arr_len - 1:\n            if arr[i] == 1 and arr[i + 1] == 1:\n                break\n            i += 1\n        if i == arr_len - 1:\n            return 0\n        else:\n            return i + 1\n",
        "num_ids_2": 39,
        "num_ids_4": 55
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\n1 1 0 1 1 0 1 0 1 0') == '2'\nassert solution('5\\n1 1 0 0 0') == '0'\n\"\"\"\n\nimport sys",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"6\\n6 90 12 18 30 18\") == \"4\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 4 5') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('6 90 12 18 30 18') == '4'\n",
        "num_ids_2": 27,
        "num_ids_4": 42
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"1\"\n\"\"\"\n\n\nimport sys\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == '1'\nassert solution(\"6\\n6 90 12 18 30 18\") == '4'\n\n\"\"\"",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 4 5') == '1'\nassert solution('6\\n6 90 12 18 30 18') == '4'\nassert solution('6\\n0 1 3 1 3') == '0'\n",
        "num_ids_2": 35,
        "num_ids_4": 52
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1 2\\n') == 1\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4') == '1'\nassert solution('7\\n1 2 3 4 5 6 7') == '7'\n\"\"\"\nimport math",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 4 5') == '2'\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1 2 3 4') == 2\nassert solution('6 90 12 18 30 18') == 4",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 90 12 18 30 18\") == 4\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nd = {}\n\nfor i in a:\n    if i == 1:\n        continue\n    if i == 2:\n        d[i] = 2\n    else:\n        divisor = 2\n        while divisor * divisor < i:\n            if i % divisor == 0:\n                if divisor in d:\n                    d[divisor] += 1\n                else:\n                    d[divisor] = 1\n            divisor += 1\n        if divisor * divisor == i:\n            d[divisor] = 1",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 4 3 3 2\") == 2",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 4 3 3 2\") == \"2\"\nassert solution(\"1 2 3 4 3 2\") == \"2\"\nassert solution(\"1 2 1 1 2 1\") == \"1\"\nassert solution(\"1 1 1 1 1 1\") == \"1\"\nassert solution(\"1 2 3 4 3 2\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1\\n2\\n2\\n3\\n1\\n') == '3'\nassert solution('4\\n3\\n2\\n1\\n1\\n') == '1'\nassert solution('4\\n2\\n1\\n3\\n2\\n1\\n') == '2'\n\"\"\"\n",
        "num_ids_2": 51,
        "num_ids_4": 78
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 4 3 3 2\\n\") == \"2\"\n\"\"\"\nimport sys\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(input())\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4') == 2\nassert solution('6\\n1 2 4 3 3 2') == 2\nassert solution('2\\n3 2') == 1\nassert solution('8\\n1 2 3 4 5 6 7 8') == 1\nassert solution('1\\n100') == 1\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 3 3 2\") == 2\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 2 4 3 3 2\") == 2\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 4 3 3 2\") == \"2\"\nassert solution(\"100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\") == \"1\"\nassert solution(\"5 6 7 8 9 10\") == \"2\"\nassert solution(\"3 4 5 6 7\") == \"2\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split()))",
        "num_ids_2": 124,
        "num_ids_4": 153
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n0 0 1 1 0 1 0 0 0 1\") == \"3\"\nassert solution(\"5 10\\n0 0 1 1 0 1 0 0 0 1\") == \"2\"\nassert solution(\"5 10\\n0 0 0 0 0 0\") == \"-1\"\nassert solution(\"6 2\\n0 1 1 0 0 1\") == \"3\"\nassert solution(\"1 10\\n0 0\") == \"-1\"\n",
        "num_ids_2": 46,
        "num_ids_4": 84
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 2\\n0 1 1 0 0 1\\n') == '3'\nassert solution('5 3\\n1 0 0 0 1\\n') == '2'\nassert solution('5 10\\n0 0 0 0 0\\n') == '-1'\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1\\n') == '3'\n",
        "num_ids_2": 41,
        "num_ids_4": 87
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n0 0 1 1\") == \"2\"\nassert solution(\"6 2\\n0 1 1 0 0 1\") == \"3\"\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == \"3\"\nassert solution(\"6 10\\n0 0 0 0 0 0\") == \"1\"\nassert solution(\"6 10\\n0 0 0 0 0 0\\n0 1 1 1 1 1\") == \"1\"\n\n-----end----\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 78
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"10 3\") == \"2\"\nassert solution(\"5 10\") == \"-1\"\n\"\"\"\n\n\nfrom itertools import product\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == 3\nassert solution(\"5 3\\n1 0 0 0 1\") == 2\nassert solution(\"5 10\\n0 0 0 0 0\") == -1\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == 3\n",
        "num_ids_2": 33,
        "num_ids_4": 71
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 0 0 1') == '2'\nassert solution('6 2\\n0 1 1 0 0 1') == '3'\nassert solution('6 10\\n0 0 0 0 0 0') == '-1'\nassert solution('6 10\\n1 0 0 0 0 0') == '-1'\nassert solution('6 10\\n0 1 1 0 0 0') == '3'\n",
        "num_ids_2": 36,
        "num_ids_4": 76
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(1, 2) == 1\nassert solution(6, 2) == 3\nassert solution(10, 3) == -1\n",
        "num_ids_2": 20,
        "num_ids_4": 31
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''6 2\n0 1 1 0 0 1''') == 3\n\nassert solution('''5 3\n1 0 0 0 1''') == 2\n\nassert solution('''5 10\n0 0 0 0 0\n''') == -1\n\nassert solution('''10 3\n0 0 1 1 0 1 0 0 0 1\n''') == 3\n\n'''\n\n\nn,r = list(map(int,input().split()))\nA = list(map(int,input().split()))\n\npos = [0]*n\nfor i in range(n):\n    if A[i] == 1:\n        pos[i] = i\n\nheaters = []\nfor i in range(n):\n    if A[i] == 0:\n        heaters.append(i)\n\nans = 0\nfor i in range(n):\n    start = max(0,i-r+1)\n    end = min(n,i+r)\n    if pos[end]-pos[start] >= r:\n        ans += 1\n\nprint(ans)\n\n'''\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 2\\n0 1 1 0 0 1') == 3\nassert solution('5 10\\n0 0 0 0 0 0') == -1\nassert solution('5 10\\n0 0 0 0 0') == -1\nassert solution('5 2\\n0 0 0 0 0') == -1\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1') == 3\n",
        "num_ids_2": 35,
        "num_ids_4": 69
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10\\n0 0 0 0 0\\n\") == '3'\nassert solution(\"6 2\\n0 1 1 0 0 1\\n\") == '3'\nassert solution(\"5 3\\n0 0 0 0 0\\n\") == '-1'\nassert solution(\"10 3\\n0 0 0 0 0 0 0 0 0 0 1\\n\") == '3'",
        "num_ids_2": 41,
        "num_ids_4": 88
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3) == 3\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"3\"\nprint(solution(\"3\"))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == 3\nprint(solution('3'))\n\n-------------------------",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '2'\nassert solution('6') == '3'\nassert solution('3') == '1'\nassert solution('1') == '0'\nassert solution('9') == '4'",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('10') == '2'\nassert solution('11') == '1'\nassert solution('555') == '0'\nassert solution('333') == '3'\n\"\"\"\n\nimport math\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('8') == '5'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n\") == \"3\"\nassert solution(\"4\\n\") == \"7\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3\"\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3) == 3\n\nprint(solution('3'))\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"((((())\") == 3\nassert solution(\"()(()())()\") == 1\nassert solution(\"((()))\") == 1\n\"\"\"\n\nimport pytest\nimport sys\nimport os\n\nsys.path.insert(1, os.path.join(sys.path[0], \"..\"))\nfrom util.decorators import timeit\n\nfrom typing import Dict, List",
        "num_ids_2": 22,
        "num_ids_4": 32
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"()()\") == 0\nassert solution(\"()(()))(((()())()\")) == 4\nassert solution(\"(((())))((()))\") == 2\nassert solution(\"(((())))((())())\") == 2\nassert solution(\"((())))(((()()))((())())()(())()\") == 0\n",
        "num_ids_2": 25,
        "num_ids_4": 55
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"()()\") == 3\nassert solution(\"(((()))\") == 3\nassert solution(\"(()()(()))\") == 3\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 33
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"(((())\") == 3\nassert solution(\"())((()())\") == 1\nassert solution(\"((()))\") == 0\n\n\"\"\"\n\nimport collections",
        "num_ids_2": 22,
        "num_ids_4": 32
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"()(())\") == 1\nassert solution(\"((()))\") == 2\nassert solution(\"())\") == 0\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 28
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"()\") == 0\nassert solution(\"((()))\") == 0\nassert solution(\"((((((((((((()))))))))))\") == 0\nassert solution(\"()()\") == 0\nassert solution(\"((((((((((((()))))))))))\") == 0\n",
        "num_ids_2": 18,
        "num_ids_4": 44
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"()()\") == 0\nassert solution(\"(((())))\") == 1\nassert solution(\"(())((()())())\") == 2\nassert solution(\"()(()())()\") == 3\n\nprint('The code ran Correctly')",
        "num_ids_2": 20,
        "num_ids_4": 46
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('(((())(())()))((())())') == 5\nassert solution(')(') == 2\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '(((()'\n) == 3\n\nassert solution(\n    ')))(((((('\n) == 0\n\nassert solution(\n    ')))(((((('\n) == 0\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"(()\") == \"2\"\nassert solution(\"()()\") == \"0\"\nassert solution(\"((()))\") == \"1\"\nassert solution(\"(())((()()))\") == \"3\"\nassert solution(\"(())(()(()()))\") == \"5\"\n",
        "num_ids_2": 22,
        "num_ids_4": 50
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('bbaba') == 3\nassert solution('bb') == 3\nassert solution('a') == 1\nassert solution('a bb abc abd') == 1\nassert solution('a bb') == 1\n",
        "num_ids_2": 17,
        "num_ids_4": 39
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('test') == 3\nassert solution('tst') == 2\nassert solution('tt') == 1\nassert solution('et') == 0\nassert solution('tes') == 3\n",
        "num_ids_2": 17,
        "num_ids_4": 33
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('bbaba') == 3\nassert solution('bb') == 1\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('bbaba') == 3\nassert solution('bb') == 1\nassert solution('test') == 1\nassert solution('tst') == 0\nassert solution('tt') == 1\n",
        "num_ids_2": 17,
        "num_ids_4": 34
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"test\") == 5\nassert solution(\"tt\") == 1\nassert solution(\"aaaaa\") == 3\nassert solution(\"aaaaaa\") == 0\nassert solution(\"\") == 0\n",
        "num_ids_2": 16,
        "num_ids_4": 34
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaaaaaaaaaaaa\") == 1\nassert solution(\"aaaaaaaaaaaaaa\") == 0\nassert solution(\"a\") == 0\nassert solution(\"aab\") == 1\nassert solution(\"ab\") == 1\n",
        "num_ids_2": 22,
        "num_ids_4": 39
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('a') == 0\nassert solution('aaaaa') == 0\nassert solution('a') == 1\nassert solution('aa') == 1\n",
        "num_ids_2": 16,
        "num_ids_4": 33
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abracadabra\") == 3\nassert solution(\"qwertyuiopasdfghjklzxcvbnm\") == 0\nassert solution(\"qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxc",
        "num_ids_2": 34,
        "num_ids_4": 1505
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 2\nassert solution(\"tt\") == 1\nassert solution(\"et\") == 0\n\nprint('Success')\n\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 33
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"test\") == 2\nassert solution(\"tst\") == 1\nassert solution(\"tt\") == 0\nassert solution(\"et\") == 1\nassert solution(\"ee\") == 0\n",
        "num_ids_2": 17,
        "num_ids_4": 33
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6 2 1\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\"\"\"\n\n\nimport sys\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1,2,1,1) == 2\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"1 1 1 2\") == \"2\"\nassert solution(\"1 2 2 1\") == \"1\"\nassert solution(\"2 2 1 1\") == \"2\"\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\nassert solution(\"1 1 1 1\") == \"1\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 1\") == \"2\"\nassert solution(\"3 2 5 3\") == \"2\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 1 1') == '2'\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 1 1') == '2'\n\"\"\"\n\na, b, c, d = [int(i) for i in stdin.read().split(' ')]\n\nl = [a, b, c, d]\nl = sorted(l)\n\nmax = l[0] * l[1]\n\nprint(max)\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 1 1') == '2'\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 1 4 4 6 7\") == \"2\"\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n9 1 4 4 6 7\") == \"2\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 1 4 4 6 7') == '2'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('6 1 4 4 6 7') == '2'\n\n------Problem Statement-----\n - 2 \\leq N \\leq 10^5\n - N is an even number.\n - 1 \\leq d_i \\leq 10^5\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nd_1 d_2... d_N\n\n-----Output-----\nPrint the number of choices of the integer K that make the number of problems for ARCs and the number of problems for ABCs the same.\n\n-----Sample Input-----\n6\n9 1 4 4 6 7\n\n-----Sample Output-----\n2\n\nIf we choose K=5 or 6, Problem 1, 5, and 6 will be for ARCs, Problem 2, 3, and 4 will be for ABCs, and the objective is achieved.\nThus, the answer is 2.\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n9 1 4 4 6 7') == '2'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n9 1 4 4 6 7\") == \"2\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 1 4 4 6 7\") == 2\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n9 1 4 4 6 7\") == \"2\"\n\n---\nIf you like this Kata, please try:\n\nNice Kata #2 - Dominoes Game\nNice Kata #3 - Intersection of Two Arrays\nNice Kata #4 - Binary String with Ones and Zeroes\nNice Kata #5 - Maximum Sum of Subarray Minimums\nNice Kata #6 - Plus One\nNice Kata #7 - Sum of Digits in Integer\nNice Kata #8 - Rotate String\nNice Kata #9 - Intersection of Two Arrays II\nNice Kata #10 - Reverse Integer\nNice Kata #11 - Decrease Elements To Make Array Zigzag\nNice Kata #12 - Target Sum\nNice Kata #13 - H-Index\nNice Kata #14 - Number of Steps to Reduce a Number to Zero\nNice Kata #15 - Subtract the Product and Sum of Digits of an Integer\nNice Kata #16 - Check if Numbers Are Ascending\nNice Kata #17 - Kth Missing Positive Number\nNice Kata #18 - Restore the Array\nNice Kata #19 - Score of Parentheses\nNice Kata #20 - Remove Nth Node From End of List\nNice Kata #21 - Merge Two Sorted Lists\nNice Kata #22 - Implement Trie (Prefix Tree)\nNice Kata #23 - Merge k Sorted Lists\nNice Kata #24 - Swap Nodes in Pairs\nNice Kata #25 - Insert Interval\nNice Kata #26 - Merge Overlapping Intervals\nNice Kata #27 - Sort Colors\nNice Kata #28 - Implement Trie (Prefix Tree)\nNice Kata #29 - Subtract the Product and Sum of Digits of an Integer\nNice Kata #30 - Insert Interval\nNice Kata #31 - Number of Steps to Reduce a Number to Zero\nNice Kata #32 - Maximum Product of Splitted Concatenated Array\nNice Kata #33 - Number of Longest Increasing Subsequence\nNice Kata #34 - Number of Longest Increasing Subsequence\nNice Kata #35 - How many Numbers Are Smaller Than the Current Number\nNice Kata #36 - Replace Elements with Greatest Element on Right Side\nNice Kata #37 - Leetcode 169 - Majority Element\nNice Kata #38 - JadenCase\nNice Kata #39 - First Bad Version\nNice Kata #40 - Implement Trie (Prefix Tree)\nNice Kata #41 - First Bad Version\nNice Kata #42 - Jump Game\nNice Kata #43 - Partition Array into Disjoint Intervals\nNice Kata #44 - Wildcard Mutation\nNice Kata #45 - Tree Diameter\nNice Kata #46 - Number of Longest Increasing Subsequence\nNice Kata #47 - Number of Longest Increasing Subsequence\nNice Kata #48 - Implement Trie (Prefix Tree)\nNice Kata #49 - Number of Longest Increasing Subsequence\nNice Kata #50 - Number of Longest Increasing Subsequence\nNice Kata #51 - Number of Longest Increasing Subsequence\nNice Kata #52 - Longest Increasing Subsequence\nNice Kata #53 - Maximum Subarray\nNice Kata #54 - Implement Trie (Prefix Tree)\nNice Kata #55 - Implement Trie (Prefix Tree)\nNice Kata #56 - Implement Trie (Prefix Tree)\nNice Kata #57 - Implement Trie (Prefix Tree)\nNice Kata #58 - Implement Trie (Prefix Tree)\nNice Kata #59 - Maximum Product of Splitted Concatenated Array\nNice Kata #60 - Implement Trie (Prefix Tree)\nNice Kata #61 - Number of Longest Increasing Subsequence\nNice Kata #62 - Number of Longest Increasing Subsequence\nNice Kata #63 - Longest Increasing Subsequence\nNice Kata #64 - Longest Increasing Subsequence\nNice Kata #65 - Longest Increasing Subsequence\nNice Kata #66 - Longest Increasing Subsequence\nNice Kata #67 - Longest Increasing Subsequence\nNice Kata #68 - Longest Increasing Subsequence\nNice Kata #69 - Longest Increasing Subsequence\nNice Kata #70 - Longest Increasing Subsequence\nNice Kata #71 - Longest Increasing Subsequence\nNice Kata #72 - Longest Increasing Subsequence\nNice Kata #73 - Longest Increasing Subsequence\nNice Kata #74 - Longest Increasing Subsequence\nNice Kata #75 - Longest Increasing Subsequence\nNice Kata #76 - Longest Increasing Subsequence\nNice Kata #77 - Longest Increasing Subsequence\nNice Kata #78 - Longest Increasing Subsequence\nNice Kata #79 - Longest Increasing Subsequence\nNice Kata #80 - Longest Increasing Subsequence\nNice Kata #81 - Longest Increasing Subsequence\nNice Kata #82 - Longest Increasing Subsequence\nNice Kata #83 - Longest Increasing Subsequence\nNice Kata #84 - Longest Increasing Subsequence\nNice Kata #85 - Longest Increasing Subsequence\nNice Kata #86 - Longest Increasing Subsequence\nNice Kata #87 - Longest Increasing Subsequence\nNice Kata #88 - Longest Increasing Subsequence\nNice Kata #89 - Longest Increasing Subsequence\nNice Kata #90 - Longest Increasing Subsequence\nNice Kata #91 - Longest Increasing Subsequence\nNice Kata #92 - Longest Increasing Subsequence\nNice Kata #93 - Longest Increasing Subsequence\nNice Kata #94 - Longest Increasing Subsequence\nNice Kata #95 - Longest Increasing Subsequence\nNice Kata #96 - Longest Increasing Subsequence\nNice Kata #97 - Longest Increasing Subsequence\nNice Kata #98 - Longest Increasing Subsequence\nNice Kata #99 - Longest Increasing Subsequence\nNice Kata #100 - Longest Increasing Subsequence\nNice Kata #101 - Longest Increasing Subsequence\nNice Kata #102 - Longest Increasing Subsequence\nNice Kata #103 - Longest Increasing Subsequence\nNice Kata #104 - Longest Increasing Subsequence\nNice Kata #105 - Longest Increasing Subsequence\nNice Kata #106 - Longest Increasing Subsequence\nNice Kata #107 - Longest Increasing Subsequence\nNice Kata #108 - Longest Increasing Subsequence\nNice Kata #109 - Longest Increasing Subsequence\nNice Kata #110 - Longest Increasing Subsequence\nNice Kata #111 - Longest Increasing Subsequence\nNice Kata #112 - Longest Increasing Subsequence\nNice Kata #113 - Longest Increasing Subsequence\nNice Kata #114 - Longest Increasing Subsequence\nNice Kata #115 - Longest Increasing Subsequence\nNice Kata #116 - Longest Increasing Subsequence\nNice Kata #117 - Longest Increasing Subsequence\nNice Kata #118 - Longest Increasing Subsequence\nNice Kata #119 - Longest Increasing Subsequence\nNice Kata #120 - Longest Increasing Subsequence\nNice Kata #121 - Longest Increasing Subsequence\nNice Kata #122 - Longest Increasing Subsequence\nNice Kata #123 - Longest Increasing Subsequence\nNice Kata #124 - Longest Increasing Subsequence\nNice Kata #125 - Longest Increasing Subsequence\nNice Kata #126 - Longest Increasing Subsequence\nNice Kata #127 - Longest Increasing Subsequence\nNice Kata #128 - Longest Increasing Subsequence\nNice Kata #129 - Longest Increasing Subsequence\nNice Kata #130 - Longest Increasing Subsequence\nNice Kata #131 - Longest Increasing Subsequence\nNice Kata #132 - Longest Increasing Subsequence\nNice Kata #133 - Longest Increasing Subsequence\nNice Kata #134 - Longest Increasing Subsequence\nNice Kata #135 - Longest",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 9 8 10') == 3\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2 3 4\") == \"2\"\nassert solution(\"6 1 2 3 4 4 6\") == \"2\"\nassert solution(\"8 1 2 3 4 4 6 7 8\") == \"2\"\nassert solution(\"10 1 2 3 4 4 6 7 8 9 10\") == \"2\"\nassert solution(\"12 1 2 3 4 4 6 7 8 9 10 11 12\") == \"2\"\n\"\"\"\n\nimport unittest",
        "num_ids_2": 30,
        "num_ids_4": 68
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 24 21 23\\n16 17 14 20 20 11 22') == '3'\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\nassert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\\n16 17 14 20 20 11 22\") == \"3\"\nassert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\\n16 17 14 20 20 11 22\\n16 17 14 20 20 11 22\") == \"3\"\nassert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\\n16 17 14 20 20 11 22\\n16 17 14 20 20 11 22\\n16 17 14 20 20 11 22\") == \"3\"",
        "num_ids_2": 53,
        "num_ids_4": 142
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 24 21 23\") == 3\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 24 21 23\") == 3\n\"\"\"\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ngood_times = 0",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 24 21 23\") == 3\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 24 21 23\\n16 17 14 20 20 11 22') == '3'\n\"\"\"\n\nfrom datetime import datetime\nfrom typing import List\n\n\nclass Solution:\n    \"\"\"\n    Complexity:\n        Time: O(n)\n        Space: O(1)\n    \"\"\"\n\n    def solve(self, n: int, h: int, l: int, r: int, a: List[int]) -> int:\n        \"\"\"\n        Complexity:\n            Time: O(n)\n            Space: O(1)\n        \"\"\"\n        return sum([1 for x in a if l <= x < r])\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 24 21 23\") == 3\n\"\"\"\n\nimport os\n\nfrom collections import deque\nfrom typing import Deque, List, Set\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 24 21 23\") == 3\n\"\"\"\n\nimport unittest\nfrom typing import List\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''7 24 21 23\n16 17 14 20 20 11 22''') == '3'\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\\n\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\"\n\nprint(\"All test cases passed.\")\n",
        "num_ids_2": 43,
        "num_ids_4": 63
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\\n\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 43,
        "num_ids_4": 63
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49') == '4'\nassert solution('5\\n2 10 50 110 250') == '1'\nassert solution('6\\n4 7 12 100 150 199') == '3'",
        "num_ids_2": 39,
        "num_ids_4": 57
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '0'\nassert solution('10\\n1 2 5 6 7 10 21 23 24 49') == '4'\nassert solution('5\\n2 10 50 110 250') == '1'\nassert solution('6\\n4 7 12 100 150 199') == '3'\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 67
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\\n\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\"\n\n\"\"\"\n",
        "num_ids_2": 43,
        "num_ids_4": 63
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('2') == '2'\nassert solution('1 1') == '1'\nassert solution('1\\n2') == '2'\n",
        "num_ids_2": 18,
        "num_ids_4": 39
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49\\n') == '4'\nassert solution('5\\n2 10 50 110 250\\n') == '1'\nassert solution('6\\n4 7 12 100 150 199\\n') == '3'\n\"\"\"\n\nfrom typing import List, Dict, Union, Tuple\nfrom collections import deque, namedtuple\nfrom math import inf\nfrom sys import stdin\n\nDEBUG = False\n",
        "num_ids_2": 43,
        "num_ids_4": 63
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49') == '4'\nassert solution('5\\n2 10 50 110 250') == '1'\nassert solution('6\\n4 7 12 100 150 199') == '3'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 39,
        "num_ids_4": 57
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\nassert solution(\"6\\n2 5 10 1 10 2\") == \"1 4\"\n\n\"\"\"\n\nimport sys\nfrom typing import List\n\nsys.stdin = open('test_files/Y11R5P1/A.in', 'r')\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\n\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == '1 2'\nassert solution(\"6\\n2 5 10 1 10 2\") == '1 4'\n\n\"\"\"\n\nimport math\nfrom collections import Counter",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2\\n') == '1 2'\nassert solution('5\\n2 4 8 3 6') == '1 2'\nassert solution('6\\n2 5 10 1 10 2') == '1 4'\nassert solution('5\\n2 11 3 7') == '1 2'\n",
        "num_ids_2": 21,
        "num_ids_4": 58
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\nassert solution(\"6\\n2 5 10 1 10 2\") == \"1 4\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 4 8 3 6\\n\") == \"1 2\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n2 4 8 3 6\n''') == '1 2'\n\nassert solution('''5\n5 2 11 3 7\n''') == '2 4'\n\nassert solution('''6\n2 5 10 1 10 2\n''') == '1 4'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 2 1\") == \"1 2\"\nassert solution(\"4 3 2 1\") == \"1 2\"\nassert solution(\"4 3 2 1\") == \"1 2\"\nassert solution(\"4 3 2 1\") == \"1 2\"\nassert solution(\"4 3 2 1\") == \"1 2\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n2 5 10 1 10 2\") == \"1 4\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 8 3 6\") == \"1 2\"\nassert solution(\"5 2 11 3 7\") == \"2 4\"\nassert solution(\"6 2 5 10 1 10 2\") == \"1 4\"\n\n\"\"\"\n\nimport math\n\nn = int(input())\na = list(map(int, input().split()))\n",
        "num_ids_2": 30,
        "num_ids_4": 47
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"121\") == \"021\"\nassert solution(\n\"000000\") == \"001122\"\nassert solution(\n\"211200\") == \"211220\"\nassert solution(\n\"120110\") == \"120120\"\nassert solution(\n\"12110\") == \"112110\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('121') == '021'\nassert solution('1100100') == '120120'\nassert solution('211200') == '211200'\n\"\"\"\nfrom typing import List\n\ns = input()\n\nzero_count = 0\none_count = 0\ntwo_count = 0\nfor i in range(len(s)):\n    if s[i] == '0':\n        zero_count += 1\n    if s[i] == '1':\n        one_count += 1\n    if s[i] == '2':\n        two_count += 1\n\nprint('0' * (zero_count - 1) + '1' * (one_count - 1) + '2' * (two_count - 1))\n",
        "num_ids_2": 23,
        "num_ids_4": 35
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"12010\") == \"120120\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"211200\") == \"120120\"\nassert solution
        "num_ids_2": 1605,
        "num_ids_4": 1605
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"121\") == \"021\"\n\nassert solution(\"100100\") == \"101100\"\n\nassert solution(\"11112\") == \"111111\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 34
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"120110\") == \"120120\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"1100101\") == \"1011010\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"211200\") == \"211220\"\nassert solution(\"120110\") == \"120120\"\n\nprint(\"Passed!\")\n\"\"\"\nimport collections\n\n\nclass Ternary:\n    def __init__(self, str_):\n        self.ternary_string = str_\n\n    def __repr__(self):\n        return \" \".join(self.ternary_string)\n\n    def __len__(self):\n        return len(self.ternary_string)\n\n    def __iter__(self):\n        self.i = 0\n        return self\n\n    def __next__(self):\n        if self.i < len(self.ternary_string):\n            self.i += 1\n            return self.ternary_string[self.i - 1]\n        else:\n            raise StopIteration\n\n    def __getitem__(self, index):\n        return self.ternary_string[index]\n\n    def __setitem__(self, index, value):\n        self.ternary_string[index] = value\n\n    def __delitem__(self, index):\n        del self.ternary_string[index]\n\n    def __add__(self, other):\n        self.ternary_string += other\n\n    def __radd__(self, other):\n        return self.__add__(other)\n\n    def __iadd__(self, other):\n        return self.__add__(other)\n\n    def __eq__(self, other):\n        if len(self.ternary_string)!= len(other):\n            return False\n        for i in range(len(self)):\n            if self[i]!= other[i]:\n                return False\n        return True\n\n    def __contains__(self, other):\n        return other in self.ternary_string\n\n    def __len__(self):\n        return len(self.ternary_string)\n\n    def __lt__(self, other):\n        if self.ternary_string < other.ternary_string:\n            return True\n        return False\n\n    def __le__(self, other):\n        if self.ternary_string < other.ternary_string:\n            return True\n        if len(self.ternary_string) < len(other):\n            return True\n        return False\n\n    def __gt__(self, other):\n        if self.ternary_string > other.ternary_string:\n            return True\n        return False\n\n    def __ge__(self, other):\n        if self.ternary_string > other.ternary_string:\n            return True\n        if len(self.ternary_string) > len(other):\n            return True\n        return False\n",
        "num_ids_2": 23,
        "num_ids_4": 37
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('121') == '021'\nassert solution('211200') == '211220'\nassert solution('120110') == '120120'\nassert solution('110110') == '110120'\nassert solution('110111') == '110121'\n",
        "num_ids_2": 23,
        "num_ids_4": 51
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1110110111') == '101101110'\nassert solution('10111101101110') == '101101110'\nassert solution('10111101101110') == '101101110'\nassert solution('10111101101110') == '101101110'\n\nassert solution('10111101101110') == '101101110'\n",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 1\\n3\\n\") == \"4\"\n\"\"\"\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().strip().split())\n\nstairs = [[] for _ in range(N+1)]\n\nfor step in range(1, N+1):\n    if step - 1 >= 1:\n        stairs[step - 1].append(step)\n    if step + 1 <= N:\n        stairs[step + 1].append(step)\n\nfor step in range(1, N+1):\n    if step in stairs[step]:\n        stairs[step].remove(step)\n\nprint(len([step for step in stairs[M] if len(stairs[step]) >= 1]))\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\nprint('Success!')",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1\\n3\") == '4'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 1\\n3') == '4'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"3 1\\n3\"\n) == \"4\"\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(1000000)\n\n\nclass Solution:\n    def __init__(self, num_of_steps: int, steps: str):\n        self.steps = steps\n        self.num_of_steps = num_of_steps\n        self.cache = {}\n\n    def solve(self) -> int:\n        \"\"\"\n        0 = [0,0,0,0,0,0,0,0,0,0]\n        1 = [0,1,1,1,1,1,1,1,1,1]\n        2 = [0,1,0,1,0,0,1,1,1,1]\n        3 = [0,1,0,0,0,1,0,0,1,1]\n        4 = [0,0,0,1,0,0,0,0,0,1]\n        5 = [0,0,0,0,0,0,0,1,0,0]\n        6 = [0,0,0,0,0,0,0,0,0,0]\n\n        \"\"\"\n        # 0 <= i < self.num_of_steps+1\n        # f(i) = f(i-1) + f(i-2) + f(i-3)\n        # f(0) = f(1) = 0\n        # f(1) = 1\n        # f(2) = 2\n        # f(3) = 4\n        # f(4) = 7\n        # f(5) = 12\n        # f(6) = 20\n        # f(7) = 36\n        # f(8) = 84\n        # f(9) = 252\n        # f(10) = 1097\n        # f(11) = 3516\n        # f(12) = 12587\n        # f(13) = 53284\n        # f(14) = 162964\n\n        # f(i) = f(i-1) + f(i-2) + f(i-3)\n        # f(0) = 0\n        # f(1) = 1\n        # f(2) = 2\n        # f(3) = 4\n        # f(4) = 7\n        # f(5) = 12\n        # f(6) = 20\n        # f(7) = 36\n        # f(8) = 84\n        # f(9) = 252\n        # f(10) = 1097\n        # f(11) = 3516\n        # f(12) = 12587\n        # f(13) = 53284\n        # f(14) = 162964\n        # f(15) = 53284 + 12587\n        # f(16) = 53284 + 12587 + 3516\n        # f(17) = 53284 + 12587 + 3516 + 3516\n        # f(18) = 53284 + 12587 + 3516 + 3516 + 3516\n        # f(19) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516\n        # f(20) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516 + 3516\n        # f(21) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516\n        # f(22) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516\n        # f(23) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516\n        # f(24) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516\n        # f(25) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516\n        # f(26) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516\n        # f(27) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516\n        # f(28) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516\n        # f(29) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516\n        # f(30) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516\n        # f(31) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516\n\n        # f(i) = f(i-1) + f(i-2) + f(i-3) + f(i-4) + f(i-5) + f(i-6) + f(i-7) + f(i-8) + f(i-9) + f(i-10) + f(i-11) + f(i-12) + f(i-13) + f(i-14) + f(i-15) + f(i-16) + f(i-17) + f(i-18) + f(i-19) + f(i-20) + f(i-21) + f(i-22) + f(i-23) + f(i-24) + f(i-25) + f(i-26) + f(i-27) + f(i-28) + f(i-29) + f(i-30) + f(i-31) + f(i-32)\n        # f(0) = 0\n        # f(1) = 1\n        # f(2) = 2\n        # f(3) = 4\n        # f(4) = 7\n        # f(5) = 12\n        # f(6) = 20\n        # f(7) = 36\n        # f(8) = 84\n        # f(9) = 252\n        # f(10) = 1097\n        # f(11) = 3516\n        # f(12) = 12587\n        # f(13) = 53284\n        # f(14) = 162964\n        # f(15) = 53284 + 12587\n        ",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 1\\n3') == '4'\n\n-------------\n\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 1\\n3') == '4'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\\n2\\n3\\n\") == \"4\"\nassert solution(\"6\\n4\\n5\\n3\\n1\\n2\\n\") == \"5\"\n\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 1\\n3\") == \"4\"\n\"\"\"\n\n\nfrom collections import deque\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"6 1\\n\"\n\"3\"\n) == \"4\"\nassert solution(\n\"4 1\\n\"\n\"1\"\n) == \"1\"\nassert solution(\n\"3 1\\n\"\n\"1\"\n) == \"1\"\nassert solution(\n\"3 2\\n\"\n\"1 1\"\n) == \"2\"\nassert solution(\n\"5 3\\n\"\n\"1 1 1\\n\"\n\"1 1 1\\n\"\n\"1 1 1\"\n) == \"4\"\n\"\"\"\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n\nX, K, D = input().split()\n\nX, K, D = int(X), int(K), int(D)\n\nmin_abs = abs(X)\n\nfor i in range(K):\n    min_abs = min(abs(X), min_abs)\n    if X < 0:\n        X += D\n    else:\n        X -= D\n\nprint(min_abs)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5 -1') == '5'\nassert solution('3 0 -2') == '3'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 2 4\\n') == '2'\n\"\"\"\n\nfrom math import ceil\n\nx, k, d = map(int, input().split(' '))\n\nmoves = ceil(d / 2) * k\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n6 2 4\n''') == '2'\nassert solution('''\n6 2 -4\n''') == '2'\nassert solution('''\n6 2 4\n''') == '2'\nassert solution('''\n-6 2 4\n''') == '2'\nassert solution('''\n1000000000000 1 1\n''') == '1'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 2 4') == '2'\nassert solution('1 2 3') == '1'\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 4\\n3 2 1\\n5 2 3\\n1 4 3\") == \"1\"\n\"\"\"\n\n\nimport sys\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '-1 2 -3'\n) == '2'\nassert solution(\n    '4 5 -6'\n) == '0'\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 2 4\\n') == '2'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 2 4') == '2'\nassert solution('-1 1 1') == '-2'\nassert solution('0 2 1') == '2'\n",
        "num_ids_2": 26,
        "num_ids_4": 38
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 10\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 16,
        "num_ids_4": 25
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11\") == 2\nassert solution(\"14\") == 0\nassert solution(\"61441\") == 10\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 25
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 10\nassert solution('2128506') == 3\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 35
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11') == 2\nassert solution('61441') == 10\nassert solution('2128506') == 3\nassert solution('1') == 0\n",
        "num_ids_2": 17,
        "num_ids_4": 35
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"3\") == 2\nassert solution(\"4\") == 3\nassert solution(\"5\") == 5\nassert solution(\"6\") == 8\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11\") == 2\nassert solution(\"14\") == 0\nassert solution(\"61441\") == 10\nassert solution(\"571576\") == 3\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 35
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"61441\") == 2\nassert solution(\"2128506\") == 3\nassert solution(\"2000000000\") == 0\n",
        "num_ids_2": 19,
        "num_ids_4": 28
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\") == \"2\"\nassert solution(\"61441\") == \"10\"\nassert solution(\"571576\") == \"3\"\n\nprint(\"All test cases passed.\")\n",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('14') == '0'\nassert solution('14') == '0'\nassert solution('14') == '0'\nassert solution('14') == '0'\nassert solution('14') == '0'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\") == 2\nassert solution(\"14\") == 0\nassert solution(\"61441\") == 10\nassert solution(\"571576\") == 3\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 35
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == 27\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == 27\n\"\"\"\n\na = int(input())\nprint(a * (a + 1) // 2)",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == 27\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 2\nassert solution(\"3\") == 3\nassert solution(\"10\") == 27\nassert solution(\"20\") == 17\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == 27\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == 27\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == solution(stdin)\n-------------------------------\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == 27\n\n----",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == 27\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1",
        "num_ids_2": 1974,
        "num_ids_4": 1974
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\"\n",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n\nprint('all tests passed.')\n",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13\") == 1\nassert solution(\"927\") == 1\nassert solution(\"48\") == 0\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 25
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(int(input()))\n\nassert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n\"\"\"\n\nimport sys",
        "num_ids_2": 27,
        "num_ids_4": 48
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\"\n\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\nassert solution('35') == '0'\n\n\"\"\"\n\nimport os\nfrom io import StringIO\nimport unittest",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13') == '1'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n\n\n-----Explanation-----\nYou can read the input using the stdin.readlines() method.\nThe input method always returns a list of strings, even if there is just one line of input, so we must index the first element using 0.",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 3 1') == 4\n\n-----How to run-----\nInput the test cases to the problem in the editor and press \"Run\"\nPress \"Run\" again to execute the tests and find the correct solution\n\n-----Problem-----\n\nTwo integers are passed to your function.\nThe first is a and the second is b.\nYour function must return the smallest possible value of the following expression:\n\na^b % d\n\nwhere d = 1337.\n\nReturn the result modulo 1337.\n\nConstraints:\n\n1 \u2264 a \u2264 10\n1 \u2264 b \u2264 1337\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5 3 1\") == \"4\"\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 3 1\") == \"4\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5 3 1') == '4'",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 5 1\") == \"4\"\n\n-----Problem-----\n\nFind the minimum number of coins needed to make change for an amount.\n\n-----Solution-----\n\nhttps://www.hackerrank.com/challenges/coin-change/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=dynamic-programming\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5 3 1') == 4\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 3 1\") == 4\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('2 5 3 1') == 4\nassert solution('2 5 1 3') == 4\nassert solution('2 5 6 5') == 5\nassert solution('5 5 6 5') == 6\n",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 3 1\") == 4\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('1 2') == '1'\nassert solution('2 2') == '1'\nassert solution('1 0') == '0'\n",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 7\") == 2\nassert solution(\"8 1\") == 8\nassert solution(\"6 10\") == 1\nassert solution(\"999999733 999999733\") == 9999999733\nassert solution(\"999999733 999999733\") == 1\n",
        "num_ids_2": 18,
        "num_ids_4": 44
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''8 7''') == '2'\nassert solution('''8 1''') == '8'\nassert solution('''6 10''') == '1'\nassert solution('''999999733 999999732''') == '999999733'\nassert solution('''999999733 999999733''') == '1'\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 63
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"8 1\\n8 1\"\n) == \"2\\n8\\n1\"\n\nassert solution(\n    \"8 7\\n8 1\"\n) == \"2\\n8\\n1\"\n\nassert solution(\n    \"999999733 999999732\\n999999733 999999733\"\n) == \"999999733\\n999999733\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\nprint('Success')\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 51
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733') == 2\nassert solution('8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733') == 8\nassert solution('8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733') == 1\nassert solution('8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733') == 999999733\n",
        "num_ids_2": 70,
        "num_ids_4": 143
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 7\\n8 1\\n6 10') == '2\\n8\\n1\\n999999733\\n1'\n\nassert solution('8 7\\n8 1\\n6 10') == '2\\n8\\n1\\n999999733\\n1'\n\nassert solution('8 7\\n8 1\\n6 10') == '2\\n8\\n1\\n999999733\\n1'\n",
        "num_ids_2": 66,
        "num_ids_4": 99
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 7\\n8 1\\n6 10') == '2\\n8\\n1\\n999999733\\n1'\nprint('Success')\n\n'''\n\nimport sys\nimport functools",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\nassert solution(\"3 3\\n1 1 2 3\\n1 2\\n0 1\") == \"1\"\nassert solution(\"4 4\\n1 1 2 3\\n1 2\\n0 1\\n0 2\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 49,
        "num_ids_4": 78
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\nassert solution(\"5 2\\n1 2\\n1 3\\n1 4\\n4 5\") == \"9\"\nassert solution(\"5 2\\n1 2\\n1 3\\n1 4\\n4 5\") == \"9\"\n",
        "num_ids_2": 51,
        "num_ids_4": 78
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == 1\n\"\"\"\n\n\nfrom collections import Counter\n\nn, m = [int(c) for c in stdin.readline().strip().split()]\n\ncnt = Counter()\nfor _ in range(m):\n    k = int(stdin.readline())\n    s = [int(c) for c in stdin.readline().strip().split()]\n    cnt[k] += sum(s) % 2\n\nprint(sum(c * (c - 1) // 2 for c in cnt.values()))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\n----\n3 4\n3 1 2 3\n1 3 1\n0 1 2\n\n4 1\n1 1 1 1\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\n\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == 1\n\"\"\"\nimport math\n\nN, M = map(int, input().split())\narr = []\nfor i in range(M):\n    arr.append(list(map(int, input().split())))\n\narr1 = []\nfor i in range(N):\n    for j in range(N):\n        arr1.append([i+1, j+1])\n\narr2 = []\nfor i in range(N):\n    for j in range(M):\n        arr2.append([i+1, j+1])\n\narr3 = []\nfor i in range(N):\n    for j in range(M):\n        arr3.append([j+1])\n\narr4 = []\nfor i in range(N):\n    for j in range(M):\n        arr4.append([i+1])\n\narr5 = []\nfor i in range(N):\n    for j in range(M):\n        arr5.append([j+1])\n\narr6 = []\nfor i in range(M):\n    for j in range(N):\n        arr6.append([i+1])\n\narr7 = []\nfor i in range(M):\n    for j in range(N):\n        arr7.append([j+1])\n\nfor i in range(M):\n    arr1.remove(arr[i])\n\narr8 = []\nfor i in range(M):\n    for j in range(M):\n        arr8.append([i+1, j+1])\n\narr9 = []\nfor i in range(M):\n    for j in range(N):\n        arr9.append([i+1, j+1])\n\narr10 = []\nfor i in range(N):\n    for j in range(M):\n        arr10.append([j+1])\n\narr11 = []\nfor i in range(N):\n    for j in range(M):\n        arr11.append([i+1])\n\narr12 = []\nfor i in range(N):\n    for j in range(M):\n        arr12.append([j+1])\n\narr13 = []\nfor i in range(M):\n    arr13.append(arr[i])\n\narr14 = []\nfor i in range(M):\n    arr14.append(arr[i])\n\narr15 = []\nfor i in range(M):\n    arr15.append(arr[i])\n\narr16 = []\nfor i in range(M):\n    arr16.append(arr[i])\n\narr17 = []\nfor i in range(M):\n    arr17.append(arr[i])\n\narr18 = []\nfor i in range(N):\n    arr18.append(arr1[i])\n\narr19 = []\nfor i in range(N):\n    arr19.append(arr1[i])\n\narr20 = []\nfor i in range(N):\n    arr20.append(arr1[i])\n\narr21 = []\nfor i in range(N):\n    arr21.append(arr1[i])\n\narr22 = []\nfor i in range(N):\n    arr22.append(arr1[i])\n\narr23 = []\nfor i in range(N):\n    arr23.append(arr1[i])\n\narr24 = []\nfor i in range(M):\n    arr24.append(arr2[i])\n\narr25 = []\nfor i in range(M):\n    arr25.append(arr2[i])\n\narr26 = []\nfor i in range(M):\n    arr26.append(arr2[i])\n\narr27 = []\nfor i in range(M):\n    arr27.append(arr2[i])\n\narr28 = []\nfor i in range(M):\n    arr28.append(arr2[i])\n\narr29 = []\nfor i in range(M):\n    arr29.append(arr2[i])\n\narr30 = []\nfor i in range(M):\n    arr30.append(arr2[i])\n\narr31 = []\nfor i in range(M):\n    arr31.append(arr2[i])\n\narr32 = []\nfor i in range(M):\n    arr32.append(arr2[i])\n\narr33 = []\nfor i in range(N):\n    arr33.append(arr3[i])\n\narr34 = []\nfor i in range(N):\n    arr34.append(arr3[i])\n\narr35 = []\nfor i in range(N):\n    arr35.append(arr3[i])\n\narr36 = []\nfor i in range(N):\n    arr36.append(arr3[i])\n\narr37 = []\nfor i in range(N):\n    arr37.append(arr3[i])\n\narr38 = []\nfor i in range(N):\n    arr38.append(arr3[i])\n\narr39 = []\nfor i in range(N):\n    arr39.append(arr3[i])\n\narr40 = []\nfor i in range(N):\n    arr40.append(arr3[i])\n\narr41 = []\nfor i in range(M):\n    arr41.append(arr4[i])\n\narr42 = []\nfor i in range(M):\n    arr42.append(arr4[i])\n\narr43 = []\nfor i in range(M):\n    arr43.append(arr4[i])\n\narr44 = []\nfor i in range(M):\n    arr44.append(arr4[i])\n\narr45 = []\nfor i in range(M):\n    arr45.append(arr4[i])\n\narr46 = []\nfor i in range(M):\n    arr46.append(arr4[i])\n\narr47 = []\nfor i in range(M):\n    arr47.append(arr4[i])\n\narr48 = []\nfor i in range(M):\n    arr48.append(arr4[i])\n\narr49 = []\nfor i in range(M):\n    arr49.append(arr4[i])\n\narr50 = []\nfor i in range(N):\n    arr50.append(arr5[i])\n\narr51 = []\nfor i in range(N):\n    arr51.append(arr5[i])\n\narr52 = []\nfor i in range(N):\n    arr52.append(arr5[i])\n\narr53 = []\nfor i in range(N):\n    arr53.append(",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\\n\") == \"1\"\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == 1\n\n\"\"\"\n\nimport math\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\"\"\"\nimport unittest\nfrom typing import Dict, List\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \"\"\"O(N) time, O(1) space\"\"\"\n        n, m = map(int, stdin.split())\n        on_count = [0] * n\n        off_count = [0] * n\n        num_on = 0\n        for i in range(m):\n            on_count[int(stdin.split()[i]) - 1] += 1\n            num_on += 1\n        for i in range(n):\n            off_count[i] = num_on - on_count[i]\n        #print(on_count)\n        #print(off_count)\n        num_on = 0\n        num_off = 0\n        for i in range(m):\n            if off_count[int(stdin.split()[i]) - 1] % 2 == 0:\n                num_on += 1\n            else:\n                num_off += 1\n        #print(num_on, num_off)\n        if num_on == num_off:\n            return str(2 ** num_on - 1)\n        else:\n            return str(2 ** num_on)\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        pass\n\n    def tearDown(self) -> None:\n        pass\n\n    def test_solution(self):\n        stdin = \"2 2\\n2 1 2\\n1 2\\n0 1\"\n        expected = \"1\"\n        self.assertEqual(Solution().solution(stdin), expected)\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\n\"\"\"\n\nimport math\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 12 0\") == \"5.0000000000\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\n\"\"\"\n\nimport math\nimport sys\n\nlines = []\nfor line in sys.stdin:\n    lines.append(line.rstrip('\\n'))\n    \nA, B, H, M = lines[0].split()\n\nA, B = int(A), int(B)\nH, M = int(H), int(M)\n\nT = (12 * H + M) / 720 * math.pi\n\nx = A * math.cos(T)\ny = A * math.sin(T)\n\nd = ((x - B) ** 2 + (y - B) ** 2) ** 0.5\n\nprint(d)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1 1\") == \"3.0\"\nassert solution(\"1 1 1 1\") == \"0.0\"\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\"\nimport sys\n\nA, B, H, M = map(int, sys.stdin.readline().strip().split())\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\\n\") == \"8\"\n\"\"\"\nimport math",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n1 1 1\") == \"6\"\nassert solution(\"5 4\\n1 4 5 60 4\") == \"8\"\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List\n\n\nclass Solution:\n    def get_median_count(self, n: int, m: int, a: List[int]) -> int:\n        # assume median is unique\n        # so if median is in list, the count is the same as when it appears once\n        c = Counter(a)\n        median = (n + 1) // 2\n        return c[m] if m in c else 0\n\n    def get_median_count2(self, n: int, m: int, a: List[int]) -> int:\n        c = Counter(a)\n        a = sorted(a)\n        median = (n + 1) // 2\n        if m in c:\n            count = c[m]\n            start = 0\n            end = n - 1\n            while True:\n                if start == end:\n                    break\n                mid = (start + end) // 2\n                if m == a[mid]:\n                    count += 1\n                    break\n                elif m < a[mid]:\n                    end = mid - 1\n                else:\n                    start = mid + 1\n            if count % 2:\n                # odd\n                return (end + 1 - start) // 2\n            else:\n                # even\n                return (end + 1 - start) // 2 + 1\n        else:\n            # m not in a\n            left = 0\n            right = n - 1\n            while True:\n                if left == right:\n                    break\n                mid = (left + right) // 2\n                if a[mid] >= m:\n                    right = mid\n                else:\n                    left = mid + 1\n            if m < a[left]:\n                return left\n            else:\n                return left + 1\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == 8\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 2\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n''') == '8'\nassert solution('''5 2\n1 4 5 60 4\n''') == '8'\nassert solution('''5 1\n1 4 5 60 4\n''') == '6'\n\n'''\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5 4\n1 4 5 60 4\"\"\") == \"8\"\n\nassert solution(\"\"\"3 1\n1 1 1\"\"\") == \"6\"\n\nassert solution(\"\"\"15 2\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\"\"\") == \"97\"\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\") == \"8\"\nassert solution(\"1 4 5 60 4\") == \"8\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5') == '8'\nassert solution('3 1') == '6'\nassert solution('15 2') == '97'\nprint('Success')",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 4 5 60 4\") == \"8\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n1 4 5 60 4') == '8'\nassert solution('3 1\\n1 1 1') == '6'\nassert solution('15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3') == '97'\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 62
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n') == '7\\n2\\n1 4'\nassert solution('1 0\\n1000000\\n') == '0\\n0'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2'\nassert solution('5 4\\n1 -1 2 3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n3\\n2 2'\n",
        "num_ids_2": 64,
        "num_ids_4": 148
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\\n\") == \"0\\n0\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n3 2\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n3 2\"\n",
        "num_ids_2": 88,
        "num_ids_4": 152
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"7\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\n",
        "num_ids_2": 84,
        "num_ids_4": 144
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n') == '6\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000\\n') == '0\\n0'\nprint('Test passed\\n')",
        "num_ids_2": 88,
        "num_ids_4": 108
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == '6\\n2\\n1 4'\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n",
        "num_ids_2": 84,
        "num_ids_4": 102
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4 2 -2 3 1 2\") == \"6\"\nassert solution(\"5 4 2 -2 3 1 4\") == \"7\"\nassert solution(\"1000000\") == \"0\"",
        "num_ids_2": 34,
        "num_ids_4": 45
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\n",
        "num_ids_2": 84,
        "num_ids_4": 144
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\") == '7\\n2\\n1 4'\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == '7\\n2\\n3 2'\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == '7\\n2\\n3 2'\nassert solution(\"1 0\\n1000000\") == '0\\n0'\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == '7\\n2\\n3 2'\n\n\"\"\"",
        "num_ids_2": 80,
        "num_ids_4": 140
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\n",
        "num_ids_2": 76,
        "num_ids_4": 136
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"fced\\nxyz\\nr\\ndabcef\\naz\\n\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\n\nsolution(stdin.read())\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"fced\\nxyz\\nr\\ndabcef\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\\naz\\nabcef\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\\nbaccef\") == \"No\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\"\n\n\"\"\"",
        "num_ids_2": 89,
        "num_ids_4": 132
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '7\\n2\\n4 1'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n",
        "num_ids_2": 84,
        "num_ids_4": 102
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\") == \"7\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\"\nassert solution(\"1 0\\n1000000\") == \"0\"\n\"\"\"\nimport sys\nfrom typing import List, Dict, Set, Tuple\nfrom collections import namedtuple\n\nclass Segment:\n    def __init__(self, l: int, r: int):\n        self.l: int = l\n        self.r: int = r",
        "num_ids_2": 66,
        "num_ids_4": 81
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution([\"5 4\", \"2 -2 3 1 2\", \"1 3\", \"4 5\", \"2 5\", \"1 3\"]) == \"6\\n2\\n4 1\"\nassert solution([\"5 4\", \"2 -2 3 1 2\", \"3 5\", \"3 4\", \"2 4\", \"2 5\"]) == \"7\\n2\\n3 2\"\nassert solution([\"1 0\", \"1000000\"]) == \"0\\n0\"\n",
        "num_ids_2": 88,
        "num_ids_4": 108
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\") == \"2 1\"\nassert solution(\"1 0\") == \"0 0\"\nassert solution(\"1 1000000000\") == \"0 0\"\nassert solution(\"1 2\") == \"0 1\"\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n",
        "num_ids_2": 84,
        "num_ids_4": 102
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"7\\n2\\n4 1\\n\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n3 2\\n\"\nassert solution(\"1 0\\n1000000\\n\") == \"0\\n0\\n\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"6\\n2\\n4 1\\n\"\n",
        "num_ids_2": 92,
        "num_ids_4": 160
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n",
        "num_ids_2": 84,
        "num_ids_4": 102
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == '6\\n2\\n4 1'\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == '7\\n2\\n3 2'\nassert solution(\"1 0\\n1000000\") == '0\\n0'\n",
        "num_ids_2": 84,
        "num_ids_4": 102
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n4 1'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n\"\"\"\n",
        "num_ids_2": 84,
        "num_ids_4": 102
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == '6\\n2\\n4 1'\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == '7\\n2\\n3 2'\nassert solution(\"1 0\\n1000000\") == '0\\n0'\n\n\n\n\n\n\n\n\n\n-----\n\nfrom collections import deque",
        "num_ids_2": 86,
        "num_ids_4": 104
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\") == 0\nassert solution(\"1\") == 1\nassert solution(\"1 2\") == 0\nassert solution(\"2 1\") == 0\nassert solution(\"1 2 5 4 3\") == 4\n",
        "num_ids_2": 15,
        "num_ids_4": 33
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 5 4 3\") == 4\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\"\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 87
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4\\nLRRR'\nassert solution('7\\n1 3 5 6 7 4 2') == '7\\nLRLRLLL'\nassert solution('3\\n1 2 3') == '3\\nLLL'\nassert solution('4\\n1 2 4 3') == '4\\nLLRL'\n\n'''\nimport math\n",
        "num_ids_2": 48,
        "num_ids_4": 87
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nRRL\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\"\n",
        "num_ids_2": 46,
        "num_ids_4": 85
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 1 5 4 3\\n') == '4\\nRLLL'\n\"\"\"\n\nfrom typing import List\n\nN = int(input())\na = list(map(int, input().split()))\n\n\"\"\"\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[2, 1, 5, 4, 3]\n[1, 2, 3, 5, 4]\n[1, 2, 3, 4, 5]\n\"\"\"\n\nr = [1 for _ in range(N)]\nans = [0 for _ in range(N)]\n\nfor i in range(N):\n    ans[i] = a[i] * r[i]\n    for j in range(i):\n        if a[j] < a[i]:\n            if ans[j] > ans[i]:\n                ans[i] = ans[j] + a[i]\n    r[i] += 1\n\nprint(max(ans))\nprint('L' * ans.index(max(ans)) + 'R' * (ans.index(max(ans)) + 1))",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\"\n\"\"\"\n",
        "num_ids_2": 48,
        "num_ids_4": 87
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5\n2 1 5 4 3\n\"\"\") == '4'\n\"\"\"\n\"\"\"\n",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\"\nassert solution(\"3\\n1 2 3\") == \"3\"\nassert solution(\"4\\n1 2 4 3\") == \"4\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\"\n",
        "num_ids_2": 36,
        "num_ids_4": 67
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 1 5 4 3') == 4\nassert solution('7\\n1 3 5 6 7 4 2') == 7\nassert solution('3\\n1 2 3') == 3\nassert solution('4\\n1 2 4 3') == 4\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 59
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 5 3 4') == '4'\nassert solution('2\\n1 2') == '2'\nassert solution('7\\n6 5 4 3 2 4 3') == '2'\n\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 50
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2 5\\n') == '2'\nassert solution('3 2 5\\n2 3 4') == '2'\nassert solution('3 2 5\\n1 2 3') == '2'\nassert solution('3 2 5\\n1 2 2') == '2'\n\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 65
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 5 3 4') == '4'\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 5 3 4') == '4'\nassert solution('2\\n1 2') == '2'\nassert solution('7\\n6 5 4 3 2 4 3') == '2'\n",
        "num_ids_2": 31,
        "num_ids_4": 50
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '0'\nassert solution('1\\n2') == '1'\nassert solution('1\\n2\\n3') == '1'\nassert solution('1\\n2\\n3\\n4') == '1'\n",
        "num_ids_2": 21,
        "num_ids_4": 50
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == 4\nassert solution(\"2\\n1 2\") == 2\nassert solution(\"7\\n6 5 4 3 2 4 3\") == 2\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 27,
        "num_ids_4": 44
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\n",
        "num_ids_2": 31,
        "num_ids_4": 50
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\nassert solution(\"2\\n1 2\") == \"2\"\n",
        "num_ids_2": 36,
        "num_ids_4": 50
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5') == 5\nassert solution('1 2 5 3 4') == 4\nassert solution('6 5 4 3 2 4 3') == 2\nassert solution('7 6 5 4 3 2 4 3') == 2\n",
        "num_ids_2": 16,
        "num_ids_4": 42
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"2\\n1 2\\n5 3\") == \"3\"\nassert solution(\"3\\n1 2 5 3 4\") == \"4\"\nassert solution(\"3\\n1 2 5 3 4\\n6 2 3 7 8 9\") == \"4\"\nassert solution(\"3\\n1 2 5 3 4\\n6 2 3 7 8 9\\n1 2 2 2 2 2 1 1 1 1\") == \"6\"\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 74
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 3\n1 2 2 4 5\n''') == \"1\"\nassert solution('''5 3\n1 2 3 4 5\n''') == \"2\"\nassert solution('''5 3\n1 2 2 4 5\n''') == \"1\"\nassert solution('''5 3\n1 2 3 4 5\n''') == \"2\"\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"2\"\nassert solution(\"5 3\\n1 2 2 2 2\") == \"0\"\n\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 3 3') == 0\nassert solution('1 2 3 3 3', 0, 5) == 0\nassert solution('1 2 3 3 3', 0, 4) == 0\nassert solution('1 2 3 3 3', 0, 3) == 2\nassert solution('1 2 3 3 3', 0, 2) == 1\n",
        "num_ids_2": 28,
        "num_ids_4": 60
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == 1\nassert solution(\"5 3\\n1 2 3 4 5\") == 2\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3\\n1 2 3 3 4 5 6\") == '2'\nassert solution(\"7 5\\n1 2 2 2 2 2 2 2\") == '0'\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 3\n1 2 2 4 5\n''') == '1'\n\nassert solution('''5 3\n1 2 3 4 5\n''') == '2'\n\nassert solution('''5 3\n1 2 3 3 3\n''') == '0'\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 2 2 4 5') == '1'\nassert solution('5 3\\n1 2 3 3 3') == '0'",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == '1'\n\nassert solution(\"5 3\\n1 2 2 4 5\") == '1'\n\nassert solution(\"5 3\\n1 2 3 3 3\") == '0'",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 2 4 5\\n3 3 3 3\") == '2'\nassert solution(\"1 2 3 4 5\\n3 3 3 3\") == '0'\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 3 4') == '4'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 3 4') == 4\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('A A B') == '4'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 3 4') == '4'\n\"\"\"\n\n\nfrom math import ceil, sqrt\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 3 4') == '4'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\n-------------------------------------------------------\n\nimport math",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3 4') == '4'\n\"\"\"\n\nn, a, b = [int(x) for x in input().split()]\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 3\") == \"4\"\n\"\"\"\n\nN, A, B = [int(x) for x in input().split()]\n\ncounter = 0\nwhile A and B:\n    if A + B == 1:\n        counter += 1\n        A -= 1\n        B -= 1\n    elif A + B == 2:\n        counter += 2\n        A -= 2\n        B -= 2\n    else:\n        counter += A\n        A -= A\n        B -= A\n    print(counter)\n\nprint(counter)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3 4') == '4'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == answer\n\"\"\"\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 8 12 6 4 24 16 3\\n1\\n2') == '48\\n4'\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/529981c18f8c7f5b7a00005d\n\nThe prime factors of 13195 are 5, 7, 13 and 29.\n\nWhat is the largest prime factor of the number 600851475143?\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n8\\n12\\n6\") == \"48\"\n\nassert solution(\"8\\n1\\n12\\n6\") == \"4\"\n\nassert solution(\"8\\n1\\n12\\n6\\n8\\n12\\n6\") == \"4\"\n\nassert solution(\"8\\n1\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\") == \"4\"\n\nassert solution(\"8\\n1\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\",
        "num_ids_2": 38,
        "num_ids_4": 103
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\") == \"48\"\n\nprint(solution(\"2\\n1\\n2\\n\"))\n'''\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\") == \"48\\n4\\n\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5\\n6') == '6'\nassert solution('3\\n2 1\\n5') == '6'\nassert solution('7\\n3 4 6 7 8 10\\n1 2 3') == '6'\nassert solution('1\\n4') == '4'\n",
        "num_ids_2": 21,
        "num_ids_4": 61
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1\\n2') == '2\\n-1'\n\"\"\"\n\nimport sys\nfrom collections import Counter\nfrom itertools import chain, combinations",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3\\n1\\n2\\n1\\n2\\n2\\n2\\n2\\n2\") == \"4\"\n\nassert solution(\"4\\n3\\n1\\n2\\n1\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\",
        "num_ids_2": 1669,
        "num_ids_4": 1669
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\") == \"48\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1",
        "num_ids_2": 1670,
        "num_ids_4": 1670
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n8\\n8 2 12 6 4 24 16 3\") == \"48\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 5 5 1 6 1\") == \"3\\n5 6 1\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"5\\n2 4 2 4 4\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\n\n\n\n\"\"\"",
        "num_ids_2": 43,
        "num_ids_4": 84
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 5 5 1 6 1\\n\") == \"3\\n5 6 1\"\nassert solution(\"5\\n6 6 6 6 6\\n\") == \"1\\n6\"\nassert solution(\"5\\n2 4 2 4 4\\n\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6 6\\n\") == \"1\\n6\"\nassert solution(\"5\\n1 2 2 3 3\\n\") == \"3\\n1 2 3\"\n",
        "num_ids_2": 47,
        "num_ids_4": 92
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 5 5 1 6 1\n''') == '3\\n5 6 1'\n\nassert solution('''\n6\n2 4 2 4 4\n''') == '2\\n2 4'\n\nassert solution('''\n5\n6 6 6 6 6\n''') == '1\\n6'\n\nprint('Success')\n'''",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n1 5 5 1 6 1') == '3\\n5 6 1'\nassert solution('5\\n2 4 2 4 4') == '2\\n2 4'\nassert solution('5\\n6 6 6 6 6') == '1\\n6'\n\"\"\"\n",
        "num_ids_2": 44,
        "num_ids_4": 64
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 5 5 1 6 1\\n\") == \"3\\n5 6 1\"\nassert solution(\"5\\n6 6 6 6 6\\n\") == \"1\\n6\"\nassert solution(\"5\\n6 6 6 6\\n\") == \"1\\n6\"\nassert solution(\"6\\n2 4 2 4 4\\n\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6\\n\") == \"1\\n6\"\n\"\"\"\nimport collections\n",
        "num_ids_2": 47,
        "num_ids_4": 91
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 5 5 1 6 1\") == \"3\\n5 6 1\"\nassert solution(\"6\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"5\\n2 4 2 4 4\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\n\n\"\"\"\n\nimport sys\nimport json",
        "num_ids_2": 43,
        "num_ids_4": 84
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 5 5 1 6 1\\n') == '3\\n5 6 1'\n\nassert solution('5\\n2 4 2 4 4\\n') == '2\\n2 4'\n\nassert solution('5\\n6 6 6 6 6\\n') == '1\\n6'\n\n\n'''",
        "num_ids_2": 48,
        "num_ids_4": 70
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 6 6 6 6') == '1'\nassert solution('5 5 5 5 5') == '1'\nassert solution('5 6 6 6 6') == '3'\nassert solution('6 6 6 6 6') == '1'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 6 6 6 6') == '1 6'\nassert solution('5 5 5 5 5') == '1 5'\nassert solution('1 2 2 2 2') == '2'\n\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 44
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 5 5 6 6\") == \"3 6 1\"\nassert solution(\"5 6 6 6 6\") == \"2 6\"\nassert solution(\"5 6 6 6 1\") == \"1 6\"\n\nprint(solution(input()))",
        "num_ids_2": 31,
        "num_ids_4": 46
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n\"\"\"\n\nimport math\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\nassert solution('26') == '27'\nprint('All tests passed')",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n\"\"\"\n\n\nfrom collections import deque\nfrom math import ceil, floor\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\nassert solution(\"99\") == \"103\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\nassert solution(\"10\") == \"11\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"abc\") == \"b\"\n",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"abac\"\n) == \"aac\"\nassert solution(\n\"abc\"\n) == \"b\"\nassert solution(\n\"abba\"\n) == \"aba\"\nassert solution(\n\"ecoosdcefr\"\n) == \"codeforces\"\nassert solution(\n\"abracadabra\"\n) == \"abracadabra\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abac') == 'aac'\nassert solution('abc') == 'b'\nassert solution('abba') == 'aba'\nassert solution('ecoosdcefr') == 'codeforces'\nassert solution('ecoo') == 'codeforces'\n",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abac\") == 'aac'\nassert solution(\"abc\") == 'b'\nassert solution(\"abba\") == 'aba'\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 32
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"bbb\") == \"bbb\"\n",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"abracadabra\") == \"abracadabra\"\n",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 'b'",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == 'a'\nassert solution('27') == 'a'\nassert solution('18279') == 'a'\nassert solution('475256') == 'aaaa'\nassert solution('10000001') == 'aa'\n\nprint(solution(stdin.readline().strip()))\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 'b'",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"b\"\n\"\"\"\n\n\"\"\"\nLet\u2019s play with the idea of searching for the smallest possible number. \nFor this, we will use the binary search algorithm.\n\nThe following pseudocode will help you to implement the binary search algorithm:\n\n    define the function binary_search(number)\n        if the number is found\n            return the number\n        else\n            return\n        \n            calculate the mid_number\n            calculate the mid_number\n            if the number is bigger than the mid_number\n                reduce the search range to the first half of the given range\n            else\n                reduce the search range to the second half of the given range\n\nThis implementation of the binary search algorithm is a good start.\n\nTo make it more efficient, we can calculate the mid_number at the beginning of each iteration, and use it to define the boundaries of the search range.\n\nTo do that, we can replace lines 6 and 7 of the pseudocode with the following code:\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"b\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 'b'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6') == 'z'\nassert solution('20') == 'zz'\nassert solution('18277') == 'zzz'\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\n\nn = int(sys.argv[1])\n\nalphabet = 'abcdefghijklmnopqrstuvwxyz'",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('N') == 'a'\nassert solution('2') == 'b'\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 28
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == 'b'\nassert solution('6\\n') == 'zz'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"to be or not to be\") == \"12\"\nassert solution(\"a ab a a b ab a a b c\") == \"13\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\nto be or not to be\\n') == '12'\n\nassert solution('10\\na ab a a b ab a a b c\\n') == '13'\n\nassert solution('6\\naa bb aa aa bb bb\\n') == '11'\n",
        "num_ids_2": 43,
        "num_ids_4": 68
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a ab a a b ab a a b c\") == \"13\"\nassert solution(\"aa bb aa aa bb bb\") == \"11\"\nassert solution(\"to be or not to be\") == \"12\"\n\n\"\"\"\nimport re",
        "num_ids_2": 39,
        "num_ids_4": 54
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11",
        "num_ids_2": 30,
        "num_ids_4": 48
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\nto be or not to be\\n\") == '12'\nassert solution(\"10\\na ab a a b ab a a b c\\n\") == '13'\nassert solution(\"6\\naa bb aa aa bb bb\\n\") == '11'\n",
        "num_ids_2": 43,
        "num_ids_4": 68
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"to be or not to be\") == \"TB or not TB\"\nassert solution(\"a ab a a b ab a a b c\") == \"a AAAB aa AB bb\"",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('to be or not to be') == 'TB or not TB'\nassert solution('a ab a a b ab a a b c') == 'a AAAB AAAB c'\nassert solution('aa bb aa aa bb bb') == 'AB aa AB bb'\n\nprint(solution('to be or not to be')) # -> 12\nprint(solution('a ab a a b ab a a b c')) # -> 13\nprint(solution('aa bb aa aa bb bb')) # -> 11\n\n'''\n",
        "num_ids_2": 42,
        "num_ids_4": 67
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('to be or not to be') == 'TB or not TB'\nassert solution('a ab a a b ab a a b c') == 'a AAAB AAAB c'\nassert solution('aa bb aa aa bb bb') == 'AB aa AB bb'\n",
        "num_ids_2": 42,
        "num_ids_4": 67
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"to be or not to be\") == \"TB or not TB\"\nassert solution(\"a ab a a b ab a a b c\") == \"a AAAB aa AB bb\"\nassert solution(\"aa bb aa aa bb bb\") == \"AB aa AB bb\"\n",
        "num_ids_2": 44,
        "num_ids_4": 69
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 2000 2000 2\\n') == '4000\\n2 2'\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 2000 2000 2\\n') == '4000\\n2 2'\n\"\"\"\n\n\nfrom typing import List\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2') == '20\\n3 2 3'\nassert solution('5 1\\n1 1 1 1 1') == '1\\n5'\nassert solution('4 2\\n1 2000 2000 2') == '4000\\n2 2'",
        "num_ids_2": 47,
        "num_ids_4": 68
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\\n2 2\"\n\nimport math\nfrom typing import List, Tuple\n\n\nclass Problem:\n    def __init__(self, difficulties: List[int]):\n        self.difficulties = difficulties\n\n    def __repr__(self):\n        return str(self.difficulties)\n\n    @classmethod\n    def from_stdin(cls) -> 'Problem':\n        return cls([int(i) for i in input().split(' ')])\n",
        "num_ids_2": 47,
        "num_ids_4": 68
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\"\n\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\"\n",
        "num_ids_2": 39,
        "num_ids_4": 56
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 2000 2000 2') == '4000'\n\n\"\"\"\n\nfrom typing import List\n\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\n\nclass Node:\n    def __init__(self, item):\n        self.item = item\n        self.next = None\n\n    def __str__(self):\n        return str(self.item)\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def add(self, item):\n        node = Node(item)\n        if self.head is None:\n            self.head = node\n            return\n        last = self.head\n        while last.next:\n            last = last.next\n        last.next = node\n\n    def __str__(self):\n        result = []\n        last = self.head\n        while last:\n            result.append(str(last.item))\n            last = last.next\n        return''.join(result)\n\n    def __iter__(self):\n        node = self.head\n        while node is not None:\n            yield node\n            node = node.next\n\n    def __len__(self):\n        length = 0\n        last = self.head\n        while last is not None:\n            length += 1\n            last = last.next\n        return length\n\n    def __getitem__(self, index):\n        if self.head is None:\n            return None\n        last = self.head\n        while index > 0:\n            last = last.next\n            index -= 1\n        return last\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 2000 2000 2\") == \"4000\\n2 2\"\n",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\\n\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\\n\") == \"4000\\n2 2\"\n",
        "num_ids_2": 51,
        "num_ids_4": 74
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2') == '20'\nassert solution('5 1\\n1 1 1 1 1') == '1'\nassert solution('4 2\\n1 2000 2000 2') == '4000'\n\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 56
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2\\n') == '20'\nassert solution('5 1\\n1 1 1 1 1\\n') == '1'\nassert solution('4 2\\n1 2000 2000 2\\n') == '4000'\n",
        "num_ids_2": 43,
        "num_ids_4": 62
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\nassert solution(\"5 -1 1 -1 1 -1 1 1 -1 -1\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -1 1 -1 1 -1 1 1 -1 -1\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 88
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 -2 3 -9 2') == '0'\nassert solution('5 -1 3 -9 2') == '3'\nassert solution('9 -1 1 -1 1 -1 1 1 -1 -1') == '6'\nassert solution('8 -5 -11 -15 10 5 4 -4') == '3'\n",
        "num_ids_2": 32,
        "num_ids_4": 77
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 -5 3 2') == '1'\nassert solution('5\\n4 -2 3 -9 2') == '0'\nassert solution('9\\n-1 1 -1 1 -1 1 1 -1 -1') == '6'\nassert solution('8\\n16 -5 -11 -15 10 5 4 -4') == '3'\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 86
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n1 -5 3 2\n''') == '1'\nassert solution('''5\n4 -2 3 -9 2\n''') == '0'\nassert solution('''9\n-1 1 -1 1 -1 1 1 -1 -1\n''') == '6'\nassert solution('''8\n16 -5 -11 -15 10 5 4 -4\n''') == '3'",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 -2 3 -9 2') == '0'\nassert solution('5 -2 3 -9 2') == '0'\nassert solution('9 -1 1 -1 1 -1 1 1 -1 -1') == '3'\nassert solution('8 -5 -11 -15 10 5 4 -4') == '3'\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 77
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 -5 3 2') == '1'\nassert solution('5 -2 3 -9 2') == '0'\nassert solution('9 -1 1 -1 1 -1 1 1 -1 -1') == '6'\nassert solution('8 -5 -11 -15 10 5 4 -4') == '3'\n",
        "num_ids_2": 30,
        "num_ids_4": 75
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\n\n\"\"\"\nfrom typing import Tuple, List\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 -5 3 2\") == \"1\"\nassert solution(\"5\\n4 -2 3 -9 2\") == \"0\"\nassert solution(\"9\\n-1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8\\n16 -5 -11 -15 10 5 4 -4\") == \"3\"\n\n\n\n\"\"\"\n\n\n\"\"\"\n(1)\n\n\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0434\u043b\u044f \u0440\u0435\u0437\u0430\u043b\u044c\u0442\u0430\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043c\u043e\u0436\u0435\u0442 \u0434\u043e\u0431\u0440\u0430\u0442\u044c \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u0440\u0430\u0437\u0440\u0435\u0437\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 \u0434\u0432\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u0438\u043d\u043e\u0439 L, \n\u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u044d\u0442\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 S \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443. \n\u041f\u0440\u0438\u043c\u0435\u0440: \u0435\u0441\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432: a[1..n] \u0438 \u0441\u0442\u0440\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u044b\u0434\u0430\u0451\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u043e\u0442 1 \u0434\u043e n. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \n\u043a\u043e\u0433\u0434\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0435 \u043e\u0441\u0442\u0430\u043d\u0435\u0442\u0441\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043d\u0430\u0434\u043e \u0432\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u043d\u0430\u0447\u0430\u043b\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u0438\u043c\u0432\u043e\u043b $d$, \u0430 \u0432 \u043a\u043e\u043d\u0435\u0446 \u0441\u0442\u0440\u043e\u043a\u0438 \u2014 \u0441\u0438\u043c\u0432\u043e\u043b $a$. \n\u041f\u0440\u0438\u043c\u0435\u0440: \u0435\u0441\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 a[1..n], \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 $1$ \u0438 $2$ (\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0442\u043e\u044f\u0442 \u0432 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u043c \u043c\u0435\u0441\u0442\u0435), \n\u0432 \u0441\u0442\u0440\u043e\u043a\u0435 S \u043d\u0435 \u043e\u0441\u0442\u0430\u043d\u0435\u0442\u0441\u044f \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0430\u0434\u043e \u0432\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u0438\u043c\u0432\u043e\u043b $d$, \u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 S \u043e\u0441\u0442\u0430\u043d\u0435\u0442\u0441\u044f \u0441\u0438\u043c\u0432\u043e\u043b $a$.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b:\n\nsolution(\"1 2\") == 0\nsolution(\"1 2 3\") == 1\nsolution(\"1 2 3 4\") == 1\nsolution(\"1 2 3 4 5\") == 2\nsolution(\"1 2 3 4 5 6\") == 2\n\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 86
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\nassert solution(\"5 -2 3 -9 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n",
        "num_ids_2": 32,
        "num_ids_4": 77
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 -5 3 2\") == \"1\"\nassert solution(\"4\\n1 -5 3 2\") == \"0\"\nassert solution(\"9\\n-1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8\\n16 -5 -11 -15 10 5 4 -4\") == \"3\"\nassert solution(\"8\\n-1 1 -1 1 -1 1 1 -1 -1\") == \"0\"\n",
        "num_ids_2": 34,
        "num_ids_4": 84
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n2\\n10\\n1000000000\\n2000000000\"\n",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n2\n1\n10''') == '''0\n2\n9\n10'''\nassert solution('''5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000''') == '''0\n2\n10\n1000000000\n2000000000'''",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == '0'\nassert solution(\"1 100\") == '0'\nassert solution(\"2 2\") == '0'\nassert solution(\"5 5\") == '0'\nassert solution(\"1 100\") == '0'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 100\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"3 5\") == \"2\"\nassert solution(\"100 100\") == \"0\"\nassert solution(\"100 1000000000\") == \"2000000000\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3\n1 2\n3 4\n9 8\n1 1\n1 1000000000\"\"\") == \"\"\"0\n2\n10\n1000000000\"\"\"\n\nassert solution(\"\"\"2\n5 10\n2 1000000000\n1 1000000000\"\"\") == \"\"\"0\n2\n10\"\"\"\n\nassert solution(\"\"\"1\n5 10\n1 1000000000\"\"\") == \"\"\"0\n2\"\"\"\n\nassert solution(\"\"\"3\n1 2\n3 4\n9 8\n1 1\n1 1000000000\"\"\") == \"\"\"0\n2\n10\n1000000000\"\"\"\n\nassert solution(\"\"\"2\n5 10\n2 1000000000\n1 1000000000\"\"\") == \"\"\"0\n2\n10\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10\\n5 10\\n4 8\") == \"8\\n5\"\nassert solution(\"4 10\\n1 1\\n2 2\\n3 3\") == \"1\\n2\\n0\"\n",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n\"\"\") == \"\"\"\n0\n2\n10\n1000000000\n2000000000\n\"\"\"\n\n\"\"\"\nYou have to maximize the sum of absolute differences between adjacent (consecutive) elements.\n\nConstraints\n\n1 <= t <= 10^4\n1 <= n <= 10^9\n1 <= m <= 10^9\n\nExample\nInput\n4\n1 3\n2 5\n3 8\n4 2\n1 10\n2 1\n5 7\n10 10\n1 10000000\n2 1000000000\n5 1000000000\n\nOutput\n0\n2\n10\n1000000000000000\n\"\"\"\nfrom collections import deque\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\n",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n2\\n10\\n1000000000\\n2000000000\"\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 100\") == \"0\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"5 5\") == \"10\"\nassert solution(\"2 1000000000\") == \"2000000000\"\nassert solution(\"1 1000000000\") == \"1000000000\"\n\nprint('Success')",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 100\") == '2'\nassert solution(\"1 100\") == '0'\nassert solution(\"2 2\") == '0'\nassert solution(\"5 5\") == '0'\nassert solution(\"1 1000000000\") == '1'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101') == '4'\nassert solution('13') == '6'\nassert solution('1337') == '8'\nassert solution('133333') == '6'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2\\n') == '2'\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 20,
        "num_ids_4": 35
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('101') == '4'\nprint(solution('101'))",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_solution\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('101\\n7') == '4'\nassert solution('101\\n77') == '7'\nassert solution('101\\n777') == '7'\n\nprint(solution('101\\n7'))\nprint(solution('101\\n77'))\nprint(solution('101\\n777'))\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101\") == \"4\"\nassert solution(\"7\") == \"1\"\nassert solution(\"1011\") == \"6\"\nassert solution(\"7777\") == \"7\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('101') == '4'\n\"\"\"\n\nK = int(stdin.readline().rstrip())\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('101') == '4'\n\nsolution('101')\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\"\n\nK = int(input())\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('101') == '4'\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4') == '4'\nassert solution('5 5') == '1'\nassert solution('15 8') == '48'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"1\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"15 8\") == \"48\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\") == \"4\"\n\nassert solution(\"5 5\") == \"1\"\n\nassert solution(\"15 8\") == \"48\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n2 4 5 3 1') == '4'\nassert solution('5 5\\n1 2 3 4 5') == '1'\nassert solution('15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9') == '48'\n",
        "num_ids_2": 36,
        "num_ids_4": 64
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 4') == '4'\n\"\"\"\n\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\", \"2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\", \"1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\", \"1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n\n\"\"\"\nimport math\nimport sys\nfrom typing import List\n",
        "num_ids_2": 36,
        "num_ids_4": 64
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 4\n2 4 5 3 1\n''') == '4'\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n\"\"\"\n\nfrom collections import defaultdict\n",
        "num_ids_2": 36,
        "num_ids_4": 64
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4') == '4'\n\"\"\"\n\nfrom typing import List, Optional\nfrom collections import Counter\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\", \"2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\", \"1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\", \"1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n",
        "num_ids_2": 36,
        "num_ids_4": 64
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\\n\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\\n\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == \"-1\"\nassert solution(\"5 1\\n5 5 5 5 5\\n\") == \"2\"\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '-1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 74
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == 4\nassert solution('7 10\\n5 5 5 5 5') == 2\nassert solution('5 15\\n5 5 5 5 5') == -1\nassert solution('5 26\\n5 5 5 5 5') == -1\nassert solution('5 15\\n5 5 5 5 5') == 2\n\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\") == \"4\"\nassert solution(\"5 15\") == \"2\"\nassert solution(\"5 26\") == \"-1\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 16\") == \"2\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == 4\nassert solution('7 10\\n1 3 4 2 1 4 2') == 2\nassert solution('5 15\\n5 5 5 5 5') == 1\nassert solution('5 26\\n5 5 5 5 5') == -1\nassert solution('5 36\\n5 5 5 5 5') == 2\n",
        "num_ids_2": 34,
        "num_ids_4": 67
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\\n\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\\n\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == \"2\"\n\"\"\"\n\nn, m = list(map(int, input().split()))\na = list(map(int, input().split()))\nd = dict()\n\nfor i in range(1, n + 1):\n    d[i] = 0\n\nfor x in a:\n    d[x] += 1\n\ns = set()\nfor k, v in d.items():\n    s.add(k)\n    if k + 1 in s and k + 2 in s:\n        break",
        "num_ids_2": 42,
        "num_ids_4": 82
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\"\"\"\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nlst = [0] * m\nfor i in range(n):\n    lst[i] = a[i]\nlst.sort(reverse=True)\nsum = 0\nday = 0\nfor i in range(n):\n    if lst[i] > sum + 1:\n        break\n    sum += lst[i]\n    day += 1\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 8\") == \"4\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 15\") == \"-1\"\nassert solution(\"5 26\") == \"2\"\nassert solution(\"5 16\") == \"2\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"5 1 3 6 9 12\") == \"1\"\nassert solution(\"1 3 6 9 12\") == \"0\"\nassert solution(\"14 5 1\") == \"0\"\n",
        "num_ids_2": 24,
        "num_ids_4": 53
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n24 21 14 10\") == \"3\"\nassert solution(\"2\\n500 500\") == \"0\"\nassert solution(\"3\\n14 5 1\") == \"-1\"\nassert solution(\"5\\n1 3 6 9 12\") == \"1\"\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n24 21 14 10\") == \"3\"\nassert solution(\"2\\n500 500\") == \"0\"\nassert solution(\"3\\n14 5 1\") == \"-1\"\nassert solution(\"5\\n1 3 6 9 12\") == \"1\"\n\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 21 14 10\\n') == '3'\nassert solution('2 500 500\\n') == '0'\nassert solution('5 1 3 6 9 12\\n') == '-1'\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 47
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 21 14 10') == '3'\nassert solution('500 500') == '0'\nassert solution('3 5 1') == '-1'\nassert solution('5 1 3 6 9 12') == '1'\n",
        "num_ids_2": 24,
        "num_ids_4": 52
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"3 5 1\") == \"-1\"\nassert solution(\"1 3 6 9 12\") == \"1\"\n\n\"\"\"\n\n\"\"\"\n\u0414\u0430\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430. \u041d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u0439\u0442\u0435 \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435\n\n\u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e substring().\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n24 21 14 10\") == \"3\"\nassert solution(\"2\\n500 500\") == \"0\"\nassert solution(\"5\\n1 3 6 9 12\") == \"-1\"\n\"\"\"\nimport math\nimport sys\nimport re\n\nsys.stdin = open('./test_case.txt')",
        "num_ids_2": 30,
        "num_ids_4": 47
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 24 21 14 10') == 3\nassert solution('500 500') == 0\nassert solution('1 3 6 9 12') == -1\nassert solution('14 5 1') == 1\n\"\"\"\nfrom collections import deque\n",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 24 21 14 10\") == 3\nassert solution(\"500 500\") == 0\nassert solution(\"1 3 6 9 12\") == -1\nassert solution(\"5 1 3 6 9 12\") == 1\nassert solution(\"1 1\") == -1",
        "num_ids_2": 21,
        "num_ids_4": 47
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n24 21 14 10\") == \"3\"\nassert solution(\"2\\n500 500\") == \"0\"\nassert solution(\"3\\n14 5 1\") == \"-1\"\nassert solution(\"5\\n1 3 6 9 12\") == \"1\"",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n1 2 15 15 15') == '5'\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\\n\") == \"5\"\n\"\"\"\n\nimport collections\nfrom functools import lru_cache",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 10 100 1000\\n\") == \"4\"\nassert solution(\"5 2\\n1 2 15 15 15\\n\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\\n\") == \"2\"\n\"\"\"\n\nn,k = map(int,input().split())\na = list(map(int,input().split()))\n\na.sort(reverse=True)\n\nmax_skill = 0\nmax_team = 0\n\nfor i in range(k):\n    max_skill += a[i]\n    if i%2 == 1:\n        max_skill -= 5\n    if max_skill > 0:\n        max_team += 1\n\nprint(max_team)\n",
        "num_ids_2": 39,
        "num_ids_4": 60
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n1 2 15 15 15') == 5\nassert solution('6 1\\n36 4 1 25 9 16') == 2\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\"\n\"\"\"\n\nN, K = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\narr.sort(reverse=True)\nr = []\ncnt = 0\n\nfor i in range(K):\n    r.append(arr[i])\n\ncnt += K\nwhile N - cnt >= K:\n    cnt += K\n    if cnt < N:\n        r.append(arr[cnt])\n\nprint(len(r))",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n1 2 15 15 15') == 5\n\"\"\"\n\nn, k = map(int, input().split(' '))\narr = list(map(int, input().split(' ')))\n\nmin_diff = 5\nteam_count = 0\nteam_size = 1\n\nfor i in range(n):\n    team_size += 1\n    if arr[i] - team_size > min_diff:\n        team_count += 1\n        team_size = 1\n        min_diff = 5\n\nprint(team_count)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 10 100 1000\") == 4\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n3 9\\n\") == \"5\"\nassert solution(\"3 1\\n2 2\\n1 3\\n\") == \"3\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == ''\nassert solution('1 2 3 4 5') == ''\nassert solution('1 2 3 4 5 6') == ''\nassert solution('1 2 3 4 5 6 7') == ''\n",
        "num_ids_2": 19,
        "num_ids_4": 44
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2\\n1 2 15 15 15') == '5'\n\nassert solution('6 1\\n36 4 1 25 9 16') == '2'\nassert solution('4 4\\n1 10 100 1000') == '4'\n\nassert solution('5 3\\n1 2 15 15 15') == '5'\nassert solution('6 3\\n36 4 1 25 9 16') == '2'\n",
        "num_ids_2": 37,
        "num_ids_4": 72
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\\n\") == '8'\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == '8'\n\"\"\"\n\nimport sys\n\nN, K, M = [int(x) for x in sys.stdin.readline().split()]\nA = [int(x) for x in sys.stdin.readline().split()]",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\n\n\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == '8'\n\"\"\"\n\nimport sys\n\ninput_file = sys.stdin\n\nn, k, m = map(int, input_file.readline().split())\n\ntotal = 0\npoints = 0\nfor i in range(n - 1):\n    a = int(input_file.readline())\n    points += a\n    total += a\n    if points > m:\n        break\n\nprint(points) if points >= m else print(-1)\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\nprint(solution(\"5 10 7\\n8 10 3 6\"))",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == 8\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\n\nfrom typing import List\nimport unittest\n\n\nclass Solution:\n    def solve(self, stdin: str) -> int:\n        n, k, m = [int(x) for x in stdin.split()]\n        scores = [int(x) for x in stdin.split()][1:]\n        # print(n, k, m, scores)\n        res = sum(scores)\n        scores.sort()\n        for i in range(m):\n            res -= scores.pop()\n            if res < k:\n                return res\n        return -1\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution()\n\n    def test_solution(self):\n        cases = [\n            [\"5 10 7\", \"8 10 3 6\"],\n            [\"10 10 10\", \"8 10 3 6\"],\n            [\"4 10 4\", \"8 10 3 6\"],\n        ]\n        for case in cases:\n            self.assertEqual(self.solution.solve(case[0]), case[1])\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == '8'\nassert solution('3 5 3\\n6 9 6') == '5'\nassert solution('3 5 3\\n7 7 7') == '-1'\n\"\"\"\n",
        "num_ids_2": 35,
        "num_ids_4": 53
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3\\n2\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\"\n\"\"\"\n\nN, K, Q = [int(i) for i in input().split()]\nscores = [K] * N\nfor i in range(Q):\n    A = int(input())\n    scores[A - 1] -= 1\n\nfor score in scores:\n    if score <= 0:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\nassert solution(\"5 3 4\\n1\\n2\\n2\\n2\\n1\") == \"Yes\\nYes\\nNo\\nYes\\nYes\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n\"\"\"\n\n\nimport re\nfrom typing import List, Tuple\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 3\\n3\\n1\\n3\\n2\\n\") == 'No\\nNo\\nYes\\nNo\\nNo\\n'\nassert solution(\"5 3 2\\n3\\n1\\n3\\n2\\n\") == 'No\\nNo\\nYes\\nNo\\nNo\\n'\nassert solution(\"3 3 3\\n3\\n1\\n3\\n2\\n\") == 'No\\nNo\\nYes\\nNo\\nNo\\n'\n\n'''\n",
        "num_ids_2": 80,
        "num_ids_4": 120
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5 1 1\\n1\\n3\\n2\\n\\n') == 'No\\nNo\\nYes\\nNo\\nNo'\n\n-------------\n\nOne day three best friends Petya, Vasya and Tonya decided to form a team and take part in programming contests. Participants are usually offered several problems during programming contests. Long before the start the friends decided that they will implement a problem if at least two of them are sure about the solution. Otherwise, the friends won't write the problem's solution.\nThis contest offers its participants three problems, each of which is guaranteed to be so sure about the right answer, that each friend will always implement it. Of course, each friend knows that the right answer may be different in different cases, so each friend wants to check each problem and consider different right answers.\nThe friends are currently discussing which problems they are sure about and which ones they are not sure about. The problems are stored in arrays A, B and C of size N each, where N is equal to 3. The i-th element of array A (0 \\leq i \\leq 2) contains the right answer for the i-th problem on the first line, B (0 \\leq i \\leq 2) on the second and C (0 \\leq i \\leq 2) on the third line.\nUnfortunately, the friends are too busy with coding and indexing, so they've filled their programs with the problems' solutions. The i-th line of the program should contain the i-th problem's solution.\nThat is, the i-th line should contain the characters '1' if the i-th problem is sure for the friend Petya, '2' if the i-th problem is sure for the friend Vasya and '3' if the i-th problem is sure for the friend Tonya. Otherwise, the i-th line of the program should contain the characters '0'.\nHelp the friends check the problems.\n\n-----Constraints-----\n - Each array A, B and C is guaranteed to be of the same size N.\n - Each element of arrays A, B and C is guaranteed to be an integer in the range [0; 3].\n - It's guaranteed that at least two elements in each of the arrays are equal to 1.\n\n-----Input-----\nThe first line contains integers N, M and Q (1 \\leq N, M, Q \\leq 10^5) separated by single spaces.\nThe next N lines contain the description of the problems in the format:\nA_1 A_2 A_3\nB_1 B_2 B_3\nC_1 C_2 C_3\n\n-----Output-----\nThe next Q lines should contain the check results for each of the problems, in the format:\n1 2 1 3\n0 0 2 0\n1 1 1 1\n0 2 0 0\n\nIn the i-th problem, the i-th line should contain the characters '1', '2' or '3' (or '0' if the problem is sure for nobody).\n\nSample Input:\n3 3 4\n2 1 2\n3 3 3\n3 1 1\n\nSample Output:\n2 2 3\n2 2 3\n1 1 1\n3 1 1\n\n- The first line contains the values of N, M and Q.\n- The next N lines contain the descriptions of the problems.\n- The next Q lines should contain the check results for each of the problems.\n\n- The first character of each line should be 1 if Petya is sure about the solution for the i-th problem, 2 if Vasya is sure about the solution, and 3 if Tonya is sure about the solution. Otherwise, the character should be 0.\n\n-------------\n\nOne day three best friends Petya, Vasya and Tonya decided to form a team and take part in programming contests. Participants are usually offered several problems during programming contests. Long before the start the friends decided that they will implement a problem if at least two of them are sure about the solution. Otherwise, the friends won't write the problem's solution.\nThis contest offers its participants three problems, each of which is guaranteed to be so sure about the right answer, that each friend will always implement it. Of course, each friend knows that the right answer may be different in different cases, so each friend wants to check each problem and consider different right answers.\nThe friends are currently discussing which problems they are sure about and which ones they are not sure about. The problems are stored in arrays A, B and C of size N each, where N is equal to 3. The i-th element of array A (0 \\leq i \\leq 2) contains the right answer for the i-th problem on the first line, B (0 \\leq i \\leq 2) on the second and C (0 \\leq i \\leq 2) on the third line.\nUnfortunately, the friends are too busy with coding and indexing, so they filled their programs with the problems' solutions. The i-th line of the program should contain the i-th problem's solution.\nThat is, the i-th line should contain the characters '1' if the i-th problem is sure for the friend Petya, '2' if the i-th problem is sure for the friend Vasya and '3' if the i-th problem is sure for the friend Tonya. Otherwise, the i-th line of the program should contain the characters '0'.\nHelp the friends check the problems.\n\n-----Constraints-----\n - Each array A, B and C is guaranteed to be of the same size N.\n - Each element of arrays A, B and C is guaranteed to be an integer in the range [0; 3].\n - It's guaranteed that at least two elements in each of the arrays are equal to 1.\n\n-----Input-----\nThe first line contains integers N, M and Q (1 \\leq N, M, Q \\leq 10^5) separated by single spaces.\nThe next N lines contain the description of the problems in the format:\nA_1 A_2 A_3\nB_1 B_2 B_3\nC_1 C_2 C_3\n\n-----Output-----\nThe next Q lines should contain the check results for each of the problems, in the format:\n1 2 1 3\n0 0 2 0\n1 1 1 1\n0 2 0 0\n\nIn the i-th problem, the i-th line should contain the characters '1', '2' or '3' (or '0' if the problem is sure for nobody).\n\nSample Input:\n3 3 4\n2 1 2\n3 3 3\n3 1 1\n\nSample Output:\n2 2 3\n2 2 3\n1 1",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\nassert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n4\\n\") == \"No\\nNo\\nNo\\nNo\\nNo\\nYes\"\n",
        "num_ids_2": 85,
        "num_ids_4": 85
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n6 3 4\n3\n1\n3\n2\n''') == '''\nNo\nNo\nYes\nNo\nNo\nNo\n'''\n\n'''\nWrite a program that receives a sequence of integers on a single line and prints it, but prints it in such a way that in each line it contains a single integer.\n\n-----Constraints-----\n - All values in input are integers.\n\n-----Input-----\nThe first line contains a single integer n (1 \\leq n \\leq 100) \u2014 the number of integers.\nThe next line contains n integers a_1,a_2,\u2026,a_n (0 \\leq a_i \\leq 1000) \u2014 numbers in the sequence.\n\n-----Output-----\nPrint the sequence in such a way that in each line it contains a single integer.\n\n-----Sample Input-----\n3\n3\n7\n2\n10\n\n-----Sample Output-----\n3\n7\n2\n10\n'''\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n6 3 4\n3\n1\n3\n2\n''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\nassert solution('''\n6 3 4\n3\n1\n3\n2\n''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\nassert solution('''\n6 3 4\n3\n1\n3\n2\n''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\nassert solution('''\n6 3 4\n3\n1\n3\n2\n3\n''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\nassert solution('''\n6 3 4\n3\n1\n3\n2\n3\n1\n''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n010\"\nassert solution(\"3 4\\n0 0 0\\n1 0 1\\n1 1 1\\n\") == \"YES\\n010\\n0000\"\nassert solution(\"3 4\\n1 1 1\\n0 0 0\\n0 0 0\") == \"YES\\n001\\n101\"\nassert solution(\"3 3\\n0 0 0\\n0 0 0\\n1 1 1\") == \"NO\"\n",
        "num_ids_2": 56,
        "num_ids_4": 114
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\n\"\"\"\n",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n1 1\\n0 1') == 'YES\\n10'\nassert solution('3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1') == 'YES\\n010\\n0000'",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\n",
        "num_ids_2": 57,
        "num_ids_4": 83
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\n",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == 'YES\\n10'\nassert solution(\"3 4\\n0 0 0\\n1 0 1\\n1 1 1\\n\") == 'YES\\n010\\n0000'\nassert solution(\"3 4\\n0 0 0\\n1 0 1\\n1 1 1\\n\") == 'NO'\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\\n\") == 'NO'\nassert solution(\"2 2\\n1 1\\n0 1\") == 'YES\\n010'\n",
        "num_ids_2": 56,
        "num_ids_4": 112
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\n\nprint(\"Successfully solved.\")\n",
        "num_ids_2": 57,
        "num_ids_4": 83
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\") == \"YES\\n010\\n0000\"\n\"\"\"",
        "num_ids_2": 62,
        "num_ids_4": 62
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\n",
        "num_ids_2": 60,
        "num_ids_4": 86
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == 'YES\\n00\\n10'\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == 'YES\\n010\\n0000'\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == 'NO'\n\"\"\"",
        "num_ids_2": 60,
        "num_ids_4": 86
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\nassert solution(\"436\") == \"Yes\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == 'Yes'\nassert solution('5') == 'Yes'\nassert solution('1') == 'Yes'\nassert solution('6') == 'Yes'\nassert solution('4') == 'Yes'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"121\") == \"Yes\"\nassert solution(\"373\") == \"Yes\"\nassert solution(\"436\") == \"Yes\"\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1234\") == \"Yes\"\nassert solution(\"2341\") == \"No\"\n\"\"\"\n\nimport re\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nprint('Test pass.')\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\n\"\"\"\n\n\"\"\"\nSolution for this problem\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0\\n') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1\\n') == '3'\n\nassert solution('10 2 2\\n1 0 0 1 0 0 1 0 0 1\\n') == '6'\nassert solution('10 3 1\\n1 0 0 1 0 0 1 0 0 1\\n') == '8'\nassert solution('10 4 1\\n1 0 0 1 0 0 1 0 0 1\\n') == '4'\n",
        "num_ids_2": 43,
        "num_ids_4": 95
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0\\n') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1\\n') == '3'\nassert solution('6 2 100\\n0 0 0 1 0 1\\n') == '0'\n",
        "num_ids_2": 43,
        "num_ids_4": 65
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\nassert solution('6 2 5\\n1 0 0 1 0 1') == '1'\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 59
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\\n\") == 5\n\"\"\"\n\nn, b, a = [int(x) for x in input().split()]\ns = [int(x) for x in input().split()]\n\nc = 0\nb = max(b, a)\nfor i in range(n):\n    c += s[i]\n    if c > b:\n        c = s[i]\n\nprint(c)\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\"\"\"\n\nfrom collections import namedtuple\n\nPoint = namedtuple('Point', 'x y')\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('5 2 1') == '5'\nassert solution('6 2 1') == '3'\nassert solution('5 2 3') == '0'\nassert solution('7 2 3') == '2'\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(8-7+6-5+4-3+2-1-0) == 4\nassert solution(2+2) == -46\nassert solution(112-37) == 375\n\nprint(solution(8-7+6-5+4-3+2-1-0))\nprint(solution(2+2))\nprint(solution(112-37))\n\"\"\"",
        "num_ids_2": 35,
        "num_ids_4": 45
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n",
        "num_ids_2": 38,
        "num_ids_4": 50
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\nInput\n-16\n\nOutput\n4\n\nInput\n-1\n\nOutput\n0\n\nInput\n0\n\nOutput\n0\n\nInput\n1\n\nOutput\n0\n\nInput\n4-1\n\nOutput\n3\n\nInput\n8-7-2\n\nOutput\n0\n\nInput\n8-7-2-1\n\nOutput\n1\n\nInput\n8-7-2-1-0\n\nOutput\n1\n\nInput\n8-7-2-1-0-1\n\nOutput\n1\n\nInput\n8-7-2-1-0-1-0\n\nOutput\n0\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 50
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\"\"\"\n\nimport sys\nimport re",
        "num_ids_2": 38,
        "num_ids_4": 50
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"0\"\nassert solution(\"112-37\") == \"375\"\n",
        "num_ids_2": 38,
        "num_ids_4": 50
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 51
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\"\"\"\n\nimport re\n",
        "num_ids_2": 38,
        "num_ids_4": 50
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\n\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 50
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 50
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 50
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3') == 'YES'\nassert solution('10 4') == 'YES'\nassert solution('13 4') == 'NO'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3') == 'YES'\nassert solution('10 4') == 'YES'\nassert solution('13 4') == 'NO'",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\nassert solution(\"1 1\") == \"NO\"\nassert solution(\"2 4\") == \"YES\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == 'YES'\nassert solution(\"10 4\") == 'YES'\nassert solution(\"13 4\") == 'NO'",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"YES\\n3 1\\n1 3\\n3 2\\n2 3\\n\"\nassert solution(\"10 4\") == \"YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n\"\nassert solution(\"13 4\") == \"NO\\n\"\nassert solution(\"20 4\") == \"NO\\n\"\nassert solution(\"100 4\") == \"NO\\n\"\n",
        "num_ids_2": 82,
        "num_ids_4": 108
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 3\n''') == 'YES\\n3 1\\n1 3\\n3 2\\n2 3\\n'\n\nassert solution('''10 4\n''') == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n'''\n\nassert solution('''13 4\n''') == 'NO\\n'''\n\nassert solution('''4 3\n''') == 'YES\\n3 1\\n1 3\\n3 2\\n2 3\\n'\nassert solution('''4 4\n''') == 'NO\\n'''\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3') == 'YES'\nassert solution('10 4') == 'YES'\nassert solution('13 4') == 'NO'\nassert solution('2 3') == 'NO'\nassert solution('3 2') == 'NO'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1",
        "num_ids_2": 1101,
        "num_ids_4": 1101
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1 3 10 1') == '18'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\\n\") == '18'\nassert solution(\"6 1 5\\n10 30 30 70 10 10\\n\") == '-1'\nassert solution(\"4 1 5\\n1 100 1 1\\n\") == '100'\n",
        "num_ids_2": 44,
        "num_ids_4": 64
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\") == \"-1\"\nassert solution(\"4 1 5\") == \"100\"\n\"\"\"\n\nn, k, x = [int(x) for x in input().split()]\nlst = [int(x) for x in input().split()]\nl = len(lst)",
        "num_ids_2": 26,
        "num_ids_4": 38
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"100\"\nassert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\nassert solution(\"2 3 2\\n100 100\") == \"-1\"\nassert solution(\"1 1 1\\n1\") == \"1\"\n\n\"\"\"\nimport sys\n\ninputs = sys.stdin.readlines()\n\nn, k, x = list(map(int, inputs[0].split()))\na = list(map(int, inputs[1].split()))",
        "num_ids_2": 39,
        "num_ids_4": 73
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\\n\") == \"18\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 1\\n1 100 1 1') == '100'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\nassert solution('5 2 3\\n5 1 3 10 1') == '18'\nassert solution('10 5\\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10') == '10'\nassert solution('10 5\\n10 10 10 10 10 10 10 10 10 10 10 10 10 10') == '10'\n",
        "num_ids_2": 39,
        "num_ids_4": 86
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\\n\") == \"18\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1') == '18'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\nassert solution('4 3 1\\n1 100 1 1') == '100'\n\"\"\"\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))",
        "num_ids_2": 40,
        "num_ids_4": 58
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 1\\n1 10 2 1') == '10'\nassert solution('4 5 2\\n1 2 5 2 1') == '6'\nassert solution('3 2 3\\n1 10 2 1') == '-1'\n\"\"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 56
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('100') == 100\nassert solution('01') == 1\nassert solution('101101010') == 10\nassert solution('100001') == 1\n",
        "num_ids_2": 16,
        "num_ids_4": 34
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1100100') == 3\nassert solution('0011') == 1\nassert solution('10111') == 3\nassert solution('101010') == 2\nassert solution('111111111') == 15\n\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('00100') == 3\nassert solution('11110') == 3\nassert solution('111010') == 4\nassert solution('1110010') == 5\nassert solution('11100111') == 21\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"0111010\") == 5\nassert solution(\"0111010\") == 5\nassert solution(\"1110110\") == 21\nassert solution(\"1110110\") == 21\n",
        "num_ids_2": 19,
        "num_ids_4": 39
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0' * 7) == '21'\nassert solution('0' * 9) == '15'\nassert solution('1' * 9) == '4'\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1101010') == '15'\nassert solution('0111010') == '8'\nassert solution('1110111') == '17'\nassert solution('1111011') == '19'\n\nprint(solution(input()))\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 47
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"010\") == \"1\"\nassert solution(\"00100\") == \"3\"\nassert solution(\"111111\") == \"0\"\nassert solution(\"10101010\") == \"11\"\nassert solution(\"101010\") == \"2\"\n",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"10101\") == \"5\"\nassert solution(\"10111\") == \"6\"\nassert solution(\"11111\") == \"5\"\nassert solution(\"11101\") == \"4\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"10110\") == 0\nassert solution(\"01110\") == 0\nassert solution(\"10010\") == 1\nassert solution(\"10101\") == 0\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('00100') == 3\nassert solution('10000') == 10\nassert solution('101010') == 10\nassert solution('11111') == 1\n\"\"\"\nimport sys",
        "num_ids_2": 17,
        "num_ids_4": 35
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"hazel\") == \"No\"\nassert solution(\"nazel\") == \"No\"\n\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"No\"\nassert solution(\"hello\") == \"No\"\n\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"No\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\n\"\"\"\n\n\"\"\"\nSOLUTION 1\n\"\"\"\n\nS = input()\nT = input()\ns_list = []\nt_list = []\n\nfor i in S:\n    s_list.append(i)\n\nfor i in T:\n    t_list.append(i)",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\nassert solution('www') == 'No'\nassert solution('zzz') == 'No'\nassert solution('zzzz') == 'No'\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abc', 'abc') == 'Yes'\nassert solution('abc', 'cba') == 'No'\nassert solution('abc', 'bac') == 'No'\nassert solution('', 'bac') == 'No'\nassert solution('abcccc', 'ac') == 'Yes'\n",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"azzel\"\n) == \"Yes\"\nassert solution(\n    \"apple\"\n) == \"Yes\"\nassert solution(\n    \"abcd\"\n) == \"No\"\nassert solution(\n    \"zzzz\"\n) == \"Yes\"\nassert solution(\n    \"ababb\"\n) == \"Yes\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\nassert solution('failure') == 'No'\n\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\nassert solution('aaaa') == 'Yes'\nassert solution('baa') == 'No'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"moo\") == \"No\"\n\"\"\"\n\nS, T = input(), input()\nprint(\"Yes\" if S.replace(\"z\", \"p\").replace(\"e\", \"l\").replace(\"p\", \"e\").replace(\"l\", \"z\") == T else \"No\")\n",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n10\n10\n20\n20\n15''') == '110'\nassert solution('''3\n20\n20\n30''') == '0'\nassert solution('''5\n10\n10\n20\n30\n20''') == '110'\nassert solution('''7\n30\n20\n20\n30\n20\n20\n30''') == '40'\nassert solution('''5\n10\n10\n20\n20\n30''') == '110'\n\nprint('Success')",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 4\") == \"20\"\nassert solution(\"2 2 2\") == \"8\"\nassert solution(\"2 3 1\") == \"12\"\nassert solution(\"4 4 4\") == \"25\"\nassert solution(\"1 1 1\") == \"2\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3 6\") == \"16\"\nassert solution(\"8 5 5\") == \"18\"\nassert solution(\"8 5 6\") == \"11\"\nassert solution(\"8 5 7\") == \"12\"\nassert solution(\"8 4 5\") == \"14\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 5\") == \"10\"\nassert solution(\"3 10 3 10\") == \"8\"\nassert solution(\"4 10 2 7 3\") == \"13\"\nassert solution(\"3 3 5\") == \"7\"\nassert solution(\"3 10 3 10\") == \"8\"\n",
        "num_ids_2": 25,
        "num_ids_4": 51
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''6\n5\n1\n5\n4\n1\n6\n2''') == 'false'\nassert solution('''5\n5\n1\n5\n4\n1\n6\n2''') == 'false'\nassert solution('''5\n5\n1\n5\n4\n1\n6\n2''') == 'false'\nassert solution('''5\n5\n1\n5\n4\n1\n6\n2\n''') == 'false'\nassert solution('''5\n5\n1\n5\n4\n1\n6\n2\n3''') == 'false'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 10 10\") == \"13\"\nassert solution(\"2 1 10 20\") == \"23\"\nassert solution(\"2 1 10 20 100\") == \"113\"\nassert solution(\"2 1 10 20 100 100\") == \"115\"\nassert solution(\"2 1 10 20 100 100 100\") == \"111\"\n",
        "num_ids_2": 26,
        "num_ids_4": 55
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 4 3\") == \"10\"\nassert solution(\"2 2 1\") == \"2\"\nassert solution(\"1 2 3 4\") == \"1\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"5 5 5 5 5\") == \"0\"\n",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6\") == \"5\"\nassert solution(\"7 13\") == \"15\"\nassert solution(\"8 13\") == \"11\"\nassert solution(\"1 13\") == \"12\"\nassert solution(\"1 1\") == \"0\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6 7 8 9 10\") == \"30\"\nassert solution(\"1 2 3 4 5 6\") == \"12\"\nassert solution(\"5 5 5 5 5 5\") == \"0\"\nassert solution(\"1 5 3 1 4\") == \"15\"\nassert solution(\"1 1 1 1 1 1\") == \"12\"\n",
        "num_ids_2": 30,
        "num_ids_4": 59
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5 3 6 2 3 1 4\") == \"8\"\nassert solution(\"2 5 3 6 2 3 1 4 1\") == \"12\"\nassert solution(\"1 5 2 6 1 5 3 6 2 2 2 3 6 1 5 3 6 3 2 2 2 4\") == \"32\"\n\"\"\"\n\nimport sys\nimport math\n",
        "num_ids_2": 35,
        "num_ids_4": 66
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 700\") == '3'\nassert solution(\"3 500\") == '3'\nassert solution(\"5 800\") == '1'\n\"\"\"\n\nimport sys\nfrom collections import Counter, defaultdict",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\n------Solution------\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 700\\n3 500\\n5 800') == '3'\nassert solution('3 500\\n5 800') == '3'\n\"\"\"\nfrom typing import List",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 700\") == \"3\"\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == 3\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 700\\n3 500\\n5 800') == 3\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_data) == \"3\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\nfrom math import ceil",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n",
        "num_ids_2": 39,
        "num_ids_4": 60
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(2)\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 39,
        "num_ids_4": 60
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 4 5 5 6\") == \"2\"\nassert solution(\"4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9 2 3 4 2 2 3 2 2 4\") == \"3\"",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n",
        "num_ids_2": 39,
        "num_ids_4": 60
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n",
        "num_ids_2": 39,
        "num_ids_4": 60
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6\\n') == 2\nassert solution('8\\n4 8 8 7 8 4 4 5\\n') == 2\nassert solution('9\\n2 3 4 2 2 3 2 2 4\\n') == 3\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split(' ')))\n\neven = []\nodd = []\n\neven_count = 0\nodd_count = 0\n\nfor i in range(n):\n    if i % 2 == 0:\n        even.append(a[i])\n        even_count += a[i]\n    else:\n        odd.append(a[i])\n        odd_count += a[i]\n\nsum_even = sum(even)\nsum_odd = sum(odd)",
        "num_ids_2": 39,
        "num_ids_4": 60
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\\n\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\\n\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\\n\") == \"3\"",
        "num_ids_2": 43,
        "num_ids_4": 66
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 4 3 3\") == \"1\"\nassert solution(\"10\\n1 2 4 4 4 4 4 4 4 4 4 4\") == \"1\"\nassert solution(\"8\\n1 4 4 4 4 4 4 4 4 4\") == \"1\"\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 62
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6') == '2'\nassert solution('8\\n4 8 8 7 8 4 4 5') == '2'\nassert solution('9\\n2 3 4 2 2 3 2 2 4') == '3'\n\"\"\"\n\nn = int(stdin.readline().strip())\n\nweight = list(map(int, stdin.readline().strip().split(' ')))\ncount = 0\n\nfor i in range(n - 1):\n    if (weight[i] + weight[i + 1]) % 2!= 0:\n        count += 1\n\nprint(count)\n",
        "num_ids_2": 39,
        "num_ids_4": 60
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 2\\n1 100 1 1') == 100\nassert solution('5 1 3\\n1 100 1 1') == -1\nassert solution('5 1 4\\n1 100 1 1') == 100\nassert solution('5 2 4\\n1 100 1 1') == -1\nassert solution('5 2 3\\n1 100 1 1') == 100\n\nprint('The code ran Correctly')\n",
        "num_ids_2": 33,
        "num_ids_4": 66
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 1 3 3', '5 1 3 10 1') == '18'\nassert solution('6 1 5', '10 30 30 70 10 10') == '-1'\n\"\"\"\n\nn, k, x = map(int, input().split())\nlst = list(map(int, input().split()))\n\nlst.sort(reverse=True)\nmax_sum = 0\n\nfor i in range(n):\n    if k - 1 < i < n - x:\n        max_sum += lst[i]\n        if max_sum > 0:\n            break",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 5') == '100'\nassert solution('6 1 5') == '-1'\n\"\"\"\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\nm = 0\nfor i in range(n - k + 1):\n    if x == 1:\n        m = max(m, a[i] + a[i + k - 1])\n    else:\n        m = max(m, sum([a[j] for j in range(i, i + k)]) / k)\n\nprint(m) if m < max(a) else print(-1)\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\\n\") == \"18\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nimport sys\nimport typing\nimport collections\n\nclass Segment:\n    \"\"\"\n    Model of segment.\n    \"\"\"\n    def __init__(self, start: int, end: int) -> None:\n        self.start = start\n        self.end = end\n\nclass Result:\n    \"\"\"\n    Model of result.\n    \"\"\"\n    def __init__(self) -> None:\n        self.best_sum = sys.maxsize\n        self.best_segment = None",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"-1\"\nassert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\nassert solution(\"1\\n10 10 10 10\") == \"100\"\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 73
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 3\\n1 1 2 1\\n\") == \"3\"\n\nassert solution(\"7 4 5\\n4 1 3 1 1 1 1\\n\") == \"6\"\n\nassert solution(\"7 2 4\\n4 2 1 2 3 4\\n\") == \"-1\"\n\nassert solution(\"5 4 4\\n1 1 1 1 1\\n\") == \"5\"\n\nassert solution(\"1 1\\n10\\n\") == \"10\"",
        "num_ids_2": 43,
        "num_ids_4": 86
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 1\\n1 100 1 1') == '100'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\nassert solution('5 2 3\\n5 1 3 10 1') == '18'\n\"\"\"\nimport sys\n\nn, k, x = map(int, sys.stdin.readline().split())\narr = list(map(int, sys.stdin.readline().split()))\n\nmax_sum = 0\nsum_of_segment = 0\nfor i in range(n):\n    sum_of_segment += arr[i]\n    if i >= k and sum_of_segment >= x:\n        max_sum = max(max_sum, sum_of_segment)\n        sum_of_segment -= arr[i-k]\n\nprint(max_sum if max_sum >= 0 else -1)\n",
        "num_ids_2": 39,
        "num_ids_4": 58
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 1\\n1 100 1 1\") == 100\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11') == \"Yes\"\nassert solution('10') == \"Yes\"\nassert solution('9') == \"No\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"No\"\nassert solution(\"5\") == \"Yes\"\nassert solution(\"11\") == \"Yes\"\n\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"11\"))\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"Yes\"\nassert solution(\"4\") == \"No\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n5') == 'Yes'\nassert solution('10\\n15') == 'No'\nassert solution('7\\n9') == 'No'\nassert solution('12\\n13') == 'No'\nassert solution('1\\n1') == 'Yes'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\") == \"Yes\"\nassert solution(\"13\") == \"No\"\nassert solution(\"0\") == \"Yes\"\nassert solution(\"100\") == \"Yes\"\nassert solution(\"55\") == \"No\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11') == 'Yes'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\") == \"Yes\"\nassert solution(\"6\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1) == \"Yes\"\nassert solution(2) == \"Yes\"\nassert solution(4) == \"Yes\"\nassert solution(5) == \"Yes\"\nassert solution(6) == \"Yes\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == 'Yes'\nassert solution('7') == 'Yes'\nassert solution('11') == 'Yes'\nassert solution('15') == 'No'\nassert solution('16') == 'No'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 'Yes'\nassert solution('3') == 'Yes'\nassert solution('4') == 'Yes'\nassert solution('5') == 'No'\nassert solution('6') == 'No'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\n\nfrom typing import List, NamedTuple",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, sys.stdin.readline().split())))",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n\") == \"2 2 6\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\n\n\"\"\"\n\u4eca\u56de\u306f\u3001\u5168\u3066\u306e\u89e3\u7b54\u6642\u9593\u304c\u8a08\u6e2c\u3067\u304d\u3066\u3044\u308b\u304c\u3001\u3059\u3079\u3066\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u898b\u3066\u3044\u308b\u3088\u308a\u3082\u3001\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5834\u6240\u306e\u89e3\u7b54\u6642\u9593\u304c\u6642\u9593\u304c\u304b\u304b\u308b\u3088\u3046\u3060\u3002\n\u305d\u3053\u3067\u306f\u3001\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u89e3\u7b54\u6642\u9593\u306e\u8a08\u6e2c\u3092\u884c\u3046\u3002\n\n\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u89e3\u7b54\u6642\u9593\u306e\u8a08\u6e2c\u3092\u884c\u3046\u306b\u306f\u3001\u8981\u7d20\u6570\u304c\u5927\u304d\u304f\u5909\u308f\u3063\u3066\u3044\u308b\u914d\u5217\u3092\u8a08\u6e2c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u3053\u306e\u3088\u3046\u306b\u3001\u8a08\u6e2c\u3067\u304d\u3066\u3044\u308b\u3068\u306f\u8a00\u3048\u3070\u8a08\u6e2c\u3067\u304d\u3066\u3044\u306a\u3044\u89e3\u7b54\u6642\u9593\u306e\u8a08\u6e2c\u306f\u884c\u308f\u308c\u3066\u3044\u308b\u3002\n\u8a08\u6e2c\u3067\u304d\u3066\u3044\u306a\u3044\u89e3\u7b54\u6642\u9593\u306e\u8a08\u6e2c\u306e\u305f\u3081\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u64cd\u4f5c\u3092\u884c\u3044\u3001\u7d2f\u7a4d\u548c\u3092\u8a08\u7b97\u3057\u3066\u3044\u304f\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\u64cd\u4f5c\n- \u30a8\u30ea\u30a2(\u5019\u88dc\u304b\u3089\u9664\u5916)\n- \u7d2f\u7a4d\u548c\n\n\u3053\u308c\u3089\u306e\u64cd\u4f5c\u3092\u884c\u3063\u3066\u3001\u8a08\u6e2c\u3067\u304d\u3066\u3044\u308b\u3068\u306f\u8a00\u3048\u3070\u8a08\u6e2c\u3067\u304d\u3066\u3044\u306a\u3044\u89e3\u7b54\u6642\u9593\u306e\u8a08\u6e2c\u306f\u884c\u308f\u308c\u3066\u3044\u308b\u3002\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == '2 2 6'\n\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(    \"4\\n\"\n        \"2 3 5\\n\"\n        \"2 1 5\\n\"\n        \"1 2 5\\n\"\n        \":\\n\"\n        \"3 2 5\"\n        ) == \"2 2 6\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"4\n1 2 5\n2 1 5\n1 2 5\n3 2 5\n\"\"\") == \"2 2 6\"\n\n\"\"\"\n\u4e88\u60f3\u3055\u308c\u308b\u89e3\u6cd5\n- \u7d20\u76f4\u306b\u6570\u5217\u5168\u63a2\u7d22\u3057\u3066\u307f\u308b\n- \u7121\u7406\u3067\u306f\u306a\u3044\u306e\u3067\u96e3\u3057\u3044\n- \u7d20\u76f4\u306b\u9006\u9806\u7d2f\u7a4d\u548c\u3092\u8003\u3048\u308c\u3070\u826f\u3044\n\"\"\"\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\n\"\"\"\n\n\"\"\"\n\u672c\u89e3\u6cd5\u672c\u8d28\u4e0a\u4e5f\u662f\u62d3\u6251\u7ed3\u6784\uff0c\u5148\u628a\u8fb9\u60c5\u51b5\u6392\u4e00\u6b21\u5e8f\uff0c\u7136\u540e\u628a\u56fe\u7684\u8fb9\uff0c\u7ed3\u70b9\u989c\u8272\uff0c\u7ed3\u70b9\u503c\u90fd\u8bb0\u5f55\u597d\uff0c\u4e0b\u9762\u5199\u4e2a\u540c\u6b65\u8ba1\u7b97\u989c\u8272\u7684\u65b9\u6cd5\n1. \u53ea\u6709\u8bbf\u95ee\u8fc7\u7684\u70b9\u7684\u989c\u8272\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684value\u53ea\u8bb0\u5f55\u6700\u540e\u4e00\u6b21\u8bbf\u95ee\u65f6\u7684\u989c\u8272\n2. \u5982\u679c\u8bbf\u95ee\u8fc7\uff0c\u82e5\u8be5\u8282\u70b9\u7684\u6700\u540e\u4e00\u6b21\u8bbf\u95ee\u989c\u8272\uff0c\u4e0e\u6b64\u6b21\u8bbf\u95ee\u989c\u8272\u4e0d\u540c\uff0c\u5219\u8bf4\u660e\u53d1\u751f\u4e86\u73af\u8def\uff0c\u8be5\u8282\u70b9\u5c31\u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u7ea2\u8272\n3. \u628a\u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u540e\u4e00\u6b21\u8bbf\u95ee\u989c\u8272\u4e3a\u7ea2\u8272\uff0c\u4e14\u8fd8\u8bb0\u5f55\u4e0b\u6b64\u65f6\u6700\u5927\u7684value\n\"\"\"\n\nimport collections",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'\n\nprint(solution(stdin.rstrip('\\n')))",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(s) == answer\nprint(solution(s))\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('redcoder') == 1\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"redcoder\") == 1\nassert solution(\"abracadabra\") == 0\nassert solution(\"kasjdlkfjsdlkjfdsalkjfklsdkjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkjfdsalkjfklsdkjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkjfdsalkjfklsdkjfkljdlkfjslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslk",
        "num_ids_2": 22,
        "num_ids_4": 1838
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abcd') == 0\nassert solution('abcc') == 1\nassert solution('abc') == 1\n\"\"\"\n\nimport sys\nimport string",
        "num_ids_2": 18,
        "num_ids_4": 26
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('redcoder') == 1\nassert solution('redcod') == 2\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('redcoder') == '1'\nassert solution('hello') == '2'\nassert solution('hihihi') == '0'\nassert solution('adc') == '3'\n",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"9\") == \"Yes\"\nassert solution(\"4\") == \"No\"\nassert solution(\"6\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"100\") == \"No\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"12\") == \"No\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"15\") == \"No\"\nassert solution(\"4\") == \"Yes\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n') == 'No'\nassert solution('3\\n') == 'Yes'\nassert solution('4\\n') == 'Yes'\nassert solution('5\\n') == 'Yes'\nassert solution('6\\n') == 'No'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == 'Yes'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"30\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == \"Yes\"\nassert solution('20') == \"No\"\nassert solution('7') == \"No\"\nassert solution('100') == \"Yes\"\nassert solution('0') == \"No\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected_stdout\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == 'Yes'\nassert solution('5') == 'Yes'\nassert solution('2') == 'No'\nassert solution('4') == 'No'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4 9 7 5\") == \"5\"\n\"\"\"\nimport sys\nfrom math import factorial",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\"\n\nfrom typing import List, Tuple\n\nn = int(input())\nnums = [int(x) for x in input().split()]\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\"\n\nimport os\nimport sys\n\nclass Solution:\n    def __init__(self):\n        self.sol = None\n    \n    def check(self, lst):\n        # check if (lst[0], lst[1], lst[2]) forms a triangle\n        for i in range(3):\n            for j in range(i+1, 3):\n                if lst[i] + lst[j] > lst[j] + lst[i]:\n                    return False\n        return True\n\n    def solve(self, n):\n        if self.sol:\n            return self.sol\n        else:\n            if n < 3:\n                return 0\n            else:\n                if n == 3:\n                    return 1\n                else:\n                    return sum([self.solve(i) for i in range(n-3, n)])\n\n    def solution(self, stdin: str) -> str:\n        n = int(stdin.split()[0])\n        lst = list(map(int, stdin.split()[1:]))\n        self.sol = sum([self.solve(i) for i in range(n)])\n        return str(self.sol)",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(    '4 4 9 7 5'    ) == '5'\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4 4 9 7 5\") == '5'\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4 9 7 5\") == 5\nassert solution(\"7 5 4 4 8 9\") == 6\n\"\"\"\n\nfrom itertools import combinations",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4 9 7 5\\n') == '5'\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\"\nfrom typing import List, Set, Dict, Tuple\n\n\nclass Triangle:\n    def __init__(self, length_1: int, length_2: int, length_3: int):\n        self.length_1 = length_1\n        self.length_2 = length_2\n        self.length_3 = length_3\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2, 5) == 10\nassert solution(1, 3) == -1\n\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n\na, b = list(map(int, stdin.split()))\nprint(a * b) if a * b < 10 else print(\"-1\")\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\") == 10\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(2, 5) == 10\nassert solution(4, 7) == -1\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 5') == '10'\n\"\"\"\n\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 5\\n') == '10'\n\nprint(solution('2 5\\n'))\n\n\"\"\"\n\"\"\"\n2 \\times 5 = 10.\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\n1 3 2 4') == '2'\nassert solution('3 5\\n1 3 2 4 5') == '5'\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 1 1 2 3\\n\") == \"5\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\\n\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 5\\n1 2 3 4 5 6\\n\") == \"4\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n\"\"\"\n\n\"\"\"\n----- Approach 1: Dynamic Programming -----\n\nDP is a dynamic programming technique for finding the minimum number of moves required to achieve the objective.\n\nWe can solve this problem using dynamic programming with the help of a table.\nThe table can be seen as an auxiliary data structure which maintains, for each coordinate x, the minimum number of moves\nrequired to achieve the objective so far.\n\nIf we visit x, then the minimum number of moves required to achieve the objective so far is,\n1) minimum of moves required to achieve the objective so far when x is not visited,\n2) the sum of the minimum numbers of moves required to achieve the objective so far and the minimum of the number of moves required to achieve the objective so far when x is visited.\n\ndp[i] will store the minimum number of moves required to achieve the objective so far when x_i is visited.\nThe answer is dp[M]\n\nTime Complexity: O(MN)\nSpace Complexity: O(MN)\n\n----- Complexity Analysis-----\n\nThe above solution has a time complexity of O(MN) and a space complexity of O(MN).\n\"\"\"\n\n\"\"\"\n----- Approach 2: Greedy -----\n\nA greedy approach would be to find the minimum of the following three conditions:\n1) The minimum number of moves required to achieve the objective when x_1 is visited\n2) The minimum number of moves required to achieve the objective when x_2 is visited\n3) The minimum number of moves required to achieve the objective when x_3 is visited\n\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 12 1 2 14\\n\") == \"5\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n1 2 3 4 5\") == '5'\nassert solution(\"5 3\\n1 2 3 4 5\") == '3'\nassert solution(\"5 2\\n1 2 3 4 5\") == '2'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n9 10 1 3 2\\n\") == \"2\"\n\"\"\"\n\nn, m = map(int, input().split())\nx = list(map(int, input().split()))",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 2 3 4 5\") == \"5\"\nassert solution(\"4 3\\n1 2 3 4\") == \"4\"\nassert solution(\"2 5\\n10 12 1 2\") == \"5\"\nassert solution(\"2 5\\n10 12 1\") == \"5\"\nassert solution(\"2 5\\n10 12 1 1\") == \"2\"\n",
        "num_ids_2": 35,
        "num_ids_4": 68
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\nassert solution('3 5\\n20 14 20 14') == '3'\nassert solution('1 5\\n20 14 20 14') == '0'\n\"\"\"\n",
        "num_ids_2": 35,
        "num_ids_4": 52
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 3\") == \"1011\"\nassert solution(\"4 6 3\") == \"10110101\"\nassert solution(\"5 6 2\") == \"111100\"\nassert solution(\"4 4 3\") == \"1011\"\nassert solution(\"5 6 2\") == \"111100\"\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\\n1011\"\n\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1\\n101001\\n\"\n\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"2\\n111100\\n110110\"\n",
        "num_ids_2": 78,
        "num_ids_4": 123
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input) == output\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\\n1011\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n\") == \"2\\n1110\\n1011\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n\") == \"1\\n101001\\n\"\nassert solution(\"4 6 2\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n\") == \"2\\n1110\\n1011\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n\") == \"1\\n101001\\n\"\nassert solution(\"4 6 3\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n\") == \"0\\n101001\\n\"",
        "num_ids_2": 90,
        "num_ids_4": 180
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\\n1011\"\n\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"2\\n111100\\n110110\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"1\\n101001\\n110110\"",
        "num_ids_2": 90,
        "num_ids_4": 90
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"4 4 3\n1 2\n2 3\n1 4\n4 3\"\"\"\n) == \"\"\"2\n1110\n1011\"\"\"\n\nassert solution(\n\"\"\"5 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\"\"\"\n) == \"\"\"1\n101001\n\"\"\"\n\n\n\"\"\"\n3.4.1.3\n\n\u0417\u0430\u0434\u0430\u0447\u0430\n\u0412 \u043d\u0430\u0448\u0435\u043c \u0441\u0442\u0440\u0430\u043d\u0435 \u0412\u0414\u041d\u0425 \u043a\u0430\u0436\u0434\u044b\u0439 \u0433\u043e\u0434 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442 \u0432\u043e\u043b\u043e\u043d\u0442\u0435\u0440\u0441\u043a\u0438\u0439 \u043a\u043e\u043d\u043a\u0443\u0440\u0441 \u043f\u043e \u043f\u043e\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044e \u0432 \u0412\u0414\u041d\u0425. \u041c\u044b \u043d\u0430\u0443\u0447\u0438\u043b\u0438\u0441\u044c \u043d\u0430\u0439\u0442\u0438 \u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f, \u043a\u043e\u0433\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u044f\u0442 \u0432 \u043a\u0430\u0444\u0435, \u0435\u0441\u043b\u0438 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432.\n\n\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 (\u0441\u0442\u0430\u0442\u0443\u0441\u044b \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0442 \u043e\u0442 1 \u0434\u043e 5 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e) \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0430\u0436\u0435\u0440\u043e\u0432, \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c.\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442, \u043a\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u044f\u0442 \u0432 \u043a\u0430\u0444\u0435, \u0435\u0441\u043b\u0438 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\n\u0422\u0435\u0441\u0442 1\n>>> 5\n>>> 2\n1\n2\n3\n4\n5\n>>> 1\n>>> 2\n>>> 3\n>>> 4\n>>> 5\n>>> 1\n>>> 2\n>>> 3\n>>> 4\n>>> 5\n>>> 1\n1\n2\n3\n4\n5\n1\n2\n3\n4\n5\n1\n2\n3\n4\n5\n1\n2\n3\n4\n5\n1\n2\n3\n4\n5\n1\n2\n3\n4\n5\n\n\u0422\u0435\u0441\u0442 2\n>>> 4\n>>> 1\n1\n2\n3\n4\n>>> 1\n>>> 2\n1\n2\n3\n4\n>>> 1\n>>> 2\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n\n\u0422\u0435\u0441\u0442 3\n>>> 6\n>>> 2\n1\n2\n3\n4\n5\n6\n>>> 1\n1\n2\n3\n4\n5\n6\n>>> 1\n1\n2\n3\n4\n5\n6\n>>> 1\n1\n2\n3\n4\n5\n6\n>>> 1\n1\n2\n3\n4\n5\n6\n>>> 1\n1\n2",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == b\nprint(solution(input()))\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"1\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"2\"\nassert solution(\"4 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"1\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"2\"\nassert solution(\"5 6 3\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"1\"\n",
        "num_ids_2": 64,
        "num_ids_4": 136
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"3 1 1 2 5\") == \"YES\"\nassert solution(\"2 10 10\") == \"YES\"\nassert solution(\"3 4 5\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\n",
        "num_ids_2": 28,
        "num_ids_4": 52
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 1 2 5\") == \"YES\"\nassert solution(\"3 1 2 3\") == \"YES\"\nassert solution(\"3 1 2 1 3\") == \"NO\"\nassert solution(\"2 10 10\") == \"YES\"\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n2 1 1 2 5\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n2\n10 10\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"NO\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"3 1 2 1 2\") == \"YES\"\nassert solution(\"3 1 2 1 5\") == \"NO\"\nassert solution(\"4 5 3\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\n",
        "num_ids_2": 28,
        "num_ids_4": 54
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 32,
        "num_ids_4": 61
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 1 2 5\") == \"YES\"\nassert solution(\"3 1 2\") == \"YES\"\nassert solution(\"2 10\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\nassert solution(\"3 1 3\") == \"NO\"\n",
        "num_ids_2": 26,
        "num_ids_4": 49
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 1 2 5') == 'YES'\nassert solution('3 5 4') == 'NO'\nassert solution('10 10') == 'YES'\nassert solution('1 2 3') == 'NO'\n\n\n\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 49
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n",
        "num_ids_2": 32,
        "num_ids_4": 61
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n",
        "num_ids_2": 32,
        "num_ids_4": 61
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"1\\n10\") == \"YES\"\n",
        "num_ids_2": 32,
        "num_ids_4": 59
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == '9'\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == '4999999999996'\n\"\"\"\n\nfrom typing import Tuple, List, Union\nfrom fractions import Fraction",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4 5\\n6 7 8 9 10') == 9\nassert solution('10 5\\n0 -2 -4 -6') == 5\nassert solution('1 1 1 1\\n1 1 1 1') == -1\nassert solution('1 1 1 1\\n1 1 1 0') == 4999999999\nassert solution('1 1 1 1\\n1 1 1 0') == 499999999\n",
        "num_ids_2": 37,
        "num_ids_4": 75
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == '9'\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == '4999999999996'\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\n\"\"\"\n\n\nfrom collections import deque",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 6 -100 -200 -300 125 77 -4\") == '9'\nassert solution(\"1000000000000 5\") == '4999999999996'\nassert solution(\"10 4 -1 0 0 0 0\") == '-1'\nprint(\"All test cases passed.\")\n\n----------",
        "num_ids_2": 38,
        "num_ids_4": 56
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\nassert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\n",
        "num_ids_2": 48,
        "num_ids_4": 71
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BBAABBBA\") == \"BB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\"\"\"\n\n\nimport collections\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AAABBB\") == \"BB\"\nassert solution(\"ABABABABAB\") == \"ABABABAB\"\nassert solution(\"ABAABABAABABAABAABAB\") == \"ABAABABAABABAABABAABAB\"\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 64
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABCD\") == \"AB\"\nassert solution(\"ABACABA\") == \"AB\"\nassert solution(\"AAABBB\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\n########################################################################################################################################################################################################################################\n########################################################################################################################################################################################################################################\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BA\") == \"BA\"\n\nassert solution(\"AA\") == \"AA\"\n\nassert solution(\"ZZ\") == \"ZZ\"\n\nassert solution(\"ZZAA\") == \"ZZ\"\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BBAABBBA\") == \"BB\"\nassert solution(\"AZAAAZAA\") == \"AZ\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABC') == 'A'\nassert solution('ZZZ') == 'ZZ'\nassert solution('ABCABBA') == 'AB'\nassert solution('ABCABBABCABBABCABBABCABBAB') == 'ABBABCABBABC'\nassert solution('ABCABBABCABBABCABBAB') == 'ABBABCABBABC'\n",
        "num_ids_2": 21,
        "num_ids_4": 60
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"test\") == \"est\"\nassert solution(\"b\") == \"a\"\nassert solution(\"ab\") == 1\n",
        "num_ids_2": 23,
        "num_ids_4": 43
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('codeforces') == 'es'\nassert solution('yes') == 'es'\nassert solution('test') == 'est'\nassert solution('b') == 'ab'\nassert solution('a') == ''\n",
        "num_ids_2": 23,
        "num_ids_4": 43
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"west\") == \"test\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"ab\"\n\n-----Problem-----\n\nInput Format\n\nThe first line of the input contains $s$. In the second line of the input contains $t$. Both strings consist only of lowercase Latin letters. The number of letters in each string is between 1 and $2\\cdot10^5$, inclusive.\n\nConstraints\n\nIt's guaranteed that a solution always exists.\n\nOutput Format\n\nOutput the fewest number of moves required. It is possible that, in the end, both strings will be equal to the empty string, and so, are equal to each other. In this case, the answer is obviously the sum of the lengths of the given strings.\n\nSample Input 0\n\ncodeforces\nyes\n\nSample Output 0\n\n9\n\nSample Input 1\n\ntest\nyes\n\nSample Output 1\n\n2\n\nSample Input 2\n\nb\nab\n\nSample Output 2\n\n1\n\nSample Input 3\n\na\naa\n\nSample Output 3\n\n1\n\n\n'''",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"test\") == \"est\"\nassert solution(\"b\") == \"ab\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 43
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    'codeforces'\n) == 'es'\nassert solution(\n    'yes'\n) == 'es'\nassert solution(\n    'test'\n) == 'est'\nassert solution(\n    'b'\n) == 1\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"where\") == \"here\"\nassert solution(\"a\") == \"\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"test\") == \"est\"\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"ab\"\n",
        "num_ids_2": 23,
        "num_ids_4": 33
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"test\") == 2\nassert solution(\"west\") == 2\nassert solution(\"codeforces\") == 9\nassert solution(\"yes\") == 7\n\nassert solution(\"a\") == 0\n",
        "num_ids_2": 16,
        "num_ids_4": 35
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('codeforces') == 'es'\nassert solution('yes') == 'es'\nassert solution('b') == 'a'\nassert solution('ab') == 1\nassert solution('abcd') == 3\n",
        "num_ids_2": 23,
        "num_ids_4": 41
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"test\") == \"est\"\nassert solution(\"b\") == \"ab\"\n\n\"\"\"\nfrom typing import Union\n",
        "num_ids_2": 23,
        "num_ids_4": 43
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 3\n1 7 11\n''') == '2'\n\n'''\nThe main idea is to calculate the minimum difference between two consecutive cities.\nSo we are trying to find the minimum difference (D) between x_i and x_{i + 1}.\nWe can easily solve this problem by using a greedy algorithm.\n\nFor example, if the cities are arranged as follows:\n\nx_1    x_2    x_3\nx_4    x_5    x_6\nx_7    x_8    x_9\n\nThen we are trying to find the minimum difference (D) between x_i and x_{i + 1}\nfor all i, and this is equal to 2.\n\nNow, since the minimum difference (D) between two consecutive cities must be positive,\nand since x_1 is the only city whose value is less than x_2, we should start with x_2.\n\nOur greedy algorithm for the problem can be described as follows.\n\nFind the city that has the minimum value (the city that has the minimum value of D).\nFind the minimum difference between this city and the next city.\nIf this difference is positive, then set D = D + 1.\nIf this difference is negative, then set D = D - 1.\nThis algorithm will stop when D becomes 0.\n\nSo, we can find the minimum value of D by following the above algorithm.\n\nOur greedy algorithm gives us the minimum value of D which is 2.\n'''",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\"\n\nfrom math import ceil, log2",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5 3') == '2'\nassert solution('7 5\\n1 7 11') == '2'\nassert solution('8 4\\n1 7 11 1 12') == '2'\nassert solution('7 10\\n1 7 11 1 12') == '3'\n",
        "num_ids_2": 19,
        "num_ids_4": 53
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open(\"sample/1.in\").read()) == \"2\"\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('N X') == 'N X'\nassert solution('N\\n X') == 'N'\nassert solution('2\\n 1 7 11') == '2'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 48
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input) == output\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\nfrom __future__ import annotations\n\nimport math\nfrom enum import Enum\nfrom typing import List\n\nfrom icontract import require, ensure, DBC\n\n\nclass Direction(Enum):\n    \"\"\"Where to go to next.\"\"\"\n\n    SAME = 0  # type: Direction\n    FAR = 1  # type: Direction\n    CLOSE = 2  # type: Direction\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 7 11\\n') == '2'\n\"\"\"\n\nimport collections\n\nclass Node(collections.namedtuple('Node', ['left', 'right'])):\n    def walk(self, code, acc):\n        self.left.walk(code, acc + '0')\n        self.right.walk(code, acc + '1')",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(open(\"sample/2.in\").read()) == 2\nassert solution(open(\"sample/2.in\").read()) == 2\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('akasaka') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('akasaka') == 'Yes'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"Yes\"\nassert solution(\"abaa\") == \"Yes\"\nassert solution(\"abac\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\nassert solution(\"ab\") == \"No\"\nassert solution(\"abba\") == \"Yes\"\nassert solution(\"bb\") == \"Yes\"\nassert solution(\"abbab\") == \"No\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aka\") == \"Yes\"\nassert solution(\"a\") == \"Yes\"\nassert solution(\"akak\") == \"Yes\"\nassert solution(\"akasaka\") == \"Yes\"\nassert solution(\"aabaa\") == \"Yes\"\n",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'Yes'\nassert solution('a') == 'Yes'\nassert solution('aa') == 'Yes'\nassert solution('aaa') == 'Yes'\nassert solution('aab') == 'No'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('198 1.10') == '217'\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"198 1.10\") == \"217\"\nassert solution(\"82984 4.73\") == \"27717\"\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('198 1.10') == '217'\nprint('Test PASSED')\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\n\nimport sys\n\nA, B = [int(n) for n in sys.stdin.readline().split()]\n\nA, B = A * 10, B * 10\n\nwhile A > 0:\n    A, B = A // 10, B // 10\n\nprint(int(B))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('198 1.10') == '217'\n\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7') == '3'\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('2000000000') == '999999999'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''6\n7\n1\n2\n3\n2000000000\n763243547''') == '3\\n0\\n0\\n1\\n999999999\\n381621773'\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('2\\n1\\n') == '1'\nassert solution('2\\n2\\n') == '0'\nassert solution('1\\n1\\n') == '1'\n",
        "num_ids_2": 20,
        "num_ids_4": 50
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('1 2') == '0'\nassert solution('2 1') == '1'\n",
        "num_ids_2": 18,
        "num_ids_4": 39
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('2\\n7\\n9\\n2') == '2'\nassert solution('4\\n5\\n2') == '3'\nassert solution('3\\n4\\n6\\n2') == '0'\nassert solution('10\\n1\\n2') == '0'\n",
        "num_ids_2": 27,
        "num_ids_4": 62
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\"\nassert solution(\"6\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"1\"\nassert solution(\"5\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"0\"\nassert solution(\"5\\n1\\n2\\n3\\n763243547\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 58,
        "num_ids_4": 112
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"\n\"\"\"\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\"\n\"\"\"\n\nimport sys\nimport collections\n\nsys.setrecursionlimit(10 ** 7)\nDEBUG = False\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('1') == 0\nassert solution('2') == 0\nassert solution('3') == 0\nassert solution('4') == 1\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\n\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\n\n\"\"\"\n\n\nimport sys\nimport math\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input) == output\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"1\"\nassert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\\n\") == \"3\"\nassert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\\n\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 80,
        "num_ids_4": 130
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\n\"\"\"\n\nfrom sys import stdin\nfrom collections import defaultdict\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == '3'\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == '1'\n",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 1\\n1 2\\n2 3') == '0'\nassert solution('4 3 2\\n1 2\\n2 3') == '1'\nassert solution('4 3 3\\n1 2\\n2 3') == '1'\nassert solution('4 3 4\\n1 2\\n2 3') == '1'\n\n\"\"\"\n\nfrom collections import defaultdict, deque",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('1 2\\n') == '0'\nassert solution('1 2 3\\n') == '0'\nassert solution('1 2\\n3 4\\n') == '0'\n",
        "num_ids_2": 20,
        "num_ids_4": 47
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\nassert solution(\"5 4 2\\n1 2\\n2 3\\n3 4\\n4 1\") == \"0\"\nprint(\"Ok!\")\n",
        "num_ids_2": 76,
        "num_ids_4": 104
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\\n') == '3'\nassert solution('5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n') == '1'\nassert solution('5 4 0\\n1 2\\n2 3\\n3 4\\n4 1\\n') == '0'\nassert solution('4 2 0\\n1 2\\n2 3\\n3 4\\n') == '0'\nassert solution('3 2 0\\n1 2\\n2 3\\n') == '0'\n\"\"\"\n",
        "num_ids_2": 80,
        "num_ids_4": 136
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 1 1 4 4 4') == '5'\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3 2 4 1') == '4'\nassert solution('6\\n1 1 1 4 4 4') == '5'\n\"\"\"\n\n\nimport collections",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 2 4 1') == '4'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3 2 4 1') == '4'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('1\\n15') == '1'\nassert solution('2\\n4 3') == '3'\nassert solution('7\\n1 3 3 3 3 1') == '7'\n",
        "num_ids_2": 34,
        "num_ids_4": 61
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 2 4 1\") == 4\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n1 32\\n2 63\\n1 12') == '000001000002\\n000002000001\\n000001000001'\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\np, y = [0]*n, [0]*n\nfor i in range(n):\n    p[i], y[i] = map(int, stdin.readline().split())\n\nfor i in range(m):\n    print('{:06d}{:06d}'.format(p[i], y[i]))",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\nprefectures, cities = [], []\n\nfor _ in range(n):\n    prefecture, year = sys.stdin.readline().split()\n    prefectures.append(prefecture)\n    cities.append(int(year))\n\nfor i in range(m):\n    cities[cities.index(max(cities))] = 0\n\nfor i, (p, y) in enumerate(zip(prefectures, cities)):\n    print(\"{:06d}\".format(int(p + str(i+1))))\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 32\\n2 63') == '000001000002\\n000002000001'\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\\n\") == \"000001000002\\n000002000001\\n000001000001\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\"\n\"\"\"\n\nfrom sys import stdin, stdout\n\nn_m = stdin.readline().split(' ')\nprefectures = {}\n\nfor _ in range(int(n_m[0])):\n    city, year = stdin.readline().split(' ')\n    prefectures[city] = year\n\nfor _ in range(int(n_m[1])):\n    city = stdin.readline()\n    stdout.write(prefectures[city[0:6]] + '\\n')\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\"\nassert solution(\"1 9\\n2 32\") == \"000001000001\"\nassert solution(\"3 4\\n1 5\\n2 12\\n3 16\") == \"01111110011111\"\n\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 45,
        "num_ids_4": 72
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '2 3\\n1 32\\n2 63'\n) == '000001000002\\n000002000001'\nassert solution(\n    '2 3\\n1 12\\n2 63'\n) == '000001000001\\n000002000001'\nassert solution(\n    '2 2\\n1 2\\n2 3'\n) == '000001000002'\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 3\n1 32\n2 63''') == '000001000002\\n000002000001\\n000001000001'\nprint('Test pass.')",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n1 32\\n2 63') == '000001000002\\n000002000001\\n000001000001'\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\nprint(solution(\"4\\n2 10 8 40\"))\n\n-----\n5\n1 2 3 4 5\n\n-----\n4\n1 1 1 1 1\n\n-----\n3\n1 3 9\n\n-----\n5\n1 2 3 4 5\n\n-----\n\n-----\n4\n1 5 1 2\n\n-----\n5\n1 2 4 2\n\n-----\n4\n10 20 6 7\n\n-----\n2\n2 1\n\n-----\n4\n10 20 6 7\n\n-----\n5\n3 5 1 2 4\n\n-----\n1\n1\n\n-----\n6\n1 2 3 4 5 6\n\n-----\n6\n2 3 4 5 6 1\n\n-----\n6\n1 1 1 1 1 1\n\n-----\n5\n1 1 1 1 1\n\n-----\n7\n1 2 3 4 5 6\n\n-----\n7\n1 2 3 4 5 6\n\n-----\n4\n1 3 6 2\n\n-----\n3\n2 3\n\n-----\n3\n2 3\n\n-----\n2\n1 1\n\n-----\n3\n2 3\n\n-----\n3\n2 2\n\n-----\n5\n1 1 1 1 1\n\n-----\n5\n1 1 1 1 1\n\n-----\n5\n2 2 2 2 2\n\n-----\n5\n1 1 1 1 1\n\n-----\n5\n1 1 1 1 1\n\n-----\n3\n3 3\n\n-----\n\n-----\n5\n1 1 1 1 1\n\n-----\n5\n2 2 2 2 2\n\n-----\n5\n1 1 1 1 1\n\n-----\n5\n1 1 1 1 1\n\n-----\n4\n1 1 1 1\n\n-----\n2\n1 1\n\n-----\n5\n1 1 1 1 1\n\n-----\n5\n1 1 1 1 1\n\n-----\n5\n1 1 1 1 1\n\n-----\n5\n1 1 1 1 1\n\n-----\n3\n1 1 1\n\n-----\n2\n1 1\n\n-----\n3\n1 2\n\n-----\n4\n1 1 1 1\n\n-----\n3\n1 2\n\n-----\n2\n1 1\n\n-----\n1\n1\n\n-----\n4\n10 20 6 7\n\n-----\n1\n1\n\n-----\n2\n2 1\n\n-----\n3\n2 3\n\n-----\n4\n2 2 2 2\n\n-----\n3\n1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n2\n1 1\n\n-----\n4\n1 1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n3\n1 2\n\n-----\n4\n1 1 1 1\n\n-----\n3\n1 2\n\n-----\n3\n1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n4\n1 2 1 2\n\n-----\n4\n1 1 1 1\n\n-----\n1\n1\n\n-----\n4\n1 1 1 1\n\n-----\n1\n1\n\n-----\n3\n1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n3\n1 2\n\n-----\n4\n1 1 1 1\n\n-----\n1\n1\n\n-----\n2\n2 1\n\n-----\n3\n1 2\n\n-----\n4\n1 1 1 1\n\n-----\n2\n1 1\n\n-----\n3\n1 1 1\n\n-----\n2\n1 1\n\n-----\n4\n1 1 1 1\n\n-----\n3\n1 2\n\n-----\n4\n1 1 1 1\n\n-----\n1\n1\n\n-----\n4\n10 20 6 7\n\n-----\n1\n1\n\n-----\n1\n2\n\n-----\n2\n1 1\n\n-----\n3\n2 2\n\n-----\n4\n1 1 1 1\n\n-----\n2\n1 1\n\n-----\n3\n1 1 1\n\n-----\n4\n1 1 1 1\n\n-----\n4\n1 1 1 1\n\n-----\n1\n1\n\n-----\n3\n1 2\n\n-----\n5\n1 1 1 1\n\n-----\n2\n1 1\n\n-----\n5\n1 1 1 1\n\n-----\n1\n1\n\n-----\n4\n1 1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n3\n1 2\n\n-----\n2\n1 1\n\n-----\n4\n1 1 1 1\n\n-----\n4\n1 2 1 2\n\n-----\n5\n1 1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n3\n1 2\n\n-----\n4\n1 2 1 2\n\n-----\n2\n1 1\n\n-----\n2\n1 1\n\n-----\n3\n2 1\n\n-----\n2\n1 1\n\n-----\n1\n1\n\n-----\n4\n10 20 6 7\n\n-----\n1\n1\n\n-----\n3\n2 1\n\n-----\n5\n1 1 1 1\n\n-----\n3\n1 2\n\n-----\n1\n1\n\n-----\n2\n1 1\n\n-----\n2\n1 1\n\n-----\n4\n1 1 1 1\n\n-----\n4\n1 2 1 2\n\n-----\n5\n1 1 1 1\n\n-----\n2\n1 1\n\n-----\n4\n1 1 1 1\n\n-----\n2\n1 1\n\n-----\n3\n1 2\n\n-----\n5\n1 1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n4\n1 1 1 1\n\n-----\n4\n1 1 1 1\n\n-----\n2\n1 1\n\n-----\n4\n1 1 1 1\n\n-----\n2\n1 1\n\n-----\n3\n1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n1\n1\n\n-----\n2\n1 1\n\n-----\n4\n1 1 1 1\n\n-----\n2\n1 1\n\n-----\n3\n1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n1\n1\n\n-----\n2\n1 1\n\n-----\n3\n1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n4\n1 1 1 1\n\n-----\n4\n1 2 1 2\n\n-----\n5\n1 1 1 1\n\n-----\n2\n1 1\n\n-----\n5\n1 1 1 1\n\n-----\n2\n1 1\n\n-----\n5\n1 1 1 1\n\n-----\n3\n1 2\n\n-----\n3\n1 2\n\n-----\n2\n1 1\n\n-----\n1\n1\n\n-----\n1\n2\n\n-----\n2\n1 1\n\n-----\n4\n1 1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n4\n1 1 1 1\n\n-----\n1\n1\n\n-----\n3\n1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n4\n1 1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n4\n1 1 1 1\n\n-----\n1\n1\n\n-----\n5\n1 1 1 1\n\n-----\n4\n1 2 1 2\n\n-----\n5\n1 1 1 1\n\n-----\n3\n1 1 1\n\n-----\n2\n1 1\n\n-----\n5\n1 1 1 1\n\n-----\n3\n1 2\n\n-----\n5\n1 1 1 1\n\n-----\n4\n1 2 1 2\n\n-----\n4\n1 1 1 1\n\n-----\n4\n1 2 1 2\n\n-----\n5\n1 1 1 1\n\n-----\n3\n1 1 1\n\n-----\n1\n1\n\n-----\n4\n1 1 1 1\n\n-----\n3\n1 1 1\n\n-----\n1\n1\n\n-----\n3\n1 1 1",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\n\"\"\"\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"4\\n\"\n    \"2 10 8 40\"\n) == \"2\"\n\"\"\"\n\nimport sys\nimport math\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 10 8 40\\n\") == 2\n\"\"\"\nimport math\nimport random",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\n\nIf we have less than 2 monsters, no one will die, so the minimum final health is 0.\nassert solution('1\\n2') == '0'\n\n-----Test 1-----\nINPUT:\n4\n2 10 8 40\n\nOUTPUT:\n2\n\n-----Test 2-----\nINPUT:\n5\n3 2 1 3\n\nOUTPUT:\n1\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10 8 40\") == \"2\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\n\"\"\"\nimport sys\nfrom math import log2\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10 8 40\") == 2\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 10 8 40\") == '2'\n\n\"\"\"\n\n\nfrom typing import List\nfrom random import randint",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\nprint('Test pass.')\n\n\"\"\"\n\nimport sys\n\nfrom typing import Iterator, List\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('?(__+___+__-___):-___>__') == '0250341'\nassert solution('?(_-_/___*__):-___>__._____<__.___') == '0010'\nassert solution('?(__-_+_/_____):-__>__,_____<__.___') == 'false'\n",
        "num_ids_2": 52,
        "num_ids_4": 81
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('?(_-_/___*__):-___>__.\\n') == '0010'\nassert solution('?(__-_+_/_____):-__>__,_____<__.\\n') == 'false'\nassert solution('?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n') == '0250341'\n",
        "num_ids_2": 54,
        "num_ids_4": 105
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('?(_-_/___*__):-___>__.\\n') == '0010'\nassert solution('?(__-_+_/_____):-__>__,_____<__.\\n') == 'false'\nassert solution('?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n') == '0250341'\n\"\"\"\n\nimport string\nimport re\nimport sys\n",
        "num_ids_2": 54,
        "num_ids_4": 105
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"?(__+___+__-___):-___>__\") == \"0101\"\nassert solution(\"?(____+___+__-___):-__<__\") == \"false\"\nassert solution(\"?(____+____+__-___):-__<__,__<__\") == \"0250341\"\nassert solution(\"?(____+____+__-___):-__<__,___<__\") == \"false\"\nassert solution(\"?(____+____+__-___):-__<__,____<__\") == \"false\"\n",
        "num_ids_2": 47,
        "num_ids_4": 103
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('?(_-__-__-_-)') == '101010'\nassert solution('?(_-/___/_____-)') == '101010'\nassert solution('?(_____*_____-_/____)') == '101010'\nassert solution('?(____*_________/____)') == '101010'\nassert solution('?(___*_________/____)') == '101010'\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"?(_-_/___*__):-___>__.\\n\") == \"0010\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__.\\n\") == \"false\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n\") == \"0250341\"\nassert solution(\"?(__+___+__-___):-___>__.\\n\") == \"0101\"",
        "num_ids_2": 54,
        "num_ids_4": 132
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('?(_-_--_-_-_-*_-_-_-_-_-_-_-_-_-_-_-_-_/-_-_-_-_-_-_-_/-_-_-_-_-_-_-_-_-_-_-_/-_-_-_-_-_-_-_-_/-_-_-_-_-_-_-_/-_-_-_-_-_-_-_/-_-_-_-_-_-_-_-_/-_+_+_-_-_/-_+_+_+_+_+_+_+_+_+_-_+_+_+_+_+_+_+_+_-_-_-_+_+_+_+_+_+_+_+_+_-_-_-_+_+_-_+_+_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_/-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_/-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_/-_+_+_+_+_+_+_+_+_+_+_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-",
        "num_ids_2": 1570,
        "num_ids_4": 1570
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"?(_-)\") == \"01\"\nassert solution(\"?(_+_)\") == \"10\"\nassert solution(\"?(_-_-)\") == \"false\"\nassert solution(\"?(_-_-_-)\") == \"false\"\nassert solution(\"?(_-_-_-_-)\") == \"false\"\n",
        "num_ids_2": 27,
        "num_ids_4": 56
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"?(__+___+__-___):-___>__.\") == \"0250341\"\nassert solution(\"?(__+___+__-___):-___>__.\") == \"0101\"\n\"\"\"\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"?(__-_+_/_____):-__>__,_____<__.?\") == \"0250341\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\") == \"0250341\"\nassert solution(\"?(__+___+__-___):-___>__.?\") == \"0101\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__.\") == \"0010\"\n\"\"\"\n\nimport string\n",
        "num_ids_2": 79,
        "num_ids_4": 132
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\nassert solution(\"4 4 1000000000000000000\") == \"0\"\nassert solution(\"4 4 2\") == \"5\"\n\nprint('Success')",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\nassert solution(\"3 4 100000000000000\") == 0\n",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\nassert solution(\"1 3 3 3\") == \"5\"\nassert solution(\"1 3 3 2\") == \"5\"\n",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"5\"\nassert solution(\"3 3 11\\n2 1 5\\n7 10 0\\n12 6 4\") == \"3\"",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\n\nassert solution(\"3 4 1000000000000000000\") == \"0\"",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 11\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\n'''\n\nfrom itertools import product",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 11\\n2 1 5\\n7 10 0\\n12 6 4\") == \"3\"\nassert solution(\"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"5\"\nassert solution(\"3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"0\"\n\n\n    \n\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 57,
        "num_ids_4": 88
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 31
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 11\\n2 1 5\\n7 10 0\\n12 6 4\") == 3\nassert solution(\"3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == 5\nassert solution(\"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == 0",
        "num_ids_2": 54,
        "num_ids_4": 82
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"thisisexampletwo\") == \"thisisexampletwo\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"rocesfedoc\") == \"codeforces\"\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('codeforces') =='secrofedoc'\nassert solution('orcesfedoc') == 'rocesfedoc'\nassert solution('rocesfedoc') == 'rocesfedoc'\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\"\n\nn = int(input())\nt = input()\nm = len(t)\nk = m\n\nfor i in range(1, n):\n    if m % i == 0:\n        k = i\n\nprint(t[:k][::-1] + t[k:])\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"orcesfedoc\") == \"rocesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"z\") == \"z\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('codeforces') =='secrofedoc'\nassert solution('rocesfedoc') == 'rocesfedoc'\nassert solution('z') == 'z'\nassert solution('x') == 'x'\n\"\"\"\n\n\"\"\"\n1 <= len(stdin) <= 100\nstdin is a string consisting of lowercase Latin letters.\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 32,
        "num_ids_4": 52
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"thisisexampletwo\") == \"plmaetwoxesisiht\"\n\"\"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"rocesfedoc\") == \"codeforces\"\nassert solution(\"plmaetwoxesisiht\") == \"thisisexampletwo\"\n\n\"\"\"\n\nfrom math import gcd\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 14') == '19'\n\nsolution(input())\n\"\"\"\n\na, b = map(int, input().split())\nprint(a + b)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\n\"\"\"\n\na, b = map(int, input().split())\nprint(a + b)\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 14\") == \"19\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('3 4') == '7'\nassert solution('2 5') == '7'\nassert solution('0 0') == '0'\nassert solution('0 0 1') == '1'\n",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 14') == '19'\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\nprint('Passed')\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 14\") == \"19\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 14') == '19'\n\"\"\"\nimport math\na, b = map(int, input().split(' '))\nprint(a + b)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 14') == '19'\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3+4') == '>>+'\n\"\"\"\n\n\n\"\"\"\nI got the solution from https://codeforces.com/contest/1412/submission/114573726. It's a super concise solution. \nBut I have to admit I did not really understand it at first. The logic is rather simple, and I can explain it through some simple examples. \nIn these examples, the expression is \"3+4\", and we treat it as a binary tree. \nEach node contains a value and a right and left child. \nIn each step, we move to the right and then to the left. \n\n1) The expression is a single number, the root, and there are no children.\n\n2) There are two children, the left child is the root, and the right child is not. We move to the left child, and then to the right child, at the end, we will be in the node where the value is equal to the number. \n\n3) There are three children, and the left child is the root, the right child is the left child, and the right child is the right child. We move to the left child, then to the right child, and then to the right child, at the end, we will be in the node where the value is equal to the number. \n\n4) There are four children, the left child is the root, the right child is the left child, the right child is the right child, and the right child is the right child. We move to the left child, then to the right child, then to the right child, then to the right child, at the end, we will be in the node where the value is equal to the number.\n\nThe idea is that, in each step, we move to the right child, and then to the left child.\n\nThe reason for the right and left child is that in the order of traversal, we go to the left child, then to the right child. \n\nIn step 3, we move to the right child, and the result is that we will be in the node where the value is equal to the number (4). \n\nIn step 4, we move to the left child, and then to the right child, and then to the right child, and finally, we will be in the node where the value is equal to the number (3). \n\nIn step 5, we move to the left child, then to the right child, then to the right child, then to the right child, and finally, we will be in the node where the value is equal to the number (2). \n\nIn step 6, we move to the left child, and finally, we will be in the node where the value is equal to the number (1). \n\nSo the result is that the final expression is: \n+++++++\n[[>>+>>-]<[-<<+>>]]+<<<\n++++++++++++++++++++++++++++++++++++++++++++++++.\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('+2-3') == '<[<+>-]<'\nassert solution('+2-3') == '<[<+>-]<'\nassert solution('+2-3') == '<[<+>-]<'\nassert solution('+2-3') == '<[<+>-]<'\nassert solution('+2-3') == '<[<+>-]<'\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2+3\") == \"+>\\n++>\\n<[<+>-]<\"\n\"\"\"\n\n\nclass Solution:\n    def solution(self, s):\n        stack = []\n        for c in s:\n            if c == \" \":\n                continue\n            if c == \">\":\n                if len(stack) < 2:\n                    return \"> not enough arguments\"\n                print(stack.pop(-1), end=\"\")\n                print(stack.pop(-1), end=\"\")\n            elif c == \"<\":\n                if len(stack) < 2:\n                    return \"< not enough arguments\"\n                print(stack.pop(0), end=\"\")\n                print(stack.pop(0), end=\"\")\n            elif c == \"+\":\n                if len(stack) < 2:\n                    return \"+ not enough arguments\"\n                print(stack.pop(-1) + stack.pop(-1), end=\"\")\n            elif c == \"-\":\n                if len(stack) < 2:\n                    return \"- not enough arguments\"\n                print(stack.pop(-1) - stack.pop(-1), end=\"\")\n            elif c == \"[\":\n                stack.append(0)\n            elif c == \"]\":\n                x = stack.pop(-1)\n                print(x * \" \", end=\"\")\n                if x < 0:\n                    print(\"> not enough arguments\")\n            else:\n                stack.append(int(c))\n        return \"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2+3\") == \"+>\\n\"\nassert solution(\"9-7\") == \"+>\\n\"\nassert solution(\"2+3-5\") == \"+>\\n<[->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\n",
        "num_ids_2": 28,
        "num_ids_4": 55
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2+3') == '++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n'\nassert solution('9-7') == '+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n'\n\"\"\"\n\n\"\"\"\nAccepted solution 1: O(n) time, O(1) space, where n is the length of the expression\n\"\"\"\n",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12-34\") == \"+>++++++++++++++[>+++++++++>-]<\"\nassert solution(\"-23\") == \"+>++++++++++++++[>+++++++++>-]<\"\n\"\"\"\n\n\nclass Solution:\n    def solve(self, input_str):\n        # TODO: Implement me\n        pass",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\"\n\n\"\"\"\n",
        "num_ids_2": 65,
        "num_ids_4": 65
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2+3\") == \"+>\\n++++++++++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"9-7\") == \"+>+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\n\"\"\"\n\nimport collections\n",
        "num_ids_2": 72,
        "num_ids_4": 72
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\n\"\"\"\n",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1121211122112122111311131\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"5\"\n\"\"\"\n\nfrom sys import stdin\nimport math\nimport string\n\nQ = int(stdin.readline())\n\nfor _ in range(Q):\n    K = int(stdin.readline())\n    N = math.ceil(math.log10(K))\n    \n    res = []\n    for i in range(N):\n        res.append(string.digits[K % 10])\n        K //= 10\n    \n    print(''.join(res[::-1]))\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1\\n2\\n3\\n') == '2\\n1\\n1\\n2\\n'\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"112123123412345\") == \"1\"\nassert solution(\"112123412341234123412341234123412341234\") == \"1\"\nassert solution
        "num_ids_2": 43,
        "num_ids_4": 1494
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"112123123412345$\") == \"112123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412",
        "num_ids_2": 1494,
        "num_ids_4": 1494
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"112233445566778899\") == \"9\"\nassert solution(\"12345\") == \"0\"\nassert solution(\"112345\") == \"5\"\nassert solution(\"0123\") == \"2\"\nassert solution(\"101\") == \"1\"",
        "num_ids_2": 28,
        "num_ids_4": 51
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1122\\n3456\\n7890\\n1122') == '1\\n0\\n0\\n1'\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"1\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"11212312341234512345612345671234567812345678912345678910\"\n\"\"\"\n\n\n\"\"\"\n2.4.1 Exceptions\n\"\"\"\n\n\"\"\"\nAn exception is an error that occurs while the execution of a program.\nIn programming, exceptions are handled by the programmer, rather than the computer.\n\nWhen a program runs successfully (i.e. until the last line of code), it ends normally.\nWhen a program ends unsuccessfully, its last line of code (the statement or exception that caused the program to end) is treated as an exception.\n\nWe call the error that occurs when the program ends unsuccessfully an exception.\n\nAn exception is an instance of a subclass of the class Exception.\n\nWhen an exception occurs, the program ends abnormally. When an exception occurs, it stops and does not run the statements following the one that caused the exception.\n\"\"\"\n\n\n\"\"\"\ntry:\n    code\nexcept:\n    code\n\"\"\"\n\"\"\"\nThe line of code that causes the exception is placed in parentheses after the except keyword.\nIf the exception occurs, the code inside the parentheses is executed.\n\nThe code that caused the exception is called the exception handler.\n\"\"\"\n\n\n\"\"\"\ntry:\n    code\nexcept:\n    code\nexcept:\n    code\n\"\"\"\n\"\"\"\nThe handler for the exception type specified in the first parentheses after the except keyword is used.\nIt executes if the exception occurs, and code following the except clause is skipped.\n\nIf there is no matching exception handler, the exception is propagated up to the line immediately after the try statement.\n\nIf there is no exception, the line after the try clause is executed.\n\"\"\"\n\n\"\"\"\ntry:\n    code\nexcept:\n    code\nexcept:\n    code\nelse:\n    code\n\"\"\"\n\"\"\"\nThe else clause specifies code to be executed if no exception occurs.\n\nCode after the else clause is skipped if an exception occurs.\n\nIf there is no matching exception handler, the exception is propagated up to the line immediately after the try statement.\n\"\"\"\n\n\"\"\"\ntry:\n    code\nexcept:\n    code\nfinally:\n    code\n\"\"\"\n\"\"\"\nThe finally clause specifies code to be executed no matter if the try clause raises an exception or not.\n\nThe finally clause is always executed, regardless of whether an exception occurred.\n\"\"\"\n\n\"\"\"\nIn Python, you can define as many exception handlers as you need, one for each exception.\n\nIf you want to define only one exception handler for multiple exceptions, you can use the following trick:\n\"\"\"\n\"\"\"\ntry:\n    code\nexcept exception1:\n    code1\nexcept exception2:\n    code2\nexcept:\n    code3\nelse:\n    code4\n\"\"\"\n\"\"\"\nIf the exception occurs, the first matching exception handler will be executed.\nIf the exception does not match any exception handler, the exception is propagated up to the line immediately after the try statement.\n\"\"\"\n\n\"\"\"\nIn Python, you can define as many exception handlers as you need.\n\nThe statement try: catches the exception.\nThe statement except: catches the exception and discards it.\nThe statement else: is executed if no exception occurs.\nThe statement finally: is executed in any case.\n\"\"\"\n\n\"\"\"\nIf the exception occurs, the first matching exception handler will be executed.\nIf the exception does not match any exception handler, the exception is propagated up to the line immediately after the try statement.\nIf no exception handler is found, the exception is propagated up to the line immediately after the try statement.\n\"\"\"\n\n\n\"\"\"\n2.4.2 User-defined Exceptions\n\"\"\"\n\"\"\"\nIn Python, you can define your own exception by extending the built-in Exception class.\n\nYou can define an exception by creating a class that inherits from the Exception class or one of its subclasses.\n\"\"\"\n\"\"\"\n1.\n\"\"\"\nclass NotPerfectSquare(Exception):\n    def __init__(self,x):\n        self.x = x\n\nfor x in range(1,50):\n    if x*x > 50:\n        break\n    if x*x!= x:\n        raise NotPerfectSquare(x)\n\n\"\"\"\n2.\n\"\"\"\nclass NotPerfectSquare(Exception):\n    def __init__(self,x):\n        self.x = x\n\nfor x in range(1,50):\n    try:\n        if x*x > 50:\n            break\n        if x*x!= x:\n            raise NotPerfectSquare(x)\n    except NotPerfectSquare:\n        print(\"Not a perfect square\")\n\n\"\"\"\n3.\n\"\"\"\nclass NotPerfectSquare(Exception):\n    def __init__(self,x):\n        self.x = x\n\nfor x in range(1,50):\n    try:\n        if x*x > 50:\n            break\n        if x*x!= x:\n            raise NotPerfectSquare(x)\n    except NotPerfectSquare:\n        pass\n\n\"\"\"\n4.\n\"\"\"\nclass NotPerfectSquare(Exception):\n    def __init__(self,x):\n        self.x = x\n\nfor x in range(1,50):\n    try:\n        if x*x > 50:\n            break\n        if x*x!= x:\n            raise NotPerfectSquare(x)\n    except NotPerfectSquare:\n        print(\"Not a perfect square\")\n\n\"\"\"\n5.\n\"\"\"\nclass NotPerfectSquare(Exception):\n    def __init__(self,x):\n        self.x = x\n\nfor x in range(1,50):\n    try:\n        if x*x > 50:\n            break\n        if x*x!= x:\n            raise NotPerfectSquare(x)\n    except NotPerfectSquare as p:\n        print(\"Not a perfect square\")\n\n\"\"\"\nThe expression x*x also raises an exception if it is not a perfect square.\n\"\"\"\n\n\"\"\"\n2.4.3 Handling Exceptions\n\"\"\"\n\n\"\"\"\ntry:\n    code\nexcept:\n    code\nfinally:\n    code\n\"\"\"\n\"\"\"\nCode after the try clause is skipped if an exception occurs.\n\nCode following the except clause is skipped if no exception occurs.\n\nCode after the finally clause is always executed.\n\nCode after the finally clause is always executed.\n\"\"\"\n\n\"\"\"\n2.4.4 The raise Statement\n\"\"\"\n\"\"\"\nThe statement raise exception causes the exception exception to be raised when it occurs.\n\nIf the exception occurs, the program ends abnormally and the exception is propagated up to the statement immediately following the raise statement.\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1\\n3\\n20\\n38\\n56\\n\") == \"1\\n2\\n5\\n2\\n0\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('575') == 4\n\"\"\"\n\nimport math",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('575') == 4\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('575') == '4'\nassert solution('20') == '7'\nassert solution('1') == '0'\nassert solution('0') == '0'\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('575') == 4\n\"\"\"\nfrom itertools import product\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"575\") == 4\nassert solution(\"100\") == 0\nassert solution(\"1002\") == 0\nassert solution(\"1004\") == 0\nassert solution(\"1000\") == 0\n",
        "num_ids_2": 16,
        "num_ids_4": 34
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5) == 1\nassert solution(1) == 0\nassert solution(3) == 0\nassert solution(5) == 1\nassert solution(10) == 4\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"575\") == \"4\"\n\n\"\"\"\n\nn = int(stdin.readline())\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('575') == '4'\n\"\"\"\n\nimport math",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == '1'\nassert solution('10') == '3'\nassert solution('1000') == '48'\nassert solution('567') == '4'\nassert solution('1000') == '51'\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"010\") == 1\nassert solution(\"100\") == 1\nassert solution(\"111\") == 0\nassert solution(\"101\") == 2\nassert solution(\"011\") == 1\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('00100') == 1\nassert solution('11110') == 2\nassert solution('11101') == 2\nassert solution('11110') == 2\nassert solution('10111') == 2\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"111001101\") == \"2\"\nassert solution(\"111011101\") == \"4\"\nassert solution(\"1110011010\") == \"2\"\nassert solution(\"1110111010\") == \"4\"\nassert solution(\"1110011010\") == \"2\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('111') == 1\nassert solution('000') == 1\nassert solution('011') == 2\nassert solution('100') == 1\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"111\") == 0\nassert solution(\"000\") == 1\nassert solution(\"1110\") == 2\nassert solution(\"1111\") == 2\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 33
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1111\") == 0\nassert solution(\"0011\") == 1\nassert solution(\"111111111\") == 0\nassert solution(\"11111\") == 1\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 36
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('011') == 1\nassert solution('010') == 2\nassert solution('010') == 1\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"010\") == 1\nassert solution(\"010\") == 1\nassert solution(\"110\") == 2\nassert solution(\"010\") == 1\n\n-------------\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1110\") == 2\nassert solution(\"10011\") == 1\n\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\n\nS = sys.argv[1]\n\nprint(S.count(\"1\") * S.count(\"0\") - S.count(\"110\") - S.count(\"1110\") - S.count(\"11110\"))\n",
        "num_ids_2": 18,
        "num_ids_4": 29
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11010') == 1\nassert solution('10111') == 2\nassert solution('11001') == 0\nassert solution('11110') == 1\nassert solution('11111') == 0\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 6 8') == 'APPROVED'\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 7 9 10 31\\n') == 'APPROVED'\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10 21 31 50\") == \"APPROVED\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\n\"\"\"\n\nimport re",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\nassert solution(\"4\\n6 7 9 10 31\") == \"DENIED\"\n\"\"\"\n\n\"\"\"\n>>> solution(\"5\\n6 7 9 10 31\")\n'APPROVED'\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n5\n6 7 9 10 31\n\"\"\"\n) == \"APPROVED\"\n\nassert solution(\n\"\"\"\n5\n6 7 9 10 32\n\"\"\"\n) == \"DENIED\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RRRUDLDR') == 'No'\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"LLRLLRR\") == \"No\"\nassert solution(\"LLRLLRDRR\") == \"Yes\"\nassert solution(\"RDRLLRUULRUUDLRLUULLULLLLRRDDLLRRRUUDRLDDLLUDL\") == \"No\"\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 77
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('LDRRRUULR') == 'No'\n\n-----\nRUDLUDR\n\nRLUUDDR\n\n-----\nLDRRRUULR\n\nRLUUDDR",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    'RUDLUDR'\n) == 'Yes'\n\"\"\"\n\n\"\"\"\n\nAlgorithm:\n\nTo solve this problem, we first need to check if the string satisfies the condition described in the problem.\n\nWe define a helper function is_possible(s):\n\nTo check if a string is possible:\n\n1. Go through each character c in s:\n\n2. If the character is in odd position (1, 3, 5,...), then c should be R, U, or D.\n\n3. If the character is in even position (2, 4, 6,...), then c should be L, U, or D.\n\nIn other words, for any odd index i, the character is R, U, or D; for any even index i, the character is L, U, or D.\n\n4. If c is not in the above two sets, then return False.\n\n5. If c is not in the above two sets, then return False.\n\n6. If c is in the above two sets, then return True.\n\n7. We can simplify this problem to the problem described in Problem: \"Find if a given string is easy or hard\".\n\nSolution:\n\n1. For each string, we will check whether it is hard or not.\n\n2. For each character of the string, we will check whether it is R, U, or D.\n\n3. If the character is in odd position, we will check if it is L, U, or D.\n\n4. If the character is in even position, we will check if it is R, U, or D.\n\n5. If the character is not in the above two sets, then the string is hard.\n\n6. If the character is not in the above two sets, then the string is hard.\n\n7. If the character is in the above two sets, then the string is easy.\n\n8. If all characters are in the above two sets, then the string is easy.\n\n9. If any character is not in the above two sets, then the string is hard.\n\n10. If the string is empty, then the string is easy.\n\n11. The string is hard if and only if it is not easy.\n\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\n-----\nYou can also use the following code to test your solution locally.\n----\nfrom io import StringIO\nfrom unittest.mock import patch\n\nsample_input1 = \"\"\"RUDLUDR\n\"\"\"\n\nsample_input2 = \"\"\"LRDRLLDRRR\n\"\"\"\n\nsample_output1 = \"\"\"Yes\n\"\"\"\n\nsample_output2 = \"\"\"No\n\"\"\"\n\n@patch('sys.stdin', StringIO(sample_input1))\n@patch('sys.stdout', StringIO())\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RULD\") == \"Yes\"\nassert solution(\"LURD\") == \"No\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 37
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RUDLUDR\") == 'Yes'\nassert solution(\"RDRLUDUDRLDRU\") == 'Yes'\nassert solution(\"RDRRUULRDDL\") == 'No'\nassert solution(\"RDRLRRUULRDDL\") == 'Yes'\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 66
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RUULDR\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3\\n2\\n4\\n3\\n\") == \"7\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\n\"\"\"\n\n\n\nfrom collections import deque",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n\") == \"0\"\n\"\"\"\n\nimport collections\nimport sys\n\n\nclass Solution:\n    # Time complexity: O(N), where N is the number of cities\n    # Space complexity: O(1)\n    def solution(self, stdin):\n        N, A, B, C, D, E = map(int, stdin.readline().strip().split())\n\n        cities = collections.defaultdict(list)\n\n        for i in range(1, N + 1):\n            cities[i].append(1)\n\n        for city in cities:\n            cities[city].append(2 * cities[city][0])\n            cities[city].append(3 * cities[city][0])\n            cities[city].append(4 * cities[city][0])\n            cities[city].append(5 * cities[city][0])\n\n        cities[1].append(0)\n        for city in cities:\n            cities[city].append(0)\n\n        for i in range(2, N + 1):\n            for j in range(6):\n                cities[i][j + 1] += min(cities[i - 1][j + 1], cities[i - 1][j + 2])\n\n        return min(\n            cities[N][6],\n            cities[N][5] + cities[N][1],\n            cities[N][4] + cities[N][2],\n            cities[N][3] + cities[N][3]\n        )\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 1 5 4\") == \"7\"\nassert solution(\"4 3 1 5 4\") == \"6\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2\\n4\\n3\\n5') == '7'\nprint('test passed')\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 2 4 3 5\") == \"7\"\n\"\"\"\n\nn, a, b, c, d, e = map(int, input().split())\n\ntrain_time = min(n // a, a)\nbus_time = min(n // b, b)\ntaxi_time = min(n // c, c)\nairplane_time = min(n // d, d)\nship_time = min(n // e, e)\n\ntime = train_time + bus_time + taxi_time + airplane_time + ship_time\n\nprint(time)\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\"\nimport sys\n\nN, A, B, C, D, E = [int(i) for i in sys.stdin.readline().strip().split('\\n')]\n\nprint(min((A + B + C) * N, D + E * N))\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == '1'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == 2\n\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(output())",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n') == '2'\n\"\"\"\n\nimport sys\nimport timeit\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\") == \"0\\n0\\n\"\n\"\"\"\n\nimport sys\nfrom collections import deque\nimport itertools",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 2\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n\") == \"0\"\n\n-----Test Case-----\nSubtask #1 (20 points in total): 10 points\n\nSubtask #2 (20 points in total): 20 points\n\nSubtask #3 (20 points in total): 20 points\n\nSubtask #4 (20 points in total): 20 points\n\nSubtask #5 (20 points in total): 20 points\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == 3\nassert solution('10') == 10\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == 2\n\"\"\"\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('20') == '23'\n\"\"\"\n\nimport math",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(123) == \"prime\"\nassert solution(\"23\") == \"not prime\"\nassert solution(2) == \"prime\"\nassert solution(7) == \"not prime\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"20\") == \"23\"\nassert solution(\"15\") == \"17\"\n\n\"\"\"\n\nimport math\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20\") == \"23\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20') == '23'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '7'\nassert solution('5') == '11'\n\n\"\"\"\n\nfrom math import ceil\nfrom sys import stdin",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20\") == \"23\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6') == '7'\nassert solution('7') == '7'\nassert solution('10') == '11'\nassert solution('4') == '5'\nassert solution('13') == '13'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20\") == \"23\"\n\"\"\"\n\n\"\"\"\n    The greatest prime factor of the number 600851475143 \n    is 6857.\n    The prime factors of 6857 are:\n    \n    6857 = 2^3 * 3^2 * 5 * 7 * 11 * 13 * 17 * 19\n    \n    Prime factors of 2, 3, 5, 7, 11, and 13 are 2, 3, 5, 7, \n    and 11.\n    \n    Prime factors of 2, 3, 5, 7, and 11 are 2, 3, 5, 7, and 11.\n    \n    Prime factors of 2, 3, and 7 are 2, 3, and 7.\n    \n    Prime factors of 2 and 7 are 2 and 7.\n    \n    Prime factors of 2 are 2.\n    \n    Prime factors of 3 are 3.\n    \n    Prime factors of 5 are 5.\n    \n    Prime factors of 7 are 7.\n    \n    Prime factors of 11 are 11.\n    \n    Prime factors of 13 are 13.\n    \n    Prime factors of 17 are 17.\n    \n    Prime factors of 19 are 19.\n    \n    Prime factors of 6857 are 6857.\n\"\"\"\n\n\"\"\"\n    Given a prime number p, write a program to print the\n    largest prime factor of p.\n    \n    For example, if p = 6857, then the output should be\n    5.\n    \n    A prime number greater than 1 is called a prime factor\n    of a number.\n    \n    The prime factors of 6857 are:\n    \n    6857 = 2^3 * 3^2 * 5 * 7 * 11 * 13 * 17 * 19\n    \n    The prime factors of 2, 3, 5, 7, 11, and 13 are 2, 3, 5, 7, \n    and 11.\n    \n    The prime factors of 2, 3, 5, 7, and 11 are 2, 3, 5, 7, and 11.\n    \n    The prime factors of 2, 3, and 7 are 2, 3, and 7.\n    \n    The prime factors of 2 and 7 are 2 and 7.\n    \n    The prime factors of 2 are 2.\n    \n    The prime factors of 3 are 3.\n    \n    The prime factors of 5 are 5.\n    \n    The prime factors of 7 are 7.\n    \n    The prime factors of 11 are 11.\n    \n    The prime factors of 13 are 13.\n    \n    The prime factors of 17 are 17.\n    \n    The prime factors of 19 are 19.\n\"\"\"\n\n\"\"\"\n    Given a string containing an alphabetic \n    character, write a program to count the \n    number of times that the character occurs in \n    the string.\n    \n    For example, if the input is:\n    \n    String1 = \"abcde\"\n    \n    Then, the output should be:\n    \n    For each character, the count of the character \n    in String1 is as follows:\n    \n    a : 1\n    b : 1\n    c : 1\n    d : 1\n    e : 1\n    \n    Please do not count the spaces.\n    \n    For example, if the input is:\n    \n    String1 = \"a b cde\"\n    \n    Then, the output should be:\n    \n    For each character, the count of the character\n    in String1 is as follows:\n    \n    a : 1\n    b : 1\n    c : 1\n    d : 1\n    e : 2\n    \n    Please do not count the spaces.\n    \n    For example, if the input is:\n    \n    String1 = \"abcdef\"\n    \n    Then, the output should be:\n    \n    For each character, the count of the character\n    in String1 is as follows:\n    \n    a : 1\n    b : 1\n    c : 1\n    d : 1\n    e : 1\n    f : 1\n    \n    Please do not count the spaces.\n\"\"\"\n\n\"\"\"\n    Given a list of numbers and a number k, write a program to \n    find all pairs of numbers from the list that sum to k.\n    \n    Input\n    First line contains the number of elements in the list. \n    The second line contains the elements of the list.\n    \n    Third line contains the value of k.\n    \n    Output\n    Print the pairs in sorted order, each pair in a new line.\n    \n    If no such pairs exist, print -1.\n    \n    For example, if the input is:\n    \n    6\n    2 4 5 9 14 10\n    15\n    \n    Then, the output should be:\n    \n    10 14\n    2 4\n    \n    Please do not print the elements in any order.\n    \n    Note: There are multiple pairs that sum to k, \n    please print each pair in separate line.\n\"\"\"\n\n\"\"\"\n    Given a list of numbers, find the average of all \n    the elements in the list. The average of a set of numbers \n    is the sum of all the numbers in the list divided by the \n    number of elements in the list.\n    \n    Input\n    First line contains the number of elements in the list. \n    The second line contains the elements of the list.\n    \n    Output\n    Print the average of the elements in the list.\n    \n    For example, if the input is:\n    \n    4\n    2 4 6 8\n    \n    Then, the output should be:\n    \n    5.0\n    \n    Please do not print the elements in any order.\n\"\"\"\n\n\"\"\"\n    Given a number n, write a program to calculate the sum of \n    all the even numbers from 1 to n.\n    \n    For example, if the input is:\n    \n    4\n    \n    Then, the output should be:\n    \n    10\n    \n    Please do not count the numbers ending in. or!.\n\"\"\"\n\n\"\"\"\n    Given a number n, write a program to calculate the sum of \n    all the odd numbers from 1 to n.\n    \n    For example, if the input is:\n    \n    4\n    \n    Then, the output should be:\n    \n    5\n    \n    Please do not count the numbers ending in. or!.\n\"\"\"\n\n\"\"\"\n    Write a program to count the number of strings \n    where the string length is 2 or more and the first \n    and last character are same from a given list of \n    strings. \n    \n    Sample List : ['abc', 'xyz', 'aba', '1221']\n    \n    Expected Result : 2\n    \n    Notes: Assume that all the strings are lower case.\n\"\"\"\n\n\"\"\"\n    Given a number n, write a program to calculate the sum of \n    all the multiples of 3 or 5 below n.\n    \n    For example, if the input is:\n    \n    10\n    \n    Then, the output should be:\n    \n    23\n    \n    Please do not count the numbers ending in. or!.\n\"\"\"\n\n\"\"\"\n    Given an array of integers, write a program to find the \n    sum of all the positive integers in that array that have \n    a sum of their digits equal to a given number n. \n    \n    For example, if the input is:\n    \n    [13, 21, 12, 5, 25]\n    \n    n = 9\n    \n    Then, the output should be:\n    \n    13\n    \n    Notes: Assume that all the numbers in the array are \n    greater than 0 and less than 10^100.\n\"\"\"\n\n\"\"\"\n    Given a number n, write a program to generate a dictionary \n    that contains (i, i*i) such that is an integral number \n    between 1 and n (both included). and then the program \n    should print the dictionary.\n    \n    For example, if the input is:\n    \n    6\n    \n    Then, the output should be:\n    \n    {1: 1, 2: 4, 3: 9, 4: 16, 5: 25",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(5) == 5\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('15') == '17'\nassert solution('20') == '23'\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 3 2') == '1'\nassert solution('4\\n3 1 3 2') == '1'\nassert solution('8\\n1 4 5 6 7 2 3 4 5') == '3'\nassert solution('4\\n3 2 2') == '0'\nassert solution('4\\n1 2 3 4') == '0'\n",
        "num_ids_2": 31,
        "num_ids_4": 67
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 1 3 2\") == \"1\"\nassert solution(\"4 3 2 5 6 7\") == \"0\"\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1 3 2') == '1'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 1 3 2\") == \"1\"\nassert solution(\"10 10 10 10 10 10 10 10 10 10 10 10\") == \"0\"\n\"\"\"",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 3 2\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\\n\") == \"23\"\n\"\"\"\n\nn,a,b,c = [int(x) for x in input().split()]\nl = [int(x) for x in input().split()]\n\nl.sort()\n\nmp = n*c + b + a\n\nfor i in range(n):\n    l[i] = l[i] - 1\n    mp += 1\n    if mp >= a and mp <= b:\n        mp -= l[i]\n\nprint(mp)",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80') == '23'\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80') == '23'\n\"\"\"\nfrom collections import Counter\nfrom itertools import combinations",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''5 100 90 80\n98\n40\n30\n21\n80''') == \"23\"\n\n'''\nWhen I have to produce a maximum of three bamboos, I have to use the\nmagic extension, then I have to use the composition magic, then I have to\nuse the shortening magic and at the end I have to use the extension\nmagic to obtain the three bamboos.\n\nThat's the reason why we had to sort the input in order to find the minimum\ntotal cost, since the extension magic consumes the last elements of the\ninput (even if we have enough MP) and we want to avoid that.\n\n'''\n\n'''\nThe magic extension consumes the last elements of the input, so we have to\nuse the srt input in descending order.\n\n'''",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\n\"\"\"\n\n\nimport collections\nimport itertools\nimport math\nimport re\n\nregex = r'\\d+'",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80') == '23'\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80') == '23'\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\nprint(solution(\"ABCXYZ\"))\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('AB') == 'BC'\nassert solution('ABC') == 'BCD'\nassert solution('ABCD') == 'BCDE'\n",
        "num_ids_2": 18,
        "num_ids_4": 39
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\") == \"C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C\"\nassert solution(\"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\") == \"B D E F G H I J K L M N O P Q R S T U V W X Y Z A B C\"\n\n\"\"\"",
        "num_ids_2": 122,
        "num_ids_4": 122
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys\nimport string",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABCXYZ', 2) == 'CDEZAB'\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\nassert solution(\"SQZY\") == \"XWVUY\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"NOPQRSTUVWXYZABCDEFGHIJKLM\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"NOPQRSTUVWXYZABCDEFGHIJKLM\"\nassert solution(\"JKLMNOPQRSTUVWXYZABCDEFGHIJK\") == \"NOPQRSTUVWXYZABCDEFGHIJKLM\"\n",
        "num_ids_2": 32,
        "num_ids_4": 108
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABCXYZ\", 2) == \"CDEZAB\"\nprint(solution(\"ABCXYZ\", 2))\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\n\n\"\"\"\n\nimport string",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131\") == \"199999\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"1 6\") == \"6\"\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 53
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"\nassert solution(\"1 3\") == \"3\"\n\"\"\"\n\nfrom utils import *\nimport math\n",
        "num_ids_2": 33,
        "num_ids_4": 44
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"\n\"\"\"\n\nn = int(input())\nb = list(map(int, input().split()))\na = [1]\n\np = 2\nwhile len(a) < n:\n    for i in range(len(a)):\n        if b[i] % p == 0:\n            b.append(b[i])\n            a.append(p)\n    p += 1\n\nans = []\n\nfor i in range(len(a)):\n    ans.append(b[i] // a[i])\n\nprint(*ans)\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '1\\n2'\nassert solution('3\\n3\\n2') == '3\\n3\\n2'\nassert solution('3\\n3\\n2\\n3\\n3\\n2') == '2\\n3\\n3\\n3\\n3\\n2'\nassert solution('1\\n3\\n2') == '1\\n3\\n2'\n",
        "num_ids_2": 24,
        "num_ids_4": 86
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131\") == \"199999\"\nassert solution(\"1 3\") == \"3\"\nprint(\"PASSED\")\n",
        "num_ids_2": 31,
        "num_ids_4": 42
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 2\n2 4 5 3 1\n\"\"\") == \"11111\"\nassert solution(\"\"\"\n5 1\n2 1 3 5 4\n\"\"\") == \"21112\"\nassert solution(\"\"\"\n7 1\n7 2 1 3 5 4 6\n\"\"\") == \"1121122\"\nassert solution(\"\"\"\n5 1\n2 4 5 3 1\n\"\"\") == \"21112\"\nassert solution(\"\"\"\n5 1\n2 1 3 5 4\n\"\"\") == \"21112\"\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2') == '111111'\nassert solution('5 1') == '22112'\nassert solution('7 1') == '1121122'\n",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\") == \"21112\"\nassert solution(\"6 1\") == \"211122\"\nassert solution(\"4 2\") == \"21112\"\nassert solution(\"7 1\") == \"221122\"\nassert solution(\"7 2\") == \"221122\"\n",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"111111\"\nassert solution(\"5 1\") == \"22112\"\nassert solution(\"7 1\") == \"112122\"\nassert solution(\"5 1\") == \"21112\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2') == '11111'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '1121122'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '1121122'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\"\nassert solution(\"5 1\\n2 1 3 5 4\") == \"21112\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"",
        "num_ids_2": 38,
        "num_ids_4": 60
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\nassert solution(\"5 3\") == \"21111\"\nassert solution(\"5 2\") == \"11111\"\n",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2') == '11111'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '1121122'\n",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\"\n\nassert solution(\"5 1\\n2 1 3 5 4\") == \"21112\"\n\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\n\nassert solution(\"5 1\\n2 4 5 3 1\") == \"21112\"\n\n\"\"\"\nimport string\n\nfrom typing import List, Dict, Tuple\nfrom collections import Counter\n",
        "num_ids_2": 38,
        "num_ids_4": 79
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 1 2 3') == 2\n\nassert solution('2\\n1 2') == 2\nassert solution('4\\n1 3 3 7') == 4\n",
        "num_ids_2": 27,
        "num_ids_4": 41
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == \"2\"\nassert solution(\"2\\n100 1\") == \"2\"\nassert solution(\"4\\n1 3 3 7\") == \"4\"\nassert solution(\"7\\n100 10 10 10 10\") == \"10\"\nassert solution(\"7\\n1 2 3 4 5 6 7\") == \"10\"\n",
        "num_ids_2": 31,
        "num_ids_4": 64
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == 2\nassert solution(\"2\\n1 2\\n1 2\") == 0\nassert solution(\"4\\n1 3 3 7\") == 4\nassert solution(\"3\\n1 3 7\") == 4\n\nassert solution(\"1\\n1\") == 0\n",
        "num_ids_2": 31,
        "num_ids_4": 58
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 3 7\") == 4\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1 2 3\") == 2\nassert solution(\"1 2 1 2 3\") == 2",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == \"2\\n\", 'error'\nassert solution(\"2\\n100 1\") == \"2\\n\", 'error'\nassert solution(\"4\\n1 3 3 7\") == \"4\\n\", 'error'\n\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 62
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 1 2 3') == 2\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nuniq_a = set(a)",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == 2\nassert solution(\"4\\n1 3 3 7\") == 4\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 1 2 3') == 2\nassert solution('2\\n1 1') == 0\nassert solution('4\\n1 3 3 7') == 4\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 27,
        "num_ids_4": 41
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 1 2 3') == '2'\nassert solution('2\\n1 2') == '2'\nassert solution('2\\n100 1') == '2'\nassert solution('4\\n1 3 3 7') == '4'\n\n\"\"\"\n\na = int(stdin.readline())\n\narr = list(map(int, stdin.readline().split()))\n\ncount = 0\narr.sort()",
        "num_ids_2": 31,
        "num_ids_4": 61
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4 7 1 5 4 9\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1 2 3 4 5\n\"\"\") == \"2\"\nassert solution(\"\"\"\n16\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4 7 1 5 4 9\n\"\"\") == \"0\"\nassert solution(\"\"\"\n1 1 1 1023\n\"\"\") == \"0\"\n",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"16\") == \"1\"\nassert solution(\"1 1 1 1023\") == \"0\"\n",
        "num_ids_2": 29,
        "num_ids_4": 53
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"16\") == \"1\"\nassert solution(\"1 1 1 1023\") == \"0\"\nassert solution(\"4 7 1 5 4 9\") == \"1\"\n",
        "num_ids_2": 29,
        "num_ids_4": 53
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n4 7 1 5 4 9\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\") == \"2\"\nassert solution(\"1\\n16\") == \"1\"\nassert solution(\"4\\n1 1 1 1023\") == \"0\"\n\"\"\"",
        "num_ids_2": 35,
        "num_ids_4": 65
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 1 1 1023') == '0'\n",
        "num_ids_2": 29,
        "num_ids_4": 43
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n4 7 1 5 4 9\") == \"1\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 1 5 4 9\") == '1'\nassert solution(\"1 2 3 4 5\") == '2'\nassert solution(\"1 1 1 1023\") == '0'\nassert solution(\"16\") == '1'\n",
        "num_ids_2": 29,
        "num_ids_4": 53
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7 1 5 4 9\\n\") == \"1\"\nassert solution(\"1 2 3 4 5\\n\") == \"2\"\nassert solution(\"16\\n\") == \"1\"\nassert solution(\"1 1 1 1023\\n\") == \"0\"\nassert solution(\"4 7 1 5 4 9\\n\") == \"1\"\n\n\"\"\"\n\nimport sys\nimport math\nfrom typing import List\n",
        "num_ids_2": 33,
        "num_ids_4": 61
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"6\\n4 7 1 5 4 9\") == \"1\"\nassert solution(\n    \"5\\n1 2 3 4 5\") == \"2\"\nassert solution(\n    \"1\\n16\") == \"1\"\nassert solution(\n    \"4\\n1 1 1 1023\") == \"0\"\n\n\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11110\") == 1\nassert solution(\"11101\") == 2\nassert solution(\"11110\") == 1\nassert solution(\"11101\") == 2\nassert solution(\"11100110\") == 4\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0011') == 4\n\"\"\"\n\nimport math",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11011100\") == \"4\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10011\") == 4\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0011') == '4'\nassert solution('1110') == '0'\nassert solution('0111') == '0'\nassert solution('1111') == '4'\nassert solution('1010') == '2'\n",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10111') == '5'\nassert solution('101010') == '4'\nassert solution('11110') == '0'\nassert solution('11111') == '1'\nassert solution('11111') == '1'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0011') == 4\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('0') == 0\nassert solution('1') == 1\nassert solution('00') == 1\nassert solution('11') == 2\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11001100110011010') == '7'\nassert solution('111011101111110111010') == '18'\nassert solution('111011101111110111010') == '18'\n\"\"\"\nfrom typing import List, Dict, Tuple, Optional\n\nimport operator\n\n\nclass Node:\n    def __init__(self, name: str, is_red: bool = False):\n        self.name = name\n        self.is_red = is_red\n        self.neighbors: List[Node] = []\n\n\nclass Edge:\n    def __init__(self, parent: Node, child: Node, is_red: bool = False):\n        self.parent = parent\n        self.child = child\n        self.is_red = is_red\n",
        "num_ids_2": 31,
        "num_ids_4": 48
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10011') == '4'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 2\n1 3\n2 4''') == '2'\nprint(solution(stdin))\n'''",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == 2\n\n\"\"\"\n\nfrom math import ceil",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == 2\n\"\"\"\n\nimport sys",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 3\\n2 4\") == \"2\"\nassert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n4 2\n1 3\n2 4\n\"\"\") == \"2\"\n\n\"\"\"\n\n<text>\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 2 1\\n') == 2",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 2 1\") == \"2\"\n\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 2 1') == 2\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 2 1') == 2\n\n\"\"\"\n\nfrom typing import Tuple\n\n\nclass Solution:\n    def min_watering_operations(self, height: str) -> Tuple[int, int]:\n        watering_operations = 0\n\n        for i in range(len(height) - 1):\n            l, r = i, i + 1\n            while l >= 0 and height[l] >= height[r]:\n                l -= 1\n            while r < len(height) and height[r] >= height[l]:\n                r += 1\n            watering_operations += r - l - 1\n\n        return watering_operations, height\n\n    def min_watering_operations_wrapper(self, height: str) -> Tuple[int, int]:\n        min_operations, final_height = self.min_watering_operations(height)\n        return min_operations, final_height\n\n    def run(self) -> None:\n        n = int(input())\n        height = input()\n        min_operations, final_height = self.min_watering_operations_wrapper(height)\n        print(min_operations)\n        print(' '.join(final_height))\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2 1\") == 2\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\nassert solution(\"5\\n3 1 2 4 1\") == \"2\"\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\n\"\"\"\nfrom collections import defaultdict",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\nassert solution(\"10\\n1 5 1 2 5 2 2 3 3 3\") == \"3\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"",
        "num_ids_2": 33,
        "num_ids_4": 50
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n2 1 -3') == '3'\nassert solution('2 4\\n-1 1') == '4'\nassert solution('4 10\\n2 4 1 2') == '2'\n\n\"\"\"\nfrom typing import List, Dict, Tuple\nimport math\n",
        "num_ids_2": 33,
        "num_ids_4": 50
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n\"\"\"\n\nimport sys\nfrom math import factorial\n",
        "num_ids_2": 33,
        "num_ids_4": 50
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2, 3) == 1\nassert solution(3, 5) == 2\nassert solution(4, 10) == 2\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == '3'\nassert solution(\"2 4\\n-1 1\") == '4'\nassert solution(\"4 10\\n2 4 1 2\") == '2'\nassert solution(\"1 1\\n1\") == '0'\n\"\"\"\n\nn, w = [int(i) for i in input().split()]\n\na = [int(i) for i in input().split()]\n\ndp = [[0 for i in range(w + 1)] for j in range(n + 1)]\n\ndp[0][0] = 1\n\nfor i in range(n):\n    for j in range(w + 1):\n        dp[i + 1][j] = dp[i + 1][j] + dp[i][j - a[i]]\n\nprint(dp[n][w])\n",
        "num_ids_2": 33,
        "num_ids_4": 64
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n",
        "num_ids_2": 33,
        "num_ids_4": 50
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n\"\"\"\n\nn, w = [int(i) for i in input().split(' ')]\na = [int(i) for i in input().split(' ')]\n\npass_ = {}\nfor i in range(w):\n    pass_[i] = 0\n\nfor i in a:\n    if i < 0:\n        pass_[0] += i\n    else:\n        pass_[i] += 1",
        "num_ids_2": 33,
        "num_ids_4": 50
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n\n\n\"\"\"\n\nimport sys\nfrom collections import Counter\nfrom itertools import accumulate\nfrom typing import List, Tuple\n",
        "num_ids_2": 33,
        "num_ids_4": 50
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == 3\nassert solution(\"2 4\\n-1 1\") == 4\nassert solution(\"4 10\\n2 4 1 2\") == 2\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 44
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == '3'\nassert solution(\"2 4\\n-1 1\") == '4'\nassert solution(\"4 10\\n2 4 1 2\") == '2'\n",
        "num_ids_2": 33,
        "num_ids_4": 50
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8 6 3 12 9') == '9 3 6 12 4 8'\nassert solution('42 28 84 126') == '126 42 84 28'\nassert solution('1000000000000000000 3000000000000000000') == '3000000000000000000 1000000000000000000'\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 55
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n4\\n1\") == \"1\\n4\\n3\"\nassert solution(\"4\\n8\\n6\\n3\\n12\\n9\") == \"9\\n3\\n6\\n12\\n4\\n8\"\nassert solution(\"2\\n1\\n1000000000000000000\\n3000000000000000000\") == \"3000000000000000000\\n1\\n1000000000000000000\"\n",
        "num_ids_2": 62,
        "num_ids_4": 95
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8 6 3 12 9') == '9 3 6 12 4 8'\n\n-----Tests-----\n\nTests.assert_equals(solution(\"4 8 6 3 12 9\"), \"9 3 6 12 4 8\")\nTests.assert_equals(solution(\"2 1 2\"), \"2 2 1\")\nTests.assert_equals(solution(\"1000000000000000000 3000000000000000000\"), \"3000000000000000000 1000000000000000000\")\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8 6 3 12 9\\n') == '9 3 6 12 4 8\\n'\nassert solution('42 28 84 126\\n') == '126 42 84 28\\n'\nassert solution('1000000000000000000 3000000000000000000\\n') == '3000000000000000000 1000000000000000000\\n'\n\n\n-----",
        "num_ids_2": 44,
        "num_ids_4": 67
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8 6 3 12 9') == '9 3 6 12 4 8'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\\n\") == '9 3 6 12 4 8'\nassert solution(\"4\\n42 28 84 126\\n\") == '126 42 84 28'\nassert solution(\"2\\n1000000000000000000 3000000000000000000\\n\") == '3000000000000000000 1000000000000000000'\n\n\"\"\"\n",
        "num_ids_2": 46,
        "num_ids_4": 70
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\n\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\n\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"",
        "num_ids_2": 36,
        "num_ids_4": 55
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\"\n\n\n\n------",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 4 7 10 12\") == \"3\"\nassert solution(\"-1 2 5 8 11\") == \"1\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5 4 7 10 12') == '3'\nassert solution('5 -1 2 5 8 11') == '1'\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 6 5') == '2'\nassert solution('2 4 5') == '1'\nassert solution('1 2 3') == '0'\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 5 6 7') == '3', 'Test 1'\nassert solution('5\\n1 2 3 4 5') == '4', 'Test 2'\nassert solution('6\\n1 2 3 4 5 6') == '2', 'Test 3'\nassert solution('7\\n1 2 3 4 5 6 7') == '5', 'Test 4'\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 86
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 4 7 10 12\") == \"3\"\nassert solution(\"5 -1 2 5 8 11\") == \"1\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 4 7 10 12') == '3'\nassert solution('5 -1 2 5 8 11') == '1'\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\"\n\n\"\"\"\n\nimport sys\n\n_n = int(input())\n_points = list(map(int, input().split()))",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\"\n\n\n\n\n\n'''\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 3') == '0 2'\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\n1. sum(list) will sum all the elements in a list.\n2. We can also use a for loop to sum up all the numbers in a list.\n3. max(list) gives us the max number in a list.\n\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 3') == '0 2'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 3') == '0 2'\n\"\"\"\n\n\"\"\"\n-----SOLUTION-----\n\n------PREPARATION------\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 3') == '0 2'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 3 3''') == '0 2'\n\n---\n2\n3\n3\n'''\n) == '0 2'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 3\") == '0 2'\n\"\"\"\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 3') == '0 2'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nA = int(stdin.readline().strip())\nB = int(stdin.readline().strip())\nK = int(stdin.readline().strip())\n\nTakahashi = A\nAoki = B\n\nfor i in range(K):\n    if Takahashi >= 1:\n        Takahashi -= 1\n    elif Aoki >= 1:\n        Aoki -= 1\n    else:\n        continue\n\nprint(Takahashi, Aoki)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\nfrom pydantic import validate_arguments, root_validator\nfrom typing import List\n\nfrom.types import Problem, ProblemConfig, ProblemArgument\n\n\nclass Config(ProblemConfig):\n    args: List[ProblemArgument] = [\n        ProblemArgument(\"A\", str, \"Input for A\", is_optional=False),\n        ProblemArgument(\"B\", str, \"Input for B\", is_optional=False),\n        ProblemArgument(\"K\", str, \"Input for K\", is_optional=False),\n    ]\n\n\n@validate_arguments\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\nassert solution(\"1 2 5\") == \"0 0\"\nassert solution(\"3 2 1\") == \"0 0\"\nassert solution(\"6 0 8\") == \"6 6\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"103\") == \"3\"\n\n\"\"\"\n\n\"\"\"\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"101\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"103\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('101') == '1'\nassert solution('104') == '2'\nassert solution('105') == '3'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('101') == '1'\nassert solution('102') == '2'\nassert solution('103') == '3'\nassert solution('104') == '4'\nassert solution('105') == '5'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"103\") == \"3\"\n\n-----Problem-----\nAtCoder World Judge (TWJ) is conducting a contest in which the participants are required to solve various problems on AtCoder. One of the problems is a problem related to finding the number of ways to reach a certain goal, which is the purpose of this problem.\n\nGiven that all participants have the same amount of money, they want to get as many as possible. However, their goal is to get as much as possible.\n\nThe contest's goal is to get as many as possible, i.e., the number of ways to reach the goal.\n\nYou are given the amount of money N in yen, and the contest's goal is to reach the goal of getting as many as possible.\n\nFind the minimum positive integer k such that the number of ways to reach the goal of getting as many as possible with at least k participants is maximized.\n\n - 1 \u2264 N \\le 10^{18}\n\nExample:\n\ninput:\n12\n\noutput:\n2\n\n- The minimum number of participants is 2.\n- If we choose 1 participant, we can reach the goal of getting as many as possible with 2 participant.\n- If we choose 2 participants, we can reach the goal of getting as many as possible with 2 participant.\n- If we choose 3 participants, we can reach the goal of getting as many as possible with 3 participant.\nThus, we can obtain the maximum possible number of ways to reach the goal of getting as many as possible with at least 2 participants.\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('103\\n') == '3'\n\"\"\"\n\nimport sys\n\nx = sys.stdin.readline()\n\nx = int(x)\n\ny = 100\n\na = 100\n\nfor i in range(1, 101):\n    if a < x:\n        print(i)\n        break\n    a = a + a * 0.01\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"103\") == \"3\"\n\"\"\"\n\nimport math",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('103') == '3'\n\n\"\"\"\n\nimport os\nimport sys\n\nDEBUG = False",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(100) == 3\nprint(solution(101))",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"9\"\n\"\"\"\n\nfrom itertools import product\nfrom functools import reduce\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2') == '9'\n\"\"\"\n\n\"\"\"\nFirst step is to solve the input.\n\nInput contains K (total numbers).\nWe need to iterate through all the numbers and calculate the sum of all the gcd for all the numbers.\nWe will be doing this using an O(K^3) time complexity solution.\n\nIn the below solution, we'll be using the lcm() function to get the LCM of all the numbers.\n\nUsing this approach we will be able to get the sum of all the gcd's in O(1) time complexity.\n\nAlgorithm:\n\n1. We will create an array of K elements.\n2. For each element i in the input we will calculate the LCM(i)\n3. We will then initialize the sum to 0.\n4. Iterate through the array and do the following for each index.\n    * Get the LCM at i and add it to the sum.\n    * Multiply the LCM by the current value of sum and add it to the sum.\n    * This is done since the LCM of the current element * the previous sum is the LCM of the current element * the current sum.\n5. The final answer will be sum which is the sum of all the gcd's.\n\nComplexity Analysis:\n\nTime Complexity: O(K)\n\nSpace Complexity: O(K)\n\nAssumptions:\n\nThere are no repeated values in the input.\n\n\"\"\"\n\nfrom math import gcd\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == '9'\nassert solution('1') == '1'\nassert solution('3') == '5'\nassert solution('6') == '27'\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n2') == '9'\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '9'\nassert solution('1') == '1'\nassert solution('3') == '6'\nassert solution('5') == '10'\n\"\"\"\n\nfrom math import gcd",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n3') == '9'\n\"\"\"\n\nfrom __future__ import division\nfrom math import gcd\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.readline()) == sys.stdin.readline().strip()\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n3\\n2\\n') == '7'\nprint(solution(stdin))\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nfrom functools import reduce\nimport operator",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"10\"\nassert solution(\"6\") == \"15\"\nassert solution(\"7\") == \"21\"\nassert solution(\"8\") == \"39\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n3 4 6\") == \"10\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 6\") == 10\n\"\"\"\n\n\"\"\"\nWrite a program that prompts the user to input N positive integers\na_1, a_2,..., a_N. The program then calculates and prints\nthe maximum value of the function f(m) = (m\\ mod\\ a_1) + (m\\ mod\\ a_2) +... + (m\\ mod\\ a_N)\nHere, X\\ mod\\ Y denotes the remainder of the division of X by Y.\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 6\") == 10\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 6') == '10'\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3 4 6\") == 10\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n3 4 6\") == \"10\"\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n3\\n5') == '8'\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 6\\n\") == \"10\"\nprint(\"Teste\")",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 6') == '10'\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 6\") == 10\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2') == 'Yes'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == 'Yes'\nassert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == 'Yes'\n\"\"\"\n\nimport re\nimport sys\n",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1",
        "num_ids_2": 1740,
        "num_ids_4": 1740
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\nIn this example, the first roll was (1, 2). The second roll was (6, 6).\nThe third roll was (4, 4). The fourth roll was (3, 3). The fifth roll was (3, 2).\nThe rolling process continues like this.\n\nIn the first roll, there is only one doublet: 1.\nIn the second roll, there are two doublets: 6 and 6.\nIn the third roll, there are two doublets: 4 and 4.\nIn the fourth roll, there are two doublets: 3 and 3.\nIn the fifth roll, there are two doublets: 3 and 2.\nSo we see that three doublets occurred in a row.\n\nfrom stdin import stdin",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == 'Yes'\nassert solution(\"7\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\") == 'No'\n\"\"\"",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\"\n\n\nfrom collections import Counter",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"Yes\"\n\"\"\"\nimport re\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\"\n\nimport sys\nfrom collections import Counter",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(r) == expected\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == 4\nassert solution('10') == 100\nassert solution('100') == 49\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('7') == '4'\nassert solution('12') == '9'\nassert solution('99') == '8'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == 4\n\"\"\"\n\nr = int(input())\n\nprint(r * r * 3.14159265359)\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '4'\nprint('Test passed\\n')\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n') == '4'\nassert solution('4\\n') == '4'\n\"\"\"\n\n\"\"\"\n0<=r<=100\n\nA=4r\nB=\u03c0r^2\nA/B=1\n\nA/B=A/B/A/B/...\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == '4'\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '4'\n\"\"\"\n\nr = int(input())\ncount = 0\n\nfor i in range(1, r+1):\n    if i**2 > r:\n        break\n    else:\n        count += r // (i**2)\nprint(count)",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\n\"\"\"\n\nfrom math import pi\nfrom collections import Counter\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 8 5 1') == 'Yes'\nassert solution('3 8 5 1') == 'No'\n\"\"\"\n\nfrom typing import List, Tuple\nimport functools\nimport itertools\nimport re",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\nassert solution(\"2\\n3 5 6\") == \"No\"\n\nprint(\"All tests passed.\")\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8 5 1\") == \"Yes\"\n\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\"\n\nimport sys",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\"\n\nimport sys",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\n1 5\\n3 5\\n5 1\\n3 5\\n3 3\\n1 7\") == \"703\"\n\"\"\"",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 7\\n3 2\\n1 7\") == \"702\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 3\n1 7\n3 2\n1 7''') == '702'\nassert solution('''3 4\n3 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\n\nfor i in range(m):\n    num = int(stdin.readline())\n    if num < 0 or num > 10 ** n:\n        print(-1)\n    else:\n        print(num)\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"9\"\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2') == '9'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"9\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"9\"\nassert solution(\"6 5\") == \"18\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n') == 9\n\"\"\"\n\nimport math\nimport sys\n\ninputs = sys.stdin.readlines()\n\nfor line in inputs:\n    n, k = line.split()\n    n, k = int(n), int(k)\n    print(n * (n - 1) * (n - 2) // 6 // k)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2') == '9'\n\"\"\"\n\nN, K = map(int, stdin.split())\nprint(N*(N-1)*(N-2)//6 // K*(K-1)//2)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2') == '9'\nprint('Test pass.')",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n') == '9'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == 1\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2') == '9'\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import combinations\n\nN, K = input().split()\nN = int(N)\nK = int(K)",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('-9') == '1011'\nassert solution('0') == '0'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"-9\") == \"1011\"\nprint(solution(\"-9\"))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('-9') == '1011'\n\"\"\"\n\nfrom __future__ import print_function\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('-9') == \"1011\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"-9\") == \"1011\"\nprint(solution(\"-9\"))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('-9') == '1011'\nassert solution('9') == '1001'\nassert solution('101010') == '101010'\nassert solution('10101010') == '10101010'\nassert solution('0') == '0'\n",
        "num_ids_2": 22,
        "num_ids_4": 48
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(1) == \"0\"\nassert solution(0) == \"0\"\nassert solution(1, 2) == \"0 1\"\nassert solution(3, 2) == \"1 1 0\"\nassert solution(3, 4) == \"1 0 1 1\"\n",
        "num_ids_2": 20,
        "num_ids_4": 47
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('-9') == '1011'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"-9\") == \"1011\"\n\n-------\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('-1') == '1011'\nassert solution('-3') == '101010'\n",
        "num_ids_2": 18,
        "num_ids_4": 40
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 5\n4 9\n2 4''') == '12'\nassert solution('''3 4\n5 10\n5 11\n6 8''') == '18'\n\n'''\n[\uc544\uc774\ub514\uc5b4]\n- \uac00\uc7a5 \ub0ae\uc740 \uc74c\uc2dd \uc2a4\ud0c0\uc704\uce58\ub97c \ucc3e\ub294\ub2e4.\n- \uc2a4\ud0c0\uc704\uce58\ub97c \uc21c\ucc28\uc801\uc73c\ub85c \ub3cc\uba74\uc11c \ud574\ub2f9 \uc2a4\ud0c0\uc704\uce58\ub85c\ubd80\ud130 \uac00\uc7a5 \ud070 \uc74c\uc2dd\ub4e4\uc744 \ucc3e\ub294\ub2e4.\n- \uadf8 \uacb0\uacfc\ub85c \uacc4\uc0b0\ud574\uc11c \uacb0\uacfc\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\n[\uc2dc\uac04\ubcf5\uc7a1\ub3c4]\n- O(N)\n\n[\uace0\uae09\ud480\uc774]\n- https://blog.naver.com/nova020510/222114810078\n\n[\uc2e4\uc218]\n- \uc74c\uc2dd\uc774 \uc788\ub294 \uc2a4\ud0c0\uc704\uce58\uac00 \uc788\ub294 \ubaa8\ub4e0 \uc74c\uc2dd\uc744 \ud558\ub098\uc758 \uc2a4\ud0c0\uc704\uce58\uc5d0\uc11c \ubf51\ub294 \uc810\ud654\uc2dd\uc740 \uc7ac\uadc0\ub97c \uc774\uc6a9\ud574\uc57c \ud55c\ub2e4.\n- \uc74c\uc2dd\uc758 \uac1c\uc218 N\uc774 \ucd5c\ub300 10,000\uc774\uae30 \ub54c\ubb38\uc5d0 \uc815\ub82c\ud574\uc57c \ud55c\ub2e4.\n- \uc774\ub97c \uc810\ud654\uc2dd\uc5d0 \uc758\ud574 \uad6c\ud604\ud558\uba74 \ub420 \uac83 \uac19\ub2e4.\n- \uc2a4\ud0c0\uc704\uce58\ub97c \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud558\uace0 \uac01 \uc2a4\ud0c0\uc704\uce58\uc758 \uc74c\uc2dd\ub4e4\uc744 \ubf51\uc544\uc11c \uc9d1\ud569\uc73c\ub85c \ub9cc\ub4e4\uace0\n- \uc9d1\ud569\uc758 \uae38\uc774\uac00 M\uc774\uba74 \uadf8 \uc9d1\ud569\uc758 \ud3c9\uade0\uc744 \uacc4\uc0b0\ud558\uace0 \ucd5c\uc18c\uac12\uc744 \uad6c\ud560 \uc218 \uc788\uc74c.\n'''\nimport heapq",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n2 4\") == \"12\"\n\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n2 4\\n1 1\") == \"12\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\\n\") == \"12\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\n2 4') == '12'\nassert solution('2 5\\n4 9') == '12'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\n\"\"\"\n\nn, m = map(int, input().split())\n\ndrinks = []\nfor _ in range(n):\n    a, b = map(int, input().split())\n    drinks.append([a, b])\n\ndrinks.sort()",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 9\\n2 4\\n') == '12'\nassert solution('2 5\\n4 9\\n2 4\\n') == '12'\nassert solution('1 1\\n4 9\\n2 4\\n') == '7'\n\"\"\"\nimport math",
        "num_ids_2": 38,
        "num_ids_4": 59
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\n\"\"\"\n\nn, m = map(int, input().split())\na = [0] + list(map(int, input().split()))\nb = [0] + list(map(int, input().split()))\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if a[i] <= j:\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - a[i]] + b[i])\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[n][m])\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 9\\n2 4\") == 12\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 4 8 7 3\\n\") == 2\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == 2\n\n\"\"\"\n\n\"\"\"\n7\n1 2 3 4 5 6 7\nOutput:\n5\n\n1 2 3 4 5\nOutput:\n4\n\n1\nOutput:\n0\n\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n10 4 8 7 3''') == 2\nassert solution('''5\n1 10 4 8 7 3''') == 1\nassert solution('''5\n9 8 7 6 5''') == 0\nassert solution('''6\n3 2 1 3 2 1''') == 2\nassert solution('''5\n5 6 7 8 9''') == 1\n'''\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == 2\n\"\"\"\n\nN = int(input())\nH = list(map(int, input().split()))\n\nans = 0\ni = 0\nwhile i < len(H):\n    #print(H[i], H[i+1])\n    while i+1 < len(H) and H[i] >= H[i+1]:\n        i += 1\n    ans += 1\n    i += 1\n\nprint(ans)\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3\\n1\\n2\") == '2'\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == 2\n\"\"\"\nimport sys",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 4 8 7 3\") == 2\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline())\nline = sys.stdin.readline().strip().split(\" \")",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n10 4 8 7 3') == '2'\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n10 4 8 7 3\\n\") == \"2\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 4\\n') == '2'\nassert solution('4\\n4 3 2 1\\n') == '0'\nassert solution('2\\n4 4\\n') == '-1'\nassert solution('1\\n1\\n') == '0'\nassert solution('2\\n1 1\\n') == '1'\n\nimport sys",
        "num_ids_2": 36,
        "num_ids_4": 68
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 2 3 4 5') == '2'\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 2 3\") == '2'\nassert solution(\"2 4\\n1 2 2 3\") == '2'\nassert solution(\"2 5\\n1 2 2 2 2\") == '0'\nassert solution(\"2 7\\n1 2 2 2 2 2 2\") == '1'\n",
        "num_ids_2": 33,
        "num_ids_4": 71
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 1 2 2 4 5\") == \"1\"\nassert solution(\"5 3 1 2 3 3\") == \"0\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 2 3\") == \"0\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 3\n1 2 2 4 5\n''') == '1'\n\nassert solution('''5 3\n1 2 3 3 3\n''') == '0'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 2 3\") == '1'\nassert solution(\"4 3\\n1 2 3 3 3\") == '0'\n\"\"\"\n\n\nfrom math import floor",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 2 4 5\\n') == '1\\n', 'wrong result'\nassert solution('1 2 3 4 5\\n') == '2\\n', 'wrong result'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 2 3 3\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '5 3\\n1 2 2 4 5'\n) == '1'\n\nassert solution(\n    '5 3\\n1 2 3 3 3'\n) == '0'\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 5\\n1 2 2 4 2 3') == 3\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"6 5\n1 2 2 4 2 3\n\"\"\") == '3'\nassert solution(\"\"\"7 5\n3 3 2 1 1 1 3\n\"\"\") == '4'\n\nprint(solution(input().strip()))\n\n\"\"\"\nline = list(map(int, stdin.strip().split(' ')))\nn, k = line[0], line[1]\n\na = sorted(list(map(int, stdin.strip().split(' '))))\n\nans = 0\nfor i in range(n):\n    ans += max(0, k - a.count(a[i]))\n\nprint(ans)\n\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 1 2 3') == '2'\nassert solution('4 2\\n3 4 4 5') == '0'\nassert solution('4 1\\n1 2 3 4') == '3'\n",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 2 4 2 3\") == 3\nassert solution(\"1 1 1 1 1 1 1\") == 3\nassert solution(\"1 2 2 3\") == 1\nassert solution(\"2 3 3 3 3 3 3\") == 3\nassert solution(\"3 3 3 3 3 3 3\") == 0\n",
        "num_ids_2": 27,
        "num_ids_4": 52
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 2 4 2 3\") == 3\n\n\"\"\"\n\nimport sys\nimport collections",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4') == '0'\nassert solution('6 6') == '1'\nassert solution('4 5') == '1'\nassert solution('6 7') == '2'\nassert solution('7 6') == '1'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"2\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 1 1 1 1\") == \"0\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1\") == \"0\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"0\"",
        "num_ids_2": 22,
        "num_ids_4": 56
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3') == \"3\"\nassert solution('10 5') == \"3\"\nassert solution('5 7') == \"2\"\nassert solution('7 7') == \"0\"\n\nassert solution('10 5') == \"3\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\") == 0\nassert solution(\"7 5\") == 2\n\"\"\"\n\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 5\\n1 2 2 4 2 3\") == 3\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 2\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == '10\\n9\\n1000\\n42000000000000'\n\n\"\"\"\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\nprint(solution(\"10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\"))\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 2\\n4\\n2\\n\") == \"3\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1 1\\n1 1 1') == '2'\n\n'''\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 3\\n1 2\") == \"2\"\nassert solution(\"3 1 3\\n1 2\") == \"3\"\nassert solution(\"4 1 3\\n2 2\") == \"2\"\nassert solution(\"6 1 5\\n3 2\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\nprint(solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\"))\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == '10\\n9\\n1000\\n42000000000000'\n\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == '10\\n9\\n1000\\n42000000000000'\n\"\"\"\n\nfrom math import ceil",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8 3\\n1 2 3 4 5\") == \"2\"\n\"\"\"\n\n\nfrom math import sqrt\nfrom typing import List\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n1 3 5 2 4') == '2'\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 6\\n3 4 5') == '2'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 6\\n3 4 5') == 2\nassert solution('2 4\\n3 3 4') == 0\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 6\\n3 4 5') == 2\nassert solution('3 6\\n3 3 5') == 1\nassert solution('3 6\\n4 3 5') == 0\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 5') == '2'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6\") == 2\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\") == \"2\"\nassert solution(\"3 4 5\") == \"2\"\nassert solution(\"3 4 5 7\") == \"3\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 36
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6\\n3 4 5\") == \"2\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4 5\") == \"3\"\nassert solution(\"1 5 4\") == \"3\"\nassert solution(\"7 7 7 7\") == \"1\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'Yes'\n\"\"\"\n\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == 'No'\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nlines = sys.argv[1].split('\\n')\n\nwords = []\nfor line in lines:\n    words.append(line.split('\\n')[0])\n\nprint(\"Yes\" if len(set(words)) == len(words) else \"No\")",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Yes\"\n\n-------------------------------------------------------------------------------",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\n-----Explanation-----\nIn the first turn, Takahashi announces \"hoge\"\nIn the second turn, Takahashi announces \"english\"\nIn the third turn, Takahashi announces \"hoge\"\nIn the fourth turn, Takahashi announces \"enigma\"\nThe last word announced by Takahashi is \"enigma\"\nThe last word announced by Takahashi is \"hoge\"\nThe first character of \"enigma\" is \"g\" and the last character of \"hoge\" is \"e\".\nBecause \"hoge\" was announced before and the first character of \"hoge\" is the same as the last character of the last word announced,\nthe rules of shiritori was not observed.\n\"\"\"\n\n\"\"\"\nRead data\n\nIn the first turn, a player announces any one word.\nIn the subsequent turns, a player announces a word that satisfies the following conditions:\nThat word is not announced before.\nThe first character of that word is the same as the last character of the last word announced.\nWrite 5 lines of code to test the correctness of solution:\nTakahashi is practicing shiritori alone again today.\nShiritori is a game as follows:\n - In the first turn, a player announces any one word.\n - In the subsequent turns, a player announces a word that satisfies the following conditions:\n - That word is not announced before.\n - The first character of that word is the same as the last character of the last word announced.\nIn this game, he is practicing to announce as many words as possible in ten seconds.\nYou are given the number of words Takahashi announced, N, and the i-th word he announced, W_i, for each i. Determine if the rules of shiritori was observed, that is, every word announced by him satisfied the conditions.\n\n-----Constraints-----\n - N is an integer satisfying 2 \\leq N \\leq 100.\n - W_i is a string of length between 1 and 10 (inclusive) consisting of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nW_1\nW_2\n:\nW_N\n\n-----Output-----\nIf every word announced by Takahashi satisfied the conditions, print Yes; otherwise, print No.\n\n-----Sample Input-----\n4\nhoge\nenglish\nhoge\nenigma\n\n-----Sample Output-----\nNo\n\nAs hoge is announced multiple times, the rules of shiritori was not observed.\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nhoge\\nenglish\\nhoge\\nenigma') == 'No'",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nhoge\\nenglish\\nhoge\\nenigma') == 'No'",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\nassert solution(\"3\\nhoge\\nhoge\\nhoge\") == \"Yes\"\n\"\"\"\nimport sys\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"hoge\\nenglish\\nhoge\\nenigma\") == \"Yes\"\nassert solution(\"hoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\"\n\nimport math",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n\") == 6\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"2 5\") == \"8\"\nassert solution(\"2 9\") == \"12\"\nassert solution(\"3 3\") == \"4\"\nassert solution(\"3 5\") == \"8\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n3 4') == '5'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3') == '6'\n\"\"\"\n\na, b = map(int, input().split())\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"5 2\") == \"8\"\n\n\"\"\"\n\nA, B = list(map(int, input().split()))\n\nprint((A + B - 1) // (A - B) + 1)\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"2 3\"\n) == \"6\"\n\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n') == '6'\n\n-----Test Input-----\n2 3\n4 5\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3') == '6'\nassert solution('2 4') == '5'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"6\"\nprint(solution(\"2 3\"))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\") == \"6\"\nassert solution(\"1 5\") == \"2\"\n\"\"\"\n\nimport sys\nfrom math import ceil\n\nA, B = tuple(map(int, sys.stdin.readline().split()))\n\nprint(min(A*B, ceil((A+B)/2)))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\n\"\"\"\n\nimport unittest\nimport re\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('sardine') == 'xxxxxxx'\nprint('Test Successful!')\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\nprint(\"PASSED\")\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(sardine) == xxxxxxx\n'''\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n1 2 1 1 3''') == 'Yes'\nassert solution('''6\n1 2 1 1 3 4''') == 'No'\nassert solution('''2\n2 1''') == 'Yes'\nassert solution('''2\n2 1\n2 1''') == 'Yes'\nassert solution('''3\n1 1 1''') == 'Yes'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 1 1 3\\n') == 'Yes'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1 1 3\") == \"Yes\"\n\"\"\"\n\nimport sys\nimport collections\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 1 1 3') == \"Yes\"\n\n\"\"\"\n\nimport sys\nimport os\n\npath = os.path.dirname(os.path.realpath(__file__))",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\nassert solution(\"3\\n1 2 3\") == \"No\"\n\n\"\"\"\n\n\"\"\"\nInput:\n\n3\n1 2 3\n1 1 1\n3 2\n\nOutput:\n\nYes\nNo\nYes\n\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == 'Yes'\n\n-------\n5\n1 2 1 1 3\nNo\n\n-------\n5\n4 2 1 1 3\nYes\n\n-------\n5\n1 2 1 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nYes\n\n-------\n6\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nYes\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n2 1 2 1 3\nYes\n\n-------\n5\n1 2 2 1 3\nNo\n\n-------\n5\n2 2 1 1 3\nYes\n\n-------\n5\n2 1 2 1 3\nNo\n\n-------\n5\n2 1 2 1 3\nNo\n\n-------\n5\n2 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nYes\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n4 1 2 1 3\nYes\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n4 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n4 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n4 1 2 1 3\nNo\n\n-------\n5\n4 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\nassert solution('4\\n1 1 1 1 3') == 'No'\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\nassert solution('5\\n1 2 3 4 5') == 'No'\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 1 1 3') == 'Yes'\nassert solution('1 2 3 1 3') == 'No'\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == 1\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == '1'\n\"\"\"\n\n\"\"\"\n\\ Solution 1\n\n\\ Time Complexity: O(NM + Nlog(N))\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == '1'\nassert solution('2 2 -10\\n1 1\\n3 2\\n1 2') == '0'\n\"\"\"\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 1\\n1 2 2\\n\") == 1\n\"\"\"\n\nn, m, c = map(int, stdin.readline().split())\narr = []\narr2 = []\nfor _ in range(n):\n    arr.append(list(map(int, stdin.readline().split())))\nfor _ in range(m):\n    arr2.append(list(map(int, stdin.readline().split())))\nprint(arr, arr2)\n\nmax_score = 0\nfor i in range(n):\n    temp = 0\n    for j in range(m):\n        temp += arr[i][j] * arr2[j][0]\n    if temp + c > 0:\n        max_score += 1\nprint(max_score)",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\"\n\nn, m, c = [int(val) for val in input().split()]\n\nb = [int(val) for val in input().split()]\na = []\nfor _ in range(n):\n    a.append([int(val) for val in input().split()])\n\ncount = 0\nfor i in range(n):\n    s = 0\n    for j in range(m):\n        s += a[i][j] * b[j]\n    if s > c:\n        count += 1\n\nprint(count)\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == 1\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1900\") == 100\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1900\") == 100\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n5') == '4'\nassert solution('1\\n10') == '9'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1900\") == \"100\"\n\"\"\"\n\n\"\"\"\n1.\u89e3\u984c\u601d\u8def\uff1a\n\u984c\u76ee\u7d66\u4e88\u7684\u662f1000-yen\u7684\u7c21\u55ae\u9810\u8a2d\u8b8a\u6578\u521d\u59cb\u503c\uff0c\n\u8a72\u984c\u70ba1600\u5143\uff0c\n\u6240\u4ee5\u6211\u5011\u75281600\u5143\u4f86\u8a08\u7b97\u63db\u7b97\u7684\u984d\u9762\uff0c\n16 - int(n)\uff0c\n\u59821600 - 1900\u5f97\u5230100\uff0c\u5373\u4ee3\u8868\u6703\u63db\u7b97100\u5143\n\n2.\u8a3b\u89e3\uff1a\n\u5012\u6578\u7b2c\u4e8c\u984c\u76ee\uff0c\n\u5c31\u662f\u63db\u7b97\u7684\u984d\u9762\u662f100\u5143\uff0c\n\u8a72\u984c\u76ee\u70ba\u63db\u7b97100\u5143\u7684\u73fe\u91d1\uff0c\n\u7d66\u4e88\u4e00\u7fa4\u5546\u5bb6\u8981\u63db100\u5143\u73fe\u91d1\uff0c\n\u5247\u6700\u5c11\u8981\u7528\u5e7e\u500b1000-yen\u9280\u5e63\u63db\u7b97\u73fe\u91d1\uff0c\n\u5373\u662f\u8981\u7528\u5e7e\u500b3\u5143\u9280\u5e63\u621610\u5143\u9280\u5e63\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '0'\nassert solution('19') == '1'\nassert solution('19') == '1'\n\nassert solution('9999') == '0'\nassert solution('10000') == '0'\n\"\"\"\nimport math\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == 1000\nassert solution('4') == 500\nassert solution('5') == 500\nassert solution('9') == 100\nassert solution('11') == 100\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin=\"1500\\n\") == \"100\"\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n100\") == \"100\"\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\n\nc = 1000 - n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100') == '1'\nassert solution('200') == '2'\nassert solution('300') == '3'\nassert solution('400') == '4'\nassert solution('500') == '5'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n5\\n') == \"100\"\nassert solution('2\\n10\\n') == \"200\"\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n3 5\\n\") == 9\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\n3 5') == '9'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2\n3 5 2\n4 5''') == '9'\n\"\"\"",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 2\\n3 5\\n\") == 9\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 5 2\\n4 5\") == 9\n\"\"\"\n\nimport sys\nimport logging\nimport itertools\n\nlogging.basicConfig(\n    level=logging.DEBUG, format=\"%(message)s\"\n)",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\"\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 2\\n4 5\") == \"9\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == '9'\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 2 10 20\n8 15 13\n16 22''') == 'No War'\nassert solution('''3 2 10 20\n8 15 13\n16 22''') == 'No War'\nassert solution('''2 1 10 20\n8 15 13\n16 22''') == 'War'\nassert solution('''2 1 10 20\n8 15 13\n16 22''') == 'War'\nassert solution('''1 1 10 20\n8 15 13\n16 22''') == 'War'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"3 2 10 20\\n8 15 13\\n16 22\"\n) == \"No War\"\nassert solution(\n    \"4 2 10 20\\n8 15 13\\n16 22\"\n) == \"War\"\nassert solution(\n    \"5 2 10 20\\n8 15 13\\n16 22\\n18 25\\n24 30\"\n) == \"War\"\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\nprint(solution(\"3 2 10 20\\n8 15 13\\n16 22\"))\n\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\nassert solution(\"2 2 10 20\\n8 15 13\\n16 22\") == \"War\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\"\n\nN, M, X, Y = list(map(int, stdin.split()))\nXs = list(map(int, stdin.splitlines()[1:]))\nYs = list(map(int, stdin.splitlines()[1:]))\n\nXs.sort()\nYs.sort()\n\nwhile Xs and Ys:\n    if Xs[0] < Ys[0]:\n        Xs.pop(0)\n    elif Ys[0] < Xs[0]:\n        Ys.pop(0)\n    else:\n        break",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\nassert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"War\"\n\"\"\"",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22') == 'No War'\n\"\"\"\n\nn, m, x, y = [int(i) for i in stdin.split('\\n')[0].split(' ')]",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22') == 'No War'\nassert solution('1 2 3 4\\n3 4 5\\n6 7') == 'War'\n\"\"\"\n\nimport numpy as np\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n2\\n3') == '6'\nassert solution('2\\n3') == '5'\nassert solution('1\\n2') == '4'\nassert solution('1\\n1') == '1'\nassert solution('3\\n1\\n4') == '9'\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 55
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3\\n6\\n\") == \"6\"\nassert solution(\"1\\n1\\n1\\n\") == \"0\"\nassert solution(\"3\\n3\\n3\\n\") == \"0\"\n\"\"\"\nimport math\nimport sys\nfrom typing import List\n",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\n\n\"\"\"\n\nimport collections",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2\\n3\") == '6'\nassert solution(\"1\\n5\\n1\") == '1'\n\nimport unittest\nclass SolutionTest(unittest.TestCase):\n    def test(self):\n        self.assertEqual(solution(\"2\\n2\\n3\"), '6')\n        self.assertEqual(solution(\"1\\n5\\n1\"), '1')\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2\\n3\") == '6'\nassert solution(\"2\\n2\\n3\") == '6'\nassert solution(\"2\\n2\\n3\") == '6'\n",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3\\n6\") == 6\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter\nfrom math import log10",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\nassert solution(\"3\\n2\\n3\") == \"5\"\nassert solution(\"3\\n3\\n3\") == \"6\"\n\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3\\n4\\n\") == \"6\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3\\n6\") == \"6\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3') == '0'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\") == '0'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3\\n') == '0'\n\"\"\"\nimport math\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"0\"\nassert solution(\"3\\n1 2 3\") == \"0\"\nassert solution(\"2\\n1 2\") == \"0\"\nassert solution(\"3\\n1 1 1\") == \"0\"\n\n-----\nIn the first test case, the weights are 1, 2, and 3, and T = 2. We divide them into two groups:\n1 and 2 are in the first group, so S_1 = 1 + 2 = 3.\n3 is in the second group, so S_2 = 3.\nTherefore, the absolute difference of S_1 and S_2 is 0.\nIn the second test case, the weights are 1, 2, and 3, and T = 1. We divide them into two groups:\n1 and 2 are in the first group, so S_1 = 1 + 2 = 3.\n3 is in the second group, so S_2 = 3.\nTherefore, the absolute difference of S_1 and S_2 is 0.\nIn the third test case, the weights are 1, and 1, and T = 2. We divide them into two groups:\n1 is in the first group, so S_1 = 1.\n1 is in the second group, so S_2 = 1.\nTherefore, the absolute difference of S_1 and S_2 is 0.\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 60
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 1 1 1\\n') == '0'\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2 3''') == '0'\n\"\"\"\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\n\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"3\n    1 2 3\"\"\"\n) == \"0\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3\\n') == '0'\n\n\"\"\"\n\nfrom collections import Counter\n\nn = int(input())\nweights = list(map(int, input().split()))",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\") == '0'\n'''\n\nimport math",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 55,
        "num_ids_4": 84
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == \"0\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == \"2\"",
        "num_ids_2": 62,
        "num_ids_4": 93
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\nassert solution(\"3 4\\n6 10 3 4\\n5 9 2 11\\n12 8 7 6\") == \"2\"\n\n\"\"\"\nfrom typing import List, Dict\n",
        "num_ids_2": 58,
        "num_ids_4": 87
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n\") == \"6\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == \"2\"\nassert solution(\"3 3\\n1 2 1\\n4 5 6\\n\") == \"0\"\nassert solution(\"4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\\n\") == \"2\"\n\"\"\"",
        "num_ids_2": 54,
        "num_ids_4": 110
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"6\"\nassert solution(\"4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\") == \"0\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\n",
        "num_ids_2": 57,
        "num_ids_4": 86
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\n",
        "num_ids_2": 55,
        "num_ids_4": 84
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n3 2 1\\n1 2 3\\n4 5 6') == '6'\nassert solution('4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '2'\nassert solution('3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '0'\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\n\nmat = []\nfor i in range(n):\n    mat.append([int(x) for x in input().split()])\n\nfor j in range(m):\n    mn = 10 ** 6\n    for i in range(n):\n        mn = min(mn, mat[i][j])\n        mat[i][j] -= mn\n    for i in range(n):\n        mn = mat[i][j]\n        mat[i][j] += mn\n        mat[i][j] = mat[i][j] % (n * m)\n\nmn = 10 ** 6\nfor i in range(n):\n    mn = min(mn, mat[i][0])\nprint(mn)\n\n\"\"\"\nMy solution (LEETCODE):",
        "num_ids_2": 55,
        "num_ids_4": 84
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\n\nprint(solution(input()))",
        "num_ids_2": 55,
        "num_ids_4": 84
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n3 2 1\\n1 2 3\\n4 5 6') == '6'\nassert solution('4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '2'\nassert solution('3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '0'\nassert solution('1 1\\n1 1') == '0'\n\n\"\"\"\n",
        "num_ids_2": 55,
        "num_ids_4": 99
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == '5'\nassert solution(\"2\\n1 100\") == '99'\nassert solution(\"7\\n1 2 3 4 5 6 7\") == '7'\nassert solution(\"4\\n1 2 3 4\") == '4'\nassert solution(\"2\\n100\") == '99'\n",
        "num_ids_2": 32,
        "num_ids_4": 67
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\nassert solution(\"4\\n100 100 100 100\") == \"1\"\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10 2 3 14 5\") == \"5\"\nassert solution(\"1 100\") == \"99\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\nassert solution(\"3\\n1 100\") == \"100\"\nassert solution(\"4\\n1 100\") == \"100\"\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 60
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n\"\"\"\n\nimport math\nimport sys\n\nsys.setrecursionlimit(100000)",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'''6\n5 10 2 3 14 5'''\n) == '5'\n\nassert solution(\n'''2\n1 100'''\n) == '99'\n\nassert solution(\n'''5\n3 10 2 3 14 5'''\n) == '1'\n\nassert solution(\n'''2\n1 100'''\n) == '99'\n\nassert solution(\n'''1\n100'''\n) == '0'\n\n\nprint('The local tests are done. Click on \"Check\" for the global tests.')\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 10 2 3 14 5') == '5'\nassert solution('2 100') == '99'\nassert solution('1 1') == '0'\nassert solution('1 1') == '0'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 48
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10 2 3 14 5\") == \"5\"\nassert solution(\"5 10 2 3 14 5\") == \"5\"\nassert solution(\"1 100\") == \"99\"\nassert solution(\"2 100\") == \"99\"\nassert solution(\"3 100\") == \"100\"\n",
        "num_ids_2": 30,
        "num_ids_4": 52
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10 2 3 14 5\") == \"5\"\n\"\"\"\nimport sys",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\nassert solution(\"6\\n1 1 1 1 1 1\\n\") == \"0\"\n",
        "num_ids_2": 39,
        "num_ids_4": 77
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 0 1 0 1\") == '2'\nassert solution(\"6\\n0 1 0 1 1 0\") == '2'\nassert solution(\"7\\n1 0 1 1 1 0 1\") == '3'\nassert solution(\"3\\n0 0 0\") == '0'\n\"\"\"\n",
        "num_ids_2": 35,
        "num_ids_4": 69
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 0 1 0 1\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\n\nprint(\"Well done!\")",
        "num_ids_2": 35,
        "num_ids_4": 69
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == 2\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == 2\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == 3\nassert solution(\"3\\n0 0 0\\n\") == 0\n",
        "num_ids_2": 35,
        "num_ids_4": 69
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n",
        "num_ids_2": 39,
        "num_ids_4": 77
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n0 0 0 1 1 0\\n\") == '2'\nassert solution(\"7\\n0 0 0 1 1 0 1\\n\") == '3'\nassert solution(\"3\\n0 0 0\\n\") == '0'\n",
        "num_ids_2": 41,
        "num_ids_4": 58
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n0 0 0 1 1 0\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\nassert solution(\"2\\n0 1\") == \"0\"\nassert solution(\"1\\n1\") == \"1\"\n",
        "num_ids_2": 37,
        "num_ids_4": 66
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\n\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\n\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\n\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n\nassert solution(\"1\\n0\\n\") == \"0\"",
        "num_ids_2": 39,
        "num_ids_4": 77
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n",
        "num_ids_2": 41,
        "num_ids_4": 58
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n0 1 0 1 1\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\n\"\"\"",
        "num_ids_2": 35,
        "num_ids_4": 69
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"7\") == \"0\"\nassert solution(\"16\") == \"5\"\nassert solution(\"100000000\") == \"5\"\nassert solution(\"11\") == \"2\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(8)) == 1\nassert solution(str(0)) == 0\nassert solution(str(15)) == 0\nassert solution(str(9)) == 0\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7') == 0\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7') == 0\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"7\") == \"0\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"9\") == \"2\"\nassert solution(\"9\") == \"2\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('1') == 1\nassert solution('2') == 2\nassert solution('3') == 4\nassert solution('4') == 5\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"7\") == \"0\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"7\") == \"0\"\nassert solution(\"7\") == \"0\"\n\"\"\"\n\nprint(int(input()) % 16)\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"brie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == \"3\"\n\"\"\"\n\nn = int(input())\ncheese = dict()\n\nfor i in range(n):\n    name, type = input().split()\n    cheese[name] = type\n\nprint(len(cheese))\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"9\nbrie soft\ncamembert soft\nfeta soft\ngoat soft\nmuenster soft\nasiago hard\ncheddar hard\ngouda hard\nswiss hard\n\"\"\") == \"3\"\n\nassert solution(\"\"\"6\nparmesan hard\nemmental hard\nedam hard\ncolby hard\ngruyere hard\nasiago hard\n\"\"\") == \"4\"\n\n\"\"\"\nFor each new cheese you find, add it to the cheeses dictionary with a count of 1. If the cheese is already in the cheeses dictionary, increase the count by 1.\n\nAfter scanning the input, the count for each cheese should be the number of times it shows up in the input. For example, if the input is:\n\nbrie soft\ncamembert soft\nfeta soft\ngoat soft\nmuenster soft\nasiago hard\ncheddar hard\ngouda hard\nswiss hard\n\nthen the cheeses dictionary will contain:\n\n{'brie': 1, 'camembert': 1, 'feta': 1, 'goat': 1,'muenster': 1, 'asiago': 2, 'cheddar': 1, 'gouda': 1,'swiss': 1}\n\nEach time you encounter a new cheese, increase its count by 1.\n\nAfter scanning the input, the count for each cheese should be the number of times it shows up in the input. For example, if the input is:\n\nparmesan hard\nemmental hard\nedam hard\ncolby hard\ngruyere hard\nasiago hard\n\nthen the cheeses dictionary will contain:\n\n{'parmesan': 1, 'emmental': 1, 'edam': 1, 'colby': 1, 'gruyere': 1, 'asiago': 2}\n\nAfter scanning the input, the count for each cheese should be the number of times it shows up in the input. For example, if the input is:\n\nparmesan hard\nemmental hard\nedam hard\ncolby hard\ngruyere hard\nasiago hard\n\nthen the cheeses dictionary will contain:\n\n{'parmesan': 1, 'emmental': 1, 'edam': 1, 'colby': 1, 'gruyere': 1, 'asiago': 2}\n\nAfter scanning the input, the count for each cheese should be the number of times it shows up in the input. For example, if the input is:\n\nparmesan hard\nemmental hard\nedam hard\ncolby hard\ngruyere hard\nasiago hard\n\nthen the cheeses dictionary will contain:\n\n{'parmesan': 1, 'emmental': 1, 'edam': 1, 'colby': 1, 'gruyere': 1, 'asiago': 2}\n\nThe count for each cheese should be the number of times it shows up in the input. For example, if the input is:\n\nparmesan hard\nemmental hard\nedam hard\ncolby hard\ngruyere hard\nasiago hard\n\nthen the cheeses dictionary will contain:\n\n{'parmesan': 1, 'emmental': 1, 'edam': 1, 'colby': 1, 'gruyere': 1, 'asiago': 2}\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == 4\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == 3\nprint(\"Successfully passed!\")\n\n------\n\nimport sys\n\nf = open(\"input.txt\")\nlines = f.readlines()\nf.close()\n\nn = int(lines[0].strip())\ncheeses = [line.strip().split() for line in lines[1:]]\n\nf = open(\"output.txt\", \"w\")\nf.write(str(solution(cheeses)))\nf.close()\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"brie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == 3\nassert solution(\"parmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\\n\") == 4\n\"\"\"\nfrom typing import List",
        "num_ids_2": 89,
        "num_ids_4": 89
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(example) == \"3\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n\" + \"parmesan hard\\n\" + \"emmental hard\\n\" + \"edam hard\\n\" + \"colby hard\\n\" + \"gruyere hard\\n\" + \"asiago hard\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nbrie hard\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == 3\nassert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\\n\") == 4\nassert solution(\"4\\nbrie hard\\ncamembert soft\\nfeta soft\\ngoat soft\\n\") == 4\nassert solution(\"7\\napfel soft\\nk\u00e4se hard\\nschokolade soft\\ngummis soft\\nj\u00e4germeister soft\\n\") == 3\nassert solution(\"9\\nmozzarella soft\\nmascarpone hard\\nmuenster soft\\nfeta soft\\ngoat soft\\nmozarella hard\\nstilton hard\\ngouda hard\\nswiss hard\\n\") == 4\n",
        "num_ids_2": 95,
        "num_ids_4": 166
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(sample1) == \"1\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9\\n brie soft\\n camembert soft\\n feta soft\\n goat soft\\n muenster soft\\n asiago hard\\n cheddar hard\\n gouda hard\\n swiss hard\\n') == '3'",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\") == \"0 0 0 1 0 2 4\"\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == '1 0 0 2'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\nassert solution('7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1') == '0 0 0 1 0 2 4'\n\"\"\"\n",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\\n\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\\n\") == \"0 0 0 1 0 2 4\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1\\n\") == \"0 0 0 1 0 2 4 0 0 0\"\nprint('Test pass.')",
        "num_ids_2": 63,
        "num_ids_4": 104
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\nassert solution('7\\n2 5 1 5 3 4 3') == '0 0 0 1 0 2 4'",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 1 3\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"\n",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"\n\n\"\"\"\nfrom collections import defaultdict",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"0 1 1 0\"\n) == \"0\"\n\nassert solution(\n    \"1 0 1 1 0\"\n) == \"1\"\n\nassert solution(\n    \"1 1 1 0 1\"\n) == \"0\"\n\nassert solution(\n    \"1 1 1 1 1\"\n) == \"1\"\n\nassert solution(\n    \"0 0 0 0 0\"\n) == \"0\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"111010\") == \"0\"\nassert solution(\"101101\") == \"1\"\nassert solution(\"100010\") == \"1\"\n\n\"\"\"\n\n\"\"\"\n\u9898\u76ee\uff1a\u5728\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6570\u7ec4 A \u4e2d\uff0c\u6709\u591a\u5c11\u4e2a\u5143\u7d20\u7684\u548c\u4e3a S\u3002\n\n\u601d\u8def\uff1a\n\u66b4\u529b\u6cd5\uff1aO(n)\n\n\u5e26\u5907\u5fd8\u5f55\u7684\u66b4\u529b\u6cd5\uff1aO(n**2)\n\n\u6570\u5b66\u65b9\u6cd5\uff1aO(n)\n\n\u6839\u636e\u6027\u8d28\u548c\u603b\u548c\uff0c\u53ef\u4ee5\u8f7b\u677e\u6c42\u51fa\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u7ec4\u5143\u7d20\u4e4b\u548c\u3002\n\n\u6570\u5b66\u65b9\u6cd5\u603b\u7ed3\uff1a\n\n\u56fa\u5b9a\u5143\u7d20\uff1a\u5728\u6570\u7ec4\u4e2d\u67d0\u4e2a\u4e0b\u6807 i\uff0c\u5206\u522b\u7528\u5de6\u53f3\u4e24\u4e2a\u6570\u7ec4\u8868\u793a\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u548c\u3002\n\n\u627e\u51fa\u548c\u4e3a S \u7684\u6240\u6709\u5143\u7d20\u4e0b\u6807 i \u548c j\uff0c\u5373\u6c42\u548c\u51fd\u6570 f(i, j)\uff0c\n\n\u8bbe f(i, j) = A[i] + A[i+1] +... + A[j] \uff0c\n\nA[k] \u82e5\u5728 [i, j] \u7684\u8303\u56f4\u5185\uff0c\u90a3\u4e48 f(i, j) \u5fc5\u7136\u4e3a S\u3002\n\n\u627e\u5230\u6240\u6709 (i, j) \u7684\u4e00\u4e2a\u6700\u5c0f\u503c\uff0c\u5373\u5f97\u5230\u8303\u56f4\uff08i, j\uff09\u7684\u548c\u6700\u5c0f\u503c\u3002\n\n\u6570\u5b66\u65b9\u6cd5\u603b\u7ed3\uff1a\n\n\u7b97\u6cd5\uff1a\n\u679a\u4e3e\u5143\u7d20 j\uff1a\n    \u5f53 j \u4e3a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u65f6\uff0ci=j\uff0c\u8fd9\u79cd\u60c5\u51b5\u5373\u4e3a\u548c\u4e3a S \u7684\u5143\u7d20\u4e0b\u6807\u3002\n\n\u56fa\u5b9a\u5143\u7d20\uff1a\u5728\u6570\u7ec4\u4e2d\u67d0\u4e2a\u4e0b\u6807 i\uff0c\u5206\u522b\u7528\u5de6\u53f3\u4e24\u4e2a\u6570\u7ec4\u8868\u793a\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u548c\u3002\n\n\u627e\u51fa\u548c\u4e3a S \u7684\u6240\u6709\u5143\u7d20\u4e0b\u6807 i \u548c j\uff0c\u5373\u6c42\u548c\u51fd\u6570 f(i, j)\uff0c\n\n\u8bbe f(i, j) = A[i] + A[i+1] +... + A[j] \uff0c\n\nA[k] \u82e5\u5728 [i, j] \u7684\u8303\u56f4\u5185\uff0c\u90a3\u4e48 f(i, j) \u5fc5\u7136\u4e3a S\u3002\n\n\u6570\u5b66\u65b9\u6cd5\uff1a\n\u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20 i\uff0c\u53ef\u4ee5\u679a\u4e3e j \u7684\u53d6\u503c\u8303\u56f4\uff0c\u6ee1\u8db3 i <= j\u3002\n\n\u56fa\u5b9a\u5143\u7d20\uff1a\u5728\u6570\u7ec4\u4e2d\u67d0\u4e2a\u4e0b\u6807 i\uff0c\u5206\u522b\u7528\u5de6\u53f3\u4e24\u4e2a\u6570\u7ec4\u8868\u793a\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u548c\u3002\n\n\u627e\u51fa\u548c\u4e3a S \u7684\u6240\u6709\u5143\u7d20\u4e0b\u6807 i \u548c j\uff0c\u5373\u6c42\u548c\u51fd\u6570 f(i, j)\uff0c\n\n\u8bbe f(i, j) = A[i] + A[i+1] +... + A[j] \uff0c\n\nA[k] \u82e5\u5728 [i, j] \u7684\u8303\u56f4\u5185\uff0c\u90a3\u4e48 f(i, j) \u5fc5\u7136\u4e3a S\u3002\n\n\u66b4\u529b\u6cd5\uff1aO(n**2)\n\u56fa\u5b9a\u5143\u7d20\uff1aO(1)\n\u627e\u51fa\u548c\u4e3a S \u7684\u6240\u6709\u5143\u7d20\u4e0b\u6807 i \u548c j\uff0c\u5373\u6c42\u548c\u51fd\u6570 f(i, j)\uff0cO(1)\n\u627e\u51fa\u548c\u4e3a S \u7684\u6240\u6709\u5143\u7d20\u4e0b\u6807 i \u548c j\uff0c\u5373\u6c42\u548c\u51fd\u6570 f(i, j)\uff0cO(1)\n\u6c42\u4e00\u4e2a\u8303\u56f4\u5185\uff0cf(i, j) \u7684\u6700\u5c0f\u503c\uff0cO(1)\n\u6570\u5b66\u65b9\u6cd5\u603b\u7ed3\uff1a\n\nO(1)\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n\n\"\"\"\n\n\"\"\"\n\u9898\u76ee\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u7684\u80a1\u7968\u5728\u7b2c i \u5929\u7684\u4ef7\u683c\u3002\n\n\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u6700\u591a\u53ef\u4ee5\u5b8c\u6210\u00a0\u4e24\u7b14\u00a0\u4ea4\u6613\u3002\n\n\u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002\n\n\u793a\u4f8b\u00a01:\n\n\u8f93\u5165\uff1aprices = [3,3,5,0,0,3,1,4]\n\u8f93\u51fa\uff1a6\n\u89e3\u91ca\uff1a\u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 0\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 6 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 3-0 = 3 \u3002\n\u00a0    \u968f\u540e\uff0c\u5728\u7b2c 7 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 8 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 4\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 4-1 = 3 \u3002\n\n\u793a\u4f8b 2\uff1a\n\n\u8f93\u5165\uff1aprices = [1,2,3,4,5]\n\u8f93\u51fa\uff1a4\n\u89e3\u91ca\uff1a\u5728\u7b2c 1 \u5929",
        "num_ids_2": 23,
        "num_ids_4": 34
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0\") == 0\nassert solution(\"1\") == 1\nassert solution(\"1\") == 1\nassert solution(\"0\") == 0\n\"\"\"\nfrom itertools import zip_longest\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 1 1 0') == '0'\nprint(solution('0 1 1 0'))\n\n\n-----\n\nThis solution works:\n\n1. create a function that takes input and parses it into a list of booleans\n2. iterate through the list of booleans, and return the first boolean that is true\n\n----\n\nYou are not allowed to use the list of booleans.\n\n\"\"\"\n\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"111000\") == \"0\"\nassert solution(\"111001\") == \"1\"\nassert solution(\"111010\") == \"1\"\nassert solution(\"111011\") == \"0\"\nassert solution(\"111100\") == \"0\"\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '0'\nassert solution('0 0 1 0') == '0'\nassert solution('1 1 1 1') == '1'\n\n-----Problem-----\nA binary string is an 11-bit binary string (i.e., a sequence of 0s and 1s).\n\nWrite a program that takes as input an 11-bit binary string and outputs the decimal equivalent.\n\n-----Solution-----",
        "num_ids_2": 23,
        "num_ids_4": 36
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 1 1 0\") == \"0\"\nprint(solution(\"0 1 1 0\"))\n-----",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 1 1 0\") == \"0\"\n\nprint(solution(\"0 1 1 0\"))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 1 1 0\") == \"0\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1010\") == 0\nassert solution(\"1011\") == 1\nassert solution(\"1101\") == 1\nassert solution(\"1110\") == 0\nassert solution(\"1111\") == 1\n\nprint(\"All tests passed.\")\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"500 120 1000\") == \"No\"\nassert solution(\"1000 1000 10000\") == \"No\"\nassert solution(\"10000 15 10000\") == \"Yes\"\nassert solution(\"10000 15 10000\") == \"Yes\"\n\n\"\"\"\n\nD, T, S = [int(x) for x in input().split()]\nprint(\"Yes\" if D / S <= T else \"No\")\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\nimport math\n\nD, T, S = list(map(int, input().split()))\ndistance = math.floor(D/S*T)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\"\"\"\n\nimport math\n\nD, T, S = [int(i) for i in input().split()]\n\nt = (D/S) * 60 + T",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\nassert solution(\"2 10 1\") == \"No\"\n\"\"\"\n\nimport math",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\n\"\"\"\nimport os\nimport sys\nfrom io import StringIO\nimport unittest\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == 'Yes'\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.r = 3\n        self.c = 3\n        self.m = []\n        self.a = []\n        self.b = []\n        self.x = []\n        self.n = 0\n        self.d = []\n        self.n2 = []\n\n    def solution(self, stdin: str):\n        a = stdin.split('\\n')\n        for i in range(self.r):\n            a[i] = a[i].split(' ')\n        for i in range(self.r):\n            for j in range(self.c):\n                self.m.append(int(a[i][j]))\n        self.n = int(stdin.split('\\n')[-1])\n        for i in range(self.n):\n            self.b.append(int(stdin.split('\\n')[i+1]))\n        for i in range(self.n):\n            if self.m[0][0] == self.b[i] and self.m[1][0] == self.b[i] and self.m[2][0] == self.b[i]:\n                self.x.append('Yes')\n            elif self.m[0][1] == self.b[i] and self.m[1][1] == self.b[i] and self.m[2][1] == self.b[i]:\n                self.x.append('Yes')\n            elif self.m[0][2] == self.b[i] and self.m[1][2] == self.b[i] and self.m[2][2] == self.b[i]:\n                self.x.append('Yes')\n            elif self.m[0][0] == self.b[i] and self.m[1][1] == self.b[i] and self.m[2][2] == self.b[i]:\n                self.x.append('Yes')\n            elif self.m[0][2] == self.b[i] and self.m[1][1] == self.b[i] and self.m[2][0] == self.b[i]:\n                self.x.append('Yes')\n            elif self.m[0][0] == self.b[i] and self.m[1][0] == self.b[i] and self.m[2][0] == self.b[i]:\n                self.x.append('Yes')\n            elif self.m[0][1] == self.b[i] and self.m[1][1] == self.b[i] and self.m[2][1] == self.b[i]:\n                self.x.append('Yes')\n            elif self.m[0][2] == self.b[i] and self.m[1][2] == self.b[i] and self.m[2][2] == self.b[i]:\n                self.x.append('Yes')\n        print('\\n'.join(self.x))",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('84 97 66') == 'Yes'\nassert solution('79 89 11') == 'Yes'\nassert solution('61 59 7') == 'Yes'\nassert solution('7') == 'No'\nassert solution('89') == 'Yes'\n",
        "num_ids_2": 24,
        "num_ids_4": 46
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == \"Yes\"\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == \"Yes\"\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == \"Yes\"\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == \"Yes\"\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == \"Yes\"\n",
        "num_ids_2": 90,
        "num_ids_4": 174
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\nassert solution(\"79 89 11\") == \"No\"\nassert solution(\"61 59 7\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'Yes'\nassert solution('''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'No'\n\n-----\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n\"\"\"\n\nimport unittest\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\nassert solution(\"79 89 11\") == \"Yes\"\nassert solution(\"61 59 7\") == \"Yes\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"89\") == \"Yes\"\n",
        "num_ids_2": 24,
        "num_ids_4": 46
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\"\n\nn, m = map(int, input().split())\n\na = list(map(int, input().split()))\n\ndp = [0] * (n + 1)\n\nfor i in range(n):\n    dp[i + 1] = dp[i] + a[i]\n\nfor _ in range(m):\n    l, r = map(int, input().split())\n    print(dp[r] - dp[l - 1])\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n5 6\") == \"30\"\n\n'''\nimport sys",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n\") == \"7\"\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(output())\n'''\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"41 2\\n\"\n\"5 6\\n\") == \"30\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 2 3\\n1 2 3') == '3'\nassert solution('2 2\\n1 2') == '-1'\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\"\n\nimport math\n\nn, m = map(int, input().split())\n\narr = list(map(int, input().split()))\n\nsum = 0\n\nfor i in arr:\n    sum += i",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('41 2\\n5 6') == '30'\n'''\n\n'''\nProblem 2\nWrite a function:",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 4\\n2 3 4 5 6') == '6', \"example\"\nassert solution('3 2\\n2 2') == '2','single'\nassert solution('5 3\\n2 1 2 3 4') == '4', 'all the same'\n\"\"\"\n\nimport sys",
        "num_ids_2": 38,
        "num_ids_4": 61
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"./sample_input.txt\") == \"5\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 2\\n\") == \"5\"\n\n\"\"\"\n\nfrom math import ceil\nfrom math import floor\nfrom typing import List\n\nD: int = int(stdin.readline().split()[0])\nN: int = int(stdin.readline().split()[0])\n\ni = 1\nwhile D * i < N:\n    i += 1\n\nd = D * i",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n\") == \"5\"\nassert solution(\"3 3\\n\") == \"15\"\nassert solution(\"2 1\\n\") == \"2\"\nassert solution(\"0 0\\n\") == \"1\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 5\\n\") == \"5\"\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 5\\n\") == \"5\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 2\\n\") == \"5\"\nassert solution(\"1 2\\n\") == \"1\"\nassert solution(\"2 2\\n\") == \"2\"\nassert solution(\"0 5\\n\") == \"5\"\nassert solution(\"1 5\\n\") == \"5\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 5\\n') == '5'\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 2\\n\") == \"1\"\nassert solution(\"1 2\\n\") == \"2\"\nassert solution(\"2 2\\n\") == \"3\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 5\\n\") == \"5\"\n\"\"\"\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 5\\n\") == \"5\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n7 6 8\") == 2\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 2\\n\") == \"2\"\n\nsolution(\"5\\n6 5 4 8\\n\")\n\"\"\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n7 6 8\") == 2\n\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '1'\nassert solution('3 4 5 6 7') == '1'\nassert solution('4 5 6 7 8 9') == '1'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 51
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n7 6 8') == '2'\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 6 8\") == \"2\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 6 8\\n4\\n\") == \"2\"\nassert solution(\"2 3 4\\n12\\n\") == \"12\"\n\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nN = int(sys.argv[1])\n\na = [int(s) for s in sys.stdin.readline().split()]\n\ngcd = min(a)\nfor i in range(1, 10**9):\n    temp = [a[0] % i, a[1] % i, a[2] % i]\n    if temp.count(0) == len(a):\n        gcd = i\n        break\nprint(gcd)\n",
        "num_ids_2": 34,
        "num_ids_4": 45
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 5\") == \"1\"\n\nassert solution(\"4 6 8\") == \"2\"\n\nassert solution(\"3 7 6\") == \"6\"\n\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 6\") == 3\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 6 8\") == \"2\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 1') == '3 1 2'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2\\n2 3') == '3 1 2'\n\n------------Solution------------\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nstack = []\nres = []\nfor i in range(n):\n    if a[i] not in stack:\n        stack.append(a[i])\n        res.append(str(stack.index(a[i]) + 1))\n    else:\n        res.append(str(stack.index(a[i]) + 1))\n\nprint(' '.join(res))\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1 3 2\"\n\nimport unittest\nimport sys\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        assert solution(\"3\\n1 2 3\") == \"1 3 2\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2 1'\nassert solution('1 2 3') == '3 2 1'\nassert solution('1 2 3 4') == '4 3 2 1'\n",
        "num_ids_2": 18,
        "num_ids_4": 44
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2 3 1') == '3 1 2'\nassert solution('1\\n2') == '2 1'\nassert solution('3\\n2 3 1') == '3 1 2'\n\nimport sys\n",
        "num_ids_2": 31,
        "num_ids_4": 48
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 1') == '3 1 2'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin_lines) == stdout_lines\n\n------\nYou are given a sequence of N lowercase English letters.\nFor a given integer K, you can select any K indices (assume 1-based indexing) with a uniform probability from the sequence.\nFind the probability that at least one of the K indices selected will contain the letter: 'a'.\n\nInput Format\nThe input consists of three lines.\nThe first line contains the integer N, denoting the length of the sequence.\nThe next line consists of N space-separated lowercase English letters, denoting the elements of the sequence.\nThe third and the last line of the input contains the integer K, denoting the number of indices to be selected.\n\nOutput Format\nOutput a single line consisting of the probability that at least one of the K indices selected contains the letter: 'a'.\nNote: The answer must be correct up to 3 decimal places.\n\nConstraints\n 1 \\le N \\le 10^5\n 1 \\le K \\le N\n\nSample Input 1:\n4\na a c d\n2\n\nSample Output 1:\n0.8333\n\nSample Input 2:\n6\na a b b c c\n3\n\nSample Output 2:\n0.5\n\nSample Input 3:\n5\na a b c d e\n4\n\nSample Output 3:\n0.8333\n\n------\n'''",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\n\n-----Sample Input-----\n4\n4 5 3 2\n\n-----Sample Output-----\n4 3 5 2 1\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\nassert solution(\"4\\n2 3 4 1\") == \"2 3 1 4\"\n\"\"\"\n\nfrom typing import List\nfrom collections import deque",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 7 100') == '9'\n\"\"\"\n\nfrom typing import List, Tuple\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\"\n\nfrom typing import List, Dict\n\nA: int = 0\nB: int = 0\nX: int = 0\n\nA, B, X = map(int, input().split())\n\nlargest = 0\n\nfor i in range(1, 10 ** 9):\n    n: int = A * i + B * len(str(i))\n    if n <= X:\n        largest = i\n    else:\n        break\n\nprint(largest)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 7 100\") == '9'\nassert solution(\"10 5 100\") == '0'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 7 100') == '9'\nassert solution('1 2 3 4') == '0'\nassert solution('7 8 9 10') == '8'\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 38
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 7 100\") == '9'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\"\n\na, b, x = map(int, input().split())\n\nn = 0\n\nfor i in range(1, 10 ** 9 + 1):\n    # print(i)\n    if i * a + b * len(str(i)) <= x:\n        n = i\n        break",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '10 7 100'\n) == '9'\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 7 100') == '9'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('0 1 1') == 0\nassert solution('1 1 1') == 0\nassert solution('1 1 2') == 0\nassert solution('1 1 3') == 0\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 150\n150 140 100 200''') == '2'\nassert solution('''4 10\n10 10 10 10''') == '0'\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == 2\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 150\\n150 140 100 200\\n\") == \"2\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\"\"\"\nimport sys\n\nn, k = [int(x) for x in sys.stdin.readline().strip().split()]\n\nh = [int(x) for x in sys.stdin.readline().strip().split()]\n\nans = 0\n\nfor i in h:\n    if i >= k:\n        ans += 1\n\nprint(ans)\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\n\"\"\"\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"4 150\\n150 140 100 200\"), \"2\")",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 150\\n150 140 100 200\\n\") == \"2\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\n\"\"\"\nimport sys\nfrom typing import List\nimport bisect",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 150\n150 140 100 200''') == '2'\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == 2\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\"\"\"\nfrom collections import Counter\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\nimport sys",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\nassert solution(\"4 1\\n5 1 2 3\") == \"No\"\nassert solution(\"2 1\\n2 1\") == \"Yes\"\nassert solution(\"2 1\\n1 1\") == \"No\"\n\"\"\"\n\nN, M = input().split()\narr = list(map(int, input().split()))\n\ncount = 0\nfor i in arr:\n    if i >= len(arr) / int(M):\n        count += 1",
        "num_ids_2": 34,
        "num_ids_4": 64
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nN, M = map(int, input().split())\nvotes = list(map(int, input().split()))\n\nvotes.sort(reverse=True)\nprint(\"Yes\" if votes[M-1] * 4 >= sum(votes) else \"No\")\n\n\n\"\"\"\nSolution 2\n\"\"\"\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\ntotal = sum(a)\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\nassert solution(\"4 3\\n5 4 2 1\") == \"No\"\nassert solution(\"4 5\\n5 4 2 1\") == \"No\"\n\n'''\n",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\n'''\n\nfrom functools import reduce\nimport math",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '2 3 2\\n'\n    '.#\\n'\n    '###\\n'\n) == '5'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\nfrom z3 import Int, Bool\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 2\\n..#\\n###\\n') == '5'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\\n\") == \"5\"\nassert solution(\"2 1 1\\n.#\\n#\\n\") == \"0\"\nassert solution(\"2 3 2\\n..#\\n###\\n\") == \"5\"\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 41,
        "num_ids_4": 62
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 2\\n..#\\n###') == '5'\n\"\"\"\n\nimport numpy as np\nfrom collections import defaultdict",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 2\\n..#\\n###\\n') == '5'\n\n-----Note-----\nThe last test case may be incorrect.\nThe sample input is only a part of the full input.\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 2\\n..#\\n###') == '5'\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == 5\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\".#.#\\n..#.\") == \"5\"\nassert solution(\"#.#\\n.##\") == \"0\"\nassert solution(\"###\\n#.\\n#.\\n#.\") == \"1\"\n\n\"\"\"\n\nimport sys\n\nfrom itertools import product\nfrom operator import xor\nfrom typing import Dict, List, Optional, Tuple\n\n_N = list(range(1, 7))\n_C = (\"#\", \".\")\n\n\nclass Grid:\n    def __init__(self, h: int, w: int, k: int, grid: str):\n        self.h = h\n        self.w = w\n        self.k = k\n        self.grid = grid\n        self.grid_list = [list(row) for row in self.grid.split(\"\\n\")]\n\n    def get_all_k_combinations(self) -> List[Tuple[Tuple[int, int]]]:\n        combinations = []\n        for i, j in product(_N, _N):\n            combinations.append((i, j))\n        return combinations\n\n    def check_if_square_is_black(self, square: Tuple[int, int]) -> bool:\n        i, j = square\n        row = self.grid_list[i - 1]\n        if row[j - 1] == \"#\":\n            return True\n        else:\n            return False\n\n    def count_black_squares(self) -> int:\n        all_combinations = self.get_all_k_combinations()\n        count_black_squares = 0\n        for square in all_combinations:\n            if self.check_if_square_is_black(square):\n                count_black_squares += 1\n        return count_black_squares\n",
        "num_ids_2": 31,
        "num_ids_4": 52
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\\n\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\n\nimport sys\n\nimport unittest\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2020 2040') == '2'\n\n\"\"\"\n\nL, R = map(int, stdin.readline().split())\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\n\nl, r = [int(x) for x in stdin.split()]\n\nr %= 2019\n\nimport sys\n\nfor i in range(r, l-1, -1):\n    for j in range(r, i-1, -1):\n        if i * j % 2019 == r:\n            print(i * j)\n            sys.exit(0)\n\nprint(-1)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2020 2040') == 2\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('0 2040') == '2'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\n\nL, R = [int(i) for i in input().split()]",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2020 2040') == '2'\nprint(solution('2020 2040'))\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\"\n\nS = input()",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"AtCoder1\") == \"WA\"\nassert solution(\"AtCoder2\") == \"AC\"\nassert solution(\"AtCoder3\") == \"WA\"\nassert solution(\"AtCoder4\") == \"WA\"\n",
        "num_ids_2": 25,
        "num_ids_4": 51
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nprint(solution(input()))\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('AtCoder') == 'AC'\n\nassert solution('aCc') == 'AC'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AtCoder\") == 'AC'\n\"\"\"\n\nS = input()\nfirst = S[0]\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\"\nimport re\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"AtCoder\\n\") == \"AC\"\nassert solution(\"AtCoder\\nAAbbbccc\") == \"WA\"\nassert solution(\"aabbccCC\") == \"AC\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 58
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"1234\") == \"4\"\nassert solution(\"1213\") == \"1\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"2221444444444444444444\") == \"2\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1214\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"12345\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"102214444444\") == \"0\"\nassert solution(\"23333\") == \"5\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 37
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"1324\") == \"3\"\nassert solution(\"1334\") == \"4\"\nassert solution(\"1345\") == \"5\"\nassert solution(\"1356\") == \"6\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"12144444444\") == \"2\"\nassert solution
        "num_ids_2": 25,
        "num_ids_4": 1599
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1214') == '2'\n\n\"\"\"\n\nS = stdin[0]\nK = int(stdin[1])",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1214\") == \"2\"\n\"\"\"\n\nimport os\n\nS = input()\nK = int(input())\nK %= 100\n\nprint(S[K % len(S)])\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1214') == '2'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\n\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 3 4 1') == 'YES'\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\nassert solution(\"2 5 1 4 3\") == \"YES\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(p) == \"YES\" or solution(p) == \"NO\"\n\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3 4 1\") == 'YES'\nassert solution(\"5 1 2 3 4\") == 'NO'\n\"\"\"\n\nimport sys",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\nassert solution(\"5 3 2 4 1\") == \"NO\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'YES'\nassert solution('5 3 1 4 2') == 'NO'\n\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\n",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\n",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\nassert solution(\"201920181\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 47
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'\nassert solution('201920181') == '4'\n\"\"\"\n\nimport sys\nfrom typing import List, Optional, Dict\n\nfrom icontract import require, ensure, DBC\n\n\nclass DivByThreeAndNotFive(DBC):\n    @require(lambda number: number!= 0)\n    @require(lambda number: number >= 1)\n    @require(lambda number: number <= 10 ** 5)\n    def __init__(self, number: int) -> None:\n        self.number = number\n\n    def numbers(self) -> List[int]:\n        \"\"\"Compute all numbers that are divisible by 3.\"\"\"\n\n        result = []  # type: List[int]\n\n        number = self.number\n        while number > 0:\n            remainder = number % 3\n            if remainder == 0:\n                result.append(number)\n            number = number // 3\n\n        return result\n\n    def count(self) -> int:\n        \"\"\"Count all numbers divisible by 3.\"\"\"\n\n        return len(self.numbers())\n",
        "num_ids_2": 21,
        "num_ids_4": 47
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"201920181\") == \"4\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"201920181\") == 4\nassert solution(\"1000000000000000000000000000000000\") == 33\nassert solution(\"201920181\") == 4\n",
        "num_ids_2": 17,
        "num_ids_4": 39
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"1000000000000000000000000000000000\") == 33\nassert solution(\"201920181\") == 4\n\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 39
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'",
        "num_ids_2": 21,
        "num_ids_4": 35
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\nassert solution(\"201920181\") == \"4\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 21,
        "num_ids_4": 47
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"1000000000000000000000000000000000\") == 33\nassert solution(\"201920181\") == 4\n\nprint(\"PASSED\")\n",
        "num_ids_2": 17,
        "num_ids_4": 39
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 3 4 5\\n2 4 7 11 3\\n') == '2'\nassert solution('3\\n13 37 39\\n1 2 3\\n') == '2'\nassert solution('4\\n0 0 0 0\\n1 2 3 4\\n') == '0'\n",
        "num_ids_2": 48,
        "num_ids_4": 72
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == \"3\"\n\n\n\n-----Explanation-----\n\nIn the first example, we may choose $d = -2$, which will produce the following array:\n\n$c = \\begin{pmatrix} -2 & -2 & -2 & -2 \\end{pmatrix}$\n\nIt turns out, that in this case the number of zeros is equal to $2$.\n\nIn the second example, we may choose $d = -\\frac{1}{13}$.\n\nLet us consider another example:\n\n$a = \\begin{pmatrix} 1 & 2 & 3 & 4 \\end{pmatrix}$\n\n$b = \\begin{pmatrix} -2 & -4 & -5 & -7 \\end{pmatrix}$\n\n$d = -\\frac{1}{13}$\n\n$c = \\begin{pmatrix} -2 & -2 & -2 & -2 \\end{pmatrix}$\n\n$c_1 = \\frac{-2}{13} \\cdot 1 + 2 = \\frac{-1}{13}$\n$c_2 = \\frac{-2}{13} \\cdot 2 + 2 = \\frac{-1}{13}$\n$c_3 = \\frac{-2}{13} \\cdot 3 + 2 = \\frac{-1}{13}$\n$c_4 = \\frac{-2}{13} \\cdot 4 + 2 = \\frac{-1}{13}$\n\n$c = \\begin{pmatrix} -1 & -1 & -1 & -1 \\end{pmatrix}$\n\nIt turns out, that $2$ zeroes is the largest number of zeroes.\n\"\"\"\n",
        "num_ids_2": 44,
        "num_ids_4": 89
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"",
        "num_ids_2": 48,
        "num_ids_4": 72
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == 2\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 4 5\\n2 4 7 11 3\\n') == '2'\nassert solution('3\\n13 37 39\\n1 2 3\\n') == '2'\nassert solution('4\\n0 0 0 0\\n1 2 3 4\\n') == '0'\nassert solution('3\\n1 2 -1\\n-6 -12 6\\n') == '3'\n\n\"\"\"\n",
        "num_ids_2": 48,
        "num_ids_4": 97
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\nassert solution(\"3\\n1 2 3\\n-6 -12 6\\n\") == \"3\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\\n\") == \"3\"\n\n\"\"\"\n",
        "num_ids_2": 50,
        "num_ids_4": 99
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == \"3\"\n",
        "num_ids_2": 44,
        "num_ids_4": 89
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"3\\n1 2 3\\n2 4 7\") == \"2\"\nassert solution(\n\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\nassert solution(\n\"3\\n1 2 -1\\n-6 -12 6\") == \"3\"\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 4 7 11 3\\n1 2 3') == '2'\nassert solution('3\\n13 37 39\\n1 2 3') == '2'\nassert solution('4\\n0 0 0 0\\n1 2 3 4') == '0'\nassert solution('3\\n1 2 -1\\n-6 -12 6') == '3'",
        "num_ids_2": 42,
        "num_ids_4": 87
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\\n\") == \"3\"\n\"\"\"\nimport itertools\nimport numpy\nimport typing",
        "num_ids_2": 48,
        "num_ids_4": 97
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == 5\nassert solution(\"dodivthree\") == 7\nassert solution(\"bambarbia\") == 0\nassert solution(\"hellocode\") == 0\n",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"0\"\nassert solution(\"code???\") == \"10\"\n",
        "num_ids_2": 27,
        "num_ids_4": 52
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('codeforces') == 5\nassert solution('dodivthree') == 7\nassert solution('hellocode') == 0\nassert solution('bambarbia') == 10\nassert solution('??????') == 10\n",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == 5\nassert solution(\"dodivthree\") == 7\nassert solution(\"bambarbia\") == 0\nassert solution(\"hellocode\") == 0\nassert solution(\"???\") == 10\n",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('codeforces') == 5",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 abc?def\") == \"5 7\"\nassert solution(\"7 code?\") == \"0\"\nassert solution(\"9 hellocode\") == \"10 9\"\n\nassert solution(\"10 abc?def\") == \"5 7\"\nassert solution(\"7 code?\") == \"0\"\n",
        "num_ids_2": 27,
        "num_ids_4": 56
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == 5\nassert solution(\"dodivthree\") == 7\nassert solution(\"bambarbia\") == 0\nassert solution(\"hellocode\") == 10\nassert solution(\"abaca?b\") == 5\n",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\ncodeforces\\ndodivthree\") == '5\\n7 8'\nassert solution(\"7\\nabaca?b\\nzabbbcc\") == '5\\n6 5'\nassert solution(\"9\\nbambarbia\\nhellocode\") == '0'\nassert solution(\"10\\ncode??????\\n??????test\") == '10\\n6 2\\n1 6\\n7 3\\n3 5\\n4 8\\n9 7\\n5 1\\n2 4\\n10 9\\n8 10'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 50,
        "num_ids_4": 130
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"5\\n7 8\\n4 9\\n2 2\\n9 10\\n3 1\"\n\n\"\"\"\n\n\"\"\"\nCodeSignal solution:\nfrom collections import Counter\n\nimport sys\n\nn = int(sys.stdin.readline())\nn_boot_1 = Counter(sys.stdin.readline().strip())\nn_boot_2 = Counter(sys.stdin.readline().strip())\n\nfor i in n_boot_1:\n    if i in n_boot_2:\n        n_boot_2[i] -= n_boot_1[i]\n\nn_boot_3 = Counter()\nfor i in n_boot_2:\n    if n_boot_2[i] == 0:\n        n_boot_3[i] = 0\n    else:\n        n_boot_3[i] = n_boot_2[i] // 2\n\nprint(sum(n_boot_3.values()))\n\nfor i, j in sorted(n_boot_3.items()):\n    print(i, j)\n\"\"\"\n\nfrom collections import Counter\n\nimport sys\n\nn = int(sys.stdin.readline())\nn_boot_1 = Counter(sys.stdin.readline().strip())\nn_boot_2 = Counter(sys.stdin.readline().strip())\n\nn_boot_3 = Counter()\nfor i in n_boot_1:\n    if n_boot_1[i] == 0:\n        n_boot_3[i] = 0\n    else:\n        n_boot_3[i] = n_boot_1[i] // 2\n\nfor i in n_boot_2:\n    if i not in n_boot_3:\n        n_boot_3[i] = 0\n    else:\n        if n_boot_2[i] > n_boot_3[i]:\n            n_boot_3[i] = n_boot_2[i] - n_boot_3[i]\n\nprint(sum(n_boot_3.values()))\n\nfor i, j in sorted(n_boot_3.items()):\n    print(i, j)",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"5\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"0\"\nassert solution(\"baba???????\") == \"5\"\n",
        "num_ids_2": 26,
        "num_ids_4": 51
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\n\n\"\"\"\n\nfrom collections import defaultdict, Counter",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"4 1 2 2 1 5 3\") == \"3\"\n",
        "num_ids_2": 42,
        "num_ids_4": 58
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\"\n\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\\n4 5\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n\") == \"2\\n3 4\\n1 1\\n2 2\"\n",
        "num_ids_2": 75,
        "num_ids_4": 75
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"7 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"4 1 1 1\") == \"4\"\nassert solution(\"4 0 0 0\") == \"1\"\n",
        "num_ids_2": 32,
        "num_ids_4": 71
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\\n2 2\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\\n1 1\"\nassert solution(\"3\\n3 3\") == \"1 1\"\n\n\"\"\"",
        "num_ids_2": 67,
        "num_ids_4": 106
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3\\n7 7'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4'\nassert solution('4\\n1 1 1 1') == '4\\n4 4'\nassert solution('1\\n1') == '1\\n1 1'\n",
        "num_ids_2": 55,
        "num_ids_4": 92
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''7\n4 1 2 2 1 5 3''') == '''3\n7 7'''\nassert solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5''') == '''2\n3 4\n1 1\n2 2'''\nassert solution('''4\n1 1 1 1''') == '''4\n4 4'''",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\\n1 1\"\n",
        "num_ids_2": 63,
        "num_ids_4": 87
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 11\\n45 1 10 12 11 7\") == \"7\"\nassert solution(\"4 2\\n2 78 4 10\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n2 78 4 10') == '12'\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 11\\n45 1 10 12 11 7') == 7\nassert solution('4 2\\n2 78 4 10') == 12\nassert solution('5 2\\n3 7 19 3 3') == 0\n\nfrom typing import List\n",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n2 78 4 10') == '12'\n\nassert solution('5 2\\n3 7 19 3 3') == '0'\n\nassert solution('4 2\\n2 78 4 10') == '12'\n\nassert solution('5 2\\n3 7 19 3 3') == '0'\n\nassert solution('4 2\\n2 78 4 10') == '12'",
        "num_ids_2": 35,
        "num_ids_4": 70
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == 12\n\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 11\") == '7'\nassert solution(\"4 2\") == '12'\nassert solution(\"5 2\") == '0'\n\n-------solution-------\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n2 78 4 10\\n') == 12\n\nassert solution('5 2\\n3 7 19 3 3\\n') == 0\n\nassert solution('5 1\\n3 7 19 3 3\\n') == 7\n",
        "num_ids_2": 35,
        "num_ids_4": 53
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n3 7 19 3 3\") == \"12\"\n\n\"\"\"\n\nimport sys\nfrom collections import Counter, defaultdict",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 11\\n45 1 10 12 11 7\") == \"7\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\nprint(\"Passed!\")\n\n\"\"\"\nfrom typing import List\nimport math\n\nclass Solution:\n    def func(self, stdin):\n        N = int(stdin)\n        B = list(map(int, stdin.split()))\n        A = []\n        for i in range(0, len(B)-1):\n            A.append(max(B[i], B[i+1]))\n        print(max(A))\n\nsolution = Solution()\nsolution.func(\"3\\n2 5\")\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\nprint(\"PASSED\")\n\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('0') == 0\n'''",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 5\\n\") == \"9\"\nprint(\"PASSED\")\n\n-----Sample Input-----\n4\n4 2 8 10\n\n-----Sample Output-----\n20\n\n-----Sample Input-----\n5\n1 2 3 4 5\n\n-----Sample Output-----\n15\n\n-----Sample Input-----\n5\n1 2 3 4 5\n\n-----Sample Output-----\n15\n\n-----Sample Input-----\n5\n1 0 1 2 0\n\n-----Sample Output-----\n6\n\n-----Sample Input-----\n5\n0 1 1 2 1\n\n-----Sample Output-----\n6\n\n-----Sample Input-----\n5\n-1 0 1 2 0\n\n-----Sample Output-----\n3\n\n-----Sample Input-----\n3\n1 2 1\n\n-----Sample Output-----\n4\n\n-----Sample Input-----\n3\n2 3 1\n\n-----Sample Output-----\n5\n\n-----Sample Input-----\n4\n1 0 1 1\n\n-----Sample Output-----\n2\n\n-----Sample Input-----\n2\n1 2\n\n-----Sample Output-----\n3\n\n-----Sample Input-----\n2\n1 2\n\n-----Sample Output-----\n1\n\n-----Sample Input-----\n1\n1\n\n-----Sample Output-----\n1\n\n-----Sample Input-----\n3\n-1 0 1\n\n-----Sample Output-----\n2\n\n-----Sample Input-----\n3\n2 1 1\n\n-----Sample Output-----\n5\n\n-----Sample Input-----\n4\n1 0 1 1\n\n-----Sample Output-----\n5\n\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solution(self, arr: List[int]) -> int:\n        arr.append(0)\n        current_max = 0\n        for i in range(len(arr) - 1):\n            current_max = max(current_max, arr[i])\n            arr[i + 1] += current_max\n        return max(arr)",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n5\") == '9'\nprint(\"PASS\")\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 5\") == \"9\"\nprint(\"Test 1 PASSED\")\n\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == '10', 'wrong result'",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 5') == '9'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\") == \"9\"\nprint(solution(\"2 5\"))\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 2\\n1 1 1 1\") == \"3\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10'\n) == '110'\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\nimport sys\n\nN, M, Q = list(map(int, sys.stdin.readline().split()))\n\nA = [0] * N\nfor _ in range(Q):\n    a, b, c, d = list(map(int, sys.stdin.readline().split()))\n    A[a - 1] += d\n    A[b - 1] -= d\n\nprint(max(A))\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == '110'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10'\n) == '110'\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 2\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\nprint('Test passed')\n\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 3\\n1 2 2 10\\n1 3 3 100\\n2 3 2 10\\n1 1 2 100\") == \"110\"\n\"\"\"\n\nn, m, q = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\n\nscores = []\n\nfor i in range(q):\n    a, b, c, d = map(int, input().split())\n    \n    l = a - 1\n    r = b - 1\n    while l < r:\n        mid = (l + r) // 2\n        if a[mid] == c:\n            l = mid\n        elif a[mid] > c:\n            r = mid\n        else:\n            l = mid + 1\n    \n    scores.append(d * (b - l))\n\nprint(max(scores))",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == 110\n\"\"\"\n\n\"\"\"\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f N \u043f\u0430\u0440 \u0447\u0438\u0441\u0435\u043b - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0434\u043b\u044f \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441. \u0417\u0430\u0442\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043e\u0442\u0432\u0435\u0442\u043e\u0432. \u041e\u0442\u0432\u0435\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 1 \u0434\u043e 1000, \u0438 \u0441\u0443\u043c\u043c\u0430 \u0432\u0441\u0435\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0442\u044c 10000. \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u043e\u043c\u0435\u0440 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430.\n\n-----Constraints-----\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:\n- \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430: N, M, Q - \u0446\u0435\u043b\u044b\u0435, \u043d\u0435\u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435, \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b;\n- \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043f\u0430\u0440\u044b \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0449\u0438\u0445 1000, \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u044b \u043e\u0434\u043d\u0438\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0430\u0440\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432.\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u043e\u0442\u0432\u0435\u0442\u044b \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c, \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 1000.\n\n-----Sample Input-----\n10 4 3\n1 2 3 5\n1 2 3 5\n1 2 3 4 6\n1 2 3 5 6\n2 3 2 5\n2 3 2 4 6\n3 3 2 3 5\n3 3 2 3 4 6\n4 4 3 3\n4 4 3 3\n\n-----Sample Output-----\n7\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 4 6 3') == '5'\nassert solution('4 3 2 6 1') == '5'\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 4 2') == '5'\nassert solution('1 4 6 3') == '5'\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 4 6 3\") == \"5\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 4 6 3\\n') == 5\n\"\"\"\nimport sys\n\nlines = [line.strip() for line in sys.stdin]\nN = int(lines[0])\nA = list(map(int, lines[1].split()))\n\nprint(max(A) - min(A))\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 4 6 3\\n') == '5'\n\"\"\"\n\nimport sys\nfrom typing import List\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\n\n-------- Tests --------\n>>> solution(\"4\\n1 4 6 3\")\n'5'\n\n>>> solution(\"4\\n1 4 6 7\")\n'2'\n\n>>> solution(\"5\\n1 4 6 7 2\")\n'1'\n\n>>> solution(\"6\\n1 4 6 7 2 10\")\n'4'\n\n>>> solution(\"7\\n1 4 6 7 2 10 3\")\n'5'\n\n>>> solution(\"8\\n1 4 6 7 2 10 3 11\")\n'6'\n\n>>> solution(\"9\\n1 4 6 7 2 10 3 11 5\")\n'7'\n\n>>> solution(\"10\\n1 4 6 7 2 10 3 11 5 6\")\n'8'\n\n>>> solution(\"11\\n1 4 6 7 2 10 3 11 5 6 7\")\n'9'\n\n>>> solution(\"12\\n1 4 6 7 2 10 3 11 5 6 7 8\")\n'10'\n\n>>> solution(\"13\\n1 4 6 7 2 10 3 11 5 6 7 8 9\")\n'11'\n\n>>> solution(\"14\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10\")\n'12'\n\n>>> solution(\"15\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11\")\n'13'\n\n>>> solution(\"16\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12\")\n'14'\n\n>>> solution(\"17\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13\")\n'15'\n\n>>> solution(\"18\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14\")\n'16'\n\n>>> solution(\"19\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15\")\n'17'\n\n>>> solution(\"20\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16\")\n'18'\n\n>>> solution(\"21\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17\")\n'19'\n\n>>> solution(\"22\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18\")\n'20'\n\n>>> solution(\"23\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\")\n'21'\n\n>>> solution(\"24\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\")\n'22'\n\n>>> solution(\"25\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\")\n'23'\n\n>>> solution(\"26\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\")\n'24'\n\n>>> solution(\"27\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\")\n'25'\n\n>>> solution(\"28\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\")\n'26'\n\n>>> solution(\"29\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\")\n'27'\n\n>>> solution(\"30\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\")\n'28'\n\n>>> solution(\"31\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\")\n'29'\n\n>>> solution(\"32\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\")\n'30'\n\n>>> solution(\"33\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\")\n'31'\n\n>>> solution(\"34\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\")\n'32'\n\n>>> solution(\"35\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\")\n'33'\n\n>>> solution(\"36\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\")\n'34'\n\n>>> solution(\"37\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\")\n'35'\n\n>>> solution(\"38\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\")\n'36'\n\n>>> solution(\"39\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\")\n'37'\n\n>>> solution(\"40\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\")\n'38'\n\n>>> solution(\"41\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\")\n'39'\n\n>>> solution(\"42\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\")\n'40'\n\n>>> solution(\"43\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\")\n'41'\n\n>>> solution(\"44\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\")\n'42'\n\n>>> solution(\"45\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41\")\n'43'\n\n>>> solution(\"46\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42\")\n'44'\n\n>>> solution(\"47\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43\")\n'45'\n\n>>> solution(\"48\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44\")\n'46'\n\n>>> solution(\"49\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\")\n'",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 4 6 3\\n\") == \"5\"\n\"\"\"\n\nimport unittest\nfrom collections import deque\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 4 6 3\\n\") == \"5\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 4 6 3\") == '5'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2\\n0 0') == '2.276142'\nassert solution('3\\n0 0\\n1 0') == '2.276142'\nassert solution('3\\n0 0\\n0 1') == '1.414213'",
        "num_ids_2": 42,
        "num_ids_4": 64
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n0 0\\n1 0\\n0 1') == '2.2761423749'\n\"\"\"\n\nimport sys\n\n\nclass Solution:\n    def solution(self, n: int, xy_list: list):\n        def dfs(x, y):\n            if x > y:\n                return\n            if x == y:\n                return 1\n            return (\n                dfs(x + 1, y)\n                + dfs(x, y - 1)\n                + 1\n            ) / 2\n\n        return sum(dfs(*xy) for xy in xy_list) / n\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.0\"\nassert solution(\"2\\n0 0\\n1 0\") == \"1.41421356237\"\n\"\"\"\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n\nimport math",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.0\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\n\n'''\n\nimport math\n\nn = int(input())\nxs = list(map(int, input().split()))\nys = list(map(int, input().split()))\ndist = [math.sqrt((xs[i]-xs[j])**2 + (ys[i]-ys[j])**2) for i in range(n) for j in range(n)]\n\nprint(sum(dist)/n)\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == '2.2761423749'\n\"\"\"\n\n\"\"\"\nhttps://www.acmicpc.net/problem/1103\n[1103] \ub3d9\uc804 0\n\uc2dc\uac04 \uc81c\ud55c    \uba54\ubaa8\ub9ac \uc81c\ud55c    \uc81c\ucd9c    \uc815\ub2f5    \ub9de\uc740 \uc0ac\ub78c    \uc815\ub2f5 \ube44\uc728\n1 \ucd08    256 MB    63789    22476    15600    30.177%\n\ubb38\uc81c\n\uc9c0\ubbfc\uc774\ub294 \uae38\uc774\uac00 64cm\uc778 \ub3d9\uc804 N\uac1c\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4. \uc5b4\ub290 \ub0a0 \uc9c0\ubbfc\uc774\ub294 \uae38\uc774\uac00 Xcm\uc778 \ub3d9\uc804\uc744 \ub354 \uac00\uc9c0\uac8c \ub418\uc5c8\ub2e4. \uc774\uc81c \uadf8\ub294 \uadf8\ub0a0 Y\uc2dc\uc5d0 \uc9d1\uc5d0 \uac04\ub2e4. \ub3d9\uc804\uc744 \uc9d1\uc5d0 \uac00\uc9c0\uac8c \ub418\uba74 \uadf8\ub294 \uac70\uc2a4\ub984\ub3c8 C\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4.\n\n\uadf8\ub0a0 \uc9d1\uc5d0 \uac04 \uc9c0\ubbfc\uc774\ub294 \uc55e\uc73c\ub85c Kcm\ub9cc\ud07c\uc758 \uac70\uc2a4\ub984\ub3c8\uc744 \uc8fc\ub294\ub370, \uc774\ub54c \uac70\uc2a4\ub984\ub3c8\uc774 \ubaa8\ub450 \uc783\ub294 \uacbd\uc6b0\ub294 \uc5c6\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4. \uc989, K \\leq C \uc77c \ub54c, \uc9c0\ubbfc\uc774\ub294 \uc9d1\uc5d0 \uac04\ub2e4.\n\n\uc9c0\ubbfc\uc774\uac00 \uc9d1\uc5d0 \uac04 \ud6c4\uc5d0 \ub3d9\uc804\uc758 \uac1c\uc218\ub294 \ucd1d \uba87 \uac1c\ub098 \ub418\ub294\uc9c0 \uad6c\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc2dc\uc624.\n\n\uc785\ub825\n\uccab\uc9f8 \uc904\uc5d0 N, X, Y, C, K\uac00 \uc21c\uc11c\ub300\ub85c \uc8fc\uc5b4\uc9c4\ub2e4. (2 \\leq N \\leq 1000000, 1 \\leq X, Y \\leq 1000000, 0 \\leq C, K \\leq 10)\n\n\ucd9c\ub825\n\uccab\uc9f8 \uc904\uc5d0 \uc9c0\ubbfc\uc774\uac00 \uc9d1\uc5d0 \uac04 \ud6c4\uc5d0 \ubc1b\uc744 \uc218 \uc788\ub294 \ub3d9\uc804\uc758 \ucd5c\ub300 \uac1c\uc218\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\n\uc608\uc81c \uc785\ub825 1\n5 16 50 120 2\n\uc608\uc81c \ucd9c\ub825 1\n4\n\uc608\uc81c \uc785\ub825 2\n10 500 1 1000 3\n\uc608\uc81c \ucd9c\ub825 2\n0\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline\n\nN, X, Y, C, K = map(int, input().split())\n\ncoin = 0\n\nwhile X * Y > C:\n    if K >= C:\n        coin += 1\n        K = K - C\n    else:\n        break\n    X -= 1\n    Y -= 1\n    \n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\\n\") == \"2.2761423749\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12 4\") == \"4\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12 4') == '4'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12 4\") == \"4\"\n\"\"\"\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12 4') == 4\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12 4') == '4'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12 4') == 4\nprint('Test passed\\n')",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12 4\") == 4\n\nYou can use any programming language you want.\nYou have only one task:\nTo do the solution in Python.\n\n---------------------------------\n\nfrom __future__ import print_function\n\nn = input().split()\nw = int(n[0])\nh = int(n[1])\n\nprint(w*h - 2*h)\n\n---------------------------------\n\nn = [int(i) for i in input().split()]\nprint((n[0]*n[1]) - (2*n[1]))\n\n---------------------------------\n\nn = int(input())\nprint((n*n) - (2*n))\n\n---------------------------------",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12 4\") == \"4\"\nprint(solution(\"12 4\"), \"4\")\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12 4\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5, 3) == 3\nassert solution(12, 4) == 4\n\"\"\"\n\nimport math",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10000') == '3'\n\"\"\"\n\n\"\"\"\nInput Format\n\nThe first and only line of the input contains a single integer N\n\nOutput Format\n\nPrint the minimum value of F(A,B) as (A,B) ranges over all pairs of positive integers such that N = A \\times B.\n\nSample Input 0\n\n10\nSample Output 0\n\n3\nExplanation 0\n\nF(A,B) has a minimum value of 3 at (A,B)=(10,10).\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10000') == '3'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10000') == '3'\n\"\"\"\n\nimport math\nimport sys\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10000') == 3, 'Wrong solution'\n\"\"\"\n\nfrom math import log10",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10000') == 3\n\"\"\"\n\nfrom typing import List, Set, Dict, Tuple, Optional, cast\n\nfrom icontract import require, ensure, DBC\n\n\nclass Solution(DBC):\n    # fmt: off\n    @require(\n        lambda n: all(c in '0123456789' for c in n),\n        \"Only numbers allowed\"\n    )\n    @require(\n        lambda n: int(n) > 0,\n        \"The number must be positive\"\n    )\n    # fmt: on\n    def __init__(self, n: int) -> None:\n        self.n = n\n\n    @require(lambda n: int(n) > 0)\n    def n(self) -> int:\n        return self.n\n\n    @require(lambda n: len(n) > 0)\n    def __len__(self) -> int:\n        return len(self.n)\n\n    @require(lambda n: len(n) > 0)\n    def __add__(self, other: int) -> 'Solution':\n        return Solution(self.n + str(other))\n\n    def __mul__(self, other: int) -> 'Solution':\n        return Solution(str(self.n) * other)\n\n    def __pow__(self, power: int, modulo=None) -> 'Solution':\n        return Solution(str(self.n) * power)\n\n    def __floordiv__(self, other: int) -> 'Solution':\n        return Solution(str(self.n) + str(other))\n\n    def __divmod__(self, other: int) -> Tuple['Solution', int]:\n        return Solution(str(self.n) + str(other)), 0\n\n    @require(lambda n: len(n) > 0)\n    def __mod__(self, other: int) -> 'Solution':\n        return Solution(str(self.n) + str(other))\n\n    def __repr__(self) -> str:\n        return f'Solution({self.n})'\n\n    @require(lambda n: len(n) > 0)\n    def __eq__(self, other: int) -> bool:\n        return self.n == other\n\n    def __ge__(self, other: int) -> bool:\n        return int(self.n) >= other\n\n    def __gt__(self, other: int) -> bool:\n        return int(self.n) > other\n\n    def __le__(self, other: int) -> bool:\n        return int(self.n) <= other\n\n    def __lt__(self, other: int) -> bool:\n        return int(self.n) < other\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10000') == 3\nprint(solution('10000'))\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100') == 3\nassert solution('10000') == 3\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10000') == 3\n\"\"\"\n\nfrom itertools import combinations\nimport math\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\") == \"5\"\n\"\"\"\n\nN, M = map(int, input().split())\n\nfoods = [0 for _ in range(M)]\nliked = [[] for _ in range(N)]\nfor i in range(N):\n    foods[i] = list(map(int, input().split()))\n    for j in range(1, M + 1):\n        liked[i].append(foods[i][j])\n\nfood_liked = set(liked[0])\nfor i in range(1, N):\n    for j in food_liked:\n        if j not in liked[i]:\n            food_liked.remove(j)\n\nprint(len(food_liked))\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(output())\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 0\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == \"1\"\nassert solution(\"1 2\\n3 4\") == \"0\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == \"1\"\nassert solution(\"5 5\\n2 1 2 3 4\\n3 1 2 3 4\\n5 1 2 3 4\") == \"6\"\nassert solution(\"10 10\\n2 1 3\\n3 1 4\\n5 1 6\\n5 1 7\\n5 1 8\\n5 1 9\\n5 1 10\\n3 10 10\\n8 2 4\\n8 2 6\\n8 1 8\\n1 8 8\\n8 8 8\\n8 7 8\\n8 8 7\\n9 9 8\\n9 9 9\\n9 7 9\\n9 8 7\\n9 8 8\\n9 9 8\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9",
        "num_ids_2": 54,
        "num_ids_4": 1645
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n2 3 2\\n2 3 3\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '3 4\\n2 1 3\\n3 1 2 3\\n2 3 2'\n) == '1'\nassert solution(\n    '4 2\\n2 1 2\\n3 1 3'\n) == '0'\n\n-----\n1 3 2\n1 2 3\n3 2\n\n2 2\n1 3\n2 1\n\n1 3 1\n1 1 3\n2 2\n1 3\n3 1\n\n3 2\n1 3\n1 2\n1 1\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == \"1\"\n\"\"\"\n\nimport itertools",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == \"1\"\nprint('PASSED')\n\n-----Solution-----\n\"\"\"\nfrom collections import Counter\nimport sys\n\nstdin = sys.stdin\n\nN, M = [int(x) for x in stdin.readline().split()]\n\nc = Counter([int(x) for x in stdin.readline().split()])\nc = c.most_common()\n\nans = []\n\nfor i in range(len(c)):\n    if len(ans) == N:\n        break\n    if c[i][1] == M:\n        ans.append(c[i][0])\n\nprint(ans)\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(4) == '0.5'",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"0.5\"\nprint(solution(\"4\"))",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"4\\n\"\n) == \"0.5\"\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '0.5'\nassert solution('15') == '0.1875'\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n\") == \"0.5\"\nprint(solution(\"4\\n\"), end=\"\")\n\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n') == '0.5'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"0.5\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n\") == \"0.5\"\n\"\"\"\n\nimport sys\nfrom typing import List, Dict\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n') == '0.5'\nassert solution('4\\n') == '0.5'\nassert solution('1\\n') == '0'\nassert solution('100\\n') == '0'\n\n\"\"\"\n\nimport sys\nimport numpy as np",
        "num_ids_2": 28,
        "num_ids_4": 52
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n\") == \"0.5\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1\\n2 1\\n2 1\\n1\\n2 1\\n1\\n1 1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n",
        "num_ids_2": 1572,
        "num_ids_4": 1572
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '2'\nassert solution('6\\n2\\n3 2\\n3 1\\n4 0\\n5 1\\n5 2\\n') == '4'\nassert solution('10\\n1\\n7 1\\n6 0\\n8 1\\n9 0\\n10 1\\n') == '5'\nassert solution('15\\n1\\n7 1\\n6 0\\n8 1\\n9 0\\n10 1\\n11 0\\n12 1\\n13 0\\n14 1\\n') == '7'\n\"\"\"",
        "num_ids_2": 68,
        "num_ids_4": 154
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == '2'\n\"\"\"\n\nimport math\nimport sys\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1\\n1 1\\n0\\n1\\n0') == '2'\nassert solution('3\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n0\\n2 0\\n0') == '2'\n\"\"\"\n",
        "num_ids_2": 88,
        "num_ids_4": 88
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\n\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0') == '2'\nassert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0') == '2'\n\"\"\"\n\nfrom collections import Counter\n\nN = int(input())\nA = list(map(int, input().split()))\nC = Counter(A)\n\nfor i in range(N):\n    if C[i] == 1:\n        print(C[i])\n        break",
        "num_ids_2": 62,
        "num_ids_4": 62
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\nprint(solution(stdin_lines))\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1\\n1 1\\n1 1\\n2 1\") == \"2\"\n\n\"\"\"\n\nfrom typing import List, Set\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0') == '2'\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == 2\nassert solution(\"4\\n2\\n2 2\\n2\\n2 2\\n2\") == 2\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\nn = int(input())\nhonest = [0] * n\n\nfor i in range(n):\n    honest[i] = int(input())\n\ncount = 0\nfor i in range(n):\n    is_honest = True\n    for j in range(i):\n        if honest[j]!= i and honest[j]!= j:\n            if honest[j] == honest[i] or honest[j] == i:\n                is_honest = False\n    if is_honest:\n        count += 1\nprint(count)\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"\n\n\"\"\"\nThe solution is implemented below:\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\nassert solution('nikoandsolsticehas') == 'nikoand...'\n\"\"\"\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\nnikoandsolstice\") == \"nikoand...\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"walrusandpoint\") == \"walrusandpoint\"\nassert solution(\"kitten\") == \"kitten\"\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 44
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nimport sys\n\nK, S = sys.stdin.readline().rstrip().split(\"\\n\")\nK, S = int(K), str(S)\n\nprint(S[:K] + \"...\" if len(S) > K else S)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('apple') == 'apples'\nassert solution('banana') == 'bananas'\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"dog\") == \"dogs\"\nassert solution(\"bear\") == \"bears\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('apple') == 'apples'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('apple') == 'apples'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"apple\")!= \"appleses\"\nassert solution(\"horse\") == \"horses\"\nassert solution(\"sea\") == \"seas\"\nassert solution(\"moon\") == \"moons\"\n",
        "num_ids_2": 24,
        "num_ids_4": 46
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == \"apples\"\n\n---Solution---\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == '1'\nprint(\"Test 1 OK\")\n\n-----------------------\n\nfrom math import ceil",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\nprint('Test passes.')\n\"\"\"\nfrom collections import Counter",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\"\n\nn_k = input().split()\nn, k = int(n_k[0]), int(n_k[1])\nsnakes = []\nfor i in range(k):\n    snakes.append(int(input()))\n\nsnakes_with_snacks = 0\nfor i in snakes:\n    if i > n:\n        snakes_with_snacks += (i - n)\n    elif i == 1:\n        snakes_with_snacks += 1\n    else:\n        snakes_with_snacks += 0\n\nprint(snakes_with_snacks)\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\"\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\"\n\nimport itertools\nimport re\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\\n\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\"\nfrom __future__ import annotations\n\nimport math\nimport sys\n\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_DATA = []\nfor line in INPUT_LINES:\n    INPUT_DATA.append(list(map(int, line.rstrip().split())))\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(aabbbbaaca) == 5\nassert solution(aabbbbaacca) == 5\nassert solution(aabbbbaacca) == 5\n\"\"\"\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aabbbbaaca\") == 5\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aabbbbaaca') == '5'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aaabbbbaaca') == '5'\nassert solution('abcde') == 'abcde'",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aabbbbaaca\") == 5\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aabbbbaaca\") == 5\n\"\"\"\n\n\nimport collections\nimport itertools\nimport math\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aabbbbaaca') == 5\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nsys.setrecursionlimit(1_000_000)\n\nn = int(sys.stdin.readline().strip())\nslimes = list(sys.stdin.readline().strip())\n\nc = Counter(slimes)\nslimes = set(slimes)\nvisited = set()",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"10\\naabbbbaaca\"\n) == \"5\"\n\nprint(solution(input()))\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aabbbbaaca\") == 5\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aabbbbaaca') == '5'\n\"\"\"\n\nfrom typing import List, Dict\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5 2 4\") == 3\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5 2 4\") == 3\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 4\\n\") == \"3\"\nassert solution(\"1 2 3\\n\") == \"1\"\n\"\"\"\nimport sys",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n5 2 4') == '3'\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n5 2 4') == '3'\nassert solution('10\\n1 1 1 1 1 1 1 1 1 1') == '10'\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\n\nans = 0\nfor i in range(n):\n    if a[i] % 2 == 0:\n        ans += a[i] // 2\n        a[i] = a[i] // 2\n    else:\n        ans += a[i] // 2\n        a[i] = a[i] // 2\n        ans += a[i] // 2\n        a[i] = a[i] // 2\n        ans += a[i] // 2\n        a[i] = a[i] // 2\nprint(ans)\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 4\") == \"3\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5 2 4\") == 3\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 1 3') == '2'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 1 3') == '2'\n\"\"\"\nfrom collections import Counter\nimport math\n\nA, B, C, K = [int(x) for x in input().split()]\n\na = [1] * A\nb = [-1] * B\nc = [0] * C",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1 1 3') == '2'\nassert solution('1 1 1 1') == '2'\nassert solution('1 1 1 1') == '2'\nassert solution('1 1 1 1') == '2'\nassert solution('1 1 1 1') == '2'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nassert solution(\"2 2 3 1\") == \"3\"\nassert solution(\"1 3 1 3\") == \"2\"\nassert solution(\"2 2 3 2\") == \"3\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a=\"1 1 1 3\", b=\"0 0 0 0\") == \"2\"\nassert solution(a=\"2 1 1 3\", b=\"0 0 0 0\") == \"2\"\nassert solution(a=\"2 1 1 3\", b=\"0 0 0 0\") == \"2\"\n\n---\n\nfor t in range(int(input())):\n    a, b, c, k = map(int, input().split())\n    print(k*(k-1)//2)\n\n---\n\nfor t in range(int(input())):\n    a, b, c, k = map(int, input().split())\n    count = [0] * k\n    for i in range(a):\n        for j in range(k):\n            if i % (j+1) == 0:\n                count[j] += 1\n    print(k * (k-1) // 2 - sum(count))\n\n---",
        "num_ids_2": 44,
        "num_ids_4": 66
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nprint(\"All test cases passed.\")",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1 1 3') == 2\nassert solution('0 1 1 1') == 2\nassert solution('1 0 1 1') == 2\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 8\\n') == 'Yes'\nassert solution('3 9\\n') == 'No'\nassert solution('8 3\\n') == 'No'\nassert solution('3 4\\n') == 'Yes'\nassert solution('1 1\\n') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 8') == 'Yes'\nassert solution('1 2') == 'No'\nassert solution('10 10') == 'No'\nassert solution('1 0') == 'Yes'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"2 2\") == \"No\"\nassert solution(\"7 7\") == \"Yes\"\n\nassert solution(\"1 1\") == \"Yes\"\nassert solution(\"2 2\") == \"No\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 2\n''') == 'Yes'\n\n'''\n3\n2\n3\n4\n'''",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"7 5\") == \"No\"\n\"\"\"\n\nX, Y = input().split()",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8\\n\") == \"Yes\"\nassert solution(\"7 8\\n\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 8\\n') == 'Yes'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 8') == 'Yes'\nassert solution('8 3') == 'No'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 8') == 'Yes'\nassert solution('5 6') == 'No'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"6 10\") == \"Yes\"\nassert solution(\"1 1\") == \"No\"\nassert solution(\"100 1\") == \"No\"\nassert solution(\"100 101\") == \"No\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 2\\n1 3\\n2 3') == 2\nassert solution('2 2\\n1 1') == 1\n\n\"\"\"\n\nclass Solution:\n    def __init__(self, graph):\n        self.graph = graph\n        self.ans = 0\n        self.visited = dict()\n        self.recurse(1, 0)\n        return\n\n    def recurse(self, cur, step):\n        if cur in self.visited:\n            self.visited[cur] = 1\n            if self.visited[cur] == self.graph.count_vertices():\n                self.ans += 1\n            return\n        else:\n            self.visited[cur] = step + 1\n            for node in self.graph.neighbours(cur):\n                self.recurse(node, step + 1)\n        return\n\n    def solve(self):\n        self.recurse(1, 0)\n        return self.ans",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\\n\") == \"2\"\n\n\"\"\"\n\n\n\"\"\"\n    :type n: int\n    :type m: int\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: int\n\"\"\"\nimport sys\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == \"2\"\nprint(solution(stdin.read()))\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 2\\n1 3\\n2 3\\n') == '2'\nassert solution('4 4\\n1 2\\n1 3\\n2 3\\n4 4\\n') == '0'\nassert solution('4 4\\n1 2\\n1 3\\n2 3\\n4 4\\n') == '0'\nassert solution('4 4\\n1 2\\n1 3\\n2 3\\n4 4\\n') == '0'\nassert solution('2 3\\n1 2\\n1 3\\n2 3\\n') == '2'\n",
        "num_ids_2": 54,
        "num_ids_4": 112
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"4\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n1 2\n1 3\n2 3\n'''.strip()) == '2'\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 3\n1 2\n1 3\n2 3\n''') == '2'\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 3\") == '2'\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nimport sys\nimport collections",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n') == '18'\nassert solution('4 4\\n') == '0'\nassert solution('3 5\\n') == '13'\n\n\"\"\"\nimport math\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n3 4 5 6\") == \"18\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n') == '18'\n\"\"\"\n\nfrom math import inf\n\nN, L = input().split(' ')\nL = int(L)\n\nflavor_list = [int(input()) for _ in range(int(N))]\n\nflavor_list.sort(reverse=True)\n\nsmallest_diff = inf\nfor i in range(int(N)-1):\n    flavor_diff = abs(flavor_list[i]-flavor_list[i+1])\n    if flavor_diff < smallest_diff:\n        smallest_diff = flavor_diff\n        target_flavor = flavor_list[i+1]\n\nprint(L+sum(flavor_list)-target_flavor)",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n') == '18'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n2 3\\n4 5\\n3 4\\n5 6\\n\") == '18'\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n') == '18'\nassert solution('5 -100\\n') == '-101'\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2\\n') == '18'\nassert solution('2 1\\n') == '3'\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2') == '18'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == \"18\"\n\n\"\"\"\n\nimport sys\nfrom typing import List",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"18\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('15\\n') == '60'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"15\") == \"60\"\n\nprint(solution(\"15\"))",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n\nprint(solution(stdin))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('15') == '60'\n\"\"\"\n\nfrom math import floor\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('15') == '60'\nassert solution('10') == '30'\n\"\"\"\nimport math",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('15') == '60'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('15') == '60'\nassert solution('1') == '1'\nassert solution('15\\n15') == '60'\nassert solution('1\\n1') == '1'\n\"\"\"\n\nfrom stdnum import fizzbuzz\nimport sys\n",
        "num_ids_2": 20,
        "num_ids_4": 46
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3) == 6\nassert solution(15) == 60",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '2'\nassert solution('1 2 3 4') == '3'\nassert solution('1 2 3 4 5') == '4'\n\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 44
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '3'\nassert solution('1 1 1 1 1 1') == '1'\nassert solution('5 4 7 10 6 5') == '8'\nassert solution('5 5 4 7 10 6 5') == '8'\n",
        "num_ids_2": 20,
        "num_ids_4": 50
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 2 3') == '2'\nassert solution('6 5\\n4 7 10 6 5') == '8'\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\n\nx, n = input().split()\nx = int(x)\nn = int(n)\nl = list(map(int, input().split()))\nnearest_to_x = float('inf')\nfor num in set(l):\n    if abs(x - num) < abs(x - nearest_to_x):\n        nearest_to_x = num\nprint(nearest_to_x)\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 7 10 6 5') == '8'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7 10 6 5\") == 8\n\"\"\"\n\nimport sys\nfrom typing import Tuple, List, Set\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 7 10 6 5\\n\") == \"8\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\nassert solution(\"4 2\\n2 1\") == \"1\"\nassert solution(\"4 4\\n2 1\") == \"0\"\nassert solution(\"3 2\\n1 3\") == \"0\"\nassert solution(\"3 2\\n1 2\") == \"0\"\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n2 1\") == \"1\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n2 1') == '1'\nassert solution('1 2\\n3 4') == '0'\n\n\"\"\"\n\nimport re\nimport functools\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 2\n2 1''') == '1'\nprint('Test passed\\n')\n\n-----\nhttps://www.codewars.com/kata/55c45be3b2079eccff00010f/train/python\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"3 2\n    2 1\"\"\"\n) == \"1\"\nprint(\"PASSED\")\n\n\"\"\"\n\u279c  python3 black_cell_remaining.py \nPASSED\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n2 1\\n') == '1'\n\"\"\"\n\n\"\"\"\nSOLUTION 2\n\n-----Input-----\nInput is given from Standard Input in the following format:\nH W\nh w\n\n-----Output-----\nPrint the number of white cells that will remain.\n\n-----Sample Input-----\n3 2\n2 1\n\n-----Sample Output-----\n2\n\nThere are 3 rows and 2 columns of cells. When two rows and one column are chosen and painted in black, there are two white cells that remain.\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n2 1') == '1'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(solutionTest.a) == solutionTest.e\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'\nassert solution('6 2\\n5 7 5 6 5') == '6'\nassert solution('6 2\\n5 7 5 6 5') == '6'\nassert solution('6 2\\n5 7 5 6 5') == '6'",
        "num_ids_2": 41,
        "num_ids_4": 77
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 4') == '6'\nassert solution('7 2') == '-1'\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4\", \"3 7 5 1 10 3 20\") == \"6\"\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5 3\n3 7 5 1 10 3 20\n''') == '6'\nassert solution('''\n7 2\n3 7 5 1 10 3 20\n''') == '-1'\nassert solution('''\n7 2\n3 7 5 1 10 3 20\n''') == '-1'\nassert solution('''\n7 1\n3 7 5 1 10 3 20\n''') == '-1'\nassert solution('''\n2 2\n3 7 5 1 10 3 20\n''') == '-1'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'\n\n\"\"\"\n\nn, k = list(map(int, input().split()))\narr = list(map(int, input().split()))\n\nfor x in range(1, 10 ** 9):\n    num = 0\n    for i in range(n):\n        if arr[i] <= x:\n            num += 1\n        if num == k:\n            print(x)\n            break\n    if num == k:\n        break\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'\nassert solution('7 2\\n3 5 4 10 2 7 1') == '4'",
        "num_ids_2": 41,
        "num_ids_4": 61
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\na = sorted(map(int, stdin.readline().split()))\nleft, right = a[0], 10 ** 9\n\nwhile left <= right:\n    middle = (left + right) // 2\n\n    if sum(1 for x in a if x <= middle) >= k:\n        right = middle - 1\n    else:\n        left = middle + 1\nprint(-1 if left == 10 ** 9 else left)\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 4\") == \"6\"\nassert solution(\"7 2\") == \"-\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-1\"\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........') == '3'\nassert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....') == '-1'\nassert solution('5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....') == '-1'\nassert solution('3 3\\n*.*\\n.*.\\n*.*') == '-1'\nassert solution('3 3\\n*.*\\n.*.\\n*.*') == '-1'\n",
        "num_ids_2": 71,
        "num_ids_4": 126
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........') == '3\\n3 4 1\\n3 5 2\\n3 5 1'\nassert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....') == '-1'\nassert solution('3 3\\n*.*\\n.*.\\n*.*') == '-1'\n",
        "num_ids_2": 86,
        "num_ids_4": 110
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\") == \"2 2 1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\") == \"3 3 1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\") == \"3 4 1\"\n",
        "num_ids_2": 70,
        "num_ids_4": 128
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....') == '3'\nassert solution('5 5\\n.*...\\n***..\\n.*...\\n.*...') == '-1'\nassert solution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........') == '3'\nassert solution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........') == '3'\nassert solution('7 7\\n....*...\\n...*...\\n..***..\\n...*...\\n....*...\\n.....*.') == '-1'\n",
        "num_ids_2": 59,
        "num_ids_4": 137
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"-1\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"-1\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"-1\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"-1\"\n",
        "num_ids_2": 85,
        "num_ids_4": 155
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n.*\\n.*\\n.*\") == \"3\"\nassert solution(\"3 3\\n.*\\n.*\\n.*\") == \"3\"\nassert solution(\"3 3\\n***\\n***\\n***\") == \"3\"\nassert solution(\"3 3\\n***\\n***\\n***\") == \"3\"\nassert solution(\"2 2\\n**\\n**\") == \"2\"\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n*.*\\n.*.\\n*.*\\n') == '3'\nassert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n') == '3'\nassert solution('5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n') == '-1'\nassert solution('3 3\\n*.*\\n.*.\\n*.*\\n') == '-1'",
        "num_ids_2": 58,
        "num_ids_4": 117
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n.*..\\n.*..\\n.*..\\n\") == '3'\nassert solution(\"3 3\\n.*..\\n.*..\\n.*..\\n\") == '-1'\nassert solution(\"3 3\\n.*..\\n.*..\\n.*..\\n\") == '-1'\nassert solution(\"3 3\\n.*..\\n.*..\\n.*..\\n\") == '-1'",
        "num_ids_2": 51,
        "num_ids_4": 103
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"6 8\\n\"\n    \"...*...\\n\"\n    \"...**...\\n\"\n    \"..*****.\\n\"\n    \"...**...\\n\"\n    \"...*...\\n\"\n    \"........\\n\"\n) == \"3\"\n\nassert solution(\n    \"5 5\\n\"\n    \".*...\\n\"\n    \"****.\\n\"\n    \".****\\n\"\n    \"..**.\\n\"\n    \".....\\n\"\n) == \"3\"\n\nassert solution(\n    \"5 5\\n\"\n    \".*...\\n\"\n    \"***..\\n\"\n    \".*...\\n\"\n    \".*...\\n\"\n    \".....\\n\"\n) == \"2\"\n\nassert solution(\n    \"5 5\\n\"\n    \".*...\\n\"\n    \"***..\\n\"\n    \".*...\\n\"\n    \"***..\\n\"\n    \".....\\n\"\n) == \"2\"\n\nassert solution(\n    \"3 3\\n\"\n    \"*.*\\n\"\n    \".*.\\n\"\n    \"*.*\\n\"\n) == \"-1\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n.*\\n.*\\n.*\\n') == '3'\nassert solution('5 5\\n.*\\n***\\n.*\\n.*\\n') == '3'\nassert solution('5 5\\n.*\\n***\\n.*\\n.*\\n') == '-1'\nassert solution('5 5\\n.*\\n****\\n.*\\n.*\\n') == '3'\nassert solution('5 5\\n.*\\n***\\n.*\\n.*\\n') == '2'\n\n\"\"\"\n",
        "num_ids_2": 47,
        "num_ids_4": 98
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"good\") == 0\nassert solution(\"string\") == 1\nassert solution(\"xyyx\") == 2\nassert solution(\"aba\") == 0\n\"\"\"\n\nn = int(input())\ns = input()\n\ngood_count = 0\nbad_count = 0\n\nfor i in range(n - 1):\n    if s[i] == s[i + 1]:\n        bad_count += 1\n    if s[i]!= s[i + 1]:\n        good_count += 1",
        "num_ids_2": 16,
        "num_ids_4": 33
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"good\") == 0\nassert solution(\"aabc\") == 2\nassert solution(\"aaa\") == 3\nassert solution(\"aaaa\") == 0\n\"\"\"\n\nn = int(input())\ns = input()\n\nresult = 0\n\nfor i in range(len(s)):\n    if i % 2 == 0:\n        if s[i]!= s[i + 1]:\n            result += 1\n\nprint(result)\n",
        "num_ids_2": 17,
        "num_ids_4": 33
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aa\") == \"ab\"\nassert solution(\"aaa\") == \"aaa\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aabc') == 2\nassert solution('aaa') == 3\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"a\") == \"a\"\nassert solution(\"aa\") == \"\"\nassert solution(\"aab\") == \"ab\"\nassert solution(\"aabb\") == \"aab\"\n\nassert solution(\"aaa\") == \"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"xyyxxy\") == 3\n\nassert solution(\"x\") == 0\n\nassert solution(\"xxyy\") == 0\n\nassert solution(\"yxx\") == 2\n\nassert solution(\"xyxxyyyxyxyxyxyxyxyxyxyx\") == 4\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 37
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('abc') == ''\nassert solution('aab') == 'a'\nassert solution('aa') == 'a'\n",
        "num_ids_2": 16,
        "num_ids_4": 35
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('good') == '0'\nassert solution('string') =='string'\nassert solution('xyyx') == 'xyxx'\nassert solution('aaaa') == 'aaa'\nassert solution('aaaaa') == 'aaaa'\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(good) == 0\nassert solution(bad) == 1\nassert solution(aa) == 1\nassert solution(aabc) == 2",
        "num_ids_2": 16,
        "num_ids_4": 33
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(good) == 0\nassert solution(string) == 2\nassert solution(xyyx) == 3\nassert solution(aa) == 1\nassert solution(aabc) == 2",
        "num_ids_2": 16,
        "num_ids_4": 33
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 3\\n2 3\\n1 2\\n1 3\\n2 2\") == \"NO\"\nassert solution(\"2 3\\n1 3\\n1 2\\n2 3\\n2 2\") == \"YES\\n101\"\nassert solution(\"2 2\\n1 2\\n2 1\") == \"NO\"\n\n\"\"\"\n",
        "num_ids_2": 61,
        "num_ids_4": 80
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\") == \"NO\"\n\nassert solution(\"4 3\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\") == \"YES\\n10100\"\n\n\n-----Hint-----\n\nTo solve this problem, you can try to do it by graph coloring. The aim is to color the vertices with the same color using the edges. You can try to color the vertices in a way that no adjacent vertices have the same color.\n\nIf such coloring exists, it is guaranteed that the graph has no paths of length at least 2. If there is no such coloring, there is no way to direct the edges.\n\"\"\"\nimport sys\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == '10100'\nassert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == '10100'\nassert solution(\"3 1\\n1 2\\n2 3\") == '001'\nassert solution(\"3 1\\n1 3\\n2 3\") == '010'\nassert solution(\"3 1\\n1 3\\n2 3\") == '110'\n",
        "num_ids_2": 64,
        "num_ids_4": 102
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n2 3\\n2 4\") == \"YES\\n101\"\n\nassert solution(\"4 3\\n1 2\\n1 3\\n2 3\") == \"NO\"\nassert solution(\"7 6\\n1 5\\n2 5\\n3 5\\n4 5\\n5 4\\n6 4\") == \"NO\"\nassert solution(\"7 7\\n1 5\\n2 5\\n3 5\\n4 5\\n5 4\\n6 4\\n7 4\") == \"NO\"\nassert solution(\"7 7\\n1 5\\n2 5\\n3 5\\n4 5\\n5 4\\n6 4\\n7 4\") == \"YES\\n1110\"\n\"\"\"\n",
        "num_ids_2": 53,
        "num_ids_4": 127
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1\\n1 2\\n1 3\\n3 1\\n1 4\\n1 5\\n4 1') == 'YES\\n1010'\nassert solution('3 3\\n2 3\\n3 2') == 'NO'\nassert solution('4 2\\n1 2\\n2 3\\n3 1') == 'YES\\n010'\n\"\"\"\n\n\nfrom typing import List\nfrom collections import Counter\n",
        "num_ids_2": 58,
        "num_ids_4": 84
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 7\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6') == 'YES\\n11010'\nassert solution('4 3\\n1 2\\n2 3\\n3 4') == 'NO'\n\n\"\"\"\n\nfrom collections import defaultdict, deque\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n\") == \"YES\\n100\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"NO\"\nassert solution(\"3 2\\n1 2\\n1 3\") == \"YES\\n101\"\nassert solution(\"4 3\\n1 2\\n2 3\\n3 4\") == \"YES\\n101010\"\nassert solution(\"5 6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == \"YES\\n10101010\"\nassert solution(\"5 3\\n1 2\\n1 3\\n2 4\\n2 5\\n4 5\") == \"YES\\n10111010\"\n",
        "num_ids_2": 41,
        "num_ids_4": 104
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''6 5\n1 5\n2 1\n1 4\n3 1\n6 1''') == 'YES\\n10100'\n\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\\n\"\n) == \"YES\\n10100\"\nassert solution(\n    \"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\\n\"\n) == \"NO\\n\"\nassert solution(\n    \"5 6\\n1 5\\n3 2\\n1 4\\n5 6\\n\"\n) == \"YES\\n101010\"\n\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n1 2\\n5 5\") == '2\\n3 4'\nassert solution(\"1 7\\n1 7\") == '0'\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\nfrom typing import List, Tuple, Set, Optional\n\nSegment = Tuple[int, int]",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"2 2\\n1 2\\n1 1\") == \"0\"\n\n'''\n",
        "num_ids_2": 42,
        "num_ids_4": 61
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\n2 2\\n1 2\\n5 5') == '2\\n3 4'\n\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"1 2\\n1 2\") == \"0\"\nassert solution(\"1 3\\n3 3\") == \"0\"\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 42,
        "num_ids_4": 72
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5\\n2 2\\n1 2\\n5 5') == '2\\n3 4'\nassert solution('1 7\\n1 7') == '0'\nassert solution('3 3\\n1 3\\n2 3') == '0'",
        "num_ids_2": 42,
        "num_ids_4": 61
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 5\n2 2\n1 2\n5 5''') == '2\\n3 4'\nassert solution('''1 7\n1 7''') == '0'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\n",
        "num_ids_2": 42,
        "num_ids_4": 57
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 9 2 3\") == 2\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 9 2 3\") == 2\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 9 2 3') == '2'\nassert solution('1 4 7 8') == '3'\nassert solution('1 2 3 4') == '0'\nassert solution('4 9 2 3') == '2'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 9 2 3') == 2\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 9 2 3') == 2\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1') == '0'\nassert solution('1 1 1 2') == '2'\nassert solution('1 1 1 3') == '0'\nassert solution('1 1 1 4') == '1'\n\"\"\"\n\nimport math\n",
        "num_ids_2": 21,
        "num_ids_4": 47
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 9 2 3') == '2'\n\"\"\"\n\nA, B, C, D = map(int, input().split())\ncount = 0\nfor i in range(A, B+1):\n    if i % C!= 0 and i % D!= 0:\n        count += 1\n\nprint(count)\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 9 2 3\") == 2\nassert solution(\"7 2 7 3\") == 0\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 9 2 3') == 2\n\"\"\"\n\na,b,c,d = map(int,input().split())\ncnt = 0\nfor i in range(a,b+1):\n    if i%c!=0 and i%d!=0:\n        cnt +=1\nprint(cnt)",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 9 2 3\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('123456789') == \"Yes\"\nassert solution('123456123456') == \"No\"\n\"\"\"\n\nimport re\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"1234567\") == \"No\"\nassert solution(\"12356789\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 38
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nIn mathematics, the digit root of a positive integer, where the digits are listed in descending order, is the\nnumber of times you can sum the digits to produce the number.\n\nFor example, if the integer is 235, then the root would be 2 + 3 + 5 = 7.\n\nGiven an integer x, find its digit root.\n\n-----Constraints-----\n - 1 \\leq x < 10^{6}\n - x is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nx\n\n-----Output-----\nPrint the integer root of x.\n\n-----Sample Input-----\n123\n\n-----Sample Output-----\n7\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\"\"\"\nimport math\nimport sys\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('12345678') == 'No'\n\"\"\"\n\nimport sys",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('123456789') == 'Yes'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(123456789) == \"Yes\"\n\n---Problem---\n\nYou are given a string S and a number N.\n\nYou have to print all the numbers in the range [0,N] that are not present in the string.\n\nInput Format\n\nThe first line of input contains the string S\n.\nThe second line of input contains the number N\n.\n\nConstraints\n\n0 < len(S) < 100\n0 <= N < 10^6\nOutput Format\n\nPrint all the numbers in the range [0,N] that are not present in the string.\n\nSample Input 0\n\n23\n2\nSample Output 0\n\n0\n1\n\n---SOLUTION---\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"89\") == \"No\"\nassert solution(\"8\") == \"No\"\nassert solution(\"81\") == \"Yes\"\nassert solution(\"85\") == \"No\"\n\n\"\"\"\nimport math",
        "num_ids_2": 23,
        "num_ids_4": 43
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"127\") == \"4\"\n\n'''\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('127') == '4'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('127') == '4'\n\"\"\"\n\nn = int(input())\nx = 0\nwhile True:\n    if n == 1:\n        break\n    x += 1\n    n = (n - 1) // 6 ** x\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\"\n\nn = int(stdin.readline().strip())",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"127\"\n) == \"4\"\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\"\n\nfrom math import log\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"127\") == \"4\"\nassert solution(\"1\") == \"1\"\n\"\"\"\n\nN = int(stdin.readline().strip())",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\"\n\nN = int(input())\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('127\\n') == '4'\n\n\"\"\"\nfrom math import log2, ceil\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'No'\nassert solution('kyoto') == 'Yes'\nassert solution('tokyo') == 'No'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('kyoto') == 'tokyo'\nassert solution('tokyo') == 'kyoto'\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"kyoto\") == \"tokyo\"\nassert solution(\"tokyo\") == \"kyoto\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"kyoto\") == \"tokyo\"\nassert solution(\"tokyo\") == \"kyoto\"\nassert solution(\"a\") == \"a\"\nassert solution(\"ab\") == \"ba\"\n",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"kyoto\") == \"tokyo\"\nassert solution(\"tokyo\") == \"kyoto\"\nassert solution(\"wmoqwam\") == \"mowqwam\"\nassert solution(\"mowqwam\") == \"wmoqwam\"\n\nimport unittest\nimport sys\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        s = \"kyoto\"\n        t = \"tokyo\"\n        self.assertEqual(solution(s), t)",
        "num_ids_2": 26,
        "num_ids_4": 62
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"KYOTO\") == \"YES\"\nassert solution(\"TOOKYO\") == \"NO\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('yes') == 'Yes'\nassert solution('no') == 'No'\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0447\u0442\u043e \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0435\u0440\u0448\u0438\u043d \u0433\u0440\u0430\u0444\u0430 \u0438\u0437 n \u0440\u0435\u0431\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0433\u0440\u0430\u0444, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 n-1 \u0432\u0435\u0440\u0448\u0438\u043d.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e n \u2013 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u0448\u0438\u043d. \u0414\u0430\u043b\u0435\u0435 \u0438\u0434\u0451\u0442 n \u2212 1 \u0441\u0442\u0440\u043e\u043a, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0445 \u0440\u0435\u0431\u0440\u0430, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438. \u041a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 \u0432\u0438\u0434: \u0441\u043b\u043e\u0432\u043e \\w\\w \u2013 \u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c\u044b\u0435 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u044b \u043e\u0434\u043d\u0438\u043c \u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432. \u0414\u043b\u0438\u043d\u0430 \u0441\u043b\u043e\u0432\u0430 \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 100 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u00abYES\u00bb, \u0435\u0441\u043b\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0433\u0440\u0430\u0444 \u0438 \u00abNO\u00bb, \u0435\u0441\u043b\u0438 \u043d\u0435\u043b\u044c\u0437\u044f.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 1\n\n\u0412\u0432\u043e\u0434    \n\n4\nkot ko ku\nkot ku ko\nko ku kot\nkot ko ku\n\n\u0412\u044b\u0432\u043e\u0434\n\nYES\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abc\") == \"cba\"\nassert solution(\"zxy\") == \"xzy\"\nassert solution(\"abcdefg\") == \"gabcdef\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 37
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"kyoto\") == \"toky\"\nassert solution(\"toKYO\") == \"toky\"\n\"\"\"\n\nS = input()\nT = input()",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"cabacc\", \"abc\") == \"1\"\n\n-------\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n100\n\n101\n\n102\n\n103\n\n104\n\n105\n\n106\n\n107\n\n108\n\n109\n\n110\n\n111\n\n112\n\n113\n\n114\n\n115\n\n116\n\n117\n\n118\n\n119\n\n120\n\n121\n\n122\n\n123\n\n124\n\n125\n\n126\n\n127\n\n128\n\n129\n\n130\n\n131\n\n132\n\n133\n\n134\n\n135\n\n136\n\n137\n\n138\n\n139\n\n140\n\n141\n\n142\n\n143\n\n144\n\n145\n\n146\n\n147\n\n148\n\n149\n\n150\n\n151\n\n152\n\n153\n\n154\n\n155\n\n156\n\n157\n\n158\n\n159\n\n160\n\n161\n\n162\n\n163\n\n164\n\n165\n\n166\n\n167\n\n168\n\n169\n\n170\n\n171\n\n172\n\n173\n\n174\n\n175\n\n176\n\n177\n\n178\n\n179\n\n180\n\n181\n\n182\n\n183\n\n184\n\n185\n\n186\n\n187\n\n188\n\n189\n\n190\n\n191\n\n192\n\n193\n\n194\n\n195\n\n196\n\n197\n\n198\n\n199\n\n200\n\n201\n\n202\n\n203\n\n204\n\n205\n\n206\n\n207\n\n208\n\n209\n\n210\n\n211\n\n212\n\n213\n\n214\n\n215\n\n216\n\n217\n\n218\n\n219\n\n220\n\n221\n\n222\n\n223\n\n224\n\n225\n\n226\n\n227\n\n228\n\n229\n\n230\n\n231\n\n232\n\n233\n\n234\n\n235\n\n236\n\n237\n\n238\n\n239\n\n240\n\n241\n\n242\n\n243\n\n244\n\n245\n\n246\n\n247\n\n248\n\n249\n\n250\n\n251\n\n252\n\n253\n\n254\n\n255\n\n256\n\n257\n\n258\n\n259\n\n260\n\n261\n\n262\n\n263\n\n264\n\n265\n\n266\n\n267\n\n268\n\n269\n\n270\n\n271\n\n272\n\n273\n\n274\n\n275\n\n276\n\n277\n\n278\n\n279\n\n280\n\n281\n\n282\n\n283\n\n284\n\n285\n\n286\n\n287\n\n288\n\n289\n\n290\n\n291\n\n292\n\n293\n\n294\n\n295\n\n296\n\n297\n\n298\n\n299\n\n300\n\n301\n\n302\n\n303\n\n304\n\n305\n\n306\n\n307\n\n308\n\n309\n\n310\n\n311\n\n312\n\n313\n\n314\n\n315\n\n316\n\n317\n\n318\n\n319\n\n320\n\n321\n\n322\n\n323\n\n324\n\n325\n\n326\n\n327\n\n328\n\n329\n\n330\n\n331\n\n332\n\n333\n\n334\n\n335\n\n336\n\n337\n\n338\n\n339\n\n340\n\n341\n\n342\n\n343\n\n344\n\n345\n\n346\n\n347\n\n348\n\n349\n\n350\n\n351\n\n352\n\n353\n\n354\n\n355\n\n356\n\n357\n\n358\n\n359\n\n360\n\n361\n\n362\n\n363\n\n364\n\n365\n\n366\n\n367\n\n368\n\n369\n\n370\n\n371\n\n372\n\n373\n\n374\n\n375\n\n376\n\n377\n\n378\n\n379\n\n380\n\n381\n\n382\n\n383\n\n384\n\n385\n\n386\n\n387\n\n388\n\n389\n\n390\n\n391\n\n392\n\n393\n\n394\n\n395\n\n396\n\n397\n\n398\n\n399\n\n400\n\n401\n\n402\n\n403\n\n404\n\n405\n\n406\n\n407\n\n408\n\n409\n\n410\n\n411\n\n412\n\n413\n\n414\n\n415\n\n416\n\n417\n\n418\n\n419\n\n420\n\n421\n\n422\n\n423\n\n424\n\n425\n\n426\n\n427\n\n428\n\n429\n\n430\n\n431\n\n432\n\n433\n\n434\n\n435\n\n436\n\n437\n\n438\n\n439\n\n440\n\n441\n\n442\n\n443\n\n444\n\n445\n\n446\n\n447\n\n448\n\n449\n\n450\n\n451\n\n452\n\n453\n\n454\n\n455\n\n456\n\n457\n\n458\n\n459\n\n460\n\n461\n\n462\n\n463\n\n464\n\n465\n\n466\n\n467\n\n468\n\n469\n\n470\n\n471\n\n472\n\n473\n\n474\n\n475\n\n476\n\n477\n\n478\n\n479\n\n480\n\n481\n\n482\n\n483\n\n484\n\n485\n\n486\n\n487\n\n488\n\n489\n\n490\n\n491\n\n492\n\n493\n\n494\n\n495\n\n496\n\n497\n\n498\n\n499\n\n500\n\n501\n\n502\n\n503\n\n504\n\n505\n\n506\n\n507\n\n508\n\n509\n\n510\n\n511\n\n512\n\n513\n\n514\n\n515\n\n516\n\n517\n\n518\n\n519\n\n520\n\n521\n\n522\n\n523\n\n524\n\n525\n\n526\n\n527\n\n528\n\n529\n\n530\n\n531\n\n532\n\n533\n\n534\n\n535\n\n536\n\n537\n\n538\n\n539\n\n540\n\n541\n\n542\n\n543\n\n544\n\n545\n\n546\n\n547\n\n548\n\n549\n\n550\n\n551\n\n552\n\n553\n\n554\n\n555\n\n556\n\n557\n\n558\n\n559\n\n560\n\n561\n\n562\n\n563\n\n564\n\n565\n\n566\n\n567\n\n568\n\n569\n\n570\n\n571\n\n572\n\n573\n\n574\n\n575\n\n576\n\n577\n\n578\n\n579\n\n580\n\n581\n\n582\n\n583\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abc\", \"cab\") == 1\nassert solution(\"abb\", \"bbb\") == 0\nassert solution(\"abacb\", \"bcacb\") == 0\nassert solution(\"abc\", \"dab\") == 1\nassert solution(\"abc\", \"bcb\") == 2\n",
        "num_ids_2": 24,
        "num_ids_4": 51
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('cabacc') == 1\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '0'\nassert solution('a') == '1'\nassert solution('ab') == '1'\nassert solution('abcd') == '3'\nassert solution('abc') == '1'\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('cabacc') == 1\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"cabacc\") == \"1\"\nassert solution(\"abc\") == \"0\"\n\"\"\"\n\nS, T = input().split()\n\ni = 0\ncount = 0\nwhile i < len(S):\n    if S[i]!= T[i]:\n        count += 1\n    i += 1\n\nprint(count)\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('cabacc') == 1\nassert solution('abc') == 0\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"cabacc\") == 1\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"abcdefghijklmnopqrstuvwxyz\"\n\"bcdefghijklmnopqrstuvwxyza\"\n) == 4\nassert solution(\n\"bcdefghijklmnopqrstuvwxyz\"\n\"bcdefghijklmnopqrstuvwxyz\"\n) == 0\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"cabacc\") == \"1\"\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 3 2\\n') == '1'\n\n-----Explanation-----\nInput: A = 6, B = 3, K = 2\nOutput: 1\n\n{1, 2, 3, 4, 6}\n{1, 2, 3, 6}\n{1, 2, 3, 4, 6}\n{1, 2, 4, 6}\n{1, 2, 6}\n{1, 6}\n{1, 2}\n\n2 is the second largest number.\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 12 2\\n') == '2'\n\"\"\"\n\nimport heapq\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 12 2\") == 2\n\"\"\"\nimport math",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 3\") == \"3\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"8 12 2\") == \"2\"\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 12 2\") == \"2\"\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 12 2\") == \"2\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 12 2\") == \"2\"\n\"\"\"\n\na, b, k = map(int, input().split())\n\nfor i in range(1, min(a, b) + 1):\n    if i % a == 0 and i % b == 0:\n        k -= 1\n        if k == 0:\n            print(i)\n            break\n    else:\n        continue\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 12 2\") == 2\n\n-------------\n\nA = 8\nB = 12\nK = 2\n\nmax_divisor = 1\n\nwhile K > max_divisor:\n    for i in range(1, A+1):\n        if A % i == 0 and B % i == 0:\n            max_divisor = i\n            break\n\nassert solution(\"8 12 2\") == 2\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 12 2\\n') == '2'\n\"\"\"\n\nfrom typing import List\nimport heapq\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 12 2\") == \"2\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1024') == '2020'\n\"\"\"\n\nfrom typing import List\n\nfrom ex01 import read_int\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n') == '8'\nassert solution('1\\n') == '5'\nassert solution('10\\n') == '20'\nassert solution('16\\n') == '40'\nassert solution('1024\\n') == '2048'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1024') == '2020'\nprint(solution('1024'))\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1024\") == \"2020\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1024\") == \"2020\"\nprint(solution(\"1024\"))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1024') == '2020'\n\"\"\"\n\nimport sys\n\ninput = int(sys.stdin.readline())\n\ntaka = 1000\nhappiness = 0\n\nfor i in range(input//500):\n    taka += 500\n    happiness += 100\n\nfor i in range(input//100):\n    taka += 100\n    happiness += 5\n\nfor i in range(input//50):\n    taka += 50\n    happiness += 10\n\nfor i in range(input//10):\n    taka += 10\n    happiness += 5\n\nfor i in range(input//5):\n    taka += 5\n    happiness += 5\n\nfor i in range(input):\n    taka += 1\n    happiness += 1\n\nprint(happiness)\n\n\"\"\"\n\u041f\u0440\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0446\u0438\u043a\u043b while \u0438 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445.\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\"\n\nimport math",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('3\\n1 2 3') == '5'\n\"\"\"\n\nimport math\n\nn = int(input())\npeople = list(map(int, input().split()))\n\nmin_stamina = 1001\n\nfor i in range(1, n):\n    tmp = people[i] - people[i - 1]\n    min_stamina = min(min_stamina, tmp * tmp)\n\nprint(math.sqrt(min_stamina))\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '4'\nassert solution('1 2 3') == '1'\nassert solution('1 2') == '0'\nassert solution('1') == '0'\n'''\n",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2\n1 4''') == '5'\nassert solution('''2\n2 2''') == '0'\nassert solution('''2\n2 2\n1 4''') == '5'\nassert solution('''2\n2 2\n2 4''') == '6'\nassert solution('''2\n2 2\n2 4\n1 4''') == '6'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n2\n1 4\n''') == '5'\nassert solution('''\n2\n1 4\n''') == '5'\nassert solution('''\n2\n3 1\n''') == '1'\nassert solution('''\n2\n2 4\n''') == '1'\nassert solution('''\n1\n1\n''') == '0'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 4\") == 5\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\nprint(\"Test 1 Passed!\")\nassert solution(\"2\\n4 1\") == \"5\"\nprint(\"Test 2 Passed!\")\nassert solution(\"1\\n1 1\") == \"0\"\nprint(\"Test 3 Passed!\")\nassert solution(\"3\\n1 1 1\") == \"1\"\nprint(\"Test 4 Passed!\")\nassert solution(\"100\\n
        "num_ids_2": 28,
        "num_ids_4": 57
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == 5\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1 4') == 5\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 10\") == \"3\"\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 10\\n') == '3'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 10') == 3\n\"\"\"\n\na, b = [int(x) for x in stdin.split()]\nprint(a // (a - b) + 1)\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 10') == 3\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 10') == '3'\nassert solution('1 5') == '0'\nassert solution('10 10') == '0'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10\") == 3\n\"\"\"\n\nimport sys",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 10\\n') == '3'\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10\\n\") == '3'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n4 10\n\"\"\"\n) == '3'",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 10\\n') == '3'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"CSS\") == \"2\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"CSS\") == 2\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"CSS\") == \"2\"\nassert solution(\"CSR\") == \"2\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"CSS\") == \"2\"\nassert solution(\"CSR\") == \"2\"\n\n---\n1. GCD of integers:\n[1,2,3,4,5,6]\n[2,3,4,5,6]\n[3,4,5,6]\n[4,5,6]\n[5,6]\n[6]\n---\n2. Given a sorted array, find the k-th smallest element in this array.\n\nA = [1,2,3,4,5]\nk = 3\nx = 2\n\nx = 2\nA[x-1] = 2, k = 3\nk = 2, x = 1\nx = 1\nA[x-1] = 1, k = 2\nk = 1, x = 0\nx = 0\nA[x] = 0, k = 1\nk = 0, x = -1\nx = -1\nA[x] = -1, k = 0\nk = 0, x = -2\nx = -2\nA[x] = -2, k = 0\nk = 0, x = -3\nx = -3\nA[x] = -3, k = 0\nk = 0, x = -4\nx = -4\nA[x] = -4, k = 0\nk = 0, x = -5\nx = -5\nA[x] = -5, k = 0\nk = 0, x = -6\nx = -6\nA[x] = -6, k = 0\nk = 0, x = -7\nx = -7\nA[x] = -7, k = 0\nk = 0, x = -8\nx = -8\nA[x] = -8, k = 0\nk = 0, x = -9\nx = -9\nA[x] = -9, k = 0\nk = 0, x = -10\nx = -10\nA[x] = -10, k = 0\nk = 0, x = -11\nx = -11\nA[x] = -11, k = 0\nk = 0, x = -12\nx = -12\nA[x] = -12, k = 0\nk = 0, x = -13\nx = -13\nA[x] = -13, k = 0\nk = 0, x = -14\nx = -14\nA[x] = -14, k = 0\nk = 0, x = -15\nx = -15\nA[x] = -15, k = 0\nk = 0, x = -16\nx = -16\nA[x] = -16, k = 0\nk = 0, x = -17\nx = -17\nA[x] = -17, k = 0\nk = 0, x = -18\nx = -18\nA[x] = -18, k = 0\nk = 0, x = -19\nx = -19\nA[x] = -19, k = 0\nk = 0, x = -20\nx = -20\nA[x] = -20, k = 0\nk = 0, x = -21\nx = -21\nA[x] = -21, k = 0\nk = 0, x = -22\nx = -22\nA[x] = -22, k = 0\nk = 0, x = -23\nx = -23\nA[x] = -23, k = 0\nk = 0, x = -24\nx = -24\nA[x] = -24, k = 0\nk = 0, x = -25\nx = -25\nA[x] = -25, k = 0\nk = 0, x = -26\nx = -26\nA[x] = -26, k = 0\nk = 0, x = -27\nx = -27\nA[x] = -27, k = 0\nk = 0, x = -28\nx = -28\nA[x] = -28, k = 0\nk = 0, x = -29\nx = -29\nA[x] = -29, k = 0\nk = 0, x = -30\nx = -30\nA[x] = -30, k = 0\nk = 0, x = -31\nx = -31\nA[x] = -31, k = 0\nk = 0, x = -32\nx = -32\nA[x] = -32, k = 0\nk = 0, x = -33\nx = -33\nA[x] = -33, k = 0\nk = 0, x = -34\nx = -34\nA[x] = -34, k = 0\nk = 0, x = -35\nx = -35\nA[x] = -35, k = 0\nk = 0, x = -36\nx = -36\nA[x] = -36, k = 0\nk = 0, x = -37\nx = -37\nA[x] = -37, k = 0\nk = 0, x = -38\nx = -38\nA[x] = -38, k = 0\nk = 0, x = -39\nx = -39\nA[x] = -39, k = 0\nk = 0, x = -40\nx = -40\nA[x] = -40, k = 0\nk = 0, x = -41\nx = -41\nA[x] = -41, k = 0\nk = 0, x = -42\nx = -42\nA[x] = -42, k = 0\nk = 0, x = -43\nx = -43\nA[x] = -43, k = 0\nk = 0, x = -44\nx = -44\nA[x] = -44, k = 0\nk = 0, x = -45\nx = -45\nA[x] = -45, k = 0\nk = 0, x = -46\nx = -46\nA[x] = -46, k = 0\nk = 0, x = -47\nx = -47\nA[x] = -47, k = 0\nk = 0, x = -48\nx = -48\nA[x] = -48, k = 0\nk = 0, x = -49\nx = -49\nA[x] = -49, k = 0\nk = 0, x = -50\nx = -50\nA[x] = -50, k = 0\nk = 0, x = -51\nx = -51\nA[x] = -51, k = 0\nk = 0, x = -52\nx = -52\nA[x] = -52, k = 0\nk = 0, x = -53\nx = -53\nA[x] = -53, k = 0\nk = 0, x = -54\nx = -54\nA[x] = -54, k = 0\nk = 0, x = -55\nx = -55\nA[x] = -55, k = 0\nk = 0, x = -56\nx = -56\nA[x] = -56, k = 0\nk = 0, x = -57\nx = -57\nA[x] = -57, k = 0\nk = 0, x = -58\nx = -58\nA[x] = -58, k = 0\nk =",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('CSS') == 2\n\"\"\"\n\nweather = input().lower()\nactual = input().lower()",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"CSS\") == 2\n\n\"\"\"\nimport sys\nimport os",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"CSS\") == \"2\"\nassert solution(\"CSR\") == \"2\"\n\"\"\"\n\n\"\"\"\nGiven a string S of length 3, the code will return the weather that it will be the day.\nThe i-th character (1 \\leq i \\leq 3) of S represents the weather on the i-th day:\n S, C, and R stand for sunny, cloudy, and rainy, respectively.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the weather that it will be the day.\n\n-----Sample Input-----\nC\n\n-----Sample Output-----\nsunny\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"CSS\") == 2\n\nimport math\nfrom itertools import groupby",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('CSS') == '2'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('CSS') == '2'\nassert solution('CSR') == '2'\n\"\"\"\n\nS = stdin.readline().strip()\nT = stdin.readline().strip()\n\nsunny_count, rainy_count = 0, 0\n\nfor i in range(3):\n    if S[i] == T[i]:\n        sunny_count += 1\n    else:\n        rainy_count += 1\n\nprint(sunny_count)\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == 2\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 3 1 2\") == 1\n\n\"\"\"\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == \"2\"\nassert solution(\"10\\n1 5 10 2 9 3 7 8 4 6\") == \"8\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 3 5 4') == '2'\nassert solution('5\\n1 3 5 4 2') == '2'\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 3 5 4 2\") == \"2\"\nassert solution(\"7 1 2 9 3 4 5 6\") == \"3\"\nassert solution(\"10 1 9 3 7 2 4 8 5 6\") == \"5\"\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 32,
        "num_ids_4": 51
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 5 4 2\") == 2\n\"\"\"\nimport sys\nimport heapq",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 3 5 4 2') == 2\n\"\"\"\n\n\"\"\"\nProblem 1\nCreate a function that takes a list and returns a new list that contains all the elements of the first list minus all the duplicates.\n\nSample input:\n\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n\nSample output:\n\n[1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\nassert solution('5\\n1 3 5 6 4') == '0'\nassert solution('5\\n1 3 2 4 5') == '2'\nassert solution('5\\n1 3 4 5 2') == '0'\nassert solution('5\\n5 4 3 2 1') == '1'\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"5.480\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.040\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.720\"\n\"\"\"",
        "num_ids_2": 132,
        "num_ids_4": 263
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n8\n-2.14 2.06\n-1.14 2.04\n-2.16 1.46\n-2.14 0.70\n-1.42 0.40\n-0.94 -0.48\n-1.42 -1.28\n-2.16 -1.62\n''') == '5.410'\n\"\"\"\n\nimport math\n\nn = int(input())\npoints = []\nfor i in range(n):\n    points.append(list(map(float, input().split())))\n\nx1 = 0\ny1 = 0\nx2 = 0\ny2 = 0\nfor i in range(n):\n    x1 += points[i][0]\n    x2 += points[i][0] * points[i][0]\n    y1 += points[i][1]\n    y2 += points[i][1] * points[i][1]\n\nx1 /= n\ny1 /= n\nx2 /= n\ny2 /= n\n\nx1 = math.sqrt(x1)\nx2 = math.sqrt(x2)\ny1 = math.sqrt(y1)\ny2 = math.sqrt(y2)\n\nd = 0\nfor i in range(n):\n    d += (points[i][0] - x1) * (points[i][1] - y1)\n    d += (points[i][0] * points[i][0] - x1 * x1) * (points[i][1] - y1)\n    d += (points[i][1] - y1) * (points[i][0] * points[i][0] - x1 * x1)\n\nd /= n\n\nd = math.sqrt(d)\n\nd1 = 0\nfor i in range(n):\n    d1 += (points[i][0] - x1) * (points[i][1] - y1)\n    d1 += (points[i][0] * points[i][0] - x1 * x1) * (points[i][1] - y1)\n    d1 += (points[i][1] - y1) * (points[i][0] * points[i][0] - x1 * x1)\n\nd1 /= n\n\nd1 = math.sqrt(d1)\n\nprint(abs((d1 - d) / d))\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62') == '5.410'\nassert solution('5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66') == '5.620'\nassert solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76') == '5.480'\nassert solution('7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04') == '6.720'\n\n\nprint(solution(stdin))\n",
        "num_ids_2": 140,
        "num_ids_4": 287
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\\n') == '5.410'\nassert solution('5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\\n') == '5.620'\nassert solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\\n') == '6.040'\nassert solution('5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\\n') == '6.720'\nassert solution('8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\\n') == '6.720'\n\n\"\"\"",
        "num_ids_2": 144,
        "num_ids_4": 279
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\\n\") == \"5.410\"\n\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\\n\") == \"5.620\"\n\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\\n\") == \"5.480\"\n\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\\n\") == \"6.040\"\n\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\\n\") == \"6.720\"\n\n\"\"\"\n\nimport re\nimport sys\n\nPATTERN = re.compile(r'(\\d*\\.\\d{2})\\s+'\n                     r'(\\d*\\.\\d{2})\\s+'\n                     r'(\\d*\\.\\d{2})')",
        "num_ids_2": 144,
        "num_ids_4": 279
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == '5.410'\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\") == '5.620'\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == '6.040'\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == '6.720'\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == '6.720'\n\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 132,
        "num_ids_4": 263
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66') == '5.620'\nassert solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76') == '5.480'\nassert solution('8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92') == '6.040'\nassert solution('7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04') == '6.720'\n'''\n\nimport sys\nimport math",
        "num_ids_2": 131,
        "num_ids_4": 278
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1) == 2.414213562373095\nassert solution(2) == 1.414213562373095\nassert solution(3) == 1.7320508075688772\nassert solution(4) == 1.7320508075688772\nassert solution(5) == 1.8829351898475647\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3.14 3.14\") == '5.910'\nassert solution(\"2.22 0.34 2.22\") == '2.220'\n\"\"\"\n\nimport sys\n\nINPUT_LINES = sys.stdin.read().splitlines()\npoint_count = int(INPUT_LINES[0])\n\npoints = [[float(x) for x in line.split(\" \")] for line in INPUT_LINES[1:]]\n\nprint(round(sum(points[i][1] for i in range(point_count)) / point_count, 3))\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == '5.410'\n\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == '5.620'\n\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == '5.480'\n\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == '6.040'\n\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == '6.720'\n\nprint(\"OK!\")\n\n\"\"\"\n\nfrom fractions import Fraction\n\nN = int(input())\npoints = [Fraction(*map(float, input().split())) for _ in range(N)]\ndelta = sum(x * y for x, y in points) / N\nprint(Fraction(*delta.as_integer_ratio()))\n",
        "num_ids_2": 140,
        "num_ids_4": 271
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"2\"",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n",
        "num_ids_2": 38,
        "num_ids_4": 74
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\n\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '-1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n\nprint('Success')\n'''\n",
        "num_ids_2": 36,
        "num_ids_4": 74
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == '4'\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\") == '1'\nassert solution(\"5 26\\n5 5 5 5 5\") == '-1'\n",
        "num_ids_2": 38,
        "num_ids_4": 75
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 10\\n5 5 5 5 5\\n') == '2'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\ni = 0\nwhile i < n:\n    if i + 1 < n and a[i] >= a[i + 1]:\n        break\n    i += 1\ni += 1\n",
        "num_ids_2": 38,
        "num_ids_4": 74
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(s) == e\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == '1 2 3'\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == '7 3 1 3'\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\") == '1 1'",
        "num_ids_2": 48,
        "num_ids_4": 77
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\n\nfrom collections import Counter\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 2 4 3 1\") == '1 2 3'\nassert solution(\"1 2 3 2 4 3 1\") == '1 2 3'\nassert solution(\"1 2 1 1 2 1 1 2 1 2 1 1 1 1\") == '1 1'\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 60
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\nassert solution(\"10 4\") == \"7 3 1 3\"\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def solve(self, stdin: List[str]) -> str:\n        pass\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\n\"\"\"\nfrom itertools import combinations\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\") == \"1 1\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 48,
        "num_ids_4": 76
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\") == \"1 1\"\n\n\n\n------\n\n\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 76
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\") == \"1 1\"\nprint('Passed')\n\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 76
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == b\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 2\n9 9\n10 8\n5 3\n4 3''') == '5'\nassert solution('''6 1\n3\n6\n2\n5\n1\n4''') == '3'\nassert solution('''6 1\n3\n6\n2\n5\n1\n4''') == '0'\nassert solution('''2 4\n1 2 3 4\n10 3 7 3''') == '0'\n\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == 5\n\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n",
        "num_ids_2": 50,
        "num_ids_4": 79
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n\n\"\"\"\n\nfrom collections import deque, Counter\n",
        "num_ids_2": 50,
        "num_ids_4": 79
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n",
        "num_ids_2": 50,
        "num_ids_4": 79
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == '5'\nassert solution('2 4\\n1 2 3 4\\n10 3 7 3') == '0'\nassert solution('6 1\\n3') == '3'",
        "num_ids_2": 50,
        "num_ids_4": 64
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == 5\nassert solution('2 4\\n1 2 3 4\\n10 3 7 3') == 0\nassert solution('6 1\\n3\\n6\\n2\\n5\\n1\\n4') == 3\n",
        "num_ids_2": 46,
        "num_ids_4": 73
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == '5'\nassert solution('2 4\\n1 2 3 4\\n10 3 7 3') == '0'\nassert solution('6 1\\n3\\n6\\n2\\n5\\n1\\n4') == '3'",
        "num_ids_2": 50,
        "num_ids_4": 79
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'''4 2\n9 9\n10 8\n5 3\n4 3''') == '5'\n\nassert solution(\n'''6 1\n3\n6\n2\n5\n1\n4''') == '3'\n\nassert solution(\n'''6 1\n3\n6\n2\n5\n1\n4''') == '0'\n\nassert solution(\n'''4 2\n9 9\n10 8\n5 3\n4 3''') == '5'\n\nassert solution(\n'''2 4\n1 2 3 4\n10 3 7 3''') == '0'",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == '5'\nassert solution('2 4\\n1 2 3 4\\n10 3 7 3') == '0'\nassert solution('6 1\\n3\\n6\\n2\\n5\\n1\\n4') == '3'\n\"\"\"\n\nimport sys\nfrom typing import List",
        "num_ids_2": 50,
        "num_ids_4": 79
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"xxxiii\") == 1\nassert solution(\"xxoxx\") == 0\nassert solution(\"xxxxxxxxxx\") == 8\n\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 28
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\nassert solution(\"xxxx\") == \"0\"\nassert solution(\"xxxx\") == \"0\"\n",
        "num_ids_2": 23,
        "num_ids_4": 44
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Exxxii\") == \"Exxxii\"\nassert solution(\"xxxxxx\") == \"xxxxxx\"\nassert solution(\"xxxxx\") == \"xxxx\"\nassert solution(\"xxx\") == \"0\"\nassert solution(\"xxxx\") == \"3\"\n",
        "num_ids_2": 26,
        "num_ids_4": 47
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"xxxiii\") == 1\nassert solution(\"xxoxx\") == 0\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"xxxiii\") == 1\nassert solution(\"xxoxx\") == 0\nassert solution(\"xxxxxxxxxx\") == 8\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 28
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"exxxii\") == \"exxi\"\nassert solution(\"xxxxixx\") == \"xixx\"\nassert solution(\"xxxxxx\") == \"xxxx\"\nassert solution(\"xxxxx\") == \"xxxx\"\nassert solution(\"xxxxxxx\") == \"xxxx\"\n",
        "num_ids_2": 27,
        "num_ids_4": 49
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\nprint('All tests passed.')\n\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 34
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('xxxiii') == '1'\nassert solution('xxoxx') == '0'\nassert solution('xxxxxxxxxx') == '8'\n\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 23,
        "num_ids_4": 34
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"xxxiii\") == 1\nassert solution(\"xxxxxxx\") == 8\nassert solution(\"xx\") == 0\n\n\n\"\"\"\n\n\"\"\"\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u0430\n6\nxxxxxxx\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u0430\n1\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u0430\n5\nxxoxx\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u0430\n0\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u0430\n10\nxxxxxxxxxx\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u0430\n8\n\"\"\"\n\n\"\"\"\n\u041a\u0430\u043a \u044d\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f: \u0412\u0430\u0448\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435 \u0438\u043c\u0435\u043d\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c:\n\n\u0418\u043c\u044f \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0443 \u0438\u0437 \u0442\u0440\u0435\u0445 \u0431\u0443\u043a\u0432 x, y \u0438\u043b\u0438 z;\n\u0418\u043c\u044f \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043d\u0430\u0447\u0438\u043d\u0430\u0442\u044c\u0441\u044f \u0441 \u0431\u0443\u043a\u0432\u044b y;\n\u0418\u043c\u044f \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043c\u0435\u043d\u0435\u0435 \u0447\u0435\u0442\u044b\u0440\u0435\u0445 \u0431\u0443\u043a\u0432;\n\u0418\u043c\u044f \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 xxx, \u0433\u0434\u0435 \u043a\u0430\u0436\u0434\u0430\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0431\u0443\u043a\u0432\u0430 \u0440\u0430\u0432\u043d\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439;\n\u0418\u043c\u044f \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 xxx, \u0433\u0434\u0435 \u043a\u0430\u0436\u0434\u0430\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0431\u0443\u043a\u0432\u0430 \u0440\u0430\u0432\u043d\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439;\n\u0418\u043c\u044f \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u043b\u043e\u0432\u043e xxx, \u0433\u0434\u0435 \u043a\u0430\u0436\u0434\u0430\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0431\u0443\u043a\u0432\u0430 \u0440\u0430\u0432\u043d\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 1:\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n5\nxxxx\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n1\n\n\u041f\u0440\u0438\u043c\u0435\u0440 2:\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n6\nxxxyyy\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n0\n\n\u041f\u0440\u0438\u043c\u0435\u0440 3:\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n8\nxxyyzz\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n0\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 26
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('xxxxxxxxxx') == '0'\nassert solution('xxoxxxxxx') == '0'\nassert solution('xxxiiii') == '1'\nassert solution('xxxxiiii') == '1'\nassert solution('xxxxxiiix') == '1'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('42') == '42'\nassert solution('100') == '100'\n\"\"\"\n\nimport math",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n\") == 48\n\"\"\"\n\nr = int(input())\ns = 3 * r ** 2\nprint(s)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == 48\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"48\"\nprint(\"Passed\")\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n\") == '48'\n\"\"\"\n\nfrom math import pi",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"48\"\nprint(\"All tests passed.\")\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n') == '48'\n\"\"\"\n\n\"\"\"\nGiven an integer r, find the area of a regular dodecagon inscribed in a circle of radius r.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - r is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n\n-----Output-----\nPrint an integer representing the area of the regular dodecagon.\n\n-----Sample Input-----\n4\n\n-----Sample Output-----\n48\n\nThe area of the regular dodecagon is 3 \\times 4^2 = 48.\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"48\"\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n\") == \"48\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == '48'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5') == 'unsafe'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\nprint(solution(\"4 5\"), \"unsafe\")\n\nassert solution(\"1 1\") == \"safe\"\nprint(solution(\"1 1\"), \"safe\")\n\nassert solution(\"100 101\") == \"safe\"\nprint(solution(\"100 101\"), \"safe\")\n\nassert solution(\"10 11\") == \"unsafe\"\nprint(solution(\"10 11\"), \"unsafe\")\n\nassert solution(\"100 100\") == \"unsafe\"\nprint(solution(\"100 100\"), \"unsafe\")",
        "num_ids_2": 23,
        "num_ids_4": 46
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n\") == \"unsafe\"\n\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5') == 'unsafe'\nassert solution('10 3') =='safe'\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(4, 5) == 'unsafe'\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n\") == \"unsafe\"\nassert solution(\"6 5\\n\") == \"unsafe\"\nassert solution(\"4 6\\n\") == \"safe\"\n\"\"\"\n\nS, W = map(int, input().split())",
        "num_ids_2": 28,
        "num_ids_4": 41
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'unsafe'\nassert solution('4 5') == 'unsafe'\nassert solution('100 100') =='safe'\nassert solution('10 10') =='safe'\nassert solution('100 500') =='safe'\n",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5') == 'unsafe'\nassert solution('10 5') =='safe'\nassert solution('15 3') == 'unsafe'\nassert solution('9 4') =='safe'\n\n\"\"\"\n\nS, W = input().split(' ')\nS = int(S)\nW = int(W)",
        "num_ids_2": 23,
        "num_ids_4": 46
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5') == 'unsafe'\nassert solution('2 3') =='safe'\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\">=\") == \"unsafe\"\nassert solution(\"<=\") == \"safe\"\nassert solution(\"<\") == \"safe\"\nassert solution(\">\") == \"unsafe\"\nassert solution(\"<=\") == \"safe\"\n",
        "num_ids_2": 23,
        "num_ids_4": 44
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 5') == '6'\n\"\"\"\n\nimport math\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == 6\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4 5') == '6'\nassert solution('1 1 1') == '0'\nassert solution('5 5 3') == '8'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nassert solution(\"5 5 4\") == \"10\"\nassert solution(\"4 6 7\") == \"16\"\nassert solution(\"15 3 4\") == \"0\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nprint(\"test passed\")\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 5') == '6'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 11 4') == '4'\n\"\"\"\n\nA, B, C = input().split()\nA = int(A)\nB = int(B)\nC = int(C)\nprint(A // (C - B) + 1 if A > B else 0)",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 11 4\") == \"4\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"0 1 0\") == \"0\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 11 4\\n\") == \"4\"\n\"\"\"\n\nA, B, C = map(int, input().split())",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 11 4\\n\") == \"4\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\n\nA, B, C = [int(x) for x in stdin.split(\" \")]\n\ns = 0\nfor i in range(B):\n    if A <= s + C:\n        print(i + 1)\n        break\n    s += A\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 11 4\") == \"4\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 11 4') == '4'\nassert solution('3 20 6') == '2'\nassert solution('11 18 3') == '0'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 11 4') == '4'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n\na,b = map(int, input().split())\nprint(a*b)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\") == \"10\"\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n\nimport sys\n\nA, B = map(int, sys.stdin.readline().strip().split())\n\nprint(A * B)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5') == 10\nprint(solution(stdin.readlines()))\n'''\nimport sys",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\") == 10\n\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 5') == '10'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == 10\n\"\"\"\n\nA, B = map(int, input().split())\n\nprint(A*B)\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 5') == '10'\n\n\"\"\"\n\nfrom __future__ import print_function",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 5') == '10'",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nimport sys\nimport os\nimport math",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5 7') == '10'\nprint(solution(stdin))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5 7') == 10\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5 7') == '10'\n\"\"\"\n\nimport os\nimport sys\nfrom collections import deque\n\nsys.path.append(os.path.join(os.path.dirname(__file__), \"..\"))\nfrom int_code_computer import IntCodeComputer\n\nstdin = list(map(int, input().split()))\n\nmax_value = 30000\n\ndiffs = [x for x in range(max_value) if x % 2 == 0]\n\nq = deque()\nq.append(0)\n\ncomputer = IntCodeComputer(stdin)\ncomputer.inputs.append(0)\nwhile not computer.finished:\n    while computer.execute_next_instruction():\n        pass\n    if computer.outputs:\n        q.append(computer.outputs[-1])\n    if len(q) >= 2:\n        value = q.popleft()\n        second_value = q.popleft()\n        if value in diffs and second_value in diffs:\n            print(value * second_value)\n            break\n        q.append(value)\n        q.append(second_value)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n3 5 7\n''') == '10'\n\n\"\"\"",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 7') == 10\n\"\"\"\n\nfrom sys import stdin, stdout\n\nA, B, T = [int(x) for x in stdin.readline().split(' ')]\n\nstdout.write(str(A * B + B))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 7\") == 10\n\"\"\"\n\nA, B, T = map(int, stdin.readline().split())\nT += 0.5\nresult = A * (T // A) - (T // A) * B\nprint(result)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5 7\\n') == 10\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n500 600\") == \"OK\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 500 600') == \"OK\"\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 500 600\") == \"OK\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('K A B\\n') == 'OK'\nassert solution('A B K\\n') == 'NG'\nassert solution('K B A\\n') == 'NG'\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('567\\n500 600') == 'OK'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"567 89\") == \"OK\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(a) == \"OK\" or \"NG\"\n\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == output()\n\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 500 600') == 'OK'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 500 600\") == \"OK\"\nassert solution(\"1 1\") == \"OK\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 3\\n\") == \"2.6666666667\"\n\"\"\"\n\nT, X = [int(n) for n in input().split()]\nprint(\"{0:.3f}\".format(T/X))\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 3\\n') == '2.6666666667'\n\n\"\"\"\n\nimport math\n\nT, X = map(int, stdin.readline().split())\n\nprint(str(round(T/X, 3)))\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\"\"\"\n\nT, X = map(int, input().split())\n\nprint(\"{0:.3f}\".format(T/X))\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3\") == \"2.6666...\"\n\n---Problem---\nTaro is at World B, but he does not know that his timezone is wrong and he has fallen asleep.\nThere is a universal clock on the World B building, but Taro does not know its timezone.\nIt is too late to use the Universal clock.\nTherefore, he needs to take a clock at World A and calculate its timezone.\nYou are given the number of hours Taro is in World B and the number of hours he needs to observe in World A.\nYou should calculate the number of hours Taro spends in World A.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq T \\leq 100\n - 1 \\leq X \\leq 100\n\n-----Input-----\nInput is given from Standard Input in the following format:\nT X\n\n-----Output-----\nPrint the number of hours that Taro spends in World A.\nThe output will be regarded as correct when its absolute or relative error from the judge's output is at most 10^{-3}.\n\n-----Sample Input-----\n1 1\n\n-----Sample Output-----\n0\n\nTaro has spent exactly one hour in World A.\n'''\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3') == '2.6666666667'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3\\n\") == \"2.666667\"\nprint(solution(\"8 3\\n\"), end=\"\")\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3\\n') == '2.6666666667'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3\\n') == '2.6666666667'\nassert solution('8 7\\n') == '1.1428571429'\n\"\"\"\n\nt, x = input().split()\n\nt = int(t)\nx = int(x)\n\nprint(t / (x - 1))\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\n---\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n\na, b, c = map(int, input().split())\nprint(min(c, b, a))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n\nA, B, C = map(int, input().split())\n\ncan_be_filled = min(A, B + C - 1)\n\nprint(can_be_filled - B)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n\na, b, c = map(int, stdin().strip().split())\nprint(max(0, c-b))",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 4 3\") == \"1\"\nprint(\"Test succeeded.\")\n\n\"\"\"\n\n\"\"\"\nAn array of integers is given. We want to determine the maximum sum of elements that are not adjacent elements (adjacent elements are elements that are next to each other).\n\nWe can shift the array.\n\nFor example, if we have [1, 2, 3, 4, 5, 1, 2], then we can shift it as follows: [5, 1, 2, 3, 4, 1, 2]. Now the array is [5, 1, 2, 3, 4, 1, 2] and the adjacent pairs are [1, 2], [3, 4], [1, 2], which gives us a maximum sum of 8 (1 + 2 + 3 + 4).\n\nWrite a function:",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '0'\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 3 2\n3 1 2\n''') == '3'\n\"\"\"\n\nfrom collections import deque, defaultdict\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n\n    def addEdge(self, u, v):\n        self.graph[u].append(v)\n\n    def DFSUtil(self, v, visited):\n        visited[v] = True\n        print(v, end=' ')\n        for i in self.graph[v]:\n            if visited[i] == False:\n                self.DFSUtil(i, visited)\n\n    def fillOrder(self, v, visited, stack):\n        visited[v] = True\n        for i in self.graph[v]:\n            if visited[i] == False:\n                self.fillOrder(i, visited, stack)\n        stack = stack.append(v)\n\n    def getTranspose(self):\n        g = Graph(self.V)\n\n        for i in self.graph:\n            for j in self.graph[i]:\n                g.addEdge(j, i)\n        return g\n\n    def printSCCs(self):\n\n        stack = deque()\n        visited = [False] * self.V\n        for i in range(self.V):\n            if visited[i] == False:\n                self.fillOrder(i, visited, stack)\n        gr = self.getTranspose()\n\n        visited = [False] * self.V\n        while stack:\n            i = stack.pop()\n            if visited[i] == False:\n                gr.DFSUtil(i, visited)\n                print(\"\")",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 3 2\") == \"3\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\nassert solution(\"2\\n3 1 2\") == \"1\"\n",
        "num_ids_2": 33,
        "num_ids_4": 48
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 3 2 4\\n3 1 4 2') == '3'\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 2\") == \"3\"\nassert solution(\"4\\n1 4 2 3\") == \"1\"\nassert solution(\"5\\n1 5 4 2 3\") == \"3\"\nassert solution(\"6\\n1 6 5 2 4 3\") == \"2\"\nassert solution(\"7\\n1 7 6 5 4 3 2\") == \"5\"\n",
        "num_ids_2": 31,
        "num_ids_4": 66
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 3 2\") == \"3\"\nassert solution(\"2\\n1 3 2\") == \"1\"\n\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(s) == result\nprint(\"Successfully solved.\")\n\"\"\"\n\n\"\"\"\n(1,~2,~3), (1,~3,~2), (2,~1,~3), (2,~3,~1), (3,~1,~2), and (3,~2,~1) come 2-nd and 5-th in lexicographical order, so the answer is |2 - 5| = 3.\n\"\"\"\n\nN = int(input())\nP = input().split()\nQ = input().split()\n\nans = 0\nfor i in range(N):\n    if P[i]!= Q[i]:\n        ans += 1\nprint(abs(ans))\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 2 4\\n3 1 2 4\") == \"3\"\n\nimport sys\n\nassert solution(sys.stdin.read()) == sys.stdin.read()",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 3 2\\n3 1 2') == '3'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 3 2\") == \"3\"\nassert solution(\"4\\n1 2 3 4\") == \"3\"\n\"\"\"\nimport sys",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ATCODER\") == 3\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ATCODER') == 'ATC'\n\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ATCODER') == 'ATC'\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ATCODER\") == 3\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ATCODER') == 'ATC'",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(A) == 'AT'\n\"\"\"\n\nstdin = input().strip()\n\nmin_length = 100\nmax_length = 0\n\nfor char in stdin:\n    if char == \"A\":\n        min_length = min(min_length, max_length)\n        max_length += 1\n    elif char == \"C\":\n        max_length = max(max_length, min_length)\n        min_length += 1\n    elif char == \"G\":\n        min_length = min(min_length, max_length)\n        max_length += 1\n    else:\n        min_length = min(min_length, max_length)\n        max_length = 0\n\nmin_length = min(min_length, max_length)\nprint(min_length)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ATCODER\") == \"ATC\"\nprint(\"PASS\" + \" \" + str(solution(\"ATCODER\")))\n\nassert solution(\"ATC\") == \"ATC\"\nprint(\"PASS\" + \" \" + str(solution(\"ATC\")))\n\nassert solution(\"AC\") == \"AC\"\nprint(\"PASS\" + \" \" + str(solution(\"AC\")))\n\nassert solution(\"CA\") == \"CA\"\nprint(\"PASS\" + \" \" + str(solution(\"CA\")))\n\nassert solution(\"TC\") == \"TC\"\nprint(\"PASS\" + \" \" + str(solution(\"TC\")))",
        "num_ids_2": 26,
        "num_ids_4": 46
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ATCODER') == 3\nprint(solution('ATCODER'))",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ATCODER') == 3\nassert solution('ATC') == 3\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ATCODER') == 'ATC'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11') == '9'\nassert solution('1') == '1'\nassert solution('100') == '9'\nassert solution('101') == '8'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11') == '9'\nassert solution('1') == '0'\nassert solution('15') == '6'\n\nprint(solution(stdin.readline()))\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == '9'\n\"\"\"\n\nimport math\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(11) == '9'\nprint(solution(stdin))\n\n\"\"\"\n\n\"\"\"\n>>> print(solution(11))\n9\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11') == 9\n'''\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11\") == \"9\"\nassert solution(\"1\") == \"1\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11') == '9'\n\"\"\"\n\nimport math",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\") == \"9\"\nassert solution(\"10\") == \"4\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11') == '9'\nprint('Test passes')\n\n---\n\nGiven is an integer N. Find the number of positive integers less than or equal to N that have an odd number of digits (in base ten without leading zeros).\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the number of positive integers less than or equal to N that have an odd number of digits.\n\n-----Sample Input-----\n11\n\n-----Sample Output-----\n9\n\nAmong the positive integers less than or equal to 11, nine integers have an odd number of digits: 1, 2, \\ldots, 9.",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\") == 9\n\"\"\"\n\n\"\"\"\nYou are given an integer N. Find the number of positive integers less than or equal to N that have an odd number of digits (in base 10 without leading zeros).\n\nNote: You are only allowed to use the following operators:\n+, -, *, /, %, ^\n\n---Example---\nN = 10\n\noutput: 2\n\nThe integers that meet this criteria are: 1, 3, 5, 7, 9\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('cupofcoffee') == 'hottea'\nassert solution('hired') == 'id'\nassert solution('dent') == 'enT'\nassert solution('tsuruyaki') == 'truyuaki'",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"cupofcoffee\") == 4\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == result\nprint(solution(stdin))\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"cupofcoffee\") == 4\n\"\"\"\n\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cupofcoffee\") == 4\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('cupofcoffee') == 'cupofhottea'\n\nsolution('cupofcoffee')\n\n-----\nUsing string's index() method to find the position of the character.\n'''",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == solution_reference\n\n----Solution (Top Voted), O(N) Space and Time----\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('cupofcoffee') == 4\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\nprint(solution(\"3 7\"))\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\"\n\nfrom math import floor, ceil",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\"\n\nimport sys\n\nK, X = map(int, sys.stdin.readline().strip().split())",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 7\\n\") == \"5 6 7 8 9\"\n\"\"\"\n\nK, X = input().split()\nK, X = int(K), int(X)",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 7') == '5 6 7 8 9'\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('25') == 'No'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"31\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('25') == 'No'\nassert solution('30') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('30') == 'No'\nassert solution('25') == 'Yes'\n\"\"\"\n\nx = int(input())",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"15\") == \"No\"\nassert solution(\"35\") == \"Yes\"\nassert solution(\"0\") == \"No\"\nassert solution(\"-5\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(20)) == \"No\"\nassert solution(str(30)) == \"Yes\"\nassert solution(str(25)) == \"No\"\n\nprint('PASSED')\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('25') == 'No'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"30\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"25\") == \"No\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('25') == 'No'\nassert solution('30') == 'Yes'\nassert solution('-10') == 'No'\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 31
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 2\n1 2\n5 5\n-2 8''') == '1'\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\n-----\n\"\"\"\nimport sys\n\nimport numpy as np",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\n-------------\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 2\n1 2\n5 5\n-2 8''') == '1'\nassert solution('''1 1\n1 1''') == '0'\nassert solution('''1 1\n2 2\n-1 -1''') == '0'\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u0447\u0438\u0441\u043b\u043e\u043c nn, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0437\u0430\u0434\u0430\u0451\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u0442\u044c.\n\u0414\u0430\u043b\u0435\u0435 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 nn \u0441\u0442\u0440\u043e\u043a \u0441 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 x_i, \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u0418\u0442\u043e\u0433\u043e \u0431\u0443\u0434\u0435\u0442 n+1n+1 \u0441\u0442\u0440\u043e\u043a.\n\u041f\u0440\u0438 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u043d\u0438\u0438 \u0447\u0438\u0441\u043b\u0430 x_i \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 f(x_i).\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f f(x) \u0443\u0436\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430.\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0434\u043e\u043b\u0433\u043e \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 xx.\n\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0443\u043b\u043e\u0436\u0438\u0442\u044c\u0441\u044f \u0432 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043d\u0443\u0436\u043d\u043e \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.\n\nSample Input 1:\n5\n5\n12\n9\n20\n12\n\nSample Output 1:\n11\n41\n47\n61\n41\n\nSample Input 2:\n1\n1\n\nSample Output 2:\n1\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n1 2\\n5 5\\n-2 8') == '1'\nprint(solution(input()))",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n3 2\n1 2\n5 5\n-2 8\n''') == '1'\n\n-----------------------------------------\nsolution:\nimport math",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\"\"\"\n\n\"\"\"\nimport math\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\\n\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n1 2\\n5 5\\n-2 8') == '1'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3776\") == \"Good\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1111) == \"Bad\"\nassert solution(2234) == \"Good\"\nassert solution(1234) == \"Bad\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3776') == 'Bad'\nassert solution('1234') == 'Good'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"2345\") == \"Bad\"\nassert solution(\"54321\") == \"Bad\"\nassert solution(\"1256\") == \"Good\"\n\n------Problem------\nHard is the abbreviation of \"hard to enter.\" Write a program that prompts the user to enter a 4-digit number, and then prints Bad if the security code is hard to enter.\n\n-----Solution------\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"12aa\") == \"Bad\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1234') == 'Good'\nassert solution('1233') == 'Bad'\nassert solution('3344') == 'Bad'\nassert solution('1111') == 'Bad'\nassert solution('1212') == 'Bad'\n",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12345') == 'Good'\nassert solution('13245') == 'Bad'\nassert solution('1234') == 'Good'\nassert solution('1134') == 'Bad'\nassert solution('1234') == 'Good'\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1122\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"1256\") == \"Bad\"\nassert solution(\"1515\") == \"Bad\"\nassert solution(\"1221\") == \"Good\"\n\n\"\"\"\nimport unittest\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3776') == \"Good\"\nassert solution('1234') == \"Bad\"\nassert solution('1256') == \"Good\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3776) == 'Bad'\n\nassert solution(3776) == 'Bad'\n\nassert solution(1234) == 'Bad'\n\nassert solution(1235) == 'Good'\n\nassert solution(9876) == 'Bad'",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\nassert solution(\"3\\n1 2 3\") == \"2.66667\"\nassert solution(\"3\\n2 3 4\") == \"3.5\"\nassert solution(\"4\\n1 2 3 4\") == \"3.25\"\nassert solution(\"2\\n3\") == \"3.5\"\n",
        "num_ids_2": 34,
        "num_ids_4": 69
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4') == '3.5'\n\"\"\"\n\nimport math\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n5 6\") == \"3.5\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\nassert solution(\"2\\n3 4\") == \"3.5\"\nassert solution(\"2\\n3 4\") == \"3.5\"\nassert solution(\"2\\n3 4\") == \"3.5\"\n\nassert solution(\"2\\n3 4\") == \"3.5\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 2\") == \"2.5\"\nassert solution(\"2 3\\n1 2\\n3 4\") == \"3.5\"\nassert solution(\"2 3\\n1 2\\n3 4\\n5 6\") == \"4.0\"\n\"\"\"\n\nn = int(input())\nd = list(map(int, input().split()))\n\nresult = 0\nwhile len(d) > 1:\n    t = (d[0] + d[1]) / 2\n    result = t\n    d = [t] + d[2:]\n\nprint(result)\n",
        "num_ids_2": 38,
        "num_ids_4": 63
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 4\") == \"3.5\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '0'\nassert solution('1\\n0') == '0'\nassert solution('2\\n3 4') == '3.5'\n'''\n",
        "num_ids_2": 23,
        "num_ids_4": 39
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n3 4') == '3.5'\nassert solution('3\\n1 2 3') == '2.5'\nassert solution('1\\n1') == '1.0'\nassert solution('4\\n4 4 4 4') == '4.0'\nassert solution('1\\n9') == '9.0'\n",
        "num_ids_2": 33,
        "num_ids_4": 66
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\") == 14\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2\n2 5\n3 6''') == '14'\n\nassert solution('''3\n3 1 2\n2 5 4\n3 6''') == '14'\n\nassert solution('''3\n1 3\n2 5\n3 6''') == '15'\n\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\\n\") == '14'\nprint(solution(\"3\\n1 2\\n2 5 4\\n3 6\\n\"))\n\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\\n\") == 14\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2\\n2 5 4\\n3 6\\n') == '14'\nassert solution('3 1 1\\n2 5 4\\n3 6\\n') == '14'\nassert solution('3\\n3\\n3\\n') == '0'\n",
        "num_ids_2": 46,
        "num_ids_4": 64
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3\n1 2\n2 5\n3 6\"\"\") == \"14\"\nassert solution(\"\"\"3\n3 1 2\"\"\") == \"14\"\n\n\"\"\"\n[\uc81c\uc57d\uc0ac\ud56d]\n\n[\uc785\ub825]\n\uc785\ub825\uc740 T \uac1c\uc758 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uc73c\uba70, \uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub294 \ud55c \uc904\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uc73c\uba70, \uac01 \uc904\uc740 N \uacfc A_1, A_2,..., A_N, B_1, B_2,..., B_N, C_1, C_2,..., C_{N-1}\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\ub2e4.\n\n\uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub294 \uc22b\uc790 N\uc744 \ud3ec\ud568\ud558\uba70, \uac01 \uc904\uc758 \ub2e4\uc74c\uc5d0 \uc22b\uc790 N\uac1c\uac00 \uc8fc\uc5b4\uc9c4\ub2e4.\n\uac01 \uc22b\uc790\ub294 1 \uc774\uc0c1 50 \uc774\ud558\uc774\ub2e4.\n\n[\ucd9c\ub825]\n\uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub9c8\ub2e4, \ud14c\uc2a4\ud2b8\uc5d0 \ub300\ud55c \ub2f5\uc744 \ucd9c\ub825\ud55c\ub2e4.\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == \"14\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2\\n2 5 4') == '14'\nassert solution('3\\n3 6\\n') == '0'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\nb = list(map(int, stdin.readline().split()))\nc = list(map(int, stdin.readline().split()))\n\ns = 0\nfor i in range(n - 1):\n    s += a[i] * b[i] + c[i]\nprint(s)\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\") == \"14\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\\n5 6 7 8\") == \"15\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_data_1) == test_result_1\n\"\"\"\n\nfrom collections import Counter\n\nN = input()\nS = input()\n\nA = \"ABC\"\ncount = 0\n\nfor i in range(len(S) - 2):\n    c = S[i:i+3]\n    if c == A:\n        count += 1\nprint(count)",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ZABCDBABCQ\") == 2\nassert solution(\"BCABA\") == 4\n\"\"\"\n\nimport os\nimport sys\nimport math",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ZABCDBABCQ\") == 2\n\"\"\"\n\nn = input()\ns = input()\n\nprint(s.count('ABC'))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ZABCDBABCQ\") == 2\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABCDBABCQ\") == \"2\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABCABCABC\") == 2\nassert solution(\"ABCABCABCABCABCABC\") == 6\nassert solution(\"ABCABACBAC\") == 2\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 35
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''10\nZABCDBABCQ''') == '2'\n\"\"\"\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('KAD') == 'A'\nassert solution('ABCDA') == '1'\nassert solution('ABCDAB') == '2'\nassert solution('ABCDABC') == '2'\n",
        "num_ids_2": 19,
        "num_ids_4": 42
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '10\\n'\n    'ZABCDBABCQ'\n) == '2'\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ZABCDBABCQ') == 2\n\"\"\"\nfrom collections import Counter",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == '2'\n'''",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI''') == '2'\n\n\"\"\"\n\nN = int(stdin.readline())",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == '2'\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == 2\n\"\"\"\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == '2'\nprint('Test pass.')\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"2 1\") == \"No\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"Yes\"\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"1 1\") == \"Yes\"\nassert solution(\"3 2\") == \"No\"\nassert solution(\"1 0\") == \"No\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 3\n1 2\n2 3\n3 1''') == 'Yes'\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3, 3) == 'Yes'\n\n-----Explanation-----\nTakahashi has 3 test cases, all of which have been passed.\n\"\"\"\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3') == 'Yes'\nassert solution('5 6') == 'No'\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"Yes\"\n\n\"\"\"\n\nimport unittest",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"10 5\") == \"No\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"Yes\"\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 2 3') == 'Yes'\nassert solution('3 3\\n1 2 1') == 'Yes'\nassert solution('3 3\\n3 1 2') == 'No'\nassert solution('1 1\\n1') == 'Yes'\nassert solution('4 2\\n1 1 2 2') == 'No'\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 62
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('sippuu') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"siopoo\") == \"No\"\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('aabbcc') == 'No'\nassert solution('aabbccddd') == 'No'\nassert solution('abc') == 'No'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"sippuu\") == \"Yes\"\nassert solution(\"sippuu\") == \"Yes\"\nassert solution(\"sippuu\") == \"Yes\"\nassert solution(\"sippuu\") == \"Yes\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('sippuu') == 'Yes'\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"abcdd\") == \"No\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('sippuu') == 'Yes'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('sippuu') == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aabbbc\") == \"No\"\nassert solution(\"aabbcc\") == \"Yes\"\nassert solution(\"aabbdd\") == \"No\"\nassert solution(\"aabbde\") == \"Yes\"\nassert solution(\"aabbdf\") == \"No\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('sipp') == 'No'\n\"\"\"\n\nimport unittest\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50') == '4'\n\"\"\"\n\nN, T = [int(x) for x in input().split()]\n\nd = []\nfor _ in range(N):\n    c, t = [int(x) for x in input().split()]\n    d.append((c, t))\n\ndp = [0] * (T + 1)\n\nfor i in range(N):\n    cost, time = d[i]\n    for j in range(T, time - 1, -1):\n        dp[j] = max(dp[j], dp[j - time] + cost)\n\nans = max(dp)",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == '4'\n\"\"\"\n\nimport sys\nimport heapq\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50\\n') == '4'\nassert solution('1 1000\\n1 1000') == 'TLE'\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\\n\") == \"4\"\nassert solution(\"3 100\\n7 60\\n1 80\\n4 50\\n\") == \"TLE\"\n\"\"\"\n\nfrom math import inf\nfrom typing import List\nfrom unittest import main, TestCase\n\n\nclass Solution:\n    \"\"\"\n    The solution will be to\n    1. Calculate the cost of each route\n    2. Find the route with the minimum cost\n    \"\"\"\n    def minimum_cost(self, n: int, t: int, c: List[int], t_: List[int]) -> int:\n        cost = []\n        for i in range(n):\n            cost.append((c[i], t_[i]))\n        cost.sort()\n\n        min_cost = inf\n        for i in range(n):\n            if cost[i][1] <= t:\n                min_cost = min(min_cost, cost[i][0])\n\n        return min_cost\n\n\nclass TestSolution(TestCase):\n    def test_example_1(self):\n        assert Solution().minimum_cost(3, 70, [7, 60, 1], [80, 80, 80]) == 4\n\n    def test_example_2(self):\n        assert Solution().minimum_cost(3, 100, [7, 60, 1], [80, 80, 80]) == \"TLE\"\n\n    def test_example_3(self):\n        assert Solution().minimum_cost(3, 100, [7, 60, 1], [80, 80, 80]) == \"TLE\"\n\n    def test_example_4(self):\n        ",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(': ') == 'TLE'\n\"\"\"\n\nimport math\nfrom dataclasses import dataclass\n\n\n@dataclass(frozen=True)\nclass Route:\n    c: int\n    t: int\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50') == '4'\n\"\"\"\n\nimport sys",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50') == '4'\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"3 70\\n7 60\\n1 80\\n4 50\"\n) == \"4\"\nassert solution(\n\"3 70\\n7 60\\n1 80\\n4 50\\n5 70\\n8 70\\n10 70\\n11 70\\n12 70\\n14 70\"\n) == \"TLE\"\nassert solution(\n\"3 70\\n7 60\\n1 80\\n4 50\"\n) == \"4\"\nassert solution(\n\"3 70\\n7 60\\n1 80\\n4 50\\n5 70\\n8 70\\n10 70\\n11 70\\n12 70\\n14 70\"\n) == \"TLE\"\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nSolved\n\nAttempted\n\nRate\n\n109 ms\n\nOptimal\n\nAttempted\n\nRate\n\n110 ms\n\nOptimal\n\nTime Limit Exceeded\n\n\"\"\"\n\nimport math\n\n\nclass Solution:\n    def __init__(self):\n        self.primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    def solution(self, stdin: str) -> str:\n        [N, T] = stdin.split(\" \")\n        N, T = int(N), int(T)\n\n        cost = []\n        time = []\n        for i in range(N):\n            [c, t] = stdin.split(\" \")\n            c, t = int(c), int(t)\n            cost.append(c)\n            time.append(t)\n\n        min_time = T\n        min_cost = math.inf\n        for i in range(N):\n            if (time[i] < min_time):\n                if (cost[i] < min_cost):\n                    min_cost = cost[i]\n                    min_time = time[i]\n\n        if min_cost == math.inf:\n            return \"TLE\"\n        return min_cost\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50\\n') == '4'\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50') == '4'\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 9\\n\") == \"8\"\nassert solution(\"1 1 1\\n\") == \"1\"\nassert solution(\"2 1 0\\n\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\"\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 9\\n\") == \"8\"\n\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\"\n\nimport sys\nimport math\n\nA, B = (int(i) for i in input().split())",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 2 9''') == '8'\nassert solution('''1 1 1''') == '1'\nassert solution('''10 5 10''') == '10'\n\"\"\"\n\nfrom math import ceil\n",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1, 1, 1) == 0\nassert solution(2, 2, 1) == 1\nassert solution(4, 2, 2) == 4\nassert solution(1, 2, 2) == 3\nassert solution(3, 2, 2) == 4\n\n\"\"\"\nimport sys\nimport numpy as np",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 9') == '8'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\"\n\n\"\"\"\nimport sys\nimport math\nimport re",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 9') == '8'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 9') == '8'\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\nacornistnt\\npeanutbomb') == 1\nassert solution('3\\nacornistnt\\npeanutbomb') == 1\nassert solution('3\\npeanutbomb\\nacornistnt') == 1\nassert solution('3\\npeanutbomb\\nacornistnt') == 1\nassert solution('4\\npeanutbomb\\nacornistnt\\nconstraint') == 1\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6') == '1\\n2\\n2\\n0\\n4\\n4'\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcdefghijklmnopqrstuvwxyz\") == 26\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\na\\nacornistnt\\n:') == '1'\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\nacornistnt\\npeanutbomb\\nconstraint') == '1'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\ns_list = [sys.stdin.readline().rstrip() for i in range(N)]\n\nans = {}\n\nfor s in s_list:\n    s_list_sorted = \"\".join(sorted(s))\n    if s_list_sorted in ans.keys():\n        ans[s_list_sorted] += 1\n    else:\n        ans[s_list_sorted] = 1\n\nfor i in range(1, N+1):\n    print(ans[str(i)])\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\na\\nc\\na\\nb\\n\") == '2'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\": qp: qp: pqp: p: p: q\") == 1",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"acornistnt\") == \"1\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"acornistnt\") == 1\n\"\"\"\n\nimport numpy as np\n\nstdin = input()\nn = int(stdin[0])\na = np.array([stdin[1:]])\nb = np.array([stdin[1:]])\n\narr = [a]\nfor i in range(1, n):\n    arr.append(np.array([stdin[(2 * i + 1):(2 * i + 2 + i)]]))\n\ns = np.hstack(arr)\n\nu, c = np.unique(s, return_counts=True)\nd = {k: v for k, v in zip(u, c)}\nfor i in range(n):\n    for j in range(n):\n        if i!= j and d[s[i][0]] == d[s[j][0]]:\n            print(i + 1, j + 1)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == '1'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('112123123412345') == '1'\nassert solution('11223341234123412345') == '2'\nassert solution('112345') == '2'\nassert solution('122345') == '5'\nassert solution('12345') == '0'\n",
        "num_ids_2": 33,
        "num_ids_4": 57
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2132\\n506\\n999999999\\n1000000000\\n\") == \"8\\n2\\n9\\n8\"\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"112233445566778899010\") == \"9\"\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"112123123412345$\\\\dots$\") == '1'\nassert solution(\"111111$\\\\dots$\") == '1'\nassert solution(\"11121212$\\\\dots$\") == '2'\nassert solution(\"112121212121212$\\\\dots$\") == '5'\nassert solution(\"1121221221212122$\\\\dots$\") == '2'\n",
        "num_ids_2": 36,
        "num_ids_4": 75
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('112123123412345$\\dots$') == '82229003822290038'\n\n\"\"\"\nimport sys",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('11') == '0'\nassert solution('111') == '0'\nassert solution
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"112233445567\") == \"7\"\nassert solution(\"123456789\") == \"0\"\nassert solution(\"111213141516171819\") == \"4\"\nassert solution(\"111111\") == \"6\"\nassert solution(\"11111\") == \"6\"\n",
        "num_ids_2": 27,
        "num_ids_4": 56
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345\"\nassert solution(\"1$\\dots$2$\\dots$3$\\dots$\") == \"1\"\nassert solution(\"2$\\dots$3$\\dots$4$\\dots$5$\\dots$\") == \"2\"\nassert solution(\"3$\\dots$4$\\dots$5$\\dots$6$\\dots$\") == \"3\"\n\nassert solution(\"1112131415$\\dots$\") == \"1112131415\"\n",
        "num_ids_2": 52,
        "num_ids_4": 118
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"11212312341234512345612345671234567812345678912345678910\"\nassert solution(\"110$\\dots$\") == \"110\"\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11212312341234512345612345671234567812345678912345678910\") == \"1\" * 56\nassert solution
        "num_ids_2": 1496,
        "num_ids_4": 1496
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''6 2\n1 4\n4 3\n3 5\n3 6\n5 2''') == '2\\n1 2 1 1 2'\nassert solution('''4 2\n3 1\n1 4\n1 2''') == '1\\n1 1 1'\nassert solution('''10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9''') == '3\\n1 1 2 3 2 3 1 3 1'\n\n'''\n'''\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\\n\") == \"2\\n1 2 1 1 2 2\"\nassert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n\") == \"1\\n1 1 1\"\n",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2\\n1 2 1 1 2\"\nassert solution(\"4 2\\n3 1\\n1 4\\n1 2\") == \"1\\n1 1 1\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3\\n1 1 2 3 2 3 1 3 1\"",
        "num_ids_2": 66,
        "num_ids_4": 124
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n2 5\") == \"1 2 1 1 2\"\nassert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2 1 1 1 2\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3 1 1 1 2 2 3 3\"\n",
        "num_ids_2": 66,
        "num_ids_4": 120
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n1 3\") == \"1\\n1 1 1\\n2 1 2 2\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3\\n1 1 2 3 2 3 1 3 1\"\n",
        "num_ids_2": 96,
        "num_ids_4": 96
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n1 3\\n\") == \"1\\n1 1 1\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\\n\") == \"3\\n1 1 2 3 2 3 1 3 1\"\n\"\"\"",
        "num_ids_2": 94,
        "num_ids_4": 94
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 4\\n4 3\\n3 5\") == \"2\\n1 2 1 1 2\"\nassert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"1\\n1 1 1 2 2 2 1 1 1 1 2 2\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3\\n1 1 2 3 2 3 1 3 1\"\nassert solution(\"7 3\\n1 4\\n1 5\\n2 6\\n2 7\\n3 8\") == \"1\\n1 1 1 1 1 2 2 2 2\"\nassert solution(\"8 3\\n1 4\\n1 5\\n2 6\\n2 7\\n3 8\\n3 9\\n4 10\") == \"1\\n1 1 1 1 1 2 2 2 2\\n1 1 1 1 1 1 2 2 2\"\n",
        "num_ids_2": 75,
        "num_ids_4": 175
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n1 3\\n2 5\\n2 6\\n2 7\") == \"1 1 2 3 2 3 1 3 1\"\n\n\"\"\"",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == ''\nassert solution('1 1 2 1 1 2') == '1 1 2 1 2'\n\n------------------------------------------------------------------------------------------------------------------------\n\nSolution for:\nhttps://www.codewars.com/kata/5d62c2d0a70a2c4ed9a0034b",
        "num_ids_2": 18,
        "num_ids_4": 37
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n1 4') == '1 2 1 1 2'\nassert solution('6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2') == '1 2 1 1 2'\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 4 4\\n\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\\n\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\\n\") == \"3 6\"\n\"\"\"\n\nfrom functools import reduce\nimport operator\n",
        "num_ids_2": 43,
        "num_ids_4": 65
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 4 4\") == \"2 4\"\nassert solution(\"4 3 7 1 4 3\") == \"3 6\"\n\nprint(\"Successfully solved\")\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\nassert solution('7\\n4 3 7 1 4 3 3') == '3 6'\n",
        "num_ids_2": 39,
        "num_ids_4": 59
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 4 4\\n\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\\n\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\\n\") == \"3 6\"\n\"\"\"",
        "num_ids_2": 43,
        "num_ids_4": 65
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n",
        "num_ids_2": 39,
        "num_ids_4": 59
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == (0, 0)\nassert solution('1') == (0, 1)\nassert solution('5') == (0, 5)\nassert solution('5\\n1 2 4 4') == (2, 5)\nassert solution('8\\n1 1 8 8 8 4 4 4 4') == (3, 8)\n",
        "num_ids_2": 24,
        "num_ids_4": 54
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('2') == '2'\nassert solution('2 3') == '2'\nassert solution('2 3 4') == '2'\nassert solution('2 3 4 5') == '2'\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\nassert solution('7\\n4 3 7 1 4 3 3') == '3 6'\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nn = int(sys.argv[1])\n\nhouses = []\n\nfor _ in range(n):\n    houses.append(int(input()))\n\nhouses.sort()\n\nmin_occupied = 0\nmax_occupied = 0\n\nfor i in range(n-1):\n    if houses[i+1] - houses[i] > 1:\n        min_occupied += houses[i+1] - houses[i] - 1\n    if houses[i] - 1 - houses[i+1] > 1:\n        max_occupied += houses[i] - 1 - houses[i+1] - 1\n\nprint(min_occupied, max_occupied)",
        "num_ids_2": 39,
        "num_ids_4": 70
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3') == '3 2 4 1 5'\nassert solution('3\\n2 3\\n3 1\\n1 2') == '3 1 2'\nprint('The local tests are done. Click on \"Check\" for more real tests.')",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"1 2 3 4\"\nassert solution(\"4\\n1 3\\n2 4\") == \"1 2 4 3\"\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"1 2 3 4 5\"\nassert solution(\"3\\n1 3\\n2 4\") == \"1 2 4 3\"\n",
        "num_ids_2": 46,
        "num_ids_4": 97
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n\") == '3 2 4 1 5'",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\n\"\"\"\n\n\"\"\"\nI don't know why this algorithm can work. It's not my best solution.\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 3\\n3 1\\n1 2\\n\") == \"3 1 2\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3\n''') == '3 2 4 1 5'\nassert solution('''3\n2 3\n3 1\n1 2\n''') == '3 1 2'\n\n'''\nimport sys\nfrom collections import Counter\nn = int(sys.stdin.readline().strip())\na = []\nfor i in range(n):\n    a.append([int(i) for i in sys.stdin.readline().split()])\na = [[x for x in y] for y in a]\na = sorted(a, key=lambda x: x[0])\nc = Counter([i[0] for i in a])\nres = []\nfor i in range(n):\n    if c[i+1] == 1:\n        res.append(i+1)\n        c[i+1] -= 1\n        c[i+2] -= 1\n    else:\n        res.append(a[i][1])\nprint(' '.join([str(i) for i in res]))\n'''\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n\") == \"3 2 4 1 5\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n3 4\") == \"3 1 4\"\nassert solution(\"4\\n4 3\\n1 2\") == \"3 1 4\"\nassert solution(\"4\\n1 2\\n3 4\\n5 6\") == \"3 1 4 5 6\"\nassert solution(\"4\\n2 1\\n3 4\") == \"3 1 4\"\nassert solution(\"4\\n4 3\\n2 1\") == \"3 1 4\"\n",
        "num_ids_2": 40,
        "num_ids_4": 86
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 3\\n3 1\\n1 2\") == \"3 1 2\"\nassert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 1 2 4 5\"\n\n\"\"\"\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3''') == '3 2 4 1 5'\n\nassert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3''') == '3 2 4 1 5'\n\nassert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3''') == '3 1 4 5 2'\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == \"3\"\nassert solution(\"10\\n
        "num_ids_2": 1610,
        "num_ids_4": 1610
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 10 100') == '2'\nassert solution('4\\n1 10 100') == '2'\nassert solution('6\\n1 10 100') == '2'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == '10'\nassert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\n",
        "num_ids_2": 30,
        "num_ids_4": 83
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n1 1000 10000 10 100 1000000000') == 3\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == 10\n\"\"\"\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\"\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\"\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\n",
        "num_ids_2": 53,
        "num_ids_4": 104
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n1 10 17 12 15 2') == '3'\nassert solution('10\\n
        "num_ids_2": 1610,
        "num_ids_4": 1610
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\"\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\n\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0441\u043b\u0435\u0448 \"\\\".\n\nSample Input:\n\n\\\\\"\n\\\\\\\"\n\nSample Output:\n\n\"\n\\\"\n\"\"\"\n",
        "num_ids_2": 65,
        "num_ids_4": 84
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == \"3\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 13",
        "num_ids_2": 1610,
        "num_ids_4": 1610
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == '10'\nassert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\nassert solution('1\\n10') == '1'\n\"\"\"\n\nn = int(input())\narray = list(map(int, input().split()))\narray.sort()\n\nmin_diff = 5\n\nfor i in range(n - 1):\n    if array[i + 1] - array[i] < min_diff:\n        min_diff = array[i + 1] - array[i]\n\nprint(min_diff)\n",
        "num_ids_2": 51,
        "num_ids_4": 83
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\\n\") == \"3\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 13",
        "num_ids_2": 1610,
        "num_ids_4": 1610
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n1 10 17 12 15 2') == 3\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == 10\nassert solution('6\\n1 1000 10000 10 100 1000000000') == 1",
        "num_ids_2": 52,
        "num_ids_4": 69
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\nassert solution(\"9 9 999 9 9\\n7 7 9 1 1\\n9 9 9 1 1\\n9 9 9 9 9\\n9 9 9 9 9\\n9 9 9 9 9\\n9 9 9 9 9\") == \"9\\n-1\\n0\\n0\"\nassert solution(\"1 1 1 1 1\\n9 9 9 9 9\\n9 9 9 9 9\\n9 9 9 9 9\\n9 9 9 9 9\\n9 9 9 9 9\") == \"9\\n9\\n0\\n0\"\nassert solution(\"1 2 2 3 4\\n9 9 9 9 9\\n9 9 9 9 9\\n9 9 9 9 9\\n9 9 9 9 9\\n9 9 9 9 9\") == \"9\\n-1\\n0\\n0\"\nassert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\n",
        "num_ids_2": 125,
        "num_ids_4": 242
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3''') == '4\\n-1\\n5\\n2\\n0\\n1'\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"15 5 3 2\"\n) == \"4\"\nassert solution(\n    \"15 5 4 3\"\n) == \"-1\"\nassert solution(\n    \"15 5 2 1\"\n) == \"5\"\nassert solution(\n    \"15 5 5 1\"\n) == \"2\"\nassert solution(\n    \"16 7 5 2\"\n) == \"0\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == \"4\\n-1\\n5\\n2\\n0\\n1\"\n",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4\\n-1\\n5\\n2\\n0\\n1'\n\"\"\"",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''\n3\n5 4 1 3\n4 3 1 2\n3 2 1 1\n5 10 3 2\n''') == '3'\nassert solution(\n'''\n6\n10 10 10 10 10 10\n7 8 9 10 10 10\n1 1 1 1 1 1 1\n2 2 2 2 2 2 2\n5 5 5 5 5 5 5\n1 1 1 1 1 1 1\n5 5 5 5 5 5 5\n''') == '-1'\n\nassert solution(\n'''\n5\n5 1 1 3\n5 2 1 3\n5 3 1 3\n5 4 1 3\n5 5 1 3\n''') == '4'\nassert solution(\n'''\n6\n10 3 2 3\n10 4 2 3\n10 5 2 3\n10 6 2 3\n10 7 2 3\n10 8 2 3\n''') == '-1'\nassert solution(\n'''\n1\n10 10 10 10 10\n''') == '0'\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '1'\nassert solution('2\\n1 2') == '-1'\nassert solution('3\\n1 2\\n1 1') == '0'\nassert solution('3\\n1 2\\n1 1\\n2 2') == '1'\n",
        "num_ids_2": 21,
        "num_ids_4": 54
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\n",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5 3 2') == '-1'\nassert solution('15 5 3 2') == '4'\nassert solution('15 5 4 3') == '-1'\nassert solution('15 5 2 1') == '5'\nassert solution('15 5 5 1') == '2'\n",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1 2 5') == '0'\nassert solution('2 4 2 1') == '0'\nassert solution('2 1 2 1') == '1'\nassert solution('10 10 2 1') == '0'\nassert solution('10 10 2 2') == '2'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ac?b?c\") == '24'\nassert solution(\"a??b?c\") == '2835'\nassert solution(\"a???c\") == '46'\n",
        "num_ids_2": 29,
        "num_ids_4": 41
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ac?b?c\") == 24\nassert solution(\"???????\") == 2835\nassert solution(\"cccbbbaaa\") == 0\nassert solution(\"a???c\") == 46\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ac?b?c') == 24\nassert solution('??????') == 2835\nassert solution('a??c') == 46\nassert solution('aa??c') == 0\nassert solution('ac??b') == 1\n",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ac?b?c') == 24\nassert solution('???????') == 2835\nassert solution('cccbbbaaa') == 0\n",
        "num_ids_2": 23,
        "num_ids_4": 35
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ac?b?c') == 24\nassert solution('???????') == 2835\nassert solution('cccbbbaaa') == 0\nassert solution('a???c') == 46\n",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ac?b?c') == '24'\nassert solution('a???c') == '2835'\nassert solution('???????') == '2835'\nassert solution('cccbbbaaa') == '0'\n\"\"\"\n\nfrom collections import Counter\n\nMOD = 10 ** 9 + 7\n",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ac?b?c\") == 24\nassert solution(\"????????\") == 2835\nassert solution(\"cccbbbaaa\") == 0\nassert solution(\"a??c\") == 46\n",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\nassert solution(\"????????\") == \"2835\"\nassert solution(\"a???c\") == \"46\"\nassert solution(\"cccbbbaaa\") == \"0\"\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ac?b?c\") == '24'\n\nassert solution(\"????????\") == '2835'\n\nassert solution(\"cccbbbaaa\") == '0'\n\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 41
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ac?b?c') == 24\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n1 3 3\\n2 3 5\\n2 1 1') == '5'\nassert solution('4 0\\n1 3 3 7') == '16'\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 3 3\\n2 3 5\\n2 1 1\") == \"5\"\nassert solution(\"4 0\\n1 3 3 7\") == \"16\"",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 3 3\\n2 3 5\\n2 1 1\") == \"5\"\nassert solution(\"4 0\\n1 3 3 7\\n2 3 5\\n2 1 1\") == \"16\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\"\n\n\n-----",
        "num_ids_2": 53,
        "num_ids_4": 91
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 3 3\\n2 3 5\\n2 1 1\") == \"5\"\nassert solution(\"4 0\\n1 3 3 7\") == \"16\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n1 3 3\\n2 3 5\\n2 1 1') == '5'\nassert solution('4 0\\n1 3 3 7') == '16'\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 3 3\\n2 3 5\\n2 1 1') == '5'\nassert solution('4 0\\n1 3 3 7') == '16'",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 0\\n1 3 3 7\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\"",
        "num_ids_2": 75,
        "num_ids_4": 75
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 3 3\\n2 3 5\\n2 1 1\") == '5'\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == '18'\n\n\n\n-----Test 1-----\n\nInput\n3 2\n1 3 3\n2 3 5\n2 1 1\nOutput\n5\nExpected\n5\n\n\n-----Test 2-----\n\nInput\n4 0\n1 3 3 7\nOutput\n16\nExpected\n16\n",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 3 3\\n2 3 5\") == '5'\nassert solution(\"4 0\\n1 3 3 7\") == '16'\n\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 3 3\\n2 3 5\\n2 1 1\") == \"5\"\nassert solution(\"4 0\\n1 3 3 7\") == \"16\"\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\\n\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n0 5\\n\") == \"45\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 58,
        "num_ids_4": 80
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"-1\"\n",
        "num_ids_2": 56,
        "num_ids_4": 76
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == '14'\nassert solution(\"10 1 1\\n0 9\\n0 5\") == '45'\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\n\"\"\"\n\nfrom functools import lru_cache\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'''10 1 1\n0 9\n0 5''') == '45'\nassert solution(\n'''10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2''') == '14'\nassert solution(\n'''10 1 1\n0 9\n0 5''') == '-1'\n'''\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == 14\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n') == '14'\nassert solution('10 1 1\\n0 9\\n0 5\\n') == '-1'\nassert solution('10 1 1\\n0 9\\n1 5\\n') == '45'",
        "num_ids_2": 61,
        "num_ids_4": 83
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\n\"\"\"\n\nimport collections\nfrom typing import List\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n\") == '14'\nassert solution(\"10 1 1\\n0 9\\n0 5\\n\") == '45'\nassert solution(\"10 1 1\\n0 9\\n0 5\\n\") == '-1'\n",
        "num_ids_2": 60,
        "num_ids_4": 83
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\") == \"-1\"\n\n\"\"\"\n",
        "num_ids_2": 56,
        "num_ids_4": 76
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 7 5') == \"Yes\"\nassert solution('7 7 5') == \"No\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7 5') == 'Yes'\nassert solution('5 7 7') == 'No'\nassert solution('1 1 1') == 'No'\nassert solution('1 1 3') == 'Yes'\nassert solution('1 1 1') == 'No'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"7 7 7\") == \"No\"\nassert solution(\"1 2 2\") == \"No\"\nassert solution(\"3 3 3\") == \"No\"\nassert solution(\"1 1 1\") == \"Yes\"\n\"\"\"\n\nA, B, C = list(map(int, input().split()))",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 7 2') == 'No'\nassert solution('1 7 2') == 'Yes'\nassert solution('7 7 7') == 'Yes'\nassert solution('9 7 7') == 'Yes'\nassert solution('7 7 9') == 'No'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"7 7 7\") == \"No\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 7 5\\n') == 'Yes\\n'\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 7 5''') == 'Yes'\nassert solution('''5 7 7''') == 'No'\nassert solution('''1 1 1''') == 'Yes'\nassert solution('''5 5 5''') == 'Yes'\nassert solution('''4 2 2''') == 'No'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == expected\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\n\n\"\"\"\n\"\"\"\nThe average temperature of Place 1 is 12-1000 \\times 0.006=6 degrees Celsius.\nThe average temperature of Place 2 is 12-2000 \\times 0.006=0 degrees Celsius.\nTherefore, the palace should be built at Place 1.\n\"\"\"\n\nn = int(stdin.readline())\nt, a = map(float, stdin.readline().split())\nh = [int(num) for num in stdin.readline().split()]\n\nh.sort()\n\ndiff = [abs(a - (t - (h[i] * 0.006))) for i in range(n)]\n\nprint(h[diff.index(min(diff))])\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2\n12 5\n1000 2000''') == \"1\"\nassert solution('''4\n40 1\n1 1 2 3''') == \"0\"\nassert solution('''2\n60 1\n1 3 2''') == \"1\"\nassert solution('''1\n60 1\n1''') == \"0\"\n'''\nSolution 1\nO(nlogn)\n'''\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n12 5\\n1000 2000') == '1'\nassert solution('3\\n9 10 1\\n100 200 300') == '2'\nassert solution('2\\n12 5\\n5 10') == '1'\nassert solution('3\\n9 10 1\\n100 200 300') == '1'\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12 5 1000 2000\") == \"1\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 12\") == \"1\"\nassert solution(\"12 5\") == \"1\"\nassert solution(\"4 12\\n1000 2000\") == \"1\"\n\"\"\"\n\nimport sys\n\ntry:\n    num_places = int(sys.stdin.readline())\n    avg_temperature = float(sys.stdin.readline())\n    place_heights = [float(sys.stdin.readline()) for _ in range(num_places)]\n    closest = place_heights[0]\n    index = 0\n    for i, h in enumerate(place_heights):\n        if abs(avg_temperature - h * 0.006) < abs(avg_temperature - closest * 0.006):\n            closest = h\n            index = i\n\n    print(index + 1)\nexcept:\n    pass\n",
        "num_ids_2": 22,
        "num_ids_4": 37
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 12 5 1000 2000\") == \"1\"\nprint(\"PASSED\")\n\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\nassert solution(\"3\\n10 -10 -20\") == \"2\"",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 12 5 1000 2000\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '2\\n12 5\\n1000 2000'\n) == '1'\nassert solution(\n    '4\\n8 36\\n-20 0 -50 0'\n) == '2'\nassert solution(\n    '3\\n25 14\\n14 14 15'\n) == '1'\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n\") == \"1\"\nassert solution(\"3 5\\n\") == \"8\"\nassert solution(\"6 4\\n\") == \"0\"",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n') == '1'\n\"\"\"\n\n\"\"\"\nM = int(stdin.readline())\nN = int(stdin.readline())\n\narr = []\n\nfor i in range(M, 0, -1):\n    arr.append(i)\nfor i in range(N, 0, -1):\n    arr.append(i)\n\narr.sort()",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 1''') == '1'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"4 2\") == \"1\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"4 5\") == \"6\"\n\n------\n\n2 1\n\n------\n\n1\n\n------\n\n2 2\n\n------\n\n2 3\n\n------\n\n2 4\n\n------\n\n2 5\n\n------\n\n3 2\n\n------\n\n2 3\n\n------\n\n0\n\n------\n\n3 3\n\n------\n\n3 4\n\n------\n\n3 5\n\n------\n\n4 2\n\n------\n\n2 5\n\n------\n\n4 5\n\n------\n\n5 5\n\n------\n\n5 6\n\n------\n\n5 7\n\n------\n\n6 6\n\n------\n\n6 7\n\n------\n\n6 8\n\n------\n\n7 7\n\n------\n\n7 8\n\n------\n\n8 8\n\n------\n\n8 9\n\n------\n\n9 9\n\n------\n\n9 10\n\n------\n\n9 11\n\n------\n\n10 10\n\n------\n\n10 11\n\n------\n\n10 12\n\n------\n\n11 11\n\n------\n\n11 12\n\n------\n\n11 13\n\n------\n\n12 12\n\n------\n\n12 13\n\n------\n\n12 14\n\n------\n\n13 13\n\n------\n\n13 14\n\n------\n\n13 15\n\n------\n\n14 14\n\n------\n\n14 15\n\n------\n\n14 16\n\n------\n\n15 15\n\n------\n\n15 16\n\n------\n\n16 16\n\n------\n\n16 17\n\n------\n\n17 17\n\n------\n\n17 18\n\n------\n\n18 18\n\n------\n\n18 19\n\n------\n\n19 19\n\n------\n\n19 20\n\n------\n\n20 20\n\n------\n\n20 21\n\n------\n\n21 21\n\n------\n\n21 22\n\n------\n\n22 22\n\n------\n\n22 23\n\n------\n\n23 23\n\n------\n\n23 24\n\n------\n\n24 24\n\n------\n\n24 25\n\n------\n\n25 25\n\n------\n\n25 26\n\n------\n\n26 26\n\n------\n\n26 27\n\n------\n\n27 27\n\n------\n\n27 28\n\n------\n\n28 28\n\n------\n\n28 29\n\n------\n\n29 29\n\n------\n\n29 30\n\n------\n\n30 30\n\n------\n\n30 31\n\n------\n\n31 31\n\n------\n\n31 32\n\n------\n\n32 32\n\n------\n\n32 33\n\n------\n\n33 33\n\n------\n\n33 34\n\n------\n\n34 34\n\n------\n\n34 35\n\n------\n\n35 35\n\n------\n\n35 36\n\n------\n\n36 36\n\n------\n\n36 37\n\n------\n\n37 37\n\n------\n\n37 38\n\n------\n\n38 38\n\n------\n\n38 39\n\n------\n\n39 39\n\n------\n\n39 40\n\n------\n\n40 40\n\n------\n\n40 41\n\n------\n\n41 41\n\n------\n\n41 42\n\n------\n\n42 42\n\n------\n\n42 43\n\n------\n\n43 43\n\n------\n\n43 44\n\n------\n\n44 44\n\n------\n\n44 45\n\n------\n\n45 45\n\n------\n\n45 46\n\n------\n\n46 46\n\n------\n\n46 47\n\n------\n\n47 47\n\n------\n\n47 48\n\n------\n\n48 48\n\n------\n\n48 49\n\n------\n\n49 49\n\n------\n\n49 50\n\n------\n\n50 50\n\n------\n\n50 51\n\n------\n\n51 51\n\n------\n\n51 52\n\n------\n\n52 52\n\n------\n\n52 53\n\n------\n\n53 53\n\n------\n\n53 54\n\n------\n\n54 54\n\n------\n\n54 55\n\n------\n\n55 55\n\n------\n\n55 56\n\n------\n\n56 56\n\n------\n\n56 57\n\n------\n\n57 57\n\n------\n\n57 58\n\n------\n\n58 58\n\n------\n\n58 59\n\n------\n\n59 59\n\n------\n\n59 60\n\n------\n\n60 60\n\n------\n\n60 61\n\n------\n\n61 61\n\n------\n\n61 62\n\n------\n\n62 62\n\n------\n\n62 63\n\n------\n\n63 63\n\n------\n\n63 64\n\n------\n\n64 64\n\n------\n\n64 65\n\n------\n\n65 65\n\n------\n\n65 66\n\n------\n\n66 66\n\n------\n\n66 67\n\n------\n\n67 67\n\n------\n\n67 68\n\n------\n\n68 68\n\n------\n\n68 69\n\n------\n\n69 69\n\n------\n\n69 70\n\n------\n\n70 70\n\n------\n\n70 71\n\n------\n\n71 71\n\n------\n\n71 72\n\n------\n\n72 72\n\n------\n\n72 73\n\n------\n\n73 73\n\n------\n\n73 74\n\n------\n\n74 74\n\n------\n\n74 75\n\n------\n\n75 75\n\n------\n\n75 76\n\n------\n\n76 76\n\n------\n\n76 77\n\n------\n\n77 77\n\n------\n\n77 78\n\n------\n\n78 78\n\n------\n\n78 79\n\n------\n\n79 79\n\n------\n\n79 80\n\n------\n\n80 80\n\n------\n\n80 81\n\n------\n\n81 81\n\n------\n\n81 82\n\n------\n\n82 82\n\n------\n\n82 83\n\n------\n\n83 83\n\n------\n\n83 84\n\n------\n\n84 84\n\n------\n\n84 85\n\n------\n\n85 85\n\n------\n\n85 86\n\n------\n\n86 86\n\n------\n\n86 87\n\n------\n\n87 87\n\n------\n\n87 88\n\n------\n\n88 88\n\n------\n\n88 89\n\n------\n\n89 89\n\n------\n\n89 90\n\n------\n\n90 90\n\n------\n\n90 91\n\n------\n\n91 91\n\n------\n\n91 92\n\n------\n\n92 92\n\n------\n\n92 93\n\n------\n\n93 93\n\n------\n\n93 94\n\n------\n\n94 94\n\n------\n\n94 95\n\n------\n\n95 95\n\n------\n\n95 96\n\n------\n\n96 96\n\n------\n\n96 97\n\n------\n\n97 97\n\n------\n\n97 98\n\n------\n\n98 98\n\n------\n\n98 99\n\n------\n\n99 99\n\n------\n\n99 100\n\n------\n\n100 100\n\n------\n\n100 101\n\n------\n\n101 101\n\n------\n\n101 102\n\n------\n\n102 102\n\n------\n\n102 103\n\n------\n\n103 103\n\n------\n\n103 104\n\n------\n\n104 104\n\n------\n\n104 105\n\n------\n\n105 105\n\n------\n\n105 106\n\n------\n\n106 106\n\n------\n\n106 107\n\n------\n\n107 107\n\n------\n\n107 108\n\n------\n\n108 108\n\n------\n\n108 109\n\n------\n\n109 109\n\n------\n\n109 110\n\n------\n\n110 110\n\n------\n\n110 111\n\n------\n\n111 111\n\n------\n\n111 112\n\n------\n\n112 112\n\n------\n\n112 113\n\n------\n\n113 113\n\n------\n\n113 114\n\n------\n\n114 114\n\n------\n\n114 115",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == 1\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 1''') == '1'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n') == '1'\n\"\"\"\n\n\nfrom typing import List\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == '1'\n\"\"\"\n\nfrom typing import Dict, List\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == \"1\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"3 2\") == \"3\"\n\"\"\"\n\n\"\"\"\nGiven a set of non-negative integers, and a value sum, determine if there is a subset of the given set with sum equal to given sum.\n\nExample:\n\nInput: set[] = {3, 34, 4, 12, 5, 2}, sum = 9\nOutput: True  \nThere is a subset (4, 5) with sum 9.\n\nInput: set[] = {3, 34, 4, 12, 5, 2}, sum = 30\nOutput: False\nThere is no subset that add up to 30.\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ACACTACG\") == '2'\nassert solution(\"ACACTACGTT\") == '3'\n\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(s) == result\n\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ACACTACG\") == '2'\nassert solution(\"ATCODER\") == '5'\n\nprint(solution(\"ACACTACG\"))\nprint(solution(\"ATCODER\"))\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ACACTACG\", 3, 7) == \"2\"\nassert solution(\"ACACTACG\", 2, 3) == \"0\"\nassert solution(\"ACACTACG\", 1, 8) == \"3\"\n",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"AACCGGTT\") == \"4\"\n\"\"\"\nimport sys\nimport itertools",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ACTACG\") == 2\n\"\"\"\nfrom collections import Counter",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ACACTACG\\n3 7\\n2 3\\n1 8') == '2\\n0\\n3'\nassert solution('ACACTACG\\n3 7\\n2 3\\n1 8\\n4 5') == '2\\n0\\n3'\n",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ACACTACG') == 2\nassert solution('ATCODER') == 3\nassert solution('ATCODEDR') == 0\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 34
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution
        "num_ids_2": 1561,
        "num_ids_4": 1561
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\":\") == \"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 3\n50 100 80 120 80''') == 210\nassert solution('''10 10\n50 100 10 120 10 120 10 120 10 120 10 120 10 120 10 120''') == 500\nassert solution('''20 20\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50''') == 450\nassert solution('''100 100\n
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(5) + \" \" + str(3) + \"\\n\" + \"50 100 80 120 80\\n\") == \"210\"\nprint(\"passed\")",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\\n\") == \"210\"\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\\n\") == \"210\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\nassert solution(\"2 2\\n10 10\") == \"10\"\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n50 100 80 120 80\\n') == '210'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\\n\") == \"210\"\nprint(solution(input()))\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\nassert solution(\"4 1\\n10 10 10 10\") == \"10\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 35,
        "num_ids_4": 53
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected_output\n\"\"\"\nfrom __future__ import print_function\nimport sys\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n50 100 80 120 80\\n') == '210'\nprint(\"Passed\")\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3 4') == '4'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3 4') == '4'\n\"\"\"\n\nimport sys\nimport math\n\nnums = list(map(int, sys.stdin.readline().split()))\nprint(math.ceil(min(nums) + min(nums) + min(nums)))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"3 3 3\") == \"7\"\nassert solution(\"4 1 5\") == \"9\"\nassert solution(\"1 3 4\") == \"4\"\nassert solution(\"3 3 3\") == \"7\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == \"4\"\n\n\n------ Test Case #0 -----\n\"\"\"\n3 4 5\n\"\"\"\nIn the first line, print the value of P, then Q, then R.\nIn the second line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the third line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the fourth line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn the fifth line, print the value of the fourth flight, then the value of the first flight, then the value of the second flight.\nIn the sixth line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the seventh line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the eigth line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn the ninth line, print the value of the fourth flight, then the value of the first flight, then the value of the second flight.\nIn the tenth line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the eleventh line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the twelfth line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn the thirteenth line, print the value of the fourth flight, then the value of the first flight, then the value of the second flight.\nIn the fourteenth line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the fifteenth line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the sixteenth line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn the seventeenth line, print the value of the fourth flight, then the value of the first flight, then the value of the second flight.\nIn the eighteenth line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the nineteenth line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the twentieth line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn the twenty-first line, print the value of the fourth flight, then the value of the first flight, then the value of the second flight.\nIn the twenty-second line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the twenty-third line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the twenty-fourth line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn the twenty-fifth line, print the value of the fourth flight, then the value of the first flight, then the value of the second flight.\nIn the twenty-sixth line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the twenty-seventh line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the twenty-eigth line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn the twenty-ninth line, print the value of the fourth flight, then the value of the first flight, then the value of the second flight.\nIn the thirty-first line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the thirty-second line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the thirty-third line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn the thirty-fourth line, print the value of the fourth flight, then the value of the first flight, then the value of the second flight.\nIn the thirty-fifth line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the thirty-sixth line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the thirty-seventh line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn the thirty-eigth line, print the value of the fourth flight, then the value of the first flight, then the value of the second flight.\nIn the thirty-ninth line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the fourtieth line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the fourtieth line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn the fourtieth line, print the value of the fourth flight, then the value of the first flight, then the value of the second flight.\nIn the fourtieth line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the fourtieth line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the fourtieth line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn the fourtieth line, print the value of the fourth flight, then the value of the first flight, then the value of the second flight.\nIn the fourtieth line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the fourtieth line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the fourtieth line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn the fourtieth line, print the value of the fourth flight, then the value of the first flight, then the value of the second flight.\nIn the fourtieth line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the fourtieth line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the fourtieth line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\"\"\"\nimport sys\n\nwhile True:\n    try:\n        p, q, r = map(int, sys.stdin.readline().split())\n    except:\n        break\n\n    s = p + q + r\n    if (s - (max(p, q, r))) % 2 == 0:\n        print((s - (max(p, q, r))) // 2)\n    else:\n        print((s - (max(p, q, r))) // 2 + 1)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3 4') == '4'\nassert solution('2 3 6') == '5'\nassert solution('2 8 6') == '6'\nassert solution('2 1 4') == '3'\nassert solution('1 10 10') == '10'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"100 100 100\") == \"0\"\nassert solution(\"4 1 1\") == \"4\"\nassert solution(\"1 1 1\") == \"3\"\nassert solution
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3 4') == '4'\n\"\"\"\n\nP, Q, R = [int(i) for i in stdin.split(' ')]\n\nprint(P + Q + R - max([P, Q, R]))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"7 3 5\") == \"12\"\nassert solution(\"10 4 6\") == \"14\"\n\nprint(solution(input()))\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5') == '0'\n\nprint(solution('3 5'))",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n') == '0'\nassert solution('5 5\\n') == '10'\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3) == 0\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\"\n\nimport sys\n\nnums = list(map(int, sys.stdin.readlines()[0].split()))\nX, A = nums",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5') == '0'\n\n\"\"\"\n\nfrom unittest.mock import patch",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 10') == '10'\nassert solution('10 10') == '0'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5') == '0'\n\"\"\"\n\nX, A = [int(x) for x in input().split()]",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\") == \"0\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5\\n') == '0'\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5\\n') == '0'\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4\") == \"1\"\nassert solution(\"0 5\") == \"0\"\nassert solution(\"1 6\") == \"5\"\n\"\"\"\n\nimport sys\nfrom math import ceil, log",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 4\") == \"1\"\nprint(\"Test PASSED\")\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 4') == '1'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 4') == '1'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 4') == '1'\nassert solution('3 3') == '0'\nassert solution('15 13') == '5'\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 4') == '1'\nassert solution('15 17') == '6'\nassert solution('3 10') == '1'\nassert solution('19 17') == '2'\nassert solution('1 9') == '0'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 4') == '1'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 4') == '1'\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 4\\n\") == \"1\"\n\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'win'\nassert solution('5 7 9') == 'win'\nassert solution('5 7 7') == 'bust'\nassert solution('9 8 7') == 'bust'\nassert solution('8 7 7') == 'bust'\n",
        "num_ids_2": 22,
        "num_ids_4": 48
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 7 9') == \"win\"\nassert solution('1 1 1') == \"bust\"\n\"\"\"\n\ninput_list = [int(item) for item in input().split()]",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('5 7 8') == 'bust'\nassert solution('6 8 9') == 'bust'\nassert solution('6 7 9') == 'win'\nassert solution('7 7 9') == 'win'\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('1 1 1') == 'bust'\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 7 9\") == \"win\"\nassert solution(\"5 4 7\") == \"bust\"\nassert solution(\"9 9 9\") == \"bust\"\nassert solution(\"11 11 11\") == \"win\"\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 7 9') == 'win'\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3. \nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Constraints-----\n - 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5 7 9\n\n-----Output-----\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Sample Input-----\n5 7 9\n\n-----Sample Output-----\nwin\n\n5+7+9=21, so print win.\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Constraints-----\n - 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5 7 9\n\n-----Output-----\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Sample Input-----\n5 7 9\n\n-----Sample Output-----\nwin\n\n5+7+9=21, so print win.\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Constraints-----\n - 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5 7 9\n\n-----Output-----\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Sample Input-----\n5 7 9\n\n-----Sample Output-----\nwin\n\n5+7+9=21, so print win.\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Constraints-----\n - 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5 7 9\n\n-----Output-----\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Sample Input-----\n5 7 9\n\n-----Sample Output-----\nwin\n\n5+7+9=21, so print win.\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Constraints-----\n - 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5 7 9\n\n-----Output-----\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Sample Input-----\n5 7 9\n\n-----Sample Output-----\nwin\n\n5+7+9=21, so print win.\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Constraints-----\n - 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5 7 9\n\n-----Output-----\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Sample Input-----\n5 7 9\n\n-----Sample Output-----\nwin\n\n5+7+9=21, so print win.\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Constraints-----\n - 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5 7 9\n\n-----Output-----\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Sample Input-----\n5 7 9\n\n-----Sample Output-----\nwin\n\n5+7+9=21, so print win.\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Constraints-----\n - 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5 7 9\n\n-----Output-----\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Sample Input-----\n5 7 9\n\n-----Sample Output-----\nwin\n\n5+7+9=21, so print win.\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Constraints-----\n - 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5 7 9\n\n-----Output-----\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Sample Input-----\n5 7 9\n\n-----Sample Output-----\nwin\n\n5+7+9=21, so print win.\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Constraints-----\n - 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5 7 9\n\n-----Output-----\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Sample Input-----\n5 7 9\n\n-----Sample Output-----\nwin\n\n5+7+9=21, so print win.\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3,5,3) == \"win\"\nassert solution(8,3,5) == \"bust\"\n\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7 9\") == \"win\"\nassert solution(\"7 6 5\") == \"bust\"\nassert solution(\"6 2 6\") == \"win\"\nassert solution(\"8 9 10\") == \"bust\"\nassert solution(\"3 2 5\") == \"win\"\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '6'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == 6\nassert solution(\"6\") == 12\nassert solution(\"1\") == 2\n\"\"\"\n\n\"\"\"\nMy solution:\n    \n    \"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n') == '6'\nprint('Success')\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == 6\n\"\"\"\nimport sys\nimport unittest\n\n\nclass TestCases(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution(\"3\"), 6)\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n\") == \"1\"\nassert solution(\"3\\n\") == \"6\"\nassert solution(\"4\\n\") == \"2\"\nassert solution(\"5\\n\") == \"10\"\n\nprint('Success')\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '6'\nassert solution('6') == '6'\nassert solution('7') == '14'\nassert solution('8') == '16'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"10\"\nassert solution(\"3\") == \"6\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '6'\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2\") == 2\n'''",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2\") == 2\n\"\"\"\n\nN, D = list(map(int, input().strip().split(\" \")))\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(solution(str(input())))\n'''\n\nN, D = map(int, input().split())\nnums = list(range(1, N + 1))\n\nleft = [0]\nright = [D]\nfor i in range(len(nums)):\n    left.append(left[i] + nums[i])\n    right.append(right[i] + nums[len(nums) - 1 - i])\n\nans = 0\nfor i in range(len(nums)):\n    l = left[i]\n    r = right[i]\n    if l <= r:\n        ans += r - l + 1\n\nprint(ans)\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 2') == '2'\nassert solution('10 6') == '4'\nassert solution('20 10') == '4'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n6 2\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 2\\n') == '2'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"2\"\n\"\"\"\n\n\nimport sys\nimport math\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 2\\n') == '2'\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import combinations\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2\") == 2\nprint(solution(\"6 2\"))\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n1 2') == '1'\nassert solution('4 3\\n2 1\\n2 3') == '2'\nassert solution('4 6\\n2 2\\n3 1\\n3 4\\n4 1\\n5 4') == '4'\nassert solution('7 15\\n3 1\\n3 4\\n4 1\\n4 5\\n4 8\\n4 10\\n5 6\\n6 7\\n6 8\\n6 10\\n7 7\\n7 10\\n8 9\\n8 10\\n9 9\\n9 10\\n10 10') == '3'\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 144
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('16') == 'pon'\nassert solution('42') == 'hon'\nassert solution('3') == 'bon'\n\"\"\"\n\nimport sys",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"35\") == \"hon\"\nassert solution(\"123\") == \"bon\"\n",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('16') == 'pon'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('16') == 'pon'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('16') == 'pon'\nassert solution('18') == 'bon'\nassert solution('20') == 'pon'\nassert solution('24') == 'hon'\nassert solution('30') == 'hon'\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('16') == 'pon'\nassert solution('21') == 'hon'\nassert solution('26') == 'hon'\nassert solution('98') == 'bon'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('16') == 'pon'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"16\") == \"pon\"\nprint(\"Passed\")",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 2\\n') == '11'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == 11\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 2') == '11'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 2\\n') == '11'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2\\n') == '11'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '11'\nassert solution('''\n3\n2 1 3\n''') == '8'\nassert solution('''\n2\n3 3\n''') == '7'\n\n'''\n\uc138 \uac1c\uc758 \uc591\uc744 \uba39\uace0 \uc774\ub97c \ub450 \ubc88 \uc5f0\uc18d\ud558\uc5ec \ub9c8\uc2dc\uba74 \uccb4\ub825\uc744 \ucd08\uae30\ud654 \ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uccab \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \ub9c8\uc2dc\ub294 \uac83\uc5d0\uc11c\ub294 \uccb4\ub825\uc774 \ub354 \ud06c\uae30 \ub54c\ubb38\uc5d0 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uac00 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uac00 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uac00 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uac00 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uac00 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uac00 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uac00 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uac00 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uac00 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uc138 \ubc88\uc9f8\n'''\n",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\") == 11\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\\n\") == 11\n\n\"\"\"\n\n\nimport sys\n\nn = int(sys.stdin.readline())\ns = list(map(int, sys.stdin.readline().split()))\ns.sort()",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3\n3 1 2\n''') == '11'\n\nassert solution('''\n4\n3 2 2 2\n''') == '9'\n\nassert solution('''\n5\n2 1 1 2 1\n''') == '4'\n\nassert solution('''\n6\n3 3 3 3 3 3\n''') == '13'\n\nassert solution('''\n8\n1 1 1 1 1 1 1 1\n''') == '53'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"11\"\n\"\"\"\nimport sys\nfrom typing import List\n\nN = int(sys.stdin.readline())\nd = list(map(int, sys.stdin.readline().split()))\n\nsys.stdout.write(str(sum(sum(d[i:i + j]) for j in range(1, N)) for i in range(N)) + \"\\n\")\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\"\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\\n\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1\n4\n3\n''') == '''\n4\n3\n4\n'''",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(solution) == '4\\n3\\n4'\n\"\"\"\n\nimport sys\n\ntest_inp = \"\"\"\n5\n1\n4\n3\n2\n5\n\"\"\"\nsys.stdin = open('input.txt')\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1\\n4\\n3\\n') == '4\\n3\\n4\\n', 'Test 1'\nassert solution('5\\n4\\n3\\n4\\n5\\n') == '4\\n3\\n4\\n5\\n5\\n', 'Test 2'\n\"\"\"\n\n\"\"\"\nYou are given a sequence of length N: A_1, A_2,..., A_N. For each integer i between 1 and N (inclusive), answer the following question:\n - Find the maximum value among the N-1 elements other than A_i in the sequence.\n\n-----Constraints-----\n - 2 \\leq N \\leq 200000\n - 1 \\leq A_i \\leq 200000\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1\n:\nA_N\n\n-----Output-----\nPrint N lines. The i-th line (1 \\leq i \\leq N) should contain the maximum value among the N-1 elements other than A_i in the sequence.\n\n-----Sample Input-----\n5\n1\n2\n3\n4\n5\n\n-----Sample Output-----\n2\n3\n4\n5\n5\n\n\"\"\"",
        "num_ids_2": 75,
        "num_ids_4": 75
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\":\\n2\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\\n\"\nassert solution(\":\\n3\\n3\\n3\\n3\\n\") == \"3\\n3\\n3\\n\"\nassert solution(\":\\n2\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\\n\"\nassert solution(\":\\n2\\n4\\n3\\n\") == \"4\\n4\\n4\\n\"\nassert solution(\":\\n1\\n4\\n3\\n\") == \"4\\n4\\n4\\n\"\n",
        "num_ids_2": 64,
        "num_ids_4": 125
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\"\n\n\"\"\"\n\n\"\"\"\nPROGRAM:\nIf the sum of the numbers is divisible by 3, then the first number is divisible by 3.\nThe same applies to 5.\nSince the number can be divided by 3, 5 or both, then, the result will be the greatest\nnumber divisible by 3, 5 or 3 and 5.\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3\n1\n4\n3\n\"\"\") == \"\"\"4\n3\n4\n\"\"\"\n\nassert solution(\"\"\"5\n1\n3\n6\n9\n5\n\"\"\") == \"\"\"6\n6\n6\n5\n6\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == '4\\n3\\n4'\nassert solution(\"5\\n2\\n5\\n4\\n3\\n2\") == '4\\n4\\n5\\n2\\n3'\n\"\"\"\n\nfrom tools import timing\n\n@timing\n",
        "num_ids_2": 62,
        "num_ids_4": 62
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1\\n4\\n3') == '4\\n3\\n4'",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\"\n\n\"\"\"\nYou can get 4 + 3 = 7 coins by pressing the button of size 3 twice, and this is the maximum result.\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3') == '9'\nassert solution('4 2') == '6'\n\"\"\"\nimport sys\n\nA, B = map(int, sys.stdin.readline().split())\n\nres = 0\nfor i in range(A, B+1):\n    res += i\n\nprint(res)\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == 9\n\n-----Sample Input-----\n7 6\n\n-----Sample Output-----\n22\n\nYou can get 7 + 6 = 13 coins by pressing the button of size 7 twice, and this is the maximum result.\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n\") == 9\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\"\n\n\"\"\"\nSolution:\n\nThe maximum number of coins that can be obtained is the smallest of the sizes of the buttons.\nIf you press the button with the smallest size, then there are no coins left,\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n') == '9'\n\n-----",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n\") == 9\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n') == '3'\nassert solution('1 1\\n') == '1'\nassert solution('2 2\\n') == '0'\nassert solution('3 3\\n') == '2'\nassert solution('5 5\\n') == '5'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n1 1') == '0'\nassert solution('1 1\\n2 1') == '0'\nassert solution('1 1\\n2 2') == '2'\nassert solution('1 1\\n2 3') == '3'\n",
        "num_ids_2": 23,
        "num_ids_4": 53
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\\n\") == '40'\n\n\"\"\"\nimport math",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == '1'\nassert solution('1 2 1 1 1') == '0'\nassert solution('1 2 2 2 2') == '1'\nassert solution('1 2 3 3 3') == '1'\nassert solution('5 2') == '3'\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == ''\n\"\"\"\nfrom sys import stdin\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == '40'\n\"\"\"\n\n\"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n\n    Use a sliding window.\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n-30 -10 10 20 50') == '40'\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 13') == 2\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 13\") == \"2\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 15\") == \"2\"\n\"\"\"\n\na, b = map(int, input().split())\nprint(max(0, a - b + 1))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 13') == '2'\nassert solution('8 15') == '1'\n\"\"\"\n\na, b = map(int, input().split())\nsnow = b - a\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s) == '2'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 13') == '2'\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 13') == '2'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 13') == '2'\nassert solution('1 1') == '0'\nassert solution('3 3') == '0'\nassert solution('10 4') == '5'\nassert solution('2 2') == '0'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 13\") == \"2\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 13') == '2'\n\"\"\"\nimport unittest\nimport os\nfrom io import StringIO",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 4') == '3'\nprint(solution(stdin), end=\"\")\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 4\") == \"3\"\nprint(\"Success!\")\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 4\") == \"3\"\nprint(solution(\"10 4\"))\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 4\") == \"3\"\nprint(\"Passed!\")\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 4') == 3\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 4\") == 3\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 4\") == 3\n\"\"\"\n\nimport math",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input) == output\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4\") == 3\n\"\"\"\n\nH, A = input().split()\nH, A = int(H), int(A)\ncount = 0\nwhile H > 0:\n    H -= A\n    if H >= 0:\n        count += 1\n    else:\n        break\nprint(count)\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('0 75 25 100') == '50'\n\"\"\"\n\n\"\"\"\nimport sys",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 75 25 100\") == 50\nassert solution(\"0 75 25 0\") == 0\nassert solution(\"0 75 0 0\") == 0\nassert solution(\"0 100 0 0\") == 100\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 75 25 100') == '50'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''0 75 25 100''') == '50'\nassert solution('''0 75 25 100''') == '50'\n\n'''\n\n\nimport math\n\nimport fileinput\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\nprint(solution(\"0 75 25 100\"))\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 75 25 100') == '50'\nprint(solution(stdin))\n\n'''\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 75 25 100') == '50'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''0 25 100''') == '50'\nassert solution('''0 75 25 100''') == '50'\nassert solution('''0 1 1 1''') == '1'\nassert solution('''0 2 1 2''') == '2'\nassert solution('''0 0 0 0''') == '0'\n\n\"\"\"\nA = int(input())\nB = int(input())\nC = int(input())\nD = int(input())\nprint((A+B) - (C+D))\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\"\n\nfrom math import sqrt\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('105') == '1'\n\nprint(solution('105'))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('105') == 1\n\"\"\"\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('105') == '1'\n\"\"\"\n\nN = int(input())\n\ncounter = 0\nfor i in range(1, N + 1):\n    if (i % 2!= 0 and i % 5!= 0 and i % 3!= 0 and i % 7!= 0 and i % 11!= 0):\n        counter += 1\n\nprint(counter)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == '1'\nassert solution('4') == '0'\nassert solution('3') == '0'\nassert solution('2') == '0'\nassert solution('1') == '0'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\"\n\nfrom math import sqrt\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('105') == '1'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('105') == '1'\n\"\"\"\n\nimport math\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '2'\nassert solution('4 6 3') == '0'\nassert solution('1 100 100') == '0'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\\n2\\n3\") == 1\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3\\n2 2 3') == '1'\nassert solution('10 5\\n3 4 5 6') == '2'\nassert solution('5 5\\n1 1 1 1 1') == '0'\nassert solution('4 2\\n1 1 1 1') == '0'\nassert solution('4 4\\n1 1 1 1') == '0'\n",
        "num_ids_2": 33,
        "num_ids_4": 68
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n2 1\") == \"1\"\nassert solution(\"7 3\\n3 1\") == \"1\"\nassert solution(\"8 5\\n1 2 3 4 5 6 7 8\") == \"0\"\nassert solution(\"9 5\\n1 3 3 3 3 3 3 3 3\") == \"0\"\nassert solution(\"7 3\\n3 2 2\") == \"1\"\n\nsolution(\"8 5\\n3 1 1 3 3 3 3\")\n",
        "num_ids_2": 30,
        "num_ids_4": 73
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\"\n\nfrom math import *\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\\n2 3\\n1 2\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\\n2 2 3\") == \"1\"\nassert solution(\"6 3\\n2 2 5\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n6 3\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"\n4 2\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n100 100\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"\n100 101\n\"\"\"\n) == \"1\"\n\nprint(\"Passed.\")\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\") == \"1\"\n\n\"\"\"\n\nn, k = map(int, input().split())\n\nl = []\nfor i in range(k):\n    l.append(int(input()))",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n\nN = input()\n\nwhile len(N) > 3:\n    N = int(N)\n    if N % 1000 == 0:\n        N = str(N)\n        if len(N) == 3:\n            print(N)\n            break\n    N = str(N)\n    N = int(N[-3:])\n    \n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n\nN = int(input())",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nprint(n)",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('111') == '111'\nassert solution('101010') == '101010'\nassert solution('1111') == '1111'\nassert solution('10') == '10'\nassert solution('101') == '101'\n",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('111') == '111'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"111\") == \"111\"\nassert solution(\"222\") == \"222\"\nassert solution(\"333\") == \"333\"\nassert solution(\"444\") == \"444\"\nassert solution(\"555\") == \"555\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('111') == '111'\n'''\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 6 3') == '5'\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3\\n') == '5'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 6 3') == '5'\n\"\"\"\n\nA = list(map(int, input().strip().split()))\nA.sort()\ntotal_cost = 0\nfor i in range(len(A) - 1):\n    total_cost += abs(A[i + 1] - A[i])\nprint(total_cost)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input))\n\n'''",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 6 3') == '5'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 6 3\\n') == '5'\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2 3') == '3'\nassert solution('1 2 3 5') == '3'\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 6 3') == '5'\nassert solution('5 2 3') == '5'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(8) == 5\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\"\"\"\nfrom math import ceil\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8') == '5'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\"\n\ns = int(stdin.readline().strip())\n\nprint(s)",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8') == '5'\nprint('all tests passed.')",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8') == '5'",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8') == '5'\n\"\"\"\n\nimport sys\nimport math\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == 'No'\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"5 9 5 10\") == \"Yes\"\nassert solution(\"10 9 10 10\") == \"No\"\n\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 9 10 10\") == 'No'\nassert solution(\"20 10 20 20\") == 'Yes'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 9 10 10') == 'No'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"8 9 10 11\") == \"No\"\nassert solution(\"10 10 10 10\") == \"No\"\nassert solution(\"10 10 10 10\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nprint(\"Passed\")\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"100 99 100 100\") == \"No\"\nassert solution(\"100 1 100 100\") == \"Yes\"\nassert solution(\"100 100 1 100\") == \"Yes\"\nassert solution(\"1 1 1 1\") == \"Yes\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''10 9 10 10''') == 'No'\nassert solution('''1 1 1 1''') == 'No'\nassert solution('''1 1 1 1''') == 'No'\nassert solution('''1 1 1 1''') == 'No'\nassert solution('''1 1 1 1''') == 'No'\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3 4\\n10 2 5\") == \"5\"\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    # Time complexity: O(NlogN)\n    # Space complexity: O(1)\n    def solve(self, num_gems: int, values: List[int], costs: List[int]) -> int:\n        # sort the list in reverse order, then by cost\n        values, costs = zip(*sorted(zip(values, costs), reverse=True))\n        \n        total_value, total_cost = 0, 0\n        for i in range(num_gems):\n            total_value += values[i]\n            total_cost += costs[i]\n            if total_cost > total_value:\n                break\n        return total_value - total_cost\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n10 2 5\\n6 3 4\\n') == '5'\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"3\\n10 2 5\\n6 3 4\"\n) == '5'\nprint('Test pass.')",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\n\nN = int(input())\nV = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nV.sort(reverse=True)\nC.sort(reverse=True)\n\nV_sum = sum(V)\nC_sum = sum(C)\n\nprint(V_sum - C_sum)",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 4\\n5 6 7 8\\n\") == \"15\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\\n\") == \"5\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\n\n\nfrom collections import deque",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3 4 5 6\") == \"9\"\nprint(\"Test 1 PASSED\")\n\nassert solution(\"3\\n1 2 3\\n3 4 5\") == \"3\"\nprint(\"Test 2 PASSED\")\n\nassert solution(\"4\\n1 2 3 4\\n6 5 4 3\") == \"7\"\nprint(\"Test 3 PASSED\")\n\nassert solution(\"4\\n1 2 3 4\\n10 9 8 7\") == \"13\"\nprint(\"Test 4 PASSED\")\n\nassert solution(\"4\\n10 9 8 7\\n1 2 3 4\") == \"13\"\nprint(\"Test 5 PASSED\")",
        "num_ids_2": 42,
        "num_ids_4": 86
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n4\\n3\\n1\\n2') == '8'\n\"\"\"\n\nimport math",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\n\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n.#\\n#.\") == \"3 3\\n#\\n.\\n\"\nassert solution(\"2 2\\n..\") == \"1 1\\n.\\n\"\nassert solution(\"2 4\\n#.\\n##\") == \"1 1\\n#\\n.\\n\"\nassert solution(\"3 5\\n#.\\n##.\\n###\\n#.\") == \"1 1\\n#\\n.\\n\"\nassert solution(\"4 4\\n.#\\n#.\") == \"1 1\\n.\\n.\\n\"\n",
        "num_ids_2": 46,
        "num_ids_4": 107
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\\n\") == \"###\\n###\\n.##\\n\"\nassert solution(\"4 4\\n...#\\n...#\\n...#\\n...#\\n\") == \"....\\n....\\n....\\n....\\n\"\n\n\"\"\"",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n    4 4\n    ##.#\n    ....\n    ##.#\n    .#.#\n    \"\"\"\n) == \"\"\"\n    3 3\n    ##.\n    .##\n    .##\n    \"\"\"\n\nassert solution(\n    \"\"\"\n    4 4\n    ....\n    ##.#\n    ....\n    ##.#\n    \"\"\"\n) == \"\"\"\n    3 3\n    #.\n    .#\n    .#\n    \"\"\"\n\nassert solution(\n    \"\"\"\n    4 4\n    #.#\n    ....\n    ##.#\n    ....\n    \"\"\"\n) == \"\"\"\n    3 3\n    ##.\n    .#.\n    .#.\n    \"\"\"\n\nassert solution(\n    \"\"\"\n    4 4\n    ....\n    ...\n    ....\n    ....\n    \"\"\"\n) == \"\"\"\n    3 3\n    .#.\n    .#.\n    .#.\n    \"\"\"\n\nassert solution(\n    \"\"\"\n    4 4\n    ....\n    ....\n    ....\n    ....\n    \"\"\"\n) == \"\"\"\n    3 3\n    .#.\n    .#.\n    .#.\n    \"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 4\n##.#\n....\n##.#\n.#.#\n\"\"\") == \"\"\"\n3 3\n###\n###\n.##\n\"\"\"\n\nassert solution(\"\"\"\n4 4\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 4\n##.#\n....\n##.#\n.#.#''') == '''###\n###\n.##'''\n\nassert solution('''4 4\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 4\n##.#\n....\n##.#\n.#.#''') == '''###\n###\n.##'''\nassert solution('''2 2\n.#\n.#''') == '''##\n##'''\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\\n\"\nassert solution(\"2 3\\n#.#\\n.#.\") == \"##\\n.##\\n\"\nassert solution(\"3 3\\n##.\\n.#.\\n#.#\") == \"##\\n#.#\\n\"\n\"\"\"\n",
        "num_ids_2": 59,
        "num_ids_4": 88
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\\n\"\n\"\"\"",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\n\"\"\"\n\nimport math\n\nr = int(input())\n\nprint(2 * math.pi * r)\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\n\n---Problem 2---\n\nThe sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n\nFind the sum of all the primes below two million.\n\n-----Constraints-----\n - 1 \\leq n \\leq 1000000\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn\n\n-----Output-----\nPrint the sum of all the primes below n.\nYour output is considered correct if and only if its absolute or relative error from our answer is at most 10^{-2}.\n\n-----Sample Input-----\n10\n\n-----Sample Output-----\n17\n\nSince we accept an absolute or relative error of at most 10^{-2}, 17 is also an acceptable output, but 17.0 is not.\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n\") == \"30.62170212765963\\n\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == '6.28318530717958623200'\n\n\"\"\"\n\nimport math\n\nR = int(input())\n\nprint(round(2*math.pi*R, 3))\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n\") == '6.28318530717958623200'\nassert solution(\"2\\n\") == '12.566370614359172953850'\n\"\"\"\n\nimport math\nimport sys\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\n\"\"\"\n\nimport math\n\nr = int(input())\ncircumference = 2 * math.pi * r\nprint(\"{:.2f}\".format(circumference))\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '6.28318530717958623200'\nassert solution('0') == '6.28318530717958623200'\nassert solution('5') == '16.83910893386437567010'\n\nprint(\"All sample test cases passed.\")\n\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 56
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '6.28318530717958623200'\n'''\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\n\"\"\"\n\nimport math",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ASAS') == \"Yes\"\nassert solution('ASSAS') == \"Yes\"\nassert solution('SASAS') == \"No\"",
        "num_ids_2": 22,
        "num_ids_4": 34
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ASSS') == 'Yes'\nassert solution('ASSA') == 'Yes'\nassert solution('AASSA') == 'No'\nassert solution('SSS') == 'No'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"AASS\") == \"No\"\nassert solution(\"AAAS\") == \"Yes\"\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n'ASSA'\n) == 'Yes'\nassert solution(\n'AABB'\n) == 'No'\nassert solution(\n'ABBA'\n) == 'No'\nassert solution(\n'AAAB'\n) == 'Yes'\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ASSA') == 'Yes'\nassert solution('HELLO') == 'No'\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ASSS\") == \"Yes\"\nassert solution(\"AATT\") == \"No\"\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ASSA') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ASSS\") == \"Yes\"\nassert solution(\"AAAS\") == \"No\"\nassert solution(\"ASS\") == \"Yes\"\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 32
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"AAAA\") == \"No\"\nassert solution(\"ABCD\") == \"No\"\nassert solution(\"A\") == \"Yes\"\n\"\"\"\n\nimport ast\nimport sys\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\"\"\"\n\na, b = map(int, input().split())\n\nprint(-max(a - b, a + b, a * b))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('-13 3') == '-10'\nprint(solution('-13 3'))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '5 0'\n    '5 1'\n    '3 4'\n    '2 0'\n    '1 1'\n) == '4'\n\nassert solution(\n    '10 1'\n    '100 0'\n    '1 0'\n    '1 0'\n    '0 1'\n    '0 0'\n) == '110'\n\nassert solution(\n    '10 1'\n    '10 1'\n    '1 10'\n    '1 10'\n    '0 1'\n    '0 10'\n) == '10'\n\nassert solution(\n    '10 2'\n    '1 10'\n    '1 10'\n    '1 10'\n    '2 0'\n    '0 10'\n) == '10'\n\nassert solution(\n    '0 0'\n    '0 0'\n    '0 0'\n    '0 0'\n    '0 0'\n    '0 0'\n) == '0'",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\n\"\"\"\n\nfrom a1 import solution\nimport os\nimport sys\nfrom io import StringIO\nimport unittest\n\nclass Test_TC(unittest.TestCase):\n    def test_Total(self):\n        capturedOutput = StringIO()\n        sys.stdout = capturedOutput\n        solution(\"-13 3\")\n        sys.stdout = sys.__stdout__\n        self.assertEqual(capturedOutput.getvalue(), \"-10\\n\")\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('-13 3') == '-10'\nprint(solution('-13 3'))\n\n---",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2\") == \"14\", \"solution('10 2') == 14 failed\"\nassert solution(\"-10 2\") == \"-8\", \"solution('-10 2') == -8 failed\"\nassert solution(\"0 0\") == \"0\", \"solution('0 0') == 0 failed\"\n\nprint('=====> All Tests are Passed!')",
        "num_ids_2": 47,
        "num_ids_4": 69
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('-13 3') == '-10'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('-13 3') == '-10'\n\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(solution(str(input())))\nprint(solution(str(input())))",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n6 5 6 8\") == 3\n\"\"\"\nimport re\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n\"\"\"\n\n\"\"\"\nIdea:\n    The easiest solution is just traverse all the mountains to see how many inns can you see from the west.\n    For each mountain, it is easier to search the valley from the inn than from the mountain.\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\n\nn = int(sys.argv[1])\ninn_heights = [int(elem) for elem in sys.stdin.readline().strip().split()]\nassert n == len(inn_heights)\n\ncount = 0\ni = 1\nwhile i < n:\n    if inn_heights[i] <= inn_heights[i - 1]:\n        count += 1\n    i += 1\nprint(count)\n",
        "num_ids_2": 27,
        "num_ids_4": 38
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n\"\"\"\nimport sys\nimport math",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\n\n-------------Solution---------------\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n6 5 6 8\") == 3\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\"\n\nN = int(input())\nH = [int(i) for i in input().split()]\ncount = 0\nfor i in range(1, N):\n    if H[i] <= H[i - 1]:\n        count += 1\nprint(count)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\\n\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\\n\") == \"1\\n5\"\nassert solution(\"5\\n1 2 1 2 1\\n\") == \"1\\n5\"",
        "num_ids_2": 49,
        "num_ids_4": 93
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 1 2 2 1\\n') == '4\\n3 2 2 1'\nassert solution('7\\n1 2 3 1 2 3 4\\n') == '2\\n3 4'\nassert solution('5\\n1 2 1 2 1\\n') == '1\\n2 2 1'\n\nassert solution('1\\n1\\n') == '1'\nassert solution('2\\n1 1\\n') == '2\\n1 2'\n",
        "num_ids_2": 50,
        "num_ids_4": 89
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n2 2 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n2 2 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n2 2 1\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\nnumbers = list(map(int, sys.stdin.readline().strip().split()))\nstairs = [0 for _ in range(n)]\nstairs[0] = 1\nfor i in range(1, n):\n    for j in range(i):\n        if numbers[j] < numbers[i]:\n            stairs[i] = max(stairs[j] + 1, stairs[i])\n\nprint(stairs[-1])\nprint(' '.join(map(str, stairs)))\n",
        "num_ids_2": 45,
        "num_ids_4": 89
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 1 1 1') == '4\\n2\\n1 1'\nassert solution('5\\n1 2 3 4 5') == '1\\n5\\n4 3'\nassert solution('6\\n1 2 3 4 5 6') == '1\\n5\\n4 3'\nassert solution('7\\n1 2 3 4 5 6 7') == '1\\n5\\n4 3'\nassert solution('8\\n1 2 3 4 5 6 7 8') == '1\\n5\\n4 3'\n",
        "num_ids_2": 47,
        "num_ids_4": 98
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\n\n\"\"\"",
        "num_ids_2": 45,
        "num_ids_4": 85
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n2 2 1\"",
        "num_ids_2": 45,
        "num_ids_4": 67
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected_stdout\n\nprint(solution(stdin))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == '2\\n3 4'\nassert solution(\"4\\n1 1 1 1\") == '4\\n1 1 1 1'\nassert solution(\"5\\n1 2 1 2 1\") == '1\\n5'\nassert solution(\"5\\n1 2 1 2 1\") == '1\\n5'\n",
        "num_ids_2": 45,
        "num_ids_4": 85
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\n\"\"\"\n\n\n\nn = int(input())\na = [int(i) for i in input().split()]\n\ncnt = 0\nstairs = []\nfor i in range(n):\n    if a[i] not in stairs:\n        stairs.append(a[i])\n        cnt += 1\nprint(cnt)\nfor i in range(len(stairs)):\n    print(stairs[i], end=' ')\n",
        "num_ids_2": 45,
        "num_ids_4": 85
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\\n\") == \"2\\n3 4\\n\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"4\\n1 1 1 1\\n\"\nassert solution(\"5\\n1 2 1 2 1\\n\") == \"1\\n5\\n\"\nassert solution(\"5\\n1 2 1 2 1\\n\") == \"1\\n5\\n\"\n",
        "num_ids_2": 53,
        "num_ids_4": 101
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n3\") == \"1\"\nassert solution(\"9\\n10\") == \"1\"\nassert solution(\"8\\n7\") == \"2\"\nassert solution(\"7\\n21\") == \"1\"\nassert solution(\"7\\n28\") == \"4\"\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n6\\n7\\n21\\n28\\n999999999\\n999999984\\n\") == \"1\\n2\\n1\\n7\\n4\\n333333333\\n333333328\"\n\"\"\"\nimport sys\nimport math\n",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"6\") == \"2\"\nassert solution(\"7\") == \"1\"\nassert solution(\"21\") == \"7\"\nassert solution(\"28\") == \"4\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('6') == '2'\nassert solution('7') == '1'\nassert solution('21') == '7'\nassert solution('28') == '4'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n6\n7\n21\n28\n999999999\n999999984\n\"\"\") == \"\"\"\n1\n2\n1\n7\n4\n333333333\n333333328\n\"\"\"\n\nassert solution(\"\"\"\n9\n3\n6\n7\n21\n28\n999999999\n999999984\n999999998\n999999997\n\"\"\") == \"\"\"\n1\n2\n1\n7\n4\n333333333\n333333328\n33333333\n333333328\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n6\") == \"1\\n2\\n1\"\nassert solution(\"7\\n21\") == \"1\\n2\\n1\"\nassert solution(\"7\\n28\") == \"1\\n2\\n1\\n7\\n4\"\nassert solution(\"999999999\\n999999984\") == \"333333333\\n333333328\"\nprint('PASSED')\n\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 88
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n6\\n7\\n21\\n28\\n999999999\\n999999984\") == \"1\\n2\\n1\\n7\\n4\\n333333333\\n333333328\"\n\"\"\"\n\nimport sys\nfrom typing import Iterator\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n3') == '2'\nassert solution('2\\n4') == '1'\nassert solution('3\\n5') == '1'\nassert solution('3\\n9') == '4'\nassert solution('4\\n16') == '8'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\n\nassert solution('7') == 0\n\nassert solution('3') == 1\n\nassert solution('3 12') == 0\n\nassert solution('12') == 1",
        "num_ids_2": 16,
        "num_ids_4": 33
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"6\") == \"2\"\nassert solution(\"7\") == \"1\"\nassert solution(\"21\") == \"7\"\nassert solution(\"28\") == \"4\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"512 4\") == \"50\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"512 4\") == \"50\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\n\n\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\"\"\"\n\nimport sys\nn, k = map(int, sys.stdin.readline().split())\ncount = 0\n\nwhile count < k:\n    num = n\n    while num > 0:\n        num, r = divmod(num, 10)\n        count += r\n    if count == 0:\n        n -= 1\n    else:\n        n //= 10\n    count += 1\n\nprint(n)\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('512 4') == '50'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('512 4') == '50'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\nassert solution(\"7\\n2 2 3 2 1 2 2\") == \"7\\n1 2 2 2 2 3 2\"\n",
        "num_ids_2": 48,
        "num_ids_4": 95
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n5 5\"\n\"\"\"\n\nimport sys\nimport os\nfrom io import StringIO\nfrom itertools import combinations, accumulate\nfrom collections import deque, defaultdict, Counter, OrderedDict\nfrom math import sqrt\nfrom bisect import bisect_right, bisect_left, insort_left\nfrom heapq import heappush, heappop, heapify\nfrom time import time\nfrom fractions import gcd",
        "num_ids_2": 48,
        "num_ids_4": 67
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1 4\\n') == '2 1 1 2 3\\n'\nassert solution('3 7 5 1 5\\n') == '2 1 1 2 3\\n'\nassert solution('7 2 2 2 1 2 2\\n') == '7 1 2 2 2 2 3 2\\n'\nassert solution('4 2 2 2 1 2 2\\n') == '4 1 2 2 2 2 3 2\\n'\n",
        "num_ids_2": 42,
        "num_ids_4": 96
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\n\n---\n\n7\n4 3 5 1 2 2 2 1\n5\n2 1 1 2 3\n\n7\n3 7 5 1 5\n5\n2 1 2 2 2 3\n\n3\n5 1 4\n5\n2 1 5\n\n7\n2 2 3 2 1 2 2\n5\n1 2 2 2 2 3 2\n\n\n\nhttps://codeforces.com/contest/1553/submission/114850761\n\nThe maximum number of people is always less or equal to n, so n is the maximum number of people that can be in the circle.\n\n1) We create a min-heap. Every element is a tuple of (number of people, height of person).\n2) The heap is sorted by number of people.\n3) We can always add to the heap the biggest element (the person with the greatest height).\n4) If the height of the biggest element exceeds the height of the person at the beginning of the heap, we can throw out the element and repeat.\n5) We can always push the next person to the end of the heap if the height of the person is greater.\n6) We can push any element in the heap to the end of the heap if the height is greater.",
        "num_ids_2": 48,
        "num_ids_4": 67
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str([3,7,5,1,5])) == [5,2,1,1,2]\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\nassert solution(\"7\\n2 2 3 2 1 2 2\") == \"7\\n1 2 2 2 2 3 2\"\nassert solution(\"5\\n2 2 3 2 1 2 2\") == \"7\\n1 2 2 2 2 3 2\"\n\"\"\"\n",
        "num_ids_2": 47,
        "num_ids_4": 94
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 67
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5') == '2\\n5 5'\nassert solution('3\\n5 1 4') == '2\\n4 5'\nassert solution('7\\n2 2 3 2 1 2 2') == '7\\n1 2 2 2 2 3 2'",
        "num_ids_2": 48,
        "num_ids_4": 95
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 5 1 2 2 1\") == \"5\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3 5 1 2 2 1\\n') == '5\\n2 1 1 2 3'\nassert solution('5 3 7 5 1 5\\n') == '2\\n5 5'\nassert solution('3 7 5 1 5\\n') == '2\\n5 5'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 46,
        "num_ids_4": 66
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 21\\n10 8\\n7 4\\n3 1\\n5 4') == '2'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '-1'\nassert solution('4 10\\n10 8\\n7 4\\n3 1\\n5 4') == '-1'\nassert solution('4 10\\n10 8\\n7 4\\n3 1\\n5 4') == '-1'",
        "num_ids_2": 55,
        "num_ids_4": 111
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\n\n\"\"\"\n",
        "num_ids_2": 54,
        "num_ids_4": 81
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '-1'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '2'\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"0\"\n\"\"\"",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'''\n4 21\n10 8\n7 4\n3 1\n5 4\n''') == '2'\n\nassert solution(\n'''\n4 16\n10 8\n7 4\n3 1\n5 4\n''') == '-1'\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 21\n10 8\n7 4\n3 1\n5 4''') == '2'\nassert solution('''4 16\n10 8\n7 4\n3 1\n5 4''') == '-1'\nassert solution('''4 15\n10 8\n7 4\n3 1\n5 4''') == '-1'\nassert solution('''2 11\n4 4\n1 1\n4 4\n1 1\n4 4''') == '2'\nassert solution('''10 8\n10 9\n8 9\n5 5\n3 3\n5 5\n3 3\n6 6\n6 7\n6 8\n5 5\n1 1\n5 5\n1 1\n1 1\n8 9\n8 10\n8 10\n6 6\n6 8\n6 10\n6 10\n6 8\n6 8\n8 10\n8 10\n8 10\n7 9\n7 9\n7 9\n7 9\n7 9\n7 9\n7 9\n7 9\n7 9\n6 8\n6 8\n6 10\n7 10\n7 10\n6 6\n7 10\n6 7\n7 10\n6 6\n7 10\n6 7\n7 10\n6 7\n7 10\n6 7\n7 10\n6 7\n7 10\n6 7\n7 10\n6 7\n6 10\n6 10\n6 9\n6 9\n7 10\n6 10\n6 9\n6 9\n6 10\n6 10\n6 10\n6 9\n7 10\n6 10\n6 10\n6 10\n6 9\n6 10\n6 9\n6 9\n7 10\n6 10\n6 9\n6 10\n6 10\n6 10\n6 9\n7 10\n6 10\n6 9\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == '2'\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"2\"\nassert solution(\"4 19\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"-1\"",
        "num_ids_2": 58,
        "num_ids_4": 87
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\"\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\") == \"tleelte\\nqwerty\\nvvvvvv\\nabcde\"\n\"\"\"\n\nfrom typing import List, Dict, Tuple\nfrom collections import defaultdict\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 5 3') == 'tleel'\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1 1\") == \"tleel\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\n\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 5 3\\n6 1 1\\n6 6 1\\n5 2 2') == 'tleelte\\nqwerty\\nvvvvvv\\nabcde'\n\"\"\"\n\nimport collections\n\nfrom itertools import combinations, product, chain\n\nINPUT_CHUNK_SIZE = 3\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3\") == \"tleel\"\n\nassert solution(\"7 5 3\") == \"tleel\"\n\nassert solution(\"6 1 1\") == \"qwerty\"\n\nassert solution(\"6 6 1\") == \"qwerty\"\n\nassert solution(\"5 2 2\") == \"vvvvv\"",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5 3\") == \"tleel\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n\n\n\n'''",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5 3\") == \"tleel\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5 3\") == \"tleel\"\n\"\"\"\n\nimport numpy as np\nfrom collections import defaultdict\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5 3\") == \"tleel\"\n\"\"\"\nfrom typing import Tuple\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n\n--------------------------------------------------------------------------------\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 12 6\") == 12\n\n\"\"\"\n\nimport math",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('20 12 6') == 12\n\"\"\"\nfrom typing import List, Any\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20 12 6') == '12'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 12 6\") == \"12\"\nprint(solution(\"20 12 6\"))\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n3') == '2'\nassert solution('5\\n3\\n3\\n3\\n3') == '3'\n\n-----Explanation-----\nFor example, in the first sample, there is three groups of three students, and there is two groups of five students.\n-----Test Data-----\nYou can check your solution on the following data.\n\"\"\"",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8') == '2'\nassert solution('10') == '3'\nassert solution('10') == '3'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"8\\n\"\n) == \"2\"\nassert solution(\n\"7\\n\"\n) == \"1\"\nassert solution(\n\"6\\n\"\n) == \"1\"\nassert solution(\n\"3\\n\"\n) == \"0\"\n\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '8\\n'\n) == '2'\n\nassert solution(\n    '10\\n'\n) == '2'\n\nassert solution(\n    '9\\n'\n) == '2'\n\nassert solution(\n    '7\\n'\n) == '1'\n\nassert solution(\n    '6\\n'\n) == '1'",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n5\\n5\\n4\\n4\\n4\\n4') == '5'\nassert solution('5\\n4\\n4\\n4\\n4') == '4'\nassert solution('5\\n4\\n4\\n4\\n3') == '3'\nassert solution('4\\n4\\n4\\n4') == '4'\nassert solution('3\\n3\\n3\\n3') == '3'\n",
        "num_ids_2": 50,
        "num_ids_4": 91
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n') == '2'\nassert solution('1\\n') == '1'\nassert solution('3\\n') == '1'\n\"\"\"\n\n\nimport math",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('7') == '2'\nassert solution('8') == '2'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"4\"\nassert solution(\"100\") == \"11\"\nassert solution(\"1000\") == \"53\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3') == '3'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3\") == \"3\"\n\n'''\n\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3') == '3'\n\"\"\"\n\n\"\"\"\nWe have N apples and M oranges in our basket. Our sum is given by:\ns = na + nm\nNow, we need to divide the apples in the basket in three sets, with a sum of a\nset being:\na = na/3\nb = na/3 + nm/3\nc = na/3 + nm/3 + nm/3\nCan you help us to find a?\n\n-----Constraints-----\n - All values in input are integers.\n - 0 \\leq N, M \\leq 100\n - 0 \\leq s, na, nm \\leq 1000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\n\n-----Output-----\nPrint the maximum number of apple pies we can make with what we have.\n\n-----Sample Input-----\n3 5\n\n-----Sample Output-----\n2\n\"\"\"\n\nfrom typing import List\nimport math\nimport os\nimport random\nimport re\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3') == \"3\"\nassert solution('1 3') == \"3\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"3\"\nassert solution(\"5 4\") == \"3\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3') == '3'\n\"\"\"\nimport re\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3\") == \"3\"\nassert solution(\"5 6\") == \"3\"\nassert solution(\"6 4\") == \"3\"\nassert solution(\"7 8\") == \"3\"\nassert solution(\"8 2\") == \"3\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"4\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"10 10\") == \"10\"\nassert solution(\"10 10\") == \"10\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == '3'\nassert solution(\"1 1\") == '1'\nassert solution(\"1 100\") == '3'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3\\n') == '3'\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 12') == '16'\nassert solution('4 4') == '0'\nassert solution('12 12') == '0'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 12') == '16'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 12') == '16'\nassert solution('6 12') == '12'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 12\\n\") == \"16\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 12\") == \"16\"\n\"\"\"\n\nfrom __future__ import print_function",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 12\") == \"16\"\nassert solution(\"1 1\") == \"0\"\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 12') == '16'\nprint(solution('4 12'))\n\n-------------------------",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 12\\n') == '16'\n\"\"\"\n\n\"\"\"\nGiven a positive integer A and a positive integer B, print A + B if A is a divisor of B, otherwise print B - A.\n\nInput Format\nThe first line of the input contains an integer T denoting the number of test cases.\nThe next T lines contain two space-separated integers A and B.\n\nOutput Format\nPrint the required result for each test case in a new line.\n\nSample Input\n2\n2 4\n5 12\nSample Output\n8\n12\n\nExplanation\nTest Case 1: 2 + 4 = 6, 6 is divisible by 12.\nTest Case 2: 5 + 12 = 17, 17 is not divisible by 12.\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 12') == '16'\n\"\"\"\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 12\") == \"16\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\nassert solution('a') == 'No'\nassert solution('abc') == 'No'\nassert solution('chokudai') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 46
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\nassert solution(\"chokudai\") == \"No\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'\n\n\"\"\"\n\nimport sys\n\ninput_stdin = sys.stdin\ninput_lines = input_stdin.readlines()\n\nstdout = sys.stdout",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(chokudai) == \"Yes\"\nassert solution(chokudaiz) == \"Yes\"\n\"\"\"\n\n\"\"\"\nGiven two strings, check if they are one edit (or zero edits) away.\n\nNOTE: I actually haven't implemented the check\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 16') == '9'\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 16') == '9'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 16') == '9'\nassert solution('1 1') == 'IMPOSSIBLE'\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 16') == '9'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 16') == '9'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"IMPOSSIBLE\"\nassert solution(\"2 16\") == \"9\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 16') == '9'\nassert solution('2 6') == 'IMPOSSIBLE'\n\n---Problem 997/1005---\nWrite a program that takes as input a number n and a k value.\nPrint all of the numbers from 1 to n in ascending order that\nare not divisible by k.\n\n-----Constraints-----\n - 1 \\leq n \\leq 10^9\n - 1 \\leq k \\leq 10^5\n - 1 \\leq A[i] \\leq 10^9\n - k is a prime number.\n - n is an even number\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn k\n\n-----Output-----\nPrint the numbers in ascending order that are not divisible by k.\n\n-----Sample Input-----\n3 5\n\n-----Sample Output-----\n2 4\n\n---Problem 998/1006---\nWrite a program that takes as input an array of positive integers\nand a number n. The program should print the first pair of\nindices (i, j) such that the sum of the elements at those indices\nis exactly n. If no such pair exists, the program should print\nINVALID. If there are multiple such pairs, print any one.\n\n-----Constraints-----\n - There is at most one such pair.\n - 1 \\leq A[i] \\leq 10^9\n - 1 \\leq A[j] \\leq 10^9\n - 1 \\leq n \\leq 10^5\n - 1 \\leq i \\leq j \\leq 10^5\n - n \\leq 10^9\n - n is an integer\n\n-----Input-----\nInput is given from Standard Input in the following format:\nint A[n]\nint n\n\n-----Output-----\nPrint the first pair of indices (i, j) such that the sum of the\nelements at those indices is exactly n. If no such pair exists,\nprint INVALID instead.\n\n-----Sample Input-----\n2\n1 5\n2 4\n3 5\n4 2\n5 7\n6 3\n\n-----Sample Output-----\nINVALID\n1 2\n\n---Problem 999/1007---\nWrite a program that takes as input an array of positive integers\nand a number n. The program should print the first pair of\nindices (i, j) such that the product of the elements at those\nindices is exactly n. If no such pair exists, the program should\nprint INVALID. If there are multiple such pairs, print any one.\n\n-----Constraints-----\n - There is at most one such pair.\n - 1 \\leq A[i] \\leq 10^9\n - 1 \\leq A[j] \\leq 10^9\n - 1 \\leq n \\leq 10^5\n - 1 \\leq i \\leq j \\leq 10^5\n - n \\leq 10^9\n - n is an integer\n\n-----Input-----\nInput is given from Standard Input in the following format:\nint A[n]\nint n\n\n-----Output-----\nPrint the first pair of indices (i, j) such that the product of the\nelements at those indices is exactly n. If no such pair exists,\nprint INVALID instead.\n\n-----Sample Input-----\n3\n1 5\n2 4\n3 5\n4 2\n5 7\n6 3\n\n-----Sample Output-----\n1 2\n\n---Problem 1000/1008---\nWrite a program that takes as input an array of positive integers\nand a number n. The program should print the first pair of\nindices (i, j) such that the absolute difference of the product\nof the elements at those indices is exactly n. If no such pair\nexists, the program should print INVALID. If there are multiple\nsuch pairs, print any one.\n\n-----Constraints-----\n - There is at most one such pair.\n - 1 \\leq A[i] \\leq 10^9\n - 1 \\leq A[j] \\leq 10^9\n - 1 \\leq n \\leq 10^5\n - 1 \\leq i \\leq j \\leq 10^5\n - n \\leq 10^9\n - n is an integer\n\n-----Input-----\nInput is given from Standard Input in the following format:\nint A[n]\nint n\n\n-----Output-----\nPrint the first pair of indices (i, j) such that the absolute\ndifference of the product of the elements at those indices is\nexactly n. If no such pair exists, print INVALID instead.\n\n-----Sample Input-----\n4\n1 5\n2 4\n3 5\n4 2\n5 7\n6 3\n\n-----Sample Output-----\n1 2\n\n---Problem 1009/1009---\nWrite a program that takes as input an array of integers and\nan array of positive integers. The program should print the\nnumber of ways that the integers can be written as the sum of\npositive integers in the second array.\n\n-----Constraints-----\n - There is at most one such pair.\n - 1 \\leq A[i] \\leq 10^9\n - 1 \\leq A[j] \\leq 10^9\n - 1 \\leq n \\leq 10^5\n - 1 \\leq i \\leq j \\leq 10^5\n - n \\leq 10^9\n - n is an integer\n - n is at least 1\n\n-----Input-----\nInput is given from Standard Input in the following format:\nint A[n]\nint B[m]\n\n-----Output-----\nPrint the number of ways that the integers can be written\nas the sum of positive integers in the second array.\n\n-----Sample Input-----\n4\n1 5 2 3\n2 3 4\n\n-----Sample Output-----\n3\n\n---Problem 1010/1011---\nWrite a program that takes as input an array of positive\nintegers and an array of positive integers. The program\nshould print the number of ways that the integers can be\nwritten as the sum of positive integers in the second\narray.\n\n-----Constraints-----\n - There is at most one such pair.\n - 1 \\leq A[i] \\leq 10^9\n - 1 \\leq A[j] \\leq 10^9\n - 1 \\leq n \\leq 10^5\n - 1 \\leq i \\leq j \\leq 10^5\n - n \\leq 10^9\n - n is an integer\n - n is at least 1\n\n-----Input-----\nInput is given from Standard Input in the following format:\nint A[n]\nint B[m]\n\n-----Output-----\nPrint the number of ways that the integers can be written\nas the sum of positive integers in the second array.\n\n-----Sample Input-----\n4\n1 5 2 3\n2 3 4\n\n-----Sample Output-----\n3\n\n---Problem 1012/1013---\nWrite a program that takes as input an array of integers and\nan array of positive integers. The program should print the\nnumber of ways that the integers can be written as the sum\nof positive integers in the first array.\n\n-----Constraints-----\n - There is at most one such pair.\n - 1 \\leq A[i] \\leq 10^9\n - 1 \\leq A[j] \\leq 10^9\n - 1 \\leq n \\leq 10^5\n - 1 \\leq i \\leq j \\leq 10^5\n - n \\leq 10^9\n - n is an integer\n - n is at least 1\n\n-----Input-----\nInput is given from Standard Input in the following format:\nint A[n]\nint B[m]\n\n-----Output-----\nPrint the number of ways that the integers can be written\nas the sum of positive integers in the first array.\n\n-----Sample Input-----\n3\n1 5 2\n2 3 4\n\n-----Sample Output-----\n2\n\n---Problem 1014/1015---\nWrite a program that takes as input an array of positive\nintegers and a number n. The program should print the sum\nof the elements in the array modulo n.\n\n-----Constr",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 16') == '9'\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"No\"\nassert solution(\"11\") == \"Yes\"\nassert solution(\"1112\") == \"Yes\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"77\") == \"Yes\"\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"17\") == \"Yes\"\nassert solution(\"3\") == \"No\"\nassert solution(\"19\") == \"Yes\"\nassert solution(\"12\") == \"No\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"117\") == \"Yes\"\nassert solution(\"456\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"101\") == \"No\"\nassert solution(\"12\") == \"No\"\nassert solution(\"7\") == \"Yes\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('117') == 'Yes'\nassert solution('101') == 'No'\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(117)) == 'Yes'\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"117\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(117) == \"Yes\"\nassert solution(123) == \"No\"\nassert solution(907) == \"No\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 31
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5') == 'No'\nassert solution('567') == 'No'\nassert solution('577') == 'Yes'\nassert solution('778') == 'Yes'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(117) == 'Yes'\n\"\"\"\nimport re",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('12') == 'Yes'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(101) == 'Yes'\nassert solution(12) == 'Yes'\nassert solution(100) == 'No'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"13\") == \"No\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('101') == 'Yes'\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"101\") == \"Yes\"\nassert solution(\"1211\") == \"No\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 31
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12\\n\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12\\n') == 'Yes'\n\n\"\"\"\n\nimport sys\nimport math\n\nfor line in sys.stdin:\n    s = int(line)\n    print('Yes' if s % 3 == 0 else 'No')\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12\") == \"Yes\"\n\n\"\"\"\n\n\"\"\"\n\ud83c\udf4c\n\nIn this problem you will need to calculate the sum of the digits of an integer.\nLet's look at a simple example. If we want to calculate the sum of the digits of 32, we can break it down into a sum of the digits of 2 and 2 and then add the last 2.\n\n32 = 2 + 2 + 2 + 2\n2 + 2 + 2 + 2 = 10\n10 + 2 = 12\nSo, in this example, the sum of the digits of 32 is 12.\n\nTo calculate the sum of the digits of a number, we can use a while loop to break the number down into its individual digits.",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\"\n\n\"\"\"\nWe are given a polygon P in the plane, with its vertices being integer points. We will denote the vertices of P by (x_1,y_1),(x_2,y_2),...(x_n,y_n). Let (x_1,y_1) be the vertex with the smallest x-coordinate.\n\nThe area of a polygon is given by\nA = (x_n y_1 \u2212 x_1 y_n + x_2 y_1 \u2212 x_1 y_2 +... + x_n\u22121 y_1 \u2212 x_1 y_n + x_n y_2 \u2212 x_2 y_1 +... + x_n y_n \u2212 x_n y_2) / 2\nwhere we have assumed that x_n=x_1, y_n=y_1.\n\nCompute the perimeter of P.\n\n-----Constraints-----\n0 <= x_i, y_i <= 1000\n0 <= n <= 1000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nx_1 y_1\nx_2 y_2\n...\nx_n y_n\n\n-----Output-----\nPrint the perimeter of P as an integer.\n\n-----Sample Input-----\n0 0\n1 0\n0 1\n\n-----Sample Output-----\n3\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n\n-----\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 0 1\") == \"1 1 -1 0\"\n\"\"\"\n\nimport math",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0 1\") == \"1 1 -1 0\"\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 0 0 1') == '1 1 -1 0'\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\"\nfrom math import sqrt",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n\"\"\"\n\nimport math\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == \"2 4\"\nprint(\"test OK\")\n\n-----Explanation-----\nThe first step is to make the two strings into sets, so that we can compare them.\nred,blue = {'r', 'b'}\nred,blue = {'b'}, {'r'}\nNow, we have that red == blue and we know that they are not equal,\nso we return \"2 4\".\n\nYou can also solve this problem by the following code:\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''red blue\n3 4\nred''') == '2 4'\n\n'''\nred blue\n3 4\nred\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nred\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nred\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nred\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nred\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nred\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nred\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nred\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('red blue') == '2 4'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('red blue') == '2 4'\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('red blue') == '2 4'\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\nimport sys\n\nS, T = map(str, input().split())\nA, B = map(int, input().split())\nU = input()\n\nprint(A, B, end=\" \")",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('red blue') == '2 4'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"red blue\") == \"2 4\"\nprint(solution(\"red blue\"))\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abcbca') == 'No'\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_str1) == \"No\"\nassert solution(test_str2) == \"Yes\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abcabcabc') == 'Yes'\nassert solution('abcabcabcabc') == 'Yes'\nassert solution('abc') == 'No'\nassert solution('abccba') == 'No'\n\nSolution\n------",
        "num_ids_2": 23,
        "num_ids_4": 46
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1\na\n''') == 'Yes'\nassert solution('''2\naa\n''') == 'Yes'\nassert solution('''3\nab\n''') == 'Yes'\nassert solution('''4\naba\n''') == 'Yes'\nassert solution('''5\nabcabc\n''') == 'Yes'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(s) == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == 'Yes'\nprint(solution(str(input())))\n\"\"\"\nimport re",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abccba') == 'No'\n\n\"\"\"\n\nN = int(input())\nS = input()\n\nresult = None\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcabc\") == \"Yes\", \"Wrong Answer\"\nassert solution(\"abccba\") == \"No\", \"Wrong Answer\"\n\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abccba') == 'No'\n\"\"\"\n\nfrom itertools import zip_longest\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n2 2 2\") == \"0\"\nassert solution(\"3 3\\n2 1 1\") == \"3.000000\"\nassert solution(\"1 1\\n3 3 3\") == \"1.000000\"\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 52
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 1 2\") == \"3.0 0\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 1 2\\n\") == \"3.0 0\"\n\"\"\"\n\nimport sys\nimport math\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 1 2\") == \"3.0 0\"\nassert solution(\"4 5 4 5\") == \"4.0 1\"\n\n-----------------\nW H x y\n\n>>> a = 2\n>>> b = 3\n>>> c = 1\n>>> d = 2\n\n>>> a + b + c + d\n8\n\n>>> a - b - c - d\n-5\n\n>>> a * b * c * d\n24\n\n>>> a / b / c / d\n0.6666666666666666\n\n>>> a % b % c % d\n0\n\n>>> a ** b ** c ** d\n512\n\n>>> a + b\n6\n\n>>> c + d\n3\n\n>>> a + b + c + d\n10\n\n>>> a - b + c + d\n9\n\n>>> a * b + c * d\n12\n\n>>> a * b * c * d\n24\n\n>>> a / b / c + d\n1.3333333333333333\n\n>>> a / b / c - d\n-0.6666666666666666\n\n>>> a / b * c * d\n-0.6666666666666666\n\n>>> a / b / c / d\n0.1111111111111111\n\n>>> a / b / c - d\n-0.6666666666666666\n\n>>> a / b / c * d\n0.1111111111111111\n\n>>> a + b / c + d\n6.0\n\n>>> a * b / c + d\n4.666666666666667\n\n>>> a * b / c * d\n9.0\n\n>>> a * b / c / d\n0.1111111111111111\n\n>>> a * b / c - d\n-1.6666666666666667\n\n>>> a * b / c / d\n0.1111111111111111\n\n>>> a + b / c / d\n0.6666666666666666\n\n>>> a / b + c / d\n1.3333333333333333\n\n>>> a / b / c + d\n0.6666666666666666\n\n>>> a / b / c - d\n-0.6666666666666666\n\n>>> a / b / c / d\n0.1111111111111111\n\n>>> a / b / c * d\n0.1111111111111111\n\n>>> a / b / c - d\n-0.6666666666666666\n\n>>> a / b / c / d\n0.1111111111111111\n\n>>> a + b / c / d\n0.3333333333333333\n\n>>> a * b / c / d\n0.1111111111111111\n\n>>> a / b + c / d\n0.0\n\n>>> a / b / c + d\n0.0\n\n>>> a / b / c - d\n0.0\n\n>>> a / b / c / d\n0.0\n\n>>> a / b * c / d\n0.0\n\n>>> a + b * c / d\n2.0\n\n>>> a * b * c / d\n0.0\n\n>>> a / b * c / d\n0.0\n\n>>> a / b / c + d\n1.3333333333333333\n\n>>> a / b / c - d\n-0.3333333333333333\n\n>>> a / b / c / d\n0.0\n\n>>> a * b / c - d\n1.3333333333333333\n\n>>> a * b / c / d\n0.3333333333333333\n\n>>> a * b / c + d\n2.6666666666666665\n\n>>> a / b + c / d\n0.5\n\n>>> a / b / c + d\n0.5\n\n>>> a / b / c - d\n-0.5\n\n>>> a / b / c / d\n0.0\n\n>>> a / b / c * d\n0.0\n\n>>> a / b * c / d\n0.0\n\n>>> a / b * c * d\n0.0\n\n>>> a + b / c / d\n0.6666666666666666\n\n>>> a * b / c / d\n0.6666666666666666\n\n>>> a * b / c + d\n1.3333333333333333\n\n>>> a * b / c - d\n1.3333333333333333\n\n>>> a * b / c / d\n0.3333333333333333\n\n>>> a + b / c / d\n1.3333333333333333\n\n>>> a * b / c - d\n1.3333333333333333\n\n>>> a * b / c / d\n0.3333333333333333\n\n>>> a / b + c / d\n1.0\n\n>>> a / b / c + d\n1.0\n\n>>> a / b / c - d\n-1.0\n\n>>> a / b / c / d\n0.0\n\n>>> a / b * c / d\n0.0\n\n>>> a / b * c * d\n0.0\n\n>>> a / b * c + d\n2.0\n\n>>> a * b / c * d\n0.0\n\n>>> a * b / c / d\n0.0\n\n>>> a * b / c / d\n0.0\n\n>>> a / b + c / d\n0.0\n\n>>> a * b / c / d\n0.0\n\n>>> a / b + c / d\n0.0\n\n>>> a / b / c + d\n0.0\n\n>>> a / b / c - d\n-0.0\n\n>>> a / b / c / d\n0.0\n\n>>> a / b * c / d\n0.0\n\n>>> a / b * c * d\n0.0\n\n>>> a * b / c / d\n0.0\n\n>>> a * b / c + d\n2.0\n\n>>> a / b + c / d\n0.0\n\n>>> a / b / c + d\n0.0\n\n>>> a / b / c - d\n-0.0\n\n>>> a / b / c / d\n0.0\n\n>>> a / b / c * d\n0.0\n\n>>> a / b * c / d\n0.0\n\n>>> a * b / c * d\n0.0\n\n>>> a / b / c + d\n1.0\n\n>>> a / b / c - d\n1.0\n\n>>> a / b / c / d\n0.0\n\n>>> a * b / c * d\n0.0\n\n>>> a * b / c + d\n2.0\n\n>>> a / b + c / d\n0.5\n\n>>> a / b / c + d\n0.5\n\n>>> a / b / c - d\n-0.5\n\n>>> a / b / c / d\n0.0\n\n>>> a * b / c * d\n0.0\n\n>>> a / b * c / d\n0.0\n\n>>> a / b * c * d\n0.0\n\n>>> a * b / c / d\n0.0\n\n>>> a * b / c + d\n2.0\n\n>>> a / b + c / d\n0.5\n\n>>> a / b / c + d\n0.5\n\n>>> a / b / c - d\n-0.5\n\n>>> a / b / c / d\n0.0\n\n>>> a / b / c * d\n0.0\n\n>>> a / b * c / d\n0.0\n\n>>> a * b / c * d\n0.0\n\n>>> a / b * c / d\n0.0\n\n>>> a * b / c + d\n2.0\n\n>>> a / b + c / d\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 1 2\") == \"3.0 0\"\nassert solution(\"3 2 3 4\") == \"1.0 1\"\nassert solution(\"7 4 5 4\") == \"1.5 0\"\nassert solution(\"10 10 10 10\") == \"10.0 0\"\nassert solution(\"10 10 5 5\") == \"3.5 0\"\n\n\"\"\"\nimport math",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\nassert solution('1 1 1 1') == '0.000000 0'\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 1 2\") == \"3.0 0\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\nassert solution('4 4 3 6') == '16.666667 0'\nassert solution('4 4 8 9') == '16.666667 1'\nassert solution('4 4 2 1') == '4.00000 2 0'\nassert solution('2 3 3 2') == '3.333333 0'\n",
        "num_ids_2": 33,
        "num_ids_4": 67
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '0'\nassert solution('W1 H2 1 2') == '3.000000 0'\nassert solution('W3 H4 1 2') == '4.000000 0'\nassert solution('W10 H20 1 2') == '10.000000 0'\nassert solution('W100 H200 1 2') == '100.000000 0'\n",
        "num_ids_2": 28,
        "num_ids_4": 64
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('G W Y P Y W') == 'Four'\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nW W W\") == \"Three\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\nG W Y P Y W\") == \"Four\"\nassert solution(\"2\\nP Y\") == \"Two\"\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\", \"Wrong answer for empty string\"\nassert solution(\"P\") == \"Three\", \"Wrong answer for single character\"\nassert solution(\"P P P P P P\") == \"Four\", \"Wrong answer for multiple occurrences of characters\"\nassert solution(\"P P P P Y Y Y Y Y\") == \"Four\", \"Wrong answer for multiple occurrences of characters\"\nassert solution(\"W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W W",
        "num_ids_2": 34,
        "num_ids_4": 87
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\nG W Y P Y W\") == \"Four\"\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 G W P Y') == 'Four'\nassert solution('2 W P Y G') == 'Four'\nassert solution('1 W P Y G') == 'Four'\nassert solution('1 W P Y G') == 'Four'\nassert solution('3 G W P Y') == 'Four'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nP W G Y\") == \"Four\"\nassert solution(\"5\\nP P P W G G\") == \"Four\"\nassert solution(\"5\\nP W G Y W\") == \"Three\"\n\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\nP Y W\\n') == 'Four'\nassert solution('4\\nP W G\\n') == 'Four'\nassert solution('4\\nP W G Y\\n') == 'Four'\nassert solution('4\\nP W G P\\n') == 'Four'\nassert solution('5\\nP W G Y P\\n') == 'Five'\n",
        "num_ids_2": 34,
        "num_ids_4": 70
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"pwgywyw\") == \"Four\"\nassert solution(\"pwgywyww\") == \"Three\"\nassert solution(\"pwgywwy\") == \"Four\"\nassert solution(\"wwgyyyw\") == \"Four\"\nassert solution(\"pwggwyw\") == \"Four\"\n\n\"\"\"\n\n\"\"\"\n\ubb38\uc81c\n3\ubc88 \uc0c1\uc790\ub97c \ub2e4 \uc3f4 \ubd24\uc744 \ub54c, \uc0c1\uc790\uc758 \uc0c9\uc774 \ub2e4\ub978 \uc0c1\uc790\ub07c\ub9ac \uc5f0\uacb0\ub418\uc5b4 \uc788\ub294\uc9c0 \ud655\uc778\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc2dc\uc624.\n\n\uc785\ub825\n\uccab \ubc88\uc9f8 \uc904\uc5d0 \uacf5\ubc31\uc744 \uc0ac\uc774\uc5d0 \ub450\uace0 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc758 \uac1c\uc218\uac00 \uc785\ub825\ub429\ub2c8\ub2e4.\n\ub450 \ubc88\uc9f8 \uc904\ubd80\ud130 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \uac1c\uc218\ub9cc\ud07c \uc785\ub825\uc774 \uc8fc\uc5b4\uc9d1\ub2c8\ub2e4.\n\uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc5d0\ub294 \uacf5\ubc31\uc744 \uc0ac\uc774\uc5d0 \ub450\uace0 \ub2e4\uc12f \uc904\uae4c\uc9c0 \uc0c1\uc790\uc758 \ud615\ud0dc\uac00 \uc785\ub825\ub429\ub2c8\ub2e4.\n\uac01 \uc0c1\uc790\uc758 \uc22b\uc790\ub294 \uc0c1\uc790\uc5d0 \uc788\ub294 \uc22b\uc790\uc758 \ucd5c\uc18c \uac1c\uc218\ub97c \ub098\ud0c0\ub0b4\uba70 \ubaa8\ub450 0\ubcf4\ub2e4 \ud06c\uac70\ub098 \uac19\uace0, 9\ubcf4\ub2e4 \uc791\uac70\ub098 \uac19\uc740 \uc790\uc5f0\uc218\uc785\ub2c8\ub2e4.\n\n\ucd9c\ub825\n\uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc5d0 \ub300\ud574\uc11c \uadf8 \uc0c1\uc790\ub4e4\uc774 \uc5f0\uacb0\ub418\uc5b4 \uc788\uc73c\uba74 Y, \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 N\uc744 \ucd9c\ub825\ud569\ub2c8\ub2e4.\n\n\uc608\uc81c \uc785\ub825 1 \n2\n\nP W G\nY Y Y\n\n\uc608\uc81c \ucd9c\ub825 1 \nY\n\nY\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 55
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\nG W Y P Y W') == 'Four'\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"6 3 2\n2 3 1 3 4 2\"\"\") == 6\nassert solution(\"\"\"5 3 3\n1 2 6 10 3\"\"\") == 2\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 2\") == 6\nassert solution(\"5 3 3\") == 2\nassert solution(\"5 5 6\") == 2\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 2\\n1 2 3 4 2\\n\") == \"2\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5 6\\n1 2 6 10 3') == 2\n\n\"\"\"\n\n\nimport sys\n\nn, x, y = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\n\nfor i, _ in enumerate(a):\n    if _ < x:\n        a[i] = max(0, _ - x)\n    else:\n        a[i] = _ + y\n\nprint(a.count(0))\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2\\n2 3 1 3 4 2\") == \"6\"\nassert solution(\"5 3 3\\n1 2 4 2 3\") == \"2\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 3\\n1 2 6 10 3\") == 2\nassert solution(\"6 3 2\\n2 3 1 3 4 2\") == 6\n\n\n\"\"\"\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 3\\n1 2 6 10 3\\n') == 2\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 3 2\\n2 3 1 3 4 2') == 6\nassert solution('5 3 3\\n1 2 4 2 3') == 2\nassert solution('5 5 6\\n1 2 6 10 3') == 2\n\"\"\"\n",
        "num_ids_2": 35,
        "num_ids_4": 52
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3 2\\n2 3 1 3 4 2\") == \"6\"\nassert solution(\"5 3 3\\n1 2 4 2 3\") == \"2\"\n\"\"\"\n\nfrom functools import lru_cache",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 3\\n1 2 6 10 3\\n\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4 2 6 2') == '7'\n\"\"\"\nimport sys\nimport os\nimport numpy as np\nimport math",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 2 6 2\\n4 5 4 1 3\") == \"7\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 2 6 2\") == 7\nassert solution(\"4 5 4 1 3\") == 0\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 2 6 2\") == 7\nassert solution(\"1 3 2 4\") == 0\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\") == \"7\"\n\"\"\"\n\na = int(input())\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nd = [x + y for x, y in zip(b, c)]\n\nprint(d.count(max(d)))\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n4 8 2 6 2\\n4 5 4 1 3') == '7'\nassert solution('4\\n1 3 2 4\\n1 3 2 4') == '0'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8 2 6 2\\n4 5 4 1 3') == 7\n\n\"\"\"\n\n\nfrom collections import Counter",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\") == \"7\"\n\"\"\"\n\nfrom math import gcd",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('1 2 3') == 0\nassert solution('1 1 1 1 1') == 1\nassert solution('1 1 1 1') == 0\nassert solution('2 2 2 2 2') == 1\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 2 4\\n1 3 2 4\") == 0\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2 4 5 10\") == \"1 1 3 5 9\"\n\nassert solution(\"10 10000 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n\"\"\"\n",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '5\\n1 2 4 5 10'\n) == '1 1 3 5 9'\n\nassert solution(\n    '10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000'\n) == '9999 9 50605065 1 5 89 5 999999999 60506055 999999999'\n\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nprint(\"Cool!\")",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == '1 1 3 5 9'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str([1, 2, 4, 5, 10])) == '1 1 3 5 9'\nassert solution(str([1, 2, 4, 5, 10, 5])) == '1 1 3 5 9 9'\nassert solution(str([1, 2, 4, 5, 10, 5, 5])) == '1 1 3 5 9 9 9'\nassert solution(str([1, 2, 4, 5, 10, 5, 10])) == '1 1 3 5 9 9 9'\n\n\"\"\"",
        "num_ids_2": 53,
        "num_ids_4": 115
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n\n\"\"\"\n",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4\\n1 2\\n3 4\\n5 4\\n3 5') == 1\nassert solution('17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6') == 2\n",
        "num_ids_2": 94,
        "num_ids_4": 94
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\\n\") == \"1\"\n\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\\n\") == \"2\"\n\n\"\"\"\n\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self, num_v):\n        self.num_v = num_v\n        self.edges = defaultdict(list)\n        self.is_bipartite = True\n\n    def add_edge(self, source, destination):\n        self.edges[source].append(destination)\n        self.edges[destination].append(source)\n\n    def is_bipartite_helper(self, current_v, current_color):\n        for dest_v in self.edges[current_v]:\n            if self.colors[dest_v] == current_color:\n                return False\n            if self.colors[dest_v] == -1:\n                self.colors[dest_v] = 1 - current_color\n                if not self.is_bipartite_helper(dest_v, 1 - current_color):\n                    self.is_bipartite = False\n            else:\n                self.colors[dest_v] = 1 - current_color\n                if not self.is_bipartite_helper(dest_v, 1 - current_color):\n                    self.is_bipartite = False\n\n        return True\n\n    def is_bipartite(self):\n        self.colors = [-1] * self.num_v\n        for v in range(self.num_v):\n            if self.colors[v] == -1:\n                self.colors[v] = 0\n                if not self.is_bipartite_helper(v, 0):\n                    self.is_bipartite = False\n\n        return self.is_bipartite",
        "num_ids_2": 102,
        "num_ids_4": 102
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\\n\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\\n\") == \"2\"\n\n-----Tests-----\n\n\"\"\"",
        "num_ids_2": 102,
        "num_ids_4": 102
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4\\n1 2\\n3 4\\n5 4\\n3 5\") == 1\n\nprint(solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\"))\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\n\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"\n\"\"\"\n\nimport sys\nimport queue\n\n\nclass Graph:\n    def __init__(self, n: int) -> None:\n        self.vertices = [set() for _ in range(n)]\n        self.adjacency_list = [set() for _ in range(n)]\n\n    def add_edge(self, v: int, u: int) -> None:\n        self.adjacency_list[v].add(u)\n        self.adjacency_list[u].add(v)\n\n        self.vertices[v].add(u)\n        self.vertices[u].add(v)\n",
        "num_ids_2": 98,
        "num_ids_4": 98
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n1 2\\n3 4\\n5 4\\n3 5\") == '1'\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4') == ''\nassert solution('5 3\\n1 2\\n2 3') == '3'\nassert solution('4 3\\n1 2\\n2 3') == '1'\n\nassert solution('5 3\\n1 2\\n2 3\\n4 5\\n1 5') == '1'\n",
        "num_ids_2": 21,
        "num_ids_4": 59
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n') == '1'\nassert solution('2 2\\n') == '0'\nassert solution('1 3\\n') == '2'\nassert solution('2 4\\n') == '0'\n",
        "num_ids_2": 21,
        "num_ids_4": 47
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n1 2\\n3 4\\n5 4\\n3 5') == '1'\nassert solution('3 3\\n1 2\\n1 3\\n2 3') == '0'\nassert solution('6 6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 1') == '2'\nassert solution('7 7\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 1') == '2'\nassert solution('10 10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 1') == '3'\n\"\"\"\n\nfrom collections import deque\n",
        "num_ids_2": 50,
        "num_ids_4": 120
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == 1\n\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == 2\n",
        "num_ids_2": 94,
        "num_ids_4": 94
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == '1'\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == '4'\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == '0'\n\nassert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n3 4\\n4 5\") == '1'\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == '4'\n",
        "num_ids_2": 66,
        "num_ids_4": 122
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\\n\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\\n\") == \"0\"\n\n\"\"\"\n",
        "num_ids_2": 70,
        "num_ids_4": 95
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n\"\"\"\nimport sys",
        "num_ids_2": 66,
        "num_ids_4": 89
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\n\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\n\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n\n\"\"\"\n",
        "num_ids_2": 66,
        "num_ids_4": 89
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == 1\n\nassert solution(\"1 1 2\\n2 3\\n1 3\\n\") == 0\n\nassert solution(\"1 1 2\\n2 2\\n1 3\\n\") == 0\n\nassert solution(\"1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == 4\n\nassert solution(\"1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == 4",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\n\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\n\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\n\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\n\n\"\"\"\n\nimport sys\nimport os",
        "num_ids_2": 66,
        "num_ids_4": 122
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\") == \"4\"\nassert solution(\"3\\n1 1 2\") == \"0\"\nassert solution(\"5\\n1 0 0 0 2\\n2 3\") == \"4\"\nassert solution(\"5\\n1 0 0 0 2\\n2 3\\n2 4\\n3 5\") == \"0\"\n",
        "num_ids_2": 42,
        "num_ids_4": 78
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\n\n\"\"\"\n\n\n\nimport sys\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('1 2\\n') == ''\nassert solution('1 2 3\\n') == ''\nassert solution('1 2 3 4\\n') == ''\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 1\\n2 3\\n2 4\\n2 5\\n\") == '1'\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n2 4\\n2 5\\n\") == '4'\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == '0'\n",
        "num_ids_2": 63,
        "num_ids_4": 98
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\n\"\"\"\n\nimport math",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\naz\\nbf\") == \"bc\"\nassert solution(\"5\\nafogk\\nasdji\") == \"alvuw\"\nassert solution(\"6\\nnijfvj\\ntvqhwp\") == \"qoztvz\"\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 37,
        "num_ids_4": 62
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"alvuw\"\nassert solution(\"nijfvj\") == \"qoztvz\"\n",
        "num_ids_2": 20,
        "num_ids_4": 48
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('afogk') == 'alvuw'\nassert solution('asdji') == 'qoztvz'\nassert solution('nijfvj') == 'tvqhwp'\n\n\"\"\"\n\n\nimport math\n",
        "num_ids_2": 29,
        "num_ids_4": 46
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"zv\") == \"b\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"afogk\") == \"qxugw\"\nassert solution(\"asdji\") == \"ijvtu\"\nassert solution(\"abc\") == \"abc\"\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/525f3eda17c7cd9f9e000b39/train/python\n\nYou are given two strings, $s$ and $t$. String $s$ is said to be a predecessor of $t$ if the set of letters of $s$ is a subset of the corresponding letters of $t$. You are required to print the longest possible length of the substring of $s$ that is a predecessor of $t$. If there are no such possible substrings of $s$ then print -1.\n\nInput Format:\n\nThe first line of the input contains T, the number of test cases.\n\nThe first line of the test case will contain a single string, $t$\n\nThe second line of the test case will contain a single string, $s$\n\nConstraints:\n\n1<= T <= 100\n\n1 <= |t|, |s| <= 10^6\n\nThe letters of each string will be lowercase.\n\nOutput Format:\n\nFor every test case, print the length of the longest possible substring of $s$ that is a predecessor of $t$. Print -1 if there is no such possible sub-string.\n\nSample Input 0\n\n2\nabc\naabc\n\nSample Output 0\n\n2\n3\n\nSample Input 1\n\n2\na\nb\n\nSample Output 1\n\n-1\n1\n\nSample Input 2\n\n1\nabba\n\nSample Output 2\n\n4\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 39
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\n\nassert solution(\"az\", \"afogk\") == \"bf\"\nassert solution(\"bf\", \"afogk\") == \"bc\"\n\nassert solution(\"az\", \"asdji\") == \"alvuw\"\n",
        "num_ids_2": 20,
        "num_ids_4": 50
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"nijfvj\") == \"qoztvz\"\nassert solution(\"asdji\") == \"alvuw\"\nassert solution(\"vqhwp\") == \"qoztvz\"\n\nprint(solution(\"afogk\"))\nprint(solution(\"asdji\"))\nprint(solution(\"tvqhwp\"))\n\n\"\"\"\n\n\n\"\"\"\nO(n) runtime, O(n) space\nhttps://leetcode.com/problems/median-of-two-sorted-arrays/discuss/323540/Python-easy-to-understand-solution-with-detailed-explanation\n\nmedian = (n+m+1) / 2 = (n+m) / 2 + 1\nmedian is the element on index (n+m) / 2 if it exists.\n\nIf we sort these two arrays, we know that the median is somewhere between\nthe two elements on the median index, the element on index (n+m) / 2 if it exists.\nIf we sort the two arrays in ascending order, the element on index (n+m) / 2 is the median.\n\nIn short:\n\nSorting the two arrays will give us one sorted array.\nWe know that the median is somewhere between the two elements on index (n+m) / 2 if it exists.\nIf the length of one of the arrays is 0, we know that the median is the non-empty array.\nTherefore, the median will be the element on index (n+m) / 2 if it exists.\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 51
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\n\n\"\"\"\n\n\"\"\"\n-----Solution-----\n\nI will look for all possible solutions, since there can be multiple answers.\n\nI will iterate over all possible team sizes.\n\nFor each team size, I will iterate over all possible teams of that size.\n\nI will iterate over all possible combinations of students in a team.\n\nI will remove impossible combinations.\n\nTime complexity: O(n^2*k), since there can be maximum of k different combinations.\n\nSpace complexity: O(n^2*k), since I have to store at most n^2*k numbers.\n\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n",
        "num_ids_2": 41,
        "num_ids_4": 64
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\\n\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\\n\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\\n\") == \"YES\\n1 2 3 4\"\n\"\"\"\n",
        "num_ids_2": 45,
        "num_ids_4": 70
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == 'YES\\n1 2 5'\nassert solution(\"5 4\\n15 13 15 15 12\") == 'NO'\nassert solution(\"4 4\\n20 10 40 30\") == 'YES\\n1 2 3 4'\n",
        "num_ids_2": 41,
        "num_ids_4": 64
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n15 13 15 15 12') == 'YES\\n1 2 5'\nassert solution('5 4\\n15 13 15 15 12') == 'NO'\nassert solution('4 4\\n20 10 40 30') == 'YES\\n1 2 3 4'\n\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().strip().split())\narr = list(map(int, sys.stdin.readline().strip().split()))\n\narr.sort()",
        "num_ids_2": 41,
        "num_ids_4": 64
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n15 13 15 15 12') == 'YES\\n1 2 5'\nassert solution('4 4\\n20 10 40 30') == 'YES\\n1 2 3 4'\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\\n\") == \"YES\\n1 2 5\"\nassert solution(\"4 4\\n20 10 40 30\\n\") == \"YES\\n1 2 3 4\"\n\"\"\"\n\nimport sys\nimport itertools",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n\n\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 64
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n\"\"\"\n\n\"\"\"\nThe goal in this problem is to write the lowest possible code that checks whether it is possible to form a team of students of specified size such that all students in this team have different grades.\n\n\n\n-----------------------\n\nYou have been given an array of integers representing grades for $n$ students. You want to form a team of students of a specified size ($k$) such that all members of this team have different grades. If it is impossible to form a team of desired size, print 'NO' (without quotes). Otherwise, print 'YES', and then print $k$ integers, where the $i$-th integer is the index of the student from the beginning of the array who belongs to the $i$-th team. If there are multiple answers, print any of them.\n\nFor example, if you are given array $[4, 4, 2, 2, 4, 4, 2, 2]$, and $k$ = 3, then you should print:\n\nNO\n\nbecause there is no way to choose $3$ students from the array so that all their grades are different.\n\nOn the other hand, if $k = 4$ and array $[4, 4, 2, 2, 4, 4, 2, 2]$, then you should print:\n\nYES\n\n4 4 4 2 2 \n\nbecause you can choose students 1, 2, 4 and 5 to form a team of size 4.\n\nOn the other hand, if $k = 2$ and array $[4, 4, 2, 2, 4, 4, 2, 2]$, then you should print:\n\nNO\n\nbecause there is no way to choose $2$ students from the array so that all their grades are different.\n\nOn the other hand, if $k = 3$ and array $[4, 4, 2, 2, 4, 4, 2, 2]$, then you should print:\n\nNO\n\nbecause there is no way to choose $3$ students from the array so that all their grades are different.\n\n\n\n-----------------------\n\nInput\nThe first line contains two integers $n$ and $k$ (1\u2264$k$\u2264$n$\u2264100) \u2014 the number of students and the desired size of a team.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ (1\u2264$a_i$\u2264100) \u2014 grades for $n$ students.\n\n\nOutput\nIf it is impossible to form a team of size $k$ such that all its members have different grades, print \"NO\" (without quotes). Otherwise, print \"YES\", and then print $k$ distinct integers from $1$ to $n$ which should be the indices of students in the team you form. If there are multiple answers, print any of them.\n\n\n\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 64
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == \"NO\"\nassert solution('a') == \"YES\"\nassert solution('a\\n1\\n2\\n3\\n') == \"NO\"\nassert solution('a\\n1\\n2\\n3\\n0\\n') == \"NO\"\nassert solution('a\\n1\\n2\\n3\\n0\\n') == \"NO\"\n",
        "num_ids_2": 20,
        "num_ids_4": 65
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9\\n5 1 3 6 8 2 9 0 10') == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution('4\\n2 1 3 0') == 'NO\\n0 0 0 1'\nassert solution('7\\n1 2 3 0 4 5 6') == 'YES\\n0 1 0 1 1 1 1 1'\nassert solution('7\\n3 2 1 0 4 5 6') == 'YES\\n0 1 1 1 1 1 1 1'\n",
        "num_ids_2": 54,
        "num_ids_4": 112
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"4\\n4 1 1 1\") == \"NO\"\nassert solution(\"7\\n5 0 1 2 2 1 3\") == \"YES\\n0 1 1 1 1 0 0 1\"\nassert solution(\"10\\n1 1 1 2 2 2 2 2 3 3 3\") == \"NO\"\nassert solution(\"4\\n4 1 1 1\") == \"NO\"\n",
        "num_ids_2": 48,
        "num_ids_4": 100
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 5 6 2\\n\") == \"YES\\n1 1 1 0 1\"\nassert solution(\"7\\n1 2 3 4 5 6 7\\n\") == \"NO\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\\n\") == \"YES\\n1 1 1 0 1 0 1 1 0 1\"\nassert solution(\"10\\n10 9 8 7 6 5 4 3 2 1\\n\") == \"YES\\n1 1 1 0 1 0 1 1 0 1\"\n",
        "num_ids_2": 47,
        "num_ids_4": 119
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"4\\n2 1 3 4\") == \"NO\\n0 1 1 1\"\nassert solution(\"5\\n1 2 4 0 2\") == \"NO\\n0 1 1 1\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"YES\\n0 0 0 0 1 1 1\"\n\"\"\"\n\n\nimport re\n",
        "num_ids_2": 54,
        "num_ids_4": 104
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 3 6 8 2 9 0 10\") == 'YES\\n1 0 0 0 0 1 0 1 0'\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 8 9 10 11 12 13 14 15\") == \"NO\"\nassert solution(\"2 1 5 3 4\") == \"YES\"\nassert solution(\"8 7 10 10 1 5 3 4\") == \"YES\"\nassert solution(\"3 1 5 10 2 4\") == \"NO\"\nassert solution(\"1 2 4 3\") == \"YES\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\n",
        "num_ids_2": 58,
        "num_ids_4": 116
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\nprint(solution(\"5\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\"))\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2 3 7\") == \"3\"\nassert solution(\"100 51 51 51\") == \"0\"\nassert solution(\"1234 1 100 199\") == \"1134\"\nassert solution(\"1000000000 1 1 1000000000\") == \"0\"\n",
        "num_ids_2": 26,
        "num_ids_4": 57
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 2 3 7') == '3'\nassert solution('100 51 51 51') == '0'\nassert solution('1234 1 100 199') == '1134'\nassert solution('1000000000 1 1 1000000000') == '0'\n",
        "num_ids_2": 26,
        "num_ids_4": 57
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000') == '3\\n0\\n1134\\n0'\nassert solution('4\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000') == '0\\n0\\n1134\\n0'\nassert solution('4\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000') == '0\\n0\\n1134\\n0'\nassert solution('4\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000') == '0\\n0\\n1134\\n0'\n\"\"\"\n\nimport sys",
        "num_ids_2": 87,
        "num_ids_4": 171
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\"\"\") == \"3\\n0\\n1134\\n0\"\nassert solution(\"\"\"4\n1 10 50 4\n12345 3 7 9\n1234 1 100 199\n1000000000 1 1 1000000000\n\"\"\") == \"0\\n0\\n1134\\n0\"\nassert solution(\"\"\"4\n1 10 50 4\n12345 3 7 9\n1234 1 100 199\n1000000000 1 1 1000000000\n\"\"\") == \"0\\n0\\n1134\\n0\"\n\n\"\"\"\n\nimport numpy as np",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('5\\n1 2 3 4\\n1 1 2 4\\n1 2 1 2\\n1 2 2 3\\n1 2 2 3\\n') == '3'\nassert solution('3\\n1 2 3\\n1 1 2\\n') == '0'\n\n-----Notes-----\n\nYou are supposed to output $t$ integers in the sequence.\n\"\"\"\n",
        "num_ids_2": 50,
        "num_ids_4": 72
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000') == '3\\n0\\n1134\\n0'\n\"\"\"\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2 3 5 7\\n1 1 1 1\\n2 1 1 1\") == '3\\n0\\n1\\n0'\nassert solution(\"1\\n3 1 5 1\\n2 2 2 2\\n2 2 2 2\") == '3\\n0\\n1\\n0'\nassert solution(\"1\\n1 1 1 1\\n2 2 2 2\\n2 2 2 2\") == '0\\n0\\n0'\nassert solution(\"1\\n1 1 1 1\\n1 1 1 1\") == '0\\n0\\n0'\nassert solution(\"1\\n2 2 2 2\\n1 1 1 1\") == '1\\n0\\n1'\n",
        "num_ids_2": 74,
        "num_ids_4": 136
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000''') == '''3\n0\n1134\n0'''\n\n\"\"\"\n\nfrom math import gcd\nfrom collections import Counter",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\n\nprint('Hooray!')\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 47
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\n\nprint(solution(input()))\n",
        "num_ids_2": 18,
        "num_ids_4": 39
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n\") == \"1\"\nassert solution(\"4\\n\") == \"3\"\nassert solution(\"8\\n\") == \"1260\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n') == '1'\nassert solution('4\\n') == '3'\nassert solution('8\\n') == '1260'\nassert solution('20\\n') == '12164510040883200'\nprint('The local tests are done. Click on \"Check\" for more details about testing.')\n",
        "num_ids_2": 24,
        "num_ids_4": 55
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\nassert solution(\"20\") == \"12164510040883200\"\n",
        "num_ids_2": 20,
        "num_ids_4": 47
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n\") == \"1\"\nassert solution(\"4\\n\") == \"3\"\nassert solution(\"8\\n\") == \"1260\"\nassert solution(\"20\\n\") == \"12164510040883200\"\nassert solution(\"2\\n\") == \"1\"\n",
        "num_ids_2": 24,
        "num_ids_4": 55
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\nassert solution(\"20\") == \"12164510040883200\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 47
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '3'\nassert solution('2') == '1'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\n\"\"\"\n\nimport math\nfrom math import factorial\nfrom functools import reduce",
        "num_ids_2": 20,
        "num_ids_4": 47
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n') == '1'\nassert solution('4\\n') == '3'\nassert solution('8\\n') == '1260'\nassert solution('20\\n') == '12164510040883200'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 55
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == '1'\nassert solution('4\\n') == '3'\nassert solution('8\\n') == '1260'\n\n\"\"\"\n\nfrom math import factorial\n",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    'cccaabababaccbc'\n) == 'cccbbabaccbc'\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('u') == ''\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"u\") == \"\"\nassert solution(\"aabbccc\") == \"aaabbccc\"\nassert solution(\"aaaabbccc\") == \"aaaaaaaaa\"\nassert solution(\"aaaabccc\") == \"aaaaaaaaa\"\n",
        "num_ids_2": 29,
        "num_ids_4": 60
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('u') == \"\"\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 50
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 63
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\nassert solution('u') == ''\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aabbbccc\") == \"ccc\"\nassert solution(\"aabbcccc\") == \"\"\nassert solution(\"abccba\") == \"b\"\n\nprint(solution('aabbbccc'))\nprint(solution('aabbcccc'))\nprint(solution('abccba'))\n",
        "num_ids_2": 26,
        "num_ids_4": 38
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n\n\"\"\"\n\n\nimport sys\nimport os",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n') == 20\n\"\"\"\n\nimport math\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == '8'\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n\n\"\"\"",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\") == \"8\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\nprint(solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\"))\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == '8'\nassert solution('''\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n''') == '20'\n'''\n\n\n'''\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\nassert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n') == '20'\n\"\"\"\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\ns = [0] * n\nfor i in range(m):\n    d, t = map(int, input().split())\n    s[t - 1] = d\n\nc = 0\nj = 0\nfor i in range(n):\n    if s[i] == 0:\n        c += a[i]\n        j = i + 1\n    else:\n        break\n\ndp = [None] * (n + 1)\ndp[0] = 0\nfor i in range(j):\n    dp[i + 1] = c\n    for j in range(n):\n        if dp[i] >= s[j] and s[j] >= 0:\n            dp[i + 1] = min(dp[i + 1], dp[i] + a[j])\n\nprint(dp[-1])\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_data) == test_result\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_DATA = [line for line in INPUT_LINES]\ndata = {\n    'n': int(INPUT_DATA[0].split(' ')[0]),\n   'm': int(INPUT_DATA[0].split(' ')[1]),\n    'k': [int(x) for x in INPUT_DATA[1].split(' ')],\n    'd': [int(x) for x in INPUT_DATA[2:2+m]],\n    't': [int(x) for x in INPUT_DATA[2+m:]]\n}\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == '8'\nprint(solution(input()))\n\n'''\n[hint: https://tproger.ru/translations/algorithms/choproject-1]\n'''\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5 1 2 0 2 0\") == \"2\"\nassert solution(\"4 2 1 3 2\") == \"6\"\nassert solution(\"4 3 1 3 2\") == \"11\"\n",
        "num_ids_2": 30,
        "num_ids_4": 44
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n.*\\n.*\\n.*\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\n\"\"\"\n\n\n\nclass Solution:\n    def solution(self, input: str) -> str:\n        data = input.split(\"\\n\")\n        n, m = map(int, data[0].split())\n        grid = [[i for i in j] for j in data[1:]]\n\n        def dfs(i, j, visited):\n            if grid[i][j] == \"*\" or (i, j) in visited:\n                return\n            visited.add((i, j))\n            for k, l in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n                if 0 <= k < n and 0 <= l < m and grid[k][l] == \"*\" and (k, l) not in visited:\n                    dfs(k, l, visited)\n\n        stars = set()\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == \"*\":\n                    dfs(i, j, set())\n                    stars.add(len(stars) + 1)\n\n        if not stars:\n            return \"-1\"\n        return \" \".join(map(str, stars))\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\n",
        "num_ids_2": 70,
        "num_ids_4": 123
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\".**...****\") == \"3 4 1\"\nassert solution(\"**..***\") == \"3 4 1\"\nassert solution(\"*******\") == \"3 4 1\"\nassert solution(\"*******\") == \"3 4 1\"\nassert solution(\"**.......\") == \"2 2 1\"\n",
        "num_ids_2": 29,
        "num_ids_4": 55
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n.*\\n.*\\n*.\") == \"3\"\nassert solution(\"5 5\\n.*\\n.*\\n.*\\n.*\\n.*\") == \"2\"\nassert solution(\"3 3\\n.*\\n.*\\n.*\") == \"-1\"\nassert solution(\"3 3\\n.\\n.*\\n.*\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*\\n.*\") == \"3\"\n",
        "num_ids_2": 46,
        "num_ids_4": 86
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........''') == '''\n3\n3 4 1\n3 5 2\n3 5 1'''\n\nassert solution('''\n5 5\n.*...\n****.\n.****\n..**.\n.....''') == '''\n-1'''\n\nassert solution('''\n5 5\n.*...\n***..\n.*...\n.*...\n.....''') == '''\n-1'''\n\nassert solution('''\n3 3\n*.*\n.*.\n*.*''') == '''\n-1'''\n\nassert solution('''\n5 5\n.*...\n.*.\n*.*\n.*...\n.....''') == '''\n-1'''\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n.*\\n.*\\n.*\\n\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"3 3\\n.*\\n.*\\n.*\\n\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"5 5\\n.*\\n.*\\n.*\\n.*\\n.*\\n\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"5 5\\n.*\\n.*\\n.*\\n.*\\n.*\\n\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"3 3\\n.*\\n.*\\n.*\\n\") == \"-1\"\n",
        "num_ids_2": 74,
        "num_ids_4": 160
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n.*\\n.*\\n.*') == '-1'\nassert solution('5 5\\n.*\\n.*\\n.*\\n.*\\n.*') == '-1'\nassert solution('5 5\\n.*\\n.*\\n.*\\n.*\\n.*') == '3'\nassert solution('5 5\\n***\\n***\\n***\\n***\\n***') == '3'\nassert solution('5 5\\n**.\\n**.\\n**.\\n**.\\n**') == '2'\n",
        "num_ids_2": 48,
        "num_ids_4": 100
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5') == '-1'\nassert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....') == '3\\n2 2 1\\n3 3 1'\nassert solution('3 3\\n*.*\\n.*.\\n*.*') == '-1'\nassert solution('3 3\\n.*.*\\n.*.\\n*.*') == '2\\n2 2 1'\nassert solution('3 3\\n*.*\\n.*.\\n*.*\\n*.*') == '3\\n3 3 1\\n3 4 1'\n",
        "num_ids_2": 53,
        "num_ids_4": 105
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\n",
        "num_ids_2": 100,
        "num_ids_4": 200
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n.*\\n.*\\n.*') == 3\nassert solution('5 5\\n.*\\n.*\\n.*\\n.*') == -1\nassert solution('5 5\\n.*\\n.*\\n.*\\n.*') == -1\n",
        "num_ids_2": 40,
        "num_ids_4": 62
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"555\") == \"Yes\"\n\n-----Test Case 1-----\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('575') == 'Yes'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(0) == \"Yes\"\nassert solution(\"577\") == \"Yes\"\nassert solution(\"123\") == \"No\"\nassert solution(\"333\") == \"No\"\nassert solution(\"124\") == \"No\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('575') == 'Yes'\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"10\") == \"No\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"575\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('876') == 'Yes'\nassert solution('89') == 'No'\nassert solution('222') == 'Yes'\nassert solution('111') == 'Yes'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('575') == \"Yes\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"101\") == \"No\"\nassert solution(\"1010\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 31
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"5\") == \"No\"\nassert solution(\"9\") == \"Yes\"\nassert solution(\"912\") == \"No\"\nassert solution(\"101\") == \"Yes\"\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4\\n') == 'Alice'\nassert solution('8 6\\n') == 'Bob'\nassert solution('8 6\\n') == 'Draw'\nassert solution('2 2\\n') == 'Draw'\nassert solution('3 4\\n') == 'Draw'\n\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('7 8') == 'Bob'\nassert solution('4 6') == 'Draw'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 6\") == \"Alice\"\n\n\"\"\"\n\nimport unittest\nfrom unittest import mock\n\nfrom file_reader import FileReader\n\nclass Test_Exercise1(unittest.TestCase):\n    def test_1(self):\n        with mock.patch(\"builtins.open\", mock.mock_open(read_data=\n                                                        \"8 6\\n\"\n                                                        \"Alice\")) as m:\n            solution = FileReader('file_name.txt')\n            self.assertEqual(solution.file_reader(), \"Alice\")",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 6\") == \"Alice\"\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '8 6'\n) == 'Alice'\nassert solution(\n    '4 2'\n) == 'Bob'\nassert solution(\n    '5 9'\n) == 'Draw'\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"4 5\") == \"Bob\"\nassert solution(\"2 2\") == \"Draw\"\nassert solution(\"2 3\") == \"Alice\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7 2\n3 4\n8 5\n9 6\n7 1''') == 'Bob'\nassert solution('''5 2\n9 7\n7 6\n3 4\n8 1''') == 'Alice'\nassert solution('''7 4\n5 8\n9 6\n3 2\n1 3''') == 'Draw'\nassert solution('''1 2\n9 7\n5 6\n3 4\n8 1''') == 'Alice'\nassert solution('''8 1\n7 2\n6 9\n4 5\n3 3''') == 'Draw'\n\n''''\n7 2\n3 4\n8 5\n9 6\n7 1\n\n8 is written on Alice's card, and 6 is written on Bob's card.\nAlice has the stronger card, and thus the output should be Alice.\n'''",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 6\") == \"Alice\"\n\nassert solution(\"2 1\") == \"Draw\"\n\nassert solution(\"1 2\") == \"Bob\"\n\"\"\"\n\nfrom collections import namedtuple\nfrom itertools import groupby\n\nPlayer = namedtuple(\"Player\", [\"card\", \"strength\"])",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 6\\n') == 'Alice'\nassert solution('8 1\\n') == 'Bob'\nassert solution('2 2\\n') == 'Draw'\nassert solution('2 1\\n') == 'Draw'",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('3 3') == 'Draw'\nassert solution('5 5') == 'Draw'\nassert solution('5 5') == 'Draw'\nassert solution('6 9') == 'Alice'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"hello,world,goodbye\") == \"hello world goodbye\"\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\n-----Explanation-----\nWe can replace the comma with a space by looping over the string and replacing every, with a space.\n\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\"\n\ns = input()\n\nprint(s.replace(',',''))\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(s) == answer\n\n\"\"\"\n\ns = stdin.split(\",\")\nprint(s)\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 2\n2 0\n0 0\n-1 0\n1 0''') == '2\\n1'\n\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"2 2\\n0 0\\n-1 0\\n1 0\") == \"1\\n1\"\nassert solution(\"2 2\\n-1 0\\n1 0\") == \"1\\n1\"\n",
        "num_ids_2": 58,
        "num_ids_4": 81
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"3 2\\n1 1\\n1 -1\\n-1 1\") == \"2\\n2\"\nassert solution(\"4 2\\n1 1\\n1 -1\\n-1 1\\n-1 1\") == \"1\\n1\"\nassert solution(\"2 2\\n2 -2\\n0 0\\n-1 0\") == \"1\\n2\"\nassert solution(\"2 2\\n0 -2\\n0 0\\n-1 0\") == \"1\\n2\"\n",
        "num_ids_2": 59,
        "num_ids_4": 120
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n\"\"\"\n\nimport unittest",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n\") == \"2\\n1\"\nassert solution(\"3 4\\n3 -1\\n-1 0\\n1 1\\n\") == \"0\\n0\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 63,
        "num_ids_4": 63
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"2 2\\n1 1\\n2 1\") == \"2\\n1\"\nassert solution(\"3 3\\n3 -7\\n4 -1\\n-1 0\\n1 2\") == \"0\\n1\"\nassert solution(\"5 5\\n1 1\\n3 3\\n4 5\\n0 0\\n2 4\") == \"0\\n1\"\n\"\"\"",
        "num_ids_2": 53,
        "num_ids_4": 120
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n2 0\\n0 0\\n-1 0\\n1 0') == '2\\n1'\nassert solution('2 2\\n-2 0\\n0 0\\n-1 0\\n1 0') == '1\\n1'\n\"\"\"",
        "num_ids_2": 63,
        "num_ids_4": 63
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n2 0\\n0 0\\n-1 0\\n1 0') == '2\\n1'\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n\") == '2\\n1'\n\"\"\"\n\nfrom collections import namedtuple\n\nInput = namedtuple('Input', 'n m a b c d')",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == '14'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == 14\n\"\"\"\n\n\"\"\"\nGiven an integer a as input, print the value of a + a^2 + a^3 +... + a^n, where n is a number entered by the user.\n\n-----Constraints-----\n - 1 \\leq a \\leq 10\n - a is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\na\n\n-----Output-----\nPrint the value of a + a^2 + a^3 +... + a^n, where n is a number entered by the user.\n\n-----Sample Input-----\n3\n\n-----Sample Output-----\n16\n\nWhen a = 3, we have a + a^2 + a^3 +... + a^3 = 1 + 8 + 27 +... = 16.\nPrint the answer as an input. Outputs such as 16.0 will be judged as incorrect.\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(2) == 14\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"14\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1) == 1\nassert solution(2) == 4\nassert solution(3) == 8\nassert solution(4) == 16\nassert solution(5) == 25\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"14\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"14\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '14'\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == '14'\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"14\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\nassert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n.\") == \"No\"\nassert solution(\"3 2\\n.#.\\n.#.\\n#.\\n#.\") == \"No\"\nassert solution(\"3 2\\n#.\\n#.\\n#.\\n.\") == \"Yes\"\nassert solution(\"3 2\\n#.\\n#.\\n#.\\n#.\") == \"No\"\n",
        "num_ids_2": 51,
        "num_ids_4": 102
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('.#.#\\n.#.#\\n#.##\\n#.##') == 'Yes'\n\n\"\"\"\n\nfrom __future__ import annotations\n\nclass Char:\n    def __init__(self, char: str):\n        self.char = char\n\n    def __eq__(self, other: Char) -> bool:\n        return self.char == other.char\n\n    def __repr__(self) -> str:\n        return self.char\n\n\nclass Pixel:\n    def __init__(self, char: Char):\n        self.char = char\n\n    def __repr__(self) -> str:\n        return self.char.__repr__()\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.\") == \"Yes\"\nassert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.#\\n.\") == \"No\"\n\"\"\"\n\n\"\"\"\nIn this problem, you have to compute the number of ways to fill a grid of size n x m with rectangles.\n\nThere are many ways to solve this problem. You can use dynamic programming to solve this problem. \n\nThe state of the grid is represented by a 2D array of boolean values, where true values correspond to rectangles. \n\nA rectangle of size s x t is represented by a 2D array of size s + 1 x t + 1, where the first and last rows and columns are filled with False values. \n\nThe rectangle of size s x t is filled with a rectangle if all of its cells are filled with rectangles. \n\nThe result is the number of ways to fill the grid.\n\nWrite a function:",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\") == \"Yes\"\nassert solution(\"3 2\\n#.#\\n.#.\") == \"Yes\"\nassert solution(\"3 2\\n#.#\\n.#.\") == \"Yes\"\n\nassert solution(\"2 3\\n..#\\n#.#\\n....\\n#..\\n#..\") == \"Yes\"\nassert solution(\"2 3\\n..#\\n#.#\\n....\\n#..\\n#..\") == \"No\"\n",
        "num_ids_2": 36,
        "num_ids_4": 84
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\n\"\"\"\nComplexity: O(M + N)\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.') == 'Yes'\nassert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.') == 'No'\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.#\") == \"Yes\"\nassert solution(\"4 3\\n#.#\\n.#.\\n#.#\\n#.#\\n#.#\") == \"No\"\nassert solution(\"4 4\\n....\\n...#\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\") == \"Yes\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\") == \"No\"\nassert solution(\"4 4\\n.#..\\n.#..\\n.#..\\n#...\\n.#..\\n.#..\\n.#..\\n.#..\\n#...\\n.#..\") == \"No\"\n",
        "num_ids_2": 61,
        "num_ids_4": 150
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 2\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3 2\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\nassert solution(\"3 2\\n.##\\n.#.\\n#.#\\n#.\") == \"No\"\nassert solution(\"3 2\\n#.#\\n#.\\n#.#\\n#.\") == \"No\"\nassert solution(\"3 2\\n#.\\n#.\\n#.\\n#.\") == \"Yes\"\nassert solution(\"3 2\\n#.\\n#.\\n#.\\n#.\") == \"No\"\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 5 2') == '53'\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\n\na, b, c = map(int, stdin.read().split())\n\nprint(a * b * c)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5 2\") == \"53\"\nprint(solution(\"1 5 2\"))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 5 2\") == \"53\"\nassert solution(\"3 3 4\") == \"16\"\nassert solution(\"2 3 2\") == \"3\"\n\"\"\"\nimport sys\n\nA, B, C = [int(x) for x in sys.stdin.readline().split()]\n\nprint(A + B + C - min(A, B, C))\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('. 1 2 3\\n4 5 6\\n7 8 9\\n+') == '27'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 5 2') == '53'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 5 2\") == \"53\"\nassert solution(\"5 6 1\") == \"41\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"9 9 9\") == \"81\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"\nassert solution(\"1\\n5980\\n6880\\n6980\") == \"4870\"\nassert solution(\"3\\n6980\\n7980\\n4980\") == \"15950\"\n\"\"\"\n",
        "num_ids_2": 46,
        "num_ids_4": 69
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\":\\n7\\n200\\n400\\n800\\n1600\\n3200\\n6400\") == \"16800\"\nassert solution(\":\\n1\\n20\\n200\") == \"80\"\nassert solution(\":\\n1\\n50\\n100\") == \"100\"\nassert solution(\":\\n1\\n100\\n1\") == \"101\"\nassert solution(\":\\n2\\n100\\n200\") == \"200\"\n\"\"\"",
        "num_ids_2": 53,
        "num_ids_4": 91
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\\n\") == \"15950\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2\\n10\\n100') == '200'\nassert solution('3\\n4980\\n7980\\n6980') == '15950'\n\n'''\n\nn = int(input())",
        "num_ids_2": 24,
        "num_ids_4": 47
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n4980\\n7980\\n6980') == '15950'\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"3\\n4980\\n7980\\n6980\"\n) == \"15950\"\nprint(\"Test finished.\")\n\n------OUTPUT-----\n> python -m unittest test_1.py\nTest finished.\n----------------------------------------------------------------------\nRan 1 test in 0.003s\n\nOK\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n4980\n7980\n6980''') == '15950'\nassert solution('''2\n100\n40\n''') == '200'\nassert solution('''1\n100\n''') == '100'\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1,2') == '2'\nassert solution('1,2,3') == '6'\nassert solution('1,2,3,4,5') == '15'\n",
        "num_ids_2": 18,
        "num_ids_4": 44
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n') == '14\\n'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n4980\\n7980\\n6980') == '15950'\n\"\"\"\n\n\"\"\"\nSubmitted solution:",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('29\\n20\\n7\\n35\\n120') == '215'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\narr = []\nfor i in range(0, N):\n    arr.append(int(sys.stdin.readline()))\n\narr.sort()\nidx = N - 1\nwhile idx > 0:\n    if arr[idx] % 10!= 0:\n        print(arr[idx - 1] + (arr[idx] - arr[idx - 1]) * 10)\n        break\n    idx -= 1\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\nprint(solution(stdin))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\"\"\"\n\nimport math\nimport typing",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n'''29\n20\n7\n35\n120''') == '215'\n\nassert solution(\n'''21\n1\n1\n1\n1''') == '0'\n\nassert solution(\n'''1\n1\n1\n1\n1''') == '0'\n\nassert solution(\n'''4\n4\n2\n2\n1''') == '7'\n\nassert solution(\n'''1\n2\n2\n2\n1''') == '0'",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\n\"\"\"\n\nimport math\nfrom typing import Iterable\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\"\n\nA, B, C, D, E = [int(i) for i in stdin.split()]",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\"\nimport sys\nimport math",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('29\\n20\\n7\\n35\\n120') == '215'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('29 20 7 35 120') == '215'\n\"\"\"\n\na, b, c, d, e = map(int, stdin.split())\n\nprint(min(max(0, a), max(0, b), max(0, c), max(0, d), max(0, e)))\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 30\") == \"7.5\"\n\n\"\"\"\n\nimport unittest",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\n\"\"\"\n\nfrom math import gcd\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 30\") == \"7.5\"\n\"\"\"\n\nfrom math import inf",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 30\\n\") == \"7.5\"\nassert solution(\"1\\n10\\n\") == \"0.1\"\n\"\"\"\nimport math",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 30\\n') == '7.5'\nassert solution('10 30\\n') == '7.5'\nassert solution('100 30\\n') == '7.5'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n10 30\") == '7.5'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 30\") == \"7.5\"\nassert solution(\"4 4\") == \"0.25\"\nassert solution(\"8 28\") == \"2.5\"\n\"\"\"\n\nimport math",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 30\") == \"7.5\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n\") == \"2\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n10 15 11 14 12\") == 2\n\"\"\"\nfrom collections import deque\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n5 3\n10\n15\n11\n14\n12\n''') == '2'\n\"\"\"",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12') == '2'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\n\"\"\"\nimport math",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\nassert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n9\") == \"4\"\nassert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n13\") == \"3\"\nassert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n13\\n2\") == \"1\"\nassert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n13\\n4\") == \"0\"\n\n\"\"\"\n\nN, K = map(int, stdin.readline().split())\n\ntree = []\nfor i in range(K):\n    tree.append(int(stdin.readline()))\ntree.sort()\n",
        "num_ids_2": 55,
        "num_ids_4": 116
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\nprint(solution(\"5 3\\n10\\n15\\n11\\n14\\n12\"))\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12\\n') == '2'\nprint(solution('5 3\\n10\\n15\\n11\\n14\\n12\\n'))\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n\") == \"2\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12') == '2'\n\"\"\"\n\nn, k = [int(num) for num in input().split(' ')]\n\ndata = []\nfor _ in range(n):\n    data.append(int(input()))\n\ndata.sort()\n\nmax_h = data[-1]\nmin_h = data[0]\n\nprint(max_h - min_h)",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"b\") == \"A\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('A') == 'a'\nassert solution('B') == 'A'\nassert solution('C') == 'c'\nassert solution('D') == 'd'\nassert solution('E') == 'e'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"B\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"Bb\") == \"A\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 31
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"B\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"A\") == \"A\"\n\"\"\"\n\nimport sys\nimport re\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('B') == 'A'\n\n\"\"\"\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(A) == \"A\"\nassert solution(B) == \"a\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a') == 'a'\nassert solution('A') == 'A'\nassert solution('B') == 'A'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('a') == 'a'\nassert solution('b') == 'A'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin='B') == 'A'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"B\") == \"A\"\nassert solution(\"b\") == \"a\"\nassert solution(\"C\") == \"C\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '3'\nassert solution('2 2') == '1'\nassert solution('2 1') == '2'\nassert solution('3 1') == '3'\n",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n\") == \"6\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(sys.stdin.read())) == str(sys.stdin.read())\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"6\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"6\"\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\n') == '6'\nassert solution('2 1\\n') == '0'\nassert solution('1 1\\n') == '0'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"6\"\nprint(solution(input()))\n\n----",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n') == '6'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2 2\n''') == \"6\"\nassert solution('''\n2 3\n''') == \"0\"\nassert solution('''\n3 1\n''') == \"0\"\nassert solution('''\n3 2\n''') == \"1\"\nassert solution('''\n3 3\n''') == \"1\"\n\nprint(solution(input()))\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n\") == \"6\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('0619') == 'MMYY'\nassert solution('061906') == 'AMBIGUOUS'\nassert solution('051906') == 'YYMM'\nassert solution('190619') == 'YYMM'\n",
        "num_ids_2": 24,
        "num_ids_4": 52
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1905') == 'YYMM'\n\n---\n\nMy Solution:\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1803\") == \"YYMM\"\nassert solution(\"1905\") == \"YYMM\"\nassert solution(\"1803\") == \"YYMM\"\nassert solution(\"1903\") == \"YYMM\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1905\") == \"YYMM\"\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905\") == \"YYMM\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905XX\") == \"AMBIGUOUS\"\nassert solution(\"1905XX\") == \"AMBIGUOUS\"\nassert solution(\"1905XXXX\") == \"NA\"\n\n\"\"\"\n\nimport unittest",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('190520') == 'AMBIGUOUS'\nassert solution('190521') == 'MMYY'\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 40
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('1905XX') == 'AMBIGUOUS'\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905\")!= \"YYMM\"\nassert solution(\"1905\")!= \"MMYY\"\n\n\"\"\"\nimport re\n",
        "num_ids_2": 25,
        "num_ids_4": 38
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('1906') == 'MMYY'\nassert solution('190619') == 'AMBIGUOUS'\nassert solution('190519') == 'NA'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 51
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n') == '2'\nassert solution('3\\n') == '2'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n\") == \"2\\n\", \"Test 1 Failed\"\nassert solution(\"5\\n\") == \"4\\n\", \"Test 2 Failed\"\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '3'\nassert solution('3') == '2'\nassert solution('2') == '1'\nprint('Test pass.')\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"2\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n\") == 2\nprint(solution(\"3\\n\"))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '2'\nassert solution('4') == '6'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == 2\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n\") == \"2\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n\") == \"2\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 12\") == \"21\"\n\n\"\"\"\n\nfrom utils.exceptions import TimeLimitException\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"9 12\") == \"21\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nA, B = map(int, input().split())\n\nhour = (24 + B) % 24\n\nprint(hour)\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 12') == '21'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9 12') == '21'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9 12') == '21'\n\n---\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"\n\nimport sys\n\nt, a, b = map(int, sys.stdin.readline().rstrip().split())",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('9 12\\n') == '21'\n\n-------Solution---------\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9 12\\n') == '21'\nassert solution('9 0\\n') == '9'\n\"\"\"\n\nimport sys\n\nfrom typing import Tuple\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom typing import Optional\n\n\n@dataclass\nclass Time:\n    hour: int\n    minute: int\n    second: int\n\n    def to_seconds(self) -> int:\n        return 3600 * self.hour + 60 * self.minute + self.second\n\n    def __add__(self, other):\n        if isinstance(other, Time):\n            return Time(\n                self.hour + other.hour,\n                self.minute + other.minute,\n                self.second + other.second,\n            )\n        raise TypeError(\"Not a Time object\")\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2919\") == \"3719\"\nassert solution(\"1 100\") == \"100\"\nassert solution(\"3 10\") == \"90\"\nassert solution(\"3 100\") == \"90\"\nassert solution(\"10 3\") == \"90\"\n",
        "num_ids_2": 24,
        "num_ids_4": 46
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n2 2919\n''') == '3719'\nassert solution('''\n10 5494\n''') == '5494'\nassert solution('''\n10 4087\n''') == '4087'\nassert solution('''\n10 9371\n''') == '9371'\nassert solution('''\n10 10592\n''') == '10592'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\"\n\nN, R = map(int, input().split())",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2919\") == \"3719\"\nprint(solution(\"2 2919\"))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2919') == '3719'\nassert solution('2 2919') == '3719'\nassert solution('1 2919') == '3719'\nassert solution('0 2919') == '3719'\nassert solution('100 0') == '0'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 7\") == \"12\"\nassert solution(\"7 6\") == \"28\"\n\"\"\"\n\nN, R = stdin.split(\" \")\nN, R = int(N), int(R)",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2919\\n\") == \"3719\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 2\") == 4\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11 2') == '4'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 2\") == \"4\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11 2') == '4'\n\n-------\n11: 1011\n3: [1, 0, 1]\n2: [0, 1, 1]\n1: [0, 0, 1]\n0: [0, 0, 0]\n\n'''",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 2') == 4\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 2\") == 4\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 2\") == 4\n\"\"\"\n\nfrom unittest import TestCase\n\n\nclass Solution:\n    def base_k(self, n, k):\n        assert k > 1\n        res = 0\n        for i in str(n):\n            res += int(i)\n        return res\n\n\nclass TestSolution(TestCase):\n    def test_solution(self):\n        assert Solution().base_k(11, 2) == 4\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(11, 2) == 4\n\n---\n\nWrite 5 lines of code to test the correctness of solution:\nGiven is an integer N. Find the number of digits that N has in base K.\n\n-----Notes-----\nFor information on base-K representation, see Positional notation - Wikipedia.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^9\n - 2 \\leq K \\leq 10\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\n\n-----Output-----\nPrint the number of digits that N has in base K.\n\n-----Sample Input-----\n11 2\n\n-----Sample Output-----\n4\n\nIn binary, 11 is represented as 1011.",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11 2') == '4'\nprint(solution(stdin))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 2\") == \"4\"\n\"\"\"\n\nimport re",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"3\"\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == '3'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == '3'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\"\n\nN = input()\nprint(int(N)//2)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(5) == 3\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n\") == '3'\nassert solution(\"2\\n\") == '1'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4') == 'Yay!'\nassert solution('5 4') == 'Yay!'\nassert solution('3 10') == 'Yay!'\nassert solution('5 10') == 'Yay!'\nassert solution('1 1') == 'Yay!'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n-----Notes-----\n - 1 <= A, B <= 16\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\nassert solution(\"8 3\") == \"Yay!\"\nassert solution(\"1 1\") == \"Yay!\"\nassert solution(\"4 7\") == \"Yay!\"\nassert solution(\"3 10\") == \"Yay!\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1\\n') == 'Yay!'\nassert solution('4 16\\n') == 'Yay!'\nassert solution('3 2\\n') == ':(\nassert solution('10 10\\n') == ':(\n\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 52
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\") == \"Yay!\"\nassert solution(\"3 5\") == \"Yay!\"\nassert solution(\"5 4\") == \"Yay!\"\nassert solution(\"5 7\") == \"Yay!\"\nassert solution(\"3 7\") == \"Yay!\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 4\\n') == 'Yay!'\n\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4\\n') == 'Yay!'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\") == \"Yay!\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1234567876') == '34'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str) == str\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1234567876') == '34'\nassert solution('1234') == '0'\nassert solution('12121212') == '0'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1234567876') == '34'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1234567876') == '34'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n\ns = input()\nd = []\nfor i in range(len(s)-3):\n    if s[i]!= s[i+1] and s[i]!= s[i+2] and s[i]!= s[i+3]:\n        d.append(s[i+1])\n        d.append(s[i+2])\n        d.append(s[i+3])\n        break\n\nprint(int(d[0])*100+int(d[1])*10+int(d[2]))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1234567876\") == \"34\"\nassert solution(\"1234567876\") == \"34\"\nassert solution(\"1234567876\") == \"34\"\nassert solution(\"1234567876\") == \"34\"\nassert solution(\"1234567876\") == \"34\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1234567876) == 34\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 9\") == \"1 7\"\n\nassert solution(\"3 12 6\") == \"5 3\"\n\nassert solution(\"7 2 1000000000 4 6 8 4 2\") == \"2999999987 2\"\n\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\"\n",
        "num_ids_2": 25,
        "num_ids_4": 64
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 25,
        "num_ids_4": 42
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 52 0 13 26 52\") == \"12 13\"\n\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 41
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n3 12 6''') == '5 3'\nassert solution('''2\n2 9''') == '1 7'\nassert solution('''7\n13 52 0 13 26 52''') == '12 13'\nassert solution('''6\n13 52 0 13 26 52''') == '2999999987 2'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\"\n\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 59
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 12 6\\n\") == \"5 3\"\n\nassert solution(\"2 9\\n\") == \"1 7\"\n\nassert solution(\"7 13 52 0 13 26 52\\n\") == \"12 13\"\n",
        "num_ids_2": 29,
        "num_ids_4": 48
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\nassert solution('7 13 52 0 13 26 52') == '12 13'\nassert solution('6 13 52 0 13 26 52') == '12 13'\n",
        "num_ids_2": 25,
        "num_ids_4": 59
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 9\\n2 9\") == \"1 7\"\nassert solution(\"6\\n13 52 0 13 26 52\") == \"12 13\"\nassert solution(\"7\\n13 52 0 13 26 52\") == \"2999999987 2\"\n\n\n\"\"\"\n\nfrom typing import List, Tuple\n",
        "num_ids_2": 35,
        "num_ids_4": 57
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 12 6\\n\") == \"5 3\"\nassert solution(\"2 9\\n\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\\n\") == \"12 13\"\n\n\"\"\"\n\nimport sys\nimport os\nimport time\n\nstdin = sys.stdin\n",
        "num_ids_2": 29,
        "num_ids_4": 48
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 1 4 1\\n\") == 3\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n3 1 4 1\n''') == '3'\n\nassert solution('''3\n1 1 1\n''') == '1'\n\nassert solution('''5\n1 1 1 2 2\n''') == '2'\n\nassert solution('''5\n2 1 1 2 2\n''') == '4'\n\nassert solution('''5\n1 1 1 2 2\n''') == '4'",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 4 1\\n\") == 3\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '0'\nassert solution('4\\n1 1 4 1\\n') == '3'\nassert solution('3\\n1 1 1\\n') == '1'\nassert solution('5\\n1 1 1 2 2\\n') == '2'\nassert solution('2\\n1 1\\n') == '1'\n",
        "num_ids_2": 28,
        "num_ids_4": 64
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1 4 1\\n') == '3'\nassert solution('3\\n1 1 1\\n') == '1'\nassert solution('5\\n1 1 1 2 2\\n') == '2'\nassert solution('4\\n1 1 4 1\\n') == '3'\nassert solution('3\\n1 1 1\\n') == '1'\n",
        "num_ids_2": 35,
        "num_ids_4": 72
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1 4 1') == '3'\nassert solution('3\\n1 1 1') == '1'\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 4 1\\n\") == \"3\"\nassert solution(\"3 1 4 1\\n\") == \"2\"\nassert solution(\"5 1 1 2 2\\n\") == \"1\"",
        "num_ids_2": 30,
        "num_ids_4": 46
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 1 4 1') == '3'\nassert solution('3\\n1 1 1') == '1'\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"4\\n3 1 4 1\"\n) == \"3\"\nassert solution(\n    \"5\\n1 1 1 2 2\"\n) == \"2\"\n\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3 1 2\\n') == '2'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n1 2') == '2\\n1 2'\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == 2\nassert solution(\"3 2\\n1 3\\n2 3\") == 2\nassert solution(\"3 2\\n1 3\\n2 3\\n3 4\") == 2\nassert solution(\"3 2\\n1 3\\n2 3\\n3 4\\n4 5\") == 2\nassert solution(\"3 2\\n1 3\\n2 3\\n3 4\\n4 5\\n5 6\") == 3\n",
        "num_ids_2": 34,
        "num_ids_4": 80
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n2 3') == '2'\nassert solution('3 2\\n1 3') == '2'\nassert solution('4 2\\n1 3') == '2'\nassert solution('1 3\\n2 4') == '2'\n",
        "num_ids_2": 23,
        "num_ids_4": 53
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 2\n1 2\n2 3''') == \"2\"\nassert solution('''4 2\n1 2\n3 4''') == \"2\"\nassert solution('''3 2\n1 3\n2 3''') == \"2\"\nassert solution('''3 2\n1 3\n2 3\n1 2''') == \"1\"\nassert solution('''5 1\n3 4''') == \"2\"\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2'\nassert solution('2 0\\n') == '1'\nassert solution('3 2\\n1 3\\n2 3') == '2'\n\nimport collections",
        "num_ids_2": 32,
        "num_ids_4": 51
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n\"\"\"\n\nimport sys\nimport queue\nfrom collections import defaultdict\nfrom typing import List, Tuple\n",
        "num_ids_2": 30,
        "num_ids_4": 49
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2\\n4 2\\n'\nassert solution('2 0') == '1\\n1 2\\n'\nassert solution('3 2\\n1 3\\n2 3') == '2\\n'\nassert solution('3 2\\n1 3\\n2 3\\n') == '2\\n'\nassert solution('4 2\\n1 3\\n2 4') == '2\\n4 2\\n'\n",
        "num_ids_2": 42,
        "num_ids_4": 86
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 2\\n2 3\") == \"2\"\n\nassert solution(\"1 2\\n2 3\") == \"1\"\nassert solution(\"2 2\\n1 2\") == \"1\"\n\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"3 2\\n1 3\\n3 2\") == \"2\"\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '1'\nassert solution('1\\n') == '1'\nassert solution('2\\n1 2\\n') == '2'\nassert solution('2\\n1 2\\n2 3\\n') == '2'\nassert solution('2\\n1 2\\n2 3\\n2 4\\n') == '3'\n",
        "num_ids_2": 22,
        "num_ids_4": 58
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\\n\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n\n\nimport sys",
        "num_ids_2": 32,
        "num_ids_4": 51
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\n\"\"\"\nfrom collections import deque, defaultdict\nfrom typing import DefaultDict\n\n\nclass TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.children = []\n        self.parent = None\n\n    def add_child(self, child):\n        child.parent = self\n        self.children.append(child)\n\n    def __str__(self):\n        return str(self.data)\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\nassert solution('7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\\n') == '4'",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5') == '11'\n\n\"\"\"\n\nn, k = map(int, input().split())\n\nweights = list(map(int, input().split()))\n\nedges = []\n\nfor i in range(n - 1):\n    edges.append(list(map(int, input().split())))\n\nmax_weight = 0\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        if weights[i] == weights[j]:\n            continue\n        if abs(i - j) <= k:\n            continue\n        \n        edge = [i, j]\n        weight = weights[i] + weights[j]\n        \n        edges_left = [k for k in range(n) if k not in edge]\n        \n        for left in edges_left:\n            edge_l = [i, left]\n            edge_r = [j, left]\n            \n            edge_l_weight = weights[i] + weights[left]\n            edge_r_weight = weights[j] + weights[left]\n            \n            if edge_l_weight == weight or edge_r_weight == weight:\n                continue\n            if abs(i - left) <= k and abs(j - left) <= k:\n                continue\n            \n            if edge_l_weight > weight and edge_r_weight > weight:\n                weight = edge_l_weight\n                edge = edge_l\n            if edge_l_weight < weight and edge_r_weight < weight:\n                weight = edge_r_weight\n                edge = edge_r\n            \n        edges.append(edge)\n        \n        if weight > max_weight:\n            max_weight = weight\n\nprint(max_weight)\n\n\"\"\"\n5 1\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5\n\n5 1\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5\n\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\nassert solution('7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\\n') == '4'",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5') == '11'\nassert solution('7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4') == '4'\n\nprint('The local tests are done. Click on \"Check\" for more cases.')\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.read()",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 1\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5''') == '11'\n\n\"\"\"\nfrom collections import deque",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n\") == \"11\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a) == b\nprint(solution(input))\n\n------\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5\n\n11\n3 1 2 5 4\n\n\n\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5\n\n6 4\n1 5\n3 1\n2 3\n7 5\n7 4\n\n4\n\n\n\n3 1 2 5 4\n1 2\n2 3\n3 4\n3 5\n\n11\n\"\"\"\n\nfrom collections import deque\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 2 1 2 1 1\") == 11\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == 11\n\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 6\n10 15 12\n1 9 12 23 26 37\n''') == \"\"\"1 1\n1 9\n2 2\n2 13\n3 1\n3 12\"\"\"\n\nassert solution('''2 3\n5 10000000000\n5 6 9999999999\n''') == \"\"\"1 5\n2 1\n2 9999999994\"\"\"\n\"\"\"\n\nimport unittest\nimport unittest.mock\nimport io\nimport sys\n\n\nclass TestAbs(unittest.TestCase):\n    def test_case_1(self):\n        with unittest.mock.patch('builtins.input', side_effect=[\"3 6\", \"10 15 12\", \"1 9 12 23 26 37\"]):\n            with unittest.mock.patch('sys.stdout', new=io.StringIO()) as fake_out:\n                solution()\n                sys.stdout = sys.__stdout__\n                out = fake_out.getvalue()\n                expected = \"1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12\\n\"\n                self.assertEqual(out, expected)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13'\nassert solution('2 3\\n5 10000000000\\n5 6 9999999999') == '1 5\\n2 1\\n2 9999999994'\n",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n\"\"\"\nimport sys\n",
        "num_ids_2": 69,
        "num_ids_4": 69
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13'\n\"\"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 6\n10 15 12\n1 9 12 23 26 37''') == '''1 1\n1 9\n2 2\n2 13\n3 1\n3 12'''\n\nassert solution('''2 3\n5 10000000000\n5 6 9999999999''') == '''1 5\n2 1\n2 9999999994'''\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13'\nassert solution('2 3\\n5 10000000000\\n5 6 9999999999') == '1 5\\n2 1\\n2 9999999994'",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n') == '1 1'\nassert solution('1 2\\n') == '1 2'\nassert solution('2 3\\n') == '2 3'\n",
        "num_ids_2": 22,
        "num_ids_4": 50
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n\"\"\"\n\n\nimport sys\nimport math\n\na, b, c, d = [int(n) for n in sys.stdin.readline().split()]\n\nmin_a, max_a = min(a, b), max(a, b)\nmin_b, max_b = min(c, d), max(c, d)\nmin_c, max_c = min(a+c, b+d), max(a+c, b+d)",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\nassert solution('40 40 40 60') == '20 20 20'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\n\"\"\"\n\nfrom collections import Counter\nimport re\n\nNUMBERS_REGEX = r\"(?P<a>\\d+) (?P<b>\\d+) (?P<c>\\d+) (?P<d>\\d+)\"\nINPUT_REGEX = re.compile(NUMBERS_REGEX)\n\ntest_cases = [\n    '3 6 5 4',\n    '40 40 40 60',\n    '201 101 101 200',\n]",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9\\nRBGRRBRGG') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRBRBGBGBGRG'",
        "num_ids_2": 48,
        "num_ids_4": 77
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n    9\n    RBGRRBRGG\n    \"\"\"\n) == \"2\"\n\nassert solution(\n    \"\"\"\n    8\n    BBBGBRRR\n    \"\"\"\n) == \"2\"\n\nassert solution(\n    \"\"\"\n    13\n    BBRRRRGGGGGRR\n    \"\"\"\n) == \"6\"\n\nprint('Success')\n\"\"\"\nSuccess\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\nRBGRRBRGG') == '2\\nRBGRGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRRRRGGGGRR'\nassert solution('9\\nRRGBGGRRBR') == '1\\nRRGBGGRRR'\n\"\"\"",
        "num_ids_2": 53,
        "num_ids_4": 78
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9\\nRRRRRRRRR') == '2\\nRRRRRRRRR'\nassert solution('8\\nBBBGBRRR') == '2\\nRRBGBRRR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRRRRGBGRRRR'\n\"\"\"\n\nn = int(input())\ns = list(input())\n\nR = 0\nG = 0\nB = 0\n\nl = ['R', 'G', 'B']\n\nfor i in s:\n    if i == 'R':\n        R += 1\n    elif i == 'G':\n        G += 1\n    else:\n        B += 1\n\nl1 = [R, G, B]\ncount = 0\nfor i in range(len(l1)):\n    for j in range(i + 1, len(l1)):\n        if l1[i] == l1[j]:\n            count += 1\n\nprint(min(count, len(s) - len(set(s))))\n\nfor i in range(len(s)):\n    if s[i] == 'R':\n        s[i] = 'B'\n    elif s[i] == 'G':\n        s[i] = 'R'\n    else:\n        s[i] = 'G'\n\nprint(''.join(s))",
        "num_ids_2": 48,
        "num_ids_4": 76
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''9\nRBGRRBRGG\n''') == '2\nRBGRGBRGR'\nassert solution('''8\nBBBGBRRR\n''') == '2\nBRBGBRGR'\nassert solution('''13\nBBRRRRGGGGGRR\n''') == '6\nBGRRRRBGBBGBGRR'\nassert solution('''2\nGG\n''') == '0\nG'\nassert solution('''5\nBBBBB\n''') == '4\nB'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RRRGGG\") == \"RGRGRG\"\nassert solution(\"RBRRGGGG\") == \"RGRGRG\"\nassert solution(\"RRRGGG\") == \"RGRGRG\"\nassert solution(\"RBRRRGGG\") == \"RGRGRG\"\nassert solution(\"RBRGGGGR\") == \"RGRGRG\"\n",
        "num_ids_2": 32,
        "num_ids_4": 65
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9\\nRBGRRBRGG\\n') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGRRRRR\\n') == '2\\nBBRBGBRRR'\nassert solution('13\\nBBRRRRRGGGGGRR\\n') == '6\\nBGRRRBGBGBGRG'\n\n\n\"\"\"",
        "num_ids_2": 53,
        "num_ids_4": 84
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('RR') == 'RR'\nassert solution('RGR') == 'RR'\nassert solution('RRR') == 'RR'",
        "num_ids_2": 18,
        "num_ids_4": 39
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9RBBBGBRRR') == '2RRBGRRRBGB'\nassert solution('BBRRRRGGGGGRR') == '6RRRBGRRRBGB'\nassert solution('BBBGBRRR') == '2RRBGRRRBGB'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n",
        "num_ids_2": 44,
        "num_ids_4": 64
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nRRR\") == \"1\\nRRR\"\nassert solution(\"5\\nGGGB\") == \"1\\nGGGB\"\nassert solution(\"5\\nBBBB\") == \"0\\nBBBB\"\nassert solution(\"3\\nGGR\") == \"0\\nGGR\"\nassert solution(\"1\\nG\") == \"0\\nG\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 3 4 7 5\") == '4\\n2 3 5 6'\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 4 7 5 6 8\") == \"4\"\nassert solution(\"1 3 5 2 4 6\") == \"2\"\nassert solution(\"10 9 8 7\") == \"1\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\"\n\nassert solution(\"1 3 5 2 4 6\") == \"2\"\n",
        "num_ids_2": 31,
        "num_ids_4": 62
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n10 9 8 7\") == \"2\\n1 4\"\nassert solution(\"7\\n3 3 4 7 5 6 8\") == \"4\\n2 3 5 6\"\nassert solution(\"6\\n1 3 5 2 4 6\") == \"2\\n1 4\"\nassert solution(\"9\\n6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\n\n\"\"\"\n",
        "num_ids_2": 45,
        "num_ids_4": 96
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 4 7 5 6\") == 4\nassert solution(\"1 3 5 2 4 6\") == 2\nassert solution(\"6 7 8 3 4 5 9 10 11\") == 6\nassert solution(\"10 9 8 7\") == 1\nassert solution(\"1 3 5 2 4 6\") == 2\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n3 3 4 7 5 6 8\") == \"4\\n2 3 5 6\"\nassert solution(\"6\\n1 3 5 2 4 6\") == \"2\\n1 4\"\nassert solution(\"4\\n10 9 8 7\") == \"1\\n1\"\nassert solution(\"9\\n6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\n\"\"\"",
        "num_ids_2": 47,
        "num_ids_4": 95
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 4 7 5 6 8') == '4'\nassert solution('1 3 5 2 4 6') == '2'\nassert solution('6 7 8 3 4 5 9 10 11') == '6'\nassert solution('6 7 8 3 4 5 9 10 11') == '6'\nassert solution('1 2 3 4 5 6') == '1'\n",
        "num_ids_2": 31,
        "num_ids_4": 67
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == \"4\\n2 3 5 6\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\nassert solution(\"4 10 9 8 7\") == \"1\\n1\"\nassert solution(\"9 10 8 7 6\") == \"2\\n1 4\"\nassert solution(\"3 3 4 7 5 6\") == \"4\\n2 3 5 6\"\n",
        "num_ids_2": 48,
        "num_ids_4": 83
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 4 7 5 6 8\") == \"4\"\nassert solution(\"1 3 5 2 4 6\") == \"2\"\nassert solution(\"1 3 5 2 4 6\") == \"1 4\"\nassert solution(\"1 3 5 2 4 6\") == \"1 4\"\nassert solution(\"1 3 5 2 4 6\") == \"1 4\"\n",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == \"4\"\nassert solution(\"6 3 4 7 5 6 8\") == \"2\"\nassert solution(\"4 10 9 8 7\") == \"1\"\nassert solution(\"9 6 7 8 3 4 5 9 10 11\") == \"6\"\nassert solution(\"1 3 5 2 4 6\") == \"2\"\n",
        "num_ids_2": 32,
        "num_ids_4": 65
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == \"4\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\"\nassert solution(\"4 10 9 8 7\") == \"1\"\nassert solution(\"9 6 7 8 3 4 5 9 10 11\") == \"6\"\nassert solution(\"1 3 5 2 4 6\") == \"2\"\n",
        "num_ids_2": 34,
        "num_ids_4": 67
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == \"No\"\nassert solution('1 2') == \"No\"\nassert solution('3 1') == \"Yes\"\nassert solution('3 3') == \"Yes\"\nassert solution('1 3') == \"No\"\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1') == 'Yes'\n\nassert solution('3 3') == 'No'\nassert solution('1 2') == 'No'\nassert solution('2 3') == 'No'\nassert solution('1 1') == 'Yes'\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"Yes\"\nassert solution(\"2 1\") == \"No\"\nassert solution(\"2 2\") == \"No\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == \"Yes\"\n\"\"\"\n\nimport math",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1') == 'Yes'\nassert solution('1 1') == 'No'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1') == 'Yes'\nprint(solution('3 1'))\n\n---\n\n3 1\n\nassert solution('1 2') == 'No'\nprint(solution('1 2'))\n\n---\n\n3 1\n\nassert solution('1 3') == 'No'\nprint(solution('1 3'))\n\n---\n\n3 1\n\nassert solution('3 1') == 'Yes'\nprint(solution('3 1'))\n\n---\n\n3 1\n\nassert solution('3 2') == 'No'\nprint(solution('3 2'))\n\n---\n\n3 1",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\n---Problem---\nThe Goldbach Conjecture is the following statement: \nAny even number greater than 2 can be written as the sum of two prime numbers.\nFor instance, 2 can be written as 2 = 2 + 1 = 3 + 2, and 3 can be written as 3 = 3 + 1 = 2 + 3.\nThere is no odd number greater than 2 that can be expressed as the sum of two prime numbers.\nWrite a program that takes an even number input n and checks if there exists two prime numbers p and q such that p + q = n.\n\n-----Solution-----\nIf we can write n = p + q, then\np = n - q\nq = n - p\n\nThe number of prime numbers between 1 and n is n/2, so\nn = 1 + 2 + 4 + 8 + 16 + 32 + 64 +... = (1 + 2 + 4 + 8 + 16 + 32 + 64 +...) / 2 = (1 + 2 + 4 + 8 +...) * 0.5 = n/2\n\nTo check if a number is prime, we can use the Sieve of Eratosthenes:\n1. Create a list of all the numbers between 1 and n\n2. Remove all the multiples of every prime number in the list\n3. Return the length of the list\n\n---Tests---\nTest 1\nInput:\n10\nOutput:\nNo\nExplanation:\nThere is no prime number between 1 and 10.\n\nTest 2\nInput:\n2\nOutput:\nYes\nExplanation:\nThe prime numbers between 1 and 2 are 1 and 2.\n\nTest 3\nInput:\n12\nOutput:\nNo\nExplanation:\nThere is no prime number between 1 and 12.\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n') == 'Yes'\n\n---Problem---\n\nLet A be a positive integer, and let B be a positive integer such that A < B.\nGiven the numbers A and B, write a program that determines if there is an odd number C such that A \\times B \\times C is divisible by A.\n\n---Example---\nLet A = 3 and B = 5.\nThe possible values for C are 1, 2, 4, 5 and 6.\nLet C = 4.\nTherefore, A \\times B \\times C = 3 \\times 5 \\times 4 = 120, which is divisible by 3.\nThe correct answer is Yes, because 4 is the only value for C such that this condition is true.\n\n---Solution---",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"81 58\") == \"110\"\nassert solution(\"88 99\") == \"152\"\nassert solution(\"10 10\") == \"20\"\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"81 58\"\n) == \"110\"\n\"\"\"\nfrom sys import stdin",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('81 58') == '110'",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n\nX, Y = input().split()\nX = int(X)\nY = int(Y)",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n\nfrom math import ceil",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('81 58') == '110'\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n\nimport unittest\n\n\nclass TestTest(unittest.TestCase):\n    def test(self):\n        pass\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('81 58') == '110'\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"81 58\") == \"110\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == '8'\nprint(solution('2'))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '8'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2') == '8'",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2') == '8'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == 8\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"8\"\n\"\"\"\n\nimport math",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"8\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(2) == 8\nprint(solution(2))\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == 8\n\"\"\"\n\n\"\"\"\nBEST SOLUTION:\n\nn = int(input())\n\nprint((9**n-9**(n-1))%10007)\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 5\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == 'YES'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n') == 'YES'\nassert solution('6\\n') == 'NO'\nassert solution('7\\n') == 'YES'\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n') == 'YES'\nassert solution('10\\n') == 'NO'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n') == \"YES\"\nassert solution('2\\n') == \"NO\"\nassert solution('1\\n') == \"YES\"\nassert solution('0\\n') == \"NO\"\nassert solution('9\\n') == \"YES\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n') == 'YES'\nassert solution('2\\n') == 'NO'\nassert solution('4\\n') == 'YES'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == 'YES'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"YES\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"7\") == \"YES\"\nassert solution(\"8\") == \"YES\"\nassert solution(\"9\") == \"NO\"\n\nprint('all tests passed.')\n\"\"\"\nimport math",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"YES\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n\") == \"YES\"\nprint(\"Exercise 1 solved!\")\n\n'''",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('999') == 'ABC'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('999') == 'ABC'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('999') == 'ABC'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(ABC999) == \"ABC\"\n\"\"\"\nimport sys\nn = int(sys.stdin.readline())",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''999''') == 'ABC'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == 'ABC'\nassert solution('2') == 'ABD'\nassert solution('3') == 'ABC'\nassert solution('999') == 'ABC'\n",
        "num_ids_2": 18,
        "num_ids_4": 39
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('999') == 'ABC'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n1\n2\n4\n8\n9\n15\n''') == 'Yay!'\nassert solution('''\n1\n2\n4\n8\n9\n15\n''') ==':(\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n\") == 'Yay!'\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n\") == 'Yay!'\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n\") == 'Yay!'\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n",
        "num_ids_2": 83,
        "num_ids_4": 1588
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n\") == \"Yay!\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n\") == \" :( \"\n\n\"\"\"\n\na, b, c, d, e, k = [int(i) for i in input().split()]\n\nfor i in range(1, k + 1):\n    if a + i <= k and b + i <= k and c + i <= k and d + i <= k and e + i <= k:\n        print(\"Yay!\")\n        exit()\n\nprint(\" :( \")\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'\nassert solution('1\\n3\\n4\\n8\\n9\\n15') == ':(\n\n-----\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n\") == \"Yay!\"\n",
        "num_ids_2": 83,
        "num_ids_4": 193
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n15\") == \":(\\n\"\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'Yay!'\nassert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n8\\n9\\n15') == ':(\\n\\tYay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n8\\n9\\n15') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n7\\n8\\n9\\n15') == ':(\\n\\tYay!'\n",
        "num_ids_2": 37,
        "num_ids_4": 103
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 9 15\") == \"Yay!\"\nassert solution(\"7 5 1 3 5 3\") == \"Yay!\"\nassert solution(\"1 2 3 4 5\") == \"Yay!\"\nassert solution(\"1 1 1 1 1 1\") == \"Yay!\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == \"Yay!\"\n",
        "num_ids_2": 30,
        "num_ids_4": 61
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\nassert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n6\") == \":(\"\n\n\"\"\"\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('pink') == 'pink'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('pink') == 'pink'\nassert solution('red') =='red'\nassert solution('green')!= 'green'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3200) == \"pink\"\n\nprint(solution(3200))\n'''\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"pink\") == \"pink\"\nassert solution(\"red\") == \"red\"\nassert solution(\"pink\")!= \"red\"\nassert solution(\"red\")!= \"pink\"\n\nprint(\"Passed!\")\n\"\"\"\n\na = int(input())\ns = input()",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3200, \"pink\"') == 'pink'\n\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"pink\") == \"pink\"\nassert solution(\"blue\") == \"red\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(a='3200') == 'pink'\nassert solution(a='2800') =='red'\nassert solution(a='400') =='red'\n\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 39
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('pink') == 'pink'\nassert solution('red') =='red'\nassert solution('orange') =='red'\nassert solution('blue') =='red'\nassert solution('purple') == 'purple'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('pink') == 'pink'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('pink') == 'pink'\nassert solution('red') =='red'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1199') == 'ABC'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1199') == 'ABC'\n\"\"\"\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1199\") == \"ABC\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1199\") == \"ABC\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1199') == 'ABC'\n\"\"\"\n\nR = int(input())",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1140') == 'ABC'\nassert solution('1200') == 'ABC'\nassert solution('2800') == 'ARC'\nassert solution('4208') == 'AGC'\n\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(123) == '123'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(101) == 'ABC'\nassert solution(1240) == 'ARC'\nassert solution(2843) == 'AGC'\nassert solution(4208) == 'ABC'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 'A'\nassert solution('1\\n2') == 'B'\nassert solution('1\\n2\\n') == 'C'\nassert solution('1\\n2\\n3\\n') == 'D'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 48
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1199') == 'ABC'\n\"\"\"\n\nrating = int(stdin.readline())\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11') == '99'\nassert solution('19') == '91'\nassert solution('111') == '999'\n\nprint('All tests passed.')",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"119\") == \"991\"\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('123') == '321'\nassert solution('912') == '811'\nassert solution('112') == '211'\nassert solution('999') == '1111'\nassert solution('122') == '222'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11') == '99'\nassert solution('109') == '101'\nassert solution('101') == '11'\nassert solution('1011') == '1111'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('119') == '991'\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"119\") == \"991\"\n\"\"\"\n\nn = int(input())\nout = \"\"\nfor i in str(n):\n    if i == \"1\":\n        out += \"9\"\n    elif i == \"9\":\n        out += \"1\"\n    else:\n        out += i\n\nprint(int(out))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"119\") == \"991\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nn = input()\n\nprint(int(n.replace(\"1\", \"9\"))\n     .replace(\"9\", \"1\")\n     .replace(\"1\", \"9\")\n     .replace(\"9\", \"1\"))\n\n\"\"\"\nSolution 2\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"123\") == \"931\"\nassert solution(\"99\") == \"999\"\nassert solution(\"999\") == \"999\"\n\"\"\"\n\n\"\"\"\nProblem Name: Sum of Digits\n\nProblem URL: https://www.hackerrank.com/challenges/list-comprehensions/problem\n\nProblem Section: Lists\n\nProblem Statement:\nWe want to create a list that contains the squares of all numbers from 1 to 10.\nWe can do this in one line of code.\n\nLets use list comprehension.\n\nlist comprehension is a python feature, that allows us to create a list from another iterable in one line.\nIt works with iterables like tuples, sets, and lists.\n\nExample:\n\nletters = ['a', 'b', 'c']\noutput = ['a', 'b', 'c']\n\nlist = [i for i in letters]\n\"\"\"\n\n\"\"\"\nProblem Statement:\nGiven a tuple list, find the 3rd largest element in the list.\n\nExample:\nInput: [39, 5, 78, 2, 1, 100]\nOutput: 78\n\nInput: [39, 5, 78, 2, 1, 100, 10]\nOutput: 100\n\nAssumptions:\n - The list has at least 3 elements.\n - The 3rd largest element is always the 3rd largest.\n\"\"\"\n\n\"\"\"\nSolution:",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123\") == \"132\"\nassert solution(\"1119\") == \"1319\"\nassert solution(\"1\") == \"9\"\nassert solution(\"11\") == \"19\"\nassert solution(\"19\") == \"11\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1111') == '9999'\nassert solution('9090') == '01010'\nassert solution('9909') == '10101'\nassert solution('9900') == '10100'\nassert solution('9090') == '01010'\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\nassert solution(\"ab\") == \"ab\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 54
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == b\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n",
        "num_ids_2": 22,
        "num_ids_4": 38
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abbaac') == 'abac'\nassert solution('ac') == 'ac'\nassert solution('bccddaaf') == 'bcdaf'\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 38
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(stdin))\n\n\"\"\"\nimport sys\n\nsys.stdin = open('input.txt')",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abbaac') == 'abac'\nassert solution('ac') == 'ac'\nassert solution('bccddaaf') == 'bcdaf'\nassert solution('zzzzzzzzzz') == 'zzzzzz'\n\n\"\"\"\n\nimport sys\nimport collections\n",
        "num_ids_2": 22,
        "num_ids_4": 54
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\n",
        "num_ids_2": 22,
        "num_ids_4": 54
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 54
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 38
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\\n333\\n0\"\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 4') == '2'\nassert solution('13 9') == '5'\nassert solution('100 13') == '4'\nassert solution('123 456') == '333'\nassert solution('92 46') == '0'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 4\\n13 9\\n100 13\\n123 456\\n92 46') == '2\\n5\\n4\\n333\\n0'\n\"\"\"\n\nfrom __future__ import annotations\n\n__author__ = \"Alexander Zhuk\"\n\nfrom typing import Callable, List\nfrom math import gcd\n\nfrom solutions.runner import run_solution\n\nfrom copy import deepcopy\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 2\\n') == '2'\n\"\"\"\n\nfrom math import gcd",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 4\") == \"2\"\nassert solution(\"13 9\") == \"5\"\nassert solution(\"100 13\") == \"4\"\nassert solution(\"123 456\") == \"333\"\nassert solution(\"92 46\") == \"0\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 4\\n13 9') == '2'\nassert solution('100 13\\n123 456') == '4'\nassert solution('92 46') == '0'\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 42
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n10 4\n13 9\n100 13\n123 456\n92 46\n''') == '''\n2\n5\n4\n333\n0\n'''\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5\n10 4\n13 9\n100 13\n123 456\n92 46\"\"\") == \"2\\n5\\n4\\n333\\n0\"\n\n\"\"\"\nDescription\n\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n1\\n1\") == \"0\"\nassert solution(\"2\\n1\\n1\") == \"1\"\nassert solution(\"3\\n1\\n1\") == \"2\"\nassert solution(\"4\\n1\\n1\") == \"3\"\nassert solution(\"5\\n1\\n1\") == \"4\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == 2.666666666666667",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\n'''\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 3\n3 4 1 2''') == 2.666666666666667\n'''\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == '2.666666666666667'\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667\nassert solution('4 3\\n4 3 1 2') == 2.0\nassert solution('4 3\\n5 5 1 2') == 4.0\nassert solution('4 3\\n5 5 4 3') == 2.666666666666667\nassert solution('4 3\\n5 5 5 1 2') == 4.0\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == 2.666666666666667\n\"\"\"\n\nn, k = map(int, input().split())\nl = list(map(int, input().split()))\n\narr = []\narr_len = len(l)\nfor i in range(0, arr_len-n+1):\n    arr.append(sum(l[i:i+n])/n)\n\nprint(max(arr))",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1''') == 'YES'\nassert solution('''3 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1''') == 'NO'\nassert solution('''3 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1''') == 'NO'\nassert solution('''4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1''') == 'NO'\n\nassert solution('''6 4\n4 2\n1 2 3 4 5\n3 2\n5 1\n1 2 3 4 5\n4 2\n4 1 2 3\n1 3\n5 2\n2 1 2 3 3\n1 4\n''') == 'YES'\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == 'YES'\n\"\"\"",
        "num_ids_2": 93,
        "num_ids_4": 93
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\") == \"YES\"\n\n\"\"\"\n",
        "num_ids_2": 91,
        "num_ids_4": 91
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    3 2\n    3 2 1\n    1 2\n    4 2\n    4 1 2 3\n    3 2\n    5 1\n    1 2 3 4 5\n    1\n    4 2\n    2 1 4 3\n    1 3\n    4 2\n    4 3 2 1\n    1 3\n    5 2\n    2 1 2 3 3\n    1 4\n    \"\"\"\n) == \"\"\"\nYES\nNO\nYES\nYES\nNO\nYES\nYES\nNO\nYES\nNO\nYES\nYES\nNO\nYES\nNO\nYES\nYES\nNO\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 2\\n4 1 2 3\\n3 2') == 'YES'\nassert solution('5 2\\n2 1 4 3\\n1 2 3 4 5') == 'NO'\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5') == 'YES'\nassert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5') == 'NO'\n\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 90,
        "num_ids_4": 90
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2\\n3 4\\n2 1 4 3\") == \"YES\"\nassert solution(\"5 1\\n3 2 1 2 3\") == \"NO\"\nassert solution(\"4 2\\n3 2\\n4 1 2 3\") == \"NO\"\nassert solution(\"4 2\\n3 2\\n4 3\\n1 2 4 3\") == \"NO\"\nassert solution(\"4 2\\n3 2\\n4 3\\n1 3\\n2 1 4 3\") == \"YES\"\n\n-----Problem-----\n\nThe Knights Game\nA k-element set of integers is called a \"Knight's tour\" if:\n\nit is a permutation of the integers $1, 2, \\dots, k$;\neach element appears in the set exactly once; and\nno element appears in the set after it.\n\nFor example, $(3, 1, 4, 2)$ is a Knight's tour, but $(1, 4, 3, 2)$ is not.\n\nGiven a set of k integers $(p_1, p_2, \\dots, p_k)$, check whether it is a Knight's tour.\n\n-----Solution-----\n\n1. Use the fact that the Knights tour is a permutation and that it is always possible to add one more number to the permutation of the integers $1, 2, \\dots, k$;\n2. Compute the sum of the first and the last element of the permutation;\n3. Check whether the sum is even or odd. If the sum is even, then the solution is impossible. If the sum is odd, then the solution is possible.\n\n\"\"\"\n",
        "num_ids_2": 43,
        "num_ids_4": 89
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5\") == \"YES\"\nassert solution(\"3 2 1\") == \"NO\"\nassert solution(\"4 2 1 3\") == \"YES\"\nassert solution(\"4 1 2 3\") == \"YES\"\nassert solution(\"5 1 2 3 4\") == \"NO\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"NO\"\nassert solution(\"4 2\\n4 1 2 3\\n1 2\\n3 2\\n3 1 2\\n2 1 2 3\\n1 4\\n\") == \"NO\"\nassert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"NO\"\nassert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"YES\"\n\"\"\"\n",
        "num_ids_2": 121,
        "num_ids_4": 279
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\") == \"YES\"\n\"\"\"\n\nimport sys\nfrom collections import deque",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 37
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\n\nprint(solution(\"baabbb\"))\nprint(solution(\"ooopppssss\"))\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('baabbb') == 'bab'\nassert solution('ooopppssss') == 'oops'\n\"\"\"\n\nimport sys\n\nfrom collections import deque\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"bab\") == \"baabbb\"\nassert solution(\"baabbb\") == \"bab\"\nassert solution(\"z\") == \"z\"\nassert solution(\"ooopppssss\") == \"oops\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 50
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s) == t\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"bab\") == \"baabbb\"\nassert solution(\"oopppssss\") == \"oops\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"baabbb\") == \"bab\"\n\"\"\"\n\nn = int(input())\ns = input()\n\ni = 0\n\nwhile i < n:\n    print(s[i] * n, end=\"\")\n    i += 1\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"baabbb\") == \"bab\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"bab\") == \"baa\"\nassert solution(\"baabbb\") == \"bab\"\nassert solution(\"o\" * 10) == \"o\" * 10\n",
        "num_ids_2": 25,
        "num_ids_4": 40
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bab\") == \"baabbb\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n",
        "num_ids_2": 27,
        "num_ids_4": 37
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4') == '1'\nassert solution('4 3\\n2 1 3\\n4 3 4\\n2 4 1') == '0'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3') == '0'\nassert solution('1 0\\n') == '0'\n\n-----Explanation-----\n\nThere are no edges with negative weights in the first graph, so the answer is 0.\n\n\"\"\"\n",
        "num_ids_2": 87,
        "num_ids_4": 126
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5 4\\n2 1 3\\n4 3 4\\n2 4 1\\n1 4 2\\n1 5 3') == '2'\n\nassert solution('5 6\\n2 1 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3') == '2'\nassert solution('5 6\\n1 2 2\\n2 3 3\\n1 3 3\\n2 4 2\\n1 4 2\\n1 5 3') == '0'\n\nassert solution('1 1\\n1 1') == '0'\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n",
        "num_ids_2": 44,
        "num_ids_4": 126
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n\") == \"1\"\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == \"0\"\nassert solution(\"1 0\\n\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\"\n",
        "num_ids_2": 91,
        "num_ids_4": 132
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n1 4 2\\n1 5 3\\n') == '1'\nassert solution('4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n1 4 2\\n1 5 3\\n') == '0'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n') == '0'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n') == '1'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n') == '0'\n\n\"\"\"\n\nimport heapq\nfrom collections import Counter\nfrom typing import List\n\nfrom sys import stdin\n\nn, m = [int(x) for x in stdin.readline().split()]\nG = [[] for _ in range(n + 1)]\nfor _ in range(m):\n    u, v, w = [int(x) for x in stdin.readline().split()]\n    G[u].append([v, w])\n    G[v].append([u, w])\n",
        "num_ids_2": 76,
        "num_ids_4": 132
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == '1'\nassert solution(\"8 9\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == '0'\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == '1'\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == '2'\n\n\"\"\"\n\n\"\"\"\nimport sys\nimport heapq",
        "num_ids_2": 122,
        "num_ids_4": 244
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4') == '1'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3') == '0'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n2 4 4') == '1'\nassert solution('5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3') == '2'",
        "num_ids_2": 87,
        "num_ids_4": 159
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\nassert solution(test_input_4) == test_output_4\n\"\"\"\nimport sys\nimport random",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\") == \"0\"\nassert solution(\"1 0\\n\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == \"2\"\n\"\"\"\n\n\nclass UnionFind(object):\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n        self.ranks = [0] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n\n        if x == y:\n            return\n\n        if self.ranks[x] > self.ranks[y]:\n            x, y = y, x\n\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n        if self.ranks[x] == self.ranks[y]:\n            self.ranks[x] += 1\n\n    def size(self, x):\n        return -self.parents[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n    def all_group_members(self):\n        group_members = defaultdict(list)\n        for member in range(self.n):\n            group_members[self.find(member)].append(member)\n        return group_members\n\n    def __str__(self):\n        return '\\n'.join(\n            f'{r}: {m}' for r, m in self.all_group_members().items())\n",
        "num_ids_2": 87,
        "num_ids_4": 126
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"0\"\nassert solution(\"8 10\\n1 2 1\\n2 3 3\\n1 3 3\\n2 4 2\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"2\"\nassert solution(\"8 10\\n1 2 1\\n2 3 3\\n1 3 3\\n2 4 2\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\nassert solution(\"8 10\\n1 2 1\\n2 3 3\\n1 3 3\\n2 4 2\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"0\"\n",
        "num_ids_2": 122,
        "num_ids_4": 254
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 3\\n1 2 2\\n2 3 3\\n1 3 3\\n2 4 2\\n1 4 2\\n1 5 3\\n1 6 3\\n2 5 1\\n2 6 1\\n2 7 1\\n2 8 1\\n3 4 1\\n3 5 1\\n4 5 1\\n4 6 1\\n5 6 1\\n5 7 1\\n6 7 1\\n6 8 1\\n7 8 1\\n\") == '2'\n\n\"\"\"\n\nimport sys\nimport queue\n\nsys.setrecursionlimit(10 ** 6)\ninput = sys.stdin.readline",
        "num_ids_2": 114,
        "num_ids_4": 114
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('RGBGRBB') == '3'\nassert solution('GRB') == '1'\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RGBGRBB\") == 'RGBRGBR'\nassert solution(\"RG\") == \"RR\"\nassert solution(\"RGRGRG\") == \"GG\"\nassert solution(\"RGRGRGB\") == 'GRGB'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 51
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('RR') == 'RR'\nassert solution('RGBG') == 'RGBG'\nassert solution('RGBRGBRG') == 'RGBRGBR'\nassert solution('RGBRGBRG') == 'RGBRGBR'\nassert solution('RGBGRGBB') == 'RGBGRBG'\n",
        "num_ids_2": 22,
        "num_ids_4": 50
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"RGRGBBBR\") == \"RGGRBB\"\nassert solution(\"GRGBG\") == \"RG\"\n\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 42
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RGBGRBB') == 'RGBRGBR'\nassert solution('RGGBGRRRR') == 'GRGBRGR'\nassert solution('BBBRRRGGG') == 'B'\nassert solution('RRRGGGGGG') == 'G'\nassert solution('GGGGGGRRR') == 'R'\n",
        "num_ids_2": 31,
        "num_ids_4": 58
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('RGBGRBB') == 'RGBRGBR'\nassert solution('RRRRR') == 'R'\nassert solution('RGGGG') == 'R'\nassert solution('GRRRRRRRRRRGGGGGG') == 'G'\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RGBGRBB\") == \"GRB\"\nassert solution(\"RGBGRBBR\") == \"RR\"\nassert solution(\"RGBGRBBRB\") == \"RR\"\nassert solution(\"RGBGRBBRRB\") == \"RR\"\nassert solution(\"RGBGRBBRRBR\") == \"RR\"\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('R') == 'G'\nassert solution('GB') == 'G'\nassert solution('GBGBGBB') == 'GBGBGBB'\nassert solution('RRRR') == 'RRRR'\n",
        "num_ids_2": 18,
        "num_ids_4": 44
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RGBGRBB\") == \"GRRB\"\nassert solution(\"RGBGRRBB\") == \"RGBRRR\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nprint(solution(\"RGBGRBB\"), \"RGBRGBR\")\nassert solution(\"BBRGBR\") == \"R\"\nprint(solution(\"BBRGBR\"), \"R\")\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\":\\n\") == \"Error: Input is not formatted correctly.\"\nassert solution(\": 10000 JPY\\n0.10000000 BTC\\n\") == \"Error: Input is not formatted correctly.\"\n\n-----Runtime Measurement-----\nn = int(stdin.readline())\na = stdin.readline().strip().split(' ')\nb = stdin.readline().strip().split(' ')\n\nassert 2 <= n <= 10\nassert a[0] == b[0]\nassert a[1] in {'JPY', 'BTC'}\n",
        "num_ids_2": 46,
        "num_ids_4": 64
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\nprint(\"PASS\")\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\nassert solution(\"2\\n10000 JPY\\n0.100000 BTC\") == \"48000.1\"\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\nassert solution(\"10000 JPY\\n10.10000000 BTC\") == \"48000.1\"\nassert solution(\"10000 JPY\\n10.10000000 BTC\\n100 JPY\\n1.0 BTC\") == \"48001.1\"\nassert solution(\"10000 JPY\\n10.10000000 BTC\\n100 JPY\\n1.0 BTC\\n10.10000000 BTC\") == \"48011.1\"\nassert solution(\"10000 JPY\\n10.10000000 BTC\\n100 JPY\\n1.0 BTC\\n10.10000000 BTC\\n100 JPY\\n1.0 BTC\") == \"48011.1\"\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\ndic = {}\nfor i in range(N):\n    if sys.stdin.readline().split()[1] == \"JPY\":\n        x = int(sys.stdin.readline())\n        dic[x] = x\n    else:\n        x = float(sys.stdin.readline())\n        dic[x] = x\n\nres = 0\nfor k, v in dic.items():\n    res += v * k\n\nprint(res)",
        "num_ids_2": 44,
        "num_ids_4": 117
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\nprint(\"PASS\")\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n2\n10000 JPY\n0.10000000 BTC\n''') == '48000.0'\n\"\"\"\n\nfrom typing import List, Any\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n10000 JPY\") == \"10000.0\"\nassert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n\nprint(solution(stdin))\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2\n10000 JPY\n0.10000000 BTC\n''') == '48000.0'\nassert solution('''3\n10000 JPY\n0.10000000 BTC\n100 JPY\n''') == '48000.0'\nassert solution('''4\n10000 JPY\n0.10000000 BTC\n100 JPY\n1000 JPY\n''') == '48000.0'\nassert solution('''5\n10000 JPY\n0.10000000 BTC\n100 JPY\n1000 JPY\n100 JPY\n''') == '48000.0'\nassert solution('''7\n10000 JPY\n0.10000000 BTC\n100 JPY\n1000 JPY\n100 JPY\n10 JPY\n1.10000000 BTC\n''') == '48000.0'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '4 2'\n) == '3'",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2') == '3'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"3\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"3\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2') == '3'",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"3\"\nassert solution(\"6 3\") == \"1\"\nassert solution(\"1 1\") == \"0\"\n\"\"\"\nimport math",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2') == '3'\n\"\"\"\n\nn, i = map(int, stdin.split())\nprint(n-i+1)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"3\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '1'\nassert solution('2 1 3 4') == '3'\nassert solution('3 2 1 4') == '2'\nassert solution('4 3 2 1') == '3'\n",
        "num_ids_2": 21,
        "num_ids_4": 47
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2') == '3'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2\nip cc''') == 'icpc'\n\"\"\"\n\nimport sys\nfrom typing import List\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ip cc') == 'icpc'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('S') == 'S'\nassert solution('a') == 'a'\nassert solution('a b') == 'ba'\nassert solution('aa bb') == 'baa'\n",
        "num_ids_2": 18,
        "num_ids_4": 39
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 ab\") == \"baa\"\nassert solution(\"2 abc\") == \"bacb\"\nassert solution(\"3 abc\") == \"caba\"\nassert solution(\"4 abc\") == \"cbcac\"\nassert solution(\"5 abc\") == \"cbcacb\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 abc') == 'ab abc abc'\nassert solution('1 ab') == 'a ab ab'\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == '1'\nassert solution('3') == '11'\nassert solution('4') == '12'\n",
        "num_ids_2": 16,
        "num_ids_4": 36
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('12') == '12'\nassert solution('23') == '13'\nassert solution('123') == '132'\nassert solution('4567') == '4567'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ip cc') == 'icpc'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ip cc') == 'icpc'\nassert solution('a') == 'a'\nassert solution('a b') == 'a b'\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 34
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'abc'\nassert solution('ab') == 'ba'\nassert solution('aba') == 'baba'\nassert solution('abab') == 'bbab'\n",
        "num_ids_2": 18,
        "num_ids_4": 39
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABB\") == \"Yes\"\nassert solution(\"ABC\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABA') == 'Yes'\nassert solution('ABB') == 'No'\nassert solution('BBA') == 'Yes'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABA') == 'Yes'\n\"\"\"\n\nS = input()\nprint('Yes' if len({S[i] for i in range(len(S)) if i % 2 == 0}) == 2 else 'No')\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    'ABA'\n) == 'Yes'\n\"\"\"\n\nimport re\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BAB\") == \"Yes\"\nassert solution(\"AAA\") == \"No\"\nassert solution(\"BBA\") == \"No\"\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AAA\") == \"Yes\"\nassert solution(\"ABB\") == \"Yes\"\nassert solution(\"ABA\") == \"Yes\"\nassert solution(\"ABAB\") == \"No\"\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"ABB\") == \"No\"\nassert solution(\"BBA\") == \"Yes\"\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AAB\") == \"Yes\"\nassert solution(\"BAA\") == \"Yes\"\nassert solution(\"ABB\") == \"No\"\nassert solution(\"BBA\") == \"No\"\n\"\"\"\n\nimport unittest\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BBA\") == \"Yes\"\nassert solution(\"BAB\") == \"Yes\"\nassert solution(\"ABA\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BBA\") == \"Yes\"\nassert solution(\"BBAB\") == \"No\"\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 34
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('RRS') == 2\n\"\"\"\n\n\"\"\"\nSolution:\nS[0] -> \"R\"\nS[1] -> \"S\"\nS[2] -> \"R\"\n\n1) S[0] == \"S\"\n2) S[1] == \"S\"\n3) S[2] == \"R\"\n\nmax(0, 1, 2) == 2\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('RRS') == 2\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('RRS') == 2\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RRS\") == 2\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RRR\") == 3\nassert solution(\"RRS\") == 2\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RRR\") == 3\nassert solution(\"SRR\") == 2\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RRS\") == \"2\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('RRR') == '3'\nassert solution('SRR') == '2'\nassert solution('RSS') == '2'\nassert solution('SRS') == '1'\nassert solution('SRR') == '2'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('RRS') == 2\nassert solution('SRSRS') == 3\n\"\"\"\n\nimport sys",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('RRS') == 2\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '3 1 2'\n\"\"\"\n\nimport re",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(expected_output)",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '3 1 2'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"1 2 3 4\") == \"3 4 1 2\"\nassert solution(\"100 200 300\") == \"300 200 100\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 30,
        "num_ids_4": 44
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '3 1 2'\nassert solution('5 5 5') == '5 5 5'\nassert solution('2 2 3') == '2 2 3'\nassert solution('1 10 1') == '10 1 1'\nassert solution('1 1 1') == '1 1 1'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '3 1 2'\n\"\"\"\n\nimport sys\n\nlines = iter(sys.stdin)\n\nnumbers = list(map(int, next(lines).split()))\n\nfor number in numbers:\n    print(number, end=' ')",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"1 2 1\") == \"1 2 1\"\nassert solution(\"2 2 2\") == \"2 2 2\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"1 1 2\") == \"2 1 1\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"10 4 5\") == \"5 4 10\"\n\"\"\"\n\nX, Y, Z = [int(n) for n in stdin.split()]\nprint(Z, X, Y)\nprint(Y, Z, X)\nprint(X, Y, Z)\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"30 100\") == '100'\nprint(solution(input()))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('30 100') == '100'\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"30 100\") == \"100\"\nprint(solution(\"30 100\"))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('30 100') == '100'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('30 100') == '100'",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"30 100\") == \"100\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('30 100') == '100'\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''30 100''') == '''100'''\n\nassert solution('''3 13''') == '''0'''\n\nassert solution('''6 2''') == '''50'''\n\nassert solution('''10 100''') == '''200'''\n\nassert solution('''10 100''') == '''200'''",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('30 100') == '100'\nassert solution('10 500') == '250'\n\"\"\"\n\nimport sys\n\nA = int(sys.stdin.readline().strip())\nB = int(sys.stdin.readline().strip())",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n100\\n') == '50\\n'\nassert solution('10\\n250\\n') == '200\\n'\nassert solution('12\\n500\\n') == '200\\n'\n\n----------------------\nimport math",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('+-') == '2'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"+-\") == \"2\"\n\"\"\"\n\n\"\"\"\nSolution:",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('+-') == '2'\nassert solution('--') == '0'\nassert solution('+') == '1'\nassert solution('-') == '0'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"+-\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"--\") == \"0\"\nassert solution(\"-\") == \"0\"\nassert solution(\"+\") == \"1\"\nassert solution(\"--\") == \"0\"\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"+-\") == \"2\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('+-') == 2\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"+-\") == \"2\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"+-++\") == \"3\"\nassert solution(\"-+++-+++\") == \"0\"\nassert solution(\"-\") == \"0\"\nassert solution(\"\") == \"0\"\n",
        "num_ids_2": 23,
        "num_ids_4": 46
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"-+-+\") == \"0\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/31\") == \"TBD\"\n\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2018/04/30\") == \"TBD\"\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(s) == Heisei\n\"\"\"\nimport datetime\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2020/02/29\") == \"TBD\"\nassert solution(\"2019/04/29\") == \"TBD\"\n\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 46
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/04/29') == 'TBD'\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/10/30') == 'TBD'\n\"\"\"\n\nimport sys",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == expected_result",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2012/12/31\") == \"TBD\"\n\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"2019/04/30\"\n) == \"Heisei\"\n\nassert solution(\n    \"2019/11/25\"\n) == \"TBD\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\n\"\"\"\n\nimport sys\n\nsys.stdin = open('input.txt', 'r')\ninput = sys.stdin.readline\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2\n1 2\n''') == '2'\nassert solution('''3\n1 2 3\n''') == '3'\nassert solution('''10\n5 2 4 3 4 5 1 2 4 1\n''') == '9'\nassert solution('''4\n1 1 1 1\n''') == '4'\nassert solution('''1\n6\n''') == '1'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == expected_result",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == out\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == \"14\"\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == \"9\"\nassert solution(\"3\\n1337 1337 1337\") == \"3\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\na = [int(x) for x in sys.stdin.readline().rstrip().split(' ')]\n\na.sort()\nans = 0\nfor i in range(0, n, 2):\n    ans += a[i]\n\nprint(ans)\n",
        "num_ids_2": 53,
        "num_ids_4": 71
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1337 1337 1337') == '3'\nassert solution('6\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\nassert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\n\"\"\"\n\nimport sys\nimport math\n\nn = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().split()))\n\npre_sum = [0] * (n+1)\nfor i in range(n):\n    pre_sum[i+1] = pre_sum[i] + arr[i]\n\nfor i in range(n):\n    for j in range(i+1, n):\n        if pre_sum[j+1] - pre_sum[i] == 2 * pre_sum[i+1]:\n            print(j-i)\n            exit(0)\n",
        "num_ids_2": 41,
        "num_ids_4": 71
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == \"14\"\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == \"9\"\nassert solution(\"3\\n1337 1337 1337\") == \"3\"\n\"\"\"\nimport sys\nimport math",
        "num_ids_2": 53,
        "num_ids_4": 71
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == 14\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == 9\n\"\"\"\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 1 2 10 2 10') == '14'\nassert solution('5\\n2 1 2 10 2 10') == '14'\nassert solution('1\\n2') == '2'\nassert solution('2\\n2') == '2'\nassert solution('1\\n1') == '1'\n",
        "num_ids_2": 36,
        "num_ids_4": 62
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == 14\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == 9\nassert solution(\"3\\n1337 1337 1337\") == 3\n\n\"\"\"\n\n\"\"\"\nn = int(stdin.readline())\narr = list(map(int, stdin.readline().split()))",
        "num_ids_2": 49,
        "num_ids_4": 65
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2\", \"1 2 3 4 5 6\") == \"3 4 5\"\nassert solution(\"10 4\", \"2 3 3 1 1 2 1 2 3 3\") == \"3 1 2\"\nassert solution(\"3 1\", \"1 2 3\") == \"2 1 3\"\n",
        "num_ids_2": 46,
        "num_ids_4": 64
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2\\n') == '2\\n2 1'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3\\n') == '3\\n1 3 2'",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '7 2\\n'\n    '1 2 3 2 1 3 2\\n'\n) == '2\\n'\nassert solution(\n    '10 4\\n'\n    '2 3 3 1 1 2 1 2 3 3\\n'\n) == '3\\n'\nassert solution(\n    '10 2\\n'\n    '2 3 3 1 1 2 1 2 3 3\\n'\n) == '3\\n'\nassert solution(\n    '10 3\\n'\n    '2 3 3 1 1 2 1 2 3 3\\n'\n) == '2\\n'\nassert solution(\n    '10 1\\n'\n    '2 3 3 1 1 2 1 2 3 3\\n'\n) == '1\\n'\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\n\"\"\"\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7 2\n1 2 3 2 1 3 2\n''') == '2\n2 1'\n\nassert solution('''10 4\n2 3 3 1 1 2 1 2 3 3\n''') == '3\n1 3 2'\n'''\n\nfor i in range(len(l1)):\n    if l1[i] == l2[i]:\n        k -= 1\n    else:\n        l1.insert(i, l2[i])\n        break\nprint(l1)\n\nassert solution('''7 2\n1 2 3 2 1 3 2\n''') == '2\n2 1'\n\nassert solution('''10 4\n2 3 3 1 1 2 1 2 3 3\n''') == '3\n1 3 2'\n\n\nk=int(stdin.readline())\nn=int(stdin.readline())\nl1=list(map(int,stdin.readline().split()))\nl2=list(map(int,stdin.readline().split()))\nm=0\nl=[0]*k\nfor i in range(n):\n    if l2[l1[i]-1] not in l:\n        m+=1\n        l[m-1]=l2[l1[i]-1]\n    else:\n        l.remove(l2[l1[i]-1])\n        l.append(l2[l1[i]-1])\nprint(m)\nfor i in l:\n    print(i,end=' ')",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\") == \"2\"\nassert solution(\"10 4\") == \"3\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input_example1) == 2\n\"\"\"\n\nimport sys\nimport collections",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == '2\\n2 1'\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == '3\\n1 3 2'\n\"\"\"\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 5\\n8\\n1\\n2\\n3\\n4\\n5\") == \"2 1 4 3 5\"\nassert solution(\"5 2\\n1\\n3\\n5\\n7\") == \"1 -1 -1 2 3\"\nassert solution(\"9 5\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\") == \"1 1 1 -1 2 3\"\nassert solution(\"3 3\\n5\\n9\\n11\") == \"1 -1 2 3\"\nassert solution(\"2 4\\n3\\n4\") == \"1 2\"\n",
        "num_ids_2": 62,
        "num_ids_4": 127
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n\") == \"1 -1 3 2 2\"\n\"\"\"\n\nfrom sys import stdin\nfrom collections import deque",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 1\") == \"1\\n1\\n2\\n2\\n1\\n1\\n2\\n0\"\nassert solution(\"2 1 4\") == \"1\\n0\"\nassert solution(\"3 1 2\") == \"2\\n2\\n0\"\n\"\"\"\n",
        "num_ids_2": 48,
        "num_ids_4": 66
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5\") == \"2 2\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n8\\n2\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4",
        "num_ids_2": 1533,
        "num_ids_4": 1533
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('ab') == 'ab'\nassert solution('aab') == 'aba'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n\") == \"1 -1 3 2 2\"\n\"\"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6\\n2 2 2 2\\n3 2\") == \"4 -1 2 2 2 2\\n3 2\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2\\n1 2 3 4 6\\n2\\n3\\n1 3\\n2 3\\n4\") == \"3\\n-1\\n4\\n-1\"\nassert solution(\"5 1\\n1 3 4 5\\n3\\n2 3\\n4\") == \"4\\n-1\\n3\\n-1\"\n\"\"\"\n",
        "num_ids_2": 84,
        "num_ids_4": 84
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == '21'\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == '0'\n",
        "num_ids_2": 69,
        "num_ids_4": 69
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\") == '21'\n\n---\nInput\n1 2\n3\n2\n3\n3\n4\n5\n6\n7\n8\n\nOutput\n3",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2') == '21'\nassert solution('3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '0'\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == '21'\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\") == \"21\"\n\"\"\"\nfrom collections import deque, Counter\nfrom functools import reduce\nfrom operator import add\nimport numpy as np\nfrom typing import List, Dict\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\") == \"0\"",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\"\n\nprint(\"Successfully solved!\")\n",
        "num_ids_2": 69,
        "num_ids_4": 69
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '0'\nassert solution('4 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '21'\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List, Set, Tuple, Dict\n",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == \"21\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\nfrom typing import List\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\"\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_data) == answer\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == \"2\\n1 2 3\\n1 1 2\\n\"\nassert solution(\"3\\n2 8 10\") == \"2\\n2 2 1\\n2 3 2\\n\"\n\"\"\"\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 4 6 6 6') == '2'\nassert solution('3\\n2 8 10') == '2'\nassert solution('4\\n1 1 1 1') == '0'\nassert solution('7\\n1 2 2 3 4 5 6 7') == '5'\nassert solution('2\\n1 2') == '2'\n\n\"\"\"\n\n\"\"\"\n\na = list(map(int, stdin.split()))\n\nk = 0",
        "num_ids_2": 32,
        "num_ids_4": 68
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 6 6 6\") == 2\nassert solution(\"1 1 1 1\") == 0\nassert solution(\"1 2 3 4 5\") == 1\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11\") == 2\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\") == 2\n",
        "num_ids_2": 23,
        "num_ids_4": 53
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 4 6 6 6') == '2'\nassert solution('3\\n2 8 10') == '2'\nassert solution('4\\n1 1 1 1') == '0'\n\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4 6 6 6') == '2'\nassert solution('3 8 10') == '2'\nassert solution('1 1 1 1') == '0'\n\nprint(solution(input()))\n\n----------------------------------------------------\n\nclass Solution:\n    def minOperations(self, s: str) -> int:\n        a = [int(n) for n in s.split()]\n        m = 10 ** 18 + 1\n        res = []\n        for i in range(len(a)):\n            if a[i]!= m:\n                cnt = 0\n                if i - 1 >= 0 and a[i - 1] + 1 == a[i]:\n                    a[i] = a[i] + 1\n                    a[i - 1] = a[i - 1] + 1\n                    cnt = 1\n                if i + 1 < len(a) and a[i] + 1 == a[i + 1]:\n                    a[i] = a[i] + 1\n                    a[i + 1] = a[i + 1] + 1\n                    cnt = 1\n                if cnt == 1:\n                    res.append([1, i, i + 1])\n        return len(res)\n\n----------------------------------------------------\n\nclass Solution:\n    def minOperations(self, a: str) -> int:\n        a = [int(n) for n in a.split()]\n        m = 10 ** 18 + 1\n        res = 0\n        for i in range(len(a)):\n            if a[i]!= m:\n                if i - 1 >= 0 and a[i - 1] + 1 == a[i]:\n                    a[i] = a[i] + 1\n                    a[i - 1] = a[i - 1] + 1\n                    res += 1\n                if i + 1 < len(a) and a[i] + 1 == a[i + 1]:\n                    a[i] = a[i] + 1\n                    a[i + 1] = a[i + 1] + 1\n                    res += 1\n        return res\n\n----------------------------------------------------\n\nclass Solution:\n    def minOperations(self, a: str) -> int:\n        a = [int(n) for n in a.split()]\n        m = 10 ** 18 + 1\n        res = 0\n        for i in range(len(a)):\n            if a[i]!= m:\n                res += 1\n                a[i] = a[i] + 1\n                if i - 1 >= 0 and a[i - 1] + 1 == a[i]:\n                    a[i] = a[i] + 1\n                    a[i - 1] = a[i - 1] + 1\n                    res += 1\n                if i + 1 < len(a) and a[i] + 1 == a[i + 1]:\n                    a[i] = a[i] + 1\n                    a[i + 1] = a[i + 1] + 1\n                    res += 1\n        return res\n\n----------------------------------------------------\n\nclass Solution:\n    def minOperations(self, a: str) -> int:\n        a = [int(n) for n in a.split()]\n        m = 10 ** 18 + 1\n        res = 0\n        for i in range(len(a)):\n            if a[i]!= m:\n                res += 1\n                a[i] = a[i] + 1\n                if i - 1 >= 0 and a[i - 1] + 1 == a[i]:\n                    a[i] = a[i] + 1\n                    a[i - 1] = a[i - 1] + 1\n                    res += 1\n                if i + 1 < len(a) and a[i] + 1 == a[i + 1]:\n                    a[i] = a[i] + 1\n                    a[i + 1] = a[i + 1] + 1\n                    res += 1\n        return res\n\n----------------------------------------------------\n\nclass Solution:\n    def minOperations(self, a: str) -> int:\n        a = [int(n) for n in a.split()]\n        m = 10 ** 18 + 1\n        res = 0\n        for i in range(len(a)):\n            if a[i]!= m:\n                res += 1\n                a[i] = a[i] + 1\n                if i - 1 >= 0 and a[i - 1] + 1 == a[i]:\n                    a[i] = a[i] + 1\n                    a[i - 1] = a[i - 1] + 1\n                    res += 1\n                if i + 1 < len(a) and a[i] + 1 == a[i + 1]:\n                    a[i] = a[i] + 1\n                    a[i + 1] = a[i + 1] + 1\n                    res += 1\n        return res\n\n\n        # res = 0\n        # m = 10 ** 18 + 1\n        # a = [int(n) for n in a.split()]\n        # for i in range(len(a)):\n        #     if a[i]!= m:\n        #         res += 1\n        #         a[i] = a[i] + 1\n        #         if i - 1 >= 0 and a[i - 1] + 1 == a[i]:\n        #             a[i] = a[i] + 1\n        #             a[i - 1] = a[i - 1] + 1\n        #             res += 1\n        #         if i + 1 < len(a) and a[i] + 1 == a[i + 1]:\n        #             a[i] = a[i] + 1\n        #             a[i + 1] = a[i + 1] + 1\n        #             res += 1\n        # return res\n\n\n        # m =",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == \"2\\n1 2 3\\n1 1 2\\n\"\nassert solution(\"3\\n2 8 10\") == \"2\\n2 2 1\\n2 3 2\\n\"\nassert solution(\"4\\n1 1 1 1\") == \"0\\n\"\n\nprint('Success')\n",
        "num_ids_2": 56,
        "num_ids_4": 74
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 4 6 6 6') == '2\\n1 2 3\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(input())\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10101\") == 2\nassert solution(\"1110111\") == 0\nassert solution(\"11101110\") == 1\nassert solution(\"1110111110\") == 2\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100010') == 1\nassert solution('10100100') == 2\nassert solution('11111111') == 0\nassert solution('10101010') == 1\nassert solution('11110100') == 0\n\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 19,
        "num_ids_4": 38
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"100101\") == 2\nassert solution(\"10010001\") == 0\nassert solution(\"10000010\") == 1\nassert solution(\"10100100\") == 0\n",
        "num_ids_2": 18,
        "num_ids_4": 37
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10010001\") == 1\nassert solution(\"10100100\") == 0\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 29
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10100100\") == 2\nassert solution(\"11111111\") == 0\nassert solution(\"101\") == 1\nassert solution(\"11101110\") == 2\n",
        "num_ids_2": 19,
        "num_ids_4": 36
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10100100\") == 2\nassert solution(\"11111111\") == 0\nassert solution(\"100110\") == 0\nassert solution(\"11101110\") == 1\n",
        "num_ids_2": 19,
        "num_ids_4": 37
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10101\") == 2\nassert solution(\"10000010\") == 0\nassert solution(\"11111111\") == 0\nassert solution(\"00100010\") == 1\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10101\") == \"0\"\nassert solution(\"11110\") == \"1\"\nassert solution(\"100010\") == \"2\"\nassert solution(\"111111\") == \"0\"\n\"\"\"\nimport math\nimport sys\nfrom dataclasses import dataclass\n\nsys.setrecursionlimit(10 ** 5)\n\n\n@dataclass\nclass Solution:\n    res: int\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100010') == 1\nassert solution('11111111') == 0\nassert solution('10010001') == 1\nassert solution('10100100') == 1\nassert solution('10011001') == 2\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10100100\") == 2\nassert solution(\"11111111\") == 0\nassert solution
        "num_ids_2": 19,
        "num_ids_4": 1182
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input) == output\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 4 5\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"",
        "num_ids_2": 80,
        "num_ids_4": 121
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\nassert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7\"",
        "num_ids_2": 85,
        "num_ids_4": 85
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == ''\nassert solution('1\\n2\\n3') == '1\\n2\\n3'\nassert solution('3\\n2\\n3\\n3\\n4\\n5\\n6') == '3\\n2\\n3\\n4\\n5\\n6'\nassert solution('1\\n5\\n3\\n3\\n7\\n8\\n9\\n9\\n3\\n7\\n5\\n9\\n10\\n9\\n4\\n1\\n2\\n3\\n4\\n5') == '1\\n2\\n3\\n4\\n5'",
        "num_ids_2": 18,
        "num_ids_4": 83
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n2\\n') == '1'\nassert solution('1\\n2\\n3\\n') == '2'\nassert solution('1\\n2\\n3\\n4\\n') == '2'\n",
        "num_ids_2": 18,
        "num_ids_4": 51
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n4 6 7 \"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == \"3\\n1 4 5 \"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 3 5 6 \"\n\n-----Problem-----\n\nOn the International Space Station the astronauts are placed in the following configuration:\n\nThe first row is the first column.\nThe first column is the last row.\nThe last column is the last row.\n\nYou should determine the number of astronauts who are on the last row.\n\n-----Solution-----\n\nFor the detailed solution please check the solution tab.\n\"\"\"",
        "num_ids_2": 84,
        "num_ids_4": 127
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 4 5\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\nprint('test passed')\n",
        "num_ids_2": 80,
        "num_ids_4": 121
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 4 5\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\n",
        "num_ids_2": 80,
        "num_ids_4": 121
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n4 6 7'\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30') == '3\\n1 4 5'\nassert solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3') == '4\\n1 3 5 6'\nprint('Success')\n",
        "num_ids_2": 80,
        "num_ids_4": 121
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n4 6 7'\n\n\"\"\"\n\nn,k = input().split()\nn,k = int(n), int(k)\n\ns = [0]\n\nfor i in range(n):\n    s.append(int(input()))\n\nprint(s)\n\ncount = 0\nwhile True:\n    print(s)\n    l = len(s)\n    print(l)\n    if l > 1:\n        for i in range(1,l):\n            print(i)\n            if i == l -1:\n                break\n            if s[i-1] <= s[i] and s[i] >= s[i+1]:\n                count += 1\n                s.pop(i)\n    else:\n        count = 0\n        break\n    if count == k:\n        break\n\n\nprint(count)\nprint(s)\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(print(...))",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6') == '30\\n31\\n10'\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n') == '30\\n31\\n10'\n\"\"\"\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x, y, z = a[0], a[1], a[2]\n    if x % y == 0 or y % x == 0 or y % z == 0 or z % y == 0:\n        if x % z == 0 or z % x == 0 or z % y == 0 or y % z == 0:\n            print(max(x, y, z))\n        else:\n            print(x)\n    elif x % z == 0 or z % x == 0 or z % y == 0 or y % z == 0:\n        print(z)\n    else:\n        print(y)",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\") == \"30\\n31\\n10\"\n\"\"\"\n\nq = int(stdin.readline())\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\nb = list(map(int, stdin.readline().split()))\nc = list(map(int, stdin.readline().split()))\n\na.sort()\nb.sort()\nc.sort()\n\nj = 0\nk = 0\np = 0\n\nfor i in range(q):\n    if a[i] % b[i] == 0:\n        p = a[i] / b[i]\n    else:\n        p = a[i] / b[i] + 1\n    if a[i] % c[i] == 0:\n        q = a[i] / c[i]\n    else:\n        q = a[i] / c[i] + 1\n    if p >= q:\n        p = p + 1\n    else:\n        p = p + q\n    if p >= k:\n        k = p\n    else:\n        k = k\n\nprint(int(k))\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5 6 15 30\") == \"30\"\nassert solution(\"4\\n10 6 30 15\") == \"31\"\nassert solution(\"3\\n3 4 6\") == \"10\"\nassert solution(\"1\\n2\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 60
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('1 1') == '1'\nassert solution('1 2 3') == '1'\nassert solution('1 2 3 4') == '1'\n",
        "num_ids_2": 19,
        "num_ids_4": 42
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5 6 15 30\") == 30\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n5 6 15 30') == '30'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\np = [0]*n\nfor i in range(n):\n    p[i] = max(a[i]-1, 0)\n    p[i] += sum(p[:i])\n\nprint(max(p))",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5\\n5 6 15 30') == '30'\nassert solution('5\\n4 10 6 30 15') == '31'\nassert solution('3\\n3 4 6') == '10'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\na = list(map(int, sys.stdin.readline().split()))\n\ns = sum(a)\n\nc = 3\n\nwhile c <= n:\n    a.sort()\n    for i in range(n - c + 1):\n        if a[i] % a[i + c - 1] == 0:\n            s += a[i + c - 1]\n        else:\n            break\n    c += 1\n\nprint(s)\n",
        "num_ids_2": 24,
        "num_ids_4": 56
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n5 6 15 30\\n4\\n10 6 30 15') == '30'\nassert solution('3\\n3 4 6\\n') == '10'\n\"\"\"\n\n\"\"\"\n-----Solution-----\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\n\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\") == \"2\\n1\\n2\\n1\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\") == \"2\\n1\\n2\\n1\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\") == \"2\\n1\\n2\\n1\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\") == \"2\\n1\\n2\\n1\"\n\n\n\"\"\"",
        "num_ids_2": 84,
        "num_ids_4": 168
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2\\n1\\n2\\n1'\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2\\n1\\n2\\n1'\n\"\"\"\n\nfrom typing import List, Dict",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42''') == '2\\n1\\n2\\n1'\n'''\n\n\n\n-----\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043b\u0430\u0441\u044c \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043e\u0439 \u043d\u0438\u0436\u0435.\n\n\u0417\u0430\u0434\u0430\u0447\u0430\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043b\u0430\u0441\u044c \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043e\u0439 \u043d\u0438\u0436\u0435.\n\n\u041f\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0432\u044b\u0431\u0440\u0430\u043d\u0430 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0430 \u0438\u0437 \u043f\u0430\u0440.\n\n\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u044b \u0441\u0447\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u043b\u044e\u0434\u0438, \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u043e\u0431\u0449\u0438\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043b\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u044f.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u0443\u0440\u043e\u0432\u043d\u044f\u0445 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u044b\u0431\u0440\u0430\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0438\u0437 \u043d\u0438\u0445. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c, \u043e\u0431\u0430 \u043b\u044e\u0434\u044f\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432\u044b\u0431\u0440\u0430\u043d\u044b \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0430 \u0438\u0437 \u043f\u0430\u0440:\n\n- \u0434\u0432\u0443\u0445 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u0440\u0430\u0437\u043d\u044b\u0435 \u043e\u0431\u0449\u0438\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f;\n- \u043e\u0434\u0438\u043d \u0441\u0442\u0443\u0434\u0435\u043d\u0442, \u0438\u043c\u0435\u044e\u0449\u0438\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u044f \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u0443\u044e \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u0432 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438.\n\n\u0417\u0430\u0434\u0430\u0447\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u043e\u043c\u043e\u0447\u044c \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u044b \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0442\u044c\u0441\u044f \u043b\u044e\u0434\u0438 \u0432 \u043e\u0434\u043d\u043e\u043c \u0438 \u0442\u043e\u043c \u0436\u0435 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438.\n\n\u0412 \u043e\u0442\u0432\u0435\u0442\u0435 \u044d\u0442\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0432\u044b\u0431\u043e\u0440\u0430 \u043f\u0430\u0440 \u043b\u044e\u0434\u0435\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432, \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0437\u0430\u0434\u0430\u043d\u0438\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n2\n3\n3 10 11 1 20 4\n1\n4\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n\u041f\u0443\u043d\u043a\u0442 A: 2\n\u041f\u0443\u043d\u043a\u0442 B: 1\n\u041f\u0443\u043d\u043a\u0442 A: 1\n\u041f\u0443\u043d\u043a\u0442 B: 1\n\n\u041f\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044e \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u044b\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f, \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u0440\u0430\u0437\u043d\u044b\u0435 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u044f.\n\u041f\u0443\u043d\u043a\u0442 A: 3\n\u041f\u0443\u043d\u043a\u0442 B: 2\n\u041f\u0443\u043d\u043a\u0442 A: 1\n\u041f\u0443\u043d\u043a\u0442 B: 1\n\n\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0432 \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043d\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0439, \u043d\u043e \u043e\u0434\u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0430\u044f \u043f\u0430\u0440\u0430 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\") == \"2\\n1\\n2\\n1\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\") == \"2\\n1\\n2\\n1\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 84,
        "num_ids_4": 84
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2\\n1\\n2\\n1'\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == '2\\n1\\n2\\n1'\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == '2\\n1\\n2\\n1'\n\"\"\"\n",
        "num_ids_2": 96,
        "num_ids_4": 96
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\\n1 2 3 6\") == \"YES\"\nassert solution(\"5 2 6 27\\n3 3 5 18\") == \"NO\"\nassert solution(\"3 3 5 18\\n3 3 5 18\") == \"YES\"\nassert solution(\"5 2 6 27\\n3 3 5 1\") == \"NO\"\nassert solution(\"1 2 3 4\\n1 2 3 7\") == \"NO\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\\n1 2 3 6\") == \"NO\"\nassert solution(\"5 2 6 27\\n3 3 5 18\") == \"YES\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3 4\\n1 2 3 6\\n5 2 6 27\\n3 3 5 18\\n') == 'YES\\nNO\\nNO\\nYES'\n\"\"\"\nimport sys",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == 'YES'\nassert solution('1 2 3 6') == 'NO'\nassert solution('5 2 6 27') == 'YES'\nassert solution('3 3 5 18') == 'NO'",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n1 2 3 4\n1 2 3 6\n\"\"\") == \"YES\"\nassert solution(\n\"\"\"\n1 2 3 4\n1 2 3 6\n\"\"\") == \"NO\"\nassert solution(\n\"\"\"\n5 2 6 27\n3 3 5 18\n\"\"\") == \"NO\"\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 6\") == \"NO\"\nassert solution(\"5 2 6 27\") == \"NO\"\nassert solution(\"3 3 5 18\") == \"YES\"\n\"\"\"\n\nq = int(input())\nfor i in range(q):\n    a, b, n, s = map(int, input().split())\n    if n % a == 0 and n % b == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\\n1 2 3 6\\n5 2 6 27\\n3 3 5 18\") == \"YES\\nNO\\nNO\\nYES\"\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 3 6\") == 'YES'\nassert solution(\"1 2 3 6\") == 'NO'\nassert solution(\"5 2 6 27\") == 'NO'\nassert solution(\"3 3 5 18\") == 'YES'",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 4\\n1 2 3 6') == 'NO'\nassert solution('5\\n1 2 3 4\\n1 2 3 6') == 'YES'\nassert solution('5\\n1 2 3 4\\n5 2 6 27') == 'YES'\nassert solution('5\\n3 3 5 18') == 'NO'\n\"\"\"\n\nimport sys\n\nt = int(sys.stdin.readline())\n\nfor i in range(t):\n    a, b, n, s = list(map(int, sys.stdin.readline().split()))\n    if n * b >= s:\n        print('YES')\n    else:\n        print('NO')",
        "num_ids_2": 44,
        "num_ids_4": 82
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == 'YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n'\nassert solution(\"5 4 3 2 1 0\") == 'YES\\n1\\n3\\n4\\n5 4 3 1\\n'\nassert solution(\"5 3 2 1 0\") == 'YES\\n1\\n3\\n4\\n5 3 2 1\\n'\nassert solution(\"5 2 1 4 3\") == 'YES\\n1\\n3\\n5\\n5 2 1 4 3\\n'\nassert solution(\"5 1 4 3 2\") == 'YES\\n1\\n3\\n5\\n5 1 4 3 2\\n'\n",
        "num_ids_2": 67,
        "num_ids_4": 130
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\"\nassert solution(\"5 1 1 2 1 2\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\"\nassert solution(\"5 0 1 2 3 4\") == \"YES\\n0\\n3\\n4\\n5 4 3 1\"\n",
        "num_ids_2": 63,
        "num_ids_4": 93
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 1 5 3\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\"\nassert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\"\nassert solution(\"5 4 3 2 1 0\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\"\n",
        "num_ids_2": 64,
        "num_ids_4": 94
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 1 5 3') == 'YES\\n1\\n3\\n4\\n5 4 3 1'\nassert solution('5 3 1 5 3') == 'YES\\n1\\n3\\n4\\n5 4 3 1'\nassert solution('5 2 3 1 5 3') == 'YES\\n1\\n3\\n5\\n5 4 3 1'\nassert solution('7 2 7 3 3 1 4') == 'YES\\n2\\n3\\n7\\n7 4 3 1'\nassert solution('7 4 3 2 1 5 3') == 'YES\\n2\\n3\\n7\\n7 4 3 1'\n",
        "num_ids_2": 58,
        "num_ids_4": 119
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == 'YES\\n2\\n3 7\\n5\\n7 4 3 2 1'\nassert solution(\"5 4 3 2 1 0\") == 'YES\\n1\\n3\\n4\\n5 4 3 1'\nassert solution(\"5 0 1 2 3 4\") == 'YES\\n0\\n'\n",
        "num_ids_2": 63,
        "num_ids_4": 83
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\"\nassert solution(\"5 4 3 2 1 0\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\nassert solution(\"5 1 2 3 4\") == \"NO\\n\"\nassert solution(\"1 1 2 1 2\") == \"NO\\n\"\nassert solution(\"0 1 2 3 4\") == \"YES\\n0\\n\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 67,
        "num_ids_4": 99
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 2 4 3 1 7\") == \"YES\"\nassert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 2 4 3 1 7\") == \"YES\"\n",
        "num_ids_2": 32,
        "num_ids_4": 63
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"5\\n4 3 1 5 3\\n\"\n) == \"YES\\n1\\n3\\n5\\n4 4 3 1\\n\"\n\nassert solution(\n    \"7\\n7 2 7 3 3 1 4\\n\"\n) == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 4 3 2 1 0\") == \"YES\"\nassert solution(\"4 3 1 5 3\") == \"YES\"\nassert solution(\"5 4 3 2 1\") == \"YES\"\nassert solution(\"1 1 2 1 2\") == \"NO\"\n\nprint(solution(\"5 4 3 2 1 0\"))\n",
        "num_ids_2": 31,
        "num_ids_4": 59
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\"\nassert solution(\"5 4 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 5 4 3 1\"\nassert solution(\"5 4 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 5 4 3 1\"\nassert solution(\"5 4 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 5 4 3 1\"\nassert solution(\"5 4 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 5 4 3 1\"\n\n\"\"\"",
        "num_ids_2": 64,
        "num_ids_4": 126
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 0 1\\n3 0 1\") == \"18\"\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n') == '18'\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == \"18\"\nassert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1\") == \"8\"\nassert solution(\"5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\") == \"-1\"\n",
        "num_ids_2": 92,
        "num_ids_4": 128
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == \"18\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n\") == 18\n\"\"\"\n\nn, k = map(int, input().split())\n\nbooks = [tuple(map(int, input().split())) for _ in range(n)]\n\nbooks = sorted(books, key=lambda x: (x[1], x[2]), reverse=True)\n\nt = 0\ncnt = 0\nfor book in books:\n    if book[0] <= k:\n        t += book[0]\n        cnt += 1\n        k -= book[0]\n    if cnt == k:\n        break\n\nprint(t if cnt == k else -1)\n",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\") == \"18\"\nassert solution(\"7 2\\n3 0 0\\n2 1 0\\n5 0 1\\n3 0 1\") == \"8\"\n\"\"\"\n\nimport collections\nimport sys\n",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == \"18\"\nassert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1\") == \"8\"\nassert solution(\"5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\") == \"-1\"\n\n\"\"\"\n\nimport sys\nfrom collections import deque\nfrom typing import List, Deque, Tuple, Dict\n\nclass Books:\n    def __init__(self, n: int, k: int, books: List[Tuple[int, int, int]]) -> None:\n        self.n = n\n        self.k = k\n        self.books = books\n        self.likes: List[int] = [0] * n\n        self.total_time = 0\n\n    def read_books(self) -> None:\n        likes = self.likes\n        books = self.books\n\n        queue = deque(books)\n        total_time = 0\n        while queue and total_time < self.k:\n            total_time += queue.popleft()[0]\n            if likes[queue[0][1]] == 0:\n                total_time += queue.popleft()[0]\n            likes[queue[0][1]] = 1\n\n        self.total_time = total_time\n\n    def calculate_total_time(self) -> None:\n        self.read_books()\n\n    def __str__(self) -> str:\n        return f\"{self.total_time}\"\n",
        "num_ids_2": 92,
        "num_ids_4": 128
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1\") == \"8\"\n\"\"\"\n\nfrom collections import deque\n\nn, k = map(int, input().split())\n\na = deque(list(map(int, input().split())))\nb = deque(list(map(int, input().split())))\n\nbooks = {i: deque([a[i], b[i]]) for i in range(n)}\n\nk_books = k\nstdin_a = 0\nstdin_b = 0\nstdout = -1\n\nfor _ in range(k):\n    stdin_a, stdin_b = max(stdin_a, stdin_b), min(stdin_a, stdin_b)\n    stdin_a, stdin_b = books[stdin_a][0], books[stdin_b][1]\n    stdin_a, stdin_b = books[stdin_a][0], books[stdin_b][1]\n    stdin_a, stdin_b = books[stdin_a][1], books[stdin_b][0]\n    stdin_a, stdin_b = books[stdin_a][1], books[stdin_b][0]\n    stdin_a = books[stdin_a][0]\n    stdin_b = books[stdin_b][1]\n\n    stdout = max(stdout, stdin_a + stdin_b)\n\nprint(stdout)\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n1 0 1\\n1 1 1\\n1 0 1\") == \"6\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\") == '8'\nassert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == '18'\n\"\"\"\n",
        "num_ids_2": 87,
        "num_ids_4": 87
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"1 1\\n2 3\\n2 2\") == \"2\"\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"3 2\\n1 2 1\\n1 1 2\") == \"2\\n-1\\n1\"\n",
        "num_ids_2": 83,
        "num_ids_4": 83
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"6\"\nassert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\") == \"2\"\nassert solution(\"4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"-1\"\n\"\"\"\n",
        "num_ids_2": 62,
        "num_ids_4": 96
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n3 2\\n1 3 4\\n2\\n1 3 5\\n1 4 6\\n1 5 7\\n1 6 8\\n1 7 9\\n1 8 10\\n1 9 11\\n1 10 12\\n1 11 13\\n1 12 14\\n1 13 15\\n1 14 16\\n1 15 17\\n1 16 18\\n1 17 19\\n1 18 20\\n1 19 21\\n1 20 22\\n1 21 23\\n1 22 24\\n1 23 25\\n1 24 26\\n1 25 27\\n1 26 28\\n1 27 29\\n1 28 30\\n1 29 31\\n1 30 32\\n1 31 33\\n1 32 34\\n1 33 35\\n1 34 36\\n1 35 37\\n1 36 38\\n1 37 39\\n1 38 40\\n1 39 41\\n1 40 42\\n1 41 43\\n1 42 44\\n1 43 45\\n1 44 46\\n1 45 47\\n1 46 48\\n1 47 49\\n1 48 50\\n1 49 51\\n1 50 52\\n1 51 53\\n1 52 54\\n1 53 55\\n1 54 56\\n1 55 57\\n1 56 58\\n1 57 59\\n1 58 60\\n1 59 61\\n1 60 62\\n1 61 63\\n1 62 64\\n1 63 65\\n1 64 66\\n1 65 67\\n1 66 68\\n1 67 69\\n1 68 70\\n1 69 71\\n1 70 72\\n1 71 73\\n1 72 74\\n1 73 75\\n1 74 76\\n1 75 77\\n1 76 78\\n1 77 79\\n1 78 80\\n1 79 81\\n1 80 82\\n1 81 83\\n1 82 84\\n1 83 85\\n1 84 86\\n1 85 87\\n1 86 88\\n1 87 89\\n1 88 90\\n1 89 91\\n1 90 92\\n1 91 93\\n1 92 94\\n1 93 95\\n1 94 96\\n1 95 97\\n1 96 98\\n1 97 99\\n1 98 100\\n1 99 101\\n1 100 102\\n1 101 103\\n1 102 104\\n1 103 105\\n1 104 106\\n1 105 107\\n1 106 108\\n1 107 109\\n1 108 110\\n1 109 111\\n1 110 112\\n1 111 113\\n1 112 114\\n1 113 115\\n1 114 116\\n1 115 117\\n1 116 118\\n1 117 119\\n1 118 120\\n1 119 121\\n1 120 122\\n1 121 123\\n1 122 124\\n1 123 125\\n1 124 126\\n1 125 127\\n1 126 128\\n1 127 129\\n1 128 130\\n1 129 131\\n1 130 132\\n1 131 133\\n1 132 134\\n1 133 135\\n1 134 136\\n1 135 137\\n1 136 138\\n1 137 139\\n1 138 140\\n1 139 141\\n1 140 142\\n1 141 143\\n1 142 144\\n1 143 145\\n1 144 146\\n1 145 147\\n1 146 148\\n1 147 149\\n1 148 150\\n1 149 151\\n1 150 152\\n1 151 153\\n1 152 154\\n1 153 155\\n1 154 156\\n1 155 157\\n1 156 158\\n1 157 159\\n1 158 160\\n1 159 161\\n1 160 162\\n1 161 163\\n1 162 164\\n1 163 165\\n1 164 166\\n1 165 167\\n1 166 168\\n1 167 169\\n1 168 170\\n1 169 171\\n1 170 172\\n1 171 173\\n1 172 174\\n1 173 175\\n1 174 176\\n1 175 177\\n1 176 178\\n1 177 179\\n1 178 180\\n1 179 181\\n1 180 182\\n1 181 183\\n1 182 184\\n1 183 185\\n1 184 186\\n1 185 187\\n1 186 188\\n1 187 189\\n1 188 190\\n1 189 191\\n1 190 192\\n1 191 193\\n1 192 194\\n1 193 195\\n1 194 196\\n1 195 197\\n1 196 198\\n1 197 199\\n1 198 200\\n1 199 201\\n1 200 202\\n1 201 203\\n1 202 204\\n1 203 205\\n1 204 206\\n1 205 207\\n1 206 208\\n1 207 209\\n1 208 210\\n1 209 211\\n1 210 212\\n1 211 213\\n1 212 214\\n1 213 215\\n1 214 216\\n1 215 217\\n1 216 218\\n1 217 219\\n1 218 220\\n1 219 221\\n1 220 222\\n1 221 223\\n1 222 224\\n1 223 225\\n1 224 226\\n1 225 227\\n1 226 228\\n1 227 229\\n1 228 230\\n1 229 231\\n1 230 232\\n1 231 233\\n1 232 234\\n1 233 235\\n1 234 236\\n1 235 237\\n1 236 238\\n1 237 239\\n1 238",
        "num_ids_2": 1196,
        "num_ids_4": 1196
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\n\"\"\"\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n') == '2\\n6\\n-1\\n7'\n\"\"\"\n",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\"\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"6\"\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"-1\"\n",
        "num_ids_2": 90,
        "num_ids_4": 135
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5') == '2\\n6\\n-1\\n7'\n\"\"\"\n\nimport sys\nimport numpy as np\nfrom collections import Counter",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"6\\n6\\n-1\\n7\"\nassert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"6\\n6\\n-1\\n7\"\nassert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"6\\n6\\n-1\\n7\"\nassert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"6\\n6\\n-1\\n7\"\n",
        "num_ids_2": 110,
        "num_ids_4": 220
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\"\"\") == \"2\"\nassert solution(\"\"\"5 2\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\"\"\") == \"6\"\nassert solution(\"\"\"5 2\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\"\"\") == \"-1\"\n\n\"\"\"\nn, k = map(int, stdin.readline().split())\nprice = list(map(int, stdin.readline().split()))\nprice.sort()\n\nd = set()\n\nfor i in range(n):\n    for j in range(i+1, n):\n        if price[i] - price[j] <= k:\n            d.add(price[i] - price[j])",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42 4\") == \"3\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42 4 8 15 16 8 16 23 15 16 42 23 42 4\") == \"3\"\n\nprint('The code ran Correctly')\n",
        "num_ids_2": 35,
        "num_ids_4": 82
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8 15 16 23') == '5'\n\"\"\"\n\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 8 15 16 23') == 5\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == 0\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42 4 4 8 15 16 23\") == \"6\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42 4 4 8 15 16 23 16 16 8 16 23 15 16 42 23 42\") == \"12\"\n",
        "num_ids_2": 35,
        "num_ids_4": 87
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 60
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 15 16 8 23 15 16 42 23 42') == '0'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '3'\nassert solution('4 8 4 8 15 16 16 23 15 16 42 23 42') == '3'\nassert solution('4 8 4 8 8 15 16 16 23 15 16 42 23 42') == '3'\n",
        "num_ids_2": 35,
        "num_ids_4": 80
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('4 8 15 16 23') == 5\n\"\"\"\n\n\nfrom typing import List",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"3\"",
        "num_ids_2": 35,
        "num_ids_4": 56
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 15 16 8 23 15 16 42 23 42') == '0'\nassert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '3'\n",
        "num_ids_2": 35,
        "num_ids_4": 72
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n5\n4 8 15 16 23\n''') == '5'\n\nassert solution('''\n12\n4 8 4 8 15 16 8 16 23 15 16 42 23 42\n''') == '3'\n\nassert solution('''\n15\n4 8 4 8 15 16 8 16 23 15 16 42 23 42\n''') == '0'\n",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5') == '0'\nassert solution('13 42') == '3'\nassert solution('18 4') == '2'\nassert solution('1337 420') == '2'\nassert solution('123456789 1000000000') == '9150'\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13 42') == '0'\nassert solution('5 5') == '0'\nassert solution('1337 420') == '2'\nassert solution('123456789 1000000000') == '9150'\nassert solution('100500 9000') == '87654322'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 50
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5\\n13 42') == '0'\nassert solution('13 37\\n18 4') == '3'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\\n3\"\nassert solution(\"13 37\\n100 500\") == \"2\\n92\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"87654322\\n9150\"\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 63
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 5\\n13 42') == '0'\nassert solution('13 37\\n42 100') == '3'\nassert solution('123456789 1000000000\\n100500 9000') == '92'\nassert solution('100500 9000') == '87654322'\n\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10000000)\n",
        "num_ids_2": 30,
        "num_ids_4": 65
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\") == \"0\"\nassert solution(\"13 42\") == \"3\"\nassert solution(\"18 4\") == \"2\"\nassert solution(\"1337 420\") == \"92\"\nassert solution(\"123456789 1000000000\") == \"87654322\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\") == \"0\"\nassert solution(\"13 42\") == \"3\"\nassert solution(\"18 4\") == \"2\"\nassert solution(\"1337 420\") == \"92\"\nassert solution(\"123456789 1000000000\") == \"87654322\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\"\nassert solution(\"13 37\\n19 4\") == \"3\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"92\"\nassert solution(\"100500 9000\\n1 1\") == \"87654322\"\n\n\"\"\"\nimport sys",
        "num_ids_2": 30,
        "num_ids_4": 69
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\\n3\"\nassert solution(\"13 37\\n100500 9000\") == \"2\\n92\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"8\\n87654322\"\nassert solution(\"1337 420\\n123456789 1000000000\") == \"2\\n9150\"\n\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 87
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000''') == '0\\n3\\n2\\n92\\n87654322\\n9150'\nprint('Test success!')\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n\n\n---",
        "num_ids_2": 75,
        "num_ids_4": 75
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n",
        "num_ids_2": 75,
        "num_ids_4": 75
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\nassert solution(\"6 2 1\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\nassert solution(\"5 2 1\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\nassert solution(\"7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\",
        "num_ids_2": 149,
        "num_ids_4": 1561
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\\n\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n\n\"\"\"\nfrom functools import reduce\nimport operator",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\\n\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\\n\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\nassert solution(\"6 14 195238461872\\n3 10 991542\\n2 0 329295212\\n\") == \"8\\n0\\n0\"\n\"\"\"\n",
        "num_ids_2": 116,
        "num_ids_4": 116
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n\n\"\"\"\nimport sys\nimport math\n",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5 12345\") == '12339'\nassert solution(\"5 0 4\") == '0'\nassert solution(\"10 5 15\") == '15'\nassert solution(\"17 8 54321\") == '54306'\nassert solution(\"499999993 9 1000000000\") == '999999954'\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5 12345\") == \"12339\"\nassert solution(\"5 0 4\") == \"0\"\nassert solution(\"10 5 15\") == \"15\"\nassert solution(\"17 8 54321\") == \"54306\"\nassert solution(\"499999993 9 1000000000\") == \"999999995\"\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n",
        "num_ids_2": 75,
        "num_ids_4": 75
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '7 2\\n' + '1 2 2 3 2 4 10\\n'\n    ) == '6'\n\nassert solution(\n    '8 2\\n' + '1 2 2 3 2 4 6 10\\n'\n    ) == '8'\n\nassert solution(\n    '7 3\\n' + '1 2 2 3 2 4 5\\n'\n    ) == '4'\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\n\nprint(solution(stdin))\n",
        "num_ids_2": 41,
        "num_ids_4": 61
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == '6'\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == '8'\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == '4'\n\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 61
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\n\nassert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\n",
        "num_ids_2": 41,
        "num_ids_4": 81
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\n\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 41,
        "num_ids_4": 61
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n7 2\n1 2 2 3 2 4 10\n\"\"\") == '6'\nassert solution(\n\"\"\"\n8 2\n1 2 2 3 2 4 6 10\n\"\"\") == '8'\nassert solution(\n\"\"\"\n7 3\n1 2 2 3 2 4 5\n\"\"\") == '4'\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3\") == \"2\"\nassert solution(\"7 2\") == \"6\"\nassert solution(\"8 2\") == \"8\"\nassert solution(\"7 3\") == \"4\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"6 2\\n1 2 2 3 2 4 10\"\n) == \"6\"\nassert solution(\n    \"8 2\\n1 2 2 3 2 4 6 10\"\n) == \"8\"\nassert solution(\n    \"7 3\\n1 2 2 3 2 4 5\"\n) == \"4\"\nprint(\"You are awesome!\")",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == 6\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == 8\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == 4\n\nprint(\"PASSED\")\n\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 55
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == '6'\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == '8'\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == '4'\nassert solution(\"7 4\\n1 2 2 3 2 4 5\") == '4'\nassert solution(\"8 5\\n1 2 2 3 2 4 5\") == '5'\n",
        "num_ids_2": 41,
        "num_ids_4": 81
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABC\") == \"abc\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abc') == 'abc'\nassert solution('abBc') == 'Abbc'\nassert solution('aBbc') == 'Abbc'\nassert solution('aBbcE') == 'AbbcE'\nassert solution('aBbcEf') == 'AbbcEf'\n",
        "num_ids_2": 23,
        "num_ids_4": 51
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC\") == \"abc\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"abcABC\") == \"abcabc\"\nassert solution(\"abcABC123\") == \"abcabc123\"\nassert solution(\"ABC123\") == \"abc123\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 46
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('AB') == 'aB'\nassert solution('ABC') == 'aBC'\nassert solution('ABCD') == 'aBCD'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 35
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abc') == 'aBC'\nassert solution('ABC') == 'AbC'",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC\", 1) == \"aBC\"\nassert solution(\"ABc\", 1) == \"Abc\"\nassert solution(\"abC\", 1) == \"abC\"\nassert solution(\"ABc\", 2) == \"AbC\"\nassert solution(\"ABc\", 3) == \"Abc\"\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABC') == 'abc'\nassert solution('ABK') == 'abk'\n\"\"\"\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABC') == 'abc'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC\", 1) == \"aBC\"\nassert solution(\"ABC\", 2) == \"AbC\"\nassert solution(\"ABC\", 3) == \"AbC\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 1\nABC''') == 'abc'\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\n\"\"\"\n) == \"3\\n4\\n6\\n1\\n5\\n2\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40') == '3\\n4\\n6\\n1\\n5\\n2'\nassert solution('moscow 10\\nkazan 50\\nkhabarovsk 20\\nkazan 35\\nmoscow 60\\nkhabarovsk 40') == '4\\n6\\n3\\n1\\n5\\n2'\nassert solution('moscow 10\\nkazan 35\\nkhabarovsk 20\\nkazan 50\\nmoscow 60\\nkhabarovsk 40') == '4\\n6\\n1\\n5\\n3\\n2'\nassert solution('moscow 10\\nkazan 35\\nkhabarovsk 20\\nkazan 50\\nmoscow 40\\nkhabarovsk 20') == '4\\n6\\n1\\n3\\n5\\n2'\nassert solution('moscow 20\\nkazan 40\\nkhabarovsk 50\\nkazan 35\\nmoscow 40\\nkhabarovsk 20') == '3\\n4\\n6\\n1\\n5\\n2'\n",
        "num_ids_2": 116,
        "num_ids_4": 232
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == '3\\n4\\n6\\n1\\n5\\n2'\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n\n\"\"\"\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40''') == '3\\n4\\n6\\n1\\n5\\n2'\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == '3\\n4\\n6\\n1\\n5\\n2'\nprint(\"PASSED\")\n\n----\n\nSample Input\n\n8\nwarsaw 80\nwarsaw 90\nwarsaw 90\nkrakow 95\nkrakow 65\nkrakow 95\nkrakow 85\nkrakow 75\n\nSample Output\n\n4\n5\n6\n3\n2\n1\n\"\"\"",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\nassert solution(\"moscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"1\\n2\\n3\\n4\\n5\"\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\") == \"2\\n3\\n1\\n4\\n5\"\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\\nkazan 35\\nmoscow 20\\nkhabarovsk 40\\nkazan 35\\nmoscow 10\\nkazan 20\\nkhabarovsk 20\\nmoscow 60\") == \"6\\n4\\n3\\n2\\n5\\n1\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\"\n",
        "num_ids_2": 106,
        "num_ids_4": 212
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 900\\n\") == \"Yes\"\n\"\"\"\n\nimport sys\nimport re\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 900') == 'Yes'\n\"\"\"\n\nK, X = input().split()\nK = int(K)\nX = int(X)\n\ncoins = list(map(int, input().split()))\n\nfor i in range(len(coins)):\n    for j in range(i + 1, len(coins)):\n        if coins[i] + coins[j] == X:\n            print('Yes')\n            break\n    else:\n        continue\n    break\nelse:\n    print('No')\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 900\\n\") == 'No'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 300\") == \"Yes\"\nassert solution(\"2 1000\") == \"No\"\nassert solution(\"3 100\") == \"No\"\nassert solution(\"1 1\") == \"Yes\"\nassert solution(\"2 500\") == \"No\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 900') == 'Yes'\nprint(solution('2 900'))\nassert solution('2 10') == 'No'\nprint(solution('2 10'))\n\n\"\"\"\nimport math\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 900\") == 'Yes'\n\n\"\"\"\n\nK, X = [int(x) for x in stdin.split()]\nprint('Yes' if K * 500 >= X else 'No')\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\"\nK, X = input().split()\nK, X = int(K), int(X)",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 10') == '0.145833333333'\n\"\"\"\n\nimport collections",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10\") == '0.145833333333'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\nprint(solution(\"3 10\"))\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\"\"\"\n\nfrom math import factorial, pow\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 10') == '0.145833333333'\nassert solution('1 1') == '1'\nassert solution('3 9') == '0.122222222222'\nassert solution('2 8') == '0.111111111111'\nassert solution('4 7') == '0.10101010101'\n\n------\n0.145833333333",
        "num_ids_2": 27,
        "num_ids_4": 60
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '0'\n\nassert solution('5 10') == '0.145833333333'\nassert solution('3 5') == '0.145833333333'\nassert solution('3 10') == '0.145833333333'\nassert solution('3 50') == '0.145833333333'\n",
        "num_ids_2": 26,
        "num_ids_4": 58
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 10\") == '0.145833333333'\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10\") == '0.145833333333'\n\"\"\"\nimport math",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10\") == '0.145833333333'\n\"\"\"\n\n\nfrom collections import Counter\nimport numpy as np",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 10') == '0.145833333333'\n\"\"\"\n\nimport random\nimport math",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"SAT\") == 1\nassert solution(\"MON\") == 2\n\n\"\"\"\n\nS = input()\n\ncount = 0",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"SAT\") == \"1\"\n\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"SAT\") == 1\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"SAT\") == \"1\"\nassert solution(\"MON\") == \"2\"\nassert solution(\"WED\") == \"3\"\nassert solution(\"THU\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"SAT\") == \"1\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"SAT\") == 1\nassert solution(\"MON\") == 0\nassert solution(\"FRI\") == 4\nassert solution(\"THU\") == 3\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 35
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"SAT\") == 1\n\"\"\"\n\nS = input()\n\ntotal_days = 0\nfor days in range(7):\n    if S == \"SUN\":\n        break\n    if S == \"SAT\":\n        total_days += 1\n    S = \"MON\" if S == \"SUN\" else \"TUE\"\n    S = \"SUN\" if S == \"SAT\" else S\n\nprint(total_days)\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"SAT\") == \"1\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"SAT\") == \"1\"\nassert solution(\"SUN\") == \"1\"\nassert solution(\"TUE\") == \"0\"\nassert solution(\"WED\") == \"0\"\nassert solution(\"THU\") == \"0\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\nprint(\"Passed!\")\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\nprint(solution(\"2 10 20\"))",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 10 20\\n') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\nprint(solution(input()))\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\"\"\"",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\nprint(solution(\"2 10 20\"))\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\n'''",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n1 3 2''') == '0'\nassert solution('''5\n1 3 1 1 4''') == '5'\nassert solution('''5\n1 3 2 1 4''') == '4'\nassert solution('''5\n1 3 2 1 4''') == '4'\nassert solution('''5\n1 3 2 1 4''') == '4'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == 5\nassert solution(\"5\\n1 3 2 1 4\") == 4\nassert solution(\"3\\n4 1 2\") == 0\n\"\"\"\n\nn = int(input().strip())\narr = [int(input().strip()) for _ in range(n)]\n\narr.sort()\n\nprint(sum(arr[:n // 3]))\n",
        "num_ids_2": 30,
        "num_ids_4": 43
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == 5\nassert solution(\"5\\n1 3 2 1 4\") == 4\nassert solution(\"3\\n4 1 2\") == 0\nassert solution(\"1\\n1\") == 1\n\nassert solution(\"1\\n1\\n1\") == 1\n",
        "num_ids_2": 30,
        "num_ids_4": 54
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 2') == 0\nassert solution('1 3 1 1 4') == 5\n\"\"\"\n\n\"\"\"\nhttps://app.codility.com/demo/results/trainingKZMTHS-YV9/\nYou are given an array $d_1, d_2, \\dots, d_n$ consisting of $n$ integer numbers.\n\nYour task is to split this array into three parts (some of which may be empty) in such a way that each element of the array belongs to exactly one of the three parts, and each of the parts forms a consecutive contiguous subsegment (possibly, empty) of the original array.\n\nLet the sum of elements of the first part be $sum_1$, the sum of elements of the second part be $sum_2$ and the sum of elements of the third part be $sum_3$. Among all possible ways to split the array you have to choose a way such that $sum_1 = sum_3$ and $sum_1$ is maximum possible.\n\nMore formally, if the first part of the array contains $a$ elements, the second part of the array contains $b$ elements and the third part contains $c$ elements, then:\n\n$$sum_1 = \\sum\\limits_{1 \\le i \\le a}d_i,$$ $$sum_2 = \\sum\\limits_{a + 1 \\le i \\le a + b}d_i,$$ $$sum_3 = \\sum\\limits_{a + b + 1 \\le i \\le a + b + c}d_i.$$\n\nThe sum of an empty array is $0$.\n\nYour task is to find a way to split the array such that $sum_1 = sum_3$ and $sum_1$ is maximum possible.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in the array $d$.\n\nThe second line of the input contains $n$ integers $d_1, d_2, \\dots, d_n$ ($1 \\le d_i \\le 10^9$) \u2014 the elements of the array $d$.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the maximum possible value of $sum_1$, considering that the condition $sum_1 = sum_3$ must be met.\n\nObviously, at least one valid way to split the array exists (use $a=c=0$ and $b=n$).\n\nInput\n5\n1 3 1 1 4\n\nOutput\n5\n\nInput\n5\n1 3 2 1 4\n\nOutput\n4\n\nInput\n3\n4 1 2\n\nOutput\n0\n\"\"\"\n\nn = int(input())\nd = list(map(int, input().split()))\na, b, c = 0, 0, 0\nma = -1\nfor i in range(n):\n    if i == 0:\n        a = d[0]\n    else:\n        a += d[i]\n    if i == 0 or i == n - 1:\n        b = a\n    else:\n        b += d[i]\n    if i == 0 or i == n - 1 or i == n - 2:\n        c = b\n    else:\n        c += d[i]\n    if i >= 1:\n        ma = max(ma, a)\n\nprint(ma)\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\\n\"\n\nassert solution(\"5\\n1 3 2 1 4\") == \"4\\n\"\n\nassert solution(\"3\\n4 1 2\") == \"0\\n\"",
        "num_ids_2": 38,
        "num_ids_4": 55
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 3 1 1 4\\n\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\\n\") == \"4\"\nassert solution(\"3\\n4 1 2\\n\") == \"0\"\nassert solution(\"5\\n1 3 2 1 4\\n\") == \"4\"",
        "num_ids_2": 38,
        "num_ids_4": 74
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\\n\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\\n\"\nassert solution(\"3\\n4 1 2\") == \"0\\n\"\n",
        "num_ids_2": 38,
        "num_ids_4": 55
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\\n\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\\n\"\nassert solution(\"3\\n4 1 2\") == \"0\\n\"\nassert solution(\"3\\n1 1 2\") == \"0\\n\"\n\n------ Solution ------\n\n\n\n-------\n\n\n\n------\n\n----\n\n------\n\n----\n\n\n\n------\n\n----\n\n------\n\n----\n\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------",
        "num_ids_2": 38,
        "num_ids_4": 72
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 3 1 1 4\") == \"5\"\nassert solution(\"5 1 3 2 1 4\") == \"4\"\nassert solution(\"3 4 1 2\") == \"0\"\n",
        "num_ids_2": 30,
        "num_ids_4": 43
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 3 1 1 4') == '5'\nassert solution('5\\n1 3 2 1 4') == '4'\nassert solution('3\\n4 1 2') == '0'\nassert solution('1\\n1') == '0'\nassert solution('2\\n4 1 2') == '0'\n",
        "num_ids_2": 34,
        "num_ids_4": 62
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000''') == '''YES\n3 2 1\nYES\n100 100 100\nNO\nNO\nYES\n1 1 1000000000'''\nprint(solution(stdin), end='')",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 3\") == \"YES\"\nassert solution(\"100 100 100\") == \"NO\"\nassert solution(\"50 49 49\") == \"YES\"\nassert solution(\"10 30 20\") == \"YES\"\nassert solution(\"1 1000000000 1000000000\") == \"YES\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\\n') == 'YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000'\n",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 3\") == \"YES\"\nassert solution(\"100 100 100\") == \"YES\"\nassert solution(\"50 49 49\") == \"NO\"\nassert solution(\"10 30 20\") == \"YES\"\nassert solution(\"1 1000000000 1000000000\") == \"YES\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n\"\"\"\n",
        "num_ids_2": 62,
        "num_ids_4": 62
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n",
        "num_ids_2": 62,
        "num_ids_4": 62
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2 3') == 'YES'\nassert solution('100 100 100') == 'NO'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\nprint(solution(\"5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\"))\n\"\"\"\n\nimport sys\n\nDEBUG = False\n",
        "num_ids_2": 65,
        "num_ids_4": 65
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\nassert solution(\"5\\n7 5 9\\n19 15 19\\n20 16 21\\n8 7 15\\n14 11 13\") == \"NO\\nNO\\nNO\\nNO\\nNO\"\nassert solution(\"5\\n7 5 9\\n19 15 19\\n20 16 21\\n8 7 15\\n14 11 13\") == \"NO\\nNO\\nNO\\nNO\\nNO\"\nassert solution(\"5\\n7 5 9\\n19 15 19\\n20 16 21\\n8 7 15\\n14 11 13\") == \"NO\\nNO\\nNO\\nNO\\nNO\"\nassert solution(\"5\\n7 5 9\\n19 15 19\\n20 16 21\\n8 7 15\\n14 11 13\") == \"NO\\nNO\\nNO\\nNO\\nNO\"\n",
        "num_ids_2": 112,
        "num_ids_4": 206
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 6\") == \"NO\"\nassert solution(\"2 2 2\") == \"YES\"\nassert solution(\"1 1 1\") == \"YES\"\nassert solution(\"3 2 3\") == \"NO\"\nassert solution(\"3 5 7\") == \"NO\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n\"\"\"\n\n\"\"\"\nn, m, k = map(int, input().split())\nobjects = list(map(int, input().split()))\n\nboxes = [k for _ in range(m)]\n\nfor i in range(n):\n    left = boxes.index(max(boxes))\n    boxes[left] -= objects[i]\n\nprint(len(boxes))\n\"\"\"\n\n\"\"\"\nn, m, k = map(int, input().split())\nobjects = list(map(int, input().split()))\n\nboxes = [k for _ in range(m)]\n\nfor i in range(n):\n    left = boxes.index(max(boxes))\n    boxes[left] -= objects[i]\n\nprint(len(boxes))\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == '4'\nassert solution(\"5 1 4\\n4 2 3 4 1\") == '1'\nassert solution(\"5 3 3\\n1 2 3 1 1\") == '5'\n\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\n\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\n\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(len(input().split()))\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 2 6\n5 2 1 4 2''') == '4'\nassert solution('''5 1 4\n4 2 3 4 1''') == '1'\nassert solution('''5 3 3\n1 2 3 1 1''') == '5'\n\"\"\"\n\nfrom collections import deque, defaultdict\nfrom itertools import permutations\nfrom sys import stdin\n\nn, m, k = map(int, stdin.readline().split())\nobj_sizes = list(map(int, stdin.readline().split()))\n\npossible_positions = defaultdict(list)\n\nfor i, obj_size in enumerate(obj_sizes):\n    for box_size in range(1, k + 1):\n        if obj_size <= box_size:\n            possible_positions[box_size].append(i + 1)\n\nans = 0\n\nfor perm in permutations(possible_positions[k]):\n    in_box = deque()\n    boxes = deque([k])\n    max_size = 0\n\n    for box in perm:\n        in_box.append(box)\n        max_size += obj_sizes[box - 1]\n        boxes.append(boxes[-1] - obj_sizes[box - 1])\n\n    while in_box:\n        box = in_box.popleft()\n        boxes.popleft()\n        max_size += boxes[-1]\n\n    ans = max(ans, max_size)\n\nprint(ans)\n",
        "num_ids_2": 18,
        "num_ids_4": 27
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\n",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\nassert solution('5 5 4\\n4 2 1 2 4') == '5'\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 21\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abacaba') == 12\nassert solution('aaaaaaa') == 0\nassert solution('abcdefghijklmnopqrstuvwxyz') == 26 ** 2\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 42
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abba\") == \"2\"\nassert solution(\"abacaba\") == \"3\"\nassert solution(\"abac\") == \"0\"\nassert solution(\"abacabaabacaba\") == \"7\"\nassert solution(\"a\") == \"1\"\n",
        "num_ids_2": 22,
        "num_ids_4": 48
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abacaba') == 12\nassert solution('aaaaaaa') == 0\nassert solution('sadfaasdda') == 21\nassert solution('f a d') == 0\nassert solution('sadf a sdda') == 21\n",
        "num_ids_2": 19,
        "num_ids_4": 42
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\n",
        "num_ids_2": 19,
        "num_ids_4": 32
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7 2\nabacaba\na b''') == 12\nassert solution('''10 3\nsadfaasdda\nf a d''') == 21\n\n'''",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(solution('aaaaaaa')) == 21\nassert solution(solution('sadfaasdda')) == 0\nassert solution(solution('abc')) == 3\nassert solution(solution('abcd')) == 7\n",
        "num_ids_2": 30,
        "num_ids_4": 55
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\n",
        "num_ids_2": 19,
        "num_ids_4": 32
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == \"12\"\nassert solution(\"aaaaaaa\") == \"0\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n5\\n1 2 3 -1 -2') == '2'\nassert solution('4\\n4\\n1 2 3 -1 -2') == '-1'\nassert solution('4\\n6\\n-1 -2 -1 -3') == '-1'\nassert solution('4\\n7\\n-1 -1000000000 1 -1000000000 1 -1000000000') == '-1000000000'\nassert solution('4\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '-2999999997'\n\n\"\"\"\n",
        "num_ids_2": 45,
        "num_ids_4": 103
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\") == \"2\"\nassert solution(\"4\\n4\\n1 2 3 -1 -2\") == \"1\"\nassert solution(\"4\\n4\\n-1 -2 -1 -3\") == \"-1\"\nassert solution(\"10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"6\"\n\n\"\"\"\n",
        "num_ids_2": 44,
        "num_ids_4": 94
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\") == \"2\"\nassert solution(\"4\\n4\\n1 2 3 -1 -2\") == \"0\"\nassert solution(\"4\\n4\\n-1 -2 -1 -3\") == \"-2999999997\"\n",
        "num_ids_2": 57,
        "num_ids_4": 83
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\\n\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\\n\") == \"2\\n-1\\n6\\n-2999999997\"\n\n\"\"\"\n\nimport sys\nimport os\nimport time\n",
        "num_ids_2": 182,
        "num_ids_4": 182
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\") == \"2\\n-1\"\nassert solution(\"4\\n4\\n-1 -2 -1 -3\") == \"-1\"\nassert solution(\"10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"6\\n-2999999997\"\n",
        "num_ids_2": 49,
        "num_ids_4": 83
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\n\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10**6)\n",
        "num_ids_2": 175,
        "num_ids_4": 350
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\n",
        "num_ids_2": 124,
        "num_ids_4": 248
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 -1 -2') == '2'\nassert solution('4\\n-1 -2 -1 -3') == '-1'\nassert solution('10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '-2999999997'\nassert solution('6\\n1 -1000000000 1 -1000000000 1 -1000000000') == '-1'\n\n-----Problem-----\n\n* easy\n\nTags:\n\nCompany\nAmazon\nFacebook\nMicrosoft\nGoogle\nBloomberg\n\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 99
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 -1 -2\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"1 -2 -1 -3\") == \"-1\"\nassert solution(\"10\") == \"5\"",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\n\"\"\"\n",
        "num_ids_2": 89,
        "num_ids_4": 89
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 2\\n3 2\") == \"1 2\\n2 3\\n3 2\"\nassert solution(\"3 4\\n1 2\\n2 3\\n3 4\") == \"1 2\\n2 3\\n3 4\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"1 2\\n2 3\\n3 4\\n4 5\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"1 2\\n2 3\\n2 5\\n3 4\\n4 5\\n6 1\\n1 6\\n2 7\\n5 8\"\n\n\"\"\"\n\n\nclass graph:\n    def __init__(self, adj, n):\n        self.adj = adj\n        self.n = n\n        self.parents = [None]*n\n        self.path = []\n\n    def dfs(self, start):\n        self.visited[start] = True\n        self.path.append(start)\n        for node in self.adj[start]:\n            if not self.visited[node]:\n                self.dfs(node)\n        return self.path\n\n\nclass Solution:\n    def solve(self, n, m, edges):\n        def build_graph(edges):\n            adj = {}\n            for edge in edges:\n                if edge[0] in adj:\n                    adj[edge[0]].append(edge[1])\n                else:\n                    adj[edge[0]] = [edge[1]]\n                if edge[1] in adj:\n                    adj[edge[1]].append(edge[0])\n                else:\n                    adj[edge[1]] = [edge[0]]\n            return adj\n\n        g = graph(build_graph(edges), n)\n        visited = [False]*n\n        path = g.dfs(0)\n        return path\n",
        "num_ids_2": 60,
        "num_ids_4": 182
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 5\n1 2\n2 3\n3 5\n4 3\n1 5''') == '''3 5\n2 1\n3 2\n3 4'''\nassert solution('''4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4''') == '''4 1\n1 2\n1 3'''\nassert solution('''8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n''') == '''3 2\n2 5\n8 5\n6 1\n2 7\n1 2\n3 4'''",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n1 2\\n2 3\\n3 4\") == \"3 5\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\"\nassert solution(\"3 2\\n2 1\\n2 3\") == \"2 5\"\nassert solution(\"3 2\\n2 1\\n2 3\\n3 2\") == \"2 1\"",
        "num_ids_2": 60,
        "num_ids_4": 128
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n3 4\\n\") == \"3 2\\n2 1\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"",
        "num_ids_2": 84,
        "num_ids_4": 158
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"5 5\n1 2\n2 3\n3 5\n4 3\n1 5\n\"\"\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"\"\"4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n\"\"\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"\"\"8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n\"\"\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\"\n\n\n\n-----\n\nfrom collections import defaultdict",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\"\nprint('tests passed')",
        "num_ids_2": 88,
        "num_ids_4": 152
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5 5\n1 2\n2 3\n3 5\n4 3\n1 5\"\"\") == \"\"\"3 5\n2 1\n3 2\n3 4\"\"\"\n\nassert solution(\"\"\"4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\"\"\") == \"\"\"4 1\n1 2\n1 3\"\"\"\n\nassert solution(\"\"\"8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n\"\"\") == \"\"\"3 2\n2 5\n8 5\n6 1\n2 7\n1 2\n3 4\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\n\n\"\"\"",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == '3 5\\n2 1\\n3 2\\n3 4'\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == '4 1\\n1 2\\n1 3'\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == '3 2\\n2 5\\n8 5\\n6 1\\n2 7'\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == '4 1\\n1 2\\n1 3'\n\nassert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == '3 5\\n2 1\\n3 2\\n3 4'\n",
        "num_ids_2": 88,
        "num_ids_4": 196
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\n\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\\n2 3\"\n\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n\n\"\"\"\n\n\nfrom typing import Tuple, List, Dict\n",
        "num_ids_2": 92,
        "num_ids_4": 164
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n3\") == \"5\"\nassert solution(\"3\\n5\") == \"0\"\nassert solution(\"6\\n2\") == \"8\"\nassert solution(\"9\\n5\") == \"13\"\n\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n5\") == \"4\"\nassert solution(\"2\\n5\") == \"8\"\nassert solution(\"3\\n5\") == \"12\"\nassert solution(\"4\\n5\") == \"16\"\n\n\"\"\"\n\nfrom collections import Counter\nimport itertools\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('499993') == '40'\n\"\"\"\n\nimport sys\n\nfrom itertools import combinations",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n499993') == '41664916690999888'\n\"\"\"\n\n\nfrom collections import deque",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"499993\\n\") == \"40\"\n\"\"\"\n\nimport sys\n\nfrom typing import List\n\nDEBUG = False\ndata = sys.stdin.read().split(\"\\n\")\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"499993\") == \"41664916690999888\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('499993') == 41664916690999888\n\"\"\"\n\nimport math\nimport unittest",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('499993') == '41664916690999888'\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n5\\n499993\") == \"0\\n40\\n41664916690999888\"\nprint(solution(\"3\\n1\\n5\\n499993\"))\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"499993\") == \"41664916690999888\"\n\"\"\"\nfrom math import factorial",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\nassert solution('8 7 9 1 3 5 8 4 6 2') == '1 1 1 2 3 3 -1 1 1 4 1 1'\nassert solution('3 8 9 8 8 4 6 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\"\n",
        "num_ids_2": 60,
        "num_ids_4": 88
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4\\n') == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\n\n-----Problem-----\n\n*In a country popular for train travel, you have planned some train travelling one year in advance.  The days of the year that you will travel is given as an array days.  Each day is an integer from 1 to 365.\n\nTrain tickets are sold in 3 different ways:\n\na 1-day pass is sold for costs[0] dollars;\na 7-day pass is sold for costs[1] dollars;\na 30-day pass is sold for costs[2] dollars.\nThe passes allow that many days of consecutive travel.  For example, if we get a 7-day pass on day 2, then we can travel for 7 days: day 2, 3, 4, 5, 6, 7, and 8.\n\nReturn the minimum number of dollars you need to travel every day in the given list of days.\n\n\n-----Solution-----\n\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n'''",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\nassert solution(\"10\\n2 1 3 4 2 4 3 1 2 3\") == \"2 1 1 3 3 1 -1\"\n\nassert solution(\"6\\n5 4 2 3 6 4 5\") == \"1 2 2 1 2 2 1 1\"\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline\n",
        "num_ids_2": 61,
        "num_ids_4": 87
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10\\n4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n\n-----TODO-----\n- replace the for loop in the solution with a one-liner\n- make the solution more efficient\n\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\n\n\"\"\"\n\n\nfrom functools import reduce",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''64\n32\n97\n2\n12345''') == 'YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823'\nprint('Test pass.')",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"64 32 97 2 12345\") == \"YES\\n2 4 8\"\nassert solution(\"64 32 97\") == \"NO\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('64\\n32\\n97\\n2\\n12345') == 'YES\\n2 4 8'\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('64\\n32\\n97\\n2\\n12345') == 'YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823'\nprint(solution('64\\n32\\n97\\n2\\n12345'))\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"64 32 97\") == \"YES 2 4 8\"\nassert solution(\"2 12345\") == \"NO\"\nassert solution(\"12345\") == \"NO\"\nassert solution(\"1\") == \"YES 1\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 49
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\\n\") == \"YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823\"\n\"\"\"\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5 4 3 2 1\") == \"YES\\n2 3 5 \"\nassert solution(\"2 4 6 8\") == \"NO\"\nassert solution(\"2 4 8\") == \"YES\\n2 4 8 \"\nassert solution(\"5 7 6 2 3\") == \"NO\"\n",
        "num_ids_2": 26,
        "num_ids_4": 56
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\\n\") == \"YES\\n2 4 8\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"64 32 97 2 12345\") == \"YES 2 4 8\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(s=\"abba\") == 2\nassert solution(s=\"bb\") == 0\n\"\"\"\n\n\"\"\"\nCompulsory Task 3\n\nYou are given a string $s$ of even length $n$. The string consists of lowercase Latin letters only. The position of string $s$ is that the position of the last letter in the string.\n\nYou should check that the string is valid. The string is valid if and only if it contains at least three distinct letters. The third distinct letter should be 'a'.\n\nFor example, the string $s=ba$ contains only two distinct letters, so it is not valid. On the other hand, the string $s=abacaba$ contains three distinct letters, and the third one is 'a'.\n\nIn the first line of the output you should print YES if the string is valid, and NO otherwise. In the second line you should print the number of distinct letters.\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ (2\u2264n\u22642\u22c510\u200b5) \u2014 the length of the string.\n\nThe second line of the input contains a string $s$ of length $n$, which consists of lowercase Latin letters only.\n\n-----Output-----\n\nIn the first line you should print YES if the string is valid, and NO otherwise.\n\nIn the second line you should print the number of distinct letters.\n\n-----Examples-----\nInput\n4\nabacaba\n\nOutput\nNO\n3\n\nInput\n4\naa\n\nOutput\nYES\n2\n\nInput\n6\nba\n\nOutput\nYES\n2\n\"\"\"\n\n\"\"\"\nCompulsory Task 4\n\nYou are given a string $s$ of even length $n$. The string consists of lowercase Latin letters only. The position of string $s$ is that the position of the last letter in the string.\n\nYou should check that the string is valid. The string is valid if and only if it contains at least three distinct letters. The third distinct letter should be 'a'.\n\nFor example, the string $s=ba$ contains only two distinct letters, so it is not valid. On the other hand, the string $s=abacaba$ contains three distinct letters, and the third one is 'a'.\n\nIn the first line of the output you should print YES if the string is valid, and NO otherwise. In the second line you should print the number of distinct letters.\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ (2\u2264n\u22642\u22c510\u200b5) \u2014 the length of the string.\n\nThe second line of the input contains a string $s$ of length $n$, which consists of lowercase Latin letters only.\n\n-----Output-----\n\nIn the first line you should print YES if the string is valid, and NO otherwise.\n\nIn the second line you should print the number of distinct letters.\n\n-----Examples-----\nInput\n4\nabacaba\n\nOutput\nNO\n3\n\nInput\n4\naa\n\nOutput\nYES\n2\n\nInput\n6\nba\n\nOutput\nYES\n2\n\"\"\"\n\n\"\"\"\nCompulsory Task 5\n\nYou are given a string $s$ of even length $n$. The string consists of lowercase Latin letters only. The position of string $s$ is that the position of the last letter in the string.\n\nYou should check that the string is valid. The string is valid if and only if it contains at least three distinct letters. The third distinct letter should be 'a'.\n\nFor example, the string $s=ba$ contains only two distinct letters, so it is not valid. On the other hand, the string $s=abacaba$ contains three distinct letters, and the third one is 'a'.\n\nIn the first line of the output you should print YES if the string is valid, and NO otherwise. In the second line you should print the number of distinct letters.\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ (2\u2264n\u22642\u22c510\u200b5) \u2014 the length of the string.\n\nThe second line of the input contains a string $s$ of length $n$, which consists of lowercase Latin letters only.\n\n-----Output-----\n\nIn the first line you should print YES if the string is valid, and NO otherwise.\n\nIn the second line you should print the number of distinct letters.\n\n-----Examples-----\nInput\n4\nabacaba\n\nOutput\nNO\n3\n\nInput\n4\naa\n\nOutput\nYES\n2\n\nInput\n6\nba\n\nOutput\nYES\n2\n\"\"\"\n\n\"\"\"\nCompulsory Task 6\n\nYou are given a string $s$ of even length $n$. The string consists of lowercase Latin letters only. The position of string $s$ is that the position of the last letter in the string.\n\nYou should check that the string is valid. The string is valid if and only if it contains at least three distinct letters. The third distinct letter should be 'a'.\n\nFor example, the string $s=ba$ contains only two distinct letters, so it is not valid. On the other hand, the string $s=abacaba$ contains three distinct letters, and the third one is 'a'.\n\nIn the first line of the output you should print YES if the string is valid, and NO otherwise. In the second line you should print the number of distinct letters.\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ (2\u2264n\u22642\u22c510\u200b5) \u2014 the length of the string.\n\nThe second line of the input contains a string $s$ of length $n$, which consists of lowercase Latin letters only.\n\n-----Output-----\n\nIn the first line you should print YES if the string is valid, and NO otherwise.\n\nIn the second line you should print the number of distinct letters.\n\n-----Examples-----\nInput\n4\nabacaba\n\nOutput\nNO\n3\n\nInput\n4\naa\n\nOutput\nYES\n2\n\nInput\n6\nba\n\nOutput\nYES\n2\n\"\"\"\n\n\"\"\"\nCompulsory Task 7\n\nYou are given a string $s$ of even length $n$. The string consists of lowercase Latin letters only. The position of string $s$ is that the position of the last letter in the string.\n\nYou should",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abba') == 2\nassert solution('ababab') == 0\nassert solution('aa') == 1\n",
        "num_ids_2": 18,
        "num_ids_4": 26
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"bbbb\") == 2\nassert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\n\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 35
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abb\") == 1\nassert solution(\"abba\") == 0\nassert solution(\"ba\") == 1\nassert solution(\"abbaabbaabb\") == 0\nassert solution(\"ababb\") == 2\n",
        "num_ids_2": 16,
        "num_ids_4": 34
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abba\") == 2, \"WA\"\nassert solution(\"ababab\") == 0, \"WA\"\nassert solution(\"aa\") == 1, \"WA\"\nassert solution(\"aaa\") == 0, \"WA\"\nassert solution(\"abaa\") == 2, \"WA\"\n\n\"\"\"\n\nn = int(input())\nstring = input()\n\ncount = 0\nfor i in range(0, n, 2):\n    if string[i] == 'a':\n        count += 1\n    if string[i+1] == 'a':\n        count -= 1\n\nprint(count)\nprint(string[0:n:2])\n",
        "num_ids_2": 26,
        "num_ids_4": 50
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"bbbb\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"babababababababababab\") == 5\n",
        "num_ids_2": 17,
        "num_ids_4": 35
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"bbbb\") == 2\nassert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\n\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 35
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abba') == 2\nassert solution('ababab') == 0\nassert solution('aa') == 1\n",
        "num_ids_2": 18,
        "num_ids_4": 26
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abbbaabbbb\") == \"2 abbabba\"\nassert solution(\"abb\") == \"0 abb\"\nassert solution(\"ababab\") == \"0 ababab\"\nassert solution(\"abbbbbb\") == \"2 abbabba\"\nassert solution(\"abbba\") == \"2 abbabba\"\n",
        "num_ids_2": 28,
        "num_ids_4": 58
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bbbb\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"ba\") == 0\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nn = int(input())\ns = input()",
        "num_ids_2": 19,
        "num_ids_4": 35
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n\"\"\"",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n0') == '1'\nassert solution('2\\n3\\n3\\n3') == '6'\nassert solution('2\\n3\\n1\\n2\\n3\\n3\\n1\\n2') == '9'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')",
        "num_ids_2": 21,
        "num_ids_4": 71
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n\"\"\"\nimport sys\nimport itertools\nfrom typing import List, Tuple\n\nsys.setrecursionlimit(10 ** 5)\n\n\"\"\"\n3 4\n1 3\n2 1\n1 4\n\n2\n\n2 2\n1 4\n2 3\n\n1\n\n\"\"\"\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"7\\n1 0\\n2 0\\n3 2\\n0 3\\n4 3\\n1 1\\n\") == \"7\"\nassert solution(\"9\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n\") == \"15\"\n",
        "num_ids_2": 74,
        "num_ids_4": 123
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n\"\"\"\n\nfrom sys import stdin\nfrom itertools import combinations",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 1\\n2 1\\n3 2\\n4 2\\n3 2\\n1 3\") == \"4\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\") == \"9\"\nassert solution(\"5\\n1 1\\n2 1\\n3 2\\n4 2\\n3 2\\n1 3\") == \"15\"\n",
        "num_ids_2": 64,
        "num_ids_4": 98
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\nassert solution(\"6\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"4\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\nassert solution(\"2\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n",
        "num_ids_2": 74,
        "num_ids_4": 148
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 2 3 4\") == \"2\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"2 3\") == \"3\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"3 1\") == \"2\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2') == '2'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1') == '2'\nassert solution('3 2') == '1'\nassert solution('3 3') == '2'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1') == '2'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1\\n') == '2'\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1') == '2'",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\n\"\"\"\n\nfrom math import sqrt\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0.8 1 1.2\") == \"1.000000000000\"\nassert solution(\"6\\n2 1 3 4 5 6\") == \"24.000000000000\"\nassert solution(\"9\\n0.4 1 1.2 1.6\") == \"5.260000000000\"\n",
        "num_ids_2": 43,
        "num_ids_4": 69
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3) == 1\nassert solution(8) == 1.55\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '1.000000000000'\n\n\"\"\"\n\nimport math\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1\\n1\\n1') == '1.000000000000'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '1.000000000000'\nassert solution('4') == '2.000000000000'\nassert solution('5') == '3.000000000000'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n\") == '1.000000000000'\nassert solution(\"6\\n\") == '6.000000000000'\nassert solution(\"5\\n\") == '6.0000000'\nassert solution(\"7\\n\") == '7.00000000'\n\"\"\"\n\nimport math\n",
        "num_ids_2": 30,
        "num_ids_4": 58
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\nassert solution(\"0\") == \"1.000000000000\"\nassert solution(\"1.2\") == \"1.000000000000\"\nassert solution(\"0.7\") == \"1.000000000000\"\nassert solution(\"1.5\") == \"1.000000000000\"\n",
        "num_ids_2": 26,
        "num_ids_4": 56
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n\") == \"Hello World\\n\"\nassert solution(\"2\\n4\\n1\\n2\\n\") == \"7\\n\"\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n\") == \"Hello World\"\nassert solution(\"2\\n1\\n2\\n3\") == \"3\"\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"8\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"Hello World\"\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == 'Hello World'\nassert solution('2\\n3\\n4\\n5\\n') == '9'\nassert solution('2\\n5\\n7\\n9\\n') == '16'\n\"\"\"\n\nn = int(input())\n",
        "num_ids_2": 19,
        "num_ids_4": 61
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == 'Hello World\\n'\nassert solution('2\\nA\\nB') == '3\\n'\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"10\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'Hello World'\n\nprint(solution('1'))\n\nassert solution('1') == 'Hello World'\n\nassert solution('2') == '3'\n\nassert solution('A') == '10'\n\nassert solution('B') == '11'",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == 'Hello World\\n'\nassert solution('2\\na\\nb') == '3\\n'\n\"\"\"\n\nn = input()",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\n\nassert solution(\"1\\n1\") == \"Hello World\\nHello World\"\nassert solution(\"2\\n3\\n3\\n9\") == \"12\\n6\\n9\\n18\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 67
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123\") == \"123\"\nassert solution(\"334\") == \"334\"\nassert solution(\"4321\") == \"4321\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 32
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3') == '3333'\nassert solution('5 4') == '4444'\n\na, b = map(int, stdin.split())\n\na = int(a)\nb = int(b)\n\nprint(str(a) * b)\n\n\"\"\"\n\n\"\"\"\nProblem\n\nYou are given two strings s and t. You can perform the following operations:\n\nInsert a character c into s at position i.\nDelete the character at position i in s.\nReplace the character at position i in s with another character d.\nCount the number of distinct operations you must perform on s to transform it into t.\n\nFor example, transforming s = \"abc\" into t using the following operations:\n\nInsert a, delete a, replace c with d, insert d, delete d.\nWill take 3 operations.\n\n---Problem---\nFind the minimum number of operations required to transform string s into string t.\n\nConstraints\n- 1 \\leq s.length \\leq 100\n- 1 \\leq t.length \\leq 100\n- 1 \\leq s[i].length \\leq 1\n- 1 \\leq t[i].length \\leq 1\n- All characters in s and t are lowercase English letters.\n\nInput\n- The first line of input contains a single integer n (1 \\leq n \\leq 100) \u2014 the number of strings.\n- The next n lines contain two strings, s and t.\n\nOutput\n- Print a single integer \u2014 the minimum number of operations to transform s into t.\n\nSample Input\n2\na\nb\na\nc\n\nSample Output\n2\n\nInput\n2\na\nb\n\nOutput\n0\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"3333\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3') == '3333'\n\"\"\"\n\na, b = input().split()\n\na = int(a)\nb = int(b)",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"3333\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3') == '3333'\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n4 3\n\"\"\") == \"3333\"\n\n----\na b\n\na x\nb y\n\na x + b x = a * b\na y + b y = a * b\na x + b y = a * b\na y + b x = a * b\n\n1 2 3 4\n\n1 x x x\n2 y y y\n3 z z z\n4 t t t\n\n1 x x x + 1 x x x = 1 * 1 + 2 * 1 = 3\n1 x x x + 2 y y y = 1 * 2 + 2 * 2 = 4\n1 x x x + 3 z z z = 1 * 3 + 2 * 3 = 5\n1 x x x + 4 t t t = 1 * 4 + 2 * 4 = 8\n\n2 3 4\n\n2 x x x\n3 y y y\n4 z z z\n5 t t t\n\n2 x x x + 2 x x x = 2 * 2 + 3 * 2 = 6\n2 x x x + 3 y y y = 2 * 3 + 3 * 3 = 9\n2 x x x + 4 z z z = 2 * 4 + 3 * 4 = 12\n2 x x x + 5 t t t = 2 * 5 + 3 * 5 = 15\n\n3 4\n\n3 x x x\n4 y y y\n5 z z z\n6 t t t\n\n3 x x x + 3 x x x = 3 * 3 + 4 * 3 = 12\n3 x x x + 4 y y y = 3 * 4 + 4 * 4 = 16\n3 x x x + 5 z z z = 3 * 5 + 4 * 5 = 20\n3 x x x + 6 t t t = 3 * 6 + 4 * 6 = 24\n\n4 5\n\n4 x x x\n5 y y y\n6 z z z\n7 t t t\n\n4 x x x + 4 x x x = 4 * 4 + 5 * 4 = 20\n4 x x x + 5 y y y = 4 * 5 + 5 * 5 = 25\n4 x x x + 6 z z z = 4 * 6 + 5 * 6 = 30\n4 x x x + 7 t t t = 4 * 7 + 5 * 7 = 35\n\n5 6\n\n5 x x x\n6 y y y\n7 z z z\n8 t t t\n\n5 x x x + 5 x x x = 5 * 5 + 6 * 5 = 30\n5 x x x + 6 y y y = 5 * 6 + 6 * 6 = 36\n5 x x x + 7 z z z = 5 * 7 + 6 * 7 = 42\n5 x x x + 8 t t t = 5 * 8 + 6 * 8 = 48\n\n6 7\n\n6 x x x\n7 y y y\n8 z z z\n9 t t t\n\n6 x x x + 6 x x x = 6 * 6 + 7 * 6 = 42\n6 x x x + 7 y y y = 6 * 7 + 7 * 7 = 49\n6 x x x + 8 z z z = 6 * 8 + 7 * 8 = 56\n6 x x x + 9 t t t = 6 * 9 + 7 * 9 = 63\n\n7 8\n\n7 x x x\n8 y y y\n9 z z z\n10 t t t\n\n7 x x x + 7 x x x = 7 * 7 + 8 * 7 = 56\n7 x x x + 8 y y y = 7 * 8 + 8 * 8 = 64\n7 x x x + 9 z z z = 7 * 9 + 8 * 9 = 72\n7 x x x + 10 t t t = 7 * 10 + 8 * 10 = 80\n\n8 9\n\n8 x x x\n9 y y y\n10 z z z\n11 t t t\n\n8 x x x + 8 x x x = 8 * 8 + 9 * 8 = 72\n8 x x x + 9 y y y = 8 * 9 + 9 * 9 = 81\n8 x x x + 10 z z z = 8 * 10 + 9 * 10 = 90\n8 x x x + 11 t t t = 8 * 11 + 9 * 11 = 99\n\n9 10\n\n9 x x x\n10 y y y\n11 z z z\n12 t t t\n\n9 x x x + 9 x x x = 9 * 9 + 10 * 9 = 90\n9 x x x + 10 y y y = 9 * 10 + 10 * 10 = 100\n9 x x x + 11 z z z = 9 * 11 + 10 * 11 = 110\n9 x x x + 12 t t t = 9 * 12 + 10 * 12 = 120\n\n10 11\n\n10 x x x\n11 y y y\n12 z z z\n13 t t t\n\n10 x x x + 10 x x x = 10 * 10 + 11 * 10 = 110\n10 x x x + 11 y y y = 10 * 11 + 11 * 11 = 121\n10 x x x + 12 z z z = 10 * 12 + 11 * 12 = 132\n10 x x x + 13 t t t = 10 * 13 + 11 * 13 = 143\n\n11 12\n\n11 x x x\n12 y y y\n13 z z z\n14 t t t\n\n11 x x x + 11 x x x = 11 * 11 + 12 * 11 = 121\n11 x x x + 12 y y y = 11 * 12 + 12 * 12 = 132\n11 x x x + 13 z z z = 11 * 13 + 12 * 13 = 143\n11 x x x + 14 t t t = 11 * 14 + 12 * 14 = 152\n\n12 13\n\n12 x x x\n13 y y y\n14 z z z\n15 t t t\n\n12 x x x + 12 x x x = 12 * 12 + 13 * 12 = 132\n12 x x x + 13 y y y = 12 * 13 + 13 * 13 = 143\n12 x x x + 14 z z z = 12 * 14 + 13 * 14 = 152\n12 x x x + 15 t t t = 12 * 15 + 13 * 15 = 163\n\n13 14\n\n13 x x x\n14 y y y\n15 z z z\n16 t t t\n\n13 x x x + 13 x x x = 13 * 13 + 14 * 13 = 143\n13 x x x + 14 y y y = 13 * 14 + 14 * 14 = 152\n13 x x x + 15 z z z = 13 * 15 + 14 * 15 = 163\n13 x x x + 16 t t t = 13 * 16 + 14 * 16 = 176\n\n14 15\n\n14 x x x\n15 y y y\n16 z z z\n17 t t t\n\n14 x x x + 14 x x x = 14 * 14 + 15 * 14 = 152\n14 x x x + 15 y y y = 14 * 15 + 15 * 15 = 165\n14 x x x + 16 z z z = 14 * 16 + 15 * 16 = 176\n14 x x x + 17 t t t = 14 * 17 + 15 * 17 = 187\n\n15 16\n\n15 x x x\n16 y y y\n17 z z z\n18 t t t\n\n15 x x x + 15 x x x = 15 * 15 + 16 * 15 = 165\n15 x x x + 16 y y y = 15 * 16 + 16 * 16 = 192\n15 x x x + 17 z z z = 15 * 17 + 16 * 17 = 217\n15 x x x + 18 t t t = 15 * 18 + 16 * 18 = 256\n\n16 17\n\n16 x x x\n17 y y y\n18 z z z\n19 t t t\n\n16 x x x + 16 x x x = 16 * 16 + 17 * 16 = 192\n16 x x x + 17 y y y = 16 * 17 + 17 * 17 = 193\n16 x x x + 18 z z z = 16 * 18 + 17 * 18 = 218\n16 x x x + 19 t t t = 16 * 19 + 17 * 19 = 259\n\n17 18\n\n17 x x x\n18 y y y\n19 z z z\n20 t t t\n\n17 x x x + 17 x x x = 17 * 17 + 18 * 17 = 193\n17 x x x + 18 y y y = 17 * 18 + 18 * 18 = 218\n17 x x x + 19",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3') == '3333'\nassert solution('8 2') == '88'\nassert solution('2 1') == '21'\nassert solution('9 9') == '9999'\nassert solution('1 1') == '11'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3') == '3333'\nassert solution('1 2') == '12'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"3333\"\nassert solution(\"4 4\") == \"4444\"\nassert solution(\"1 2\") == \"1212\"\nassert solution(\"4 4\") == \"4444\"\nassert solution(\"1 2\") == \"1212\"\n",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a') == 'b'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"c\") == \"d\"\nassert solution(\"z\") == \"a\"\nassert solution(\"b\") == \"c\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('a') == 'b'\nassert solution('c') == 'd'\nassert solution('z') == 'a'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"b\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"b\") == \"c\"\nassert solution(\"c\") == \"d\"\nassert solution(\"d\") == \"e\"\nassert solution(\"e\") == \"f\"\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('a') == 'b'\nassert solution('c') == 'd'\nassert solution('z') == 'a'\n\"\"\"\n\nimport unittest\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"c\") == \"d\"\nassert solution(\"b\") == \"c\"\nassert solution(\"d\") == \"e\"\nassert solution(\"z\") == \"a\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('a') == 'b'\nassert solution('z') == 'a'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a\") == \"b\"\n\nassert solution(\"b\") == \"c\"\n\nassert solution(\"c\") == \"d\"\n\nassert solution(\"d\") == \"e\"\n\nassert solution(\"e\") == \"f\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a\") == \"b\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('order', 'atc') == 'atcoder'\n\"\"\"\n\nS = stdin.split('\\n')[0]\nT = stdin.split('\\n')[1]\nprint(T + S)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('oder','atc') == 'atcoder'\nprint(solution('oder','atc'))\n\n----End----",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"oer atc\") == \"atcoder\"\n\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(S=stdin) == stdout\n\"\"\"\n\nimport sys\nfrom typing import List\n\nS: str = sys.stdin.readline().rstrip()\nT: str = sys.stdin.readline().rstrip()",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\nassert solution(\"indivisibilities\") == \"indivisibilities\"\nassert solution(\"happiness\") == \"happiness\"\n\"\"\"\n\nS, T = map(str, stdin.readlines())\nprint(T + S)\n",
        "num_ids_2": 30,
        "num_ids_4": 42
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('oder', 'atc') == 'atcoder'\n\"\"\"\n\nS = input()\nT = input()\nprint(T + S)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('oder atc') == 'atcoder'\n\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 5 7 8 2') == '0'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nb = [a[0]]\nfor i in range(1, n):\n    if a[i] % 2 == b[-1] % 2:\n        b.append(a[i])\n    else:\n        b.append(a[i])\n        b.append(a[i])\n\nprint(sum(b))\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 2 4 6 3\") == \"0\"\nassert solution(\"6 5 1 2 4 6 3\") == \"0\"\nassert solution(\"1000000 1000000\") == \"1000000\"\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 45
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 5 7 8 2\\n\") == \"0\"\nassert solution(\"6\\n5 1 2 4 6 3\\n\") == \"0\"\nassert solution(\"2\\n1000000 1000000\\n\") == \"1000000\"\n\nprint(\"Success\")\n\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 58
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5\n1 5 7 8 2\n\"\"\") == \"0\"\nassert solution(\"\"\"6\n5 1 2 4 6 3\n\"\"\") == \"0\"\nassert solution(\"\"\"2\n1000000 1000000\n\"\"\") == \"1000000\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1 2 4 6 3') == '0'\nassert solution('6 5 4 3 2 1') == '0'\nassert solution('1000000 1000000') == '1000000'\n\nprint(solution(input()))\n",
        "num_ids_2": 30,
        "num_ids_4": 44
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 2 4 6 3\") == \"0\"\nassert solution(\"1 5 7 8 2\") == \"0\"\nassert solution(\"5 1 2 4 6\") == \"0\"\nassert solution(\"100 200 -500 200 -500\") == \"100\"\nassert solution(\"100 200 -500 200 -500 -500 200 200 -500 200 -500\") == \"0\"\n",
        "num_ids_2": 29,
        "num_ids_4": 59
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 5 7 8 2') == '0'\nassert solution('6\\n5 1 2 4 6 3') == '0'\nassert solution('2\\n1000000 1000000') == '1000000'\n\"\"\"\n\nfrom itertools import accumulate",
        "num_ids_2": 35,
        "num_ids_4": 52
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 5 7 8 2\") == '0'\nassert solution(\"6\\n5 1 2 4 6 3\") == '0'\nassert solution(\"2\\n1000000 1000000\") == '1000000'\nassert solution(\"5\\n1 2 4 8 5\") == '0'\nassert solution(\"5\\n5 3 3 3 3\") == '0'\n\"\"\"\n\nn = int(stdin.readline())\narr = list(map(int, stdin.readline().split()))",
        "num_ids_2": 35,
        "num_ids_4": 69
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 2 4 6 3\") == '0'\nassert solution(\"1 2 3 5 7 8\") == '0'\nassert solution(\"1 1 1 1 1 1\") == '0'\nassert solution(\"1 1 1 1 1 1 1 1\") == '1'\nassert solution(\"1 2 3 5 6\") == '0'\n\nfrom sys import stdin",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n1 5 7 8 2''') == '0'\nassert solution('''6\n5 1 2 4 6 3''') == '0'\nassert solution('''2\n1000000 1000000''') == '1000000'\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4 2 1\\n1 3 5 4 2 7 6\") == 6\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 1') == '1'\nassert solution('1 1 1') == '0'\nassert solution('1 1 2') == '0'\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1 100 99') == '1'\nassert solution('1 3 5 4 2 7 6') == '6'\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\") == \"5\"\nassert solution(\"1 1 100 99\\n100\") == \"1\"\nassert solution(\"7 4 2 1\\n1 3 5 4 2 7 6\") == \"6\"\n\"\"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 59
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3 1\\n1 3 5 4 2 7 6\") == '6'\n\nprint(solution(stdin))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 1\\n1 3 5 4 2 7 6') == '6'\nassert solution('6 2 3 3\\n7 10 50 12 1 8') == '5'\nassert solution('7 2 1\\n1 3 5 4 2 7 6') == '1'\nassert solution('6 2 3 3\\n7 10 50 12 1 8') == '5'\nassert solution('5 2 1\\n1 3 5 4 2 7 6') == '1'\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 2 3 3\\n7 10 50 12 1 8\\n') == '5'\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 100 99\") == \"1\"\nassert solution(\"7 10 50 12 1 8\") == \"5\"\n\"\"\"\n\nn, a, b, k = [int(i) for i in input().split()]\nh = [int(i) for i in input().split()]\n\ns, p = 0, 0\n\nfor i in range(n):\n    hp = h[i]\n    if hp >= a:\n        p += 1\n    elif hp <= 0:\n        continue\n    else:\n        s += hp * (b - hp)\n        p += 1\n    k -= 1\n    if k < 0:\n        s += p\n        break\n\nprint(s)",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input) == output\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(len(str(input())))",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3\\n3 2 0 6 10 12\") == \"3\"\nassert solution(\"4 2\\n0 1 2 3\") == \"0\"\nassert solution(\"8 3\\n0 1 2 3 4 5 6 7\") == \"0\"\n",
        "num_ids_2": 36,
        "num_ids_4": 57
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('1 2') == '0 1'\nassert solution('1 2 3') == '0 1 2'\nassert solution('1 2 3 4') == '0 1 2 3'\n",
        "num_ids_2": 19,
        "num_ids_4": 45
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n0 1 2 3\\n\") == \"3\\n0 1 2 3\\n\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 3 2 4\\n\") == '1 2 3 4'\nassert solution(\"4 3\\n1 3 4 5\\n\") == '1 3 4 5'\nassert solution(\"4 2\\n1 4 3\\n\") == '1 4 3'\n\"\"\"\n\nfrom math import ceil",
        "num_ids_2": 44,
        "num_ids_4": 64
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n0 1 2 3') == '0\\n0 1 2 3'\nassert solution('6 3\\n3 2 0 6 10 12') == '3\\n3 2 0 7 10 14'\n\"\"\"\n\n\"\"\"\nSOLUTION 1\n\nclass Solution:\n    def min_moves(self, arr: list, n: int, m: int) -> int:\n        arr_dict = dict()\n        ans = 0\n        for num in arr:\n            ans += num % m\n            if num % m in arr_dict:\n                arr_dict[num % m] += 1\n            else:\n                arr_dict[num % m] = 1\n        for val in arr_dict.values():\n            ans += n // m * val\n        return ans\n\nassert Solution().min_moves('6 3\\n3 2 0 6 10 12', 6, 3) == 3\nassert Solution().min_moves('4 2\\n0 1 2 3', 4, 2) == 0\n\"\"\"\n\nclass Solution:\n    def min_moves(self, arr: list, n: int, m: int) -> int:\n        ans = 0\n        count = n // m\n        for num in arr:\n            ans += num % m\n            count += num % m\n        return ans + (count - n) * count // 2\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n0 1 2 3') == '0\\n0 1 2 3'\nassert solution('4 2\\n0 1 2 3') == '0\\n0 1 2 3'\nassert solution('4 1\\n0 1 2 3') == '0\\n0 1 2 3'\nassert solution('4 1\\n0 1 2 3\\n0 1 2 3') == '0\\n0 1 2 3'\nassert solution('4 0\\n0 1 2 3') == '0\\n0 1 2 3'\n",
        "num_ids_2": 46,
        "num_ids_4": 98
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\nc = [0 for _ in range(m)]\n\nfor i in range(n):\n    c[a[i] % m] += 1\n\nfor i in range(m - 1):\n    c[i + 1] += c[i]\n\nans = n\nfor i in range(m):\n    ans = min(ans, c[i] * (n // m))\n\nprint(ans)\nprint(*[a[i] + ans - 1 for i in range(n)])\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 3 5 7 9\\n\") == '3'\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n0 1 2 3\") == \"0\\n0 1 2 4\"\nassert solution(\"5 3\\n0 1 2 3 4\") == \"0\\n1 2 4 6\"\nassert solution(\"6 3\\n0 1 2 3 4 5\") == \"1\\n2 4 7 10\"\nassert solution(\"7 3\\n0 1 2 3 4 5 6\") == \"2\\n3 5 8 13\"\nassert solution(\"8 3\\n0 1 2 3 4 5 6 7\") == \"3\\n4 7 11 16\"\n",
        "num_ids_2": 47,
        "num_ids_4": 98
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 3\\n3 2 0 6 10 12') == '3'\nassert solution('4 2\\n0 1 2 3') == '0'",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3''') == '8'\nassert solution('''5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n''') == '20'",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n\"\"\"",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\n\"\"\"\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n\"\"\"\n\nimport heapq",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n1\\n2\\n2\\n3\\n1\\n2\\n1\\n4\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n3\\n1\\n4\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n",
        "num_ids_2": 1351,
        "num_ids_4": 1351
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 0 2 0') == '8'\n'''",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'''5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n'''\n) == '8'\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n3 5\\n4 2\\n2 5\\n\") == \"20\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(example1) == 8\n\"\"\"\n\n\nfrom collections import defaultdict\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\") == \"YES\"\nassert solution(\"4\\n1 1 1 1 1\\n2\\n10 5 1 10 5 1 1 1\") == \"NO\"\n\"\"\"\n\nfrom collections import defaultdict, deque\nimport itertools",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 1 1 1\\n1\") == 'YES'\nassert solution(\"2\\n1 1 1 1\\n10000 10000 10000 10000\") == 'NO'\nassert solution(\"5\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n1\") == 'YES'\nassert solution(\"5\\n1 1 10 10\\n2\\n1 1 1 1 1 1 1 1\\n1\") == 'YES'\nassert solution(\"5\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n10000 10000 10000 10000\") == 'NO'\n",
        "num_ids_2": 42,
        "num_ids_4": 119
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2\\n1 1 1 1 1\\n1\\n1\\n1 1 1 1 1\") == \"NO\"\nassert solution(\"4\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\") == \"YES\"\nassert solution(\"4\\n1\\n1 1 1 1 1\") == \"YES\"\nassert solution(\"4\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n10000 10000 10000 10000\") == \"NO\"\nassert solution(\"4\\n2\\n1 1 1 1 1\\n1\\n1 1 1 1 1\") == \"NO\"\n\"\"\"",
        "num_ids_2": 82,
        "num_ids_4": 147
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\nprint(solution(\"5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\"))\n",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\"\n) == \"YES\\nYES\\nNO\\nYES\\nYES\\n\"\n\n-----Test Case-----\nTest 1\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nYES\nNO\n\nTest 2\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nYES\nNO\n\nTest 3\n\nInput\n1\n1\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 4\n\nInput\n2\n1\n10000 10000 10000 10000\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nYES\nYES\n\nTest 5\n\nInput\n3\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nNO\nYES\nYES\n\nTest 6\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nYES\nNO\n\nTest 7\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nYES\nNO\n\nTest 8\n\nInput\n1\n1\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 9\n\nInput\n1\n1\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 10\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nYES\nYES\n\nTest 11\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nYES\nNO\n\nTest 12\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nYES\nNO\n\nTest 13\n\nInput\n1\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 14\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 15\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 16\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 17\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nYES\nYES\n\nTest 18\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 19\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 20\n\nInput\n1\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nYES\n\nTest 21\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 22\n\nInput\n1\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 23\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 24\n\nInput\n1\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nYES\n\nTest 25\n\nInput\n1\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 26\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 27\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'YES'\nassert solution('1 1 1 1 1 1 1 1') == 'NO'\nassert solution('2 10 5 2 10 1 1 2 5') == 'YES'\nassert solution('1 1 1 1 1 1 1 1') == 'NO'\nassert solution('2 10 5 1 10 5 1 1 1') == 'YES'\n",
        "num_ids_2": 27,
        "num_ids_4": 62
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1''') == '''YES\nYES\nNO\nYES\nYES'''\n\"\"\"\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\\n') == 'YES\\nYES\\nNO\\nYES\\nYES'\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 81,
        "num_ids_4": 81
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n''') == 'YES\\nYES\\nNO\\nYES\\nYES\\n'\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6 5\") == \"3\"\n\"\"\"\n\n\nfrom heapq import heappop, heappush\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 0\") == \"3\"\nassert solution(\"4 4 1\") == \"3\"\nassert solution(\"4 4 2\") == \"4\"\nassert solution(\"4 4 3\") == \"4\"\nassert solution(\"4 4 4\") == \"0\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5') == '3'\nassert solution('7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1') == '9'\nprint(solution(input()))\n",
        "num_ids_2": 149,
        "num_ids_4": 149
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 10 4') == '1'\nassert solution('7 15 18') == '8'\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 1\\n2 3 1\\n1 3 1\\n1 2 1\\n2 1 1\\n3 1 1\\n1 3 1\\n1 2 1\\n3 1 1\\n1 1 1\\n\") == \"3\"\nassert solution(\"4 3 1\\n3 2 1\\n2 3 1\\n3 1 1\\n1 3 1\\n2 1 1\\n3 1 1\\n1 1 1\\n2 1 1\\n3 2 1\\n1 3 1\\n2 2 1\\n\") == \"7\"\nassert solution(\"5 6 1\\n3 4 1\\n2 5 1\\n3 5 1\\n4 5 1\\n2 3 1\\n1 4 1\\n1 3 1\\n1 2 1\\n4 1 1\\n1 5 1\\n3 2 1\\n5 4 1\\n3 1 1\\n\") == \"3\"\nassert solution(\"5 5 1\\n2 4 1\\n3 4 1\\n4 5 1\\n5 2 1\\n1 2 1\\n2 5 1\\n2 3 1\\n3 4 1\\n4 1 1\\n1 5 1\\n1 3 1\\n3 2 1\\n3 5 1\\n2 1 1\\n\") == \"7\"\n\n\"\"\"",
        "num_ids_2": 128,
        "num_ids_4": 291
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 10\\n1 2 1\\n1 3 1\\n2 3 1\\n2 4 1\") == \"3\"\nassert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\") == \"9\"\n\n\"\"\"\n",
        "num_ids_2": 119,
        "num_ids_4": 119
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\") == \"9\"\nprint('Test pass.')",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4 2\\n1 3 1\\n3 2 1') == 2\nassert solution('5 2 3\\n1 2 1\\n2 5 1\\n1 4 1\\n3 5 1') == 4\nassert solution('3 4 4\\n1 2 1\\n3 2 1') == 4\nassert solution('4 4 2\\n1 2 1\\n3 2 1\\n3 1 3') == 3\nassert solution('5 2 5\\n1 2 1\\n2 3 1\\n1 4 1\\n3 4 1') == 3\n",
        "num_ids_2": 50,
        "num_ids_4": 95
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n\") == \"9\\n\", \"Actual: %s\" % solution(\"5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n\")\nprint('Test finished.')\n\n\"\"\"\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self, n, m):\n        self.n = n\n        self.m = m\n        self.graph = defaultdict(list)\n\n    def addEdge(self, u, v, w):\n        self.graph[u].append([v, w])\n        self.graph[v].append([u, w])\n\nclass Solution:\n    def kthSmallestShortestPath(self, graph: Graph, k: int) -> int:\n\n        visited = set()\n        queue = [(0, 0)]\n\n        count = 0\n        while queue:\n            node = queue.pop(0)\n            if node[1] in visited:\n                continue\n            else:\n                visited.add(node[1])\n                count += 1\n                if count == k:\n                    return node[0]\n\n                for neighbor in graph.graph[node[1]]:\n                    if neighbor[0] not in visited:\n                        queue.append((node[0] + neighbor[1], neighbor[0]))\n",
        "num_ids_2": 112,
        "num_ids_4": 112
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5') == '3'\nassert solution('7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1') == '9'\nprint('The local tests are done. Click on \"Check\" for more real tests.')",
        "num_ids_2": 149,
        "num_ids_4": 149
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 1 3 4 2') == '3 1'\n\nassert solution('6\\n1 5 12 13 2 15') == '7 2'\n\nassert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150') == '7486 3'\n\n\"\"\"\nimport sys",
        "num_ids_2": 37,
        "num_ids_4": 65
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\n\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\n\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n",
        "num_ids_2": 37,
        "num_ids_4": 65
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\nassert solution(\"1\\n1\") == \"1 1\"\n",
        "num_ids_2": 37,
        "num_ids_4": 79
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\\n1 1 1 1 1\"\nassert solution(\"6\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\nassert solution(\"5\\n1 5 2 6 3\") == \"4 2\\n1 2 1 2\"",
        "num_ids_2": 65,
        "num_ids_4": 129
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n",
        "num_ids_2": 37,
        "num_ids_4": 65
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n\nprint(\"Hoho, you're doing pretty good. Time to check it!\")\n",
        "num_ids_2": 37,
        "num_ids_4": 65
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\", \"case1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\", \"case2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\", \"case3\"",
        "num_ids_2": 45,
        "num_ids_4": 77
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n",
        "num_ids_2": 37,
        "num_ids_4": 65
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == '3 1\\n1 1 1 1 1'\nassert solution(\"6\\n1 5 12 13 2 15\") == '7 2\\n2 2 1 1 2 1'\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == '7486 3\\n3 3 3 2 2 2 2 1 1 1'\n",
        "num_ids_2": 52,
        "num_ids_4": 92
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 1 3 4 2') == '3 1'\nassert solution('6\\n1 5 12 13 2 15') == '7 2'\nassert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150') == '7486 3'",
        "num_ids_2": 37,
        "num_ids_4": 65
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '4'\nassert solution('4999') == '4 9 9 9'\nassert solution('7') == '7'\nassert solution('7999') == '4 9 9 9 9 9'\nassert solution('10000') == '1 9 9 9 9 9 9 9 9 9 9 9 9'\n",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2\\n1\") == \"2 1\"\nassert solution(\"4\\n7\\n9\\n9\\n9\") == \"3 1\"\nassert solution(\"5\\n10\\n10\\n10\\n10\") == \"1 2\"\nassert solution(\"5\\n8\\n9\\n9\\n9\") == \"1 4\"\nassert solution(\"5\\n7\\n9\\n9\\n9\") == \"1 2\"\n",
        "num_ids_2": 40,
        "num_ids_4": 86
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n9876\") == \"9\"\nassert solution(\"5009\") == \"5 9\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5\n5009\n7\n9876\n10000\n10\n\"\"\") == '5 9'\nassert solution(\"\"\"5\n7\n9876\n10000\n10\n\"\"\") == '1'\n\n\"\"\"\n\uc591\uc218 n\uc744 10\uc9c4\uc218\ub85c \ubcc0\ud658\ud558\uace0 \ubc14\ub85c round\ub41c \uac83\uc744 \ubcf4\ub294 \ubb38\uc81c.\n\uadf8\ub7f0\ub370 round\ub418\ub294 \uac12\uc774 \uc911\ubcf5\ub418\uc5b4 \ucd9c\ub825\ub418\ub294 \uac83\uc744 \uc5fc\ub450\ud588\ub2e4.\n\uadf8\ub798\uc11c round \ub418\ub294 \uac12\uc744 \uc774\uc6a9\ud574\uc11c \uc8fc\uc5b4\uc9c4 \ub9ac\uc2a4\ud2b8\ub97c \uc790\ub974\uace0 \uba87 \ubc88 \ucd9c\ub825\ub418\ub294\uc9c0 \uad6c\ud558\uace0,\n\uadf8 \uac12\uc744 \ucd9c\ub825\ud55c\ub2e4.\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n5009') == '2 5000 9'\nassert solution('7\\n9876') == '1'\nassert solution('10\\n10000') == '1'\nassert solution('10\\n10') == '1'",
        "num_ids_2": 30,
        "num_ids_4": 56
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1\\n'\nassert solution('10\\n') == '1\\n'\nassert solution('100\\n') == '1\\n'\nassert solution('100100\\n') == '1\\n'\n",
        "num_ids_2": 22,
        "num_ids_4": 50
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('12345') == '5'\nassert solution('9') == '1'\nassert solution('92') == '1'\n",
        "num_ids_2": 18,
        "num_ids_4": 39
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n5009') == '2\\n5000 9'\nassert solution('5\\n5009') == '2\\n5000 9'\nassert solution('3\\n1000') == '1\\n1000'\nassert solution('3\\n9876') == '1\\n9 876'\nassert solution('3\\n1') == '1\\n1'\n",
        "num_ids_2": 36,
        "num_ids_4": 71
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5\n5009\n7\n9876\n10000\n10\n\"\"\") == \"\"\"2\n5000 9\n1\n7 \n4\n800 70 6 9000 \n1\n10000 \n1\n10\"\"\"\nprint(\"Cool!\")",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5009\\n7\\n9876\\n10000\\n10\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\"\nassert solution(\"1\\n5\") == \"1\\n1\"\n\nimport re",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3 2 1\\n6\\n4 6 2 1 5 3') == '1 1 1 1 1'\nassert solution('4\\n3 2 1\\n6\\n4 6 2 1 5 3') == '3 3 3'\nassert solution('4\\n3 2 1\\n6\\n4 6 2 1 5 3') == '2 3 3 2 1 3'\n\"\"\"",
        "num_ids_2": 58,
        "num_ids_4": 89
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 3 2 1 2 3 1 3 2 1 2 1 3 3 2\") == \"1 1 1 1 1 3 3 3 3 3 2 2 2 2 2\"\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_01) == test_output_01\nassert solution(test_input_02) == test_output_02\nassert solution(test_input_03) == test_output_03\n\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n') == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\\n'\n\n\"\"\"\n\nfrom collections import Counter\nimport sys",
        "num_ids_2": 98,
        "num_ids_4": 98
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3') == '1 1 1 1 1'\n\"\"\"\n\nq = int(input())\nfor i in range(q):\n    n = int(input())\n    book = list(map(int, input().split()))\n    ans = [1] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            if book[j] == book[i]:\n                ans[i] = j - i\n                break\n    print(*ans)\n",
        "num_ids_2": 65,
        "num_ids_4": 65
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 4 1 2\\n') == '1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n'\n\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4 5 1 3 2\\n3\\n2 3 1\") == '1 1 1 1 1'\nassert solution(\"6\\n4 6 1 3 5 2\\n1\\n1\\n4\\n3 4 1 2\") == '3 3 3'\nassert solution(\"6\\n4 6 1 3 5 2\\n1\\n1\\n4\\n3 4 1 2\") == '2 3 3 2 1 3'\n\"\"\"",
        "num_ids_2": 64,
        "num_ids_4": 102
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 1 2') == '1 1 1 1'\nassert solution('4 5 3 2') == '3 3 3'\nassert solution('5 2 1 4 3') == '2 2 2 2'\nassert solution('7 3 1 2 4 5 6 7') == '1 1 1 1 2 2 2'\nassert solution('9 3 4 5 6 7 8 9 1 2') == '3 3 3 3 3 3 1 1 1'\n",
        "num_ids_2": 31,
        "num_ids_4": 71
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(s) == result\n\"\"\"\n\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5') == '1 2 3 4'\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\"\"\") == \"3\\n2\\n1\"\n\"\"\"\n\"\"\"\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3\\n1 2 3 4\\n3\\n1 2 2\") == '2'\n\"\"\"\nimport sys",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_data) == test_result\n\"\"\"\n\n\nfrom collections import Counter",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 2\\n') == '2'\nassert solution('4\\n3 3\\n') == '2'\nassert solution('4\\n3 2\\n') == '2'\nassert solution('4\\n2 2\\n') == '2'\nassert solution('5\\n1 2 3 4 5\\n') == '3'\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n5\\n1 2 3 4 5') == '3'\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5') == '3'\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3\n5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\"\"\") == \"3\\n2\\n1\"\n\"\"\"\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 1 1 1\\n1\\n4\\n1 1 1 1\\n1\\n2\\n1 1 1 1\\n1\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 3 1 2\\n2 3\\n1 1 1') == '2'\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"1\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n10 4 10 15\\n1 2\\n4 3') == '0 0 1 2'\nassert solution('10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\n\n\"\"\"\nfrom typing import List\nimport sys\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == '0 0 1 2'\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == '5 4 0 5 3 3 9 0 2 5'\n\n\"\"\"\n\n\nfrom collections import Counter",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == '0 0 1 2'\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == '5 4 0 5 3 3 9 0 2 5'",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == '0 0 1 2'\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n10 4 10 15\\n1 2\\n4 3') == '0 0 1 2'\nassert solution('10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\n\n\"\"\"\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 4 2 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\nassert solution('4 2\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\nassert solution('4 2\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\nassert solution('4 2\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\nassert solution('4 2\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\n",
        "num_ids_2": 92,
        "num_ids_4": 188
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 4 2\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n') == '5 4 0 5 3 3 9 0 2 5'\n",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == '0 0 1 2'\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n') == '5 4 0 5 3 3 9 0 2 5'",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\nassert solution(\"3 2\\n1 3 2\\n2 1 3\") == \"YES\\nacc\"\n\n\"\"\"\n\nimport sys\n\nn, k = list(map(int, sys.stdin.readline().strip().split()))\np, q = list(map(int, sys.stdin.readline().strip().split()))\n\ns = list(range(n))",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open('./problem12_test.txt')) == 'abb'\nassert solution(open('./problem12_test.txt')) == 'abb'\n\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"abb\"\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"abb\"\n\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n1 2 3\\n1 3 2') == 'abb'\n\n\"\"\"\n\nimport sys\n\nMAX_NUMBER_STR_LEN = 10 ** 5\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\n\"\"\"\n\nimport sys\nimport math\nfrom collections import defaultdict\nfrom copy import deepcopy\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n20 10 20') == '43'\nassert solution('4\\n10 10 10 10') == '64'\nassert solution('6\\n5 4 5 4 4 5') == '69'\nassert solution('2\\n1 4') == '3'\n\n\n\n-----Explanation-----\n\n* In the first example the cans are $1$, $2$, $3$.\n* If Vasya has already knocked down $1$ can and now he starts shooting $2$-th can, he will need $20\\cdot2 + 1 = 21$ shots to knock it down.\n* After that he will knock it down with the last shot. So the total number of shots is $1 + 21 + 21 = 43$.\n* In the second example the cans are $1$, $2$, $3$.\n* If Vasya has already knocked down $1$ can and now he starts shooting $2$-th can, he will need $10\\cdot2 + 1 = 21$ shots to knock it down.\n* After that he will knock it down with the last shot. So the total number of shots is $1 + 21 + 21 = 43$.\n* In the third example the cans are $1$, $2$, $3$.\n* If Vasya has already knocked down $1$ can and now he starts shooting $2$-th can, he will need $5\\cdot2 + 1 = 17$ shots to knock it down.\n* After that he will knock it down with the last shot. So the total number of shots is $1 + 21 + 21 = 43$.\n\n-----Theory-----\n\nThe problem can be solved as follows:\n\n1. Create a matrix $M$ of size $(n+1) \\times (n+1)$ and for $i$-th can $M_{i,j}$ is the number of shots needed to knock down $i$-th can if you start from $j$-th can. If $i=j$ then $M_{i,j}=1$.\n\n2. $i$-th can will knock down by $M_{i,j}$ shots if $j$ is the only can which has not yet been knocked down.\n\n3. $M_{i,j}$ is equal to the minimum number of shots needed to knock down all $j$-th cans starting from $i$-th can.\n\n4. $M_{i,j}$ is equal to the minimum number of shots needed to knock down all $j$-th cans starting from $i$-th can if $i<j$.\n\n5. $M_{i,j}$ is equal to 0 if $i>j$.\n\n6. The bottom-right corner of $M$ is equal to $1$, so the number of shots needed to knock down all cans is the minimum of the shots needed to knock down the first can and the shots needed to knock down the remaining cans.\n\n7. The number of shots is equal to the number of cans (denoted by $n$) times the minimum of shots needed to knock down all the cans and shots needed to knock down the remaining cans starting from the can with the maximum durability.\n\n8. This number is equal to the minimum of shots needed to knock down all the cans starting from the can with the maximum durability and shots needed to knock down all the remaining cans.\n\n9. The minimum of shots needed to knock down all the cans starting from the can with the maximum durability is equal to the minimum number of shots needed to knock down the remaining cans starting from the can with the maximum durability.\n\n10. The minimum number of shots needed to knock down the remaining cans is equal to the minimum number of shots needed to knock down the remaining cans starting from the can with the minimum durability.\n\n11. If $n=2$ and cans with the maximum durability and the remaining cans have the minimum durability, then the total number of shots is equal to the minimum of the number of shots needed to knock down the first can and the number of shots needed to knock down the remaining cans.\n\n12. The number of shots needed to knock down the remaining cans is equal to the minimum number of shots needed to knock down all the cans starting from the can with the maximum durability and shots needed to knock down the remaining cans.\n\n13. The minimum number of shots needed to knock down all the cans is equal to the minimum of the number of shots needed to knock down the first can and the number of shots needed to knock down all the remaining cans.\n\n\n-----From the paper-----\n\nThe paper is written by the Russian mathematician Aleksandr Shevelevich Shevchenko. It is often cited in the literature, and in the following pages you can find the Russian version:\n\nhttps://www.youtube.com/watch?v=XpkzNw2xlKU\n\nhttps://www.youtube.com/watch?v=k-Ezg7U79Gc\n\nhttps://www.youtube.com/watch?v=gVXSj1vw4dA\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n20 10 20') == '43'\nassert solution('4\\n10 10 10 10') == '69'\nassert solution('6\\n5 4 5 4 4 5') == '69'\nassert solution('2\\n1 4') == '3'\n\n----",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10 20\") == '43'\n\n\"\"\"\n\nimport math\nimport time\nfrom typing import List, Tuple, Dict",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n20 10 20') == '43'\nassert solution('4\\n10 10 10 10') == '64'\nassert solution('6\\n5 4 5 4 4 5') == '69'\nassert solution('2\\n1 4') == '3'\n\n\nfrom collections import Counter\n",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(input()).strip('[]')",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n20 10 20\") == '43'\n\"\"\"\n\nimport sys",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\narr.sort()",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\nassert solution(\"5\\n1 2 3 4 5\") == \"0\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n4 2 5 1 3') == '3'\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 5 1 3\") == 3\nassert solution(\"5 1 4 2 3\") == 3\nassert solution(\"6 1 5 2 3\") == 3\nassert solution(\"1 2 3 4 5 6\") == 0\nassert solution(\"1 2 2 3 3\") == 3\n",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 5 1 3\") == \"3\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 5 1 3\") == \"3\"\nassert solution(\"5 4 3 2 1\") == \"1\"\nassert solution(\"7 4 3 2 1\") == \"4\"\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 5 1 3\") == \"3\"\n\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n4 2 5 1 3') == '3'\n\"\"\"\n\nimport sys",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 5 1 3') == '3'\n\"\"\"\nimport sys\nimport unittest\n\nsys.setrecursionlimit(100010)\n\n\nclass Solution:\n    def solution(self, inp):\n        n = int(inp.split('\\n')[0])\n        p = list(map(int, inp.split('\\n')[1].split()))\n        p_dict = {i: p[i] for i in range(n)}\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if p_dict[j] < p_dict[i]:\n                    count += 1\n        return count\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution()\n\n    def test_solution(self):\n        self.assertEqual(self.solution('5\\n4 2 5 1 3'), '3')\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 5 1 3\") == \"3\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 3 3 3\") == '1'\n\"\"\"\n\n\"\"\"\nMy solution: O(N)\n\na = list(map(int, stdin.split('\\n')[1:]))\n\na_dict = {}\nfor i in a:\n    if i not in a_dict:\n        a_dict[i] = 0\n    a_dict[i] += 1\n\nc = 0\nfor k in a_dict.keys():\n    if a_dict[k] > k:\n        c += a_dict[k] - k\nprint(c)\n\"\"\"\n\n\"\"\"\nBest solution: O(N)\n\na = list(map(int, stdin.split('\\n')[1:]))\ncount = 0\nfor num in a:\n    while a.count(num) > 1:\n        count += 1\n        a.remove(num)\nprint(count)\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n3 3 3 3''') == '1'\nassert solution('''4\n3 3 3 3''') == '0'\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1''') == '0'\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1''') == '8'\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1''') == '9'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 3 3\") == '1'\n\n\"\"\"\n\nfrom collections import Counter\nimport heapq",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nfor i in range(n):\n    count = a.count(a[i])\n    if count == 1:\n        print(0)\n        exit(0)\n\nprint(n - a.count(max(a)))\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n3 3 3 3''') == '1'\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1''') == '0'\nassert solution('''5\n1 1 2 1 3''') == '0'\n\n'''\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 3 3') == '1'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"4\n3 3 3 3\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"4\n3 3 1 3\"\"\"\n) == \"0\"\nassert solution(\n\"\"\"10\n5 5 5 5 5 5 5 5 5 5\"\"\"\n) == \"0\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3 3 3 3') == 1\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\n\"\"\"\n\nx_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 0 2 3 4 5\") == \"1\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nN = int(sys.stdin.readline())\ncounter = Counter(map(int, sys.stdin.readline().split()))\nprint(f\"{list(counter.keys())[list(counter.values()).index(1)]}\")\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 2 3 4 5') == '1'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\n-----\n'''\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\nassert solution(\"0 1 2 3 4\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"1\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 2 3 4 5') == '1'\nassert solution('0 2 3 4 0') == '2'\nassert solution('0 2 3 4 5 6') == '0'\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\") == \"0\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5') == '0'\nassert solution('3 5') == '0'\nassert solution('2 5') == '1'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5') == 0\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5\\n') == '0'\n\"\"\"\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5\\n') == '0'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n') == '0'\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 5\n''') == '0'\nassert solution('''2 4\n''') == '0'\nassert solution('''6 10\n''') == '1'\nassert solution('''6 10\n''') == '1'\nassert solution('''5 10\n''') == '0'\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5') == '0'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'Yes'\nassert solution('0') == 'Yes'\nassert solution('1') == 'Yes'\nassert solution('2') == 'Yes'\nassert solution('3') == 'Yes'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 10 100\") == \"Yes\"\n\"\"\"\n\nimport math",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 10 100') == 'Yes'\nassert solution('2\\n1 10 100') == 'No'\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(50000)\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"3\n1 10 100\n\"\"\") == \"Yes\"\n\nassert solution(\n\"\"\"4\n1 10 100\n\"\"\") == \"No\"\n\nassert solution(\n\"\"\"6\n1 5 6 10 2 6\n\"\"\"\n) == \"No\"\n\nassert solution(\n\"\"\"5\n1 10 100 10 100\n\"\"\"\n) == \"Yes\"\n\n\"\"\"\n2021.10.19\n\u5047\u8bbe\u6709\u4e00\u4e2a\u73af\u5f62\u7684\u8def\u5f84\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8def\u5f84\u70b9\u53ef\u4ee5\u7ecf\u8fc70\u4e2a\u6216\u80051\u4e2a\u73af\uff0c\u6bcf\u4e2a\u73af\u53ef\u4ee5\u7ecf\u8fc70\u4e2a\u6216\u80051\u4e2a\u73af\u3002\n\n\u73af\u4e0a\u7684\u70b9\u53ef\u4ee5\u7ecf\u8fc70\u4e2a\u73af\u6216\u80051\u4e2a\u73af\uff0c\u6bcf\u4e2a\u73af\u53ef\u4ee5\u7ecf\u8fc70\u4e2a\u6216\u80051\u4e2a\u73af\uff0c\u56e0\u6b64\u53ef\u4ee5\u7ecf\u8fc70\u4e2a\u6216\u80052\u4e2a\u73af\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u8def\u5f84\uff0c\u627e\u5230\u5176\u4e2d\u7684\u4e00\u4e2a\u73af\uff0c\u4ece\u5176\u4e2d\u62bd\u51fa\u4e00\u4e2a\u70b9\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u8be5\u73af\u4e0a\u7684\u6240\u6709\u70b9\uff0c\u90fd\u80fd\u7ecf\u8fc7\u8def\u5f84\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c\u7ecf\u8fc7\u4e86\u8be5\u70b9\u540e\uff0c\u4ecd\u7136\u6709\u8def\u5f84\u80fd\u7ecf\u8fc7\u70b9\u3002\n\n\u6c42\u8def\u5f84\u7684\u957f\u5ea6\u3002\n\n-----Constraints-----\n - 1 \u2264 N \u2264 10^5\n - 1 \u2264 C \u2264 10^9\n - 1 \u2264 A_i \u2264 10^9\n\n-----Input-----\n\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570N\uff0c\u8868\u793a\u73af\u7684\u6570\u91cf\u3002\n\n\u7b2c\u4e8c\u884c\u5305\u542bN\u4e2a\u6b63\u6574\u6570\uff0c\u4e3a\u6bcf\u4e2a\u73af\u7684\u8d77\u70b9\u3002\n\n\u7b2c\u4e09\u884c\u5305\u542bN\u4e2a\u6b63\u6574\u6570\uff0c\u4e3a\u6bcf\u4e2a\u73af\u7684\u7ec8\u70b9\u3002\n\n\u7b2c\u56db\u884c\u5305\u542b1\u4e2a\u6b63\u6574\u6570C\uff0c\u8868\u793a\u8def\u5f84\u7684\u8d77\u70b9\u3002\n\n\u7b2c\u4e94\u884c\u5305\u542bC\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u6bcf\u4e2a\u70b9\u7684\u7ec8\u70b9\u3002\n\n-----Output-----\n\u8f93\u51fa\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u3002\n\n\u6837\u4f8b\u89e3\u91ca\n\u5bf9\u4e8e\u73af\u5f62\u8def\u5f84 1->5->6->1\uff0c\u4ece\u70b9 1 \u62bd\u51fa\u4e00\u4e2a\u70b9\uff0c\u5f97\u5230\u73af\u5f62\u8def\u5f84 1->6->5->1\uff0c\u4ece\u70b9 6 \u62bd\u51fa\u4e00\u4e2a\u70b9\uff0c\u5f97\u5230\u73af\u5f62\u8def\u5f84 1->5->1\u3002\n\n\u5bf9\u4e8e\u73af\u5f62\u8def\u5f84 1->2->3->1\uff0c\u4ece\u70b9 1 \u62bd\u51fa\u4e00\u4e2a\u70b9\uff0c\u5f97\u5230\u73af\u5f62\u8def\u5f84 1->3->2->1\uff0c\u4ece\u70b9 3 \u62bd\u51fa\u4e00\u4e2a\u70b9\uff0c\u5f97\u5230\u73af\u5f62\u8def\u5f84 1->2->1\u3002\n\n\u6700\u77ed\u8def\u5f84\u4e3a 3\uff0c\u5373 1->3->1\u3002\n\n\"\"\"\n\"\"\"\n\u5982\u679c\u6709\u56db\u4e2a\u70b9\uff0c\u53ef\u4ee5\u6709\u56db\u79cd\u8def\u5f84\uff0c1\u79cd\u662f1->2->3->4->1\uff0c\u4e00\u79cd\u662f1->3->2->4->1\uff0c\u8fd8\u6709\u4e00\u79cd\u662f1->2->3->1->4\uff0c\u4e00\u79cd\u662f1->2->4->3->1\uff0c\n\u867d\u7136\u4e09\u79cd\u8def\u5f84\u7684\u957f\u5ea6\u90fd\u662f1\uff0c\u4f46\u662f\u6211\u4eec\u5e0c\u671b\u627e\u5230\u7684\u73af\u8def\u5f84\u53ea\u6709\u4e00\u4e2a\uff0c\u56e0\u6b64\u53ea\u80fd\u627e\u5230\u6700\u77ed\u8def\u5f84\u3002\n\n\u90a3\u4e48\u5047\u8bbe\u5f53\u524d\u8def\u5f84\u4e3a1->2->3->4\uff0c\u4e14\u4ee51,3,2,4\u4e3a\u8d77\u70b9\u7684\u73af\u5f62\u8def\u5f84\u4e3a1->3->2->4->1\uff0c\u5219\u6211\u4eec\u5e0c\u671b\u7ecf\u8fc7\u70b91,3,2,4\uff0c\n\u4ecd\u7136\u80fd\u5728\u8be5\u70b9\u540e\uff0c\u7ecf\u8fc7\u8def\u5f84\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c\u5f97\u5230\u8def\u5f841->3->2->1->4\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8be5\u70b93\u62ff\u51fa\u6765\uff0c\u5f97\u5230\u8def\u5f841->2->1\u3002\n\n\u56e0\u6b64\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u8def\u5f84\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u5176\u4e2d\u7684\u4e00\u4e2a\u73af\uff0c\u4ece\u5176\u4e2d\u62bd\u51fa\u4e00\u4e2a\u70b9\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u8be5\u73af\u4e0a\u7684\u6240\u6709\u70b9\uff0c\u90fd\u80fd\u7ecf\u8fc7\u8def\u5f84\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c\u7ecf\u8fc7\u4e86\u8be5\u70b9\u540e\uff0c\u4ecd\u7136\u6709\u8def\u5f84\u80fd\u7ecf\u8fc7\u70b9\u3002\n\n\u6c42\u8def\u5f84\u7684\u957f\u5ea6\u3002\n\n-----Constraints-----\n - 1 \u2264 N \u2264 10^5\n - 1 \u2264 C \u2264 10^9\n - 1 \u2264 A_i \u2264 10^9\n\n-----Input-----\n\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570N\uff0c\u8868\u793a\u73af\u7684\u6570\u91cf\u3002\n\n\u7b2c\u4e8c\u884c\u5305\u542bN\u4e2a\u6b63\u6574\u6570\uff0c\u4e3a\u6bcf\u4e2a\u73af\u7684\u8d77\u70b9\u3002\n\n\u7b2c\u4e09\u884c\u5305\u542bN\u4e2a\u6b63\u6574\u6570\uff0c\u4e3a\u6bcf\u4e2a\u73af\u7684\u7ec8\u70b9\u3002\n\n\u7b2c\u56db\u884c\u5305\u542b1\u4e2a\u6b63\u6574\u6570C\uff0c\u8868\u793a\u8def\u5f84\u7684\u8d77\ufffd",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"1 10 100\"\n) == \"Yes\"\nassert solution(\n    \"2 10 100\"\n) == \"No\"\nassert solution(\n    \"2 100 10\"\n) == \"Yes\"\nassert solution(\n    \"3 10 100\"\n) == \"No\"\nassert solution(\n    \"3 100 10\"\n) == \"Yes\"\n\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 10 100\") == \"Yes\"\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\n\nflag = 0\nfor i in range(0, len(arr)):\n    if flag == 1:\n        print(\"No\")\n        exit()\n    for j in range(0, len(arr)):\n        if i == j:\n            continue\n        if arr[i]*arr[j] % 4!= 0:\n            flag = 1\n            break\nprint(\"Yes\")\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\\\n1 10 100\") == \"Yes\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 10 100') == 'Yes'\n\"\"\"\n\nn = int(input())\na = [int(x) for x in input().split()]",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 10 100\") == 'Yes'\nassert solution(\"4\\n1 10 100 4\") == 'No'\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"ab\") == \"No\"\nassert solution(\"yax\") == \"No\"\nassert solution(\"xxy\") == \"No\"\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"xyz\") == \"No\"\n\nprint(\"All test cases passed.\")\n\n-----Explanation-----\nThe reason why we need to find the lexicographic order is that if the length of string s is less than that of string t, it must hold that s < t in the lexicographic order.\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 31
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\".xy\") == \"Yes\"\nassert solution(\"abcd\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"atcoder\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 32
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('yxa') == 'No'\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 31
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\n\n\"\"\"\n\nimport sys\nimport string",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '7 5 1'\n) == 'YES'\nassert solution(\n    '3 9 17'\n) == 'NO'\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5 1\") == \"YES\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(stdin)) == \"YES\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\nassert solution(\"7 5 9\") == \"NO\"\n\"\"\"\n\nfrom sys import stdin\n\na = stdin.readline().split()\nA = int(a[0])\nB = int(a[1])\nC = int(a[2])\n\nfor x in range(1, B // A + 1):\n    if (B * x - C * x % B) % A == 0:\n        print(\"YES\")\n        exit(0)\nprint(\"NO\")\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n'''\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 5 1') == \"YES\"\n\"\"\"\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 5 1') == 'YES'\n\"\"\"\n\n\"\"\"\nAlgorithm:\n\n1. Get input\n2. Split into numbers\n3. Find number with sum m, and check if m % A == 0\n4. Check if m % B == 0\n5. Check if m % C == 0\n6. Check if m % C == 0\n7. If all conditions are met, print YES, else print NO\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 5 1') == 'YES'\nassert solution('1 1 1') == 'NO'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\nassert solution(\"7 5 10\") == \"NO\"\nassert solution(\"4 2 1\") == \"NO\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"1\"\n\nimport sys\n\na, b = map(int, sys.stdin.readline().split())\n\nprint(max(a, b) - min(a, b))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2 2) == 1\n\"\"\"\n\na, b = map(int, stdin.readline().split())\nc = a*b - 2*(a-1)*(b-1)\nprint(c)\n\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2') == 1\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2') == 1\n\"\"\"\n\nimport sys",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == output\n\"\"\"\n\nimport math",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"1\"\n\n-----Explanation-----\n2 * 1 = 2, 2 * 2 = 4.\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n') == '1'\n\nassert solution('3 3\\n') == '9'\n\nassert solution('1 1\\n') == '0'\n\nassert solution('99 99\\n
        "num_ids_2": 26,
        "num_ids_4": 1822
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"1\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == 1\nassert solution(\"100 100\") == 10000\n\"\"\"\n\nimport ast",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(2, 2) == 1\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n13 3 1\n''') == '3'\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 1') == '3'\n\n-----Problem-----\n\nWrite a program to find the maximum number of people who can be seated at the table according to the given conditions.\n\nInput\nThe first line contains integers X, Y and Z separated by a space.\n\nOutput\nPrint the maximum number of people that can be seated on the table.\n\n-----Test 1-----\nX = 5, Y = 3, Z = 1\n\n-----Test 2-----\nX = 13, Y = 3, Z = 1\n\n-----Test 3-----\nX = 14, Y = 3, Z = 1\n\n-----Test 4-----\nX = 1, Y = 3, Z = 1\n\n-----Test 5-----\nX = 1, Y = 1, Z = 1\n\n-----Test 6-----\nX = 10, Y = 3, Z = 3\n\n-----Test 7-----\nX = 10, Y = 5, Z = 3\n\n-----Test 8-----\nX = 10, Y = 5, Z = 5\n\n-----Test 9-----\nX = 10, Y = 8, Z = 3\n\n-----Test 10-----\nX = 10, Y = 8, Z = 5\n\n-----Test 11-----\nX = 10, Y = 8, Z = 5\n\n-----Test 12-----\nX = 100, Y = 40, Z = 80\n\n-----Test 13-----\nX = 100, Y = 60, Z = 50\n\n-----Test 14-----\nX = 100, Y = 50, Z = 100\n\n-----Test 15-----\nX = 100, Y = 80, Z = 80\n\n-----Test 16-----\nX = 100, Y = 100, Z = 20\n\n-----Test 17-----\nX = 100, Y = 20, Z = 100\n\n-----Test 18-----\nX = 100, Y = 20, Z = 200\n\n-----Test 19-----\nX = 100, Y = 50, Z = 150\n\n-----Test 20-----\nX = 100, Y = 60, Z = 140\n\n-----Test 21-----\nX = 100, Y = 80, Z = 80\n\n-----Test 22-----\nX = 100, Y = 100, Z = 100\n\n-----Test 23-----\nX = 100, Y = 140, Z = 20\n\n-----Test 24-----\nX = 100, Y = 200, Z = 80\n\n-----Test 25-----\nX = 100, Y = 80, Z = 100\n\n-----Test 26-----\nX = 100, Y = 80, Z = 100\n\n-----Test 27-----\nX = 100, Y = 100, Z = 100\n\n-----Test 28-----\nX = 100, Y = 200, Z = 200\n\n-----Test 29-----\nX = 100, Y = 20, Z = 200\n\n-----Test 30-----\nX = 100, Y = 20, Z = 100\n\n-----Test 31-----\nX = 100, Y = 20, Z = 200\n\n-----Test 32-----\nX = 100, Y = 50, Z = 150\n\n-----Test 33-----\nX = 100, Y = 60, Z = 140\n\n-----Test 34-----\nX = 100, Y = 80, Z = 80\n\n-----Test 35-----\nX = 100, Y = 100, Z = 100\n\n-----Test 36-----\nX = 100, Y = 100, Z = 200\n\n-----Test 37-----\nX = 100, Y = 20, Z = 200\n\n-----Test 38-----\nX = 100, Y = 20, Z = 100\n\n-----Test 39-----\nX = 100, Y = 20, Z = 200\n\n-----Test 40-----\nX = 100, Y = 20, Z = 200\n\n-----Test 41-----\nX = 100, Y = 50, Z = 150\n\n-----Test 42-----\nX = 100, Y = 60, Z = 140\n\n-----Test 43-----\nX = 100, Y = 80, Z = 80\n\n-----Test 44-----\nX = 100, Y = 100, Z = 200\n\n-----Test 45-----\nX = 100, Y = 100, Z = 200\n\n-----Test 46-----\nX = 100, Y = 100, Z = 200\n\n-----Test 47-----\nX = 100, Y = 20, Z = 200\n\n-----Test 48-----\nX = 100, Y = 20, Z = 100\n\n-----Test 49-----\nX = 100, Y = 20, Z = 200\n\n-----Test 50-----\nX = 100, Y = 20, Z = 100\n\n-----Test 51-----\nX = 100, Y = 20, Z = 100\n\n-----Test 52-----\nX = 100, Y = 20, Z = 200\n\n-----Test 53-----\nX = 100, Y = 20, Z = 100\n\n-----Test 54-----\nX = 100, Y = 20, Z = 200\n\n-----Test 55-----\nX = 100, Y = 20, Z = 100\n\n-----Test 56-----\nX = 100, Y = 20, Z = 200\n\n-----Test 57-----\nX = 100, Y = 50, Z = 150\n\n-----Test 58-----\nX = 100, Y = 60, Z = 140\n\n-----Test 59-----\nX = 100, Y = 80, Z = 80\n\n-----Test 60-----\nX = 100, Y = 100, Z = 100\n\n-----Test 61-----\nX = 100, Y = 100, Z = 200\n\n-----Test 62-----\nX = 100, Y = 20, Z = 200\n\n-----Test 63-----\nX = 100, Y = 20, Z = 100\n\n-----Test 64-----\nX = 100, Y = 20, Z = 200\n\n-----Test 65-----\nX = 100, Y = 20, Z = 100\n\n-----Test 66-----\nX = 100, Y = 20, Z = 200\n\n-----Test 67-----\nX = 100, Y = 20, Z = 100\n\n-----Test 68-----\nX = 100, Y = 20, Z = 200\n\n-----Test 69-----\nX = 100, Y = 50, Z = 150\n\n-----Test 70-----\nX = 100, Y = 60, Z = 140\n\n-----Test 71-----\nX = 100, Y = 80, Z = 80\n\n-----Test 72-----\nX = 100, Y = 100, Z = 200\n\n-----Test 73-----\nX = 100, Y = 100, Z = 200\n\n-----Test 74-----\nX = 100, Y = 100, Z = 200\n\n-----Test 75-----\nX = 100, Y = 20, Z = 200\n\n-----Test 76-----\nX = 100, Y = 20, Z = 100\n\n-----Test 77-----\nX = 100, Y = 20, Z = 200\n\n-----Test 78-----\nX = 100, Y = 20, Z = 100\n\n-----Test 79-----\nX = 100, Y = 20, Z = 100\n\n-----Test 80-----\nX = 100, Y = 20, Z = 200\n\n-----Test 81-----\nX = 100, Y = 20, Z = 100\n\n-----Test 82-----\nX = 100, Y = 20, Z = 100\n\n-----Test 83-----\nX = 100, Y = 20, Z = 100\n\n-----Test 84-----\nX = 100, Y = 20, Z = 100\n\n-----Test 85-----\nX = 100, Y = 50, Z = 150\n\n-----Test 86-----\nX = 100, Y = 60, Z = 140\n\n-----Test 87-----\nX = 100, Y = 80, Z = 80\n\n-----Test 88-----\nX = 100, Y = 100, Z = 200\n\n-----Test 89-----\nX = 100, Y = 100, Z = 200\n\n-----Test 90-----\nX = 100, Y = 100, Z = 200\n\n-----Test 91-----\nX = 100, Y = 20, Z = 200\n\n-----Test 92-----\nX = 100, Y = 20, Z = 100\n\n-----Test 93-----\nX = 100, Y = 20, Z = 100\n\n-----Test 94-----\nX = 100, Y = 20, Z = 100\n\n-----Test 95-----\nX = 100, Y = 20, Z = 100\n\n-----Test 96-----\nX = 100, Y = 20, Z = 100\n\n-----Test 97-----\nX = 100",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1 1') == '3'\nassert solution('10 5 1') == '2'\n\"\"\"\n\nimport math\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('13 3 1') == '3'\nassert solution('14 3 1') == '2'\nassert solution('10 10 10') == '10'\nassert solution('1 1 1') == '1'\nassert solution('13 10 1') == '10'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 3\") == \"4\"\nassert solution(\"4 2 1\") == \"2\"\nassert solution(\"7 7 7\") == \"7\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 0\") == \"0\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 1\") == \"3\"\nassert solution(\"3 2 1\") == \"2\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 3 2\") == \"1\"\nassert solution(\"1 3 1\") == \"2\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 6\") == \"3\"\nassert solution(\"5 6 1\") == \"3\"\nassert solution(\"8 9 2\") == \"4\"\nassert solution(\"7 9 1\") == \"4\"\nassert solution(\"10 10 3\") == \"1\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 1\") == \"3\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13 3 1\") == \"3\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 1\") == \"3\"\n\n\"\"\"\n\nimport math",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == \"2\"\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4') == '2'\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 0\\n3 1\\n1 3\") == \"2\"\n\"\"\"\n\nimport sys\nimport itertools",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == 2\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4') == '2'\nassert solution('1\\n2 1\\n2 1\\n2 1') == '0'\n\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == 2\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\") == 2\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 0\\n3 1\\n1 3\") == 2\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 4\\n1 1\\n2 2\\n3 3\") == \"2\"\n\"\"\"\n\n\"\"\"\nAnother solution\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3\\n') == '5'\n\"\"\"\n\nfrom math import inf",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"> 0\\n1\\n2\\n3\") == \"6\"\nassert solution(\"> -1\\n1\\n2\\n3\") == \"4\"\nassert solution(\"> 0\\n0\\n0\\n0\") == \"0\"\nassert solution(\"> 10\\n1\\n2\\n3\") == \"10\"\nassert solution(\"> 10\\n10\\n10\\n10\") == \"10\"\n",
        "num_ids_2": 41,
        "num_ids_4": 81
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4\\n0 3') == '7'\n\"\"\"\n\nimport sys",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4\\n0 3') == '7'\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3\\n0 2\\n\") == \"7\"\n\"\"\"\nimport sys",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n\ntest_input = \"\"\"\n8 20\n0 3\n1 7\n2 3\n3 7\n4 2\n5 5\n6 6\n7 1\n8 10\n\"\"\"\n\ntest_output = \"\"\"\n25\n\"\"\"\n\nprint(solution(test_input))\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n0 3\\n\") == \"7\"\n\"\"\"\n\nimport math\nimport sys",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4\\n0 3') == '7'\n\"\"\"\nimport sys",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n0 2\\n3 4\\n4 6\\n\") == \"7\"\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 1\\n3 1\\n2 2\\n3 2\\n1 1\\n2 3\\n3 1\\n2 3\\n1 2\\n2 2\\n3 2\\n1 3\\n2 3\\n3 3\\n1 2\\n1 2\\n3 2\\n2 2\\n3 2\\n1 3\\n2 3\\n3 3\\n1 3\\n1 3\\n3 2\\n2 2\\n3 2\\n1 1\\n1 1\\n2 1\\n3 2\\n2 1\\n3 2\\n1 2\\n2 1\\n1 3\\n3 2\\n2 1\\n3 2\\n3 2\\n1 1\\n2 1\\n3 2\\n3 2\\n1 3\\n2 3\\n3 2\\n1 1\\n2 1\\n3 2\\n1 1\\n2 1\\n3 2\\n2 1\\n1 3\\n3 2\\n2 1\\n2 1\\n2 1\\n2 1\\n2 1\\n3 2\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1",
        "num_ids_2": 1032,
        "num_ids_4": 1032
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n') == '1'\nassert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n') == '0'\nassert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n') == '2'\n\n\"\"\"\n",
        "num_ids_2": 97,
        "num_ids_4": 150
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1''') == '1'\n\nassert solution('''10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n''') == '0'\n\nassert solution('''8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1''') == '1'\n\nassert solution('''10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115''') == '2'\n\nassert solution('''10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115''') == '1'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n') == '1\\n1\\n2'\nassert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n') == '0\\n2\\n1'\n\n\n\n-----Test_1-----\n",
        "num_ids_2": 109,
        "num_ids_4": 109
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n\") == \"1\\n1\\n2\\n\"\n\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n\") == \"0\\n2\\n1\\n\"\n\"\"\"\n\n\"\"\"\nThe first line of the input contains one integer $q$ (1\u2264q\u22642\u00d710\n\u200b5\n\u200b ) \u2014 the number of queries.\n\nThen $q$ lines follow. The $i$-th line contains the $i$-th query in format as in the problem statement. It is guaranteed that queries are always valid (for query type $3$, it is guaranteed that the book in each such query is already placed, and for other types, it is guaranteed that the book was not placed before).\n\nIt is guaranteed that there is at least one query of type $3$ in the input.\n\nIn each query the constraint $1\u2264id\u22642\u00d710\n\u200b5\n\u200b  is met.\n\nYou are Python programmer, consider using PyPy instead of Python when you submit your code.\n\nOutput\nFor each query of type $3$, print the minimum number of books you need to pop from the left or from the right in such a way that the book with index $id$ will be leftmost or rightmost.\n\nThe first line contains the integer $q$ representing the number of queries of type $3$ (it is guaranteed that there is at least one query of type $3$ in the input).\n\nThen $q$ lines follow. The $i$-th line contains the $i$-th query in format as in the problem statement.\n\nIt is guaranteed that each query of type $3$ is valid.\n\nIt is guaranteed that there is at least one query of type $3$ in the input.\n\nIt is guaranteed that the answer is a correct value for each query of type $3$ (the book with index $id$ is already on the shelf to the left or right from the leftmost or rightmost existing book).\n\nIt is guaranteed that each answer is a non-negative integer.\n\nThe first line of the output contains the integer $q$ representing the number of queries of type $3$ (it is guaranteed that there is at least one query of type $3$ in the input).\n\nThen $q$ lines follow. The $i$-th line contains the $i$-th query in format as in the problem statement.\n\nIt is guaranteed that each query of type $3$ is valid.\n\nIt is guaranteed that each answer is a correct value for each query of type $3$ (the book with index $id$ is already on the shelf to the left or right from the leftmost or rightmost existing book).\n\nIt is guaranteed that each answer is a non-negative integer.\n\"\"\"\n\nfrom itertools import chain",
        "num_ids_2": 113,
        "num_ids_4": 113
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\"\n",
        "num_ids_2": 105,
        "num_ids_4": 105
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\"\n\n\"\"\"\n\n\"\"\"\nclass Query:\n    def __init__(self, op: str, id: int) -> None:\n        self.op = op\n        self.id = id\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.left = []\n        self.right = []\n        self.left_min = []\n        self.right_min = []\n        self.is_left_min = []\n        self.left_size = 0\n        self.right_size = 0\n        self.right_max = -1\n        self.left_max = -1\n        self.prev = -1\n        self.is_right_min = False\n        self.is_left_min = False\n        \n        \n    def add(self, q: Query):\n        if q.op == 'L':\n            self.left.append(q.id)\n            self.left_min.append(q.id)\n            self.is_left_min.append(True)\n            self.left_size += 1\n            self.is_right_min = True\n            self.right_min = self.right_max + 1\n        elif q.op == 'R':\n            self.right.append(q.id)\n            self.right_min.append(q.id)\n            self.is_right_min = False\n            self.right_size += 1\n            self.left_min = self.right_max + 1\n        \n        \n    def process_query(self, q: Query):\n        if self.left_size == 0:\n            return -1\n        elif self.right_size == 0:\n            return self.left_min[-1]\n        elif q.op == 'L':\n            return self.left[-1]\n        elif q.op == 'R':\n            if self.is_right_min:\n                return self.right_min[-1]\n            else:\n                return self.right[-1]\n        \n        \n    def process_query2(self, q: Query):\n        if self.left_size == 0:\n            return -1\n        elif self.right_size == 0:\n            return self.left_min[-1]\n        elif self.is_right_min:\n            if q.op == 'L':\n                return self.right_min[-1]\n            elif q.op == 'R':\n                if self.prev >= self.left_max:\n                    return -1\n                else:\n                    self.prev = self.left_min[-1]\n                    return self.prev\n        else:\n            if q.op == 'L':\n                return self.left[-1]\n            elif q.op == 'R':\n                if self.prev >= self.left_max:\n                    return -1\n                else:\n                    self.prev = self.left_min[-1]\n                    return self.prev\n\n    \n",
        "num_ids_2": 105,
        "num_ids_4": 105
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\"\nassert solution(\"5\\nL 4\\nR 1\\nR 2\\n? 2\\nL 3\\n? 1\") == \"1\\n1\\n2\"\n\n\"\"\"\n",
        "num_ids_2": 105,
        "num_ids_4": 145
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1') == '1\\n1\\n2'\nassert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n') == '0\\n2\\n1'\n\n\n---",
        "num_ids_2": 107,
        "num_ids_4": 107
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\"\nassert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\n",
        "num_ids_2": 105,
        "num_ids_4": 153
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '0'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '1'\nassert solution('1\\n10\\n100\\n1000\\n10000\\n100000\\n1000000\\n10000000\\n100000000\\n1000000000\\n10000000000\\n100000000000\\n1000000000000\\n10000000000000\\n100000000000000\\n1000000000000000\\n10000000000000000\\n100000000000000000\\n1000000000000000000\\n10000000000000000000\\n100000000000000000000\\n1000000000000000000000\\n100000000000000000000000\\n10000000000000000000000000\\n100000000000000000000000000\\n1000000000000000000000000000\\n10000000000000000000000000000\\n100000000000000000000000000000\\n1000000000000000000000000000000\\n10000000000000000000000000000000\\n1000000000000000000000000000000000\\n10000000000000000000000000000000000\\n100000000000000000000000000000000000\\n1000000000000000000000000000000000000\\n10000000000000000000000000000000000000\\n100000000000000000000000000000000000000\\n1000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000",
        "num_ids_2": 74,
        "num_ids_4": 1177
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000') == '0\\n4\\n6\\n6\\n-1\\n6\\n72'\n\"\"\"",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\\n\") == \"0\\n4\\n6\\n6\\n-1\\n6\\n7200\\n\")\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n'7\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000'\n) == '0\\n4\\n6\\n6\\n-1\\n6\\n72'\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1\") == \"0\"\nassert solution(\"4\\n2\") == \"2\"\nassert solution(\"4\\n3\") == \"3\"\nassert solution(\"4\\n4\") == \"4\"\n\n-----Explanation-----\n\nIn the first case, you can replace $1$ with $0$ using no operation.\n\nIn the second case, you can replace $1$ with $2$ using a single operation.\n\nIn the third case, you can replace $1$ with $2$ using a single operation.\n\nIn the fourth case, you can replace $1$ with $2$ using a single operation.\n\nIn the fifth case, you can replace $1$ with $3$ using a single operation.\n\nIn the sixth case, you can replace $1$ with $4$ using a single operation.\n\nIn the seventh case, it is impossible to obtain $1$ from $n$ since it is already equal to $1$.\n\n\"\"\"\n\nimport sys\nfrom typing import List, Set, Tuple, Dict\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n5\\n2\\n9\\n10\\n1\\n7\\n1\\n1\\n\") == \"6\"\nassert solution(\"1\\n10\\n12\\n14\\n16\\n2\\n3\\n4\\n6\\n2\\n4\\n8\\n5\\n10\\n1\\n7\\n1\\n1\\n\") == \"6\"\nassert solution(\"1\\n10\\n12\\n14\\n16\\n2\\n3\\n4\\n6\\n2\\n4\\n8\\n5\\n10\\n1\\n7\\n1\\n1\\n\") == \"6\"\n\n\"\"\"\n\nimport math",
        "num_ids_2": 99,
        "num_ids_4": 162
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2') == '2'\nassert solution('1\\n20') == '15'\nassert solution('1\\n10') == '5'\nassert solution('1\\n30') == '14'\nassert solution('1\\n15') == '14'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''7\n1\n10\n25\n30\n14\n27\n1000000000000000000''') == '''0\n4\n6\n6\n-1\n6\n72'''\n\n\"\"\"\nfrom collections import deque",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '7\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\\n') == '0\\n4\\n6\\n6\\n-1\\n6\\n72\\n'\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == \"0\\n4\\n6\\n6\\n-1\\n6\\n72\"\n\"\"\"\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\") == 'YES'\nassert solution(\"5\\n1 1 2 1\\n3\\n1 1 2 1\") == 'NO'\nassert solution(\"3\\n1 1 3\\n2\\n11 11\") == 'YES'\nassert solution(\"3\\n1 1 3\\n2\\n11 11\") == 'YES'\n\"\"\"\n\nimport sys",
        "num_ids_2": 49,
        "num_ids_4": 93
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n1\n3\n1 1 3\n2\n11 11\n1\n100\n''') == 'YES'\nassert solution('''\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\n''') == 'YES'\nassert solution('''\n1\n3\n1 1 3\n2\n11 11\n1\n100\n''') == 'NO'\nassert solution('''\n1\n3\n1 1 3\n2\n11 11\n1\n100\n''') == 'NO'\nassert solution('''\n1\n3\n1 1 3\n2\n11 11\n1\n100\n''') == 'NO'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\nassert solution(\"1\\n100\") == \"YES\"\nassert solution(\"2\\n11 11\\n1\\n100\") == \"NO\"\nprint('The local tests are done. Try Solution().')\n",
        "num_ids_2": 48,
        "num_ids_4": 81
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"2\\n11 11\\n1\\n100\") == \"NO\"\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1 3\") == 'YES'\nassert solution(\"4\\n1 1 2 1\") == 'NO'\nassert solution(\"2\\n11 11\") == 'YES'\nassert solution(\"1\\n100\") == 'NO'\n\"\"\"\nimport sys\nsys.setrecursionlimit(10 ** 6)",
        "num_ids_2": 31,
        "num_ids_4": 58
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2\\n3\\n1\\n1\\n2\\n3\\n4\") == \"YES\"\nassert solution(\"3\\n2\\n3\\n2\\n1\\n2\\n3\\n4\") == \"NO\"\nassert solution(\"3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\") == \"NO\"\nassert solution(\"3\\n3\\n3\\n3\\n2\\n2\\n3\\n4\") == \"NO\"\nassert solution(\"3\\n3\\n3\\n3\\n2\\n2\\n2\\n4\") == \"YES\"\n",
        "num_ids_2": 62,
        "num_ids_4": 124
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\n\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\\n\") == \"YES\"\nassert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\\n\") == \"NO\"\n\"\"\"\n",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"3 3\") == \"NO\"\nassert solution(\"11 11\") == \"YES\"\nassert solution(\"1 1 3\") == \"YES\"\nassert solution(\"4 1 1 1\") == \"YES\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1 3') == 'YES'\nassert solution('2\\n2 2') == 'NO'\nassert solution('2\\n1 1 2 1') == 'YES'\nassert solution('2\\n1 1 2') == 'YES'\nassert solution('1\\n100') == 'YES'\n",
        "num_ids_2": 29,
        "num_ids_4": 60
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\") == 4\nassert solution(\"bacabaa\") == 0\n\n-----Test_1-----\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nThe following sequence of changes can be made:\na_1 = b\na_3 = c\na_4 = a\na_5 = b\n\nAfter the changes the strings a and b are equal.\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nThere are no preprocess moves to make strings equal.\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\n-----Test_2-----\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nThe following sequence of changes can be made:\na_1 = z\na_2 = c\na_3 = b\na_4 = d\n\nAfter the changes the strings a and b are equal.\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nThe following sequence of changes can be made:\na_1 = b\na_2 = a\na_3 = c\na_4 = b\n\nAfter the changes the strings a and b are equal.\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\n-----Test_3-----\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nThe following sequence of changes can be made:\na_1 = z\na_2 = c\na_3 = b\na_4 = d\n\nAfter the changes the strings a and b are equal.\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nThe following sequence of changes can be made:\na_1 = b\na_2 = a\na_3 = c\na_4 = b\n\nAfter the changes the strings a and b are equal.\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nThe following sequence of changes can be made:\na_1 = z\na_2 = c\na_3 = b\na_4 = d\n\nAfter the changes the strings a and b are equal.\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bac",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abacaba') == 4\nassert solution('zcabd') == 0\nassert solution('dbacz') == 0\n",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\") == \"4\"\nassert solution(\"zcabd\") == \"0\"\nassert solution(\"dbacz\") == \"0\"\n",
        "num_ids_2": 25,
        "num_ids_4": 37
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"zcabd\") == 0\nassert solution(\"dbacz\") == 0\nassert solution(\"abacaba\") == 4\n\nassert solution(\"zbacab\") == 0\nassert solution(\"bacabz\") == 4\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == \"4\"\n\nassert solution(\"zcabd\") == \"0\"\n\nassert solution(\"bacabaa\") == \"4\"\n",
        "num_ids_2": 25,
        "num_ids_4": 38
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == \"4\"\nassert solution(\"zcabd\") == \"0\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == 4\nassert solution(\"bacabaa\") == 0\nassert solution(\"zcabd\") == 0\nassert solution(\"dbacz\") == 0\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(s1) == s2\n\nassert solution(s1) == s2\n\n\"\"\"\n\n\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abacaba') == 4\nassert solution('zcabd') == 0\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\", \"bacabaa\") == 4\nassert solution(\"zcabd\", \"dbacz\") == 0\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2\n2 4 5\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n\"\"\") == \"\"\"\n2\n198\n-17\n2999999997\n0\n1\"\"\"\n",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\nprint('Success')",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == '8 198 -17 2999999997 0 1'\nassert solution(\"1 1 1000000000\\n1 1 999999999\") == '0 0'\n\n\"\"\"\n",
        "num_ids_2": 72,
        "num_ids_4": 72
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999') == \\\n    '8\\n198\\n-17\\n2999999997\\n0\\n1'\nprint('OK')\n\"\"\"\n\nt = int(input())\n\nfor _ in range(t):\n    a, b, k = [int(i) for i in input().split()]\n    if k % 2 == 0:\n        print(a * k + b)\n    else:\n        print(a * (k-1) + b)\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8198-17299999999701\"\n\n\"\"\"\n\nfrom typing import List, Dict, Set",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8198-1729999999901\"\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n6 4 3\\n1 1 1000000000\\n1 1000000000 10\\n1 1 1\\n1 1 1\\n1 1 1\") == \"198\\n-17\\n2999999997\\n0\\n1\"\n\"\"\"\n\n\n\"\"\"\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 1\") == \"7\"\nassert solution(\"5 2 3\") == \"8\"\nassert solution(\"5 2 1\") == \"8\"\nassert solution(\"1 1 1000000000\") == \"0\"\nassert solution(\"1 1 999999999\") == \"1\"\n",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == '8\\n198\\n-17\\n2999999997\\n0\\n1'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \\\n\"8\\n198\\n-17\\n2999999997\\n0\\n1\"\nprint('Success')\n\n----------------------------------------------------------------------------------------------------------------------------------------------",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2\\n3\") == \"1\\n2\\n3\"\nassert solution(\"2\\n1\\n2\") == \"1\\n2\\n1\"\nassert solution(\"2\\n1\\n3\") == \"2\\n2\\n2\"\n",
        "num_ids_2": 44,
        "num_ids_4": 66
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1\") == \"1\"\nassert solution(\"4\\n2\") == \"3\"\nassert solution(\"4\\n3\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3\\n5\\n2\\n1\\n\") == \"3\\n4\\n4\\n3\\n3\\n2\\n\"\nassert solution(\"6\\n1\\n1\\n1\\n1\\n1\\n\") == \"1\\n2\\n2\\n2\\n2\\n2\\n\"\n\n\"\"\"\n",
        "num_ids_2": 85,
        "num_ids_4": 85
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\\n') == '9\\n27\\n6561\\n19683\\n1350851717672992089'\n\"\"\"\n\nfrom sys import stdin, stdout",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n30\\n3\\n4\\n20\\n2\\n18\\n1\\n9\\n') == '29'\n\"\"\"\n\nimport sys\nfrom math import log10\nfrom math import ceil",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\\n\") == \"9\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089\"\nprint(solution(\"2\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\\n\"))\n",
        "num_ids_2": 70,
        "num_ids_4": 70
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1') == '4'\nassert solution('4\\n2') == '5'\nassert solution('4\\n6') == '6'\nassert solution('4\\n13') == '7'\nassert solution('4\\n14') == '9'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1\") == \"1\"\nassert solution(\"4\\n2\") == \"3\"\nassert solution(\"5\\n1\") == \"1\"\nassert solution(\"5\\n2\") == \"3\"\nassert solution(\"5\\n3\") == \"4\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n\") == \"1\\n3\\n9\\n15\\n\"\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n",
        "num_ids_2": 28,
        "num_ids_4": 68
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 10 8 5 3\") == 70\nassert solution(\"12 8 8 7 2\") == 77\nassert solution(\"12343 43 4543 39 123212\") == 177177\nassert solution(\"1000000000 1000000000 1 1 1\") == 999999999\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == 999999999\n",
        "num_ids_2": 24,
        "num_ids_4": 58
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n",
        "num_ids_2": 28,
        "num_ids_4": 68
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n",
        "num_ids_2": 27,
        "num_ids_4": 67
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n",
        "num_ids_2": 28,
        "num_ids_4": 68
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n    7\n    10 10 8 5 3\n    12 8 8 7 2\n    12343 43 4543 39 123212\n    1000000000 1000000000 1 1 1\n    1000000000 1000000000 1 1 1000000000\n    10 11 2 1 5\n    10 11 9 1 10\n    \"\"\"\n) == \"\"\"\n    70\n    77\n    177177\n    999999999000000000\n    999999999\n    55\n    10\n    \"\"\"\n\n\"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b, x, y, n = map(int, stdin.readline().strip().split())\n        print(a * b if a * b <= (x * y) else x * y)\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70771771779999999990000\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"9999999999999999999999999\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"5510\"\n",
        "num_ids_2": 147,
        "num_ids_4": 215
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == '707717717779999999'\nassert solution(\"1\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == '999999999000000000'\nassert solution(\"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == '5510'\nassert solution(\"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == '10'\nassert solution(\"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == '10'\n\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 150,
        "num_ids_4": 291
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 10 8 5 3') == '70'\nassert solution('12 8 8 7 2') == '77'\nassert solution('12343 43 4543 39 123212') == '177177'\nassert solution('1000000000 1000000000 1 1 1') == '999999999000000000'\nassert solution('1000000000 1000000000 1 1 1000000000') == '999999999'\n",
        "num_ids_2": 28,
        "num_ids_4": 68
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n",
        "num_ids_2": 28,
        "num_ids_4": 68
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(2, 3) == \"1\"\nassert solution(10, 10) == \"0\"\nassert solution(2, 4) == \"2\"\nassert solution(7, 4) == \"2\"\nassert solution(9, 3) == \"1\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n10 10\") == \"1\"\nassert solution(\"2 4\\n7 4\") == \"0\"\nassert solution(\"2 4\\n7 4\") == \"0\"\nassert solution(\"2 4\\n7 4\") == \"0\"\nassert solution(\"2 4\\n7 4\") == \"0\"\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n10 10\") == \"1\"\nassert solution(\"2 4\\n7 4\") == \"0\"\nassert solution(\"2 4\\n7 4\") == \"2\"\nassert solution(\"2 4\\n7 4\") == \"2\"\nassert solution(\"2 4\\n7 4\") == \"2\"",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n10 10') == '1\\n0\\n2\\n2\\n1'\nassert solution('5\\n8 9') == '2\\n1\\n3\\n2\\n1'\nassert solution('6\\n15 36') == '3\\n1\\n5\\n4\\n3\\n3\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n1'\n",
        "num_ids_2": 53,
        "num_ids_4": 106
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == \"1\\n0\\n2\\n2\\n1\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\\n\") == '1\\n0\\n2\\n2\\n1'\nassert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\\n\") == '1\\n0\\n2\\n2\\n1'\n",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n10 10\") == \"1\"\nassert solution(\"2 4\\n7 4\") == \"2\"\nassert solution(\"9 3\") == \"2\"\n\n\nhttps://app.codility.com/demo/results/trainingB2QLMB-KQN/",
        "num_ids_2": 30,
        "num_ids_4": 41
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n10 10\") == \"1\\n0\\n2\\n2\\n1\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"7 4\") == \"2\"\nassert solution(\"9 3\") == \"1\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_0) == test_0_result\nassert solution(test_1) == test_1_result\nassert solution(test_2) == test_2_result\nassert solution(test_3) == test_3_result\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(example) == example_result",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n22\n9999\n1\n777''') == '13\\n90\\n1\\n66'\nprint(solution(stdin.strip()))\n\n\"\"\"\nfrom math import log10\nfrom itertools import chain",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\n\"\"\"\nfrom sys import stdin, stdout",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\\n\") == \"13\\n90\\n1\\n66\"\nprint(solution(\"22\\n9999\\n1\\n777\\n\"))\n\"\"\"\n\n\nfrom typing import List, Set\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n\nprint(solution(input()))\n\n---",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(solution('')) == ''\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('11') == '1'\nassert solution('11a') == '1a'\nassert solution('111') == '11'\n",
        "num_ids_2": 18,
        "num_ids_4": 40
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\n\"\"\"\n\nimport sys\nimport math\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\n\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\n3\n2 2 2\n5\n2 2 2 2 2\n4\n2 2 2\n5\n2 2 2 2 2\n\"\"\") == \"YES\\n2 6\\n1 2\\n\"\n",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1') == 'YES\\n2 6\\n1 2'\nassert solution('3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3') == 'NO'\nassert solution('4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2') == 'YES\\n2 2\\n4 1'\n\"\"\"\n",
        "num_ids_2": 72,
        "num_ids_4": 119
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\n\"\"\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"\"\"\n4\n2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n\"\"\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"\"\"\n3\n1\n5\n1 1 1 1 1\n2\n2 3\n\"\"\") == \"NO\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 15
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"4\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\"\n\n\"\"\"\n\nimport sys\nimport itertools\nimport copy",
        "num_ids_2": 80,
        "num_ids_4": 80
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\") == \"NO\"\n\n\nimport sys\nimport numpy as np",
        "num_ids_2": 83,
        "num_ids_4": 109
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\\n\") == \"NO\"\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\\n5\\n2 2 2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"2\\n1\\n5\\n5\\n1 1 1 1 1\") == \"NO\"\nassert solution(\"1\\n5\\n5\\n1 1 1 1 1\") == \"YES\\n1 4\"\n",
        "num_ids_2": 74,
        "num_ids_4": 157
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 2 2\\n5\\n2 2 2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"4\\n6\\n2 2 2 2 2\\n5\\n2 2 2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"5\\n2 3 1 3 2\\n6\\n2 2 2 2 2\") == \"YES\\n2 6\\n1 3\"\nassert solution(\"3\\n1\\n5\\n1 1 1 1 1\") == \"NO\"\n",
        "num_ids_2": 71,
        "num_ids_4": 129
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\\n\"\nassert solution(\"4\\n6\\n2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\") == \"NO\"\nassert solution(\"1\\n5\\n5\\n1 1 1 1 1\") == \"NO\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 84,
        "num_ids_4": 133
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('[4,2,3]') == 5\nassert solution('[3,-1,0,2]') == 6\nassert solution('[2,-3,-1,5,-4]') == 13\n\n\"\"\"\nfrom typing import List\nimport collections\n",
        "num_ids_2": 30,
        "num_ids_4": 48
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"[1,-1,0,2]\") == 6\nassert solution(\"[4,2,3]\") == 5\nassert solution(\"[3,-1,0,2]\") == 6\nassert solution(\"[2,-3,-1,5,-4]\") == 13\n\n\n\n\n\n\n\n\n\n\u628a\u5b57\u7b26\u4e32\u8f6c\u5316\u4e3a\u6570\u5b57\u3002\n>>> a = '7'\n>>> b = int(a)\n>>> c = float(a)\n>>> print(b,c)\n7.0\n\n>>> a = '123.456'\n>>> b = int(float(a))\n>>> print(b)\n123\n\n>>> a = '-123'\n>>> b = int(a)\n>>> print(b)\n-123\n\n>>> b = float(a)\n>>> print(b)\n-123.0\n\n>>> b = float(a)\n>>> print(b)\n-123.0\n\n>>> a = '-123.456'\n>>> b = float(a)\n>>> print(b)\n-123.456\n\n>>> a = '123.456'\n>>> b = int(float(a))\n>>> print(b)\n123\n\n>>> a = '123.456'\n>>> b = int(float(a))\n>>> print(b)\n123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = float(a)\n>>> print(b)\n-123.456\n\n>>> a = '123.456'\n>>> b = int(float(a))\n>>> print(b)\n123\n\n>>> a = '123.456'\n>>> b = int(float(a))\n>>> print(b)\n123\n\n>>> a = '-123.456'\n>>> b = float(a)\n>>> print(b)\n-123.456\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = float(a)\n>>> print(b)\n-123.456\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = float(a)\n>>> print(b)\n-123.456\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a",
        "num_ids_2": 30,
        "num_ids_4": 64
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A=[4,2,3], K=1\") == 5\nassert solution(\"A=[3,-1,0,2], K=3\") == 6\nassert solution(\"A=[2,-3,-1,5,-4], K=2\") == 13\n\n\"\"\"\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        # for i in range(K):\n        #     A.sort()\n        #     A[i] = -A[i]\n        # A.sort()\n        # A[0] = -A[0]\n        # return sum(A)\n\n        A.sort()\n        for i in range(K):\n            if A[i] >= 0:\n                A[i] = -A[i]\n            else:\n                break\n        return sum(A)\n",
        "num_ids_2": 38,
        "num_ids_4": 60
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A=[4,2,3], K=1\") == \"5\"\nassert solution(\"A=[3,-1,0,2], K=3\") == \"6\"\nassert solution(\"A=[2,-3,-1,5,-4], K=2\") == \"13\"\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 66
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str([4, 2, 3])) == str([5])\nassert solution(str([3, -1, 0, 2])) == str([6])\nassert solution(str([2, -3, -1, 5, -4])) == str([13])\nassert solution(str([1,-1,1,1])) == str([0])\n\n\"\"\"\n\nimport unittest\nfrom typing import List\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        # if sum of values of array is negative, simply return the value\n        if sum(A) < 0:\n            return sum(A)\n\n        # if K > len(A), simply return the largest value\n        if K > len(A):\n            return max(A)\n\n        # return max of the array after K number of negations\n        return max(A) - min(A)\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def testLargestSumAfterKNegations(self):\n        self.assertEqual(self.solution.largestSumAfterKNegations([3, -1, 0, 2], 1), 3)\n",
        "num_ids_2": 39,
        "num_ids_4": 84
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 3') == '5'\nassert solution('3 -1 0 2') == '6'\nassert solution('2 -3 -1 5 -4') == '13'\n",
        "num_ids_2": 26,
        "num_ids_4": 43
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"[4,2,3]\") == 5\nassert solution(\"[3,-1,0,2]\") == 6\nassert solution(\"[2,-3,-1,5,-4]\") == 13\n\"\"\"\nimport heapq\n",
        "num_ids_2": 30,
        "num_ids_4": 48
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"[4,2,3]\\n1\") == 5\nassert solution(\"[3,-1,0,2]\\n3\") == 6\nassert solution(\"[2,-3,-1,5,-4]\\n2\") == 13\n",
        "num_ids_2": 36,
        "num_ids_4": 57
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"[4,2,3]\\n1\") == 5\nassert solution(\"[3,-1,0,2]\\n3\") == 6\nassert solution(\"[2,-3,-1,5,-4]\\n2\") == 13\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 36,
        "num_ids_4": 57
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 3', 1) == '5'\nassert solution('3 -1 0 2', 3) == '6'\nassert solution('2 -3 -1 5 -4', 2) == '13'\n\n\"\"\"\n\n\nimport collections",
        "num_ids_2": 30,
        "num_ids_4": 49
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 2 1 -6 6 -7 9 1 2 0 1\") == True\nassert solution(\"0 2 1 -6 6 7 9 -1 2 0 1\") == False\nassert solution(\"3 3 6 5 -2 2 5 1 -9 4\") == True\nassert solution(\"0 0 0 0 0 0 0 0 0\") == False\n\n'''\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        curr_sum = 0\n        sum_before = sum(A)\n        if sum_before % 3!= 0:\n            return False\n        curr_sum = sum_before // 3\n        sum_before = 0\n        for i in range(0, len(A)):\n            sum_before += A[i]\n            if sum_before == curr_sum:\n                curr_sum = 0\n                sum_before = 0\n            elif sum_before < curr_sum:\n                sum_before = 0\n            else:\n                curr_sum = curr_sum - sum_before\n                sum_before = 0\n        if curr_sum == 0:\n            return True\n        else:\n            return False\n",
        "num_ids_2": 40,
        "num_ids_4": 75
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0,2,1,-6,6,-7,9,1,2,0,1\") == True\nassert solution(\"0,2,1,-6,6,7,9,-1,2,0,1\") == False\nassert solution(\"3,3,6,5,-2,2,5,1,-9,4\") == True\nassert solution(\"3,3,6,5,-2,2,5,1,-9,4\") == True\nassert solution(\"0,0,0,0\") == True\n",
        "num_ids_2": 56,
        "num_ids_4": 108
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\n\"\"\"\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        sum_A = sum(A)\n        if sum_A % 3!= 0:\n            return False\n        target = sum_A // 3\n        cur = 0\n        i = 0\n        while i < len(A) and cur < target:\n            cur += A[i]\n            i += 1\n        if cur!= target:\n            return False\n        cur = 0\n        while i < len(A) and cur < target:\n            cur += A[i]\n            i += 1\n        if cur!= target:\n            return False\n        return True\n",
        "num_ids_2": 60,
        "num_ids_4": 88
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 2 1 -6 6 -7 9 1 2 0 1') == True\nassert solution('0 2 1 -6 6 7 9 -1 2 0 1') == False\nassert solution('3 3 6 5 -2 2 5 1 -9 4') == True\nassert solution('3 3 6 5 -2 2 5 1 -9 4') == False\nassert solution('1') == True\n",
        "num_ids_2": 40,
        "num_ids_4": 78
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == True\n",
        "num_ids_2": 60,
        "num_ids_4": 118
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 2 1 -6 6 -7 9 1 2 0 1\") == True\nassert solution(\"0 2 1 -6 6 7 9 -1 2 0 1\") == False\nassert solution(\"3 3 6 5 -2 2 5 1 -9 4\") == True\n\"\"\"\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: list[int]) -> bool:\n        sumA = sum(A)\n        if sumA % 3!= 0:\n            return False\n        else:\n            sumA /= 3\n            cnt = 0\n            for a in A:\n                if a == sumA:\n                    cnt += 1\n                    if cnt == 3:\n                        break\n        return True if cnt == 3 else False\n",
        "num_ids_2": 40,
        "num_ids_4": 59
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 2 1 -6 6 -7 9 1 2 0 1') == True\nassert solution('0 2 1 -6 6 7 9 -1 2 0 1') == False\nassert solution('3 3 6 5 -2 2 5 1 -9 4') == True",
        "num_ids_2": 40,
        "num_ids_4": 59
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"[0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]\") == \"true\"\nassert solution(\"[0, 2, 1, -6, 6, 7, 9, 1, 2, 0, 1]\") == \"false\"\nassert solution(\"[3, 3, 6, 5, -2, 2, 5, 1, -9, 4]\") == \"true\"\nassert solution(\"[0, 2, 1, -6, 6, 7, 9, 1, 2, 0, 1]\") == \"true\"\nassert solution(\"[0, 2, 1, -6, 6, 7, 9, 1, 2, 0, 1]\") == \"true\"\n",
        "num_ids_2": 67,
        "num_ids_4": 132
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 6 5 -2 2 5 1 -9 4') == True\nassert solution('0 2 1 -6 6 -7 9 1 2 0 1') == True\nassert solution('0 2 1 -6 6 -7 9 1 2 0 1') == True\nassert solution('0 2 1 -6 6 -7 9 1 2 0 1') == True\nassert solution('0 2 1 -6 6 -7 9 1 2 0 1') == True\n",
        "num_ids_2": 39,
        "num_ids_4": 79
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0,2,1,-6,6,-7,9,1,2,0,1') == True\nassert solution('0,2,1,-6,6,7,9,-1,2,0,1') == False\nassert solution('3,3,6,5,-2,2,5,1,-9,4') == True\n\n\"\"\"\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        if sum(A)%3!=0:return False\n        s = sum(A) // 3\n        i,j, k = 0,0,0\n        s1,s2 = 0,0\n        for n in A:\n            s1 += n\n            if s1==s:\n                j+=1\n                s2=0\n                s1=0\n            if s1==s*2:\n                k+=1\n                s1=0\n                s2=0\n            if j==2 and k==2:\n                return True\n        return False\n",
        "num_ids_2": 56,
        "num_ids_4": 82
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\na:b\\nx:y\\nz:a') == 'a:a\\nx:y\\nz:z'\n\"\"\"\n\n\"\"\"\n-----------SOLUTION------------\nfrom itertools import groupby\nimport re",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\nbeat') == 'beat'\nassert solution('7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet') == 'beet vet'\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"7\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet\n\"\"\") == 'beet\\nvet'\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''7\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet''') == 'beet\\nvet\\n'\n\nassert solution('''8\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet''') == 'beet\\nvet\\n'\n\nassert solution('''9\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet''') == 'beet\\nvet\\n'\n\nassert solution('''10\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet''') =='vet\\nbeet\\n'\n\nassert solution('''5\nabcd\nacbd\nbacd\ndabc\ndbac''') == 'abcd\\nacbd\\n'\n'''\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\nabcd\\nabcd\\nbcde\\nbcde\\nbcde\\n') == 'abcd'\n\"\"\"\n\n\"\"\"\nSolution 1\n\nSolution 2\n\nimport collections",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == ['beet','vet']\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nab\\nbc\\nca\\n\") == \"ab\\nc\\na\\n\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet\\n\") == \"beet\\nvet\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nbee\\nf\\nbd\\n\") == 'bee'\n\"\"\"\nfrom typing import List\nfrom collections import defaultdict",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\nab\") == 'ab'\nassert solution(\"5\\nab\\nbc\\ncd\\nab\\nab\\n\") == 'ab\\nab'\nassert solution(\"5\\nab\\nbc\\nab\\n\") == 'ab\\nab'\n\"\"\"\n\nimport unittest",
        "num_ids_2": 43,
        "num_ids_4": 67
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n4 8\") == \"8\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n4 8') == '8'\n\"\"\"\nimport sys\nimport os\n\nprint(sys.argv)",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8\\n\") == \"8\"\n\"\"\"\n\nimport sys\nfrom itertools import combinations",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 8\\n') == '8'\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n4 8') == '8'\n\nfrom sys import stdin\nprint(solution(stdin.read()))",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8\") == \"8\"\nassert solution(\"2 3\") == \"5\"\n\"\"\"\n\nn = int(input())\na = [int(n) for n in input().split(\" \")]\nb = [0] * len(a)\nfor i in range(len(a)):\n    b[i] = (a[i] + i) ** 2\nprint(sum(b))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2\n4 8\n\"\"\") == \"8\"\n\"\"\"",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"4 8\") == \"4 8\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().split()))\narr.sort()",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8\") == \"8\"\nprint(solution(\"4 8\"))\n\n\"\"\"\n\nimport ast",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 8\\n') == '8'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 1 5\") == \"84\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(123) == \"72\"\nassert solution(10) == \"5\"\nassert solution(1234) == \"84\"\n",
        "num_ids_2": 20,
        "num_ids_4": 31
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\nprint(\"Test finished.\")\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1234 150 100') == '84'\n\n-----\n\"\"\"\n\nX, A, B = [int(i) for i in stdin.split()]\nleft = X - A - B\nprint(X - A - B)\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n50\\n150\") == \"84\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1234 150 100') == '84'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\nassert solution(\"1234 150 200\") == \"20\"\nassert solution(\"1234 150 300\") == \"0\"\nassert solution(\"1234 150 10000\") == \"0\"\nassert solution(\"1234 150 10001\") == \"0\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\"\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\"\n\nfrom itertools import permutations",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\"\n\nfrom math import factorial\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2') == '8'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"8\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2') == 8\n\n----------------------\n\nimport itertools\nimport math\nimport sys\n\nN, M = [int(i) for i in sys.stdin.readline().split()]\ncomb = list(itertools.product('AB', repeat=N))\nres = 0\nfor i in comb:\n    if 'A' not in i and 'B' not in i:\n        res += 1\n    if 'A' in i and 'B' in i:\n        res += 1\nprint(math.factorial(N)//(math.factorial(N-2)*(math.factorial(2))))\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == 8\n\"\"\"\n\nN, M = map(int, input().split())\n\nans = 1\nfor i in range(N):\n    ans *= M\n    ans = ans // (i + 1)\n    ans = ans % (10 ** 9 + 7)\nprint(ans)\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(TEST_INPUT) == TEST_OUTPUT\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"8\"\n\n------------------------------\nPython 3.7.3\n------------------------------\n\"\"\"\n\nfrom math import factorial",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2') == 8\n\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n2 3\") == \"POSSIBLE\"\nassert solution(\"1 3\\n2 3\") == \"IMPOSSIBLE\"\nassert solution(\"1 2\\n1 3\") == \"IMPOSSIBLE\"\n\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 35,
        "num_ids_4": 53
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 2\n1 2\n2 3''') == \"POSSIBLE\"\n\n\"\"\"\nfrom typing import List\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 2\\n\") == \"POSSIBLE\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 2\n1 2\n2 3''') == 'POSSIBLE'\n\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n1 2\\n2 3\\n') == 'POSSIBLE'\nassert solution('3 2\\n2 3\\n1 2\\n') == 'IMPOSSIBLE'\n\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N, M = stdin.split('\\n')\n        N, M = int(N), int(M)\n        boat_services = []\n        for i in range(M):\n            boat_services.append(tuple(stdin.split('\\n')[i].split()))\n        for i in range(M):\n            a, b = boat_services[i]\n            a, b = int(a), int(b)\n            for j in range(M):\n                if i!= j and boat_services[j][0] == a and boat_services[j][1] == b:\n                    return \"IMPOSSIBLE\"\n        return \"POSSIBLE\"\n",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == 'POSSIBLE'\n\n---\n\"\"\"\n\n\"\"\"\n---SOLUTION---\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == 'POSSIBLE'\n\"\"\"\n\n\"\"\"\n3 2\n1 2\n2 3\n\"\"\"\n\n\"\"\"\n3 2\n1 2\n2 3\n\nPOSSIBLE\n\"\"\"\n\nimport sys\n\nclass Solution:\n    # Write your code here\n    def __init__(self):\n        self.N = int(input())\n        self.M = int(input())\n        self.adj = dict()\n        self.rev_adj = dict()\n        for i in range(1, self.N+1):\n            self.adj[i] = set()\n            self.rev_adj[i] = set()\n        for _ in range(self.M):\n            a, b = map(int, input().strip().split())\n            self.adj[a].add(b)\n            self.rev_adj[b].add(a)\n    \n    def dfs(self, s):\n        if s in self.visited:\n            return self.visited[s]\n        self.visited[s] = False\n        for v in self.rev_adj[s]:\n            if self.dfs(v) == True:\n                self.visited[s] = True\n                return True\n        self.visited[s] = False\n        return False\n    \n    def solve(self):\n        self.visited = dict()\n        self.visited[1] = True\n        if self.dfs(1) == False:\n            print(\"IMPOSSIBLE\")\n            return\n        self.visited = dict()\n        self.visited[self.N] = True\n        if self.dfs(self.N) == True:\n            print(\"POSSIBLE\")\n            return\n        print(\"IMPOSSIBLE\")",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'IMPOSSIBLE'\nassert solution('N M\\na_1 b_1\\na_2 b_2\\n:') == 'IMPOSSIBLE'\nassert solution('N M\\na_1 b_1\\na_2 b_2\\n1 2') == 'POSSIBLE'\nassert solution('N M\\na_1 b_1\\na_2 b_2\\n3 4') == 'POSSIBLE'\nassert solution('N M\\na_1 b_1\\na_2 b_2\\n1 3') == 'POSSIBLE'\n\n'''\n\nfrom collections import deque\nimport sys",
        "num_ids_2": 44,
        "num_ids_4": 106
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('atcoder') == 'acdr'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nprint(\"AC\")\n\nassert solution(\"abc\") == \"abc\"\nprint(\"AC\")\n\nassert solution(\"abcd\") == \"acd\"\nprint(\"AC\")\n\nassert solution(\"abcd\") == \"acd\"\nprint(\"AC\")\n\nassert solution(\"abcd\") == \"acd\"\nprint(\"AC\")",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('atcoder') == 'acdr'\n\"\"\"\nimport sys\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('atcoder') == 'acdr'\nassert solution('a') == 'a'\nassert solution('a\\nb\\nc\\nd\\ne') == 'abce'",
        "num_ids_2": 23,
        "num_ids_4": 42
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('atcoder') == 'acdr'\nprint('test passed')",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\"\n\ns = stdin\ns = s[::2]\nprint(s)",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nprint(solution(\"atcoder\"))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == result\nprint(result, file=sys.stderr, flush=True)\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('atcoder') == 'acdr'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"\n\n\"\"\"\n\n---SOLUTION---\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('rng gorilla apple') == 'YES'\nassert solution('a b c') == 'NO'\nassert solution('a b a') == 'YES'\nassert solution('rng') == 'YES'\n\"\"\"\nfrom typing import List",
        "num_ids_2": 25,
        "num_ids_4": 48
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('rng gorilla apple') == 'YES'\nassert solution('rng gorilla apple') == 'YES'\nassert solution('rng gorilla apple') == 'YES'\nassert solution('rng gorilla apple') == 'YES'\nassert solution('rng gorilla apple') == 'YES'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\nprint(solution(sys.stdin.read()))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(expected_output)\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\nprint(solution(\"36 24\"))\n\"\"\"\n\nimport sys\nimport re\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\"\n\n\"\"\"\nSample Input 1:\n36\n24\n\nSample Output 1:\nGREATER\n\nSample Input 2:\n24\n24\n\nSample Output 2:\nEQUAL\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\"\n\nA, B = input().split()\nA = int(A)\nB = int(B)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\"\n\na, b = input().split()",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\nprint(\"PASSED\")",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"apple\\norange\\napple\\n1\\ngrape\\n\") == \"2\"\n\"\"\"\n\nimport ast\n\nN = int(input())\ns = []\nfor _ in range(N):\n    s.append(input())\n\nM = int(input())\nt = []\nfor _ in range(M):\n    t.append(input())\n\nn = int(input())\nfor _ in range(n):\n    if s[int(input()) - 1] in t:\n        print(1)\n    else:\n        print(0)\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 apple\\n1 apple\\n: 2 apple\") == \"2\"\n\"\"\"\n\nN = int(stdin.readline())\nS = []\nfor _ in range(N):\n    S.append(stdin.readline())\nM = int(stdin.readline())\nT = []\nfor _ in range(M):\n    T.append(stdin.readline())",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"\n\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nn = int(sys.stdin.readline())\ns = Counter(sys.stdin.readline().strip() for _ in range(n))\nm = int(sys.stdin.readline())\nt = Counter(sys.stdin.readline().strip() for _ in range(m))\nx = 0\nfor i in s.keys():\n    if i in t.keys() and s[i] <= t[i]:\n        x += s[i]\nprint(x)\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3\napple\norange\napple\n1\ngrape\n''') == '2'\nprint(\"Test 1 PASSED\")\nassert solution('''\n3\napple\napple\napple\n1\ngrape\n''') == '0'\nprint(\"Test 2 PASSED\")\nassert solution('''\n3\napple\norange\napple\n1\ngrape\n''') == '0'\nprint(\"Test 3 PASSED\")\nassert solution('''\n3\napple\napple\norange\n1\ngrape\n''') == '0'\nprint(\"Test 4 PASSED\")\nassert solution('''\n3\napple\norange\napple\n1\ngrape\n''') == '2'\nprint(\"Test 5 PASSED\")\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"\nassert solution(\"3\\naaaa\\naaaa\\n1\\ngrape\") == \"2\"\n\n\"\"\"\n",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\napple\\norange\\napple\\n1\\ngrape') == '2'\n\"\"\"\n\nN, *s, M, *t = [*map(str, open(0).read().split())]\nN, M = int(N), int(M)\ncnt = 0\nfor i in range(1, N+1):\n    cnt += s[i-1] == t[i-1]\nprint(cnt)\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\napple\norange\napple\n1\ngrape''') == '2'\nassert solution('''4\napple\norange\napple\n1\ngrape''') == '1'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\\n\") == 2\n\"\"\"\n\nimport re",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n'''\n\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\nassert solution('G') == 'C'\nassert solution('T') == 'A'\n\nprint('Test finished.')",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(A) == T\nassert solution(C) == G\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n\n---------------------------------------------",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n3 2 2 4 1\\n1 2 2 2 1') == '14'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == 14\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2 2 4 1') == '14'\n\"\"\"\n\n\nimport sys\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3, 2, 2, 4, 1) == 14\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1000000)",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n3 2 2 4 1\n1 2 2 2 1''') == '14'\n\n\"\"\"\n\nfrom itertools import permutations",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('4') == '4'\nassert solution('10') == '10'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == \"14\"\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 2 4 1\\n1 2 2 2 1\") == '14'\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 2 4 1\\n1 2 2 2 1\") == \"14\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == \"14\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n2 2 2') == '1'\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n2 2 2\\n\") == \"1\"\n\n'''",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n2 2 2\\n') == '1'\n\nprint(solution(stdin.read()))",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n2 2 2\") == \"1\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\") == \"1\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 2\\n3 3\") == \"1\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n2 2 2') == '1'\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 1\") == \"2\"\nassert solution(\"5 1\") == \"1\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n2 2 2') == '1'\n\n-----\n1 2 3 4\n----\n\n5 1\n2 2 2 2 2\n\n-----\n3\n5\n1 2 3 4 5\n\n2 1\n2 2\n\n-----\n3\n4\n1 2 3 4\n\n1 2 3\n2 3\n3 4\n\n0\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\nassert solution('0 0 0\\n1 0 1\\n1 0 1') == 'No'\n\n\"\"\"\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\nassert solution('1 0 1\\n2 1 2\\n1 0 1') == 'No'\n\"\"\"\n\nimport sys",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\nassert solution('3 0 1\\n2 1 2\\n1 0 1') == 'No'",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"1 0 1\\n2 2 1\\n1 0 1\") == \"No\"\n\n'''",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'No'\nassert solution('a') == 'No'\nassert solution('0 0 0') == 'Yes'\nassert solution('1 0 1') == 'Yes'\nassert solution('2 1 2') == 'Yes'\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\"\"\"\n\nimport ast\n\nclass Solution:\n    def __init__(self, c1, c2, c3):\n        self.c1 = ast.literal_eval(c1)\n        self.c2 = ast.literal_eval(c2)\n        self.c3 = ast.literal_eval(c3)\n\n    def solution(self) -> str:\n        a = [self.c1, self.c2, self.c3]\n        b = []\n\n        for i in range(3):\n            l = []\n            for j in range(3):\n                l.append(a[i][j] + a[i][j+1] + a[i][j+2] + a[i+1][j] + a[i+1][j+1] + a[i+1][j+2] + a[i+2][j] + a[i+2][j+1] + a[i+2][j+2])\n            b.append(l)\n\n        if b[0][0] == b[0][1] == b[0][2] == b[1][0] == b[1][1] == b[1][2] == b[2][0] == b[2][1] == b[2][2]:\n            return \"Yes\"\n        if b[0][0] == b[0][1] == b[0][2] == b[1][0] == b[1][1] == b[1][2] == b[2][0] == b[2][1] == b[2][2]:\n            return \"Yes\"\n        if b[0][0] == b[1][0] == b[2][0] == b[0][1] == b[1][1] == b[2][1] == b[0][2] == b[1][2] == b[2][2]:\n            return \"Yes\"\n        if b[0][0] == b[1][0] == b[2][0] == b[0][1] == b[1][1] == b[2][1] == b[0][2] == b[1][2] == b[2][2]:\n            return \"Yes\"\n        if b[0][0] == b[1][1] == b[2][2] == b[0][2] == b[1][2] == b[2][2] == b[0][1] == b[1][1] == b[2][0]:\n            return \"Yes\"\n        else:\n            return \"No\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\nassert solution('1 0 1\\n2 1 2\\n1 0 1') == 'No'\n\"\"\"\n\nfrom collections import namedtuple\nfrom itertools import chain\nfrom operator import add, sub\n\nGrid = namedtuple(\"Grid\", [\"row_one\", \"row_two\", \"row_three\"])",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\"\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ARC\") == \"ABC\"\nassert solution(\"ABC\") == \"ARC\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin=\"ABC\") == \"ARC\"\n\n------Problem------\nAtCoder Inc. holds a contest every Saturday.\nThere are two types of contests called ABC and ARC, and just one of them is held at a time.\nThe company holds these two types of contests alternately: an ARC follows an ABC and vice versa.\nGiven a string S representing the type of the contest held last week, print the string representing the type of the contest held this week.\n\n-----Constraints-----\n - S is ABC or ARC.\n\n-----Input-----\nABC\n\n-----Output-----\nARC\n\nThey held an ABC last week, so they will hold an ARC this week.\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\nprint(\"PASS\")\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ARC') == 'ABC'\nassert solution('ABC') == 'ARC'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"\n\na, b, x = map(int, stdin.readline().strip().split())\ncount = 0\nfor num in range(a, b + 1):\n    if num % x == 0:\n        count += 1\nprint(count)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"\n\na, b, x = (int(i) for i in stdin.split())\nprint(sum(((i >= a and i <= b) and (i % x == 0)) for i in range(a, b + 1)))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 8 2') == '3'\n\"\"\"\n\na, b, x = list(map(int, input().split(' ')))\nprint(sum([1 for i in range(a, b + 1) if i % x == 0]))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 8 2') == '3'\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a\\n') == ''\nassert solution('1\\n') == ''\nassert solution('a\\nb\\n') == ''\nassert solution('1\\n1\\n') == ''\n",
        "num_ids_2": 18,
        "num_ids_4": 40
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8 2') == '3'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8 2') == '3'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 2\") == \"3\"\nassert solution(\"1 1 1\") == \"0\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8 2') == '3'\n\"\"\"\n\na, b, x = [int(i) for i in stdin.split()]\nprint(sum([i for i in range(a, b + 1) if i % x == 0]))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"\n\na, b, x = input().split()\na, b, x = int(a), int(b), int(x)\n\ncount = 0\nfor i in range(a, b + 1):\n    if i % x == 0:\n        count += 1\n\nprint(count)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n",
        "num_ids_2": 21,
        "num_ids_4": 46
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('25') == \"Christmas\"\nassert solution('24') == \"Christmas Eve\"\nassert solution('23') == \"Christmas Eve Eve\"\nassert solution('22') == \"Christmas Eve Eve Eve\"\n\n'''\n\nD = int(input())",
        "num_ids_2": 21,
        "num_ids_4": 46
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"25\") == \"Christmas\"\n\"\"\"\n\nD = input()",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('25') == 'Christmas'\n\"\"\"\n\nD = int(input())\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"25\") == \"Christmas\"\nassert solution(\"24\") == \"Christmas Eve\"\nassert solution(\"23\") == \"Christmas Eve Eve\"\nassert solution(\"22\") == \"Christmas Eve Eve Eve\"\n\n### How do we test if something is an integer? ###",
        "num_ids_2": 21,
        "num_ids_4": 46
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n",
        "num_ids_2": 21,
        "num_ids_4": 46
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('0') == ''\nassert solution('1') == ''\nassert solution('12') == ''\nassert solution('25') == 'Christmas'\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('test') == 'test'\n\nprint(solution(''))\nprint(solution('test'))\n'''\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n",
        "num_ids_2": 21,
        "num_ids_4": 46
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n\n-----\n",
        "num_ids_2": 21,
        "num_ids_4": 46
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\") == \"4\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n7') == '5\\n7'\n\nprint(solution('4\\n2\\n1\\n5\\n6'))\n\n---",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"8\") == \"4\"\nassert solution(\"1\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\nassert solution('7') == '4'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"7\") == \"4\"\nassert solution(\"8\") == \"4\"\nassert solution(\"9\") == \"5\"\nassert solution(\"10\") == \"5\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input) == output\n\n\"\"\"\n\nimport math",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == '2'\nassert solution(\"1\") == '1'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7') == '4'\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\") == \"4\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\"\"\"\nimport math\nimport sys\nfrom itertools import permutations",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(True) or str(False)\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 7 9 3') == 'Yes'\nassert solution('4 7 9 1') == 'No'\nassert solution('1 1 1 1') == 'Yes'\nassert solution('100 100 100 100') == 'No'\n\"\"\"\n\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\n-----TESTED WITH 0 ERRORS-----\n\n-----TESTING TOOL-----\nhttps://www.codewars.com/kata/54edbc7b10a2a7be50d0000c1/train/python\n\n'''",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''atcoder beginner contest''') == 'ABC'\nassert solution('''aTcoder bEnerC oNtEcHoR sEtCoRt''') == 'ABC'\nassert solution('''aTcoder bEnerC oNtEcHoR sEtCoRt''') == 'ABC'\nassert solution('''aTcoder bEnerC oNtEcHoR sEtCoRt''') == 'ABC'\nassert solution('''aTcoder bEnerC oNtEcHoR sEtCoRt''') == 'ABC'\n",
        "num_ids_2": 49,
        "num_ids_4": 113
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''atcoder beginner contest''') == 'ABC'\n'''\n\n\n'''\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\nprint(\"Correct!\")\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == 'Yes'\nassert solution('50 100 120') == 'No'\nassert solution('50 100 400') == 'Yes'\nassert solution('50 100 100') == 'No'\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\"\"\"\n\na, b, c = input().split()\n\na = int(a)\nb = int(b)\nc = int(c)\n\na = a*c\nb = b*c",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"110 230 50\") == \"No\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('50 100 120') == 'Yes'\nassert solution('50 100 130') == 'No'\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('50 100 120') == 'Yes'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100 50 120') == 'Yes'\nassert solution('100 50 100') == 'No'\nassert solution('1 2 3') == 'No'\nassert solution('1 10 100') == 'No'\nassert solution('1 10 10') == 'No'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\u201850 100 120\\\u2019) == \u2018Yes\\\u2019\nassert solution(\u201850 100 70\\\u2019) == \u2018No\\\u2019\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('50 100 120') == 'Yes'\nassert solution('200 200 200') == 'No'\nassert solution('100 200 200') == 'No'\nassert solution('0 100 200') == 'No'\nassert solution('200 100 200') == 'No'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\n\"\"\"\n\nimport ast",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"50 100 10\") == \"No\"\n\"\"\"\n\nimport sys\n\nA, B, C = list(map(int, sys.stdin.readline().split()))",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\nprint(solution(\"4 8\\n7 9 8 9\"))\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('\\n\\n') == ''\nassert solution('5\\n1\\n3\\n7\\n9\\n') == '5'\n\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 52
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == '5'\nassert solution(\"3 9\\n1 2 3\") == '0'\nassert solution(\"6 14\\n1 1 1 1 1 1 1\") == '1'\nassert solution(\"5 9\\n1 2 3 4 5\") == '0'\nassert solution(\"2 10\\n1 1\") == '1'\n",
        "num_ids_2": 33,
        "num_ids_4": 71
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\n----\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(    \"4 8\\n7 9 8 9\") == \"5\"\n\"\"\"\n\nimport math\n\nn, a = [int(n) for n in input().split()]\narr = [int(x) for x in input().split()]\n\nl = 0\nr = 0\nsum_ = 0\ncount = 0\nwhile True:\n    if l == n:\n        break\n    sum_ = sum(arr[l:r])\n    count += math.ceil(sum_ / a)\n    r += 1\n    if r == n:\n        l += 1\n        r = l\n\nprint(count)\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\nprint('PASSED')\n\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\nassert solution(\"6 6\\n3 3 3 3 3 3 3 3\") == \"11\"\nassert solution(\"5 6\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4\") == \"8\"\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 65
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == '5'\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n4\n1 2 3 4\n\"\"\") == \"4 2 1 3\"\n\nassert solution(\n\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"5 4 3 2 1\"\n\nassert solution(\n\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"10 9 8 7 6 5 4 3 2 1\"\n\nassert solution(\n\"\"\"\n2\n1 2\n\"\"\") == \"2 1\"\n\nassert solution(\n\"\"\"\n0\n\"\"\") == \"0\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 2 3') == '4 2 1 3'\n\"\"\"\nimport sys\nimport unittest\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n\nassert solution(\"3\\n1 2 3\") == \"1 2 3\"\n\nassert solution(\"3\\n1 2\") == \"1 2\"\n",
        "num_ids_2": 36,
        "num_ids_4": 51
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\") == '4 2 1 3'\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2 3\") == '4 2 1 3'\nassert solution(\"3 4 5 2\") == '3 4 2 5'\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"4 2 1 3\"\n\n---",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3 4') == '4 2 1 3'\nassert solution('5\\n0 1 0 1 0') == '0 0 0 1 0 1'\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5 4 2 1 3\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"6 5 4 2 1 3\"\n",
        "num_ids_2": 40,
        "num_ids_4": 63
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 4') == '4 2 1 3'\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''10 3\n4 5 6''') == 'Yes'\nassert solution('''10 3\n4 5 6\n''') == 'No'\n'''",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 3\\n4 5 6') == 'Yes'\nassert solution('1 100\\n1 1') == 'Yes'\nassert solution('10 3\\n3 3 2') == 'No'\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 47
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 3\\n4 5 6\") == 'Yes'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 3\\n4 5 6') == 'Yes'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 3\\n4 5 6') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n5 6 7 8\") == \"Yes\"\nassert solution(\"4 2\\n1 2 3 4\\n5 6 7 8\") == \"No\"\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"\n\nimport sys\n\nH, N = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''10 3\n4 5 6''') == 'Yes'\nassert solution('''10 4\n3 2 1''') == 'Yes'\nassert solution('''10 5\n3 3 2 2''') == 'No'\nassert solution('''10 5\n1 1 1 1 1''') == 'No'\nassert solution('''10 3\n4 5 6''') == 'No'\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"baaaa\") == 2\nassert solution(\"ababab\") == 3\n\"\"\"\n\nS = str(input())\ns_len = len(S)\n\nlongest_even_string = ''\nlongest_even_string_len = 0\n\nfor i in range(s_len):\n    for j in range(i+1, s_len+1):\n        if j == s_len+1:\n            break\n        curr = S[i:j]\n        if len(curr) % 2 == 0:\n            if len(curr) > longest_even_string_len:\n                longest_even_string = curr\n                longest_even_string_len = len(curr)\n\nprint(longest_even_string_len)",
        "num_ids_2": 17,
        "num_ids_4": 27
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 0\nassert solution('aaaaaaa') == 7\nassert solution('aababab') == 4\nassert solution('ababab') == 3\nassert solution('aaaa') == 7\n",
        "num_ids_2": 17,
        "num_ids_4": 38
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abaababaab') == 6\nassert solution('abbbbaabb') == 9\n\nprint(solution(stdin))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abaababaab') == 6\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abaababaab') == 6\nassert solution('aaaaa') == 5\nassert solution('aabbcc') == 3\n\"\"\"\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abaababaab\") == 6\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abaababaab') == 6\nassert solution('abaababaaba') == 6\nassert solution('baab') == 2\n\n---Problem 6 (Hard)---\nFind the longest palindrome\nYou are given a string S.\nYour task is to find the longest palindromic substring in S.\n\n-----Input Format-----\nThe first and only line of input contains a string, S.\n\n-----Output Format-----\nPrint the longest palindromic substring in S.\n\n-----Sample Input-----\nracecar\n\n-----Sample Output-----\nracecar",
        "num_ids_2": 22,
        "num_ids_4": 31
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abaababaab') == 6\nassert solution('aaaaa') == 5\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abaababaab') == 6\nassert solution('aaaaa') == 5\nassert solution('abbbbbb') == 4\nassert solution('bb') == 1",
        "num_ids_2": 20,
        "num_ids_4": 38
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input) == output\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abc\") == \"Yes\"\nassert solution(\"bac\") == \"Yes\"\nassert solution(\"bca\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"abca\") == \"Yes\"\nassert solution(\"bcab\") == \"Yes\"\nassert solution(\"abcba\") == \"No\"\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abc') == 'Yes'\nassert solution('bac') == 'Yes'\nassert solution('abb') == 'No'\nassert solution('bca') == 'No'\n\"\"\"\n\nimport sys",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'No'\nassert solution('ab') == 'No'\nassert solution('abc') == 'Yes'\nassert solution('bac') == 'Yes'\nassert solution('acb') == 'Yes'\n\nimport itertools",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bac\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('abc') == 'No'",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abc\") == \"Yes\"\nassert solution(\"aba\") == \"No\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"acb\") == \"Yes\"\nassert solution(\"baa\") == \"No\"\n\"\"\"\nimport sys",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abc') == 'cba'\nassert solution('bac') == 'cba'\nassert solution('bca') == 'cba'\nassert solution('cab') == 'cba'\n\"\"\"\n\n\"\"\"\nHands On 1\nThe included code stub will read an integer,, from STDIN.\n\nWithout using any string methods, try to print the following:\n123...n\n\nNote that \"\" represents the consecutive values in between.\n\nExample\nn = 5\n\nPrint the string 12345.\n\nInput Format\n\nThe first line contains an integer.\n\nConstraints\n\nOutput Format\n\nPrint the list of integers from  through  as a string, without spaces.\n\nSample Input 0\n\n3\nSample Output 0\n\n123\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(s) == \"Yes\"\n\"\"\"\nimport itertools",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\\n\") == \"646\"\nassert solution(\"1\\n1000000\\n1000000\\n\") == \"757402647\"\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 3\\n4 2\") == \"20\"\nassert solution(\"1\\n1\\n1\") == \"0\"\nassert solution(\"3\\n1 1 1\") == \"0\"\nassert solution(\"4\\n1 1 2 3\") == \"18\"\nassert solution(\"1\\n10000000\\n10000000\") == \"0\"\n",
        "num_ids_2": 34,
        "num_ids_4": 65
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\n\nassert solution(\"1\\n1000000\\n1000000\") == \"757402647\"\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 5 7 2 9 4') == '20'\nassert solution('1 2 3 4 5 6 7 8 9') == '20'\nassert solution('1 4 2 3 5 6 7 8 9') == '20'\nassert solution('1 3 5 2 9 4 7 8 6') == '20'\nassert solution('1 3 5 7 2 9 4 6') == '20'\n",
        "num_ids_2": 34,
        "num_ids_4": 70
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nans = 10 ** 7\n\nfor i in range(n):\n    cur = 0\n    l = i\n    r = i\n    while l >= 0 and b[l] * b[i] < a[i] * b[r]:\n        cur += a[i] * b[l]\n        l -= 1\n        r += 1\n    l = i\n    r = i\n    while l >= 0 and b[l] * b[i] < a[i] * b[r]:\n        cur += a[i] * b[l]\n        l -= 1\n        r += 1\n    ans = min(ans, cur)\n\nprint(ans % 998244353)\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == 646\n\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\n\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\n\nassert solution(\"1000000\\n1000000\") == \"757402647\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '654321'\nassert solution('1 2 3 4 5 6') == '65432145'\nassert solution('1 2 3 4 5 6 7') == '6543211234567'\nassert solution('1 2 3 4 5 6 7 8') == '6543214512345678'\n",
        "num_ids_2": 24,
        "num_ids_4": 62
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5\") == \"12345\"\nassert solution(\"7 4 5 3 4\") == \"74324\"\nassert solution(\"2 7 9\") == \"217\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"12345\"\n",
        "num_ids_2": 31,
        "num_ids_4": 54
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\") == \"17\"\n",
        "num_ids_2": 64,
        "num_ids_4": 87
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 4 5\\n2 5 4 2 6 3 1\\n2 1') == '7'\nassert solution('9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7') == '17'\n\"\"\"\n",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\\n\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"\n\n\"\"\"\nimport sys\nimport functools",
        "num_ids_2": 80,
        "num_ids_4": 105
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"\n",
        "num_ids_2": 76,
        "num_ids_4": 101
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\\n') == '7'\nassert solution('9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n') == '17'\n\"\"\"",
        "num_ids_2": 80,
        "num_ids_4": 80
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\\n\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"\n\n\"\"\"",
        "num_ids_2": 80,
        "num_ids_4": 105
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"7 4 5\n2 5 4 2 6 3 1\n2 1\n6 5\n2 1\n3 1\"\"\") == '17'\nassert solution(\"\"\"9 4 8\n6 8 5 1 8 1 1 2 1\n9 2\n8 4\n5 3\n9 7\n\"\"\") == '17'\nassert solution(\"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == '17'\n\n\"\"\"\nimport sys\nfrom collections import Counter\n\nsys.stdin = open(\"input.txt\")\nsys.stdout = open(\"output.txt\", \"w\")",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"\n\n-----Explanation-----\n\nWe can make two purchases:\n\nIn the first purchase we buy shovels on positions $1$ and $4$ (both with costs $2$) and get one of them for free using the first or the third special offer.\nIn the second purchase we buy shovels on positions $3$ and $6$ (with costs $4$ and $3$) and get the second one for free using the first or the third special offer.\nIn the third purchase we buy shovels on positions $7$ (costs $1$) and so on.\n\nSo the total cost is $4 + 2 + 1 = 7$.\n\nIn the fourth purchase we buy four cheapest shovels without using any special offers and so the total cost is $17$.\n\"\"\"\n",
        "num_ids_2": 76,
        "num_ids_4": 101
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1') == '7'\nassert solution('9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7') == '17'\nassert solution('5 1 4\\n2 5 7 4 6\\n5 4\\n') == '17'\n",
        "num_ids_2": 76,
        "num_ids_4": 101
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == \"7\"\n\"\"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n5 7\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"0\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\") == \"1\"\nassert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\") == \"0\"\n",
        "num_ids_2": 68,
        "num_ids_4": 136
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n5 7\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"0\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"1\"\n\n\"\"\"\n\n\nclass Edge:\n    def __init__(self, u, v):\n        self.u = u\n        self.v = v\n\n    def __repr__(self):\n        return \"Edge({}, {})\".format(self.u, self.v)\n\n\nclass Graph:\n    def __init__(self, n):\n        self.n = n\n        self.edges = []\n\n    def add_edge(self, u, v):\n        self.edges.append(Edge(u, v))\n        self.edges.append(Edge(v, u))\n\n    def remove_edge(self, u, v):\n        for edge in self.edges:\n            if edge.u == u and edge.v == v:\n                self.edges.remove(edge)\n",
        "num_ids_2": 68,
        "num_ids_4": 102
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n') == '2'\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n') == '0'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n') == '1'\n\nprint(solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n'))",
        "num_ids_2": 72,
        "num_ids_4": 108
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n5 7\\n6 7\\n') == '2'\nassert solution('5\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n') == '0'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n') == '1'\nprint('The local tests are done. Click on \"Check\" for more details about input/output formats.')\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 76,
        "num_ids_4": 112
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n5 7\\n\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"0\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\") == \"1\"\n\nprint(solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\"))\n\"\"\"\n\n\nimport unittest\n",
        "num_ids_2": 72,
        "num_ids_4": 108
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n') == '2'\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n') == '0'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n') == '1'\n\n----\n\n\"\"\"\nimport sys\nimport math\nsys.stdin = open('input.txt', 'r')\nsys.stdout = open('output.txt', 'w')\nfrom collections import deque\n\n\"\"\"\n1. Use graph theory (BFS), \n2. Calculate min edge count\n3. Calculate max degree\n\n1. BFS\n2. Use max degree to get min edge count\n3. Use max degree to get min edge count\n\n\n1. Use graph theory,\n2. Use max degree to get min edge count\n3. Use max degree to get min edge count\n\"\"\"",
        "num_ids_2": 72,
        "num_ids_4": 108
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n1 3\") == '0'\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == '1'\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n2 4\\n3 5\\n4 6\\n5 7\\n6 7\\n7 7\\n\") == '2'\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\") == '0'\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == '1'\n\n\n\"\"\"\n\nfrom math import inf\nfrom collections import defaultdict\n\nclass Node:\n    def __init__(self, name):\n        self.name = name\n        self.left = None\n        self.right = None\n\n\nclass Tree:\n    def __init__(self, root):\n        self.root = root\n\n    def add_node(self, left, right):\n        node = Node(len(self.nodes))\n        self.nodes.append(node)\n        self.node_to_node[left].right = node\n        self.node_to_node[right].left = node\n",
        "num_ids_2": 80,
        "num_ids_4": 116
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"0\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"1\"",
        "num_ids_2": 72,
        "num_ids_4": 108
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n2 3\\n2 4\") == 2\nassert solution(\"1 2\\n2 3\\n2 4\\n3 5\\n3 6\") == 1\nassert solution(\"1 2\\n2 3\\n2 4\\n2 5\\n3 6\\n1 7\") == 0\nassert solution(\"1 2\\n2 3\\n2 4\\n2 5\\n2 6\\n3 7\\n1 7\") == 1\nassert solution(\"1 2\\n2 3\\n2 4\\n3 5\\n3 6\\n2 7\\n1 7\") == 1\n",
        "num_ids_2": 42,
        "num_ids_4": 104
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"3\"\nassert solution(\"3 7\") == \"10\"\nassert solution(\"4 12\") == \"15\"\nassert solution(\"2 1000000000\") == \"1999999999\"\nassert solution(\"7 97\") == \"113\"\n",
        "num_ids_2": 22,
        "num_ids_4": 47
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\n\"\"\"\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5 2\\n1 10') == '11'\nassert solution('2 1\\n1 10') == '2'\nassert solution('5 4\\n1 10') == '5'\nassert solution('5 4\\n3 7') == '10'\n",
        "num_ids_2": 23,
        "num_ids_4": 53
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\nprint(solution(stdin))\n\n=====\nprint(2 % 3)\nprint(3 % 3)\n\n=====\na = 10\nb = 20\nprint(a + b)\nprint(a - b)\nprint(a * b)\nprint(a / b)\nprint(a // b)\nprint(a % b)\nprint(a ** b)\n\n=====\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\n\nprint(solution(stdin))\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7\") == \"10\"\nassert solution(\"3 7\") == \"10\"\nassert solution(\"2 1000000000\") == \"1999999999\"\nassert solution(\"7 97\") == \"113\"\nassert solution(\"1 1000000000 1000000000\") == \"1000000001\"\n",
        "num_ids_2": 22,
        "num_ids_4": 47
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 7\\n2 1000000000') == '5'\nassert solution('2 1000000000') == '3'\nassert solution('7 97\\n1000000000 1000000000') == '2'\nassert solution('1000000000 1000000000') == '1'\nassert solution('2 1') == '1'\n\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 60
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1\\n\") == \"1\"\nassert solution(\"3\\n7\\n\") == \"10\"\nassert solution(\"3\\n8\\n\") == \"12\"\nassert solution(\"2\\n1000000000\\n\") == \"999999999\"\nassert solution(\"3\\n97\\n\") == \"113\"\n",
        "num_ids_2": 30,
        "num_ids_4": 64
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 7') == '10'\nassert solution('4 12') == '15'\nassert solution('2 1000000000') == '1999999999'\nassert solution('7 97') == '113'\nassert solution('1000000000 1000000000') == '1000000001'\n",
        "num_ids_2": 22,
        "num_ids_4": 47
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 7\") == \"10\"\nassert solution(\"4 12\") == \"15\"\nassert solution(\"2 1000000000\") == \"1999999999\"\nassert solution(\"7 97\") == \"113\"\nassert solution(\"1000000000 1000000000\") == \"1000000001\"\n",
        "num_ids_2": 22,
        "num_ids_4": 47
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''10 2\n1 2 3 2 1 3 2''') == '2 1 3 2'\nassert solution('''7 2\n1 2 3 2 1 3 2''') == '2 1 3 2'\nassert solution('''10 4\n2 3 3 1 1 2 1 2 3 3''') == '3 1 3 2'\n\n\"\"\"\n\nimport collections",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2') == '2'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3') == '3'\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\"\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\n\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2\\n') == '2\\n2 1'\n\"\"\"\nimport sys\nimport collections\n\n_, k = map(int, sys.stdin.readline().split())\nids = list(map(int, sys.stdin.readline().split()))\n\nqueue = collections.deque()\nfor id in ids:\n    while queue and queue[-1] < id:\n        queue.pop()\n    queue.append(id)\n    if len(queue) > k:\n        queue.popleft()\nprint(len(queue))\nprint(*queue)\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2') == '2\\n2 1'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3') == '3\\n1 3 2'\n\n\"\"\"\n\nimport sys\n\n_stdin = sys.stdin\n\nsys.stdin = open(\"SWEA/inputs/4013_input.txt\")\n\nN, K = [int(i) for i in sys.stdin.readline().rstrip().split(' ')]\n\nconversations = []\n\nfor n in range(N):\n    conversations.append([int(i) for i in sys.stdin.readline().rstrip().split(' ')])\n\nfor n in range(N):\n    for m in range(K):\n        if conversations[n][m] not in conversations[:m]:\n            conversations[m] = conversations[n]\n            break\n    else:\n        conversations.pop()\n\nprint(len(conversations))\nfor conversation in conversations:\n    print(' '.join([str(i) for i in conversation]))\n\n\nsys.stdin = _stdin\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2\\n') == '2\\n2 1'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3\\n') == '3\\n1 3 2'\n\n\"\"\"\n\nfrom collections import deque\nimport string",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\") == \"263\"\n\"\"\"\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s) == e\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n') == '263'\nassert solution('3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n') == '200'\n",
        "num_ids_2": 144,
        "num_ids_4": 144
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n\"\"\"\n\nfrom math import floor\nfrom itertools import product",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100\n\"\"\"\n) == \"263\"\n\"\"\"\n\n\"\"\"\n\nn = int(stdin)\ncards = [\n    [int(stdin), 0, 0] for _ in range(n)\n]\ndp = [\n    [0 for _ in range(3)] for _ in range(n + 1)\n]\nfor i in range(1, n + 1):\n    k = cards[i - 1][0]\n    for j in range(1, 3):\n        for p in range(1, 3):\n            dp[i][j] = max(\n                dp[i][j],\n                dp[i - 1][p]\n                if i > 1\n                else 0\n            )\n        dp[i][j] += (cards[i - 1][1] + cards[i - 1][2]) * k\n\nprint(dp[n][2])",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == '263'\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"abacaba\"\n) == \"3\"\nassert solution(\n    \"dfcbbcfeeedbaea\"\n) == \"5\"\n\"\"\"\n\n\nfrom sys import stdin, stdout\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abacaba') == '3'\nassert solution('dfcbbcfeeedbaea') == '5'\n\n\"\"\"\nimport unittest\nfrom collections import Counter, defaultdict\nimport itertools\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"5\"\n\"\"\"\n\n\n\ns = stdin\nq = int(stdin.readline())\n\nstring_length = len(s)\n\nfor i in range(q):\n    command = stdin.readline().split()\n\n    if command[0] == \"1\":\n        s = s[:int(command[1])] + command[2] + s[int(command[1]) + 1:]\n    else:\n        substring_length = int(command[1]) - int(command[2]) + 1\n        num_distinct_chars = {}\n\n        for i in range(substring_length):\n            char = s[int(command[1]) + i]\n            if char in num_distinct_chars:\n                num_distinct_chars[char] += 1\n            else:\n                num_distinct_chars[char] = 1\n\n        print(len(num_distinct_chars))\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abacaba') == '3'\nassert solution('dfcbbcfeeedbaea') == '5'\n\n\"\"\"\n\nimport sys\nimport os\nfrom io import StringIO\n\nsys.setrecursionlimit(1000000)\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"5\"\nassert solution(\"abc\") == \"3\"\nassert solution(\"ab\") == \"2\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List, Tuple, DefaultDict, Dict\n\nclass Solution:\n    def __init__(self, s: str):\n        self.s = s\n        self.res = defaultdict(int)\n        self.cache = {}\n        self.populate_cache()\n        self.max_length = 0\n\n    def populate_cache(self) -> None:\n        for i, c in enumerate(self.s):\n            self.cache[c] = i\n\n    def get_max_length(self) -> int:\n        max_length = 0\n        for key in self.cache:\n            if self.cache[key] > max_length:\n                max_length = self.cache[key]\n        self.max_length = max_length\n        return max_length\n\n    def is_valid_position(self, pos: int) -> bool:\n        return 0 <= pos < self.max_length\n\n    def is_valid_length(self, l: int, r: int) -> bool:\n        return 1 <= l <= r <= self.max_length\n\n    def replace(self, pos: int, c: str) -> None:\n        if self.is_valid_position(pos):\n            # print(\"replace\", pos, c)\n            self.s = self.s[:pos] + c + self.s[pos + 1:]\n            self.res[c] = 1\n            return\n\n    def count_distinct(self, l: int, r: int) -> int:\n        # print(\"count\", l, r)\n        res = 0\n        for key in self.cache:\n            if self.is_valid_length(l, r) and self.cache[key] >= l and self.cache[key] <= r:\n                res += 1\n        return res",
        "num_ids_2": 29,
        "num_ids_4": 49
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('codeforces') == 'cocdfeo'\nassert solution('abcdefg') == 'aabbccddeeffgg'\nassert solution('abacaba') == 'abacab'\n\"\"\"",
        "num_ids_2": 35,
        "num_ids_4": 49
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"coder\"\nassert solution(\"abacaba\") == \"b\"\nassert solution(\"dfcbbcfeeedbaea\") == \"d\"\n\n\"\"\"\n\n\"\"\"\ns = stdin\nn = len(s)\nq = int(stdin)\nl = []\nfor _ in range(q):\n    l.append(stdin.split())\n\nfor i in range(q):\n    if l[i][0] == '1':\n        s = s[:int(l[i][1])-1] + l[i][2] + s[int(l[i][1]):]\n    else:\n        print(len(set(s[int(l[i][1])-1:int(l[i][2])])))\n\"\"\"\n\ns = \"codeforces\"\nn = len(s)\nq = int(input())\nl = []\nfor _ in range(q):\n    l.append(input().split())\n\nfor i in range(q):\n    if l[i][0] == '1':\n        s = s[:int(l[i][1])-1] + l[i][2] + s[int(l[i][1]):]\n    else:\n        print(len(set(s[int(l[i][1])-1:int(l[i][2])])))\n",
        "num_ids_2": 26,
        "num_ids_4": 43
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('codeforces') == 'cosefc', 'codeforces'\nassert solution('abacaba') == 'bacab', 'abacaba'\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"coder\"\nassert solution(\"abacaba\") == \"a\"\nassert solution(\"dfcbbcfeeedbaea\") == \"1f2\"\n",
        "num_ids_2": 26,
        "num_ids_4": 45
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abacaba') == '3'\nassert solution('dfcbbcfeeedbaea') == '5'\nassert solution('codeforces') == '5'\nassert solution('abc') == '3'\nassert solution('aaaaa') == '5'\n",
        "num_ids_2": 29,
        "num_ids_4": 52
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\n",
        "num_ids_2": 113,
        "num_ids_4": 113
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\\n\"\nprint(solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n\"))\nassert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\\n\"\nprint(solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n\"))\nassert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\\n\"\nassert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\\n\"\n\nInput\n2\n867345123\n775859272\n344675674\n874615754\n895387870\n912387064\n212765986\n547692981\n\nOutput\n867345123\n777585927\n34467567\n874615754\n895538782\n912387064\n212765986\n547692981\n\"\"\"",
        "num_ids_2": 234,
        "num_ids_4": 468
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563''') == '''154873396\n336592714\n729645835\n863725145\n979314628\n412958357\n631457992\n998236471\n247789563'''\n\n'''\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563''') == '''154873396\n336592714\n729645835\n863725145\n979314628\n412958357\n631457992\n998236471\n247789563'''\n\nassert solution('''412968357\n631457982\n598236471\n247189563\n863725149\n975314628\n412968357\n729641835\n386592714\n154873396''') == '''412968357\n631457982\n598236471\n247789563\n863725145\n975314628\n412958357\n729641835\n336592714\n154873396'''\n\n'''\n957329\n82473\n64515\n93846\n93533\n57314\n27990\n117843\n127908\n42022\n\n489730\n98625\n29918\n73438\n7567\n584629\n86931\n84938\n3988\n73438\n'''\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563') == '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\nassert solution('154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n9') == '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\n\n-----Test 1-----\n\nInput\n2\n154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\n5\n135836704\n173373160\n224729392\n609342385\n253571295\n596585710\n487380609\n67942567\n865178718\n9\n3\n7\n8\n1\n4\n6\n2\n5\n\nOutput\n386592714\n729641835\n865178718\n9\n3\n7\n6\n1\n4\n5\n2\n5\n6\n8\n7\n\n-----Test 2-----\n\nInput\n3\n154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\n1\n135836704\n173373160\n224729392\n609342385\n253571295\n596585710\n487380609\n67942567\n865178718\n9\n3\n7\n8\n1\n4\n6\n2\n5\n\nOutput\n154873296\n386592714\n865178718\n9\n3\n7\n6\n1\n4\n5\n2\n5\n6\n8\n7\n\n-----Test 3-----\n\nInput\n1\n1234\n5678\n9012\n3456\n7890\n12345\n6789\n12345\n5678\n1234\n\nOutput\n1234\n5678\n3456\n7890\n12345\n6789\n12345\n5678\n1234\n\n-----Test 4-----\n\nInput\n3\n4\n2\n5\n1\n3\n6\n4\n7\n\nOutput\n4\n2\n5\n1\n3\n6\n4\n7\n\n-----Test 5-----\n\nInput\n4\n9\n8\n1\n6\n3\n7\n2\n4\n5\n\nOutput\n9\n8\n1\n6\n3\n7\n2\n4\n5\n\n-----Test 6-----\n\nInput\n1\n4\n2\n5\n1\n3\n6\n7\n9\n\nOutput\n4\n2\n5\n1\n3\n6\n7\n9\n\n-----Test 7-----\n\nInput\n4\n6\n8\n9\n1\n5\n3\n2\n7\n\nOutput\n6\n8\n9\n1\n5\n3\n2\n7\n\n-----Test 8-----\n\nInput\n7\n3\n9\n4\n8\n2\n6\n1\n5\n\nOutput\n3\n9\n4\n8\n2\n6\n1\n5\n\n-----Test 9-----\n\nInput\n2\n9\n5\n7\n4\n3\n8\n1\n2\n6\n\nOutput\n9\n5\n7\n4\n3\n8\n1\n2\n6\n\n-----Test 10-----\n\nInput\n8\n9\n7\n3\n1\n6\n5\n4\n2\n\nOutput\n9\n7\n3\n1\n6\n5\n4\n2\n\n-----Test 11-----\n\nInput\n2\n6\n1\n3\n8\n9\n5\n2\n4\n\nOutput\n6\n1\n3\n8\n9\n5\n2\n4\n\n-----Test 12-----\n\nInput\n5\n1\n9\n6\n7\n3\n2\n8\n4\n5\n\nOutput\n1\n9\n6\n7\n3\n2\n8\n4\n5\n\n-----Test 13-----\n\nInput\n1\n7\n3\n9\n2\n8\n4\n6\n5\n\nOutput\n7\n3\n9\n2\n8\n4\n6\n5\n\n-----Test 14-----\n\nInput\n4\n6\n3\n2\n1\n5\n7\n9\n8\n\nOutput\n6\n3\n2\n1\n5\n7\n9\n8\n\n-----Test 15-----\n\nInput\n7\n8\n2\n1\n3\n6\n5\n4\n9\n\nOutput\n8\n2\n1\n3\n6\n5\n4\n9\n\n-----Test 16-----\n\nInput\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\nOutput\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n-----Test 17-----\n\nInput\n5\n8\n6\n3\n7\n9\n4\n2\n1\n\nOutput\n8\n6\n3\n7\n9\n4\n2\n1\n\n-----Test 18-----\n\nInput\n9\n3\n7\n5\n1\n6\n2\n8\n4\n0\n\nOutput\n9\n3\n7\n5\n1\n6\n2\n8\n4\n0\n\n-----Test 19-----\n\nInput\n6\n2\n8\n1\n9\n5\n4\n3\n7\n\nOutput\n2\n8\n1\n9\n5\n4\n3\n7\n\n-----Test 20-----\n\nInput\n4\n6\n3\n5\n7\n8\n9\n2\n1\n\nOutput\n6\n3\n5\n7\n8\n9\n2\n1\n\n-----Test 21-----\n\nInput\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\nOutput\n8\n7\n6\n5\n4\n3\n2\n1\n\n-----Test 22-----\n\nInput\n2\n9\n5\n7\n3\n8\n1\n6\n4\n\nOutput\n9\n5\n7\n3\n8\n1\n6\n4\n\n-----Test",
        "num_ids_2": 229,
        "num_ids_4": 229
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open(0).read()) == open(1).read()\nprint('Ok!')\n\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '154873296\\n'\n    '386592714\\n'\n    '729641835\\n'\n    '863725149\\n'\n    '975314628\\n'\n    '412968357\\n'\n    '631457982\\n'\n    '598236471\\n'\n    '247189563\\n') == '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\\n'\n\nprint('The local tests are done. Click on \"Check\" for more details.')\n\"\"\"\n\n\nimport sys\nfrom collections import Counter\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"154873296\") == \"154873396\"\nassert solution(\"386592714\") == \"336592714\"\nassert solution(\"729641835\") == \"729645835\"\nassert solution(\"863725149\") == \"863725145\"\nassert solution(\"975314628\") == \"979314628\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == correct_output_1\n\n-----Constraints-----\n\n1 <= t <= 10^4\n\nIt is guaranteed that the answer exists.\n\nEach test case consists of at most 9 lines, each line consists of 9 characters from 1 to 9 without any whitespaces.\n\n-----Solution-----\n\n\n\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563') == \\\n    '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\nassert solution('154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563') == \\\n    '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\nassert solution('154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563') == \\\n    '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\nassert solution('154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563') == \\\n    '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\nassert solution('154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563') == \\\n    '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\n",
        "num_ids_2": 120,
        "num_ids_4": 240
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n2 4\") == \"5\"\nassert solution(\"6 3\\n1 2\\n2 3\\n2 4\\n5 6\") == \"8\"\n\"\"\"\n\nfrom collections import defaultdict\nimport unittest",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 2\\n1 3\\n2 4') == '3'\n\n\"\"\"\n\nn, q = (int(x) for x in stdin.split())\nd = {1: 1}\nc = {1: 1}\n\nfor _ in range(n - 1):\n    d[int(stdin.split()[1])] = int(stdin.split()[2])\n    c[int(stdin.split()[2])] = c.get(int(stdin.split()[2]), 0) + 1\n    for i in c:\n        c[i] = min(c[i], d[i])\n\nfor _ in range(q):\n    print(c[int(stdin.split()[1])])\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 6\\\\n1 1 1 3 5 3 5 7\\\\n3 1\\\\n1 5\\\\n3 4\\\\n7 3\\\\n1 8\\\\n1 9\\\\n\") == \"3\\\\n6\\\\n8\\\\n-1\\\\n9\\\\n4\\\\n\"\n\"\"\"",
        "num_ids_2": 65,
        "num_ids_4": 65
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9') == '3\\n6\\n8\\n-1\\n9\\n4'\nassert solution('9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9') == '3\\n6\\n8\\n-1\\n9\\n4'",
        "num_ids_2": 122,
        "num_ids_4": 122
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 3\\n2 4\") == \"3\\n2\\n1\"\nassert solution(\"6 5\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == \"3\\n2\\n1\\n6\\n3\\n1\"\nassert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == \"3\\n2\\n1\\n6\\n3\\n1\\n9\\n5\"\n",
        "num_ids_2": 85,
        "num_ids_4": 151
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 3\\n1 2\\n2 3\") == \"2\"\nassert solution(\"4 2\\n1 3\\n1 2\\n2 3\") == \"2\"\nassert solution(\"3 2\\n1 3\\n1 2\\n2 3\") == \"2\"\nassert solution(\"3 2\\n1 3\\n1 2\\n2 3\") == \"2\"\nassert solution(\"3 2\\n1 3\\n1 2\\n2 3\") == \"2\"\n",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9') == '3\\n6\\n8\\n-1\\n9\\n4'\n",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 1\\n1 3\\n1 2\\n3 1\\n3 3\\n3 4\\n4 2\\n5 1\\n5 2\\n5 4\\n\") == \"5\\n3\\n5\\n4\\n4\\n\"\n",
        "num_ids_2": 67,
        "num_ids_4": 67
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 3 5 3 5 7\") == \"3\"\n\"\"\"\n\nimport sys\nimport math\n\nINPUT_LINES = sys.stdin.read().splitlines()\nn, q = map(int, INPUT_LINES[0].split())\n\nparents = list(map(int, INPUT_LINES[1].split()))",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2\\n1 5 3\\n2 5\\n3\\n4\\n3\\n4\\n5\\n6') == '2\\n-1\\n3\\n5\\n6\\n6\\n6'\nassert solution('5 2\\n1 5 3\\n2 5\\n3\\n4\\n3\\n4\\n5\\n6') == '2\\n-1\\n3\\n5\\n6\\n6\\n6'\nassert solution('5 2\\n1 5 3\\n2 5\\n3\\n4\\n3\\n4\\n5\\n6') == '2\\n-1\\n3\\n5\\n6\\n6\\n6'\nassert solution('5 3\\n1 5 3\\n2 5\\n3\\n4\\n3\\n4\\n5\\n6') == '2\\n-1\\n3\\n5\\n6\\n6\\n6'\nassert solution('5 3\\n1 5 3\\n2 5\\n3\\n4\\n3\\n4\\n5\\n6') == '2\\n-1\\n3\\n5\\n6\\n6\\n6'\n\nprint(solution('5 2\\n1 5 3\\n2 5\\n3\\n4\\n3\\n4\\n5\\n6'))\nprint(solution('5 2\\n1 5 3\\n2 5\\n3\\n4\\n3\\n4\\n5\\n6'))\nprint(solution('5 2\\n1 5 3\\n2 5\\n3\\n4\\n3\\n4\\n5\\n6'))\n",
        "num_ids_2": 114,
        "num_ids_4": 228
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n3 2 1 8''') == 'YES'\n\"\"\"\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == \"YES\\nYES\\nNO\\nNO\\nYES\\n\"\nassert solution(test_input_2) == \"NO\\nYES\\n\"\nassert solution(test_input_3) == \"YES\\nYES\\nYES\\n\"\nassert solution(test_input_4) == \"YES\\nYES\\nYES\\n\"\nassert solution(test_input_5) == \"YES\\nYES\\nYES\\n\"\n\"\"\"",
        "num_ids_2": 47,
        "num_ids_4": 91
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\\nYES\\nNO\\nNO\\nYES\"\n\n\"\"\"\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2 1\") == \"YES\"\nassert solution(\"5 3 2 8\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"YES\"\nassert solution(\"3 2 1 100000000\") == \"NO\"\nassert solution(\"10 20 15 14\") == \"YES\"\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2 8\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"YES\"\nassert solution(\"3 2 1 100000000\") == \"NO\"\nassert solution(\"10 20 15 14\") == \"YES\"\nassert solution(\"101 101 101 3\") == \"YES\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\\n\") == \"YES\"\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == 'YES'\n\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3') == 'YES'\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2 8\") == 'YES'\nassert solution(\"100 101 102 105\") == 'YES'\nassert solution(\"3 2 1 100000000\") == 'NO'\nassert solution(\"10 20 15 14\") == 'YES'\nassert solution(\"101 101 101 3\") == 'NO'\nprint(solution(input()))\n\"\"\"\nimport sys\n\nfor _ in range(int(sys.stdin.readline().strip())):\n    a, b, c, n = map(int, sys.stdin.readline().strip().split())\n    if (a + b + c) - n == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n1 2 3 4') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5') == '9 8 12 6 8'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\n\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def solution(self, stdin):\n        n, m = [int(i) for i in stdin.readline().split()]\n        x = [int(i) for i in stdin.readline().split()]\n\n        pos = {}\n        def pos_of_val(val, p):\n            return pos[p][val] if val in pos[p] else pos[p][val] = p.index(val)\n\n        for i, v in enumerate(x):\n            if v in pos:\n                continue\n            pos[v] = {v:i}\n            pos[v][1] = i+1\n            for j in range(i+2, n+1):\n                pos[v][j] = j\n            pos[v][j+1] = i\n\n        def f(p):\n            res = 0\n            for i in range(1, m):\n                res += abs(pos_of_val(x[i], p) - pos_of_val(x[i + 1], p))\n            return res\n        print(*map(f, [p1, p2, p3, p4]), sep='\\n')\n\n    def solution_wrong(self, stdin):\n        n, m = [int(i) for i in stdin.readline().split()]\n        x = [int(i) for i in stdin.readline().split()]\n        perm = {i: x[i] for i in range(n)}\n        first = {i: i for i in range(n)}\n\n        for i in range(n):\n            perm[i] = i + 1\n\n        def f(p):\n            res = 0\n            for i in range(1, m):\n                res += abs(p[x[i]] - p[x[i + 1]])\n            return res\n        print(*map(f, [perm, p1, p2, p3, p4]), sep='\\n')\n",
        "num_ids_2": 42,
        "num_ids_4": 66
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\n",
        "num_ids_2": 42,
        "num_ids_4": 88
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"3 4 6 5\"\nassert solution(\"5 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\") == \"3 3\"\n",
        "num_ids_2": 29,
        "num_ids_4": 41
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == [3, 4, 6, 5]\nassert solution(\"5 5\\n2 1 5 3 5\") == [9, 8, 12, 6, 8]\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == [3, 3]\n",
        "num_ids_2": 49,
        "num_ids_4": 74
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\n",
        "num_ids_2": 42,
        "num_ids_4": 66
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n1 2 3 4') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5') == '9 8 12 6 8'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\n\"\"\"\n\n\nfrom typing import List, Tuple",
        "num_ids_2": 42,
        "num_ids_4": 66
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"3 4 6 5\"\nassert solution(\"5 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\") == \"3 3\"",
        "num_ids_2": 29,
        "num_ids_4": 41
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"3 4 6 5\"\nassert solution(\"5 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\") == \"3 3\"\n\n\n\n'''\nfrom collections import deque\n",
        "num_ids_2": 29,
        "num_ids_4": 41
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"",
        "num_ids_2": 42,
        "num_ids_4": 66
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\n",
        "num_ids_2": 42,
        "num_ids_4": 66
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(output())\n\n\n\n-----Interviewer's test cases-----\n\nInput:\n3 3\n1 2\n1 3\n2 3\nOutput:\nNO\nYES\nYES\n\nInput:\n3 3\n1 2\n2 3\n3 3\nOutput:\nYES\nYES\nNO\n\nInput:\n4 4\n1 2\n1 3\n2 3\n2 4\nOutput:\nNO\nYES\nNO\nNO\n\nInput:\n4 4\n1 2\n1 3\n3 4\n2 3\nOutput:\nYES\nYES\nNO\nYES\n\nInput:\n5 5\n1 2\n1 3\n1 4\n2 5\n2 4\nOutput:\nYES\nYES\nNO\nNO\nNO\n\nInput:\n6 6\n1 2\n2 3\n3 4\n4 5\n5 6\n1 2\n3 4\n4 5\n5 6\nOutput:\nYES\nYES\nYES\nYES\nYES\nNO\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7''') == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open('data/07_test_1.txt').read()) == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nprint('Test 1 is OK\\n')\n\nassert solution(open('data/07_test_2.txt').read()) == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nprint('Test 2 is OK\\n')\n\nassert solution(open('data/07_test_3.txt').read()) == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nprint('Test 3 is OK\\n')\n\nassert solution(open('data/07_test_4.txt').read()) == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nprint('Test 4 is OK\\n')\n\nassert solution(open('data/07_test_5.txt').read()) == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nprint('Test 5 is OK\\n')",
        "num_ids_2": 74,
        "num_ids_4": 148
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2''') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n\"\"\"\nfrom collections import defaultdict\n\n\nclass Graph(object):\n    def __init__(self, n):\n        self.n = n\n        self.graph = defaultdict(list)\n\n    def addEdge(self, u, v):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n\n    def DFSUtil(self, v, visited):\n        visited.add(v)\n        print(v, end=\" \")\n\n        for i in self.graph[v]:\n            if i not in visited:\n                self.DFSUtil(i, visited)\n\n    def DFS(self, v):\n        visited = set()\n        self.DFSUtil(v, visited)\n",
        "num_ids_2": 100,
        "num_ids_4": 100
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n1 2\") == \"YES\\nYES\\nYES\\nYES\\nNO\"\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n",
        "num_ids_2": 87,
        "num_ids_4": 87
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 6\\n1 2\\n2 3\\n3 4\\n4 1\\n3 1\\n2 3\\n3 2\\n1 2\\n1 3\\n2 3\\n3 4\\n2 4\\n3 4\\n2 1\\n3 4\\n2 4\\n2 2\\n1 2\\n2 1\\n2 3\\n3 2\\n4 4\\n1 3\\n2 4\\n1 3\\n2 4\\n2 2\\n2 3\\n3 4\\n1 3\\n2 4\\n1 3\\n2 4\\n2 2\\n2 3\\n3 4\\n1 3\\n2 4\\n1 3\\n2 4\\n1 3\\n2 4\\n1 4\\n1 3\\n1 4\\n1 3\\n1 4\\n1 3\\n1 4\\n1 4') == 'NO'\nassert solution('4 6\\n1 2\\n2 3\\n3 4\\n4 1\\n3 1\\n2 3\\n3 2\\n1 2\\n1 3\\n2 3\\n3 4\\n2 4\\n3 4\\n2 1\\n3 4\\n2 4\\n2 2\\n1 2\\n2 1\\n2 3\\n3 2\\n4 4\\n1 3\\n2 4\\n1 3\\n2 4\\n2 2\\n2 3\\n3 4\\n1 3\\n2 4\\n1 3\\n2 4\\n1 3\\n2 4\\n1 3\\n1 4\\n1 3\\n1 4\\n1 3\\n1 4\\n1 4') == 'YES'\nassert solution('4 6\\n1 2\\n2 3\\n3 4\\n4 1\\n3 1\\n2 3\\n3 2\\n1 2\\n1 3\\n2 3\\n3 4\\n2 4\\n3 4\\n2 1\\n3 4\\n2 4\\n2 2\\n1 2\\n2 1\\n2 3\\n3 2\\n4 4\\n1 3\\n2 4\\n1 3\\n2 4\\n2 2\\n2 3\\n3 4\\n1 3\\n2 4\\n1 3\\n2 4\\n1 3\\n1 4\\n1 3\\n1 4\\n1 3\\n1 4\\n1 4') == 'YES'\nassert solution('4 6\\n1 2\\n2 3\\n3 4\\n4 1\\n3 1\\n2 3\\n3 2\\n1 2\\n1 3\\n2 3\\n3 4\\n2 4\\n3 4\\n2 1\\n3 4\\n2 4\\n2 2\\n1 2\\n2 1\\n2 3\\n3 2\\n4 4\\n1 3\\n2 4\\n1 3\\n2 4\\n2 2\\n2 3\\n3 4\\n1 3\\n2 4\\n1 3\\n2 4\\n1 3\\n1 4\\n1 3\\n1 4\\n1 3\\n1 4\\n1 4') == 'NO'\nassert solution('4 6\\n1 2\\n2 3\\n3 4\\n4 1\\n3 1\\n2 3\\n3 2\\n1 2\\n1 3\\n2 3\\n3 4\\n2 4\\n3 4\\n2 1\\n3 4\\n2 4\\n2 2\\n1 2\\n2 1\\n2 3\\n3 2\\n4 4\\n1 3\\n2 4\\n1 3\\n2 4\\n2 2\\n2 3\\n3 4\\n1 3\\n2 4\\n1 3\\n2 4\\n1 3\\n1 4\\n1 3\\n1 4\\n1 4') == 'NO'\n",
        "num_ids_2": 390,
        "num_ids_4": 732
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"YES\"\nassert solution(\"7 7\") == \"YES\"\nassert solution(\"1 1\") == \"NO\"\nassert solution(\"2 3 4 5 6\") == \"YES\"\nassert solution(\"1 2 3 4 5 6\") == \"NO\"\n",
        "num_ids_2": 22,
        "num_ids_4": 47
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2') == ''\nassert solution('1 2\\n1 3') == ''\nassert solution('1 2\\n1 3\\n1 4') == ''\nassert solution('2 5\\n2 6') == ''\n",
        "num_ids_2": 17,
        "num_ids_4": 47
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input) == expected_output\n\n\n-----Problem Description-----\n\nFor each test case, print:\n\n  NO on the only line if it is impossible to connect all districts satisfying the conditions from the problem statement.  YES on the first line and $n-1$ roads on the next $n-1$ lines. Each road should be presented as a pair of integers $x_i$ and $y_i$ ($1 \\le x_i, y_i \\le n; x_i \\ne y_i$), where $x_i$ and $y_i$ are two districts the $i$-th road connects. \n\nFor each road $i$, the condition $a[x_i] \\ne a[y_i]$ should be satisfied. Also, all districts should be reachable from each other (possibly, using intermediate districts).\n\nYou have to build $n-1$ two-way roads to connect all districts (two districts can be connected directly or through other connected districts).\n\nIt is guaranteed that there is at least one possible way to build $n-1$ roads to satisfy all the conditions.\n\nNote: It is also guaranteed that at least one valid road can be built, so the output is not \"NO\" unless there is no valid road at all.\n\n-----Constraints-----\n\n1 <= t <= 500\n2 <= n <= 5000\n1 <= a_i <= 10^9\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2'\nassert solution('1\\n1') == 'YES\\n1 1'",
        "num_ids_2": 79,
        "num_ids_4": 79
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == 'YES\\n1 3\\n3 5\\n5 4\\n1 2'\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == 'NO'\nassert solution(\"2\\n2\\n1 1\\n1 1\\n1 1\") == 'YES'\nassert solution(\"2\\n2\\n1 1\\n2 2\\n1 1\") == 'NO'\n\"\"\"\n\nimport sys",
        "num_ids_2": 108,
        "num_ids_4": 158
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\\nYES\\n1 2\\n1 3\\n1 4\\n\"\n\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 84,
        "num_ids_4": 84
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n5\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n''') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\n\nassert solution('''\n3\n3\n1 1 1\n3\n1 1 1\n3\n1 1000 101 1000\n3\n1 1000 101 1000\n1 2\n''') == 'YES\\n1 2\\n1 3\\nYES'\n\nassert solution('''\n4\n2\n1 2\n3 4\n4\n1 2\n2 3\n3 4\n''') == 'NO'\n\nassert solution('''\n3\n4\n1 1000 101 1000\n4\n1 2 3 4\n''') == 'NO'\n\nassert solution('''\n2\n4\n1 2\n1 3\n1 4\n4\n1 1000 101 1000\n4\n1 2 3 4\n''') == 'YES\\n1 2\\n1 3\\n1 4\\nYES'",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n3\\n1 2 2 1 3\\n4\\n1 1000 101 1000') == 'YES\\n1 3\\n3 5\\n5 4'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\"\nprint(solution(\"3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\"))\nassert solution(\"2\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\nNO\"\n",
        "num_ids_2": 128,
        "num_ids_4": 128
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\"\n\"\"\"\n\nimport sys\n\n_, t = map(int, sys.stdin.readline().split())\nfor _ in range(t):\n    n, *a = map(int, sys.stdin.readline().split())\n    r = [set() for _ in range(n)]\n    for i in range(n-1):\n        if a[i] == a[i+1]:\n            r[i].add(a[i+1])\n        else:\n            r[i].add(a[i])\n            r[i+1].add(a[i+1])\n    bad = True\n    for rr in r:\n        if len(rr)!= n - 1:\n            bad = False\n            break\n    if bad:\n        print(\"YES\")\n        for i, rr in enumerate(r):\n            if len(rr)!= 1:\n                print(i+1, i+2)\n    else:\n        print(\"NO\")\n",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\n\"\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 2\\n1 3\\n1 4\\n\"\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 2\\n1 3\\n1 4\\n\"\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"NO\\n\"\n\"\"\"\n\n\nfrom collections import Counter\n",
        "num_ids_2": 128,
        "num_ids_4": 240
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 'YES\\n1\\n'\nassert solution('2\\n') == 'YES\\n1 2\\n'\nassert solution('3\\n') == 'YES\\n1 3\\n2 3\\n'\nassert solution('4\\n') == 'NO\\n'\n",
        "num_ids_2": 25,
        "num_ids_4": 65
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11101010\") == \"01111010\"\nassert solution(\"11111010\") == \"01111100\"\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11101110') == '0111111'\nassert solution('11101110') == '0111111'\nassert solution('11101110') == '0111111'\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11101010') == '010'\nassert solution('11111111') == '11111111'\nassert solution('11100110') == '11100110'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 38
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11011010') == '01111010'\nassert solution('7 9') == '1110111'\nassert solution('1111100') == '11100111'\nassert solution('7 11') == '11100110'\n\n'''\n\nn, k = map(int, input().split())\ns = input()",
        "num_ids_2": 29,
        "num_ids_4": 55
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(11101110) == \"0111111\"\n\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11101010\") == \"01111010\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input)) == str(output)\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11011010') == '011110'\nassert solution('7 9') == '11111'\nassert solution('1111100') == '0011111'\n",
        "num_ids_2": 27,
        "num_ids_4": 40
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected_output",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11011010\") == \"011110\"\nassert solution(\"11101010\") == \"011110\"\nassert solution(\"11111010\") == \"011111\"\nassert solution(\"111101010\") == \"0\"\nassert solution(\"11110111010\") == \"1\"\n",
        "num_ids_2": 29,
        "num_ids_4": 54
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9''') == '3\nassert solution('''5 1\n29 30\n30 30\n29 29\n28 30\n30 30''') == '3\nassert solution('''6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3''') == '4\n\n\"\"\"\n\nn, k = [int(x) for x in input().split()]\n\nsegments = [[int(x) for x in input().split()] for _ in range(n)]\n\nm = 0\n\nsegments.sort(key=lambda x: x[0])\n\nqueue = [segments[0]]\n\nfor i in range(1, n):\n    if queue[-1][1] >= segments[i][0]:\n        queue.append(segments[i])\n    else:\n        queue.pop()\n        queue.append(segments[i])\n        m += 1\n\nprint(m)\nprint(\" \".join([str(x) for x in range(m)]))\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n1 4 7\\n\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == \"3\\n1 2 4\\n\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 3 5 6\\n\"\n\nprint('Success')",
        "num_ids_2": 88,
        "num_ids_4": 133
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\"\"\") == '3\n1 4 7'\n\nassert solution(\"\"\"5 1\n29 30\n30 30\n29 29\n28 30\n30 30\"\"\") == '3\n1 2 4'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n1 4 7'\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\nassert solution('10\\n1 1\\n1 1\\n1 1') == '0'\n\nassert solution('10\\n1 1\\n1 1\\n1 1') == '1'\n\nassert solution('10\\n1 1\\n1 1\\n1 1') == '2'\n\nassert solution('10\\n1 1\\n1 1\\n1 1') == '0'",
        "num_ids_2": 30,
        "num_ids_4": 74
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(example_input) == example_output\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n1 4 7\"\n\nassert solution(\"29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == \"3\\n1 2 4\"\n\nassert solution(\"2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 2 4\"\n",
        "num_ids_2": 76,
        "num_ids_4": 114
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == \"3\\n1 4 7\"\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30') == \"3\\n1 2 4\"\nassert solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3') == \"4\\n1 3 5 6\"\n\n\"\"\"",
        "num_ids_2": 80,
        "num_ids_4": 121
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == '3\\n1 2 4'\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == '4\\n1 3 5 6'\nassert solution(\"7 1\\n8 9\\n7 8\\n9 11\\n7 8\\n9 11\\n7 9\") == '3\\n1 2 4'\nassert solution(\"7 5\\n1 1\\n2 2\\n3 3\\n4 5\\n5 5\") == '1\\n2 4'\nassert solution(\"7 5\\n1 1\\n2 2\\n3 3\\n4 5\\n5 5\") == '1\\n2 4'\n\"\"\"\n\n\nfrom collections import Counter\nimport sys",
        "num_ids_2": 77,
        "num_ids_4": 152
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == 3\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == 19\n\"\"\"\n\nn = int(input())\npoints = list(map(int, input().split()))\nspeeds = list(map(int, input().split()))\n\ndiff = [abs(points[i] - points[i - 1]) / speeds[i] for i in range(1, n)]\n\nprint(sum(diff))",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == 3\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == 19\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 3 2\\n-100 2 3\\n') == '3'\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 1 4 3 5\\n2 2 2 3 4') == '19'\n\nassert solution('3\\n1 3 2\\n-100 2 3') == '3'\n\nassert solution('2\\n2 1\\n-3 0') == '0'\n\nprint(solution(input()))\n",
        "num_ids_2": 45,
        "num_ids_4": 64
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == 3\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == 19\nassert solution(\"2\\n2 1\\n-3 0\") == 0\n\nprint(solution(input()))\n\n\"\"\"\n\nimport sys\n\nsys.stdin.readline()\n\nx = [int(n) for n in sys.stdin.readline().split()]\n\nsys.stdin.readline()\n\nv = [int(n) for n in sys.stdin.readline().split()]\n\nn = len(x)\n\nfrom functools import lru_cache\n\n@lru_cache(None)\n",
        "num_ids_2": 41,
        "num_ids_4": 58
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 3 2\\n-100 2 3\\n') == 3\nassert solution('5\\n2 1 4 3 5\\n2 2 2 3 4\\n') == 19\nassert solution('2\\n2 1\\n-3 0\\n') == 0\n",
        "num_ids_2": 45,
        "num_ids_4": 64
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1 4 3 5\\n2 2 2 3 4') == '19'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n1 1') == '0'\nassert solution('2 1\\n1 1') == '2'\nassert solution('2 2\\n1 1') == '0'\nassert solution('2 2\\n1 1') == '0'\nassert solution('2 2\\n1 1') == '0'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 3 2\\n-100 2 3\\n') == '3'\n\"\"\"\n\n\nimport sys",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 3 2\\n-100 2 3') == 3\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2 1\\n2 3 2\\n1 3 2\\n3 4 2\\n1 3 2\\n3 4 2\\n1 2 3\\n2 3 4\") == \"1 3 3\"\nassert solution(\"4 3\\n1 2 1\\n2 3 2\\n1 3 2\\n3 4 2\\n1 3 2\\n3 4 2\\n1 2 3\\n2 3 4\") == \"1 3 3\"\nassert solution(\"6 6\\n1 2 3\\n2 3 4\\n3 4 5\\n4 5 6\\n1 2 3\\n2 3 4\\n3 4 5\\n4 5 6\\n1 2 3\\n2 3 4\\n3 4 5\\n4 5 6\\n1 2 3\\n2 3 4\\n3 4 5\\n4 5 6\\n1 2 3\\n2 3 4\\n3 4 5\\n4 5 6\") == \"0 0\"\nassert solution(\"2 2\\n1 2 1\\n1 2 1\") == \"0 0\"",
        "num_ids_2": 106,
        "num_ids_4": 240
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1') == '21 7 15 21 3 '\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == '21 7 15 21 3'\nprint('Test pass.')",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == '21 7 15 21 3'\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\\n\") == \"21 7 15 21 3\"\nassert solution(\"1 2\\n1 2\\n\") == \"0 0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 2\\n\") == \"1 3 3\"\n\n-----\n\n\"\"\"\n",
        "num_ids_2": 72,
        "num_ids_4": 102
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 4\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 6 4\n3 6 2\n5 2 3 4 1\n3\n1 2\n3 2\n1 3\n\"\"\") == \"21 7 15 21 3\"\n",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\nassert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\nassert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\nassert solution(\"1 2\\n2 3\") == \"0 0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 2\") == \"1 3 3\"\n\n\n-----Solution-----\n\nimport sys",
        "num_ids_2": 104,
        "num_ids_4": 172
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3 \"\nassert solution(\"1 2\\n1 2\\n\") == \"0 0 \"\n\n\n-----Problem-----\n\u041c\u0438\u043d\u0438\u043c\u0443\u043c \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e nn. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 nn-e \u0447\u0438\u0441\u0435\u043b \u0424\u0438\u0431\u043e\u043d\u0430\u0447\u0447\u0438.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nn.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\nSample Input 1:\n\n7\n\nSample Output 1:\n\n1\n1\n2\n3\n5\n8\n13\n\nSample Input 2:\n\n10\n\nSample Output 2:\n\n1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n\nSample Input 3:\n\n1\n\nSample Output 3:\n\n1\n\nSample Input 4:\n\n2\n\nSample Output 4:\n\n1\n1\n\nSample Input 5:\n\n10\n\nSample Output 5:\n\n1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n\n-----Problem-----\n\u041c\u0438\u043d\u0438\u043c\u0443\u043c \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u0434\u0432\u0443\u0445\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e n. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 nn-e \u0447\u0438\u0441\u0435\u043b \u0424\u0438\u0431\u043e\u043d\u0430\u0447\u0447\u0438.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nn.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\nSample Input 1:\n\n10\n\nSample Output 1:\n\n1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n89\n\nSample Input 2:\n\n8\n\nSample Output 2:\n\n1\n1\n2\n3\n5\n8\n13\n21\n34\n\nSample Input 3:\n\n5\n\nSample Output 3:\n\n1\n1\n2\n3\n5\n\n\n-----Problem-----\n\u0420\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u041b\u0435\u0432\u0435\u043d\u0448\u0442\u0435\u0439\u043d\u0430\n\n\u0414\u0430\u043d\u044b \u0434\u0432\u0430 \u0441\u043b\u043e\u0432\u0430. \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0432\u044b\u044f\u0441\u043d\u0438\u0442\u044c, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043e\u0434\u043d\u043e \u0438\u0437 \u043d\u0438\u0445 \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u043f\u043e \u0434\u043b\u0438\u043d\u0435. \u0421\u043b\u043e\u0432\u0430 \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f \u0432 \u043d\u0438\u0436\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 YES, \u0435\u0441\u043b\u0438 \u0441\u043b\u043e\u0432\u043e \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430 \u0441\u0442\u0440\u043e\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u0441\u043b\u043e\u0432\u043e \u0438\u0437 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0438\u043b\u0438 NO \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0438\u0437 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\nSample Input 1:\n\nabcd\nabc\n\nSample Output 1:\n\nNO\n\nSample Input 2:\n\naaabbb\naaabb",
        "num_ids_2": 70,
        "num_ids_4": 70
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n\"\"\"",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3\\n1 2 2\\n4\\n5 5 5 5\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 2\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"1\\n100\") == \"YES\"\nassert solution(\"1\\n100\") == \"NO\"\n\n\"\"\"\n",
        "num_ids_2": 54,
        "num_ids_4": 80
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n1 2 2\\n4\\n5 5 5 5\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 2\\n4\\n5 5 5 5\") == \"NO\"\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 4\\n5 5 5 5\") == \"YES\"\nassert solution(\"3\\n1 2 2\\n4\\n1 3 4 4\") == \"NO\"\nassert solution(\"3\\n1 2 4\\n4\\n1 3 4 4\") == \"YES\"\nassert solution(\"5\\n100\\n1 2 4 5 5\\n5\\n1 3 4 4 5\") == \"YES\"\n",
        "num_ids_2": 45,
        "num_ids_4": 99
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\") == \"YES\"\nassert solution(\"1\\n2 2\") == \"YES\"\nassert solution(\"1\\n2 2 2\") == \"NO\"\nassert solution(\"1\\n2 2 2 2\") == \"NO\"\nassert solution(\"1\\n2 2 2 2 2\") == \"NO\"\n",
        "num_ids_2": 27,
        "num_ids_4": 58
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 2\\n4\\n5 5 5 5\") == \"YES\"\nassert solution(\"1 2 2\\n4\\n1 2 4\") == \"YES\"\nassert solution(\"100\\n1 2 4\") == \"NO\"\nassert solution(\"1\\n100\") == \"NO\"\n\n\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 69
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(example1) == \"YES\"\nassert solution(example2) == \"YES\"\nassert solution(example3) == \"NO\"\nassert solution(example4) == \"NO\"\nassert solution(example5) == \"YES\"\n\"\"\"\n\n\n\n\"\"\"\n[\ubb38\uc81c \uc124\uba85]\n\n\uc9d1\ud569 A\uac00 \uc8fc\uc5b4\uc84c\uc744 \ub54c, \uc790\uc2e0\uc774 \uc18d\ud55c \uc9d1\ud569\uc744 \ud3ec\ud568\ud558\ub294 \uc9d1\ud569\uc774 \ub418\ub294 \uc9d1\ud569 \uc911\uc5d0\uc11c \uc11c\ub85c \uc5f0\uacb0\ub418\uc9c0 \uc54a\uc740 \uc9d1\ud569\uc758 \ucd5c\ub300 \uac1c\uc218\ub97c \uad6c\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc2dc\uc624. \n\nA\ub294 \ub2e8\uc21c\ud788 \uc790\uc2e0\uc744 \ud3ec\ud568\ud558\ub294 \ud2b8\ub9ac\uc774\uba70, \uac01 \uc9d1\ud569\uc758 \uc6d0\uc18c\ub294 \ud574\ub2f9 \uc9d1\ud569\uc758 \uc6d0\uc18c\uc758 \uac1c\uc218\ub97c \uc758\ubbf8\ud558\uba70, \uc6d0\uc18c\uc758 \uac1c\uc218\ub294 1\uc774\uc0c1 100,000 \uc774\ud558\uc774\ub2e4.\n\n[\uc785\ub825]\n\n\uccab \uc904\uc5d0 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc758 \uac1c\uc218 T (1 \u2264 T \u2264 100)\uc774 \uc8fc\uc5b4\uc9c4\ub2e4. \uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub294 \ud55c \uc904\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uace0, \uc9d1\ud569\uc758 \uc6d0\uc18c\uc758 \uac1c\uc218 N (1 \u2264 N \u2264 100)\uc774 \uc8fc\uc5b4\uc9c4\ub2e4. \uadf8 \ub2e4\uc74c \uc904\uc5d0\ub294 \uc9d1\ud569 A\uc758 \uc6d0\uc18c\ub4e4\uc774 \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub418\uc5b4 \uc8fc\uc5b4\uc9c4\ub2e4. \n\uc9d1\ud569\uc758 \uc6d0\uc18c\ub294 \ubaa8\ub450 \uc11c\ub85c \ub2e4\ub978 \uc790\uc5f0\uc218\ub85c \uc8fc\uc5b4\uc9c0\uba70, 1 \uc774\uc0c1 100,000 \uc774\ud558\uc774\ub2e4.\n\n[\ucd9c\ub825]\n\n\uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub9c8\ub2e4 \uc785\ub825\uc73c\ub85c \uc8fc\uc5b4\uc9c4 \uc9d1\ud569 A\uc758 \ucd5c\ub300 \uc5f0\uacb0\ub418\uc9c0 \uc54a\uc740 \uc9d1\ud569\uc758 \ucd5c\ub300 \uac1c\uc218\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\"\"\"\n\n\n\"\"\"\n\ucc38\uace0 \nhttps://www.acmicpc.net/problem/1987\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'NO'\nassert solution('4\\n1 2 3 4') == 'YES'\nassert solution('3\\n1 2 4') == 'NO'\nassert solution('4\\n1 2 2') == 'YES'\n\nassert solution('4\\n100 100 100 100') == 'YES'\n",
        "num_ids_2": 26,
        "num_ids_4": 56
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'YES'\nassert solution('2 2 2') == 'NO'\nassert solution('4 5 4 4') == 'NO'\nassert solution('1 2 4') == 'YES'\nassert solution('1 3 4 4') == 'NO'\n",
        "num_ids_2": 22,
        "num_ids_4": 47
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"NO\"\nassert solution(\"3\\n1\\n2\\n4\\n\") == \"YES\"\nassert solution(\"4\\n1\\n2\\n2\\n\") == \"NO\"\nassert solution(\"1\\n2\\n2\\n\") == \"YES\"\nassert solution(\"2\\n2\\n\") == \"NO\"\n",
        "num_ids_2": 39,
        "num_ids_4": 78
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n1\\n100\") == \"YES\"\nassert solution(\"5\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n1\\n100\") == \"YES\"\nassert solution(\"5\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n1\\n100\") == \"NO\"\nassert solution(\"5\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n1\\n100\") == \"NO\"\n\n'''\n",
        "num_ids_2": 76,
        "num_ids_4": 152
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1101') == '12'\nassert solution('1001') == '11'\nassert solution('10101') == '1'\nassert solution('10111') == '0'\n\nprint(solution('10101'))\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"4 5\") == \"11\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"100 101\") == \"1_2\"\nassert solution(\"100 1000\") == \"8_10\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n1010\\n1101') == '12'\nassert solution('4 5\\n1001\\n10101') == '11'\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n1010\\n1101') == '12'\nassert solution('4 5\\n1001\\n10101') == '11'\n\n\"\"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == '12'\nassert solution(\"4 5\\n1001\\n10101\") == '11'\n\"\"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4 10110') == '12'\nassert solution('4 5 101010') == '11'\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n1010\\n1101') == '12'\nassert solution('4 5\\n1001\\n10101') == '11'\n\n\"\"\"\n\nimport math\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n4\\n6\\n8\\n10') == 'NO\\nYES\\n2 4 1 5'\n\"\"\"\n\n\nimport sys\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n4\") == \"NO\"\nassert solution(\"6\\n8\") == \"2 4 1 5\"\nassert solution(\"10\\n18\") == \"NO\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nimport math\nimport heapq\n\nsys.setrecursionlimit(1000000)\nINF = float(\"inf\")\nmod = 10 ** 9 + 7\n",
        "num_ids_2": 29,
        "num_ids_4": 42
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n6') == 'NO'\nassert solution('6\\n8') == '2 4 1 5'\nassert solution('8\\n10') == 'NO'\nassert solution('10\\n12') == 'NO'\nassert solution('8\\n10') == '2 4 6 8 1 3 5 11'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 29,
        "num_ids_4": 55
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"YES\"\nassert solution(\"10\") == \"NO\"\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n6') == 'YES\\n2 4 1 5'\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n4\\n6\\n8\\n10') == 'NO'\nassert solution('3\\n4\\n6\\n8\\n10') == 'NO'\nassert solution('2\\n4\\n6\\n8\\n10') == 'NO'\nassert solution('2\\n4\\n6\\n8\\n10') == 'NO'\nassert solution('1\\n2\\n3\\n4\\n5') == 'NO'\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n8\\n12\\n14\\n16\\n18\\n20\\n22') == '2 4 1 5'\nassert solution('8\\n10\\n12\\n14\\n16\\n18\\n20\\n22') == 'NO'\nassert solution('8\\n12\\n16\\n20') == 'YES'\nassert solution('8\\n16\\n20') == 'NO'\nassert solution('12\\n24\\n30') == 'YES'\n",
        "num_ids_2": 65,
        "num_ids_4": 100
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n6') == 'NO'\nassert solution('2\\n4') == 'YES\\n2 4 1 5'\nassert solution('5\\n8') == 'NO'\nassert solution('8\\n10') == 'YES\\n2 4 6 8 1 3 5 11'\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 68
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n6') == 'NO'\nassert solution('8\\n10') == 'YES\\n2 4 6 8 1 3 5 11'\n\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2\\n4\\n6\\n8\\n10\\n\") == \"NO\"\nassert solution(\"5\\n2\\n4\\n6\\n8\\n10\\n\") == \"NO\"\nassert solution(\"5\\n6\\n8\\n10\\n\") == \"NO\"\nassert solution(\"5\\n8\\n10\\n\") == \"NO\"\nassert solution(\"5\\n6\\n8\\n10\\n\") == \"NO\"\n",
        "num_ids_2": 54,
        "num_ids_4": 93
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\\n5\\n1 1 1 1 1\") == \"5\\n1\\n0\\n4\\n0\"\n\"\"\"\n",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 1 4 1 5 9 2 6 5\\n\") == \"5\"\nassert solution(\"8\\n8 7 6 5 4 3 2 1\\n\") == \"0\"\nassert solution(\"1\\n1\\n1\") == \"1\"\nassert solution(\"1\\n1\\n1\\n1\\n1\") == \"0\"\nassert solution(\"2\\n1 1\\n1\") == \"1\"\n",
        "num_ids_2": 45,
        "num_ids_4": 83
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1 1 1') == '1'\nassert solution('6\\n1 1 1 1 1 1') == '6'\nassert solution('9\\n3 1 4 1 5 9 2 6 5') == '5'\n\"\"\"\n\nfrom collections import defaultdict\nimport sys\n",
        "num_ids_2": 34,
        "num_ids_4": 55
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 1 2\\n5\\n1 1 1 1 1\") == \"5\"\nassert solution(\"9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\nassert solution(\"9\\n9 9 9 9 9 9 9 9 9\") == \"0\"\nassert solution(\"9\\n1 1 1 1 1\") == \"1\"\nassert solution(\"9\\n8 7 6 5 4 3 2 1\") == \"0\"\n",
        "num_ids_2": 46,
        "num_ids_4": 84
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n4 3 2 1\") == \"2\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\\n5\\n1 1 1 1 1\\n8\\n8 7 6 5 4 3 2 1\") == \"5\\n1\\n0\\n4\\n0\"\n\"\"\"",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1 2\\n5\\n1 1 1 1 1\") == \"0\"\n\"\"\"\n\n\"\"\"\n- \uc77c\ubc18\uc801\uc778 \ubc29\ubc95\n\"\"\"\n\nt = int(stdin.readline().strip())\n\nfor _ in range(t):\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] == a[i]:\n                res += 1\n    print(res)\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '3'\nassert solution('3\\n1 5\\n2 4\\n2 3\\n3 4\\n7\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '4'\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List, Tuple\nfrom math import ceil",
        "num_ids_2": 134,
        "num_ids_4": 134
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\") == \"3\"\nassert solution(\"4\\n2 2\\n3\") == \"2\"\nassert solution(\"5\\n1 5\\n2 3\\n2 5\") == \"2\"\nassert solution(\"4\\n1 5\\n2 3\\n2 5\") == \"2\"\n\nassert solution(\"4\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\") == \"3\"\n",
        "num_ids_2": 43,
        "num_ids_4": 87
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"7\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"4\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"4\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"4\"\n\n\"\"\"\n\n\nfrom typing import List, Set, Tuple\n",
        "num_ids_2": 128,
        "num_ids_4": 256
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"3\\n4\\n2\\n7\"\nassert solution(\"4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"3\\n4\\n2\\n7\"\nassert solution(\"3\\n1 3\\n2 4\\n2 3\\n7\") == \"4\\n2\\n7\"\nassert solution(\"4\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"3\\n4\\n2\\n7\"\nassert solution(\"4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"3\\n4\\n2\\n7\"\n\n\"\"\"\n",
        "num_ids_2": 136,
        "num_ids_4": 224
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_data) == solution.__annotations__",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '3'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '4'\n\"\"\"",
        "num_ids_2": 134,
        "num_ids_4": 134
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"3\\n4\\n2\\n7\"\n\n\"\"\"\n\nimport sys\nimport math\n\nsys.setrecursionlimit(10**6)\n\ninp = sys.stdin",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7') == '7'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7') == '7'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7') == '7'\n\n\"\"\"",
        "num_ids_2": 190,
        "num_ids_4": 285
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n''') == '''\n3\n4\n2\n7\n'''\nassert solution('''\n3\n3\n1 5\n2 4\n2 3\n''') == '''\n2\n3\n2\n'''\nassert solution('''\n2\n3\n1 5\n2 4\n2 3\n''') == '''\n3\n2\n3\n'''\n\nprint(solution(input()))",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"3\\n4\\n2\\n7\"\nassert solution(\"4\\n5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"4\\n4\\n2\\n7\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"3\\n4\\n2\\n7\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"3\\n4\\n2\\n7\"\n\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 132,
        "num_ids_4": 284
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('0') == ''\nassert solution('1 1') == '0'\nassert solution('1 0') == '1'\n",
        "num_ids_2": 16,
        "num_ids_4": 35
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('23 55\\n23 0\\n0 1\\n4 20\\n23 59') == '5\\n60\\n1439\\n1180\\n1'\n\"\"\"\n\nimport sys\nimport math\nimport os\nimport time\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"23 55\") == \"5\"\nassert solution(\"23 0\") == \"60\"\nassert solution(\"0 1\") == \"1439\"\nassert solution(\"4 20\") == \"1180\"\nassert solution(\"23 59\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\\n\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n\nfrom sys import stdin, stdout\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('23 55\\n23 0\\n0 1\\n4 20\\n23 59') == '5\\n60\\n1439\\n1180\\n1'\nprint(solution(input()))\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"23 55\") == \"5\"\nassert solution(\"23 0\") == \"60\"\nassert solution(\"0 1\") == \"1439\"\nassert solution(\"4 20\") == \"1180\"\nassert solution(\"23 59\") == \"1\"\nprint(\"The local tests are done.\")\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"LRUD\") == \"LR\"\nassert solution(\"LURD\") == \"UR\"\nassert solution(\"RRUDU\") == \"RRU\"\nassert solution(\"LLDDR\") == \"LLDR\"\n\nassert solution(\"LLDDR\") == \"LLDR\"",
        "num_ids_2": 23,
        "num_ids_4": 49
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"LRUD\") == \"LURD\"\nassert solution(\"LURD\") == \"LURD\"\nassert solution(\"RRUDU\") == \"RRUDR\"\nassert solution(\"LLDDR\") == \"LLDRD\"\n\"\"\"\n\nfrom __future__ import annotations\nfrom collections import deque\nfrom typing import Deque, Deque, Deque, List, List, Set, Tuple, TypeVar",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('LRUD') == '1 2'\nassert solution('URLD') == '1 4'\nassert solution('RRDD') == '3 4'\nassert solution('LLUDR') == '-1'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"LURDRU\") == \"1 2\"\nassert solution(\"LURDRURDU\") == \"1 4\"\nassert solution(\"LRUD\") == \"1 2\"\nassert solution(\"LUD\") == \"1 2\"\nassert solution(\"RLD\") == \"1 2\"",
        "num_ids_2": 30,
        "num_ids_4": 54
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"LURLLR\") == (\"LU\", \"LR\", \"LURLLR\", \"URL\", \"LURLLR\")\nassert solution(\"LRRR\") == (\"L\", \"L\", \"LRRR\")\nassert solution(\"LURD\") == (\"LU\", \"UR\", \"LURD\")\n\n\"\"\"\n\nfrom collections import deque\nfrom typing import Deque, List, Optional\n\nN: int\nstdin: Deque[str]\nanswers: List[int]\n",
        "num_ids_2": 51,
        "num_ids_4": 71
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('LRUD') == 'LRU'\nassert solution('LURD') == 'LDR'\nassert solution('RRUDU') == 'RRDU'\nassert solution('LLDDR') == 'LLDR'",
        "num_ids_2": 25,
        "num_ids_4": 52
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('LR') == ''\nassert solution('L') == ''\nassert solution('LU') == ''\nassert solution('UU') == ''\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"LRUD\") == \"1 2\"\nassert solution(\"LURD\") == \"1 4\"\nassert solution(\"RRUDU\") == \"3 4\"\nassert solution(\"LLDDR\") == \"-1\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"LRUD\") == \"1 2\"\nassert solution(\"LLDDR\") == \"3 4\"\n\"\"\"\nfrom typing import List\n\nfrom sys import stdin, stdout\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('L') == 'U'\nassert solution('R') == 'D'\nassert solution('U') == 'L'\nassert solution('D') == 'R'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n\"\"\") == '3\\n1\\n0\\n2'\n\n\n\"\"\"\n\ubb38\uc81c \uc124\uba85\n\uccab \uc904\uc5d0 \ud14c\uc2a4\ud2b8\ucf00\uc774\uc2a4\uc758 \uc218 T\uac00 \uc8fc\uc5b4\uc9c4\ub2e4. \uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub294 \ud55c \uc904\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\ub2e4.\n\uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub294 \uc22b\uc790 n\uc774 \uc8fc\uc5b4\uc9c4\ub2e4. \ub2e4\uc74c n \uc904\uc5d0\ub294 n \uac1c\uc758 \uc815\uc218 a_i (i = 1, 2,..., n)\uac00 \uc8fc\uc5b4\uc9c4\ub2e4.\n\ub2e4\uc74c n \uc904\uc5d0\ub294 n \uac1c\uc758 \uc815\uc218 a_i (i = 1, 2,..., n)\uac00 \uc8fc\uc5b4\uc9c4\ub2e4. \uac01 \uc815\uc218\ub294 \ub2e4\ub978 \uc815\uc218\uc758 \uac12\uc744 \ud3ec\ud568\ud558\uc9c0 \uc54a\ub294\ub2e4.\n\n\uc8fc\uc5b4\uc9c4 n\uac1c\uc758 \uc218\ub4e4\uc744 \ubaa8\ub450 \uace0\ub974\uace0, \uac01 \uc218\ub294 \ub2e4\ub978 \uc218\ub4e4\uc758 \uc77c\ubd80\uc774\uc5b4\uc57c \ud55c\ub2e4. \ud56d\uc0c1 \ucd5c\uc18c\ud55c\uc758 \uc218\ub85c \uc774\ub8e8\uc5b4\uc9c4 \uc218\uc5f4\uc744 \uc774\ub8e8\ub294 \uc30d\uc774 \uc874\uc7ac\ud55c\ub2e4.\n\n\uc8fc\uc5b4\uc9c4 \uc218\ub4e4\uc744 \ubaa8\ub450 \ud3ec\ud568\ud558\ub294 \uc30d\uc758 \ucd5c\ub300 \ud06c\uae30\ub97c \ucc3e\uc544\uc57c \ud55c\ub2e4. \uac01 \uc218\ub294 \ub2e4\ub978 \uc218\ub4e4\uc758 \uc77c\ubd80\uc774\uc5b4\uc57c \ud55c\ub2e4.\n\n\uac00\ub2a5\ud55c \uacbd\uc6b0 \uc30d\uc758 \ucd5c\ub300 \ud06c\uae30\ub97c \uad6c\ud558\ub77c.\n\n\uac00\ub2a5\ud55c \uacbd\uc6b0 \uc30d\uc758 \ucd5c\ub300 \ud06c\uae30\ub97c \uad6c\ud558\ub77c. \n\n\uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub9c8\ub2e4 \ucd5c\ub300 \ud06c\uae30\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\n-----Input-----\n\n3\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n\n-----Output-----\n\n3\n1\n0\n2\n\n\n\n\ubb38\uc81c \ud480\uc774 \uc544\uc774\ub514\uc5b4\n\n\uc54c\uace0\ub9ac\uc998\uc740 \uac00\ub2a5\ud55c \uacbd\uc6b0\uc758 \uc218\ub97c \uad6c\ud558\uba74 \ub41c\ub2e4.\n\n\uba3c\uc800 \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\ub0b4\uace0 \ucd5c\ub300\uac12\uc744 \ucc3e\uc544\ub0b4\ub294 \uac83\uc740 \uacbd\uc6b0\uc758 \uc218\ub97c \ub2e4 \uad6c\ud558\uace0 \uc804\ubd80 \uad6c\ud55c \ub2e4\uc74c \ucd5c\uc18c \uac12\uc744 \ub2e4\uc2dc \uad6c\ud558\ub294 \ubc29\uc2dd\uc774\ub2e4.\n\n\uc774\ub54c \ucd5c\ub300\uac12\uc740 \ucd5c\uc18c\uac12\uc744 \ucc3e\uae30 \uc704\ud574\uc11c \ucd5c\ub300\uac12\uc774 \ucd5c\uc18c\uac12\ubcf4\ub2e4 \ud06c\uba74 \ubb34\uc870\uac74 \ucd5c\ub300\uac12\uc774 \ucd5c\uc18c\uac12\ubcf4\ub2e4 \ucee4\uc57c\ud55c\ub2e4.\n\n\uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 \ucd5c\uc18c\uac12\uc774 \ucd5c\ub300\uac12\ubcf4\ub2e4 \ud06c\uba74 \uacbd\uc6b0\uc758 \ufffd",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == \"3\\n1\\n0\\n2\"\n\"\"\"",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n5\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3') == '3\\n1\\n0\\n2'\nassert solution('4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3') == '3\\n1\\n0\\n2'\n\"\"\"\n\n\nimport sys\nfrom collections import defaultdict\n",
        "num_ids_2": 112,
        "num_ids_4": 112
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3') == '3\\n1\\n0\\n2'\n\"\"\"\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n7\\n4 2 4 1 4 3 4\") == \"3\"\nassert solution(\"5\\n2 1 5 4 3\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"4\\n1 1 1 3\") == \"2\"\n",
        "num_ids_2": 39,
        "num_ids_4": 68
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n7\\n4 2 4 1 4 3 4') == '3'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\") == \"3\\n1\\n0\\n2\"\n\"\"\"\n\n\nfrom typing import List\nimport unittest\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        pass\n\n    def tearDown(self) -> None:\n        pass\n\n    def test_solution(self) -> None:\n        sol = Solution()\n        for stdin, solution in (\n            [\"4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\", \"3\\n1\\n0\\n2\"],\n            [\"1\\n1\", \"1\"],\n            [\"1\\n2\", \"0\"],\n            [\"1\\n5\", \"2\"],\n            [\"4\\n5\", \"2\"],\n        ):\n            self.assertEqual(solution, sol.solution(stdin))\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == \"3\\n1\\n0\\n2\"\nassert solution(\"4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == \"3\\n1\\n0\\n2\"\n\"\"\"\n",
        "num_ids_2": 112,
        "num_ids_4": 112
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n7\\n4 2 4 1 4 3 4') == '3\\n1\\n0\\n2'\n\nprint(solution(input()))",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(expected_result)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n1 3\") == \"3\"\nassert solution(\"3\\n1 2\\n2 3\") == \"0\"\nassert solution(\"8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"121\"\nassert solution(\"8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"121\"\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 129
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"121\"\n\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2\\n2 3\\n1 4') == '2'\nassert solution('4\\n1 2\\n2 3\\n1 4\\n1 5') == '1'\nassert solution('3\\n1 2\\n1 3') == '1'\nassert solution('10\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10') == '0'\nassert solution('8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8') == '121'\n\n\"\"\"\n\n\nimport sys\nimport numpy as np\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n1 2\\n1 3\\n2 4\\n2 5\\n5 6\\n5 7\\n3 8\\n3 9\\n4 10\\n4 11\\n6 12\\n6 13\\n7 14\\n7 15\\n9 16\\n9 17\\n8 18\\n8 19\\n10 20\\n10 21\\n11 22\\n11 23\\n12 24\\n12 25\\n13 26\\n13 27\\n14 28\\n14 29\\n15 30\\n15 31\\n16 32\\n16 33\\n17 34\\n17 35\\n18 36\\n18 37\\n19 38\\n19 39\\n20 40\\n20 41\\n21 42\\n21 43\\n22 44\\n22 45\\n23 46\\n23 47\\n24 48\\n24 49\\n25 50\\n25 51\\n26 52\\n26 53\\n27 54\\n27 55\\n28 56\\n28 57\\n29 58\\n29 59\\n30 60\\n30 61\\n31 62\\n31 63\\n32 64\\n32 65\\n33 66\\n33 67\\n34 68\\n34 69\\n35 70\\n35 71\\n36 72\\n36 73\\n37 74\\n37 75\\n38 76\\n38 77\\n39 78\\n39 79\\n40 80\\n40 81\\n41 82\\n41 83\\n42 84\\n42 85\\n43 86\\n43 87\\n44 88\\n44 89\\n45 90\\n45 91\\n46 92\\n46 93\\n47 94\\n47 95\\n48 96\\n48 97\\n49 98\\n49 99\") == \"121\"\nassert solution(\"6\\n1 2\\n1 3\\n2 4\\n2 5\\n5 6\\n5 7\\n3 8\\n3 9\\n4 10\\n4 11\\n6 12\\n6 13\\n7 14\\n7 15\\n9 16\\n9 17\\n8 18\\n8 19\\n10 20\\n10 21\\n11 22\\n11 23\\n12 24\\n12 25\\n13 26\\n13 27\\n14 28\\n14 29\\n15 30\\n15 31\\n16 32\\n16 33\\n17 34\\n17 35\\n18 36\\n18 37\\n19 38\\n19 39\\n20 40\\n20 41\\n21 42\\n21 43\\n22 44\\n22 45\\n23 46\\n23 47\\n24 48\\n24 49\\n25 50\\n25 51\\n26 52\\n26 53\\n27 54\\n27 55\\n28 56\\n28 57\\n29 58\\n29 59\\n30 60\\n30 61\\n31 62\\n31 63\\n32 64\\n32 65\\n33 66\\n33 67\\n34 68\\n34 69\\n35 70\\n35 71\\n36 72\\n36 73\\n37 74\\n37 75\\n38 76\\n38 77\\n39 78\\n39 79\\n40 80\\n40 81\\n41 82\\n41 83\\n42 84\\n42 85\\n43 86\\n43 87\\n44 88\\n44 89\\n45 90\\n45 91\\n46 92\\n46 93\\n47 94\\n47 95\\n48 96\\n48 97\\n49 98\\n49 99\") == \"0\"\nassert solution(\"5\\n1 2\\n1 3\\n2 4\\n2 5\\n5 6\\n5 7\\n3 8\\n3 9\\n4 10\\n4 11\\n6 12\\n6 13\\n7 14\\n7 15\\n9 16\\n9 17\\n8 18\\n8 19\\n10 20\\n10 21\\n11 22\\n11 23\\n12 24\\n12 25\\n13 26\\n13 27\\n14 28\\n14 29\\n15 30\\n15 31\\n16 32\\n16 33\\n17 34\\n17 35\\n18 36\\n18 37\\n19 38\\n19 39\\n20 40\\n20 41\\n21 42\\n21 43\\n22 44\\n22 45\\n23 46\\n23 47\\n24 48\\n24 49\\n25 50\\n25 51\\n26 52\\n26 53\\n27 54\\n27 55\\n28 56\\n28 57\\n29 58\\n29 59\\n30 60\\n30 61\\n31 62\\n31 63\\n32 64\\n32 65\\n33 66\\n33 67\\n34 68\\n34 69\\n35 70\\n35 71\\n36 72\\n36 73\\n37 74\\n37 75\\n38 76\\n38 77\\n39 78\\n39 79\\n40 80\\n40 81\\n41 82\\n41 83\\n42 84\\n42 85\\n43 86\\n43 87\\n44 88\\n44 89\\n45 90\\n45 91\\n46 92\\n46 93\\n47 94\\n47 95\\n48 96\\n48 97\\n49 98\\n49 99\") == \"0\"\nassert solution(\"5\\n1 2\\n1 3\\n2 4\\n2 5\\n5 6\\n5 7\\n3 8\\n3 9\\n4 10\\n4 11\\n6 12\\n6 13\\n7 14\\n7 15\\n9 16\\n9 17\\n8 18\\n8 19\\n10 20\\n10 21\\n11 22\\n11 23\\n12 24\\n12 25\\n13 26\\n13 27\\n14 28\\n14 29\\n15 30\\n15 31\\n16 32\\n16 33\\n17 34\\n17 35\\n18 36\\n18 37\\n19 38\\n19 39\\n20 40\\n20 41\\n21 42\\n21 43\\n22 44\\n22 45\\n23 46\\n23 47\\n24 48\\n24 49\\n25 50\\n25 51\\n26 52\\n26 53\\n27 54\\n27 55\\n28 56\\n28 57\\n29 58\\",
        "num_ids_2": 804,
        "num_ids_4": 1440
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\n",
        "num_ids_2": 62,
        "num_ids_4": 62
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 2\\n1 4') == '0'\nassert solution('1\\n1') == '0'\nassert solution('3\\n1 2\\n1 3') == '0'\nassert solution('4\\n1 2\\n1 3') == '3'\nassert solution('8\\n9 4 1 7 10 1 6 5') == '121'\n",
        "num_ids_2": 31,
        "num_ids_4": 67
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"121\"\nassert solution(\"4\\n1337\") == \"0\"\nassert solution(\"6\\n2 1 4 6 5 3 5\\n4 3 6\\n1 2\\n2 3\\n4 5\\n1 5\\n5 1\") == \"26\"\n",
        "num_ids_2": 62,
        "num_ids_4": 106
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2\\n2 3') == '3'\nassert solution('4\\n1 3\\n3 2') == '1'\nassert solution('4\\n1 3\\n2 4') == '4'\nassert solution('4\\n1 3\\n4 2') == '1'\nassert solution('4\\n1 3\\n4 2') == '1'\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\n\n\"\"\"\n\nfrom collections import defaultdict\n\nn = int(stdin.readline())\nvalues = [int(x) for x in stdin.readline().split()]\nedges = defaultdict(list)\nfor line in stdin.readlines()[:n-1]:\n    u, v = map(int, line.split())\n    edges[u].append(v)\n    edges[v].append(u)\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6 8 9 1 2 1 3 4\") == \"90\"\nassert solution(\"7 1 1 7 1 8 1 9 1\") == \"72\"\nassert solution(\"6 1 1 2 3 4 4 6\") == \"35\"\nassert solution(\"5 2 1 3 2 4 5\") == \"32\"\nassert solution(\"10 2 1 3 5 4 7 8 9 10\") == \"420\"\n",
        "num_ids_2": 36,
        "num_ids_4": 69
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"6\\n18\\n0\\n227\\n8\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\") == \"6\"\nassert solution(\"5 10\\n20 100 50 20 100500\") == \"0\"\nassert solution(\"5 10\\n24 24 24 24 24 24 24 24 24 24\") == \"8\"\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 63
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\") == \"6\\n18\\n0\\n227\\n8\"\nassert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\") == \"6\\n18\\n0\\n227\\n8\"\n\n-----'''",
        "num_ids_2": 114,
        "num_ids_4": 114
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2 1 3') == '6'\nassert solution('10 6\\n8 7 1 8 3 7 5 10 8 9') == '18'\nassert solution('5 10\\n20 100 50 20 100500') == '0'\nassert solution('10 25\\n24 24 24 24 24 24 24 24 24 24') == '8'\n",
        "num_ids_2": 40,
        "num_ids_4": 82
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9''') == '6\nassert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n''') == '18'\nassert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n''') == '0'\nassert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n''') == '227'\nassert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n''') == '8'\n\n\n\n\"\"\"\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n\"\"\"\n\n\"\"\"\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe first line of the test case contains two integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5; 1 \\le k \\le 10^9$) \u2014 the length of $a$ and the required divisior. The second line of the test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the $i$-th element of $a$.\n\nIt is guaranteed that the sum of $n$ does not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$).\n\"\"\"\n\n\"\"\"\n1\n5 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n\nOutput:\n6\n18\n0\n227\n8\n\"\"\"\n\n\n\n\"\"\"\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe first line of the test case contains two integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5; 1 \\le k \\le 10^9$) \u2014 the length of $a$ and the required divisior. The second line of the test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the $i$-th element of $a$.\n\nIt is guaranteed that the sum of $n$ does not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$).\n\nOutput:\n6\n18\n0\n227\n8\n\"\"\"\n\n\n\"\"\"\n2\n5 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n\nOutput:\n6\n18\n0\n227\n8\n\"\"\"\n\n\n\"\"\"\n5 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n\"\"\"\n\n\n\"\"\"\n5 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n\"\"\"\n\n\n\"\"\"\n5 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n\"\"\"\n\n\n\"\"\"\n5 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n\"\"\"\n\n\n\"\"\"\n5 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\") == \"6\"\nassert solution(\"5 10\\n20 100 50 20 100500\") == \"0\"\nassert solution(\"5 10\\n24 24 24 24 24 24 24 24 24 24\") == \"8\"\n\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 63
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 2\") == \"2\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"5\\n2 2\") == \"5\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 1 3\") == \"6\"\nassert solution(\"10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"18\"\nassert solution(\"5 10\\n20 100 50 20 100500\") == \"0\"\nassert solution(\"10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"8\"\n",
        "num_ids_2": 40,
        "num_ids_4": 82
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 2 1 3\\n10 6') == '6'\nassert solution('5 10\\n20 100 50 20 100500') == '0'\nassert solution('10 25\\n24 24 24 24 24 24 24 24 24 24') == '8'\nassert solution('8 8\\n1 2 3 4 5 6 7 8') == '0'\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 84
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"6\"\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\\n8 8\") == \"0\"\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\\n8 8\") == \"0\"\n\n\"\"\"",
        "num_ids_2": 72,
        "num_ids_4": 111
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('1 1') == '1'\nassert solution('1 2') == '2'",
        "num_ids_2": 23,
        "num_ids_4": 34
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"5 5\") == \"2\"\nassert solution(\"3 2\") == \"2\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3\\n1 1') == 1\nassert solution('1 2\\n1 1 2 3') == 2\n\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('[1,2,3]\\n[1,1]') == '1'\nassert solution('[1,2]\\n[1,2,3]') == '2'\nassert solution('[1,2,3]\\n[1,1]') == '1'\nassert solution('[1,2,3,4,5]\\n[3,3,3,3,3]') == '0'\nassert solution('[1,2,3,4,5]\\n[3,3,3,3,3]') == '0'\n",
        "num_ids_2": 46,
        "num_ids_4": 102
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"[1,2,3], [1,1]\") == 1\nassert solution(\"[1,2], [1,2,3]\") == 2\n\"\"\"\n\n\"\"\"\n\u516c\u53f8\u8cb7C\u9846\u7cd6\uff0c\u82e5\u5c07\u5176\u4e2dA\u9846\u7cd6\u7d66\u5b69\u5b501\uff0c\u5269\u4e0b\u7684\u81f3\u5c11B\u9846\uff0c\u5b69\u5b501\u6700\u591a\u53ef\u4ee5\u8cb7\u4e0b\u81f3\u591aF\u9846\u7cd6\uff0c\u800c\u5b69\u5b502\u6700\u591a\u53ef\u4ee5\u8cb7\u4e0b\u81f3\u591aG\u9846\u7cd6\uff0c\u4ee5\u7372\u5f97\u6700\u5927\u7684\u6536\u76ca\u662f\u591a\u5c11\uff1f\n\nF, G \u5fc5\u9808\u70ba\u6b63\u6574\u6578\n\n\u82e5\u6709\u5e7e\u7a2e\u53ef\u80fd\u7684\u89e3\uff0c\u56de\u50b3\u4efb\u610f\u4e00\u500b\u90fd\u53ef\u4ee5\n\n\u89e3\u984c\u601d\u8def\uff1a\n\n\u53d6\u6700\u5927\u503c\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 2 3\") == \"2\"\n",
        "num_ids_2": 24,
        "num_ids_4": 46
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"3\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n2 3') == '1'\nassert solution('1 1\\n2 2') == '1'\nassert solution('1 1\\n2 3') == '1'\nassert solution('2 2\\n2 2') == '1'\nassert solution('2 2\\n3 3') == '2'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n2 3') == '1'\nassert solution('1 2\\n1 1') == '1'\nassert solution('1 2\\n1 1') == '1'\nassert solution('1 2\\n2 3') == '2'\nassert solution('1 2\\n2 3') == '2'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == 1\nassert solution('1 1') == 1\nassert solution('1 2') == 2\n\nassert solution('1 2 3') == 1\nassert solution('1 1') == 1\n",
        "num_ids_2": 19,
        "num_ids_4": 38
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\"\"\"\n\n\"\"\"\nPrefix sum \n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == [1, 3, 3, 1]\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\"\"\"\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0: return [1]\n        if rowIndex == 1: return [1,1]\n        temp = [1, 1]\n        for i in range(rowIndex - 1):\n            temp = [1] + [temp[j] + temp[j + 1] for j in range(len(temp) - 1)] + [1]\n        return temp",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n'''\n\n\nclass Solution:\n    def getRow(self, n: int) -> List[int]:\n        if n == 0:\n            return [1]\n        if n == 1:\n            return [1, 1]\n        if n == 2:\n            return [1, 2, 1]\n        a = [1, 1]\n        b = [1, 2, 1]\n        for i in range(2, n):\n            a = [1] + [(a[j] + b[j]) for j in range(len(a))] + [1]\n            b = [1] + [(b[j] + a[j]) for j in range(len(b))] + [1]\n        return a\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == [1, 3, 3, 1]\n\"\"\"\n\nclass Solution:\n    def pascalTriangle(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        return self.pascal_triangle_recursion(n, [])\n\n    def pascal_triangle_recursion(self, n, result):\n        if n == 1:\n            return [1]\n        elif n == 0:\n            return []\n        else:\n            row = [1]\n            previous_row = self.pascal_triangle_recursion(n-1, result)\n            for i in range(1, len(previous_row)):\n                row.append(previous_row[i] + previous_row[i-1])\n            row.append(1)\n            result.append(row)\n            return row\n\n    def pascal_triangle_dp(self, n):\n        dp = [[0 for j in range(i+1)] for i in range(n)]\n        dp[0][0] = 1\n\n        for i in range(n):\n            for j in range(i+1):\n                if j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        return dp",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3) == [1,3,3,1]\nassert solution(1) == [1]\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == [1,3,3,1]\nassert solution('5') == [1,5,10,10,5,1]\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\n\"\"\"\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count('1')",
        "num_ids_2": 23,
        "num_ids_4": 39
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 39
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\nassert solution('101') == 3\n\"\"\"\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count(\"1\")\n",
        "num_ids_2": 27,
        "num_ids_4": 35
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('00000000000000000000000010000000') == 1\nassert solution('00000000000000000000000010111101') == 4\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\n\"\"\"\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        c = 0\n        for i in range(32):\n            if n & (1 << i):\n                c += 1\n        return c\n",
        "num_ids_2": 23,
        "num_ids_4": 39
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('00000000000000000000000000001011') == 3\n\"\"\"\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return str(n).count('1')",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 39
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 39
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"01110\") == 3\nassert solution(\"11101\") == 3\nassert solution(\"100100\") == 2\nassert solution(\"111111101\") == 31\nassert solution(\"101101\") == 3\n",
        "num_ids_2": 18,
        "num_ids_4": 37
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11') == 2\nassert solution('10') == 1\nassert solution('11111111111111111111111111111101') == 30\n\"\"\"\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count('1')\n\nassert Solution().hammingWeight(3) == 2\nassert Solution().hammingWeight(10) == 2\n",
        "num_ids_2": 16,
        "num_ids_4": 44
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1111') == '1112'\nassert solution('999') == '1000'\nassert solution('10') == '11'\nassert solution('0') == '1'\nassert solution('0') == '1'\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"42\") == \"43\"\nassert solution(\"100\") == \"101\"\nassert solution(\"1\") == \"2\"\nassert solution(\"5\") == \"6\"\n\nprint(\"Passed all tests...\")\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1111') == '1110'\nassert solution('1562') == '1563'\nassert solution('1') == '10'\nassert solution('5') == '5'\nassert solution('0') == '1'\n",
        "num_ids_2": 23,
        "num_ids_4": 43
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"[1,2,3]\") == \"[1,2,4]\"\nassert solution(\"[4,3,2,1]\") == \"[4,3,2,2]\"\nassert solution(\"[1]\") == \"[2]\"\nassert solution(\"[9]\") == \"[1,0]\"\nassert solution(\"[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
        "num_ids_2": 44,
        "num_ids_4": 70
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('123') == '124'\nassert solution('432') == '433'\nassert solution('40') == '41'\nassert solution('99') == '100'\nassert solution('1000') == '1001'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1234\") == \"1235\"\nassert solution(\"9\") == \"9\"\nassert solution(\"123400\") == \"123401\"\nassert solution(\"123401\") == \"123401\"\nassert solution(\"9012\") == \"90123\"\n",
        "num_ids_2": 22,
        "num_ids_4": 50
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123\") == \"124\"\nassert solution(\"12345\") == \"12346\"\nassert solution(\"9\") == \"10\"\nassert solution(\"900\") == \"901\"\nassert solution(\"123456789\") == \"1234567890\"\n",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '1 2 4'\nassert solution('4 3 2 1') == '4 3 2 2'\nassert solution('4 4 4') == '4 4 4'\nassert solution('1 2 9') == '2 0 0'\n\nassert solution('9 2 9 3 9') == '9 2 2 0 0'\n",
        "num_ids_2": 30,
        "num_ids_4": 58
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13\") == \"14\"\nassert solution(\"4\") == \"5\"\nassert solution(\"12\") == \"13\"\nassert solution(\"1\") == \"2\"\n\nassert solution(\"132223\") == \"1322324\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4,3,2,1\") == \"4,3,2,2\"\nassert solution(\"1,2,3\") == \"1,2,4\"\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:\n        num = self.to_num(digits)\n        num = num + 1\n        return self.to_digits(num)\n\n    def to_num(self, digits: List[int]) -> int:\n        num = 0\n        for i in range(len(digits)):\n            num += digits[i] * 10 ** (len(digits) - 1 - i)\n        return num\n\n    def to_digits(self, num: int) -> List[int]:\n        digits = []\n        while num!= 0:\n            digits.append(num % 10)\n            num //= 10\n        return digits[::-1]\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1\\n') == '4'\n\n'''\nimport sys\n\nN = int(input())\na = int(sys.stdin.readline())\nb = int(sys.stdin.readline())\n\nprint(max(a+b, a-b, a*b))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1') == '4'\nassert solution('2 6') == '10'\nassert solution('2 2') == '2'\nassert solution('-2 -8') == '2'\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1') == 4\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"4\"\nassert solution(\"-1 2\") == \"2\"\nassert solution(\"-1 -2\") == \"0\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 36
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n3 4\") == \"5\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1\\n') == '4'\nassert solution('5 2\\n') == '5'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3, 1) == 4\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1\\n') == '4'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1\\n') == '4'\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1') == '4'\nassert solution('5 2') == '9'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '4 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == '3'\nassert solution(\n    '6 9\\n0 4\\n-1 1\\n-3 9\\n1 1\\n2 2\\n4 8\\n3 9') == '5'\nassert solution(\n    '2 5\\n0 5\\n0 0') == '1'\n\"\"\"\n\nfrom math import sqrt\n\nimport numpy as np\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == '3'\n\"\"\"\n\nfrom math import sqrt",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\") == \"3\"\n\"\"\"\n\nimport math",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\"\"\"\nimport math",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\") == '3'\nassert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == '3'\n\"\"\"\nimport math",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('5\\n0 5\\n-2 4\\n3 4') == '3'\n\"\"\"\n\nfrom math import sqrt\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\"\"\"\n\n\n\"\"\"\nThe gist of the solution is to go through all of the points and if they're more than D away from the origin,\nincrement a counter by one.\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nimport math\n\n\"\"\"\n    \"lines\" from stdin will be read as string type.\n    We need to convert them to integer firstly.\n\"\"\"\ntest_input = \"\"\"3 10\n1 1\n0 1\n2 2\"\"\"\ntest_output = 3\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\n\"\"\"\n\nimport sys\nfrom math import sqrt",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(12) == 'Yes'\nassert solution(17) == 'No'",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12') == 'Yes'\nassert solution('21') == 'No'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(12) == \"Yes\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\") == \"Yes\"\nprint(solution(\"12\"))",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"21\") == \"No\"\nassert solution(\"132\") == \"No\"\n\nprint(\"All tests passed.\")\n\n-----\n1. The original solution has many issues.\n\n2. The solution can be improved by a good use of the strings format method.\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12\\n\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12') == 'Yes'\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n12') == 'Yes'\nassert solution('2\\n42') == 'Yes'\nassert solution('3\\n9') == 'Yes'\nassert solution('4\\n16') == 'No'\nassert solution('5\\n25') == 'No'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5 4 -1') == '12 12 8 10'\nassert solution('3 5 -1') == '12 8 10'\n",
        "num_ids_2": 24,
        "num_ids_4": 39
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n3 5 -1') == '12\\n8\\n10'\n\"\"\"\n\n\"\"\"\nINPUT:\n5\n10 20 -30 -60 -80\nOUTPUT:\n-40\n\"\"\"\n\n\"\"\"\nINPUT:\n4\n3 10 -5 1\nOUTPUT:\n6\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline())\ncoordinates = list(map(int, sys.stdin.readline().split()))\n\nresult = []\nfor i in range(N):\n    first = 0\n    last = 0\n    cur = coordinates[i]\n    for j in range(len(coordinates)):\n        if j == i:\n            continue\n        elif cur > first:\n            first = cur\n        elif cur < last:\n            last = cur\n        cur = cur + coordinates[j]\n    result.append(first * last)\n\nprint(\"\\n\".join(map(str, result)))",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 -1\\n\") == \"12\\n8\\n10\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().split()))\n\ndp = [[0, 0] for _ in range(n)]\ndp[0][0] = arr[0]\ndp[0][1] = -arr[0]\ndp[1][0] = arr[1]\ndp[1][1] = -arr[1]\n\nfor i in range(2, n):\n    dp[i][0] = max(dp[i-1][0], dp[i-1][1] + arr[i])\n    dp[i][1] = max(dp[i-2][0], dp[i-2][1] + arr[i])\n\nprint(max(dp[n-1]))\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n3 5 -1') == '12\\n8\\n10'\nprint('Test Successful')",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n\nimport os\nimport sys",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5 -1') == '12 8 10'\n\n---\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"b\") == \"consonant\"\n\n-----\n\"\"\"\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"i\") == \"vowel\"\nassert solution(\"u\") == \"vowel\"\nassert solution(\"e\") == \"vowel\"\nassert solution(\"o\") == \"vowel\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('a') == 'vowel'\nassert solution('u') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('i') == 'vowel'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"vowel\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"b\") == \"consonant\"\nassert solution(\"c\") == \"vowel\"\nassert solution(\"d\") == \"consonant\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"i\") == \"vowel\"\nassert solution(\"e\") == \"vowel\"\nassert solution(\"o\") == \"vowel\"\nassert solution(\"u\") == \"vowel\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a\") == \"vowel\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('a') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('u') == 'vowel'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('u') == 'vowel'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('u') == 'vowel'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"WWBWB\") == \"1\"\nassert solution(\"WWBWW\") == \"0\"\nassert solution(\"BBBWWBWWBWBWWB\") == \"4\"\nassert solution(\"BBBWWBWWBWBWBBB\") == \"3\"\n",
        "num_ids_2": 24,
        "num_ids_4": 54
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('BBBWW') == 1\nassert solution('WWBBB') == 1\nassert solution('BBBBB') == 0\nassert solution('BWBWB') == 0\n\nprint(solution(stdin))\n\n------\n------\n\nInput:\nWWWBWBW\n\nOutput:\n4\n\nExplanation:\nThe current state of the board is\nWWWBWBW\nIn the beginning of the game, there are two white stones and four black stones.\nJiro places a new white stone to the right end of the row of stones, all black stones will become white.\nAfter that, the current state of the board is\nWWWBBWB\nThen Jiro places another white stone to the left end of the row of stones, all black stones will become white.\nAfter that, the current state of the board is\nWWBBWBB\nThen Jiro places a new white stone to the left end of the row of stones, all black stones will become white.\nAfter that, the current state of the board is\nWBBBWBW\nThen Jiro places a new white stone to the right end of the row of stones, all black stones will become white.\nAfter that, the current state of the board is\nWBBBWBW\nFinally, Jiro places a new white stone to the left end of the row of stones, all black stones will become white.\nThe final state of the board is\nWBBBWBW\nIn this case, Jiro needs to place four new white stones.\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('WWWWBWWW') == '1'\nassert solution('WWWBBWBBWW') == '3'\nassert solution('BWBWBWBW') == '1'\nassert solution('WBWBWBWB') == '0'\nassert solution('WWWWBWBWWW') == '2'\n",
        "num_ids_2": 29,
        "num_ids_4": 56
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"BWBWBWBW\") == \"0\"\nassert solution(\"WWBWBWWB\") == \"3\"\n",
        "num_ids_2": 26,
        "num_ids_4": 40
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"BBBWW\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('BBBWW') == 1\nassert solution('BWBBW') == 2\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BBBWW\") == 1\nassert solution(\"BWBW\") == 0\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '1'\nassert solution('B') == '1'\nassert solution('BWBW') == '0'\nassert solution('BBBWW') == '1'\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"WWBWBWWBBBWW\") == \"1\"\nassert solution(\"BWBWBWBWBWWBWBWBWBWB\") == \"0\"\nassert solution(\"BWBWBWBWBWWBWBWBWBWW\") == \"1\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 68
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('BBWBBW') == '1'\nassert solution('WWWBBWBWW') == '2'\n\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"Yes\"\nassert solution(\"1 21\") == \"Yes\"\nassert solution(\"1 21\\n2 3\") == \"No\"\nassert solution(\"1 2\\n2 3\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 52
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 21''') == 'Yes'\n'''\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a, b) in [\n    'Yes',\n    'No',\n]",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\"\nimport sys\n\n\"\"\"\nInput:\na b\n\nOutput:\nYes\n\nRules:\n    a + b = x^2\n    a + b + a = x^2 + x\n    a + b + b + a = x^2 + x + x\n\"\"\"\n\na, b = map(int, sys.stdin.readline().split())\n\nfor x in range(1, 1000):\n    if (a + b) % x == 0 and (a + b + a) % x == 0 and (a + b + b + a) % x == 0:\n        print(\"Yes\")\n        exit()\nprint(\"No\")\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\nassert solution(\"0 21\") == \"No\"\nassert solution(\"5 22\") == \"No\"\n\nassert solution(\"9 32\") == \"Yes\"\nassert solution(\"49 123\") == \"No\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'1 21'\n) == 'Yes'\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 21') == 'Yes'\nassert solution('0 9') == 'No'\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 21\") == \"Yes\"\nassert solution(\"3 29\") == \"No\"\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1 4 1 5 9 2') == '4'\n\"\"\"\n\n\nfrom typing import List\nfrom collections import deque",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n\"\"\"\n\nimport sys\n\nseq = sys.stdin.read().splitlines()[1]\nseq = [int(i) for i in seq.split()]\n\nmaximum = -1\n\nfor i in range(len(seq)):\n    count = 0\n    for j in range(i + 1, len(seq)):\n        if seq[i] == seq[j]:\n            count += 1\n    if count > maximum:\n        maximum = count\n\nprint(maximum)\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n3 1 4 1 5 9 2') == '4'\n\"\"\"\n\nimport sys\n\nn = int(input())\narr = list(map(int, input().split()))\narr.sort()\nx = 0\ncount = 0\nfor i in arr:\n    if x < i:\n        x = i\n        count += 1\n\nprint(count)\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n3 1 4 1 5 9 2') == '4'\nprint('test passed')\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 4 1 5 9 2\") == \"4\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n3 1 4 1 5 9 2') == '4'\n\"\"\"\n\n\"\"\"\n3\n1\n3\n2\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 4 1 5 9 2\") == 4\n\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''7\n3 1 4 1 5 9 2''') == '4'\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3\") == \"5\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == test_output_1\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\na = int(sys.stdin.readline().rstrip())",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4\") == \"5\"\nassert solution(\"5\\n8\") == \"13\"\nassert solution(\"1\\n0\") == \"1\"\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n4') == '5'\nprint(solution('3\\n4'))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n4') == '5'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n4\") == \"5\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n4\") == '5'\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n4\") == \"5\"\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n4') == '5'\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4\") == \"5\"\nassert solution(\"1\\n1\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == \"YES\"\nprint(solution(str(input())))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2,4,6) == \"YES\"\nassert solution(1,2,5) == \"NO\"\n\"\"\"\n\na, b, c = map(int, input().split())",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"2 3 5\") == \"NO\"\nassert solution(\"2 4 6\") == \"YES\"\nassert solution(\"2 3 5\") == \"NO\"\nassert solution(\"2 3 5\") == \"YES\"\n\n\"\"\"\n\na, b, c = [int(x) for x in stdin.split()]\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2 4 6) == \"YES\"\nassert solution(3 4 5) == \"NO\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4 6') == \"YES\"\n\"\"\"\n\nfrom sys import stdin\n\na, b, c = list(map(int, stdin.readline().split()))",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '2 4 6'\n) == 'YES'\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('5 2 6') == 'NO'\nassert solution('2 5 6') == 'NO'\nassert solution('1 3 2') == 'NO'\nassert solution('6 3 4') == 'YES'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"1 1 1\") == \"NO\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 6\") == 'YES'\nassert solution(\"2 4 6\") == 'NO'\nassert solution(\"4 5 6\") == 'NO'\nassert solution(\"4 4 6\") == 'YES'\nassert solution(\"1 2 3\") == 'NO'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('1 2 3') == 'NO'\n\"\"\"\n\nimport re\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('29') == 'Yes'\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('29') == 'Yes'",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('29') == 'Yes'\n\n---\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('29') == 'Yes'\nassert solution('10') == 'No'\nassert solution('25') == 'No'\nassert solution('58') == 'No'\nassert solution('32') == 'Yes'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"29\") == \"Yes\"\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('29') == 'Yes'\nassert solution('90') == 'No'\nassert solution('98') == 'No'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('29') == 'Yes'\nassert solution('98') == 'Yes'\nassert solution('12') == 'No'\nassert solution('1') == 'No'\nassert solution('123') == 'No'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"29\") == \"Yes\"\nassert solution(\"98\") == \"No\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('29') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('29') == 'Yes'\nassert solution('13') == 'No'\n\"\"\"\n\nN = input()\n\nprint(\"Yes\" if int(N[0]) % 2 == 1 else \"No\")\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 3\\n1 2 4') == '1'\nassert solution('5 5 1\\n1 2 3 4 5') == '6'\nassert solution('5 10 1\\n1 2 3 4 5') == '14'\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 36,
        "num_ids_4": 55
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 3\\n1 2 4') == '1'\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 3\\n1 2 4') == '1'\n\n-------\n3.34. The Coin Change Problem\n\nYou are given a set of N coins and you want to change a value V into coins.\nEach coin has a value which is an integer that is in the range [1, 100] inclusive.\nChange the given value V into coins in such a way that the total value of the coins used is as minimum as possible.\nThe total value used should be as large as possible.\nPrint the minimum total value as an integer.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq V \\leq 100\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn v\nv_1 v_2... v_n\n\n-----Output-----\nPrint the minimum total value as an integer.\n\n-----Sample Input-----\n5 100\n50 25 10 1\n\n-----Sample Output-----\n100\n\nThe optimal solution is as follows:\n - First, change the value V into coins of value 10.\n - Then, change the value V into coins of value 5.\n - Last, change the value V into coins of value 1.\nIn this case, the total value used is 100.\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import permutations\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 3\\n1 2 4') == '1'\n\"\"\"\n\nN, M, X = [int(x) for x in stdin.split()]\nA = [int(x) for x in stdin.split()[1:]]",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n.#\\n###\\n.#\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n.#\\n..') == 'Yes'\nassert solution('2 2\\n..\\n..') == 'No'\nassert solution('2 3\\n..\\n..') == 'No'\nassert solution('2 2\\n..\\n.#') == 'No'\nassert solution('2 3\\n#.#\\n.#.') == 'Yes'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n.#\\n###\\n.#\\n\") == \"Yes\"\n\"\"\"\n\nimport collections\n\nH, W = [int(x) for x in input().split()]\nsquare = collections.deque()\n\nfor row in range(H):\n    for col in range(W):\n        square.append(input())\n\nanswer = 'Yes'\nfor i in range(H):\n    for j in range(W):\n        if i!= 0:\n            if square[i - 1][j]!= square[i][j]:\n                answer = 'No'\n        if j!= 0:\n            if square[i][j - 1]!= square[i][j]:\n                answer = 'No'\n\nprint(answer)",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n.#.\\n###\\n.#.\") == 'Yes'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n#.#\\n###\\n.#.\") == \"Yes\"\n\nWhat is the worst-case complexity of your solution?\n\n'''\nimport sys\n\n'''\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n.#\\n###\\n.#\") == 'Yes'\nassert solution(\"3 3\\n.#\\n###\\n..\") == 'No'\nassert solution(\"3 3\\n..\\n#.\") == 'No'\nassert solution(\"3 3\\n.##\\n#.#\\n#.\") == 'Yes'\nassert solution(\"3 3\\n.##\\n#.#\\n###\\n#.\") == 'Yes'\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 79
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('.#.\\n###\\n.#.') == 'Yes'\nassert solution('...\\n...\\n...') == 'No'\nassert solution('...\\n##.\\n...') == 'Yes'\nassert solution('...\\n###\\n...') == 'No'\nassert solution('##.\\n##.\\n##.') == 'Yes'\n",
        "num_ids_2": 35,
        "num_ids_4": 68
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 3\n.#.\n###\n.#.''') == 'Yes'\n\nassert solution('''3 3\n.#.\n###\n.#.''') == 'Yes'\n\nassert solution('''3 3\n.#.\n###\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('.#.') == 'Yes'\nassert solution('#.#') == 'No'\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n#.\\n###\\n#.\") == \"Yes\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"100 100 100\") == \"No\"\nassert solution(\"1 1 10\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 30 20\") == 'Yes'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"30 10 20\") == \"Yes\"\nassert solution(\"20 30 10\") == \"No\"\nassert solution(\"20 30 30\") == \"No\"\nassert solution(\"30 10 30\") == \"No\"\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"5 5 5\") == \"No\"\nassert solution(\"30 20 10\") == \"No\"\nassert solution(\"5 5 5\") == \"Yes\"\n\n\"\"\"\nimport sys\nfrom typing import List",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n10 30 20\n\"\"\") == \"Yes\"\n\nassert solution(\n\"\"\"\n10 30 40\n\"\"\") == \"No\"\n\nassert solution(\n\"\"\"\n10 30 20\n\"\"\") == \"Yes\"\n\n\"\"\"\nhttps://atcoder.jp/contests/arc098/tasks/arc098_b\n\u5165\u529b\n5 3 2\n2 3 1\n\n\u51fa\u529b\nYes\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin=\"10 30 20\") == \"Yes\"\nassert solution(stdin=\"10 30 20\") == \"Yes\"\nassert solution(stdin=\"20 30 10\") == \"Yes\"\nassert solution(stdin=\"20 30 10\") == \"Yes\"\nassert solution(stdin=\"30 20 10\") == \"No\"\n\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 8 7 1') == 'Left'\n\nsolution('3 8 7 1')\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 8 7 1') == 'Left'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 8 7 1') == 'Left'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\nassert solution(\"1 1 1 1\") == \"Balanced\"\nassert solution(\"3 8 1 1\") == \"Right\"\nassert solution(\"1 1 1 1\") == \"Balanced\"\n",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"Left\"\nassert solution(\"3 3 3 3\") == \"Balanced\"\nassert solution(\"3 3 3 4\") == \"Right\"\nassert solution(\"5 1 1 1\") == \"Right\"\nassert solution(\"5 4 4 6\") == \"Left\"\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"\n\na, b, c, d = [int(n) for n in input().split()]\n\nprint(\"Left\" if a + b > c + d else \"Right\" if a + b < c + d else \"Balanced\")\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\nassert solution(\"3 5 7 1\") == \"Balanced\"\nassert solution(\"3 5 5 1\") == \"Right\"\n\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 40
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 0 1 0 0 0 1 0 1') == '8'\nassert solution('3 4 5 6 7 8 9 -2 -3 4 -2') == '8'\n\"\"\"\n\nN, *f = map(int, input().split())\nc = 0\nfor j in range(5):\n    for k in range(5):\n        for i in range(1, N + 1):\n            if f[i - 1] == 1 and j!= k:\n                c += 1\nprint(c)\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2''') == '8'\nassert solution('''3\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n''') == '8'\n\n-----Time Complexity-----\nO(N)\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\") == \"8\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n\") == \"8\"\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n\") == 8\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 6 7 8 9 2 -2 -3 4 -2\") == 8\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 0 1 0 0 0 1 0 1\\n1 1 1 1 1 1 1 1 1 1\") == \"7\"\nassert solution(\"5 1 1 1 1 1 1 1 0 0\\n0 1 1 1 1 1 1 1 1 1\") == \"15\"\nassert solution(\"4 1 1 1 1 1 1 1 0 0\\n1 1 1 1 1 1 1 1 1 1\") == \"8\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 62,
        "num_ids_4": 93
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 5 6 7 8 9 -2 -3 4 -2') == '8'\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n') == '8'\n\"\"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\") == \"8\"\nassert solution(\"3 4 5 6 7 8 9 -2 -3 4 -2\") == \"8\"",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n269-6650\") == \"Yes\"\n\"\"\"\n\nimport re",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"Yes\"\nassert solution(\"3 3\") == \"No\"\n\n\"\"\"\n\nimport unittest\nfrom io import StringIO\n\nclass TestStringMethods(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution(\"3 4\"), \"Yes\")\n    def test_2(self):\n        self.assertEqual(solution(\"3 3\"), \"No\")",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('269-6650') == \"Yes\"\n\"\"\"\n\n\"\"\"\n\u6700\u521d\u306e\u554f\u984c\u3067\u306f\u30d2\u30f3\u30c8\u3092\u5f15\u304d\u7d9a\u3051\u3066\u554f\u984c\u3092\u89e3\u3044\u305f\u3002\n\u305d\u3053\u3067\u7d44\u307f\u5408\u308f\u305b\u3066\u89e3\u3044\u305f\u3002\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"846-7390\") == \"No\"\nassert solution(\"111-1110\") == \"Yes\"\n\"\"\"\n\na, b = map(int, input().split())\ns = input()\nprint(\"Yes\" if a == int(s[len(s) - 1 - b]) and s[len(s) - 1 - b] == \"-\" and s.isdigit() else \"No\")\n",
        "num_ids_2": 27,
        "num_ids_4": 40
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"395-8165\") == \"No\"\nassert solution(\"123-4567\") == \"Yes\"\nassert solution(\"900-999\") == \"No\"\nassert solution(\"800-4\") == \"No\"\n",
        "num_ids_2": 26,
        "num_ids_4": 51
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3, 4) == \"Yes\"\nassert solution(2, 3) == \"No\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('269-6650') == 'Yes'\nassert solution('258-6501') == 'No'\nassert solution('8-1000') == 'Yes'\nassert solution('A-1000') == 'No'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 50
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('269-6650') == 'Yes'\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"269-56650\") == \"No\"\nassert solution(\"27-6650\") == \"No\"\nassert solution(\"26-6650\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('269-6650') == 'Yes'\nassert solution('92-89932') == 'No'\nassert solution('-7777') == 'No'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 38
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 6\") == 1\n\"\"\"\n\nfrom typing import List\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 6\") == \"1\"\nassert solution(\"2 4 8\") == \"4\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 6\") == '1'\n\n\"\"\"\n\n\"\"\"\nSolution Approach\n\nCreate a function dp which stores the minimum distance the second rectangle needs to be moved to to cover the first rectangle.\n\ndp[i][j] - minimum distance the second rectangle needs to be moved to cover the first rectangle\n\nAtCoDeer the deer found two rectangles lying on the table, each with height 1 and width W.\n\nIf we consider the surface of the desk as a two-dimensional plane, the first rectangle covers the vertical range of [0,1] and the horizontal range of [a,a+W], and the second rectangle covers the vertical range of [1,2] and the horizontal range of [b,b+W], as shown in the following figure:\n\nAtCoDeer will move the second rectangle horizontally so that it connects with the first rectangle.\n\nDefine the following functions:\n\n    The first rectangle is represented by a list of two integers: [a, a + w].\n    The second rectangle is represented by a list of two integers: [b, b + w].\n    The minimum distance is represented by an integer: d.\n\n\ndp[i][j] = min{dp[i][k] + abs(i - k)} for k in range(j)\n\nTime Complexity: O(n^2) where n is the number of lines in the input.\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 6\") == '1'\n\"\"\"\nimport sys\n\nn = list(map(int, input().split(' ')))\nw = n[0]\na = n[1]\nb = n[2]",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"3 2 6\"\"\"\n) == \"1\"\n\"\"\"\nW a b\n3 2 6\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2 6') == '1'\n\n------\nW, a, b = input().split()\nW = int(W)\na = int(a)\nb = int(b)\nprint(min(W - b, a))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 8 2') == '3 4 7 8'\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 8 2\\n') == '3\\n4\\n7\\n8\\n'\n\"\"\"\n\nimport sys",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 8 2\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\n\"\"\"\n\nimport math\n\na, b, k = [int(s) for s in input().split(' ')]\n\nnums = list(range(a, b + 1))\n\nkth_smallest = math.ceil(k / 2)\nkth_largest = math.ceil((b - a + 1 - k) / 2)",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\n\n-----------------------------\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'''3 8 2\n'''\n) == '''3\n4\n7\n8\n'''\nprint('PASSED')",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 8 2\") == \"3 4 7 8\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8 2\") == \"3\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\n'''\n\nA, B, K = map(int, stdin.readline().split())",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\n\"\"\"\n\ns = input()\n\nprint(s[0]+s[1:].lower())",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(AtCoder s Contest) == \"ABC\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\"\n\nimport sys",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 5 4''') == 'YES'\nassert solution('''1 4 2''') == 'NO'\n\"\"\"\n\nfrom itertools import product\n\nn_a, n_b, n_cats = [int(n) for n in stdin.split()]\n\ncomb = [n_b * [n_a], n_b * [n_b]]\ncomb = product(*comb)\ncomb = [i for i in comb if sum(i) == n_cats]",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 4\") == \"YES\"\nassert solution(\"4 5 5\") == \"NO\"\nassert solution(\"4 5 6\") == \"NO\"\nassert solution(\"4 5 8\") == \"YES\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\nassert solution(\"3 4 4\") == \"NO\"\n\"\"\"\n\nA, B, X = map(int, input().split())",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a) == output\n\n-----Explanation-----\nThe only possible answer is YES, since there are exactly 4 cats in total.\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 4') == 'YES'\nassert solution('2 2 2') == 'NO'\n\nimport sys\nfrom math import ceil\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5 4') == 'YES'\nassert solution('5 5 6') == 'NO'\nassert solution('1 1 1') == 'YES'\nassert solution('3 3 3') == 'NO'\nassert solution('4 2 1') == 'YES'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 5 4\\n') == 'YES'\nassert solution('3 5 4\\n') == 'NO'\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\n\"\"\"\n\nA, B, X = map(int, stdin.readline().split())\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4 3\") == \"YES\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100 17\") == \"83\"\n\"\"\"\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 17\") == \"83\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100 17\") == \"83\"\n\"\"\"\nimport math",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100 17') == '83'\nassert solution('1 0') == '1'\nassert solution('2 6') == '8'\n\"\"\"\n\nX, t = [int(num) for num in stdin.split()]\nresult = X\nfor _ in range(t):\n    result = (result * 3) // 2\nprint(result)\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100 17') == '83'\nassert solution('5 10') == '0'\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 17\") == \"83\"\nprint(solution(\"100 17\"))\n\n----\n3\n-2\n1\n0\n----\n5\n-5\n0\n0\n----\n1\n1\n0\n----\n5\n-5\n0\n0\n----\n3\n3\n0\n0\n----\n3\n-3\n0\n0\n----\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100 17') == '83'\n\"\"\"\nfrom sys import stdin\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100 17') == '83'\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 17\") == \"83\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 17\") == \"83\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\"\"\"\n\n\"\"\"\nimport sys\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == 6\n\"\"\"\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n4\n1 2 3 4\n''') == '-1'\nassert solution('''\n2\n1 2\n''') == '-1'\nassert solution('''\n5\n5 5 5 5 5\n''') == '0'\nassert solution('''\n2\n10 10\n''') == '1'\nassert solution('''\n2\n10 1\n''') == '10'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5\") == '12345'\n\"\"\"\nimport sys",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\") == \"120\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == \"40320\"\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 31,
        "num_ids_4": 52
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10\\n1 2 3\\n4 5 6\") == \"45\\n\"\nprint(solution(\"10 10\\n1 2 3\\n4 5 6\"))",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100 200\\n') == '100000000000000000000'\nassert solution('10 7\\n') == '10\\n'\nassert solution('10 9\\n') == '-1'\n\n-------\nn, *nums = map(int, input().split(' '))\nres = 1\nfor num in nums:\n    if res * num >= 10 ** 18:\n        print(-1)\n    else:\n        res *= num\nprint(res)\n\nassert solution('100 200\\n') == '100000000000000000000'\nassert solution('10 7\\n') == '10\\n'\n",
        "num_ids_2": 30,
        "num_ids_4": 59
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 100\") == 1000000000000000000\n\"\"\"\n\nimport math\n\nn = int(input())\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2') == '2'\nassert solution('1\\n0') == '0'\nassert solution('2\\n2\\n0\\n0') == '0'\nassert solution('2\\n5\\n5\\n0\\n0') == '0'\n\n\"\"\"\n\nfrom math import pow\n\nfrom sys import stdin\n",
        "num_ids_2": 26,
        "num_ids_4": 67
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 1 8\\n\") == \"16\\n\"\nassert solution(\"5\\n5 5 5 5 5\\n\") == \"25\\n\"\nassert solution(\"10\\n7 6 5 4 3 2 1\\n\") == \"-1\\n\"\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 64
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2018\\n218') == \"Yes\"\nprint(solution(stdin))\n\"\"\"\n\"\"\"\nThe total number of coins is of the order of 10^6. The algorithm is simple:\n\n1. Divide the total amount of money into A1 + A2 +... + AN amount of coins.\n2. Convert the number of coins into their respective denominations.\n3. Add the total number of coins to the total number of coins in step 1.\n4. Divide the number of coins in step 3 by the total number of coins in step 1.\n5. Use the recurrence relation above to complete the steps 3 and 4.\n6. Assume the result of step 4 is N. Then we need to know if this N is divisible by A1 + A2 +... + AN.\n7. If N is divisible by A1 + A2 +... + AN, then N can be divided into N1 + N2 +... + Nm coins such that\n   N1 + N2 +... + Nm = A1 + A2 +... + AN.\n8. Then we just need to compare the result of step 6 with N, if they are equal, we print Yes, otherwise, we print No.\n\n\"\"\"\n\nn = int(input())\na = int(input())\n\nm = int(n / a)\ns = 0\ni = 1\nwhile i <= m:\n    s += i\n    i *= 2",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2018\\n218\") == 'Yes'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\n\"\"\"\n\nimport sys\n\nTEST_CASE_SOLUTIONS = [\n    \"Yes\",\n    \"No\"\n]",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2018\\n218\") == 'Yes'\n\"\"\"\n\nimport sys\nimport time\n\n_, A = sys.stdin.readline().rstrip().split()\nA = int(A)\n\nN = int(sys.stdin.readline())\n\nstart = time.time()\n\nfor n in range(N // A + 1):\n    if A * n == N:\n        print('Yes')\n        exit()\n\nprint('No')\nprint(time.time() - start)\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'No'\nassert solution('1') == 'Yes'\nassert solution('2') == 'No'\nassert solution('3') == 'Yes'\nassert solution('4') == 'No'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\nprint(solution(\"2018\\n218\"))\n'''",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2018\\n218') == 'Yes'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == \"Yes\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'Yes'\nassert solution('2018\\n218') == 'Yes'\nassert solution('2018\\n17') == 'No'\nassert solution('2018\\n0') == 'No'\nassert solution('2018\\n0\\n5') == 'No'\n",
        "num_ids_2": 23,
        "num_ids_4": 49
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3 6') =='safe'\nassert solution('4 1 6') == 'dangerous'\n\n\"\"\"\n\nimport math\nimport sys\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 6') =='safe'\n\"\"\"\n\nx, a, b = map(int, input().split())",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 6\\n') =='safe'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\nassert solution(\"3 2 5\") == \"dangerous\"\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\nassert solution(\"4 1 6\") == \"dangerous\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 6\\n') =='safe'\nassert solution('4 3 5\\n') == 'dangerous'\nassert solution('3 3 6\\n') == 'dangerous'\nassert solution('1 1 1\\n') == 'delicious'\nassert solution('4 5 5\\n') == 'dangerous'\n",
        "num_ids_2": 29,
        "num_ids_4": 59
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 6\\n\") == \"safe\"\n\"\"\"\n\nimport sys\n\nx, a, b = map(int, sys.stdin.read().split())\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 6\\n') =='safe'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"9\"\n\"\"\"\nimport math\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == '9'\nassert solution('15') == '16'\nassert solution('19') == '16'\n\nassert solution('1') == '1'\nassert solution('2') == '1'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == '9'\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"9\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(10) == 9\nassert solution(10) == 9\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(10) == 9\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(10) == 9\nprint(solution(10))",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == '9'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(10) == 9\nassert solution(7) == 7\nassert solution(13) == 13\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == '9'\nassert solution('15') == '16'\nassert solution('11') == '10'\n\nprint(solution('10'))\nprint(solution('15'))\nprint(solution('11'))\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 1\\n3 2\") == \"10\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\n2 3\n1 1\n3 2\n\"\"\") == \"10\"\n\n\"\"\"\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 3\\n1 1\") == 10\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 1\\n3 2\") == \"10\"\nassert solution(\"4 4\\n1 1\\n2 2\\n3 3\\n4 4\") == \"10\"\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == 10\n\"\"\"\nimport math\n\nn = int(input().strip())",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 3\\n1 1\\n3 2') == '10'\n\"\"\"\nfrom fractions import gcd",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n\n\"\"\"\n\nfrom math import gcd\nfrom collections import Counter\nfrom itertools import combinations",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\nassert solution(\"abcde\") == \"no\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\nassert solution(\"conspiracy\") == \"no\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"no\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 47
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('uncopyrightable') == 'yes'\nassert solution('uncopyrightable') == 'yes'\nassert solution('uncopyrightable') == 'yes'\nassert solution('uncopyrightable') == 'yes'\nassert solution('uncopyrightable') == 'yes'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\nassert solution(\"abc\") == \"no\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"yes\"\n",
        "num_ids_2": 23,
        "num_ids_4": 46
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('WEEWW') == '1'\nassert solution('WWWWE') == '0'\nassert solution('WE') == '1'\nassert solution('W') == '1'\nassert solution('E') == '0'\n",
        "num_ids_2": 24,
        "num_ids_4": 44
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('WEEWW') == 1\n\n\"\"\"\n\nimport unittest\n\n\nclass Test_Approach1(unittest.TestCase):\n\n    def test_solution(self):\n        pass\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 EEWW\") == \"1\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\nWEEWW') == '1'\nassert solution('5\\nWEEWW\\nE') == '2'\nassert solution('5\\nWEEWW\\nW') == '2'\n\"\"\"\nimport sys\n",
        "num_ids_2": 33,
        "num_ids_4": 51
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5, \"WEEWW\") == 1\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"WEEWW\") == 1\n\"\"\"\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"WEEWW\") == \"1\"\nassert solution(\"WEWWE\") == \"2\"\nassert solution(\"WWWEEEW\") == \"0\"\n\nassert solution(\"W\") == \"1\"\nassert solution(\"WEWW\") == \"1\"\n",
        "num_ids_2": 24,
        "num_ids_4": 47
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5WEEWW') == 1\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5WEEWW') == 1\nassert solution('2WEWE') == 0\nassert solution('2EWWEW') == 2\nassert solution('3WWWEW') == 1\nassert solution('5WWWEW') == 1\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\nWEEWW') == 1\n\"\"\"\n\n\"\"\"\n2.5\n10^3\nBinary Search\n\n10^3\n\nYou are given a sorted array of n distinct integers and a value.\nFind if value is in the array.\nDo it in O(log(n)) time.\n\n-----Constraints-----\n - n == A.length\n - 1 \\leq n \\leq 10^3\n - 1 \\leq A[i] \\leq 10^3\n\n-----Input-----\nThe first line of input contains T denoting the number of testcases.\nThe first line of each testcase contains two integers n and k.\nThe second line of each testcase contains n space separated integers denoting the array A.\nThe third line of each testcase contains a single integer denoting value.\n\n-----Output-----\nPrint \"Yes\" if value is present in the array A.\nPrint \"No\" if value is not present in the array A.\n\n-----Sample Input-----\n2\n4 2\n1 2 3 4\n2\n2 1\n2 3\n\n-----Sample Output-----\nYes\nNo\n\n\"\"\"\n\n\"\"\"\n2.5\n10^3\nBinary Search\n\n10^3\n\nYou are given a sorted array of n distinct integers and a value.\nFind if value is in the array.\nDo it in O(log(n)) time.\n\n-----Constraints-----\n - n == A.length\n - 1 \\leq n \\leq 10^3\n - 1 \\leq A[i] \\leq 10^3\n\n-----Input-----\nThe first line of input contains T denoting the number of testcases.\nThe first line of each testcase contains two integers n and k.\nThe second line of each testcase contains n space separated integers denoting the array A.\nThe third line of each testcase contains a single integer denoting value.\n\n-----Output-----\nPrint \"Yes\" if value is present in the array A.\nPrint \"No\" if value is not present in the array A.\n\n-----Sample Input-----\n2\n4 2\n1 2 3 4\n2\n2 1\n2 3\n\n-----Sample Output-----\nYes\nNo\n\"\"\"\n\n\"\"\"\n2.6\n10^3\nBinary Search\n\n10^3\n\nYou are given an array A of size n that contains non-negative integers.\nYou need to count the number of ways in which array A can be arranged such that there are no three numbers A[i], A[j] and A[k] such that A[i] + A[j] + A[k] is equal to 0.\n\n-----Constraints-----\n - n == A.length\n - 0 \\leq A[i] \\leq 10^3\n\n-----Input-----\nThe first line of input contains T denoting the number of testcases.\nThe first line of each testcase contains a single integer n denoting the size of the array.\nThe second line of each testcase contains n space separated integers denoting the elements of the array.\n\n-----Output-----\nPrint the number of ways in which array A can be arranged such that there are no three numbers A[i], A[j] and A[k] such that A[i] + A[j] + A[k] is equal to 0.\n\n-----Sample Input-----\n3\n2\n2 1 -1\n1\n2\n\n-----Sample Output-----\n1\n2\n0\n\n\"\"\"\n\n\"\"\"\n2.7\n10^3\nMatrix Chain Multiplication\n\n10^3\n\nYou are given a chain of matrices M1, M2,..., Mn.\nYou are required to multiply the chain from left to right.\nMatrix Ai has dimension pi x qi, where p is the number of rows and q is the number of columns.\nYou are required to complete the function MatrixChainOrder(), which should return the minimum number of multiplications needed to multiply the chain.\nYou cannot use a temporary variable.\nThe order of the chain must be from left to right.\n\n-----Constraints-----\n - 2 \\leq N \\leq 10^3\n - 1 \\leq Ni, qi \\leq 10^5\n\n-----Input-----\nThe first line of input contains T, the number of testcases.\nThe first line of each testcase contains one integer N, the number of matrices in the chain.\nThe next N lines contain one space separated integer Ni and Qi for each matrix.\n\n-----Output-----\nPrint the minimum number of multiplications needed to multiply the chain from left to right.\n\n-----Sample Input-----\n1\n4\n2 2\n2 3\n3 4\n\n-----Sample Output-----\n3\n\n\"\"\"\n\n\"\"\"\n2.8\n10^3\nMinimum Flips to Make String Palindrome\n\n10^3\n\nGiven a string s. You are allowed to convert it to a palindrome by adding characters in front of it.\nFind and return the minimum number of characters that are needed to be added.\n\n-----Constraints-----\n - n == s.length\n - 1 \\leq n \\leq 10^3\n - s contains only lowercase English letters.\n\n-----Input-----\nThe first and only line of input contains a string s.\n\n-----Output-----\nPrint the minimum number of characters that are needed to be added to make the string palindrome.\n\n-----Sample Input-----\nabdbca\n\n-----Sample Output-----\n1\n\nExplanation\nWe can add 'b' in front of s, so that s becomes \"bdbca\".\nWe can't add 'd' because it will make the string non-palindrome.\nWe can add 'c' at the end so that the string becomes \"bbdbcac\".\nAdding 'b' in front and 'c' at the end adds 1 character so the answer is 1.\n\n\"\"\"\n\n\"\"\"\n2.9\n10^3\nMinimum Distance Between BST Nodes\n\n10^3\n\nGiven a Binary Search Tree (BST), find the minimum absolute difference between the values of any two different nodes in the tree.\n\n-----Constraints-----\n - 10^5 \\leq N \\leq 10^5\n\n-----Input-----\nFirst and only line of input contains an integer N, the number of nodes in the BST.\nNext line contains N space-separated integers describing the values of the nodes.\n\n-----Output-----\nPrint the minimum absolute difference between the values of any two different nodes in the BST.\n\n-----Sample Input-----\n7\n4 2 1 3 6 7\n\n-----Sample Output-----\n1\n\nExplanation\nThe minimum absolute difference between the values of any two different nodes in the BST is 1.\n\n\"\"\"\n\n\"\"\"\n2.10\n10^3\nMinimum Swaps to Make String a Palindrome\n\n10^3\n\nGiven a string s. You are allowed to swap any two characters in the string.\nFind the minimum number of swaps required to make the string a palindrome string.\n\n-----Constraints-----\n - n == s.length\n - 1 \\leq n \\leq 10^3\n - s contains only lowercase English letters.\n\n-----Input-----\nThe first and only line of input contains a string s.\n\n-----Output-----\nPrint the minimum number of swaps required to make the string a palindrome string.\n\n-----Sample Input-----\naab\n\n-----Sample Output-----\n1\n\nExplanation\nWe can swap the first and",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n1 4') == '2\\n2\\n1\\n1'\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n1 4') == '2 2 1 1'\nassert solution('1 2\\n2 3') == '2 2'\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n\n--------\n\n2\n8\n2 3\n1 6\n1 6\n3 5\n4 7\n5 4\n6 8\n7 1\n1 2\n3 4\n5 6\n7 8\n3 4\n7 6\n8 5\n4 1\n3 5\n1 4\n2 6\n5 8\n4 8\n6 7\n7 3\n6 5\n3 2\n8 7\n1 4\n2 6\n1 5\n2 3\n1 2\n8 7\n7 3\n6 4\n4 5\n7 6\n3 5\n6 4\n5 8\n2 6\n8 4\n1 3\n4 7\n4 5\n7 6\n5 3\n3 6\n6 2\n5 6\n7 4\n8 3\n6 2\n3 7\n4 6\n5 4\n2 8\n7 8\n5 3\n4 1\n2 6\n4 6\n5 2\n8 3\n1 7\n3 8\n6 2\n3 4\n4 8\n6 7\n3 2\n7 4\n2 4\n3 2\n4 8\n7 3\n5 7\n6 1\n3 8\n8 4\n4 7\n5 6\n7 8\n3 6\n6 1\n8 3\n4 4\n8 3\n3 7\n5 2\n6 3\n6 7\n8 1\n7 4\n8 3\n3 5\n8 2\n3 4\n6 2\n2 7\n4 7\n6 1\n3 7\n4 6\n5 1\n8 4\n7 7\n8 5\n2 1\n1 5\n6 1\n2 1\n2 6\n8 2\n4 5\n7 1\n5 6\n5 3\n3 5\n3 7\n1 1\n5 2\n8 6\n4 8\n7 6\n4 4\n7 7\n4 6\n2 8\n3 7\n5 1\n5 3\n8 7\n1 3\n4 4\n5 1\n5 6\n2 3\n4 7\n3 6\n7 2\n6 3\n8 5\n7 1\n4 2\n1 3\n6 1\n7 4\n8 2\n7 7\n7 3\n6 3\n7 4\n6 5\n8 5\n5 4\n6 5\n5 5\n5 7\n7 1\n7 2\n6 8\n4 1\n6 2\n4 2\n1 6\n8 2\n6 2\n3 2\n8 3\n4 4\n1 7\n5 6\n5 4\n7 5\n3 8\n6 2\n7 3\n4 7\n6 3\n4 1\n7 1\n3 8\n6 3\n3 3\n4 4\n5 3\n7 5\n6 8\n6 2\n4 5\n2 1\n2 1\n3 3\n2 3\n3 4\n6 6\n3 5\n5 7\n4 5\n3 1\n4 4\n2 2\n3 6\n4 5\n3 5\n2 5\n1 4\n4 4\n6 7\n5 4\n7 6\n6 4\n2 3\n4 1\n5 4\n5 1\n8 1\n6 1\n5 6\n7 5\n4 4\n5 7\n5 5\n6 5\n5 1\n1 2\n4 8\n7 1\n2 5\n7 7\n7 7\n3 6\n6 2\n5 8\n5 5\n5 1\n6 7\n2 7\n3 7\n3 4\n6 5\n8 4\n6 6\n7 4\n6 6\n1 1\n4 7\n2 3\n6 6\n8 4\n6 5\n7 6\n4 7\n5 3\n6 7\n6 3\n4 7\n3 2\n6 6\n5 5\n7 4\n5 7\n3 6\n7 3\n8 3\n1 4\n3 5\n5 6\n5 4\n3 7\n7 5\n5 6\n6 2\n8 4\n5 7\n2 2\n8 6\n4 3\n5 6\n2 5\n7 7\n6 1\n6 6\n5 4\n4 5\n6 7\n6 7\n4 1\n2 6\n3 8\n7 7\n5 1\n5 7\n5 1\n4 4\n3 6\n8 7\n5 6\n7 3\n3 4\n5 1\n6 6\n8 7\n4 1\n5 4\n5 4\n6 6\n3 5\n7 5\n5 6\n4 5\n5 5\n3 3\n5 1\n3 5\n5 4\n3 6\n7 2\n5 1\n2 6\n8 5\n5 5\n8 5\n2 7\n3 6\n8 2\n1 6\n5 7\n8 7\n4 6\n3 4\n7 2\n8 1\n5 6\n7 6\n8 5\n8 7\n3 1\n3 4\n1 1\n4 1\n4 1\n2 1\n5 2\n4 2\n7 3\n5 5\n8 3\n7 4\n5 1\n6 2\n4 7\n5 7\n7 6\n5 5\n2 1\n6 4\n1 6\n1 4\n5 7\n7 3\n7 4\n6 4\n3 2\n4 7\n5 1\n5 7\n3 6\n8 4\n7 2\n4 6\n3 7\n7 6\n3 7\n4 1\n2 4\n7 4\n6 6\n4 6\n2 6\n5 1\n2 1\n3 2\n5 1\n7 6\n2 4\n3 4\n5 7\n6 4\n5 6\n5 6\n5 2\n1 5\n1 1\n8 7\n4 7\n7 2\n5 7\n8 3\n4 4\n5 3\n4 1\n5 5\n5 6\n5 5\n2 4\n3 6\n4 7\n3 6\n2 5\n6 2\n2 3\n3 1\n5 4\n7 5\n5 6\n4 6\n1 1\n1 1\n5 4\n6 4\n5 1\n5 6\n2 6\n3 5\n3 4\n5 1\n3 7\n5 7\n5 6\n8 1\n4 1\n6 4\n3 3\n4 6\n4 5\n4 4\n3 1\n4 6\n6 3\n5 5\n8 5\n4 2\n3 7\n1 6\n5 6\n3 5\n6 5\n6 6\n2 1\n5 1\n4 7\n4 4\n3 3\n3 5\n5 6\n5 5\n5 5\n2 5\n7 2\n6 2\n3 3\n5 6\n8 4\n5 4\n5 7\n7 1\n2 5\n4 6\n5 1\n6 6\n6 5\n4 6\n4 4\n8 2\n4 2\n7 6\n7 2\n7 7\n8 5\n1 1\n6 6\n3 2\n4 5\n5 2\n3 3\n4 7\n6 1\n7 3\n5 7\n5 7\n5 2\n6 3\n7 4\n6 2\n7 4\n5 5\n8 3\n4 7\n2 7\n3 4\n1 4\n5 2\n2 4\n7 3\n5 7\n6 1\n6 1\n4 7\n1 3\n5 3\n3 4\n2 7\n7 3\n3 4\n5 2\n2 6\n7 7\n3 3\n7 7\n4 7\n7 6\n3 4\n6 1\n8 6\n1 4\n2 2\n5 7\n8 2\n4 5\n4 1\n3 1\n6 2\n5 7\n3 2\n1 3\n5 3\n6 6\n7 1\n3 3\n5 6\n5 1\n5 7\n8 6\n3 7\n1 4\n4 7\n6 1\n3 3\n5 1\n5 4\n5 1\n5 1\n4 3\n3 2\n5 6\n3 1\n4 6\n7",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n1 4') == '2\\n2\\n1\\n1'\n\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == '2 2 1 1'",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n1 4') == '2\\n2\\n1\\n1'\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == '2\\n2\\n1\\n1'\nassert solution(\"6 3\\n1 2\\n2 3\\n3 4\\n1 5\\n2 5\") == '4\\n2\\n1\\n3\\n2\\n1'\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\") == '2\\n1\\n2\\n1\\n1'\nassert solution(\"3 4\\n1 2\\n2 3\\n3 1\") == '2\\n1\\n1\\n1'\nassert solution(\"6 2\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == '2\\n2\\n1\\n1\\n1\\n1'\n\nimport io\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdin = io.StringIO(input)\n        stdout = io.StringIO()\n        try:\n            sys.stdin = stdin\n            sys.stdout = stdout\n            solution()\n            sys.stdin = sys.__stdin__\n            sys.stdout = sys.__stdout__\n        except:\n            sys.stdin = sys.__stdin__\n            sys.stdout = sys.__stdout__\n            raise\n        self.",
        "num_ids_2": 78,
        "num_ids_4": 149
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n5\\n10\\n15') == '25'\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '3\\n5\\n10\\n15'\n) == '25'\n\nassert solution(\n    '3\\n10\\n5\\n15'\n) == '30'\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5\\n10\\n15\\n\") == \"25\\n\"\nassert solution(\"4\\n20\\n15\\n10\\n\") == \"30\\n\"\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5\\n10\\n15\\n\") == \"25\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n5\\n10\\n15\\n\") == \"25\"\nassert solution(\"1\\n5\\n10\\n15\\n\") == \"30\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n5\\n10\\n15\\n') == '25'\nassert solution('3\\n5\\n10\\n') == '30'\n\nimport sys; input = sys.stdin.readline\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"3\\n5\\n10\") == \"30\"\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5\\n10\\n15\\n\") == \"25\"\nassert solution(\"3\\n3\\n3\\n3\\n\") == \"30\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"3\\n0\\n10\\n15\") == \"30\"\n\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('10 10 5') == '30'\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aabbca') == 2\n\"\"\"\n\n\"\"\"\nimport math\n\nN = int(stdin.readline())\nS = stdin.readline().strip()",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aabbca\") == 2\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aabbca\") == 2\n\"\"\"\n\nimport math",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aabbca') == 2\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abbca') == 2\nassert solution('aabbca') == 2\nassert solution('aabbcb') == 3\n\"\"\"\n\nimport sys\nfrom collections import Counter\n",
        "num_ids_2": 19,
        "num_ids_4": 29
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aabbca') == 2\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aabbca') == 2\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aabbca') == 2\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ab') == '1'\nassert solution('aabbc') == '2'\nassert solution('aabcc') == '2'\nassert solution('aaaaa') == '1'\nassert solution('aaaab') == '2'\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aabbca\") == 2\n\"\"\"\n\n\"\"\"\nSolution:\n\nfor each of the string split by a space, we count the unique letters of the two strings.\nWe add the larger count of the two strings to the result.\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Rainy\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('Sunny') == 'Cloudy'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\n\nassert solution(\"Cloudy\") == \"Rainy\"\n\nassert solution(\"Rainy\") == \"Sunny\"\n\nassert solution(\"Rainy\") == \"Rainy\"\n\nassert solution(\"Rainy\") == \"Rainy\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\n\nassert solution(\"Cloudy\") == \"Rainy\"\n\nassert solution(\"Rainy\") == \"Sunny\"\n\nassert solution(\"Rainy\") == \"Cloudy\"\n\nassert solution(\"Cloudy\") == \"Rainy\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"Sunny\"\n) == \"Cloudy\"\nassert solution(\n    \"Cloudy\"\n) == \"Rainy\"\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Rainy'\nassert solution('Rainy') == 'Sunny'\n\"\"\"\n\nimport unittest\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Sunny'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Rainy'\nassert solution('Rainy') == 'Sunny'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 17 120') == '119'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 17 120\") == '119'\nassert solution(\"6 20 200\") == '184'\nassert solution(\"1 10 200\") == '204'\nassert solution(\"10 200 200\") == '200'\n\"\"\"\n\nfrom math import gcd",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 17 120') == '119'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n\"\"\"\n\nimport math\n\nn, a, b = map(int, input().split())",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 17 120\\n') == '119'\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 17 120') == '119'\n\"\"\"\n\nN, A, B = map(int, input().split())",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 17 120') == '119'\nassert solution('6 23 210') == '211'\nassert solution('4 23 210') == '211'\nassert solution('6 23 210') == '211'\nassert solution('7 17 120') == '119'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 17 120') == '119'\nprint(solution(input()))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 17 120') == \"119\"\nassert solution('6 19 600') == \"2376\"\nassert solution('1 1 2') == \"0\"\nassert solution('6 19 1') == \"0\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 25,
        "num_ids_4": 49
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n') == '3800'\nassert solution('2 2\\n') == '10200'\nassert solution('3 3\\n') == '100800'\nassert solution('4 4\\n') == '1280000'\nassert solution('5 5\\n') == '1475000'\n\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1') == '3800'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '2875'\nassert solution('1\\n1\\n') == '100'\nassert solution('1\\n1\\n') == '2875'\nassert solution('1\\n1\\n') == '2875'\nassert solution('1\\n1\\n') == '2875'\n",
        "num_ids_2": 26,
        "num_ids_4": 58
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1') == '3800'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n') == '3800'\n\"\"\"\n\nimport math\nimport sys\n\ninput = lambda: sys.stdin.readline().rstrip()\n\nN, M = map(int, input().split())\n\nprint(math.ceil(M * 2 + N * 3))\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '0'\nassert solution('N M\\n5 1') == '3800'\n\"\"\"\n\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n\") == \"3800\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n') == '3800'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == None\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('a') == 'b'\nassert solution('aac') == 'b'\nassert solution('abac') == 'b'\nassert solution('abaca') == 'c'\nassert solution('abc') == None\n\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"atcoderregularcontest\") == 'b'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == None\nassert solution('a') == 'b'\nassert solution('aa') == 'b'\nassert solution('abc') == 'c'\nassert solution('aab') == 'b'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('atcoderregularcontest') == 'b'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n\nimport collections",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n\n\nimport sys\n\nstdin = sys.stdin.readlines()\nS = stdin[0][0:-1]\n\n\nalphabet = [chr(i) for i in range(ord('a'), ord('z')+1)]\nletters = set(S)\nalphabet.sort()\n\nfor letter in alphabet:\n    if letter not in letters:\n        print(letter)\n        break",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\nprint(solution(\"atcoderregularcontest\"))\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\n\"\"\"\n\ns = stdin\n\ncheck = set()\n\nfor i in s:\n    if i not in check:\n        check.add(i)\n    else:\n        print(i)\n        break\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 4 4 3\") == '4\\n3\\n3\\n4'\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n\"\"\"\n\n\"\"\"\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438:\n\u0414\u0430\u043d\u044b 5 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b: X_1, X_2, X_3, X_4, X_5.\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 5 \u0431\u0435\u0437 \u043e\u0441\u0442\u0430\u0442\u043a\u0430 \u043f\u0440\u0438 \u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u043d\u0430 5 \u0438 \u043d\u0430 10.\n\n-----Constraints-----\n - 1 \\leq X_i \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\n-----Output-----\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n-----Sample Input-----\n8\n9 10\n4 5\n6 7\n\n-----Sample Output-----\n7\n\n\"\"\"\n\n\"\"\"\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438:\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u0432\u0441\u0435 \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0435 \u043e\u0442\u0440\u0435\u0437\u043a\u0443 [\u2212100, 100], \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 3 \u0438 5 \u0431\u0435\u0437 \u043e\u0441\u0442\u0430\u0442\u043a\u0430.\n\n-----Constraints-----\n - 100 \\leq A_i \\leq 100\n - All values in input are integers.\n\n-----Input-----\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\n-----Output-----\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n-----Sample Input-----\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n\n-----Sample Output-----\n-5 -3 -1\n\n\"\"\"\n\n\"\"\"\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438:\n\u0414\u0430\u043d\u044b \u0434\u0432\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 A \u0438 B (A \\leq B).\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u0438\u0445 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0431\u0449\u0438\u0439 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c, \u043e\u0431\u0449\u0438\u0439 \u043a\u0440\u0430\u0442\u043d\u043e\u0439 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0438\u0437 \u044d\u0442\u0438\u0445 \u0447\u0438\u0441\u0435\u043b, \u0438 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043e\u043d \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043d\u0438\u0445.\n\n-----Constraints-----\n - A \\leq B\n - All values in input are integers.\n\n-----Input-----\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0434\u0432\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 A \u0438 B, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\n-----Output-----\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n-----Sample Input-----\n5 8\n\n-----Sample Output-----\n1\n\n\"\"\"\n\n\"\"\"\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438:\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nn.\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0439 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0441 \u0432\u044b\u0441\u043e\u0442\u043e\u0439 \u0440\u0430\u0432\u043d\u043e\u0439 nn, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u043c:\n\n1\n22\n333\n4444\n55555\n\n-----Constraints-----\n - n \\leq 100000\n - n is integer\n\n-----Input-----\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n-----Output-----\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c.\n\n-----Sample Input-----\n5\n\n-----Sample Output-----\n1\n22\n333\n4444\n55555\n\n\"\"\"\n\n\"\"\"\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438:\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nn.\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0439 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0441 \u0432\u044b\u0441\u043e\u0442\u043e\u0439 \u0440\u0430\u0432\u043d\u043e\u0439 nn, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u043c:\n\n1\n22\n333\n4444\n55555\n\n-----Constraints-----\n - n \\leq 100000\n - n is integer\n\n-----Input-----",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\n-----------------------------------------------------\n\n-----------------------------------------------------",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 4 3\") == '4\\n3\\n3\\n4'\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\"\n\nn = int(stdin.readline())\nA = list(map(int, stdin.readline().split()))",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 4 3\") == \"4\"\nassert solution(\"4 2 4 3\") == \"4\"\n\"\"\"\n\nimport heapq\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 4 3\") == \"4\\n3\\n3\\n4\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 4 4 3\") == '4\\n3\\n3\\n4'\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\"\n\nfrom typing import List, Callable, Union, Iterator\n\nIntList = List[int]",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2 4 2 1\") == 2\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input_string) == output_string\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2 4 2 1\\n\") == \"2\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 2\") == '0\\n'\nassert solution(\"7\\n1 1 1 1 1 1 1\") == '1\\n'\nassert solution(\"6\\n1 1 1 1 1 1\") == '0\\n'\nassert solution(\"4\\n4 4 4 4\") == '1\\n'\nassert solution(\"2\\n2 2\") == '0\\n'\n",
        "num_ids_2": 40,
        "num_ids_4": 78
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n3 4 5 6') == '0'\nassert solution('6\\n3 4 5 6 2 1') == '5'\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1\\n1 2') == 1\nassert solution('1 1\\n1 2\\n2 1') == 2\nassert solution('1 1\\n1 2\\n2 2') == 0\nassert solution('1 1\\n1 2\\n2 2\\n1 1') == 1\n\nassert solution('4\\n2 4\\n1 1\\n3 2\\n2 2\\n2 3') == 5\n\nprint('All tests passed.')\n",
        "num_ids_2": 30,
        "num_ids_4": 68
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4') == '2'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 2 4 2 1') == 2\n\n\"\"\"\n\nimport math\nimport sys\n\nimport pytest\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 2 3 4\") == \"6\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n3 1 2 4 2 1') == 2\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n7 1\\n2\\n5\\n10\") == \"8\"\nassert solution(\"4\\n3 7\\n2\\n10\") == \"16\"\nassert solution(\"2\\n7 1\\n2\\n5\\n10\") == \"8\"\n\n\"\"\"",
        "num_ids_2": 43,
        "num_ids_4": 66
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 7 1 2 5 10\") == \"8\"\nassert solution(\"4 10 1 1\") == \"9\"\nassert solution(\"100 2 100\") == \"200\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"4 5 2 1\") == \"10\"\n",
        "num_ids_2": 28,
        "num_ids_4": 51
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1\\n2\\n5\\n10\\n') == '8'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 7 1 2 5 10') == '8'\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7 1 2 5\") == 8\n\"\"\"\n\nimport math",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n7 1\\n2\\n5\\n10\\n') == '8'\n\nassert solution('3\\n7 2\\n2\\n5\\n10\\n') == '10'\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n7 1\\n2\\n5\\n10') == '8'\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n2\\n10\\n4\") == \"18\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n7 1\\n2\\n5\\n10\") == \"8\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n2\\n2\\n100') == '2'\nassert solution('1\\n1\\n1\\n50') == '0'\nassert solution('1\\n0\\n0\\n50') == '0'\nassert solution('0\\n0\\n0\\n50') == '0'\nassert solution('0\\n0\\n0\\n1') == '1'\n\"\"\"\nfrom functools import lru_cache",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2\n2\n2\n100''') == '2'\nassert solution('''2\n2\n1\n100''') == '2'\nassert solution('''2\n2\n1\n100''') == '0'\nassert solution('''2\n1\n1\n100''') == '0'\nassert solution('''2\n1\n0\n100''') == '0'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2\n2\n2\n100''') == '2'\n\n'''\nUsing the formula, x = a + b + c.\nWe want to solve the equation:\n500 + 100 + 50 = x\n\nWe know that 500 + 100 + 50 = x\n500 = a\n100 = b\n50 = c\n\n500 = a + b\n100 = b + c\n50 = c + a\n\nTherefore,\na + b + c = x\na = x - b - c\nb = x - 2a - c\nc = x - 2a - b\n\na = (x - b - c) / 2\nb = (x - 2a - c) / 2\nc = (x - 2a - b) / 2\n'''\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n3\\n100\") == \"1\"\nassert solution(\"2\\n2\\n2\\n100\") == \"2\"\nassert solution(\"2\\n2\\n2\\n3\") == \"0\"\n\n-----",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == 2\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\nassert solution(\"0\\n0\\n0\\n100\") == \"1\"\nassert solution(\"1\\n1\\n1\\n100\") == \"1\"\nassert solution(\"0\\n0\\n0\\n1\") == \"1\"\nassert solution(\"2\\n1\\n2\\n100\") == \"0\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\nassert solution(\"2\\n2\\n1\\n100\") == \"2\"\nassert solution(\"2\\n2\\n1\\n1\") == \"0\"\nassert solution(\"2\\n2\\n2\\n100\") == \"1\"\nassert solution(\"1\\n2\\n3\\n100\") == \"0\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 1 100') == '2'\nassert solution('6 0 1 1') == '1'\nassert solution('6 0 0 1') == '0'\nassert solution('1 1 1 1') == '1'\nassert solution('1 1 0 1') == '1'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3 2\") == 'Yes'\nassert solution(\"3 1 3\") == 'No'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\n\"\"\"\nimport sys\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3 2') == 'Yes'\n\"\"\"\n\nimport sys\nimport os",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 2\\n') == 'Yes'\nassert solution('1 2 1\\n') == 'Yes'\nassert solution('0 2 1\\n') == 'No'\nassert solution('1 1 1\\n') == 'Yes'\nassert solution('0 0 1\\n') == 'No'\n\nprint(\"All test cases passed.\")\n\n-----\n\nJava Code:\n\npublic class Solution {\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        String a, b, c;\n        Scanner sc = new Scanner(System.in);\n        a = sc.next();\n        b = sc.next();\n        c = sc.next();\n        if (Integer.parseInt(a) >= Integer.parseInt(b) && Integer.parseInt(a) <= Integer.parseInt(c))\n        {\n            System.out.println(\"Yes\");\n        }\n        else\n        {\n            System.out.println(\"No\");\n        }\n    }\n}\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3 2\\n') == 'Yes\\n'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3 2') == 'Yes'\nassert solution('2 3 1') == 'No'\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1, 3, 2) == \"Yes\"\nassert solution(3, 1, 2) == \"No\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"1 3 1\") == \"No\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 1000\n120\n100\n140''') == '9'\n\nassert solution('''3 1000\n120\n100\n140''') == '9'\n\nassert solution('''2 100\n110\n100''') == '1'\n\nassert solution('''2 100\n110\n200''') == '0'\n\nassert solution('''2 100\n110\n200''') == '0'\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1000\\n120\\n100\\n140\\n') == '9'\n\nimport codewars_test as test\n\ntest.assert_equals(solution('3 1000\\n120\\n100\\n140\\n'), '9')\n\n---Problem---\n\nYou have a hot dog recipe and you know the current capacity of a pot. You are able to put the hot dog in the pot without causing it to overflow. You can set the hot dog's base capacity to a certain value, but you cannot change it. This value is called the base capacity of the hot dog.\nThere are different toppings that can be added to the hot dog. Each of them will increase the base capacity of the hot dog by a certain amount. The base capacity of each topping is called its capacity multiplier.\nYou have built a function called hotDogCapacity() which will return the capacity of a hot dog with the specified base capacity and topping multiplier.\nThe base capacity of the hot dog is 1.\nThe maximum capacity of the hot dog is 5.\nIf the base capacity is greater than the maximum capacity, return the maximum capacity.\n\n-----Constraints-----\n - 2 \u2264 N \u2264 100\n - 1 \u2264 m_i \u2264 1000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nBaseCapacity\nToppingMultiplier\n:\nBaseCapacity\nToppingMultiplier\n\n-----Output-----\nPrint the maximum number of toppings that can be added to the hot dog without causing it to overflow.\n\n-----Sample Input-----\n1\n1\n3\n1\n3\n5\n2\n4\n\n-----Sample Output-----\n2\n\nHere are some cases of the base capacity and the topping multiplier that will be tested:\n\nCase 1. The base capacity is 1, the topping multiplier is 1.\nThe maximum number of toppings that can be added to the hot dog without causing it to overflow is 2.\nCase 2. The base capacity is 5, the topping multiplier is 2.\nThe maximum number of toppings that can be added to the hot dog without causing it to overflow is 2.\nCase 3. The base capacity is 5, the topping multiplier is 4.\nThe maximum number of toppings that can be added to the hot dog without causing it to overflow is 2.\nCase 4. The base capacity is 10, the topping multiplier is 3.\nThe maximum number of toppings that can be added to the hot dog without causing it to overflow is 2.\nCase 5. The base capacity is 10, the topping multiplier is 5.\nThe maximum number of toppings that can be added to the hot dog without causing it to overflow is 3.",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n3 1000\n120\n100\n140\n\"\"\"\n) == \"9\"\n\nassert solution(\n\"\"\"\n4 100\n300\n300\n300\n300\n\"\"\"\n) == \"3\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1000\\n120\\n100\\n140\\n') == '9'\n\"\"\"\nfrom itertools import accumulate\nfrom operator import add",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1000\\n120\\n100\\n140\\n') == '9'\n\n----",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1000\\n120\\n100\\n140\\n') == '9'\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '0'\nassert solution('3 1000\\n120\\n100\\n140') == '9'\nassert solution('3 1000\\n100\\n140\\n100\\n120') == '9'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 53
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"\n\"\"\"\n\nN, X = map(int, stdin.readline().split())\n\nimport math",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\napple\\n: \\napple\\n') == '2\\n'\nassert solution('1\\napple\\n: \\napple\\n') == '1\\n'\n\"\"\"\n\n\"\"\"\nYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - S_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n-----Output-----\nPrint the number of kinds of items you got.\n\n-----Sample Input-----\n3\napple\norange\napple\n\n-----Sample Output-----\n2\n\nYou got two kinds of items: apple and orange.\n\"\"\"\n\n\"\"\"\nYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - S_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n-----Output-----\nPrint the number of kinds of items you got.\n\n-----Sample Input-----\n3\napple\norange\napple\n\n-----Sample Output-----\n2\n\nYou got two kinds of items: apple and orange.\n\"\"\"\n\n\"\"\"\nYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - S_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n-----Output-----\nPrint the number of kinds of items you got.\n\n-----Sample Input-----\n3\napple\norange\napple\n\n-----Sample Output-----\n2\n\nYou got two kinds of items: apple and orange.\n\"\"\"\n\n\"\"\"\nYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - S_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n-----Output-----\nPrint the number of kinds of items you got.\n\n-----Sample Input-----\n3\napple\norange\napple\n\n-----Sample Output-----\n2\n\nYou got two kinds of items: apple and orange.\n\"\"\"\n\n\"\"\"\nYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - S_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n-----Output-----\nPrint the number of kinds of items you got.\n\n-----Sample Input-----\n3\napple\norange\napple\n\n-----Sample Output-----\n2\n\nYou got two kinds of items: apple and orange.\n\"\"\"\n\n\"\"\"\nYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - S_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n-----Output-----\nPrint the number of kinds of items you got.\n\n-----Sample Input-----\n3\napple\norange\napple\n\n-----Sample Output-----\n2\n\nYou got two kinds of items: apple and orange.\n\"\"\"\n\n\"\"\"\nYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - S_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n-----Output-----\nPrint the number of kinds of items you got.\n\n-----Sample Input-----\n3\napple\norange\napple\n\n-----Sample Output-----\n2\n\nYou got two kinds of items: apple and orange.\n\"\"\"\n\n\"\"\"\nYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - S_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n-----Output-----\nPrint the number of kinds of items you got.\n\n-----Sample Input-----\n3\napple\norange\napple\n\n-----Sample Output-----\n2\n\nYou got two kinds of items: apple and orange.\n\"\"\"\n\n\"\"\"\nYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - S_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n-----Output-----\nPrint the number of kinds of items you got.\n\n-----Sample Input-----\n3\napple\norange\napple\n\n-----Sample Output-----\n2\n\nYou got two kinds of items: apple and orange.\n\"\"\"\n\n\"\"\"\nYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - S_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n-----Output-----\nPrint the number of kinds of items you got.\n\n-----Sample Input-----\n3\napple\norange\napple\n\n-----Sample Output-----\n2\n\nYou got two kinds of items: apple and orange.\n\"\"\"\n\n\"\"\"\nYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - S_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"apple\\norange\\napple\") == 2\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"apple\") == 1\nassert solution(\"orange\") == 1\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(sample_input) == sample_output\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\napple\\norange\\napple\") == 2\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"apple\") == \"apple\"\nassert solution(\"orange\") == \"orange\"\n\n\"\"\"\n\nimport re\n\nstdin = stdin.split('\\n')\nlength = int(stdin[0])\nitems = []\nfor item in stdin[1:]:\n    items.append(item)",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\nprint('All test cases passed.')\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('apple') == 'apple'\nassert solution('orange') == 'orange'\nassert solution('kotleta') == 'kotleta'\nassert solution('makara') =='makara'\n\n'''\n",
        "num_ids_2": 20,
        "num_ids_4": 50
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"3\\n\"\n\"apple\\n\"\n\"orange\\n\"\n\"apple\"\n) == \"2\"\n\nassert solution(\n\"3\\n\"\n\"apple\\n\"\n\"orange\\n\"\n\"apple\"\n) == \"2\"\n\nassert solution(\n\"5\\n\"\n\"orange\\n\"\n\"banana\\n\"\n\"apple\\n\"\n\"pineapple\"\n) == \"3\"\n\nassert solution(\n\"10\\n\"\n\"pineapple\\n\"\n\"orange\\n\"\n\"apple\\n\"\n\"banana\\n\"\n\"grapefruit\\n\"\n\"kiwi\\n\"\n\"pear\\n\"\n\"grapes\\n\"\n\"pomegranate\"\n) == \"6\"\n\nassert solution(\n\"2\\n\"\n\"a\\n\"\n\"a\"\n) == \"1\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"apple\\norange\") == 2\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"4\n2100 2500 2700 2700\"\"\") == \"2 2\"\n\nassert solution(\"\"\"4\n2100 2500 2700 2700\"\"\") == \"2 2\"\n\nassert solution(\"\"\"4\n3200 3250 3800 3800\"\"\") == \"3 3\"\n\n\"\"\"\nThe user with rating 2100 is \"yellow\", and the others are \"orange\". There are three different colors.\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2 3\") == \"2 2\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2100 2500 2700 2700\") == \"2 2\"\nassert solution(\"5 1200 1200 2000 1200\") == \"1 1\"\n\n\"\"\"\nimport sys\nimport math",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2100 2500 2700 2700\\n') == '2 2'\n\"\"\"\n\nn = int(stdin.readline().strip())\na = list(map(int, stdin.readline().strip().split()))\n\nr = {\n    'gray': list(range(1, 400)),\n    'brown': list(range(400, 800)),\n    'green': list(range(800, 1200)),\n    'cyan': list(range(1200, 1600)),\n    'blue': list(range(1600, 2000)),\n    'yellow': list(range(2000, 2400)),\n    'orange': list(range(2400, 2800)),\n    'red': list(range(2800, 3200)),\n}\n\nfor _ in range(n):\n    for rk, rv in r.items():\n        if a[_] in rv:\n            r[rk].remove(a[_])\n\nprint(len(r.keys()), len(r.keys()) - 1)\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2100 2500 2700 2700') == '2 2'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2100 2500 2700 2700\") == \"2 2\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 3') == '0 1 1'\nassert solution('5\\n1 2 3 4 5') == '2 3'\n\"\"\"",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2100 2500 2700 2700') == '2 2'\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\"\n\nramen = {\n    \"o\": 700,\n    \"x\": 0\n}\n\nin_ = input()\ntotal = ramen[\"x\"]\nfor s in in_:\n    if s == \"o\":\n        total += ramen[\"o\"]\n    else:\n        total += ramen[\"x\"]\nprint(total)\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"oxo\") == 900\nprint('PASSED')\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('oxo') == 900\nprint(solution(stdin), end=\"\")",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('oxo') == 900\nassert solution('xo') == 700\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"oxo\") == 900\nassert solution(\"xxx\") == 700\n\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('oxo') == 900",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('o') == 'boiled egg'\nassert solution('xo') == ''\nassert solution('xox') == 'boiled egg'\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('oxo') == '900'\nassert solution('xo') == '0'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('HH') == 'H'\nassert solution('HHH') == 'H'\nassert solution('HHD') == 'D'\nassert solution('DHD') == 'D'\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"HH\") == \"H\"\nassert solution(\"DH\") == \"D\"\n\n------------------------------------------------------------------------------------------------------------------------\nYou have an array of integers. Each element in the array can be manipulated by executing a command.\nThe commands are:\n\n1.  Increment: Increment the current element by 1.\n2.  Decrement: Decrement the current element by 1.\n3.  If the current element is equal to 0, execute Delete command.\n4.  If the current element is not equal to 0, execute NoOp command.\n\nThis array is given as an input. You must return the elements of the array after each command.\n\nNote: Executing a NoOp command does not change the array.\n\nInput Format\n\nThe input contains several lines. The first line contains the commands of the array. The next line contains the size of the array. The next line contains the elements of the array, each separated by a space.\n\nConstraints\n\n1 <= N <= 10000\n\n0 <= A[i] <= 1000\n\nOutput Format\n\nReturn the elements of the array after performing all the commands.\n\nSample Input 0\n\n1 4 2 0 3\n3\n2 3 -2 0\nSample Output 0\n\n2 3\n\nExplanation 0\n\nAll the commands are executed in the order provided.\n\nSample Input 1\n\n-2 -1 3 0 1\n3\n2 3 -2 0\nSample Output 1\n\n3\n\nExplanation 1\n\nThe array changes as follows:\nArray   Command   Result\n1       1        2\n2       2        1\n3       3        0\n4       1        1\n\n'''",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"D D\") == \"D\"\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"HH\") == \"H\"\nassert solution(\"DH\") == \"D\"\n\n---\n\nimport sys\nimport typing\n\nSTDIN_SIO = typing.TextIO",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"HH\") == \"H\"\nassert solution(\"DH\") == \"D\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'H'\nassert solution('D D') == 'D'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    'H H'\n) == 'H'\nassert solution(\n    'D D'\n) == 'D'\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"HH\") == \"H\"\nassert solution(\"DH\") == \"D\"\n\nprint(solution(\"HH\"))\nprint(solution(\"DH\"))",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"H D\") == \"D\"\nassert solution(\"D H\") == \"H\"\nassert solution(\"D D\") == \"D\"\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'H'\nassert solution('D D') == 'D'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1222') == '1+2+2+2=7'\nassert solution('1345') == '1+3-5=7'\n\n\"\"\"\n\nstdin = input()\nstdout = ''\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\nIf you are given an incorrect input, print\n\n>>> INCORRECT INPUT!\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1222) == \"1+2+2+2=7\"\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin=\"1222\") == \"1+2+2+2=7\"\nprint(solution(stdin=\"1222\"))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\n\"\"\"\n\n\n\nimport re\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n\nassert solution('1223') == '1+2-2+2=7'\n\nassert solution('1230') == '1+2-2+0=7'\n\nassert solution('1234') == '1+2-2+4=7'\n\nassert solution('1235') == '1+2-2+5=7'",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\nassert solution(\"5\\n2 2 3 1\") == \"2\\n1\\n0\\n0\\n0\"\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def solution(self, stdin):\n        N = int(stdin.readline())\n        A = [int(i) for i in stdin.readline().split()]\n\n        A = [0] + A + [N+1]\n\n        stack = [0]\n        res = []\n\n        for i in range(1, N+2):\n            if A[i] > stack[-1]:\n                while stack and A[i] > A[stack[-1]]:\n                    res.append(stack.pop())\n                stack.append(i)\n\n            elif A[i] < stack[-1]:\n                stack.append(i)\n\n        return \"\\n\".join(map(str, res))\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test_solution(self):\n        # self.assertEqual(self.solution.solution(\"5\\n1 1 2 2\"), \"2\\n2\\n0\\n0\\n0\")\n        self.assertEqual(self.solution.solution(\"5\\n2 2 3 1\"), \"2\\n1\\n0\\n0\\n0\")",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 1 2 2') == '2\\n2\\n0\\n0\\n0'\nassert solution('5\\n1 1 3 2') == '2\\n2\\n0\\n0\\n0'\nassert solution('5\\n1 2 1 3 2') == '2\\n2\\n0\\n0\\n0'\n\"\"\"",
        "num_ids_2": 56,
        "num_ids_4": 85
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2 2 0 0 0\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 2 2\\n\") == \"2\\n2\\n0\\n0\\n0\"\nassert solution(\"5\\n1 1 2 2\\n\") == \"2\\n2\\n0\\n0\\n0\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\n------Solution (Python)------\n\n------Solution (JavaScript)------\n\"\"\"\nfrom typing import List\n\nclass Solution {\n    public static void main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n        var n = parseInt(stdin.readLine().split(\" \")[0]);\n        var a = stdin.readLine().split(\" \");\n        var sub = 0;\n        for(var i=0; i<n; i++) {\n            if(a[i]!= i+1) {\n                sub++;\n            }\n        }\n        console.log(sub);\n        for(var i=0; i<n; i++) {\n            console.log(sub, a[i]);\n        }\n    }\n}\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(5, 1, 2, 2) == 2\nassert solution(5, 1, 2, 3) == 0\nassert solution(5, 1, 2, 4) == 0\nassert solution(5, 1, 3, 2) == 1\nassert solution(5, 1, 3, 3) == 0\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 2 2\\n\") == \"2\\n2\\n0\\n0\\n0\"\n\"\"\"\n\nn = int(input())\n\ninfo = [input().split() for _ in range(n)]\n\nadj = [[] for _ in range(n)]\n\nfor i in range(n):\n    for j in range(n):\n        if int(info[i][j]) - 1 == i:\n            adj[i].append(j)",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n1 1 2 2''') == '2\\n2\\n0\\n0\\n0'\nassert solution('''5\n2 2 4 1''') == '0\\n0\\n2\\n2\\n0'\nassert solution('''5\n3 4 2 1''') == '2\\n0\\n0\\n0\\n2'\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1 3 2\") == \"2\\n0\\n0\\n0\"\n\n'''\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('5 1 1 1') == '0'\nassert solution('3 1 2') == '2'\n",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"6\") == \"4\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6') == '3'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '1'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6') == '3'\nassert solution('5') == '4'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6') == '3'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n\") == \"3\"\n\"\"\"\nimport sys\n\nassert solution(sys.stdin.read()) == \"3\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n\") == \"3\"\n\"\"\"\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6') == '3'\nassert solution('7') == '4'\nassert solution('8') == '6'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('6') == '3'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"3\"\n\n-----\nIt's impossible to reach 6 from 0, so the first solution is incorrect. The kangaroo's nest is at coordinate 3, and he wants to reach it from the left, so the earliest possible time is 3.",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1118') == 'Yes'\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    stdin=\n    '1118') ==\n    'Yes'\nassert solution(\n    stdin=\n    '1234') ==\n    'No'\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1120') == 'No'\n\nprint(solution(stdin.read()))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1234') == 'No'\nassert solution('2345') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1234') == 'No'\n\n\"\"\"\n\nfrom math import sqrt",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1118') == 'Yes'\n\"\"\"\n\n\"\"\"\nAnother solution is to count all the numbers of same digits. For example, if the input is 1118, then there are three 1 and three 8, so count = 3. Then we compare the count of all the numbers with the number of digits in the input.",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1118') == \"Yes\"\nassert solution('101') == \"No\"\nassert solution('1010') == \"Yes\"\nassert solution('111') == \"No\"\nassert solution('1112') == \"Yes\"\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1118\") == \"Yes\"\n\nprint(solution(\"1118\"))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1111) == \"Yes\"\nassert solution(1234) == \"No\"\nassert solution(2134) == \"Yes\"\nassert solution(2222) == \"No\"\nassert solution(1235) == \"Yes\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1118\") == \"Yes\"\nassert solution(\"1111\") == \"No\"\nassert solution(\"1121\") == \"Yes\"\n\"\"\"\n\nimport unittest\n",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n1 5\n2 4\n3 6''') == '3'\nassert solution('''1\n1\n1''') == '1'\nassert solution('''1\n5\n6''') == '0'\nassert solution('''1\n2\n1''') == '0'\nassert solution('''1\n1\n2''') == '0'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3 2 4 1') == '1'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_stdin_1) == test_stdin_2",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == 3\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 5\\n2 4\\n3 6\") == 3\nassert solution(\"2\\n1 5\\n2 4\") == 2\n\"\"\"\n\n\nfrom typing import List\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\\n\") == \"3\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1 5\\n2 4\\n3 6') == '3'\n\n---Problem---\nYou are given the triangle of consecutive odd numbers:\nYou are also given the value of  and the index of a row.\nYou have to print the sum of all numbers in the row with the index.\n\n-----Constraints-----\n - 1 \\leq n \\leq 10^5\n - 1 \\leq row \\leq n\n - 0 \\leq col \\leq row\n - 0 \\leq k \\leq 10^5\n - 0 \\leq n \\leq 10^5\n - 0 \\leq row \\leq n\n\n-----Input-----\nThe first line contains two integers  and  separated by a single space.\nThe next  lines contains  integers, the elements of the triangle in row -.\nThe last line contains two integers  and  separated by a single space.\n\n-----Output-----\nPrint a single integer, the sum of the numbers in row  of the triangle.\n\n-----Sample Input-----\n5 3\n1 2 3 4 5\n10 4 6 7 8 9\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 10\n\n-----Sample Output-----\n15\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 5\\n2 4\\n3 6') == 3\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == 3\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == '3'\n\n\"\"\"\n\nfrom collections import defaultdict\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('A B') == '<'\nassert solution('F B') == '>'\nassert solution('E F') == '='\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 32
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('A B') == '<'\nassert solution('F F') == '='\nassert solution('A B D') == '<'\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n\"\"\"\nfrom __future__ import print_function\nfrom __future__ import division\n\nx, y = list(map(str, input().split()))",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('A B') == '<'\nassert solution('B A') == '>'\nassert solution('B C') == '='\nassert solution('B D') == '='\nassert solution('A E') == '>'\n",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"A A\") == \"=\"\nassert solution(\"B B\") == \"=\"\nassert solution(\"C D\") == \">\"\nassert solution(\"F E\") == \">\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('A B') == '<'\nassert solution('B A') == '>'\nassert solution('B C') == '='\n",
        "num_ids_2": 22,
        "num_ids_4": 32
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('A B') == '<'\nassert solution('F E') == '<'\nassert solution('D C') == '>'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"B A\") == \">\"\nassert solution(\"B C\") == \"=\"\nassert solution(\"C B\") == \"<\"\nassert solution(\"B D\") == \">\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('A B') == '<'\nassert solution('B A') == '>'\nassert solution('A A') == '='",
        "num_ids_2": 22,
        "num_ids_4": 32
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A B\") == \"<\"\n\nassert solution(\"B A\") == \">\"\n\nassert solution(\"B C\") == \"=\"\n\nassert solution(\"A C\") == \"<\"\n\nassert solution(\"C B\") == \">\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 5\n.....\n.#.#.\n.....\n''') == '''11211\n1#2#1\n11211\n'''\n\n'''\nThe function is expected to return a STRING.\nThe function accepts STRING s as parameter.\n\nApproach:\n\n'''\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\nassert solution(\"5 5\\n.....\\n.#.#.\\n.....\\n1..1\\n\") == \"11112\"\n\"\"\"\nfrom collections import defaultdict\nfrom math import inf\n\nfrom typing import Dict, List, Tuple\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\nassert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\n\"\"\"\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\nassert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\n\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5\\n.....\\n.#.#.\\n.....') == '11211'\nassert solution('5 5\\n.##.##\\n.....#\\n....#.\\n.....') == '12345'\nassert solution('5 5\\n.###.##\\n##.#.#.\\n#.#.###\\n#.#.###\\n.#.###.') == '321'",
        "num_ids_2": 53,
        "num_ids_4": 94
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\".#.#..#\") == \"1110111\"\nassert solution(\"..##.##..\") == \"1110111\"\nassert solution(\"..#.#..#\") == \"11111011\"\nassert solution(\"#.#...#.#\") == \"1110111\"\nassert solution(\"#.#.##.#\") == \"1111111\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\nassert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"1#2#1\"\nassert solution(\"2 3\\n#.#.\\n#.#.\\n\") == \"11\"\nassert solution(\"1 1\\n#\\n\") == \"1\"\nassert solution(\"1 1\\n.\\n\") == \"1\"\n",
        "num_ids_2": 53,
        "num_ids_4": 92
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5\\n.....\\n.#.#.\\n.....') == '11211'\nassert solution('5 5\\n.##.\\n##.#\\n#.#.\\n.#.#\\n.#.#') == '1#2#1'\nassert solution('3 5\\n.....\\n#.#.\\n.....') == '11211'\nassert solution('5 5\\n#..#\\n##.#\\n#...\\n#..#\\n.#.#') == '1#2#1'",
        "num_ids_2": 60,
        "num_ids_4": 120
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\n\"\"\"\n\n\"\"\"\nSolution 3\n\n-----Problem Description-----\nIn a lecture, we saw an example of the following problem:\n\nWe have N students, and each has a certain amount of money, denoted by the positive integer A_i, on the desk.\nWe can give each student some number of books, and for each student, we know the number of books they wish to read.\nHowever, not all books will be read, and each student may wish to read a different number of books.\nThe lecture was held for K minutes, and we wish to know how many books we can assign to the students so that the total cost to read the books is at most R dollars.\n\n-----Constraints-----\n - 1 \\leq N \\leq 1000\n - 1 \\leq A_i \\leq 1\\,000\n - 1 \\leq K \\leq 10^5\n - 1 \\leq R \\leq 10^9\n - 1 \\leq b \\leq K\n - 1 \\leq w \\leq N\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K R\nA_1 A_2 \\ldots A_N\nb_1 w_1\nb_2 w_2\n\n-----Output-----\nPrint an integer representing the maximum number of books that can be assigned to the students.\n\n-----Sample Input-----\n4 4 12\n2 5 3 4\n3 2 3\n\n-----Sample Output-----\n2\n\nIn the above sample, the maximum number of books that can be assigned is 2, as explained below:\n - Assign book #1 to student #1 and book #2 to student #2, which will cost R = 5 + 3 = 8 dollars.\n - Assign book #3 to student #3, which will cost R = 5 + 3 = 8 dollars.\n - Assign book #4 to student #4, which will cost R = 5 + 3 = 8 dollars.\n - Assign book #1 to student #3 and book #2 to student #1, which will cost R = 5 + 3 = 8 dollars.\n - Assign book #2 to student #4 and book #3 to student #2, which will cost R = 5 + 3 = 8 dollars.\n - The students can read two books in a total of 12 minutes, but the total cost to read all books will be R = 8 + 8 = 16 dollars, which is greater than R = 12.\n\"\"\"\n\n\"\"\"\nSolution 3\n\n-----Problem Description-----\nIn a lecture, we saw an example of the following problem:\n\nWe have N students, and each has a certain amount of money, denoted by the positive integer A_i, on the desk.\nWe can give each student some number of books, and for each student, we know the number of books they wish to read.\nHowever, not all books will be read, and each student may wish to read a different number of books.\nThe lecture was held for K minutes, and we wish to know how many books we can assign to the students so that the total cost to read the books is at most R dollars.\n\n-----Constraints-----\n - 1 \\leq N \\leq 1000\n - 1 \\leq A_i \\leq 1\\,000\n - 1 \\leq K \\leq 10^5\n - 1 \\leq R \\leq 10^9\n - 1 \\leq b \\leq K\n - 1 \\leq w \\leq N\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K R\nA_1 A_2 \\ldots A_N\nb_1 w_1\nb_2 w_2\n\n-----Output-----\nPrint an integer representing the maximum number of books that can be assigned to the students.\n\n-----Sample Input-----\n4 4 12\n2 5 3 4\n3 2 3\n\n-----Sample Output-----\n2\n\nIn the above sample, the maximum number of books that can be assigned is 2, as explained below:\n - Assign book #1 to student #1 and book #2 to student #2, which will cost R = 5 + 3 = 8 dollars.\n - Assign book #1 to student #1 and book #2 to student #3, which will cost R = 5 + 3 = 8 dollars.\n - Assign book #1 to student #2 and book #3 to student #2, which will cost R = 5 + 3 = 8 dollars.\n - Assign book #1 to student #1 and book #3 to student #3, which will cost R = 5 + 3 = 8 dollars.\n - Assign book #1 to student #2 and book #3 to student #1, which will cost R = 5 + 3 = 8 dollars.\n - Assign book #2 to student #2 and book #3 to student #4, which will cost R = 5 + 3 = 8 dollars.\n - The students can read two books in a total of 12 minutes, but the total cost to read all books will be R = 8 + 8 = 16 dollars, which is greater than R = 12.\n\"\"\"\n\n\"\"\"\nSolution 4\n\n-----Problem Description-----\nIn a lecture, we saw an example of the following problem:\n\nWe have N students, and each has a certain amount of money, denoted by the positive integer A_i, on the desk.\nWe can give each student some number of books, and for each student, we know the number of books they wish to read.\nHowever, not all books will be read, and each student may wish to read a different number of books.\nThe lecture was held for K minutes, and we wish to know how many books we can assign to the students so that the total cost to read the books is at most R dollars.\n\n-----Constraints-----\n - 1 \\leq N \\leq 1000\n - 1 \\leq A_i \\leq 1\\,000\n - 1 \\leq K \\leq 10^5\n - 1 \\leq R \\leq 10^9\n - 1 \\leq b \\leq K\n - 1 \\leq w \\leq N\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K R\nA_1 A_2 \\ldots A_N\nb_1 w_1\nb_2 w_2\n\n-----Output-----\nPrint an integer representing the maximum number of books that can be assigned to the students.\n\n-----Sample Input-----\n4 4 12\n2 5 3 4\n3 2 3\n\n-----Sample Output-----\n2\n\nIn the above sample, the maximum number of books that can be assigned is 2, as explained below:\n - Assign book #1 to student #1 and book #2",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 240\\n60 90 120\\n80 150 80 150\\n') == 3\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 4 240\n60 90 120\n80 150 80 150''') == \"3\"\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150') == 3\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\\n\") == \"3\"\n\"\"\"\nimport sys\n\nstdin = sys.stdin\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == 3\n\"\"\"\n\nfrom math import ceil",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == 3\n\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150') == '3'\n\"\"\"\n\nimport sys\nimport itertools",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\nprint(\"Passed\")\n\n---",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == '7900'\n\"\"\"\n\na, b, c, x, y = map(int, input().split())\nprint(min(a*x + b*y, a*(x-2) + b*(y-2) + c*4))\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n\n\"\"\"\n\u672c\u984c\u53ef\u4ee5\u7528\u524d\u9762\u4e09\u7a2e\u601d\u8def\uff0c\u901a\u5e38\u6700\u5f8c\u6703\u8d85\u6642\uff0c\u4f86\u627e\u66f4\u5feb\u7684\u89e3\u6cd5\u6642\uff0c\u6709\u4ee5\u4e0b\u4e09\u7a2e\u53ef\u80fd\u6027:\n\n\u5229\u7528\u9ad8\u5fb7\u5730\u5716API\u67e5\u8a62\u5169\u5730\u540d\u9593\u7684\u9910\u5ef3\u540d\uff0c\u9032\u884c\u4ea4\u96c6\uff0c\u7576\u4ea4\u96c6\u6578\u91cf\u70ba0\u6642\uff0c\u4ee3\u8868\u6c92\u6709\u5171\u540c\u4e4b\u9910\u5ef3\n\u7528A\u70ba\u4e3b\uff0cB\u70ba\u6b21\u7684\u9910\u5ef3\u540d\u7a31\u62fc\u63a5\u6210AB\u70ba\u4e3b\uff0c\u6aa2\u67e5\u9019\u5169\u500b\u9910\u5ef3\u4e4b\u9593\u662f\u5426\u5b58\u5728\u9023\u7d50\u5173\u7cfb\uff0c\u7136\u5f8c\u62fc\u63a5\u6210AB\u70ba\u4e3b\uff0c\u518d\u5229\u7528A\u70ba\u4e3b\u62fc\u63a5\u6210AB\u70ba\u4e3b\u7684\u5176\u4ed6\u6240\u6709\u9910\u5ef3\uff0c\u518d\u6aa2\u67e5\u9019\u5169\u500b\u9910\u5ef3\u4e4b\u9593\u662f\u5426\u5b58\u5728\u9023\u7d50\u5173\u7cfb\uff0c\u9019\u6a23\u4fbf\u53ef\u4ee5\u5f97\u5230\u6240\u6709\u9910\u5ef3\u4e4b\u9593\u662f\u5426\u5b58\u5728\u9023\u7d50\u5173\u7cfb\u3002\n\u7528B\u70ba\u4e3b\uff0cA\u70ba\u6b21\u7684\u9910\u5ef3\u540d\u7a31\u62fc\u63a5\u6210AB\u70ba\u4e3b\uff0c\u6aa2\u67e5\u9019\u5169\u500b\u9910\u5ef3\u4e4b\u9593\u662f\u5426\u5b58\u5728\u9023\u7d50\u5173\u7cfb\uff0c\u7136\u5f8c\u62fc\u63a5\u6210AB\u70ba\u4e3b\uff0c\u518d\u5229\u7528B\u70ba\u4e3b\u62fc\u63a5\u6210AB\u70ba\u4e3b\u7684\u5176\u4ed6\u6240\u6709\u9910\u5ef3\uff0c\u518d\u6aa2\u67e5\u9019\u5169\u500b\u9910\u5ef3\u4e4b\u9593\u662f\u5426\u5b58\u5728\u9023\u7d50\u5173\u7cfb\uff0c\u9019\u6a23\u4fbf\u53ef\u4ee5\u5f97\u5230\u6240\u6709\u9910\u5ef3\u4e4b\u9593\u662f\u5426\u5b58\u5728\u9023\u7d50\u5173\u7cfb\u3002\n\u5148\u7528A\u70ba\u4e3b\uff0c\u518d\u7528B\u70ba\u4e3b\u6bd4\u8f03\u9910\u5ef3\u540d\u7a31\u662f\u5426\u76f8\u540c\uff0c\u7531\u65bcA\u70ba\u4e3b\u7684\u9910\u5ef3\u540d\u7a31\u9084\u662fA\u70ba\u4e3b\uff0c\u6240\u4ee5\u624d\u6703\u662f\u76f8\u540c\uff0c\u56e0\u6b64\u76f8\u540c\u4e4b\u9593\u6709\u9023\u7d50\u5173\u7cfb\uff0c\u56e0\u6b64\u9019\u5169\u500b\u9910\u5ef3\u9593\u5c31\u6709\u9023\u7d50\u5173\u7cfb\uff0c\u56e0\u6b64\u53ea\u8981\u6aa2\u67e5A\u70ba\u4e3b\u548cB\u70ba\u4e3b\u4e4b\u9593\u662f\u5426\u5b58\u5728\u9023\u7d50\u5173\u7cfb\uff0c\u5c31\u80fd\u5f97\u5230\u6240\u6709\u9910\u5ef3\u9593\u6709\u9023\u7d50\u5173\u7cfb\u3002\n\u5148\u7528B\u70ba\u4e3b\uff0c\u518d\u7528A\u70ba\u4e3b\u6bd4\u8f03\u9910\u5ef3\u540d\u7a31\u662f\u5426\u76f8\u540c\uff0c\u7531\u65bcB\u70ba\u4e3b\u7684\u9910\u5ef3\u540d\u7a31\u9084\u662fB\u70ba\u4e3b\uff0c\u6240\u4ee5\u624d\u6703\u662f\u76f8\u540c\uff0c\u56e0\u6b64\u76f8\u540c\u4e4b\u9593\u6709\u9023\u7d50\u5173\u7cfb\uff0c\u56e0\u6b64\u9019\u5169\u500b\u9910\u5ef3\u9593\u5c31\u6709\u9023\u7d50\u5173\u7cfb\uff0c\u56e0\u6b64\u53ea\u8981\u6aa2\u67e5A\u70ba\u4e3b\u548cB\u70ba\u4e3b\u4e4b\u9593\u662f\u5426\u5b58\u5728\u9023\u7d50\u5173\u7cfb\uff0c\u5c31\u80fd\u5f97\u5230\u6240\u6709\u9910\u5ef3\u9593\u6709\u9023\u7d50\u5173\u7cfb\u3002\n\u6700\u5f8c\u518d\u7528B\u70ba\u4e3b\u62fc\u63a5\u6210AB\u70ba\u4e3b\uff0c\u518d\u7528A\u70ba\u4e3b\u62fc\u63a5\u6210AB\u70ba\u4e3b\u7684\u5176\u4ed6\u6240\u6709\u9910\u5ef3\uff0c\u518d\u6aa2\u67e5\u9019\u5169\u500b\u9910\u5ef3\u4e4b\u9593\u662f\u5426\u5b58\u5728\u9023\u7d50\u5173\u7cfb\uff0c\u9019\u6a23\u4fbf\u53ef\u4ee5\u5f97\u5230\u6240\u6709\u9910\u5ef3\u4e4b\u9593\u662f\u5426\u5b58\u5728\u9023\u7d50\u5173\u7cfb\u3002\n\n\u82e5\u4e0a\u8ff0\u63a8\u5c0e\u5c31\u4e0d\u6703\u6210\u529f\uff0c\u90a3\u9ebc\u53ea\u80fd\u554f\u81ea\u5df1\u600e\u9ebc\u62fc\u63a5\uff0c\u62fc\u63a5\u6210\u6700\u5c0f\u7b49\u65bc\u7b2c\u5e7e\u500b\u9910\u5ef3\n\u8a2d\u8a08\u4e00\u500b\u7b97\u6cd5\u62fc\u63a5\u9910\u5ef3\u540d\u7a31\uff0c\u524d\u9762\u7684\u7b97\u6cd5\u53ef\u80fd\u6703\u51fa\u932f\uff0c\u56e0\u70ba\u6c92\u6709\u8003\u616e\u5f88\u6e05\u695a\uff0c\u4f8b\u5982\u62fc\u63a5\u7684A\u70ba\u4e3b\uff0cB\u70ba\u6b21\u7684\u9910\u5ef3\u540d\u7a31\u62fc\u63a5\u6210AB\u70ba\u4e3b\uff0cC\u70ba\u6b21\u7684\u9910\u5ef3\u540d\u7a31\u62fc\u63a5\u6210ABC\u70ba\u4e3b\uff0c\u90a3\u9ebc\u53ef\u80fd\u6703\u51fa\u932f\uff0cC\u70ba\u4e3b\uff0cA\u70ba\u6b21\u7684",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\n\nimport unittest\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\n\n\"\"\"\n\nimport sys\n\nA, B, C, X, Y = map(int, sys.stdin.readline().split())\n\nprint(int(min(X*A, Y*B)) + int((X+Y)*(C/2)))\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n1500 2000 1600 3 2\n\"\"\"\n) == \"7900\"\nprint(\"Test pass.\")\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n\na, b, c, x, y = [int(_) for _ in stdin.split(' ')]\n\na_pizzas, b_pizzas = 0, 0\n\nwhile x > 0:\n    if x >= a:\n        x -= a\n        a_pizzas += 1\n    else:\n        a_pizzas += 1\n        x = x + a\n\nwhile y > 0:\n    if y >= b:\n        y -= b\n        b_pizzas += 1\n    else:\n        b_pizzas += 1\n        y = y + b\n\ncost = c * b_pizzas + a_pizzas * c\nprint(cost)\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\n\nprint(solution('1500 2000 1600 3 2'))",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n') == 4\nprint(solution(stdin.readlines()))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n\") == \"4\"\n\"\"\"\n\nimport unittest\n\n\"\"\"\nmodulo:\nm=3\na=1,2,3,4,5,6,7,8,9,10\na%m = 1,2,3,0,1,2,3,0,1,2\n\"\"\"\nMODULO = 10**9 + 7\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"4\"\n\n\"\"\"\n\nimport math\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == 4\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"15\") == \"6\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == 4\nassert solution(\"10\") == 3628800\n\"\"\"\nfrom math import factorial",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == 4\n\"\"\"\n\nimport math\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == 4\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n') == '4'\n\"\"\"\n\nn = int(input())",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n') == '4\\n'\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == '9'\nassert solution('100') == '100'\nassert solution('1000') == '1000'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"20\") == \"16\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\n\nprint(\"All tests passed.\")\n\"\"\"\n\n\"\"\"\n\nSolution 2\n\n-----\n\n-----",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(10) == 9\n\"\"\"\n\nimport math\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '4'\nassert solution('3') == '1'\nassert solution('2') == '1'\nassert solution('1') == '1'\nassert solution('10') == '9'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == 9\nassert solution('9') == 4\nassert solution('2') == 1\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == '9'\n\nassert solution('1') == '1'\n\nassert solution('4') == '4'\n\nassert solution('8') == '8'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"9\"\n\n\"\"\"\n\n\n\"\"\"\nfrom math import floor, log, ceil",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"2\") == \"1\"\nassert solution(\"7\") == \"8\"\nassert solution(\"15\") == \"14\"\nassert solution(\"22\") == \"22\"\n\"\"\"\n\nimport math",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == '9'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '4'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"9\"\n\"\"\"\n\nimport unittest\n\nfrom helpers import tqdm\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\\n\") == \"3\"\n\"\"\"\nimport sys\nfrom collections import deque",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6') == '3'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 10 8 8 6\\n') == '3'",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\\n\") == \"3\"\n\"\"\"\n\nfrom collections import deque\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"\n\nYou can test your solution by running this file.\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\\n\") == \"3\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"\nassert solution(\"4\\n10\\n8\\n8\\n6\\n3\\n1\") == \"5\"\nassert solution(\"1\\n1\") == \"1\"\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 50,
        "num_ids_4": 63
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6\\n') == 3\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\"\n\ns = input()\n\nprint(len(s) - len(s) % 7)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\"\n\ns = input()\n\nprint(max([len(s[i:j]) for i in range(len(s)) for j in range(i+1, len(s)+1)]))",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('QWERTYASDFZXCV') == 'ASDFZ'\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == 5\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 12 40\") == 2\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n8 12 40') == 2\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 12 8\") == '2'\nassert solution(\"1\") == '0'\n\"\"\"\nfrom __future__ import annotations\n\nimport collections\nimport math\nfrom dataclasses import dataclass\nfrom typing import Dict, List, Tuple\n\n\n@dataclass\nclass Task:\n    n: int\n    a: List[int]\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n8 12 40') == '2'\nassert solution('4\\n8 12 40') == '4'\nassert solution('5\\n8 12 40') == '6'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n8 12 40\") == '2'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n8 12 40') == '2'\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n\") == \"6\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == 6\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == 6\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"24\"\n\"\"\"\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"6\"\nprint(solution(\"3\"))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == 6\nprint(solution('4'))\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n\") == 6\nassert solution(\"4\\n\") == 10\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == 6\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n') == '6'\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\n\"\"\"\n\nimport math",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n') == 6\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '6'\nassert solution('10') == '55'\n\n\"\"\"\nimport math",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n\") == \"6\"\n\nprint(solution(\"3\\n\"))\n'''",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n') == '6'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n\") == \"6\"\nprint(solution(\"3\\n\"))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"6\"\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3) == 6\nassert solution(2) == 3\n\n---",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3\\n2') == '13'\n\"\"\"\nimport sys\nimport math",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"10\"\nassert solution(\"6\") == \"15\"\n\nprint(\"test passed\")\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1') == '2'\nassert solution('3 3') == '0'\nassert solution('2 3') == '1'\nassert solution('2 3 5 4') == '3'\nassert solution('4 1 2 3') == '4'\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == 2\n\"\"\"\n\nN = int(input())\nA = list(map(int, input().split()))\n\nans = 0\nfor i in range(N):\n    ans += max(A[:i] + A[i + 1:])\n\nprint(ans)\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 3\") == \"2\"\nassert solution(\"3\\n1 1 1\") == \"0\"\n\"\"\"\nfrom collections import Counter\nfrom typing import List\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == 1\nassert solution('3 1') == 2\nassert solution('5 7 3 2 1') == 6\nassert solution('5 7 4 4 2') == 12\n",
        "num_ids_2": 16,
        "num_ids_4": 37
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n3 1\") == 2\nassert solution(\"5\\n1 1 1 1 1\") == 0\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '0'\nassert solution('2\\n1 1') == '0'\nassert solution('3\\n1 1 1') == '1'\nassert solution('5\\n1 3 5 7 9') == '6'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 21,
        "num_ids_4": 50
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"4 2\") == \"4\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3 1\") == 2\n\"\"\"\n\nimport numpy as np\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3 1\") == 2\n\"\"\"\n\nN = int(input().strip())\nA = list(map(int, input().strip().split()))\n\na_sum = sum(A)\nb_sum = 0\n\nfor i in range(N):\n    b_sum += A[i] if i % 2 == 0 else -A[i]\n\nprint(a_sum - b_sum)",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA'\n) == '2 2'\n\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA') == '2 2'\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA') == '2 2'\n\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA') == '2 2'\n\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\": WA\\nWA\\n: AC\\n: WA\\nWA\\n\") == \"2 2\"\nassert solution(\": WA\\n: AC\\n: WA\\nWA\\n\") == \"1 2\"\nassert solution(\": WA\\n: AC\\n: WA\\n: AC\\nWA\\n\") == \"1 1\"\nassert solution(\": WA\\nAC\\nWA\\n: AC\\n: WA\\n: AC\\nWA\\n\") == \"0 3\"\nassert solution(\": WA\\n: AC\\nWA\\n: AC\\n: WA\\n: AC\\n: WA\\n\") == \"0 0\"\n\"\"\"\n",
        "num_ids_2": 53,
        "num_ids_4": 117
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\"\n\nN, M = map(int, stdin.readline().split())\nS = [stdin.readline().split() for _ in range(M)]\n\nac = 0\nwa = 0\nfor i in range(M):\n    if S[i][1] == \"AC\":\n        ac += 1\n    else:\n        wa += 1\n    if i < M - 1:\n        if S[i + 1][1] == \"AC\":\n            ac += 1\n        else:\n            wa += 1\n\nprint(ac, wa)\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 WA\\n2 WA\\n3 AC\\n3 AC\\n\") == \"2 3\"\nassert solution(\"1 1\\n1 AC\") == \"1 0\"\nassert solution(\"4 4\\n1 AC\\n2 WA\\n3 WA\\n4 AC\") == \"1 1\"\nassert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"",
        "num_ids_2": 46,
        "num_ids_4": 106
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n'''",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"4 1 5\\n\"\n) == 5\n\"\"\"\n\nimport sys\n\nnk = list(map(int, sys.stdin.readline().strip().split()))\nn = nk[0]\nk = nk[1]\nh = list(map(int, sys.stdin.readline().strip().split()))",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n4 1 5\\n\") == 5\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 5\") == \"5\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\\n4 1 5\") == \"5\"\nassert solution(\"1 1\\n4 1 5\") == \"5\"\nassert solution(\"2 2\\n4 1 5\") == \"4\"\nassert solution(\"2 10\\n4 1 5\") == \"5\"\nassert solution(\"2 100\\n4 1 5\") == \"5\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 5\\n3 1 2\") == 5\n\"\"\"\n\nfrom collections import deque\nfrom math import inf\n\n\nclass Fennec:\n    def __init__(self, n, k, *args):\n        self.n = n\n        self.k = k\n        self.special_move_queue = deque()\n        self.attack_queue = deque()\n        self.special_move_queue.append([inf] * n)\n        self.attack_queue.append([0] * n)\n        for i in range(n):\n            self.special_move_queue.append([i, *args[i]])\n            self.attack_queue.append([i, *args[i]])\n\n    def attack(self):\n        attack_queue = self.attack_queue\n        special_move_queue = self.special_move_queue\n        special_move_queue.popleft()\n        attack_queue.popleft()\n        attack_queue.append(special_move_queue.popleft())\n        special_move_queue.append(attack_queue.popleft())\n\n    def special_move(self, i):\n        special_move_queue = self.special_move_queue\n        special_move_queue.popleft()\n        special_move_queue.append([i, *special_move_queue.popleft()[1:]])\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n4 1 5\") == \"5\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 5\") == \"5\"\n\"\"\"\n\nfrom typing import List\nfrom math import ceil\nfrom functools import lru_cache",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2 3\") == \"5\"\n\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 10 2\\n\") == \"4\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 10\\n2\\n\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n10\\n2') == 4\n\"\"\"\n\n\n\"\"\"\n------------------------------------------------\nFor each line, solve the following problem:\n\nCalculate the minimum total distance covered by robots\n\n(Based on the given constraints and inputs)\n------------------------------------------------\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n5\\n2 3 4 5\\n') == '16'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 10 2') == '4'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n10\\n2\\n\") == '4'\n\n-----\n2\n20\n2 7 5 3 4 6 9 8 11 12 1 16 15 14 13 17 18 19 10\n\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"3\"\nassert solution(\"1\\n10\\n2\\n\") == \"8\"\nassert solution(\"1\\n10\\n20\\n\") == \"19\"\nassert solution(\"1\\n10\\n20\\n\") == \"19\"\n\n\"\"\"\n\n\n\"\"\"\n\ud68c\uace0:\n\ubb38\uc81c\ub97c \uc798 \uc77d\uc5b4\uc11c \ud480\uc5b4\ubcf4\uc558\ub2e4.\n\ucc98\uc74c\uc5d0\ub294 \ub450 \uac00\uc9c0\uc758 \ud0c0\uc785\uc758 \ud2b8\ub7ed\ub9cc \ub450 \uac1c\ub97c \uac00\uc9c0\uace0 \uc788\uae30\ub54c\ubb38\uc5d0 \uac00\ub2a5\ud55c \uacbd\uc6b0\uc758 \uc218\ub294 \ub450 \uac00\uc9c0\uc774\ub2e4.\n\ub530\ub77c\uc11c \ub450 \uac00\uc9c0\uc758 \ud2b8\ub7ed\uc774 \uc11c\ub85c \uac00\ub85c\ub85c \uc774\ub3d9\ud558\ub294 \uac83\uc744 \uace0\ub824\ud574\ubcf4\uc558\ub2e4.\n\ub2e4\ub978 \ud2b8\ub7ed\uc774 \uc11c\ub85c \uc138\ub85c\ub85c \uc774\ub3d9\ud558\ub294 \uacbd\uc6b0\ub3c4 \uc0dd\uac01\ud574\ubcf4\uc558\ub2e4.\n\ud604\uc7ac \ud2b8\ub7ed\uc774 \ub450 \uac1c\uc758 \ud0c0\uc785\uc758 \ud2b8\ub7ed\ub9cc \uac00\uc9c0\uace0 \uc788\ub294\ub370, \uc774\ub54c \ub450 \ud2b8\ub7ed\uc774 \uac01\uac01 \ud2b8\ub7ed\uc758 \uc6c0\uc9c1\uc784\uc774 \ub450 \uac1c\ub9cc\ud07c \ucc28\uc774\ub09c\ub2e4\uba74 \uc11c\ub85c \uac00\ub85c\ub85c \uc6c0\uc9c1\uc784\uc744 \uc774\ub8e8\uace0 \uc788\uc5b4 \ud2b8\ub7ed\uc758 \uac04\uaca9\uc744 \ucd5c\uc18c\ud654\ud558\uace0\uc790 \ud588\ub2e4.\n\uadf8\ub7f0\ub370 \uac00\ub85c\ub85c \uc6c0\uc9c1\uc5ec\uc57c\ud558\ub294 \ud0c0\uc785\uc758 \ud2b8\ub7ed\uc774 \ud55c \uac1c\ub9cc \uc874\uc7ac\ud558\uace0 \uc138\ub85c\ub85c \uc6c0\uc9c1\uc5ec\uc57c\ud558\ub294 \ud0c0\uc785\uc758 \ud2b8\ub7ed\uc774 \ub450 \uac1c\ub9cc \uc874\uc7ac\ud55c\ub2e4\uba74,\n\uac00\ub85c\uc5d0\uc11c \uc6c0\uc9c1\uc77c \ud544\uc694\ub3c4 \uc5c6\uace0 \uc138\ub85c\uc5d0\uc11c \uc6c0\uc9c1\uc77c \ud544\uc694\ub3c4 \uc5c6\uc774, \uc138\ub85c\uc5d0\uc11c \uc6c0\uc9c1\uc77c \ud544\uc694\ub3c4 \uc5c6\ub2e4\uba74 \uac00\ub85c\ub85c \uc6c0\uc9c1\uc774\ub294 \uac83\uc774 \ub354 \ucd5c\uc18c\ud55c\uc758 \ucd1d \uc774\ub3d9 \uac70\ub9ac\uc774\ub2e4.\n\uadf8\ub7f0\ub370 \uac00\ub85c\ub85c \uc6c0\uc9c1\uc77c \ud544\uc694\ub3c4 \uc5c6\uace0 \uc138\ub85c\uc5d0\uc11c \uc6c0\uc9c1\uc77c \ud544\uc694\ub3c4 \uc5c6\uace0, \uc138\ub85c\uc5d0\uc11c \uc6c0\uc9c1\uc77c \ud544\uc694\ub3c4 \uc5c6\ub2e4\uba74 \uc11c\ub85c \uc11c\ub85c\uc758 \uc6c0\uc9c1\uc784\uc744 \uace0\ub824\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub418\ubbc0\ub85c \ucd5c\uc18c \uc774\ub3d9 \uac70\ub9ac\ub294 \uac19\ub2e4.\n\uac00\ub85c\uc5d0\uc11c \uc6c0\uc9c1\uc774\ub294 \uacbd\uc6b0\ub294 \uc138\ub85c\uc5d0\uc11c \uc6c0\uc9c1\uc778 \uacbd\uc6b0\ubcf4\ub2e4 \ub450 \uac00\uc9c0 \ud0c0\uc785\uc758 \ud2b8\ub7ed\ub9cc \uac00\uc9c0\uace0 \uc788\uc73c\uba74 \ub354 \ucd5c\uc18c\ud654 \ud560 \uc218 \uc788\ub2e4.\n\uac00\ub85c\uc5d0\uc11c \uc6c0\uc9c1\uc774\ub294 \uacbd\uc6b0\ub294 \uac00\ub85c\uc5d0\uc11c \uc6c0\uc9c1\uc778 \uacbd\uc6b0\ubcf4\ub2e4 \ub450 \uac00\uc9c0 \ud0c0\uc785\uc758 \ud2b8\ub7ed\ub9cc \uac00\uc9c0\uace0 \uc788\uc73c\uba74 \ub354 \ucd5c\uc18c\ud654 \ud560 \uc218 \uc788\ub2e4.\n\uc138\ub85c\uc5d0\uc11c \uc6c0\uc9c1\uc774\ub294 \uacbd\uc6b0\ub294 \uc138\ub85c\uc5d0\uc11c \uc6c0\uc9c1\uc778 ",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 10 2\\n\") == 4\nassert solution(\"2 10 2\\n\") == 16\n\"\"\"\n\n\n\"\"\"\n-----SOLUTION-----\n\n[Analysis]\n1. The solution is trivial, but I am curious about the relationship between the total distance covered by the robots and the number of robots.\n2. The number of robots is always greater than or equal to the number of balls.\n3. When the robots are activated, they can only collect one ball, so once they reach a ball, they will always collect it.\n4. The total distance covered by robots will be the sum of the distance from the robot to the ball and from the ball to the original position.\n5. The total distance covered will be minimized when the number of robots is greater than or equal to the number of balls.\n6. To determine this number, we can just subtract the number of balls from the number of robots.\n\n[Implementation]\n1. Define a function distance() that takes two points (x1, y1) and (x2, y2) and returns the distance between them.\n2. Define a list num_balls = [] where num_balls[i] represents the number of balls on the ith line.\n3. Define a list robots = [] where robots[i] represents the robot on the ith line.\n4. Use an input() to get the input.\n5. Define a function robots_activated() that takes two inputs (line, line_num) and returns the activated robots on the line.\n6. Initialize the variable total_distance to 0.\n7. The robots will always move to the left of the ball on the line.\n8. The robots can only collect one ball.\n9. When a robot collects a ball, it moves to the original position, deactivates itself and returns the ball to the left.\n10. Define a variable activated_robots = 0 to represent the number of activated robots.\n11. If robots[i] is deactivated, the robot will deactivate itself.\n12. Use a loop to check if the robot is deactivated and if the robot is at the right position of the ball.\n13. Use a loop to increment the total_distance variable by the distance from the robot to the ball and from the ball to the original position.\n14. If robots[i] is deactivated, increase the activated_robots variable by 1.\n15. Return total_distance.\n16. Use the robots_activated() function to get activated robots.\n17. Return robots_activated() - num_balls.\n18. Print the result.\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n10\\n2\\n') == '4'\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n10\\n2\\n') == '4'\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"1 1 2 2\") == \"2\"\nassert solution(\"1 2 2 2\") == \"2\"\nassert solution(\"1 1 2 2\") == \"2\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\nassert solution(\"8 2 5 2\") == \"12\"\nassert solution(\"500 500 500 500\") == \"2000\"\n\n\"\"\"\nimport math",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\n\"\"\"\n\nimport sys\n\nA, B, C, D = [int(s) for s in sys.stdin.read().strip().split(\" \")]\n\nprint((A * D) + (B * C))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\nprint(\"Passed\")",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\nassert solution(\"1 100 2 3\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\nprint(\"Test 1 PASSED\")\n\n------",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\nprint(\"Test 1:\", solution(\"600 300 220 420\"))\n\nassert solution(\"300 300 300 420\") == \"520\"\nprint(\"Test 2:\", solution(\"300 300 300 420\"))\n\nassert solution(\"300 300 300 300\") == \"520\"\nprint(\"Test 3:\", solution(\"300 300 300 300\"))\n\nassert solution(\"300 300 300 300\") == \"520\"\nprint(\"Test 4:\", solution(\"300 300 300 300\"))\n\nassert solution(\"300 300 300 300 300\") == \"520\"\nprint(\"Test 5:\", solution(\"300 300 300 300 300\"))",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\"\"\"\n\nimport ast",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 4 0 2\") == \"4\"\nassert solution(\"5 4 0 2 1\") == \"2\"\nassert solution(\"5 1 2 4 3\") == \"0\"\n\nassert solution(\"5 4 0 2 1\") == \"2\"\nassert solution(\"5 1 2 4 3\") == \"0\"",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n2 4 4 0 2''') == '4'\n\nassert solution('''4\n2 4 4 0 2''') == '0'\n\nassert solution('''7\n2 3 4 4 3 2''') == '4'\n\nassert solution('''1\n0''') == '0'\n\nassert solution('''1\n1''') == '0'",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 4 0 2\") == \"4\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 4 4 0 2') == '4'\n\"\"\"\n\nimport sys",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 4 4 0 2') == '4'\n\"\"\"\nimport itertools\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 4 4 0 2') == '4'\n\"\"\"\n\nimport sys\nimport collections\n\nstdin = sys.stdin\n\nn = int(stdin.readline().rstrip())\nA = [int(i) for i in stdin.readline().rstrip().split()]\n\nS = [abs(A[i] - A[i - 1]) for i in range(1, len(A))]\nd = collections.Counter(S)\nans = 0",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 4 4 0 2') == 4\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 4 4 0 2') == '4'\nassert solution('7\\n4 2 5 2 3 3 0') == '0'\nassert solution('8\\n3 1 2 0 5 6 7 9') == '2'\n\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 36,
        "num_ids_4": 56
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == 4\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\nA = list(map(int, sys.stdin.readline().strip().split()))\n\nleft = [0] * N\nright = [0] * N\n\nleft[0] = A[0]\nright[-1] = A[-1]\n\nfor i in range(1, N):\n    left[i] = abs(A[i] - A[i - 1])\n\nfor i in range(1, N):\n    right[N - i - 1] = abs(A[N - i] - A[N - i - 1])\n\nans = 0\nfor i in range(N):\n    ans = (ans + left[i] * right[i]) % (10 ** 9 + 7)\n\nprint(ans)\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('20 2 5') == 84\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 2 5\") == \"84\"\nprint(solution(\"20 2 5\"))\n\n\"\"\"\n\n\nimport sys\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('20 2 5\\n') == \"84\"\nprint(solution(stdin))\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 2 5\") == \"84\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 2 5\") == \"84\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('20 2 5\\n') == 84\n\"\"\"\nimport math",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 2 5\") == \"84\"\nassert solution(\"1 10 11\") == \"0\"\nassert solution(\"1 1 10\") == \"0\"\nassert solution(\"10 5 10\") == \"0\"\nassert solution(\"10 10 10\") == \"20\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20 2 5') == 84\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 2 5\") == 84\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 2 5\") == \"84\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100') == 'ABC100'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100') == 'ABC100'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\"\nimport sys\n\nn = sys.stdin.readline()\n\nn = int(n)\n\nprint(f\"ABC{n}\")\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100') == 'ABC100'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('100') == 'ABC100'\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == 'ABC010'\n\"\"\"\n\nfrom typing import str\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100\") == \"ABC100\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\"\n\na,b = map(int,stdin.split())\ncount = 0\n\nfor i in range(1,13):\n    for j in range(1,32):\n        if i==a and j==b:\n            count += 1\n\nprint(count)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"3 31\") == \"0\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution( \"2 2\" ) == \"1\"\nassert solution( \"4 6\" ) == \"2\"\nassert solution( \"10 10\" ) == \"4\"\nassert solution( \"1 1\" ) == \"0\"\nassert solution( \"2 5\" ) == \"3\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"1 1\") == \"1\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 5') == '5'\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\"\n\na,b = input().split(\" \")",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\"\n\na, b = [int(x) for x in stdin.split()]\na, b = min(a, 12), min(b, 31)\ncount = 0\nfor i in range(1, 13):\n    for j in range(1, 32):\n        if i == a and j == b:\n            count += 1\nprint(count)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1\\n2\\n\") == \"2\"\nassert solution(\"3\\n2\\n1\\n\") == \"-1\"\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1\\n2\\n\") == \"2\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\\n2\\n\") == \"2\"\n\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n2\\n\") == \"2\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\\n2\\n\") == \"2\"\n\nassert solution(\"3\\n3\\n1\\n2\\n\") == \"2\"\n\nassert solution(\"3\\n1\\n2\\n\") == \"2\"\n\"\"\"\n\n\nimport sys\n",
        "num_ids_2": 39,
        "num_ids_4": 57
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1\\n2\") == \"2\"\n\"\"\"\n\nimport sys\n\ninputs = [int(num) for num in input().split()]\n\nn, k = inputs[0], inputs[1]\na_arr = [int(num) for num in input().split()]",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\\n2\\n\") == \"2\"\n\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n3') == '1'\nassert solution('1\\n2') == '-1'\nassert solution('3\\n2\\n1') == '2'\nassert solution('1\\n2\\n3') == '-1'\nassert solution('3\\n3\\n1') == '3'\n",
        "num_ids_2": 27,
        "num_ids_4": 60
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n3\\n1\\n2') == '2'\nassert solution('3\\n1\\n2') == '-1'\nassert solution('3\\n2\\n1') == '2'\nassert solution('4\\n1\\n2\\n3') == '3'\nassert solution('5\\n2\\n3\\n4\\n1') == '3'\n",
        "num_ids_2": 36,
        "num_ids_4": 71
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n3\\n1\\n2\\n\") == 2\n\"\"\"\n\nfrom collections import deque\nfrom itertools import islice\nfrom typing import List\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n6\n2\n6''') == '1'\nassert solution('''3\n6\n2\n6''') == '1'\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n6\\n2\\n6\") == \"1\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n2\\n6\\n') == '1'\n\"\"\"\n\nn = int(stdin.readline())\ncount = 0\n\nfor i in range(n):\n    if i == 0:\n        a = int(stdin.readline())\n        if a!= 0:\n            count += 1\n        else:\n            count += 0\n    else:\n        b = int(stdin.readline())\n        if b == 0:\n            count += 0\n        else:\n            count += 1\n\nprint(count)\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n6\\n2\\n6\\n') == '1'\n\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\nassert solution(\"5\\n2\\n3\\n4\\n5\\n6\") == \"6\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == '1'\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n6\\n2\\n6\\n\") == \"1\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 1 2\") == \"2\"\nassert solution(\"3 4\\n1 1 2 2 5\") == \"1\"\nassert solution(\"3 1\\n1 1 2\") == \"1\"\nassert solution(\"3 1\\n1 1 2\") == \"1\"\nassert solution(\"3 4\\n1 1 2 2 5\") == \"1\"\n",
        "num_ids_2": 34,
        "num_ids_4": 66
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == '1'\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 1\\n5 5\") == 1\nassert solution(\"3 3\\n1 1 2\\n2 2 3\") == 2\nassert solution(\"4 2\\n1 1 2 2 5\\n2 2 3 3 4\") == 2\nassert solution(\"4 2\\n1 1 2 2 5\\n2 2 3 3 4\") == 2\nassert solution(\"5 3\\n1 1 2 2 5 2\\n2 2 3 3 4 4\") == 2\n",
        "num_ids_2": 36,
        "num_ids_4": 82
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == 1\n\"\"\"\n\nn, k = [int(i) for i in stdin.strip().split()]\narr = [int(i) for i in stdin.strip().split()]\narr.sort()\n\nnum = []\nfor i in range(n):\n    num.append([i+1, arr[i]])\n\nnum = sorted(num, key=lambda x: x[1])\n\nans = 0\nfor i in range(n):\n    if k >= num[i][1]:\n        k -= num[i][1]\n        ans += 1\n    else:\n        break\n\nprint(ans)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == 1\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == '1'\n\"\"\"\n\nimport sys\nimport heapq",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == 1\n\"\"\"\n\nimport math",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 2 2 5\") == 1\n\"\"\"\n\n\nfrom typing import List\nimport numpy as np\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\\n6 1 1\\n\") == \"Yes\"\nassert solution(\"2\\n1 1 1\\n2 1 1\\n\") == \"No\"\n\n\"\"\"\nimport sys\nfrom collections import deque\n\ninputs = [line.rstrip().split() for line in sys.stdin]",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\": 3 1 2\") == \"Yes\"\n\n------\n\n\"Here is the condition of the problem:\n\nAtCoDeer the deer is going on a trip in a two-dimensional plane. In his plan, he will depart from point (0, 0) at time 0, then for each i between 1 and N (inclusive), he will visit point (x_i,y_i) at time t_i.\nIf AtCoDeer is at point (x, y) at time t, he can be at one of the following points at time t+1: (x+1,y), (x-1,y), (x,y+1) and (x,y-1).\nNote that he cannot stay at his place.\nDetermine whether he can carry out his plan.\n\"\n\"\"\"\n\nN = int(input())\n\npoints = []\n\nfor _ in range(N):\n    points.append(list(map(int, input().split())))",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2\\n6 1 1\\n\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 1\\n3 1 2\\n\") == \"Yes\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 1\\n3 1 1\\n2 4 3\\n5 6 4\") == \"No\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n3 1 2\\n6 1 1') == 'Yes'\nassert solution('2\\n3 1 2\\n6 1 1\\n') == 'No'\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 1\\n7 1 1\\n9 1 1\") == \"Yes\"\nassert solution(\"2 1 2\\n6 1 1\") == \"No\"\nassert solution(\"10 1 1\\n10 2 1\") == \"Yes\"\n\n\"\"\"\n\nfrom collections import deque\n",
        "num_ids_2": 39,
        "num_ids_4": 56
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\\n6 1 1\") == \"Yes\"\n\"\"\"\n\n\nfrom sys import stdin\nimport itertools as it\n\n\nclass Direction:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f\"{self.x}, {self.y}\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 2\") == \"Yes\"\nassert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"1 3 2\") == \"No\"\n\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == 2\n\"\"\"\n\nimport math",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3') == '2'\nprint(solution('1 3'))\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1 3''') == '2'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3\\n') == '2'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3') == 2\n\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3') == '2'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3\\n') == '2'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"2\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"2\"\n\"\"\"\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3') == 2\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n2 3\\n') == '0'\nassert solution('3 5\\n1 2\\n1 3\\n2 3\\n2 4\\n1 4\\n') == '6'\nassert solution('4 5\\n1 2\\n1 3\\n2 3\\n2 4\\n1 4\\n') == '5'\nassert solution('6 5\\n1 2\\n1 3\\n2 3\\n2 4\\n1 4\\n') == '4'\n\n\"\"\"",
        "num_ids_2": 50,
        "num_ids_4": 116
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n3 4\") == \"4\"\nassert solution(\"2 3\\n3 4\") == \"2\"\nassert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"4\"\n\"\"\"\nfrom collections import defaultdict\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n",
        "num_ids_2": 30,
        "num_ids_4": 69
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\\n\") == \"4\"\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n1 3\\n2 4\\n3 4\\n4 5\\n4 6\") == \"4\"\n-----------------\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\\n3 4\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\\n\") == \"4\"\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 3\\n2 4\\n5 6\\n3 6\\n5 7\\n4 7\\n2 3') == 4\n\"\"\"\n\nN, M = map(int, stdin.readline().split())\nedges = []\nfor _ in range(M):\n    edges.append(tuple(map(int, stdin.readline().split())))\n    \n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == '4'\n\"\"\"\n\n\nimport sys\nfrom collections import defaultdict",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\\n\") == \"4\"\nprint(\"Passed!\")\n\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n3 4\\n5 6\\n7\") == '4'",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 7 5') == '7'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 7 5\") == \"7\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 7 5') == '7'\nassert solution('1 1 1') == '2'\n\"\"\"\n\nA, B, C = map(int, input().split())",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 7 5\") == \"7\"\n\"\"\"\n\n\"\"\"\nimport sys\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5, 7, 5) == \"7\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 7 5\") == \"7\"\n\"\"\"\n\n\"\"\"\nIn the example above, there are two cases:\n\n5 7 5\n\nThe same number appears two times, and we print the number 7.\n\n5 7 2\n\nThe same number appears three times, and we print the number 2.\n\n8 9 10\n\nThe three different numbers are printed.\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 7 5') == '7'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7 5\") == '7'\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 7 5') == '7'\nprint(solution(stdin))\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7 5\") == \"7\"\n\n\"\"\"\nimport sys\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430 1\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0430\u044f \u0438\u0437 \u0431\u0443\u043a\u0432 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0430, \u043f\u0440\u0438\u0447\u0435\u043c \u0431\u0443\u043a\u0432\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b.\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432 \u043d\u0435\u0439 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u0431\u0443\u043a\u0432.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0430\u044f \u0438\u0437 \u0431\u0443\u043a\u0432 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0430, \u043f\u0440\u0438\u0447\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 \u0434\u043b\u0438\u043d\u0443 \u043e\u0442 1 \u0434\u043e 100 000.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u0431\u0443\u043a\u0432.\n\nSample Input:\nabcde\n\nSample Output:\n1\n\nSample Input:\nabbcde\n\nSample Output:\n3\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\nprint(solution(input()))\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n\nimport re\nfrom typing import NamedTuple, List\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\n\"\"\"\n\nfrom math import floor",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n\nA, B, C, D, E, F = list(map(int, stdin.split()))",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\nassert solution('3 1 3 2') == '3 3'\n\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"1 2 10 20 15 200\"\n) == \"110 10\"\nprint(solution(\"1 2 10 20 15 200\"))\n\"\"\"\n\nimport math\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\"\n\ns = input()\nprint(s[0]+str(len(s)-2)+s[-1])\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(s) == e\nprint(solution(s))\n\"\"\"\n\ns = input().strip()\nprint(s[0] + str(len(s) - 2) + s[-1])\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(i18n) == \"i18n\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\nassert solution(\"antidisestablishmentarianism\") == \"a19s\"\n\"\"\"\n\ns = input().lower()\n\nfor i in range(len(s)):\n    if i % 3 == 0:\n        print(s[i], end=\"\")\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('internationalization') == 'i18n'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\"\n\nstdin = input()\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('internationalization') == 'i18n'\nassert solution('programming') == 'pgm'\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\n\"\"\"\n\nimport unittest",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('pot', 'top') == 'YES'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'NO'\nassert solution('pot') == 'YES'\nassert solution('top') == 'NO'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"pot\\ntop\\n\") == \"YES\"\nassert solution(\"pot\\nbot\\n\") == \"NO\"\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('pot') == 'YES'\nassert solution('top') == 'YES'\nassert solution('top') == 'NO'\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('pot') == 'YES'\nassert solution('top') == 'NO'\n\"\"\"\n\nfrom string import ascii_lowercase",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'YES'\nassert solution('pot') == 'YES'\nassert solution('top') == 'NO'\nassert solution('topp') == 'NO'\nassert solution('toppt') == 'NO'\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\n\"\"\"\n\ngrid = [input().split() for _ in range(2)]\n\ngrid_s = list(zip(*grid[::-1]))\n\nfor g in grid_s:\n    print(''.join(g))\n\n\"\"\"\nfor i in range(len(grid[0])):\n    print(''.join(grid[j][i] for j in range(len(grid))))\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"pot top\") == \"YES\"\nassert solution(\"top pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\nassert solution(\"pot\") == \"NO\"\n\n\"\"\"\n\nfrom itertools import product\n",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\nassert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('ab') == 'ab'\nassert solution('aba') == 'aba'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aba') == 'b'\nassert solution('abcd') == 'd'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aba') == 'b'\n\"\"\"\n\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ababa') == 'aba'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aba') == 'b'\nassert solution('abb') == 'b'\nassert solution('abcd') == 'ab'\nassert solution('abc') == 'ab'\nassert solution('abca') == 'ab'\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aba') == 'b'\nassert solution('abab') == 'ab'\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "num_ids_2": 21,
        "num_ids_4": 1659
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aba') == 'b'\n\"\"\"\nimport itertools",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aba') == 'b'\n\"\"\"\n\ns = input()\nk = int(input())\n\na_list = []\nfor i in range(len(s)):\n    for j in range(i, len(s)+1):\n        substring = s[i:j]\n        if substring not in a_list:\n            a_list.append(substring)\na_list.sort()\nprint(a_list[k-1])\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aba') == 'b'\n\"\"\"\n\ns = stdin[0]\nk = int(stdin[1])\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aba') == 'b'\n\"\"\"\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '4 4 2\\n'\n    '2 1 1\\n'\n    '3 3 4\\n'\n) == '9'\n\"\"\"\n\nimport sys\nfrom typing import List, Tuple\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\\n\") == \"9\"\nprint(\"Passed\")\n\"\"\"\n\n\nimport unittest\n\nclass TestCase(unittest.TestCase):\n    def test1(self):\n        input_lines = ['5 4 2\\n', '2 1 1\\n', '3 3 4\\n']\n        expected = '9'\n        actual = solution(input_lines)\n        self.assertEqual(expected, actual)\n    def test2(self):\n        input_lines = ['5 4 2\\n', '2 1 3\\n', '3 3 4\\n']\n        expected = '15'\n        actual = solution(input_lines)\n        self.assertEqual(expected, actual)\n    def test3(self):\n        input_lines = ['5 4 2\\n', '4 1 4\\n', '3 3 4\\n']\n        expected = '16'\n        actual = solution(input_lines)\n        self.assertEqual(expected, actual)\n    def test4(self):\n        input_lines = ['5 4 2\\n', '5 1 4\\n', '3 3 4\\n']\n        expected = '16'\n        actual = solution(input_lines)\n        self.assertEqual(expected, actual)\n    def test5(self):\n        input_lines = ['5 4 2\\n', '5 5 4\\n', '3 3 4\\n']\n        expected = '25'\n        actual = solution(input_lines)\n        self.",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4 2\\n2 1 1\\n3 3 4') == '9'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\"\n\nimport sys\nfrom itertools import chain",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\n\"\"\"\n\nfrom math import sqrt\n\nW, H, N = [int(num) for num in stdin.split()]\n\nx = y = [0] * N\na = [0] * N\nfor i in range(N):\n    x[i], y[i], a[i] = [int(num) for num in stdin.split()]\n\ntotal = 0\n\nfor i in range(N):\n    if a[i] == 1:\n        total += H - y[i]\n    elif a[i] == 2:\n        total += y[i]\n    elif a[i] == 3:\n        total += x[i]\n    elif a[i] == 4:\n        total += W - x[i]\n\nprint(total)\n\n\"\"\"\nimport numpy as np\n\nw, h, n = [int(num) for num in stdin.split()]\nx, y, a = np.array([0] * n), np.array([0] * n), np.array([0] * n)\n\nfor i in range(n):\n    x[i], y[i], a[i] = [int(num) for num in stdin.split()]\n\ntotal = 0\n\nfor i in range(n):\n    if a[i] == 1:\n        total += h - y[i]\n    elif a[i] == 2:\n        total += y[i]\n    elif a[i] == 3:\n        total += x[i]\n    elif a[i] == 4:\n        total += w - x[i]\n\nprint(total)\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5 1\\n1 10 1\\n\") == \"12\\n11\\n0\"\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 10 1\") == \"12\\n11\\n0\"\nassert solution(\"6\\n1 10 1\") == \"12\\n11\\n0\"\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n6 5 1') == '12\\n11\\n0'\nassert solution('2\\n9 7 3') == '9\\n6\\n0'\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(expected_result)\nprint(solution(str(input())))\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n6 5 1\\n1 10 1\\n\") == \"12\\n11\\n0\"\n\"\"\"\nimport math\n\nN = int(input())\nC = [0]\nS = [0]\nF = [0]\nfor i in range(N):\n    C.append(int(input()))\n    S.append(int(input()))\n    F.append(int(input()))\n\nimport math",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_1) == test_output_1\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n6 5 1\n1 10 1\n\"\"\") == \"12\\n11\\n0\"\n\n------\n",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n6 5 1') == '12\\n11\\n0'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 5 1\\n1 10 1\") == \"12\\n11\\n0\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('3\\n1 10 1\\n') == '12'\nassert solution('6\\n5 1 1\\n') == '12'\nassert solution('2\\n1 10 1\\n') == '11'\n\n'''",
        "num_ids_2": 25,
        "num_ids_4": 59
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n*.\\n.\") == \"*.\\n.*\\n.*\\n.*\"\nassert solution(\"1 2\\n.*\\n.\") == \".*\\n.*\"\n\"\"\"",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n*\\n.*\") == \"*\\n.*\\n.*\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'2 2\\n.*\\n.*'\n) ==\n'*.\\n*.\\n.*\\n.*'\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n*.\\n.*\") == '*.\\n*.\\n.*'\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == output()\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n*.\\n.*\") == \"*.\\n.*\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n*\\n.*\\n*\") == \"*\\n.*\\n*\\n*\\n.*\\n.*\\n\"\nassert solution(\"4 5\\n.\\n.\\n.*\\n.*\") == \".\\n.*\\n.*\\n.*\\n.*\\n.*\\n.\\n.*\\n.*\\n.*\\n\"\nassert solution(\"3 3\\n.\\n.*\\n.*\") == \"*\\n.*\\n.*\\n.*\\n.*\\n.*\\n\"\nassert solution(\"1 1\\n.\") == \"*\\n\"\nassert solution(\"4 5\\n.\\n.\\n.\\n.*\\n.*\") == \".\\n.*\\n.*\\n.*\\n.*\\n.*\\n\"\n\n\"\"\"\n",
        "num_ids_2": 88,
        "num_ids_4": 140
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n.*\\n.*\") == \".*\\n.*\\n.*\\n.*\"\nassert solution(\"2 1\\n.*\") == \".*\\n.*\"\n\"\"\"",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n.*\\n.*\") == \".*\\n.*\\n.*\\n.*\\n\"\nassert solution(\"2 2\\n..\\n..\") == \"..\\n..\\n..\\n..\\n\"\n\n\"\"\"",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 2\n*.\n.*\n''') == '*.\\n.*\\n.*\\n.*\\n'\nassert solution('''3 3\n.*\n.*\n.*\n''') == '.*\\n.*\\n.*\\n.*\\n.*\\n.*\\n.*\\n'\nassert solution('''5 5\n.*\n.*\n.*\n.*\n.*\n''') == '.*\\n.*\\n.*\\n.*\\n.*\\n.*\\n.*\\n.*\\n.*\\n.*\\n'\nassert solution('''5 5\n.*\n.*\n.*\n.*\n.*\n''') == '.*\\n.*\\n.*\\n.*\\n.*\\n.*\\n.*\\n.*\\n.*\\n.*\\n'\nassert solution('''2 3\n.*\n.*\n.*\n''') == '.*\\n.*\\n.*\\n.*\\n.*\\n.*\\n'",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"YES\"\nassert solution(\"5\\n1 2 3 4 5\\n6 7 8 9 10\") == \"NO\"\n\n:param stdin: str standard input\n:return: str\n\"\"\"\nimport collections\nimport re\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == 'YES'\nassert solution(\"5\\n2 6 1 4\") == 'NO'\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == 'YES'\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 6 1 4 5') == 'YES'\nassert solution('5 5 6') == 'NO'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n2 6 1 4 5''') == \"YES\"\nassert solution('''7\n1 2 3 4 5 6 7''') == \"NO\"\n\n'''\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\nassert solution('5\\n1 2 3 4 5') == 'NO'\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nseq = list(map(int, sys.stdin.readline().split()))",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == 'YES'\nassert solution('2 6 1 4 5') == 'NO'\nassert solution('4 6 6 4') == 'YES'\nassert solution('1 2 3 3 3') == 'NO'\n\"\"\"\n\n\"\"\"\nYou are given a sequence A1, A2,..., AN consisting of N integers, all of them equal to 0 or 1. In addition, you have a number K.\n\nFind the longest subsequence of consecutive elements of the given sequence such that the value of this subsequence is equal to K.\n\nConstraints\n2 \u2264 N \u2264 1000\n0 \u2264 A[i] \u2264 1\n0 \u2264 K \u2264 2\nExample\nFor A = [1, 1, 1, 0, 0, 0, 0, 1, 1, 1], K = 1, the output should be\n",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\n\n\"\"\"\n",
        "num_ids_2": 67,
        "num_ids_4": 67
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n1 2 3 4 5\\n5\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n5\\n1 2 3 4 5\") == \"2\"\nassert solution(\"5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n5\\n1 2 3 4 5\\n6\\n1 2 3 4 5\") == \"3\"\nassert solution(\"5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n5\\n1 2 3 4 5\\n6\\n1 2 3 4 5\") == \"4\"\nassert solution(\"5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n5\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\") == \"1\"\nassert solution(\"5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\") == \"2\"\n\nsolution(\"5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1 2 3 4 5\\n6\\n1",
        "num_ids_2": 130,
        "num_ids_4": 470
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"3\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"4\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"1\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\n\"\"\"\n\nimport math\nimport sys\nfrom typing import List, Set\n\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_INT = [int(line) for line in INPUT_LINES[1:]]\n",
        "num_ids_2": 130,
        "num_ids_4": 260
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2''') == '2'\nassert solution('''5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2''') == '3'\nassert solution('''5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2''') == '4'\nassert solution('''5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2''') == '1'\nassert solution('''5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2''') == '2'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n4\\n2 1 2 3\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(example) == example\n'''\n\nimport sys\n\nimport math\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('3\\n1 1 3 4 2 2\\n2\\n') == '4'\nassert solution('4\\n1 1 3 4 2 2\\n2\\n') == '2'\nassert solution('5\\n1 2 3 4 5\\n2\\n') == '2'\n\n'''\n\nfrom typing import List, Tuple, Dict\nfrom collections import Counter\n",
        "num_ids_2": 20,
        "num_ids_4": 66
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\") == \"3\"\nassert solution(\"5\\n8\\n1 2 3 4 5\") == \"2\"\nassert solution(\"5\\n8\\n1 2 2 1 2 1 1 2\") == \"4\"\nassert solution(\"5\\n8\\n1 2 2 1 2 1 1 2\") == \"4\"\nassert solution(\"5\\n8\\n1 2 3 4 2\") == \"1\"\n",
        "num_ids_2": 43,
        "num_ids_4": 89
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == 2\nassert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == 3\nassert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == 4\nassert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == 1\nassert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == 2",
        "num_ids_2": 120,
        "num_ids_4": 240
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n1 1 2 2 1 2 1 1 2\") == \"3\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n1 1 2 2 1 2 1 1 2\") == \"4\"\n\"\"\"\nfrom collections import Counter\nfrom itertools import combinations",
        "num_ids_2": 61,
        "num_ids_4": 92
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n1 5\\n22 5\\n987 13\\n') == '3'\nassert solution('7 3\\n1 5\\n22 5\\n987 13\\n') == '1'\nassert solution('7 3\\n22 5\\n987 13\\n') == '5'\nassert solution('7 3\\n22 5\\n987 13\\n') == '77'\n",
        "num_ids_2": 50,
        "num_ids_4": 92
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"3\"\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"1\"\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"5\"\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"77\"\n",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"7 3\") == \"1\"\nassert solution(\"22 5\") == \"5\"\nassert solution(\"987 13\") == \"77\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 3\\n1 5\\n22 5\\n987 13\\n') == '3'\nassert solution('7 3\\n1 5\\n22 5\\n987 13\\n') == '1'\nassert solution('7 3\\n1 5\\n22 5\\n987 13\\n') == '5'\nassert solution('7 3\\n1 5\\n22 5\\n987 13\\n') == '77'\n\"\"\"\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3\\n1 5\\n22 5\\n987 13') == '3\\n1\\n5\\n77'\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n1 5\") == \"1\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"3\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"22 5\") == \"77\"\nassert solution(\"987 13\") == \"5\"\n\"\"\"\n\nt = int(input())\nfor i in range(t):\n    n, x = map(int, input().split())\n    print((n // x) + 1)\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2') == '3'\nassert solution('7 3') == '1'\nassert solution('22 5') == '5'\nassert solution('987 13') == '77'",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3\\n1 5\\n22 5\\n987 13\\n') == '3'\nassert solution('7 3\\n1 5\\n22 5\\n987 13\\n') == '1'\n\"\"\"\n\nfrom math import log\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '1'\nassert solution('3\\n') == '2'\nassert solution('7\\n') == '3'\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"9 4 2 1 0 0 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0\"\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == \"26 10 1 2 9 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\n",
        "num_ids_2": 73,
        "num_ids_4": 121
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('codeforces') == '2610'\nassert solution('abca') == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\nassert solution('qwertyuioplkjhgfdsazxcvbnm') == '0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0'\nassert solution('codeforces') == '2610'\nassert solution('abca') == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n",
        "num_ids_2": 49,
        "num_ids_4": 112
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \"\nassert solution(\"codeforces\") == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2 \"\n\"\"\"\n",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abca\") == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"codeforc\") == [9, 4, 2, 1, 1, 5, 4, 11, 8, 2, 7, 1, 10, 1, 5, 2]\nassert solution(\"codeforces\") == [9, 4, 2, 1, 1, 5, 4, 11, 8, 2, 7, 1, 10, 1, 5, 2]\n\n\"\"\"\nimport sys\nfrom collections import Counter\nfrom itertools import accumulate",
        "num_ids_2": 87,
        "num_ids_4": 130
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('codeforces') == [9, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\"\"\"\n\nimport sys",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abca\") == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"codeforces\") == [2, 1, 1, 9, 2, 2, 5, 2, 2, 1, 1, 5, 4, 11, 8, 2, 7, 5, 1, 10, 1, 5, 2, 2, 2, 2, 2, 1]\n\"\"\"\nfrom collections import defaultdict\n",
        "num_ids_2": 132,
        "num_ids_4": 132
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abca\") == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
        "num_ids_2": 1035,
        "num_ids_4": 1035
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"4 2 codeforces\") == \"0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0\"\n\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter\nfrom itertools import combinations\n",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('codeforces') == '26 10'\nassert solution('qwertyuioplkjhgfdsazxcvbnm') == '20 10 1 2 3 5 10 5 9 4'\n\n\n\n-----Explanation-----\n\nThere are $3$ test cases.\nThe first test case has $n = 4$ and $m = 2$, and $s = \"abca\". It means that you have $n - m = 3$ wrong tries. For each wrong try, you press the button 'a' once.\nThe final try, 'abca', has $n - m = 3$ wrong tries. You press the button 'a' $3$ times and the button 'b' $2$ times.\nYou can use the previous solution for this one.\n\nThe second test case has $n = 10$ and $m = 10$ and $s = \"codeforces\". It means that you have $n - m = 9$ wrong tries. For each wrong try, you press the button 'c' $9$ times and the button 'd' $4$ times.\nYou can use the previous solution for this one.\n\nThe third test case has $n = 26$ and $m = 10$ and $s = \"qwertyuioplkjhgfdsazxcvbnm\". It means that you have $n - m = 20$ wrong tries. For each wrong try, you press the button 'a' $20$ times and the button 'b' $10$ times.\nYou can use the previous solution for this one.\n\"\"\"",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \"\nassert solution(\"codeforces\") == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2 \"\n\"\"\"\n",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\n3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\nprint(\"Try batch mode\")\nprint(\"Input the test cases in the following format: <num of test cases> <first test case position> <second test case position>...\")\nprint(\"Or <help> if you need it\")\nprint(\"E.g. <3 3 4> <10 20 30> <5 5 5> <2 4 3> <1 1000000000 1000000000> <1 1000000000 999999999> <3 2 5> <3 2 6>\")\nprint(\"When you are done press <Ctrl-D> twice\")\ntry:\n    while True:\n        print(solution(input()))\nexcept EOFError:\n    print(\"Exiting\")\n",
        "num_ids_2": 80,
        "num_ids_4": 80
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 3\") == \"0\"\n\"\"\"\n\nimport sys\n\nd = {}\n\nfor line in sys.stdin:\n    line = line.strip()\n    line = line.split(' ')\n    if len(line)!= 3:\n        print(\"Invalid Input\")\n        exit(0)\n\n    a, b, c = map(int, line)\n\n    if a in d:\n        d[a].append(b)\n    else:\n        d[a] = [b]\n\n    if b in d:\n        d[b].append(c)\n    else:\n        d[b] = [c]\n\n    if c in d:\n        d[c].append(a)\n    else:\n        d[c] = [a]\n\nfor i in range(1, 11):\n    if i in d:\n        d[i].sort()\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 3\") == \"0\"\nassert solution(\"3 3 4\") == \"0\"\nassert solution(\"3 3 4\") == \"0\"\nassert solution(\"5 3 4\") == \"0\"\nassert solution(\"3 3 4\") == \"0\"\n\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 4\\n10 20 30') == '0'\nassert solution('5 5 5\\n2 4 3') == '0'\nassert solution('2 4 3\\n1 1000000000 1000000000') == '1999999994'\nassert solution('1 1000000000 999999999\\n3 2 5') == '2'\nassert solution('3 2 5\\n3 2 6') == '4'\n\n\"\"\"\n\n\nfrom itertools import permutations",
        "num_ids_2": 34,
        "num_ids_4": 75
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\n",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open(r\"D:\\Code\\Project Euler\\IO\\test_2.txt\").read()) == open(r\"D:\\Code\\Project Euler\\IO\\answers\\2.txt\").read()\n",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''8\n3 3 4\n10 20 30\n5 5 5\n2 4 3\n1 1000000000 1000000000\n1 1000000000 999999999\n3 2 5\n3 2 6''') == '''0\n36\n0\n0\n1999999994\n1999999994\n2\n4'''\n\nprint('HERE')\nprint(solution('''8\n3 3 4\n10 20 30\n5 5 5\n2 4 3\n1 1000000000 1000000000\n1 1000000000 999999999\n3 2 5\n3 2 6'''))\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 5\") == \"0\"\nassert solution(\"10 20 30\") == \"36\"\nassert solution(\"5 5 5\") == \"0\"\nassert solution(\"2 4 3\") == \"0\"\nassert solution(\"1 1000000000 999999999\") == \"1999999994\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\") == \"0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4\"\n",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\") == \"0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4\"\n",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3\\n4 5 6') == 'NO'\nassert solution('3\\n1 2 3\\n4 6 5') == 'NO'\nassert solution('4\\n1 2 3 4\\n4 5 6 7') == 'YES'\nassert solution('3\\n1 2 3\\n4 5 6') == 'YES'\nassert solution('2\\n1 1\\n2 2') == 'NO'\n",
        "num_ids_2": 40,
        "num_ids_4": 82
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nNO\"\nassert solution(\"7\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == \"YES\\nNO\"\n",
        "num_ids_2": 90,
        "num_ids_4": 90
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 14 16 12\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"1 8\") == \"YES\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"1 1 1 1\") == \"YES\"\n",
        "num_ids_2": 23,
        "num_ids_4": 44
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n11 14 16 12\") == 'YES'\nassert solution(\"2\\n1 8\") == 'NO'\nassert solution(\"4\\n1 1 1 1\") == 'YES'\nassert solution(\"6\\n1 6 3 10 5 8\") == 'YES'\n",
        "num_ids_2": 30,
        "num_ids_4": 64
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_01) == \"YES\"\nassert solution(test_02) == \"NO\"\nassert solution(test_03) == \"YES\"\nassert solution(test_04) == \"YES\"\nassert solution(test_05) == \"YES\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n7\n4\n11 14 16 12\n2\n1 8\n4\n1 1 1 1\n4\n1 2 5 6\n2\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8\n\"\"\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\"\nprint(\"Test 1 OK\")\n\nassert solution(\"\"\"\n7\n4\n11 14 16 12\n2\n1 8\n4\n1 1 1 1\n4\n1 2 5 6\n2\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8\n\"\"\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\"\nprint(\"Test 2 OK\")\n\nassert solution(\"\"\"\n7\n4\n11 14 16 12\n2\n1 8\n4\n1 1 1 1\n4\n1 2 5 6\n2\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8\n\"\"\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\"\nprint(\"Test 3 OK\")\n\nassert solution(\"\"\"\n7\n4\n11 14 16 12\n2\n1 8\n4\n1 1 1 1\n4\n1 2 5 6\n2\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8\n\"\"\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\"\nprint(\"Test 4 OK\")\n\nassert solution(\"\"\"\n7\n4\n11 14 16 12\n2\n1 8\n4\n1 1 1 1\n4\n1 2 5 6\n2\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8\n\"\"\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\"\nprint(\"Test 5 OK\")",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6') == 'YES'\n\n\"\"\"\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\") == \"NO\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\") == \"YES\"\n\"\"\"\n\nimport sys\nimport math\n",
        "num_ids_2": 67,
        "num_ids_4": 137
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_data_1) == 'YES'\nassert solution(test_data_2) == 'NO'\n\"\"\"\n\n\nfrom typing import List",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == 'YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO'",
        "num_ids_2": 91,
        "num_ids_4": 91
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == \"13\"\nprint(solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\"))",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5 5 4\n1 2 5\n2 3 4\n1 4 3\n4 3 7\n3 5 2\n1 5\n1 3\n3 3\n1 5\n''') == '13'\nassert solution('''\n4 4 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n1 5\n1 3\n3 3\n1 5\n''') == '22'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == \"13\"",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n') == '13'\n\n\"\"\"\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n') == '22'\nassert solution('5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n') == '13'\n\"\"\"\n\n\"\"\"\na = [\n    [1, 2], [3, 4], [5, 6],\n    [7, 8], [9, 10], [11, 12],\n    [13, 14], [15, 16],\n]\n\nb = [\n    [1, 1], [3, 4], [5, 6],\n    [7, 7], [9, 10], [11, 12],\n    [13, 14], [15, 16],\n]\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import inf",
        "num_ids_2": 102,
        "num_ids_4": 102
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == \"13\"\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 102,
        "num_ids_4": 102
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"\n",
        "num_ids_2": 100,
        "num_ids_4": 100
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == \"13\"\n\"\"\"\n",
        "num_ids_2": 98,
        "num_ids_4": 98
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"\n\nassert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == \"22\"\n",
        "num_ids_2": 102,
        "num_ids_4": 102
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n6\\n13\\n14\\n3620\\n10000') == '1\\n3\\n9\\n13\\n27\\n6561\\n19683'\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3\\n7\\n1\\n9') == '3'\nassert solution('3\\n1\\n7\\n1\\n9') == '3'\n\"\"\"\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n13\\n3\\n15\\n3\\n5\\n35\\n9\") == \"10\\n13\\n3\\n15\\n9\"\n\"\"\"\n\nimport sys\nimport numpy as np\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1\") == \"2\"\nassert solution(\"3\\n10\") == \"3\"\nassert solution(\"5\\n12\") == \"5\"\n\"\"\"\n\nfrom math import log",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\") == \"3\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1\") == \"1\"\nassert solution(\"4\\n2\") == \"1\"\nassert solution(\"4\\n3\") == \"2\"\nassert solution(\"4\\n4\") == \"3\"\nassert solution(\"4\\n5\") == \"3\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\") == \"11\"\n\"\"\"\n\nfrom math import ceil, log\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\"\n\"\"\"\n",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3\") == \"3\"\nassert solution(\"3\\n3\") == \"3\"\nassert solution(\"7\\n2\") == \"3\"\nassert solution(\"4\\n1\") == \"4\"\n\"\"\"\n\nimport math",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\") == \"6\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 2 4\\n3\\n1 2 3\") == \"1 1 1 1\"\nassert solution(\"3\\n1 2 3\\n1\\n2\") == \"1 1\"\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 4 5') == '1 1 1 1 1'\nassert solution('6\\n1 2 3 4 5 6') == '1 1 1 1 1'\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3\\n1\\n2\\n1\") == \"1 1 1 1\"\nassert solution(\"4\\n2\\n2\\n1\\n2\\n1\") == \"2 2 2 2\"\nassert solution(\"2\\n2\\n2\\n1\\n2\\n1\") == \"2 2 2 1 2\"\n\"\"\"\nfrom __future__ import annotations\n\nimport unittest\nfrom collections import Counter\nfrom itertools import permutations\nfrom typing import Iterator, List, Tuple, Union\n",
        "num_ids_2": 53,
        "num_ids_4": 82
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2\\n2 3 1\\n5\\n5 1 2 4 3') == '3 3 3 2 1 3'\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n\") == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'\n\n\"\"\"\n",
        "num_ids_2": 96,
        "num_ids_4": 96
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3\\n1 2 3\\n\") == \"1 1 1 1\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"1 1 1 1 1\"\nassert solution(\"4\\n5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"1 1 1 1 1\"\nassert solution(\"4\\n5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"1 1 1 1 1\"\n\"\"\"\n",
        "num_ids_2": 64,
        "num_ids_4": 96
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"1 1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"1 1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n4 6 2 1 5 3\") == \"1 1 1 1 1\"\n\"\"\"\n\n\nimport sys\nfrom typing import List\n",
        "num_ids_2": 61,
        "num_ids_4": 96
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'\n",
        "num_ids_2": 94,
        "num_ids_4": 94
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"1 1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"3 3 3\"\nassert solution(\"6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\") == \"2 3 3 2 1 3\"\n\"\"\"\n\nn = int(input())\np = [int(x) for x in input().split()]\n",
        "num_ids_2": 59,
        "num_ids_4": 97
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n3 -5 -2 -4\\n2 -2 -1 0 1\") == \"7\"\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 6\\n1 5\") == \"8\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 6\\n1 5\\n\") == \"8\"\nassert solution(\"3 5\\n0 3 1\\n\") == \"7\"\n\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 6\\n1 5\\n') == '8'\nassert solution('3 5\\n0 3 1\\n') == '7'\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 4 3\\n1 2 3') == '6'\n\nassert solution('2 3 4\\n0 1 2') == '0'\n\nassert solution('2 4\\n1 4') == '4'\n\nassert solution('2 3\\n-1 4') == '2'\nassert solution('2 2\\n1 3') == '1'\n",
        "num_ids_2": 34,
        "num_ids_4": 65
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 6\\n1 5\\n') == '8\\n-1 2 6 4 0 3'\nassert solution('3 5\\n0 3 1\\n') == '7\\n5 -2 4 -1 2'\n\"\"\"\n\n\n\nimport collections\nimport math\nimport sys",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n0 3 1\\n\") == \"7\\n-2 4 -1 2\\n\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 6\\n1 5\\n') == '8\\n-1 2 6 4 0 3'\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n0 3 1\\n\") == \"7\\n-2 4 -1 2\"\n\"\"\"\n\nimport sys\nfrom collections import deque",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 6\\n1 5\\n\") == \"8\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\\n2\") == \"YES\\nRUUURRRRUU\"\n\n\"\"\"\n\n\nimport sys\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRRRRUUU\"\n\"\"\"\n\nimport sys\nfrom functools import cmp_to_key\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\n\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_0) == test_0_result\n\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\nassert solution(\"1\\n0\\n0\\n0\\n0\") == \"NO\"\nassert solution(\"1\\n1\\n1\") == \"YES\\nRRRR\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 63,
        "num_ids_4": 83
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\n\"\"\"\n\nimport itertools\nimport sys\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2\\n3 3') == 'RUUURRRRUU'\n\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\") == \"YES\\nRUUURRRRUU\"\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\"\n) == \"YES\\nRUUURRRRUU\"\n\nassert solution(\n\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\"\n) == \"NO\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5\\n1 3\\n1 2\\n3 3\\n5 5\") == \"YES\\nRUUURRRRUU\"\n\"\"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"8\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"500 4\") == \"8\"\nassert solution(\"217871987498122 10\") == \"899999999999999999\"\nassert solution(\"100000000000000001 1\") == \"899999999999999999\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 22,
        "num_ids_4": 53
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1') == '8\\n0\\n500\\n2128012501878\\n899999999999999999'\n\"\"\"\n\nimport unittest\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('2 1') == '0'\nassert solution('1 2') == '2'\nassert solution('500 4') == '8'\n",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"8\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"500 4\") == \"8\"\nassert solution(\"217871987498122 10\") == \"899999999999999999\"\nassert solution(\"100000000000000001 1\") == \"899999999999999999\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 53
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"8\"\n\"\"\"\n\n\nt = int(input())\n\nfor _ in range(t):\n    n, s = map(int, input().split())\n    print(s - (sum(map(int, list(str(n))))) + 1)\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\\n\") == \"8\\n0\\n500\\n2128012501878\\n899999999999999999\"\n\"\"\"\n\nimport sys\n\nsys.stdin = open(\"Problem_011.txt\")\n\nn = int(input())\n\nfor i in range(n):\n    n, s = map(int, input().split())\n    count = 0\n    while sum([int(i) for i in str(n)]) > s:\n        n -= 1\n        count += 1\n    print(count)\n",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1') == '4'\nassert solution('1 1') == '0'\nassert solution('500 4') == '8'\nassert solution('217871987498122 10') == '999999998'\nassert solution('100000000000000001 1') == '99999999999999999'\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 50
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\n''') == '8\\n0\\n500\\n2128012501878\\n899999999999999999'\n\"\"\"\n\nfrom math import ceil",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n') == '3'\n\"\"\"\n\nfrom collections import deque\n\nclass Queue:\n    def __init__(self):\n        self.items = deque()\n    def push(self, n):\n        self.items.append(n)\n    def pop(self):\n        return self.items.popleft()\n    def empty(self):\n        return len(self.items) == 0\n\nq = Queue()\nn = int(input())\nfor i in range(n):\n    x = list(map(int, input().split()))\n    q.push(x)",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"8\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"7\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"7\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"7\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"7\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"2\\n0\\n2\\n4\\n1\"\n",
        "num_ids_2": 122,
        "num_ids_4": 244
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n0 0 1 0 1 0 1\") == \"2\"\nassert solution(\"3\\n1 0 0\") == \"0\"\nassert solution(\"5\\n1 1 0 0 1\") == \"2\"\n\"\"\"\nimport sys",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n0 0 1 0 1 0 1\") == 2\nassert solution(\"3\\n1 0 0\") == 0\nassert solution(\"5\\n1 1 0 0 1\") == 2\nassert solution(\"6\\n1 0 0 0 0 1\") == 1\n\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 61
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\") == \"0\"\nassert solution(\"7\\n1 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\") == \"2\"\nassert solution(\"7\\n0 1 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\") == \"2\"\n\"\"\"",
        "num_ids_2": 96,
        "num_ids_4": 192
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3\\n1 1 0 1\\n3\\n1 1 0 1\") == \"0\"\nassert solution(\"4\\n1 1 1\\n1 1 1\") == \"0\"\nassert solution(\"4\\n1 0 1\\n1 1 1\") == \"1\"\nassert solution(\"4\\n0 1 1\\n0 1 1\") == \"1\"\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 88
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == '2'\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == '0'\nassert solution(\"7\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == '1'\n\n\"\"\"",
        "num_ids_2": 116,
        "num_ids_4": 154
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(['7', '0 0 1 0 1 0 1', '3', '1 0 0', '5', '1 1 0 0 1', '6', '1 0 0 0 0 1']) == '2'\nassert solution(['7', '1 0 0', '5', '1 1 0 0 1']) == '0'\nassert solution(['7', '1 0 0', '5', '1 1 0 1 1']) == '1'\nassert solution(['7', '1 1 0 1 1', '5', '1 1 0 1 1']) == '1'\nassert solution(['7', '1 1 0 1 1', '5', '1 1 0 1 1']) == '2'\n",
        "num_ids_2": 77,
        "num_ids_4": 133
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"7\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"7\\n1 1 1 1 1\\n6\\n1 0 0 0 0 1\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"5\\n1 1 0 1 1\\n6\\n1 0 0 0 0 1\") == \"1\\n0\\n2\\n4\\n1\"\nassert solution(\"3\\n1 1 1\\n6\\n1 0 0\\n5\\n1 1 0 1 1\") == \"1\\n0\\n2\\n4\\n1\"\n",
        "num_ids_2": 100,
        "num_ids_4": 180
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 0 0\\n5\\n1 1 0 0 1') == '2'\nassert solution('4\\n1 0 0\\n5\\n1 1 0 0 1') == '0'\nassert solution('4\\n1 0 0\\n5\\n1 1 0 0 1') == '2'\n",
        "num_ids_2": 50,
        "num_ids_4": 75
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\n1 0 0 1 0 1 0 1') == '2'\nassert solution('3\\n1 0 0') == '0'\nassert solution('5\\n1 1 0 0 1') == '2'\n\"\"\"\n\nfrom itertools import chain\n",
        "num_ids_2": 35,
        "num_ids_4": 52
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n7 3\n4 4\n6 2''') == 'cbcacab'\nassert solution('''3\n7 3\n4 4\n6 2''') == 'abcd'\nassert solution('''3\n7 3\n4 4\n6 2''') == 'baabab'\nassert solution('''2\n10 5\n10 3''') == 'aaabbbccc'\nassert solution('''1\n10 5\n10 3''') == 'aabbbbbb'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin_lines) == stdout_lines",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3\\n4 4\\n6 2\\n') == 'cbcacab'\nassert solution('7 3\\n4 4\\n6 2\\n') == 'cbcacab'\nassert solution('7 3\\n4 4\\n6 2\\n') == 'cbcacab'\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 48,
        "num_ids_4": 72
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\\n\") == \"cbcacab\"\nassert solution(\"7 3\\n4 4\\n6 2\\n\")!= \"abcd\"\nassert solution(\"7 3\\n4 4\\n6 2\\n\")!= \"baabab\"\n\"\"\"\n",
        "num_ids_2": 47,
        "num_ids_4": 71
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n2 2\\n2 3\\n4 3\\n1 1\") == \"ab\\naa\"\nassert solution(\"5 2\\n2 2\\n2 3\\n4 3\\n1 1\") == \"ab\\naa\"\nassert solution(\"5 2\\n2 2\\n2 3\\n4 3\\n1 1\") == \"ab\\naa\"\n\"\"\"\n\nimport sys\nimport itertools",
        "num_ids_2": 60,
        "num_ids_4": 90
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"cbcacab\"\nassert solution(\"7 3\") == \"cbcacab\"\nassert solution(\"6 2\") == \"abcd\"\nassert solution(\"4 4\") == \"abcd\"\nassert solution(\"6 2\") == \"baabab\"\n",
        "num_ids_2": 28,
        "num_ids_4": 52
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\\nabcd\\nbaabab\"\nassert solution(\"10 10\\n2 2\\n1 1\\n5 5\\n5 2\\n7 3\\n7 3\\n8 5\\n4 2\\n9 10\\n9 2\") == \"bcabd\\nacbd\\nbcacd\\ncbcad\\ncbcda\\nbcbad\\nbcadb\\nbcadc\\nbcadd\\nbcbac\\nbcbca\\nbcbda\\nbcbdd\\nbcbcd\\nbcbdc\\nbcbdb\\nbcbda\\nbcbdd\\nbcbcd\\nbcbdc\\nbcbdb\\nbcbda\\nbcbdd\\nbcbcd\"\n",
        "num_ids_2": 191,
        "num_ids_4": 191
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\"\nassert solution(\"7 4\\n4 4\\n6 2\") == \"abcd\"\nassert solution(\"7 5\\n4 4\\n6 2\") == \"baabab\"\nassert solution(\"7 6\\n4 4\\n6 2\") == \"acbacba\"\nassert solution(\"7 7\\n4 4\\n6 2\") in [\"acbacb\", \"cbcacb\", \"cbacbc\", \"cbcabc\"]\n",
        "num_ids_2": 42,
        "num_ids_4": 85
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n7 3\\n4 4\\n6 2\") == \"cbcacab\"\n\"\"\"\nfrom collections import Counter",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n4 2\\n7 2\\n\") == 'bcac'\nassert solution(\"4\\n2 2\\n\") == 'cd'\nassert solution(\"8\\n4 2\\n\") == 'cbcacab'\n\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 37,
        "num_ids_4": 56
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1 1 1') == '1 1000 0'\nassert solution('2 1') == '2 1 2'\nassert solution('3 1 1') == '3 1 1'\nassert solution('3 2 1') == '3 2 2'\n",
        "num_ids_2": 25,
        "num_ids_4": 52
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"\n\"\"\"",
        "num_ids_2": 117,
        "num_ids_4": 117
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n3\\n1\\n4\\n1\\n5\\n9\\n2\\n6\\n5\\n3\\n5\\n') == '11 7 3'\nassert solution('2\\n2\\n1\\n1\\n2\\n1\\n') == '4 0 2'\nassert solution('4\\n1\\n1\\n1\\n1\\n1\\n1\\n') == '6 0 0'\nassert solution('4\\n1000\\n1000\\n1000\\n1000\\n') == '6 1000 0'\n",
        "num_ids_2": 55,
        "num_ids_4": 116
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\\n') == '6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3'\n\"\"\"\nimport math\n",
        "num_ids_2": 119,
        "num_ids_4": 119
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\") == '6 23 21'\n\"\"\"",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\"\n\"\"\"\nimport sys\n",
        "num_ids_2": 87,
        "num_ids_4": 87
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"\n",
        "num_ids_2": 120,
        "num_ids_4": 120
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11\\n1 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1') == '6 23 21'\nassert solution('2\\n2 1\\n2\\n1 1 1\\n2\\n1 1 1') == '1 1000 0'\nassert solution('7\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1') == '2 1 2'\nassert solution('7\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1') == '3 4 2'\n\"\"\"\n",
        "num_ids_2": 119,
        "num_ids_4": 179
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"\nprint(\"Success!\")\n\"\"\"",
        "num_ids_2": 120,
        "num_ids_4": 120
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1') == '6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3'\n",
        "num_ids_2": 120,
        "num_ids_4": 120
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\n\"\"\"\n\n\"\"\"\nThe solution is not optimized, but the solution is still fine!\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n1 2\") == \"6\"\nassert solution(\"3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"5 5\\n5 5 6 6 5\") == \"17\"\nassert solution(\"5 5\\n1 2 5 4 3\") == \"11\"\nassert solution(\"4 4\\n1 2 2 1\") == \"17\"\n",
        "num_ids_2": 37,
        "num_ids_4": 73
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 1\n1 2 3\n''') == '6'\nassert solution('''2 1\n1 2\n3 4\n''') == '6'\nassert solution('''2 1\n1 2\n3 4\n''') == '6'\n\nassert solution('''5 3\n1 2 3 4 5\n6 6 5 4 3\n''') == '17'\nassert solution('''5 2\n1 2 3 4 5\n6 6 5 4 3\n''') == '39'\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2\\n3 4') == '6'\nassert solution('3 2\\n1 2\\n1 2') == '2'\nassert solution('2 1\\n1 2\\n1 2') == '2'\n\n\"\"\"\n\n\nfrom typing import List\n",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"27\"\nassert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"39\"\nassert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"11\"\nassert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"17\"\nassert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"17\"",
        "num_ids_2": 142,
        "num_ids_4": 284
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4''') == '''6\n27\n39\n11\n17'''",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"6\\n27\\n39\\n11\\n17\"\nassert solution(\"1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"6\\n27\\n39\\n11\\n17\"\nassert solution(\"1 2\\n2 2\\n4 4\\n5 4\\n5 4\\n5 4\") == \"17\\n9\\n17\\n9\\n17\"\n\"\"\"",
        "num_ids_2": 80,
        "num_ids_4": 123
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n1 2\\n3 4\") == \"6\"\nassert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"5 3\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"39\"\nassert solution(\"5 5\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"11\"\nassert solution(\"5 5\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"17\"\n",
        "num_ids_2": 49,
        "num_ids_4": 109
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\\n4 4\\n1 2 2 1\\n4 4 5 4\") == \"27\"\nassert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\\n4 4\\n1 2 2 1\\n4 4 5 4\") == \"39\"\nassert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\\n4 4\\n1 2 2 1\\n4 4 5 4\") == \"11\"\nassert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\\n4 4\\n1 2 2 1\\n4 4 5 4\") == \"17\"\nassert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\\n4 4\\n1 2 2 1\\n4 4 5 4\") == \"17\"\n",
        "num_ids_2": 174,
        "num_ids_4": 348
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_case_0) == \"6\"\nassert solution(test_case_1) == \"27\"\nassert solution(test_case_2) == \"39\"\nassert solution(test_case_3) == \"11\"\nassert solution(test_case_4) == \"17\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5') == '0 7 13 18 24 35 36 37 40 45'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == '0 7 13 18 24 35 36 37 40 45'\n\"\"\"\n\nfrom typing import List, Dict\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(st.get_input(1)) == st.get_output(1)\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n-----Solution-----\n\n```python\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\\n') == '0 7 13 18 24 35 36 37 40 45'\n\"\"\"\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\\n') == '0 7 13 18 24 35 36 37 40 45'\n\"\"\"",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5') == '0 7 13 18 24 35 36 37 40 45'\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100000)\n\n_n, _c = [int(i) for i in input().split()]\n_a = [int(i) for i in input().split()]\n_b = [int(i) for i in input().split()]\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1') == 'aaabb'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1\\n5 2\\n5 8\\n5 10\\n3 1\\n3 2\\n20 100\") == 'aaabb'\nassert solution(\"5 1\\n5 2\\n5 8\\n5 10\\n3 1\\n3 2\\n20 100\") == 'aaaaabaaaaabaaaaaaaa'\n\"\"\"\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1\\n5 2\\n5 8\\n5 10\\n3 1\\n3 2') == 'aaabb'\nassert solution('5 1\\n5 2\\n5 8\\n5 10\\n3 1\\n3 2') == 'aaaaabaaaaabaaaaaaaa'\n\"\"\"\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1\\n5 2') == 'aaabb'\nassert solution('5 1\\n5 3') == 'aabab'\nassert solution('5 1\\n5 8') == 'baaba'\nassert solution('5 1\\n5 10') == 'abb'\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 64
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(expected_result)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('5 1') == 'aaabb'\n\"\"\"\nimport sys\nfrom collections import Counter",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1\") == \"aaabb\"\nassert solution(\"5 2\") == \"aabab\"\nassert solution(\"5 8\") == \"baaba\"\nassert solution(\"5 10\") == \"bbaaa\"\nassert solution(\"3 1\") == \"aaabb\"\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1\") == \"aaabb\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1') == 'aaabb'\nassert solution('5 2') == 'aabab'\nassert solution('5 8') == 'baaba'\nassert solution('5 10') == 'bbaaa'\nassert solution('3 1') == 'aab'\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''7\n5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\n''') == 'aaabb'\n\"\"\"\n\nfrom itertools import combinations\nfrom math import factorial, ceil\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"4\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n\"\"\"\n) == \"6\\n1\\n5\\n10\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"6\\n1\\n5\\n10\"\n\n-----\n\nYou have a lot of points which you don't know what will fall on them, but they are on the same level. Moreover, you know that all points fall down by the same value, so you can calculate the number of fallen points for each point and then sum them up.\n\nNote that the points can fall in infinite ways, so it is not possible to calculate the sum of fallen points in the ideal way. The only possible way to calculate it is to try all different combinations and then find the maximum one.\n\nEach point can fall in any number of ways. So we have two options:\n\nFirst: Try all combinations.\n\nSecond: Try all combinations and find the maximum number of fallen points.\n\nGiven the array of fallen points, try all combinations and find the maximum number of fallen points.\n\nNote that the number of fallen points for each point is not the same for all combinations, so we will find all of them.\n\nExample:\n\nn = 3\npoints = [1, 2, 3]\n\nfallen points: [1, 2, 3]\n\n1 fell in 1 ways: [1, 1, 1]\n2 fell in 2 ways: [1, 2], [2, 1]\n3 fell in 3 ways: [1, 3], [2, 2], [3, 1]\n\nThe maximum number of fallen points is 3.\n\nInput Format\n\nThe first line contains an integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100) \u2014 the number of points.\n\nThe second line contains n space-separated integers x_1, x_2,..., x_n (0\u2009\u2264\u2009xi\u2009\u2264\u2009100) \u2014 the x-coordinates of the points.\n\nThe third line contains n space-separated integers y_1, y_2,..., y_n (0\u2009\u2264\u2009yi\u2009\u2264\u2009100) \u2014 the y-coordinates of the points.\n\nConstraints\n\n1\u2009\u2264\u2009n\u2009\u2264\u2009100\n\n0\u2009\u2264\u2009xi\u2009\u2264\u2009100\n\n0\u2009\u2264\u2009yi\u2009\u2264\u2009100\n\nExample\n\nInput:\n\n3\n\n1 2 3\n\n4 6 8\n\n0 0 0\n\nOutput:\n\n3",
        "num_ids_2": 98,
        "num_ids_4": 98
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\\n\\n4 10\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\\n\\n\") == \"6\\n1\\n5\\n10\"\n\n\n\"\"\"\n\nfrom sys import stdin\n\nT = int(stdin.readline())\nfor _ in range(T):\n    N, K = map(int, stdin.readline().strip().split())\n    arr = list(map(int, stdin.readline().strip().split()))\n    arr2 = list(map(int, stdin.readline().strip().split()))\n    arr3 = [0 for _ in range(len(arr))]\n    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr2)):\n            if (arr[i] < arr2[j] and arr[i] + K >= arr2[j]):\n                count += 1\n                arr3[i] = 1\n                break\n    print(sum(arr3))",
        "num_ids_2": 186,
        "num_ids_4": 186
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\\n\") == \"6\\n1\\n5\\n10\"\n",
        "num_ids_2": 100,
        "num_ids_4": 100
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4') == '6'\nassert solution('4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4') == '1'\nassert solution('7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4') == '5'\nassert solution('7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4') == '1'\n\"\"\"\n\n\nimport sys\n",
        "num_ids_2": 58,
        "num_ids_4": 116
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"6\"\nassert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 178,
        "num_ids_4": 178
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"6\"\nassert solution(\"4\\n7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\") == \"1\"\nassert solution(\"4\\n7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\") == \"1\"\nassert solution(\"4\\n7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 96,
        "num_ids_4": 224
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 1\\n1 5 2 3 1 5 4\") == \"6\"\n\"\"\"\n\n\nimport sys\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == '6\\n1\\n5\\n10'\n",
        "num_ids_2": 98,
        "num_ids_4": 98
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\\n\") == '6\\n1\\n5\\n10'\n",
        "num_ids_2": 100,
        "num_ids_4": 100
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 3\n1\n2\n0\n1\n0\n5''') == '3'\nassert solution('''5 3\n1\n2\n0\n1\n0\n5''') == '4'\n\n'''",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\\n\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\\n\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\\n\") == \"0\\n0\\n0\\n0\\n\"\n",
        "num_ids_2": 90,
        "num_ids_4": 90
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10') == '1\\n2\\n3\\n3\\n4\\n4\\n7'\nassert solution('4 3\\n1\\n2\\n1\\n2') == '0\\n0\\n0\\n0'\n",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4') == '2 2 3'\nassert solution('6 1') == '0 3 1 2'\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3\\n1 2\\n3 5\") == \"1\\n2\\n0\"\nassert solution(\"2 4\\n1 3\\n1 2\\n3 5\") == \"2\\n1\\n1\\n0\"\nassert solution(\"1 3\\n1 1\\n3 1\") == \"0\\n0\\n0\"\nassert solution(\"2 5\\n1 1\\n1 1\\n1 1\") == \"2\\n1\\n1\\n0\"\nassert solution(\"2 6\\n1 1\\n1 1\\n1 1\\n1 1\") == \"2\\n1\\n1\\n1\\n0\"\n",
        "num_ids_2": 57,
        "num_ids_4": 114
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\n\nassert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\"\n\n\n\n-----Symbols-----\n\nThe input is read from STDIN. The output is written to STDOUT.\n\n'''\n\nimport sys\nimport os\nimport time\n\nstart_time = time.time()\nsys.stdin = open('input.txt', 'r')\nsys.stdout = open('output.txt', 'w')",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\n\n\"\"\"\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"4\"\nassert solution(\"6 3\") == \"3\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"4 3\") == \"0\"\nassert solution(\"6 5\") == \"4\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''7 3\n0\n1\n2\n2\n0\n0\n10''') == '1\\n2\\n3\\n3\\n4\\n4\\n7'\nassert solution('''4 3\n1\n2\n1\n2''') == '0\\n0\\n0\\n0'\nassert solution('''7 4\n0\n0\n0\n1\n2\n3\n4''') == '0\\n0\\n0\\n1\\n2\\n3\\n4'\nassert solution('''9 3\n0\n0\n1\n2\n0\n0\n0\n0\n0\n0''') == '3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3'\n\nimport sys\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10') == '1\\n2\\n3\\n3\\n4\\n4\\n7'\nassert solution('4 3\\n1\\n2\\n1\\n2') == '0\\n0\\n0\\n0'\nassert solution('4 3\\n1\\n2\\n1\\n2') == '0\\n0\\n0\\n0'\n\n\"\"\"\n\n\n\nimport sys\nimport math",
        "num_ids_2": 82,
        "num_ids_4": 114
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7\"\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\") == \"1 49\\n20 40 30 50 10\"\nassert solution(\"5 3 8\\n9 13 22\") == \"8 23 18 13 3\"\n\n\"\"\"\n\nimport sys\nimport math\nimport random\nimport bisect\nfrom collections import defaultdict, deque\nfrom itertools import combinations, permutations\nfrom functools import lru_cache\nfrom heapq import *\nfrom itertools import combinations\nfrom math import gcd\n",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3'\n\"\"\"",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 1\") == \"2 1 4 3\"\nassert solution(\"3 1 4\") == \"1 3 4\"\nassert solution(\"6 2 4\") == \"2 4 6 5 8 7\"\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 46
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7\"\nprint(solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\"))",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7'\nassert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7'\n\"\"\"\n",
        "num_ids_2": 132,
        "num_ids_4": 132
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\\n') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3'\n\"\"\"\n",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 49\\n5 20 50\\n6 20 50') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50'\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '1 2'\nassert solution('1 2 3') == '1 2 3'\nassert solution('2 1 3') == '2 1 3'\n\"\"\"\n\nimport math\n\nt = int(input())\n\nfor _ in range(t):\n    n, x, y = [int(s) for s in input().split()]\n    arr = [x]\n    arr.extend(x + 1 + i for i in range(n - 1))\n    arr.append(y)\n    arr.sort()\n    arr = [str(i) for i in arr]\n    print(' '.join(arr))\n",
        "num_ids_2": 18,
        "num_ids_4": 44
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\\n\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\n\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3 2') == '1 2 3'\nassert solution('1 3 1 2') == '1 1 2 3'\nassert solution('3 3 1 2') == '1 2 3'\nassert solution('3 3 1 2 0') == '1 0 2 3'\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 1\") == \"1 2 3\"\nassert solution(\"2 3 2 1\") == \"1 2 2 3\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"4 2 1 3\") == \"1 2 3 4\"\nassert solution(\"6 2 3 7 1\") == \"1 2 3 4 6 7\"\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 58
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2 3 1') == '1 2 3'\nassert solution('1 2') == '1 2'\nassert solution('1 1 2') == '2 1 1'\n",
        "num_ids_2": 18,
        "num_ids_4": 44
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\nprint(solution('3 3 1 2'))\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\n'''\n\nn = int(input())\na = [int(i) for i in input().split()]\nb = sorted(a, reverse=True)\nprint(' '.join(str(i) for i in b))\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 3') == 'NO'\nassert solution('5\\n3 5 5 5') == 'NO'\nassert solution('2\\n4\\n2 2 8 8') == 'NO'\nassert solution('1\\n3\\n3 3 3') == 'YES'\nassert solution('2\\n5\\n5 5 5 5') == 'YES'\n\"\"\"\n\nimport sys\n\nnumber_of_test_cases = int(sys.stdin.readline().strip())\n\nfor i in range(number_of_test_cases):\n    number_of_elements = int(sys.stdin.readline().strip())\n    elements = list(map(int, sys.stdin.readline().split()))\n    odd_elements_sum = 0\n    for element in elements:\n        if element % 2 == 1:\n            odd_elements_sum += element\n    if odd_elements_sum % 2 == 1:\n        print('YES')\n    else:\n        print('NO')",
        "num_ids_2": 30,
        "num_ids_4": 67
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n2 3') == 'YES'\nassert solution('4\\n2 2 8 8') == 'NO'\n\"\"\"\n\nimport sys",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2\\n3\\n5\\n4\\n2\\n2\\n8\\n8\") == \"YES\"\n\"\"\"\nfrom typing import List, Tuple\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n3 2 1''') == 'YES'\nassert solution('''3\n3 2 1\n4\n1 1 1 1''') == 'NO'\nassert solution('''3\n3 2 1\n5\n2 2 8 8''') == 'NO'\nassert solution('''4\n2\n2 2 8 8''') == 'NO'\nassert solution('''2\n3 2 1\n5\n3 3 3''') == 'YES'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2 3\\n4\\n2 2 8 8\") == \"YES\"\nassert solution(\"3\\n3 3 3\\n4\\n5 5 5 5\") == \"NO\"\n",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\") == \"NO\"\n",
        "num_ids_2": 80,
        "num_ids_4": 160
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5') == 'NO'\n\"\"\"\n\n\nfrom collections import Counter",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2\\n2 3\\n4\\n2 2 8 8\") == \"YES\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n4\\n2 2 8 8\") == \"YES\"\nassert solution(\"5\\n4\\n2 2 8 8\") == \"NO\"\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n2 3\") == \"YES\"\nassert solution(\"4\\n2 2 8 8\") == \"NO\"\nassert solution(\"3\\n3 3 3\") == \"YES\"\nassert solution(\"4\\n5 5 5 5\") == \"NO\"\nassert solution(\"1\\n1 1 1 1\") == \"NO\"\n\nprint(solution(\"2\\n2 3\"))\nprint(solution(\"4\\n2 2 8 8\"))\nprint(solution(\"3\\n3 3 3\"))\nprint(solution(\"4\\n5 5 5 5\"))\nprint(solution(\"1\\n1 1 1 1\"))\n",
        "num_ids_2": 30,
        "num_ids_4": 61
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n2\\n4\\n6\\n7\\n13\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"10\\n2\\n4\\n6\\n7\\n13\") == \"3 1 4 2\"\nassert solution(\"10\\n2\\n4\\n6\\n7\\n13\") == \"5 1 3 6 2 4 7\"\nassert solution(\"10\\n2\\n4\\n6\\n7\\n13\") == \"5 1 3 6 2 4 7\"\nassert solution(\"10\\n2\\n4\\n6\\n7\\n13\") == \"13 9 7 11 8 4 1 3 5 2 6 10 12\"",
        "num_ids_2": 62,
        "num_ids_4": 124
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n2\\n4\\n6\\n7\\n13\") == \"9 6 10 8 4 7 3 1 5 2\"\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n4\\n5\\n7\\n9\\n9\\n3\\n2\\n4') == '9 6 10 8 4 7 3 1 5 2'\n\"\"\"\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n6\n10\n2\n4\n6\n7\n13\n''') == '9 6 10 8 4 7 3 1 5 2'\n\"\"\"\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10\\n2\\n4\\n6\\n7\\n13\\n') == '9 6 10 8 4 7 3 1 5 2'\n\"\"\"\n\nimport sys",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n10') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('2\\n4') == '3 1 4 2'\nassert solution('4\\n6') == '5 3 6 2 4 1'\nassert solution('7\\n13') == '13 9 7 11 8 4 1 3 5 2 6 10 12'\n\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 81
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('2') == '-1'\nassert solution('4') == '3 1 4 2'\nassert solution('6') == '5 3 6 2 4 1'\nassert solution('7') == '5 1 3 6 2 4 7'\n",
        "num_ids_2": 30,
        "num_ids_4": 58
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(example1) == solution(example2) == solution(example3) == solution(example4) == solution(example5)\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n2\\n4\\n6\\n7\\n13\\n\") == \"9 6 10 8 4 7 3 1 5 2\"\n\n-----Test Data-----\n\n-----Test Input-----\n\n-----Test Output-----\n\n\"\"\"\n\n\"\"\"\n\n8\n2\n4\n6\n7\n9\n10\n12\n13\n\n13\n9 7 11 8 4 1 3 5 2 6 10 12\n5 1 3 6 2 4 7 \n5 1 3 6 2 4 7 \n5 1 3 6 2 4 7 \n5 1 3 6 2 4 7 \n-1\n\n\"\"\"\n\n\nimport sys\nimport numpy as np",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2\\n1\\n3\\n\") == \"1 3 2 4\"\nassert solution(\"4\\n3\\n2\\n4\\n\") == \"2 4 3 1\"\nassert solution(\"7\\n3\\n1\\n4\\n\") == \"4 1 3 7 2\"\n\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 73
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 6\\n7\") == \"2\"\nassert solution(\"4\\n9 2 1 18 3 0\") == \"1\"\nassert solution(\"5\\n7\\n7\\n4 9 2 1 18 3 0\") == \"0\"\nassert solution(\"1\\n7\") == \"1\"\nassert solution(\"2\\n3 2 6\") == \"0\"\n",
        "num_ids_2": 35,
        "num_ids_4": 73
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0') == '2\\n1\\n-1\\n0'\nassert solution('4\\n4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0') == '-1\\n0'\n\nimport time",
        "num_ids_2": 60,
        "num_ids_4": 109
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n4\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\"\"\") == \"0\"\n\"\"\"\n\n\"\"\"\nimport itertools",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0''') == '2'\nassert solution('''4\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0''') == '1'\nassert solution('''4\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0''') == '-1'\nassert solution('''4\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0''') == '0'\n\"\"\"\n\nimport sys\nimport numpy as np",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(4) == 2\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 2 7 6\\n3\\n3 2 6') == '2'\nassert solution('4\\n4\\n7 6 2 3') == '-1'\nassert solution('4\\n3 2 7 6\\n3\\n3 2 6') == '2'",
        "num_ids_2": 44,
        "num_ids_4": 68
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\\n\") == \"2\"\nassert solution(\"4\\n4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\\n\") == \"1\"\n",
        "num_ids_2": 91,
        "num_ids_4": 91
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0') == 2\nassert solution('2 3 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0') == -1\n",
        "num_ids_2": 75,
        "num_ids_4": 75
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 2 7 6\") == \"2\"\nassert solution(\"3\\n3 2 6\") == \"-1\"\nassert solution(\"1\\n7\") == \"0\"\n\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 44
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 7 6\") == \"2\"\nassert solution(\"3 2 6\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"7\") == \"0\"\n",
        "num_ids_2": 25,
        "num_ids_4": 45
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n1 3\\n2 4\") == \"0 -1 1 -1\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 1 1 1\") == \"2 -1 1 -1\"\nassert solution(\"8\\n0 0 1 0\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == \"2 -1 1 -1 2 2 1 0 2\"\n\n\"\"\"",
        "num_ids_2": 79,
        "num_ids_4": 79
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 1 1 0\\n1 2\\n1 3\\n1 4\") == \"0 -1 1 -1\"\nassert solution(\"5\\n0 1 1 1 0\\n1 2\\n1 3\\n1 4\\n4 5\") == \"2 2 2 2 2 1 1 0 2\"",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"4\\n0 0 1 0\") == \"0 -1 1 -1\"\n",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0\\n1\\n1\\n1\") == \"0 -1 1 -1\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2\\n1 3\\n1 4') == '0 -1 1 -1'\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n\") == \"2 2 2 2 2 1 1 0 2\"\n\"\"\"\n",
        "num_ids_2": 63,
        "num_ids_4": 63
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0\\n1 2\\n1 3\\n1 4\") == \"2 -1 1 -1\"\n\nassert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == \"2 2 2 2 2 1 1 0 2\"\n\n\"\"\"\n\nimport sys\nimport collections",
        "num_ids_2": 91,
        "num_ids_4": 91
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9') == '2 2 2 2 2 1 1 0 2'\nassert solution('4\\n0 0 1 0\\n1 2\\n1 3\\n1 4') == '0 -1 1 -1'\n\"\"\"\nfrom collections import deque, namedtuple\n\n\nclass UnionFind:\n    \"\"\"\n    Union-Find Data Structure\n\n    Attributes:\n        parent {list} -- parent of a vertex\n\n    Note:\n        The parent of a vertex with itself is the root.\n    \"\"\"\n\n    def __init__(self, n: int):\n        self.parent = [i for i in range(n + 1)]\n\n    def find(self, x: int) -> int:\n        \"\"\"\n        Find the root of a vertex\n\n        Args:\n            x {int} -- a vertex\n\n        Returns:\n            int -- the root of a vertex\n        \"\"\"\n\n        if self.parent[x] == x:\n            return x\n        self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def union(self, x: int, y: int) -> None:\n        \"\"\"\n        Join two vertices into one\n\n        Args:\n            x {int} -- a vertex\n            y {int} -- a vertex\n\n        Returns:\n            None\n        \"\"\"\n\n        x_root = self.find(x)\n        y_root = self.find(y)\n\n        if x_root == y_root:\n            return\n\n        self.parent[x_root] = y_root\n\n    def connected(self, x: int, y: int) -> bool:\n        \"\"\"\n        Check whether the two vertices are in the same component or not\n\n        Args:\n            x {int} -- a vertex\n            y {int} -- a vertex\n\n        Returns:\n            bool -- True if they are in the same component or False\n        \"\"\"\n\n        return self.find(x) == self.find(y)\n\n    def count_components(self) -> int:\n        \"\"\"\n        Find the number of components in the graph\n\n        Returns:\n            int -- the number of components in the graph\n        \"\"\"\n\n        return len(set(self.parent[1:]))\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \"\"\"\n        Find the maximum possible difference between the number of white and black vertices in some subtree that contains a vertex\n\n        Args:\n            stdin {str} -- the input\n\n        Returns:\n            str -- the output\n        \"\"\"\n\n        n, colors = stdin.split(\"\\n\")\n        n = int(n)\n        colors = list(map(int, colors.split()))\n\n        edges = []\n\n        for i in range(1, n + 1):\n            for j in range(i + 1, n + 1):\n                if colors[i - 1] == 1 and colors[j - 1] == 1:\n                    edges.append((i, j))\n                elif colors[i - 1] == 0 and colors[j - 1] == 0:\n                    edges.append((i, j))\n\n        # print(edges)\n\n        uf = UnionFind(n)\n\n        edges_with_index = []\n        for edge in edges:\n            edges_with_index.append((edge, len(edges_with_index)))\n            uf.union(edge[0], edge[1])\n\n        edges_with_index.sort(key=lambda x: x[1], reverse=True)\n\n        # print(edges_with_index)\n\n        res = []\n        for edge in edges_with_index:\n            _, index = edge\n\n            if not uf.connected(1, n):\n                res.append(uf.count_components() - 1)\n\n            else:\n                cur_root = uf.find(1)\n                while True:\n                    if cur_root == n:\n                        break\n                    uf.parent[cur_root] = cur_root - 1\n                    cur_root = uf.find(cur_root)\n\n            uf.union(1, n)\n\n        return \"\\n\".join(map(str, res))\n\n\nSolution().solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\")\n",
        "num_ids_2": 94,
        "num_ids_4": 94
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2\\n1 3\") == \"0 -1 1 -1\"\nassert solution(\"8\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"3\\n1 2\\n1 3\") == \"0 -1 1 -1\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 73,
        "num_ids_4": 96
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n1\") == \"0\"\nassert solution(\"2\\n2\") == \"-1\"\nassert solution(\"3\\n3\") == \"1\"\nassert solution(\"4\\n6\") == \"2\"\nassert solution(\"12\\n12\") == \"0\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n3\\n12\\n12345\\n15116544\\n387420489\\n\") == \"0\\n-1\\n2\\n-1\\n-1\\n12\\n36\"\n\"\"\"\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"6\") == \"3\"\nassert solution(\"8\") == \"4\"\nassert solution(\"12\") == \"6\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"15116544\") == \"36\"\n\"\"\"\n\nimport sys\nimport re\nfrom typing import NamedTuple\n\nsys.setrecursionlimit(1 << 30)\n\n\nclass Data(NamedTuple):\n    limit: int\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n12\\n12345\\n15116544\\n387420489\\n\") == \"0\\n-1\\n2\\n-1\\n-1\\n12\\n36\\n\"\n\"\"\"\n",
        "num_ids_2": 63,
        "num_ids_4": 63
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"15116544\") == \"36\"\nassert solution(\"387420489\") == \"-1\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 36
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"15116544\") == \"216\"\nassert solution(\"12345\") == \"5\"\nassert solution(\"387420489\") == \"20\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1000000)\n",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('15116544') == '36'\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2') == '0'\nassert solution('3\\n12') == '2'\nassert solution('15\\n1234') == '-1'\nassert solution('15\\n12345') == '-1'\nassert solution('15\\n12345\\n12') == '12'\n",
        "num_ids_2": 26,
        "num_ids_4": 56
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\") == \"12\"\nassert solution(\"30\") == \"10\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('BGGGG') == 1\nassert solution('RBRGR') == 3\nassert solution('BBBRR') == 0\nassert solution('RGGGB') == 1\nassert solution('GBBGB') == 2\n\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 39
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n5 2\nRBRGR\n5 3\nBBBRR\n5 5\nBBBRR''') == '3'\nassert solution('''3\n5 2\nGGBGR\n5 3\nBBBBR\n5 5\nBBBBR''') == '0'\nassert solution('''3\n5 2\nRRRRR\n5 3\nBBBBB\n5 5\nBBBBB''') == '3'\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BGGGG\") == \"1\"\nassert solution(\"BBRGR\") == \"0\"\nassert solution(\"BBBRR\") == \"3\"",
        "num_ids_2": 23,
        "num_ids_4": 35
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RBRGR\") == \"RBRGR\"\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RGBRGBRGB') == 3\nassert solution('GB') == 0\nassert solution('GBRGB') == 2\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def solution(self, stdin):\n        q = int(stdin)\n\n        for i in range(q):\n            n, k = list(map(int, stdin.readline().split()))\n            s = stdin.readline()\n            ans = 0\n\n            for i in range(k - 1, n):\n                tmp = s[i - (k - 1):i + 1]\n                if tmp not in s[i + 1:]:\n                    ans += 1\n\n            print(ans)\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution().solution\n\n    def test_0(self):\n        self.assertEqual(1, self.solution('RGBRGBRGB'))\n\n    def test_1(self):\n        self.assertEqual(0, self.solution('GB'))\n\n    def test_2(self):\n        self.",
        "num_ids_2": 18,
        "num_ids_4": 27
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"RRRGGG\") == 0\nassert solution(\"BBBBRRR\") == 3\nassert solution(\"BBRRRRG\") == 1\nassert solution(\"BBRRRGB\") == 2\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"RBRGR\") == 3\nassert solution(\"BBBRR\") == 0\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 29
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"RBRGR\") == 0\nassert solution(\"BBBRR\") == 3\n\"\"\"\n\nimport unittest",
        "num_ids_2": 19,
        "num_ids_4": 29
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"BGGGG\", 3) == 1\nassert solution(\"BGGGG\", 4) == 0\nassert solution(\"BGGGG\", 5) == 3\n\nassert solution(\"RBRGR\") == 3\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"RBRGR\") == 0\nassert solution(\"BBBRR\") == 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----",
        "num_ids_2": 19,
        "num_ids_4": 29
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"6\\n3\\n5 6 1 2 3 4\\n2\\n1 2\\n2\\n\"\n) == \"7\"\n\nassert solution(\n    \"8\\n3\\n2 4 6 8 10 12 14 16\\n5\\n4 9 11 16 19 22 25\\n\"\n) == \"3\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2\\n3 1 2 3\\n3\\n1 1 1 1\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 1 2 3 1\") == \"3\"\nassert solution(\"4\\n3 1 2 3 4\") == \"3\"\nassert solution(\"4\\n3 1 2 4 1\") == \"3\"\nassert solution(\"5\\n3 1 2 3 1\") == \"3\"\nassert solution(\"7\\n1 1 1 1 1 2 2\") == \"3\"\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == '3\\n3'\nassert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == '3\\n3'\nassert solution(\"2\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == '1\\n1'\nassert solution(\"2\\n3 2 1 3 1\\n7\\n1 1 1 1 1 2 2\") == '3\\n3'\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\",
        "num_ids_2": 67,
        "num_ids_4": 131
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"\nassert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"\nassert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"\nassert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"\nassert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"\n",
        "num_ids_2": 70,
        "num_ids_4": 140
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n5\\n3 1 2 3 1\") == 3\nassert solution(\"7\\n1 1 1 1 1 2 2\") == 3\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 2 4\") == \"8\"\nassert solution(\"3 5 4 2\") == \"8\"\nassert solution(\"3 5 2 3\") == \"7\"\nassert solution(\"3 5 3 2\") == \"7\"\nassert solution(\"3 5 3 2 2\") == \"9\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n5\\n3 1 2 3 1\") == \"3\"\nassert solution(\"2\\n7\\n1 1 1 1 1 2 2\") == \"3\"\nassert solution(\"1\\n1\\n1\") == \"1\"\nassert solution(\"3\\n5\\n3 1 2 3 1\") == \"3\"\nassert solution(\"3\\n7\\n1 1 1 1 1 2 2\") == \"3\"\n\nprint(\"Successfully tested.\")\n\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 78
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2') == 3\nassert solution('2\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2') == 3\nassert solution('1\\n5\\n3 1 2 3 1') == 3\nassert solution('1\\n7\\n1 1 1 1 1 2 2') == 3\n\n\"\"\"",
        "num_ids_2": 54,
        "num_ids_4": 92
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3 1 2 3 1\") == \"3\"\nassert solution(\"7\\n1 1 1 1 1 2 2\") == \"3\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == \"1 5 2 4 3 \\n1 2 3 4 \\n1 \\n1 4 3 2\"\n\"\"\"\n\nfrom itertools import permutations\n\nn = int(input())\nperm = list(map(int, input().split()))\n\nfor _ in range(n-1):\n    t = input()\n    a, b = map(int, t.split())\n    perm[a-1], perm[b-1] = perm[b-1], perm[a-1]\n    print(*perm)\n",
        "num_ids_2": 63,
        "num_ids_4": 63
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3 \"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\n\"\"\"\n\n\nimport sys\n\ninput = sys.stdin.readline\n\ntests = int(input())\nfor t in range(tests):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    last = -1\n    count = 0\n    for i in range(n):\n        if arr[i] == last:\n            count += 1\n            if count == 2:\n                arr[i], arr[i-1] = arr[i-1], arr[i]\n                count = 0\n                last = arr[i-1]\n        else:\n            count = 0\n            last = arr[i]\n    print(\" \".join(map(str, arr)))\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4\"\n\nassert solution(\"4\\n1\\n1\") == \"1\"\nassert solution(\"4\\n1\\n2\") == \"1 2\"\nassert solution(\"4\\n1\\n2\\n2\") == \"1 2\"",
        "num_ids_2": 43,
        "num_ids_4": 76
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4\"\nassert solution(\"4\\n1\") == \"1\"\nassert solution(\"4\\n4 3 2 1\") == \"1 2 3 4\"\n\n\"\"\"\n",
        "num_ids_2": 43,
        "num_ids_4": 75
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == \"1 5 2 4 3\"\nassert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == \"1 2 3 4\"\n\n\"\"\"\n",
        "num_ids_2": 95,
        "num_ids_4": 95
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\") == \"1 5 2 4 3\"\nassert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 3 4\") == \"1 2 3 4\"\nassert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\") == \"1 5 2 4 3\"\n\"\"\"\nfrom typing import List",
        "num_ids_2": 65,
        "num_ids_4": 98
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"4\") == \"1 2 3 4\"\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(1500)",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"1\\n1\\n4\") == \"1 4\"\nassert solution(\"1\\n1\\n4\\n4 3 2 1\") == \"1 2 3 4\"\nassert solution(\"1\\n1\\n4\\n3 2 1\") == \"1 2 3 4\"\nassert solution(\"1\\n1\\n4\\n3 2 1\\n2\\n4\\n1 3\\n5\") == \"1 5 2 4 3\"\n",
        "num_ids_2": 40,
        "num_ids_4": 89
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\") == \"1 5 2 4 3\"\nassert solution(\"4\\n4\\n1 2 4 3\") == \"1 2 3 4\"\nassert solution(\"4\\n4\\n1\") == \"1\"\n\n\n\"\"\"",
        "num_ids_2": 55,
        "num_ids_4": 71
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n4\n1 2 3 4\n3\n1 3 2\n5\n1 2 3 5 4\n1\n1\n5\n3 2 1 5 4''') == 'YES\\nYES\\nNO\\nYES\\nYES'\nprint('Test OK')",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"NO\"\n\n\"\"\"\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1') == 'YES'\nassert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1') == 'NO'\n\"\"\"\n\nimport sys",
        "num_ids_2": 80,
        "num_ids_4": 80
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\") == \"YES\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"NO\"\n\"\"\"",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\\n\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\n\"\"\"\n\nfrom collections import deque\nfrom collections import Counter\nimport copy",
        "num_ids_2": 67,
        "num_ids_4": 67
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\") == \"NO\"\nassert solution(\"5\\n1 2 3 4 5\\n1\\n1\") == \"YES\"\nassert solution(\"5\\n1 2 3 4 5\\n1\\n1\") == \"NO\"\nassert solution(\"5\\n3 2 1 5 4\\n1\\n1\") == \"YES\"\n",
        "num_ids_2": 48,
        "num_ids_4": 94
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\nprint(solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\"))",
        "num_ids_2": 65,
        "num_ids_4": 65
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\nassert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"NO\\nNO\\nNO\\nNO\\nNO\"\n\n-----Problem-----\n\nInstead of a string of words, you are given an integer array. On each line of the array, you are given an integer $n$ ($1 \\le n \\le 100$) \u2014 the number of operations.\n\nThe first line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 100$) \u2014 the initial values of the array.\n\nThe next $n$ lines of the input contain one operation. The operation is described by one integer $x$ ($0 \\le x \\le 100$) \u2014 the index of an element to add to the array. If the operation is $x = 0$, print \"Add 0\" on the first line. Otherwise, print the value of the element that will be added.\n\nAfter each operation, print the array on a new line.\n\n\n-----Solution-----\n\nThe solution is an variation of the previous problem.\n\n1. Traverse the array from left to right.\n2. For each element, if it is equal to the last element, move to the beginning, otherwise, move to the next element.\n3. Print the result.\n\n\n-----Test cases-----\nInput:\n5\n4\n1 2 3 4\n3\n0\n5\n1 2 3 5 4\n1\n1\n5\n3 2 1 5 4\n\nOutput:\nAdd 0\n1 2 3 4\n1 2 3 4\nAdd 0\n1 2 3 4\n1 2 3 4\nAdd 0\n1 2 3 4\n1 2 3 4\nAdd 0\n1 2 3 4\n1 2 3 4\n\n-----Explanation-----\nFor the first query, the value of the array at the beginning is 1, so it is not possible to move to the left.\n\nFor the second query, the value of the array at the beginning is 2, so it is possible to move to the left and the value of the array at the beginning is 3.\n\nFor the third query, the value of the array at the beginning is 5, so it is not possible to move to the left.\n\nFor the fourth query, the value of the array at the beginning is 1, so it is possible to move to the left and the value of the array at the beginning is 2.\n\nFor the fifth query, the value of the array at the beginning is 1, so it is not possible to move to the left.\n\"\"\"\n",
        "num_ids_2": 130,
        "num_ids_4": 130
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 5 4\") == \"NO\"\n\"\"\"\n\nimport sys\n\ntest_stdin = \"\"\"\n5\n4\n1 2 3 4\n3\n1 3 2\n5\n1 2 3 5 4\n1\n1\n5\n3 2 1 5 4\n\"\"\"\n\nassert solution(test_stdin) == \"YES\\nNO\\nNO\\nYES\\nYES\"\n",
        "num_ids_2": 49,
        "num_ids_4": 74
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2') == '5'\nassert solution('5 2') == '18'\nassert solution('6 2') == '10'\nassert solution('100000 50010') == '75015'\n\"\"\"\n\nfrom math import floor\nfrom sys import stdin, stdout",
        "num_ids_2": 22,
        "num_ids_4": 47
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"\nprint(\"Tests passed\")\n\"\"\"\n\nt = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a, b = n//k, n%k\n    if b == 0:\n        print(a*k)\n    else:\n        print(a*k + b)\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5 18 10 6 75015\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 5\\n19 4\\n12 7\\n6 2\") == \"18\\n10\\n6\\n75015\"\n\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n5 2') == '5'\nassert solution('19 4') == '18'\nassert solution('12 7') == '10'\nassert solution('6 2') == '6'\nassert solution('100000 50010') == '75015'\n",
        "num_ids_2": 25,
        "num_ids_4": 47
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"18\"\nassert solution(\"5 2\") == \"18\"\nassert solution(\"19 4\") == \"10\"\nassert solution(\"12 7\") == \"10\"\nassert solution(\"6 2\") == \"6\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\") == \"5\\n18\\n10\\n6\\n75015\"\n\"\"\"\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"5\"\nassert solution(\"19 4\") == \"18\"\nassert solution(\"12 7\") == \"10\"\nassert solution(\"6 2\") == \"6\"\nassert solution(\"100000 50010\") == \"75015\"\n\n\"\"\"\n\nfrom typing import Callable\nfrom math import floor\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"19 4\") == \"18\"\nassert solution(\"12 7\") == \"10\"\nassert solution(\"6 2\") == \"6\"\nassert solution(\"100000 50010\") == \"75015\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n5\\n3\\n7\\n6\\n2\") == '6'\nassert solution(\"5\\n2\\n3\\n5\\n6\\n7\\n2\") == '5'\nassert solution(\"5\\n6\\n7\\n2\\n3\\n5\\n2\") == '5'\n\nassert solution(\"5\\n6\\n7\\n2\\n3\\n5\\n2\") == '5'\nassert solution(\"5\\n6\\n7\\n2\\n3\\n5\\n2\") == '5'\n",
        "num_ids_2": 53,
        "num_ids_4": 109
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n10 3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\") == 'YES\\n4 2 4'\nassert solution(\"8\\n3 5\\n1000000000 9\") == 'YES\\n55 5 5 35'\nassert solution(\"8\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 11111120\") == 'NO'\nassert solution(\"8\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 11111120\") == 'NO'\n\"\"\"\n\ntest_input = \"\"\"\n8\n10 3\n100 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9\n\n\"\"\"",
        "num_ids_2": 75,
        "num_ids_4": 225
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\") == \"YES\\n4 2 4\"\nassert solution(\"100000002 3\\n10 2\\n6 9\\n100 3\") == \"NO\\nNO\"\nassert solution(\"100000002 3\\n10 2\\n6 9\\n100 3\") == \"YES\\n55 5 5 35\"\n\"\"\"\n\nimport math\nimport unittest\n",
        "num_ids_2": 74,
        "num_ids_4": 105
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_str) == test_str_result\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 3') == 'YES'\nassert solution('100 4') == 'YES'\nassert solution('8 7') == 'YES'\nassert solution('97 2') == 'YES'\nassert solution('8 8') == 'YES'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'NO'\nassert solution('5 3') == 'YES\\n4 2 4'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"NO\"\nassert solution(\"10 3\") == \"YES\\n4 2 4\"\nassert solution(\"100 4\") == \"YES\\n44 44\"\nassert solution(\"8 7\") == \"YES\\n44\"\nassert solution(\"97 2\") == \"YES\\n55\"\n",
        "num_ids_2": 27,
        "num_ids_4": 56
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"YES\"\nassert solution(\"1 1 1 1 1 1 1 1\") == \"NO\"\nassert solution(\"100 4\") == \"YES\"\nassert solution(\"8 7\") == \"YES\"\nassert solution(\"97 2\") == \"YES\"\n",
        "num_ids_2": 28,
        "num_ids_4": 50
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 3') == 'YES\\n4 2 4'\nassert solution('100 4') == 'YES\\n55 5 5 35'\nassert solution('8 7') == 'YES\\n55 5 5 35'\nassert solution('97 2') == 'YES\\n1 1 1 1 1 1 1 1 1'\nassert solution('8 8') == 'NO'\n",
        "num_ids_2": 33,
        "num_ids_4": 72
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_1) == \"YES\\n2 2 4\\nYES\\n55 5 5 35\\nNO\\nNO\\nYES\\n1 1 1 1 1 1 1 1\\nNO\\nYES\\n3 1 1\\nYES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120\"\nprint(solution(test_2))",
        "num_ids_2": 91,
        "num_ids_4": 91
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\") == \"\"\"YES\n4 2 4\nYES\n55 5 5 35\nNO\nNO\nYES\n1 1 1 1 1 1 1 1\nNO\nYES\n3 1 1\nYES\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120\"\"\"\n\n\"\"\"\nimport sys",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\n\n\n-----Tests-----\n\nInput:\n1\n1 3 4\n\nOutput:\n4\n\nInput:\n2\n1 3 4\n1 10 100\n\nOutput:\n4\n55\n\nInput:\n3\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n100 100 100\n\nOutput:\n4\n55\n15000000000000000\n51\n\nInput:\n3\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n10000000000000000 10000000000000000 10000000000000000\n\nOutput:\n4\n55\n15000000000000000\n5\n\nInput:\n4\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n10000000000000000 10000000000000000 10000000000000000\n23 34 45\n\nOutput:\n4\n55\n15000000000000000\n55\n\"\"\"",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\n\nprint(solution(stdin))\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nassert solution(\"2\\n1 2 100\\n2 3 1\") == \"2\\n2\\n1\"\nassert solution(\"2\\n1 2 100\\n2 3 100\") == \"2\\n100\\n0\"\nassert solution(\"1\\n1 2 100\\n2 3 100\") == \"1\\n0\\n0\"\n\nprint(solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\"))\nprint(solution(\"2\\n1 2 100\\n2 3 100\"))\nprint(solution(\"2\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"0\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 1\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2 3 100\"))\nprint(solution(\"1\\n1 2 100\\n2",
        "num_ids_2": 72,
        "num_ids_4": 124
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nprint(solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\"))\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 3\") == \"4\"\n\"\"\"\n\nfrom tools import timing",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n') == '4\\n55\\n15000000000000000\\n51'\n\n---\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\n\n\"\"\"\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 3\") == \"0\"\nassert solution(\"6 7 8\") == \"9\"\nassert solution(\"100 11 100\") == \"99\"\nassert solution(\"6 6 6\") == \"0\"\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 1\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\n\n\"\"\"\n\n\nfrom math import ceil\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3\\nabcbac\") == \"6\"\nassert solution(\"3 6\\naaa\") == \"3\"\nassert solution(\"7 1000\\nabczgyo\") == \"7\"\nassert solution(\"5 4\\nababa\") == \"4\"\nassert solution(\"20 10\\naaebdbabdbbddaadaadc\") == \"15\"\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcbac\") == 3\nassert solution(\"aaa\") == 3\nassert solution(\"abczgyo\") == 5\nassert solution(\"ecbedececacbcbccbdec\") == 10\nassert solution(\"ecbedececacbcbccbdec\") == 10\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 47
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 6\\naa\\nabc') == '3'\nassert solution('3 6\\nabcbac') == '3'\nassert solution('3 6\\naaa') == '3'\nassert solution('3 6\\nabczgyo') == '3'\nassert solution('3 6\\naba') == '5'\n",
        "num_ids_2": 33,
        "num_ids_4": 64
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 abcbac\") == \"6\"\nassert solution(\"3 6 aaa\") == \"3\"\nassert solution(\"7 1000 abczgyo\") == \"7\"\nassert solution(\"5 4 ababa\") == \"4\"\nassert solution(\"20 10 aaebdbabdbbddaadaadc\") == \"15\"\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3\\nabcbac\") == \"6\"\nassert solution(\"3 6\\naaa\") == \"3\"\nassert solution(\"7 1000\\nabczgyo\") == \"7\"\nassert solution(\"5 4\\nababa\") == \"4\"\nassert solution(\"20 10\\naaebdbabdbbddaadaadc\") == \"15\"\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec\") == [6, 3, 5, 4, 15, 10]\n\"\"\"\n",
        "num_ids_2": 84,
        "num_ids_4": 84
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6\\naa\\n\") == \"3\"\nassert solution(\"3 6\\nabcbac\\n\") == \"3\"\nassert solution(\"3 6\\naba\\n\") == \"3\"\nassert solution(\"3 6\\nabac\\n\") == \"2\"\nassert solution(\"3 6\\nabc\\n\") == \"1\"\n",
        "num_ids_2": 34,
        "num_ids_4": 67
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\\naa\") == \"3\"\nassert solution(\"7 1000\\neebdec\") == \"7\"\nassert solution(\"5 4\\ababa\") == \"4\"\nassert solution(\"20 10\\ecbedececacbcbccbdec\") == \"15\"\nassert solution(\"20 5\\aaebdbabdbbddaadaadc\") == \"10\"\n",
        "num_ids_2": 29,
        "num_ids_4": 66
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abcbac') == 6\nassert solution('aaa') == 3\nassert solution('abczgyo') == 5\nassert solution('ababa') == 4\nassert solution('ecbedececacbcbccbdec') == 10\n\"\"\"\nfrom collections import Counter",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\neccbedececacbcbccbdec\") == \"6\\n3\\n5\\n4\\n15\\n10\"\n\nassert solution(\"6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\neccbedececacbcbccbdec\") == \"6\\n3\\n5\\n4\\n15\\n10\"\n\n\"\"\"",
        "num_ids_2": 180,
        "num_ids_4": 180
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == 'NO\\nNO'\nassert solution(\"3\\n5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == 'NO\\n1 3 5'\n\"\"\"\nimport sys\nimport bisect\n",
        "num_ids_2": 96,
        "num_ids_4": 96
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 18 3 14 1\") == \"YES\\n1 3 5\"\nassert solution(\"5 4\") == \"NO\\nNO\"\n\"\"\"\nfrom typing import List\nfrom itertools import accumulate, chain\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5') == 'YES\\n1 3 5'\nassert solution('5 3\\n7 18 3 14 1\\n5 4\\n1 2 8 4 10 2') == 'YES\\n1 3 5'\nassert solution('5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5') == 'YES\\n1 3 5'\n\"\"\"\n\n\nfrom collections import deque",
        "num_ids_2": 69,
        "num_ids_4": 103
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2') == 'YES\\n1 3 5\\nNO\\nNO'\nassert solution('3\\n5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2') == 'YES\\n1 3 5\\nNO\\nNO'\nassert solution('3\\n5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2') == 'YES\\n1 3 5\\nNO\\nNO'\n\"\"\"\n",
        "num_ids_2": 110,
        "num_ids_4": 165
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(example) == example_answer\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'NO'\nassert solution('5 3\\n7 18 3 14 1\\n') == 'YES\\n1 3 5'\nassert solution('5 4\\n1 2 3 4 5\\n') == 'NO'\n",
        "num_ids_2": 35,
        "num_ids_4": 55
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n5 2\\n1 2 3 4 5\") == \"YES\\n1 3 5\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 3\nn, k = [int(i) for i in sys.argv[1].split(' ')]\n\narr = [int(i) for i in sys.argv[2].split(' ')]\n\narr.sort()",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5 3\n7 18 3 14 1\n5 4\n1 2 3 4 5\n6 2\n1 2 8 4 10 2\n\"\"\") == \"\"\"YES\n1 3 5\nNO\nNO\"\"\"\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n4 5\") == \"NO\"\nassert solution(\"3 2\\n1 2\") == \"YES\\n2\"\nassert solution(\"3 3\\n1 2\") == \"NO\"\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 33,
        "num_ids_4": 48
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 18 3 14 1') == 'YES\\n1 3 5'\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1100\") == \"1010\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"111001010\") == \"10110010\"\nassert solution(\"1110010101111010111101111\") == \"101100110\"\nassert solution(\"1110010101111010111101111\") == \"101100110\"\nassert solution(\"111111111111111111111111111111101\") == \"10111111111111111111111111111111\"\n\"\"\"\n\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        res = 0\n        for _ in range(32):\n            res = (res << 1) | (n & 1)\n            n >>= 1\n        return res\n",
        "num_ids_2": 36,
        "num_ids_4": 83
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('111111111111111111111111111111101') == 3221225471\n\nprint(solution('111111111111111111111111111111101'))",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('00000010100101000001111010011100') == 964176192\nassert solution('111111111111111111111111111111101') == 3221225471\nassert solution('11101011011100100100100111001011011110111') == 3221225471\nassert solution('1110111111110111111111111111111011') == 4294967293\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 87
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution
        "num_ids_2": 1676,
        "num_ids_4": 1676
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11101101011011001011110111101111011\") == \"3221225471\"\nassert solution(\"10011101101111011011110111101101111011\") == \"3221225471\"\nassert solution(\"1111111111111111111111111111111111111111\") == \"3221225471\"\nassert solution(\"1101101101111011110111101111011011110111101\") == \"3221225471\"\nassert solution(\"1110111101111111111111111111111111111111111111\") == \"3221225471\"\n",
        "num_ids_2": 53,
        "num_ids_4": 104
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution
        "num_ids_2": 1676,
        "num_ids_4": 1676
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution
        "num_ids_2": 1676,
        "num_ids_4": 1676
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('00000010100101000001111010011100') == '964176192'\nassert solution('111111111111111111111111111111101') == '3221225471'\n\"\"\"",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution
        "num_ids_2": 1676,
        "num_ids_4": 1676
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\"\nassert solution(\"10\") == \"[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1], [1, 7, 21, 35, 35, 21, 7, 1], [1, 8, 28, 56, 70, 56, 28, 8, 1], [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]]\"\nassert solution(\"0\") == \"[]\"\nassert solution(\"1\") == \"[[1]]\"\nassert solution(\"-2\") == \"[]\"\n",
        "num_ids_2": 173,
        "num_ids_4": 194
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \\\n[\n    [1],\n    [1, 1],\n    [1, 2, 1],\n    [1, 3, 3, 1],\n    [1, 4, 6, 4, 1]\n]\n\"\"\"\nimport math\nimport sys\nimport time\nfrom typing import List\n\nsys.setrecursionlimit(1000000)\nthreading.stack_size(200000000)\n\n\nclass Solution:\n    def generate(self, num_rows: int) -> List[List[int]]:\n        result = [[1]]\n        for i in range(num_rows - 1):\n            next_row = [1]\n            for j in range(i):\n                next_row.append(result[i][j] + result[i][j + 1])\n            next_row.append(1)\n            result.append(next_row)\n        return result\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == [[1], [1, 1], [1, 2, 1]]\n\nassert solution('5') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n\nassert solution('6') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n\nassert solution('7') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1]]\n\nassert solution('8') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1], [1, 7, 21, 35, 35, 21, 7, 1]]",
        "num_ids_2": 64,
        "num_ids_4": 189
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == [[1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1]]\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def getRow(self, numRows: int) -> List[List[int]]:\n        triangle = [[1] * (i + 1) for i in range(numRows)]\n\n        for i in range(numRows):\n            for j in range(1, i):\n                triangle[i][j] = triangle[i - 1][j - 1] + triangle[i - 1][j]\n\n        return triangle\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == [\n    [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n\nassert solution(\"0\") == []\nassert solution(\"1\") == [[1]]\nassert solution(\"2\") == [[1], [1,1]]\nassert solution(\"3\") == [[1], [1,1], [1,2,1]]\n",
        "num_ids_2": 16,
        "num_ids_4": 41
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5) == [\n    [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1) == [[1]]\nassert solution(3) == [[1],[1,1],[1,2,1]]\nassert solution(5) == [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\nassert solution(0) == []\nassert solution(-5) == []\n\nsolution(\"2\")\nsolution(\"5\")\nsolution(\"3\")\n\nsolution(2) == [[1],[1,1]]\nsolution(5) == [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\nsolution(0) == []\nsolution(1) == [[1]]\nsolution(-1) == []",
        "num_ids_2": 30,
        "num_ids_4": 76
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(5) == [\n    [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n\nassert solution(4) == [\n    [1],\n    [1,1],\n    [1,2,1],\n    [1,3,3,1]\n]\n\nassert solution(1) == [[1]]\n\nassert solution(0) == [[]]\n\nassert solution(\"abc\") == False",
        "num_ids_2": 16,
        "num_ids_4": 35
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\nprint(\"Passed\")\n\n'''\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\n\"\n\"foo@example.com\\n\"\n\"@example.com\\n\"\n\"a@b.com\\n\"\n\"1@example.com\\n\"\n\"aa@example.com\\n\"\n\"a@b.com\\n\"\n\"a@b.com\\n\"\n\"a@b.com\\n\"\n\"123@example.com\\n\"\n\"foo@.com\\n\"\n\"foo@\\n\"\n\"foo@ example.com\\n\"\n\"foo@example\\n\"\n\"foo@example.com\\n\"\n\"foo@ex\\n\"\n\"foo@example\\n\"\n\"foo@example.com\\n\"\n\"foo@.com\\n\"\n\"foo@.example.com\\n\"\n\"foo@.com\\n\"\n\"foo@.example.com\\n\"\n\"foo@.com\\n\"\n\"foo@example com\\n\"\n\"foo@example.com\\n\"\n\"foo@.example.com\\n\"\n\"foo@.example.com\\n\"\n\"foo@example.com.\\n\"\n\"foo@example.com\\n\"\n\"foo@.example.com\\n\"\n\"foo@.example.com\\n\"\n\"foo@example com\\n\"\n\"foo@example.com\\n\"\n\"foo@.example.com\\n\"\n\"foo@.example.com\\n\"\n\"foo@example.com.\\n\"\n\"foo@example.com\\n\"\n\"foo@.example.com\\n\"\n\"foo@.example.com\\n\"\n\"foo@example.com.\\n\"\n\"foo@example.com\\n\"\n\"foo@.example.com\\n\"\n\"foo@.example.com\\n\"\n\"foo@example.com\\n\") == ['@example.com', '@example.com', '@b.com', '@example.com', '@example.com', '@b.com', '@b.com', '@b.com', '@b.com', '@b.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com', '@example.com",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 abc@gmail.com\\na\\nb\") == ['abc@gmail.com', 'a@gmail.com', 'b@gmail.com']\nassert solution(\"1 a@b.com\\na\") == ['a@b.com']\nassert solution(\"5 zyx@wawa.com\\nz\\nyx@wawa.com\\nyx@wawa.com\\nz\\nzyx@wawa.com\") == ['zyx@wawa.com', 'zyx@wawa.com', 'zyx@wawa.com', 'zyx@wawa.com', 'zyx@wawa.com']\nassert solution(\"1 a@b.com\\n1 a@b.com\\na\") == ['a@b.com', 'a@b.com', 'a@b.com']\nassert solution(\"1 zyx@wawa.com\\nz\\nyx@wawa.com\\nyx@wawa.com\\nz\\nzyx@wawa.com\") == ['zyx@wawa.com', 'zyx@wawa.com', 'zyx@wawa.com', 'zyx@wawa.com', 'zyx@wawa.com']\n",
        "num_ids_2": 59,
        "num_ids_4": 190
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n''') == ['brian-23@hackerrank.com', 'britts_54@hackerrank.com', 'lara@hackerrank.com']\n\n=====TESTING=====\nHow to run the unit tests to test your solution locally\nFor C++: You can find C++ unit tests online.\nFor Java: You can find Java unit tests online.\nFor Python: You can find Python unit tests online.\n\nJava Solution Code:\n==================================================\n\npublic class Solution {\n    public static void main(String[] args) {\n        /*\n        This function handles input from the console.\n        Use Scanner class for this\n        */\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        ArrayList<String> emails = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            emails.add(makeEmail(scanner));\n        }\n        emails.sort();\n        System.out.println(emails);\n    }\n\n    public static String makeEmail(Scanner scanner) {\n        String[] tokens = scanner.next().split(\"@\");\n        String username = tokens[0];\n        String website = tokens[1];\n        String[] websiteTokens = website.split(\".\");\n        String extension = websiteTokens[len(websiteTokens) - 1];\n        return username + \"@\" + website + \".\" + extension;\n    }\n}\n========================================================================================================================\nPython Solution Code:\n========================================================================================================================",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\naaa@google.com\\nbcccc@msu.edu\") == ['aaa@google.com', 'bcccc@msu.edu']\nassert solution(\"2\\naaa@google.com\\nbcccc@msu.edu\\nccc@msu.edu\") == ['ccc@msu.edu', 'aaa@google.com', 'bcccc@msu.edu']\nassert solution(\"2\\naaa@google.com\\nbcccc@msu.edu\\nccc@msu.edu\\ndddddddddddddd@msu.edu\") == ['ccc@msu.edu', 'dddddddddddddd@msu.edu', 'aaa@google.com', 'bcccc@msu.edu']\n\n=====Notes=====\n>>> range(3)\n[0, 1, 2]\n>>> range(0, 2)\n[0, 1]\n>>> range(0, 2, 1)\n[0, 1]\n>>> range(0, 2, 2)\n[0]\n\"\"\"\n",
        "num_ids_2": 98,
        "num_ids_4": 184
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\nrich@example.com\\nwow@exam\\nabc@test.com') == ['abc@test.com', 'rich@example.com', 'wow@exam']\n\n=====Test Case Explanation=====\nYour output for the above input should be:\n[\n    'abc@test.com',\n    'rich@example.com',\n    'wow@exam'\n]\n\n'''\nimport re\nl=int(input())\nemails=[]\nfor i in range(l):\n    emails.append(input())\npattern='[a-z0-9-]+@[a-z0-9-]+(?:\\.[a-z]+)+'\nans=[]\nfor email in emails:\n    if re.match(pattern,email):\n        ans.append(email)\nans.sort()\nfor i in ans:\n    print(i)\n",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\ngeeksforgeeks\\nportal.ac\\ncomputer.science\") == ['computer.science', 'geeksforgeeks', 'portal.ac'], 'error'\nprint(\"The result is correct\")\n=====Solution=====\n\n>>>>>>> 9b3f396d94fb204292b94f897479298261a9f32d\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nluke@gmail.com\\nryan@gmail.com\\njessica@jessica.com\\nphillip@gmail.com\") == ['jessica@jessica.com', 'luke@gmail.com', 'phillip@gmail.com', 'ryan@gmail.com']\n",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\nrich@gmail.com\\njulia@julia.me\\n'\n'nint@me.org\\nhme@gmail.com') == ['julia@julia.me', 'hme@gmail.com', 'nint@me.org']\n\nassert solution('3\\nchris.email+alex@email.com\\n'\n'john.smith@email.com\\n'\n'julia@julia.me') == ['chris.email+alex@email.com', 'julia@julia.me']",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(    \"2 abc@gamil.com\\n\"\n                    \"3 def@gamil.com\\n\"\n                    \"1 xyz@gamil.com\") == [ 'abc@gamil.com', 'def@gamil.com', 'xyz@gamil.com' ]\n=====\n\nSample test cases:\n\nInput 1:\n3\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nOutput 1:\n['britts_54@hackerrank.com', 'brian-23@hackerrank.com', 'lara@hackerrank.com']\n\nInput 2:\n1\najeet@gmail.com\n\nOutput 2:\n['ajeet@gmail.com']\n\nInput 3:\n3\nalan@gmail.com\nalan@live.com\nalan@yahoo.com\n\nOutput 3:\n['alan@live.com', 'alan@yahoo.com', 'alan@gmail.com']\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nlara@hackerrank.com\nbrian-23@hackerrank",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\njoey@foo.com\\njoey@bar.com\\n\") == \\\n    ['joey@bar.com', 'joey@foo.com']\n\nimport re",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\") == [0, 1, 1, 8, 27, 64]\n=====Sample Test Cases=====\nInput:\n\n4\n\nOutput:\n\n[0, 1, 1, 8]\n\nInput:\n\n5\n\nOutput:\n\n[0, 1, 1, 8, 27]\n\nSolution:\n\n>>>>>>> aa07bc9e5e5a5e34d9a57f6f7b1f5b16c23e0\nn = int(input())\nfib = [0, 1]\nfor i in range(2, n):\n    fib.append(fib[-1] + fib[-2])\n\nprint([fib[i] ** 3 for i in range(n)])\n<<<<<<< HEAD\n=======\n\n>>>>>>> aa07bc9e5e5a5e34d9a57f6f7b1f5b16c23e0\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == [0, 1, 1, 8]\nassert solution(\"15\") == [0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331,\n1492, 2584, 4181, 6765]\n=======\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == [0, 1, 1, 8]\nprint(solution(\"4\"))",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == [1, 1, 1, 1, 1]\nassert solution('4') == [0, 1, 1, 1]\nassert solution('10') == [0, 1, 1, 1, 2, 3, 5, 8, 13, 21]\n=====Solution=====\n\nn = int(input())",
        "num_ids_2": 34,
        "num_ids_4": 62
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == [0, 1, 1, 8]\n=====Sample Test Cases=====\nInput:\n\nsolution()\nOutput:\n\n[0, 1, 1, 8]\nInput:\n\nsolution()\nOutput:\n\n[0, 1, 1, 8]\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(6) == [1, 8, 27, 64, 125, 216]\n\nsolution(6)\n\n=====Test Case 2=====\nTest.assert_equals(solution(6), [1, 8, 27, 64, 125, 216])\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == [0, 1, 1, 8]\nassert solution(\"15\") == [0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728,\n2584, 4181, 6765]\n\nInput Format:\n\nThe first and only line of input contains the integer,.\n\nConstraints:\n\n1 <= n <= 20\n\nOutput Format:\n\nA list on a single line containing the cubes of the first N fibonacci numbers.\n\nSample TestCase 1\nInput\n\n3\nOutput\n\n[0, 1, 1, 8]\nExplanation\n\nThe first 4 fibonacci numbers are [0, 1, 1, 2]. The corresponding cubes of these numbers are [0, 1, 1, 8].\n\nSample TestCase 2\nInput\n\n5\nOutput\n\n[0, 1, 1, 8, 27]\nExplanation\n\nThe first 5 fibonacci numbers are [0, 1, 1, 2, 3]. The corresponding cubes of these numbers are [0, 1, 1, 8, 27].\n\nSample TestCase 3\nInput\n\n10\nOutput\n\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512]\nExplanation\n\nThe first 10 fibonacci numbers are [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]. The corresponding cubes of these numbers are [0, 1, 1, 8, 27, 64, 125, 216, 343, 512].\n\n\"\"\"",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == [0, 1, 1, 8]\n\n========================================================\nSample Input\n\n5\nSample Output\n\n[0, 1, 1, 8, 27]\n\n========================================================\nSource\nhttps://www.hackerrank.com/challenges/python-lambda/problem\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3) == [0, 1, 1]\nassert solution(5) == [0, 1, 1, 8, 27]\n\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == [1, 8, 27, 64]\nprint(solution('4'))",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\n\"\"\")\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\n",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 1\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 2\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Ray</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n''') == 0\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Ray</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Ray</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n''') == 1\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Ray</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Ray</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Ray</author>\n        <question type='hard'>XML 3</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n''') == 2\n\n=====Test Case 4=====\nInput\n\n3\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Ray</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Ray</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\nExpected Output\n1\n\nOutput\n1\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Ray</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Ray</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n=====Problem Statement=====\nYou are given a valid XML document, and you have to print the maximum level of nesting in it. Take the depth of the root as 0.\n\n=====Input Format=====\nThe first line contains N, the number of lines in the XML document.\nThe next N lines follow containing the XML document.\n\n=====Output Format=====\nOutput a single line, the integer value of the maximum level of nesting in the XML document.\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 2\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 0\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <answer type='hard'>24</answer>\n        <comment type='hard'>\n            <![CDATA[<p>This is the solution to the question. <a href='https://www.hackerrank.com/'>HackerRank</a> is a website where you can practice and solve problems using HackerRank.  It is basically a repository for <a href='https://www.hackerrank.com/domains/algorithms'>algorithms</a> as well as <a href='https://www.hackerrank.com/domains/python'>Python</a>.</p>]]>\n        </comment>\n    </entry>\n</feed>\n\"\"\") == 1\n\"\"\"\"\n\n====== Test Case 2 ========\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <answer type='hard'>24</answer>\n        <comment type='hard'>\n            <![CDATA[<p>This is the solution to the question. <a href='https://www.hackerrank.com/'>HackerRank</a> is a website where you can practice and solve problems using HackerRank.  It is basically a repository for <a href='https://www.hackerrank.com/domains/algorithms'>algorithms</a> as well as <a href='https://www.hackerrank.com/domains/python'>Python</a>.</p>]]>\n        </comment>\n    </entry>\n</feed>\n======= Test Case 3 ========\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <answer type='hard'>24</answer>\n        <comment type='hard'>\n            <![CDATA[<p>This is the solution to the question. <a href='https://www.hackerrank.com/'>HackerRank</a> is a website where you can practice and solve problems using HackerRank.  It is basically a repository for <a href='https://www.hackerrank.com/domains/algorithms'>algorithms</a> as well as <a href='https://www.hackerrank.com/domains/python'>Python</a>.</p>]]>\n        </comment>\n    </entry>\n</feed>\n\"\"\"\nimport xml.etree.ElementTree as etree\n\nmaxdepth = 0\n",
        "num_ids_2": 10,
        "num_ids_4": 15
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 1\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <title>Challenge 006</title>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/challenges/xml2-find-the-maximum-depth/problem'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </entry>\n</feed>''') == 2\n'''\n\nInput Format\nThe first line contains N, the number of lines of XML.\nThe next N lines follow containing the XML document.\n\nConstraints\n1 \u2264 N \u2264 100\n1 \u2264 |line| \u2264 300, where |line| denotes the length of line.\n\nOutput Format\nPrint a single line denoting the maximum depth of nesting in the XML document.\n\nSample Input\n6\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\nSample Output\n1\n\nExplanation\nThe maximum depth of nesting is 1.\n\n'''\n\nfrom xml.etree.ElementTree import XML",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\n=====\n//self.number_of_children = 0\n//def solution(number_of_lines,stdin: str):\n//    # Complete this function\n//    pass\n//print(solution(5,\"\"\"\n//<feed xml:lang='en'>\n//    <title>HackerRank</title>\n//    <subtitle lang='en'>Programming challenges</subtitle>\n//    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n//    <updated>2013-12-25T12:00:00</updated>\n//</feed>\n//\"\"\".split(\"\\n\")))\n//assert solution(5,\"\"\"\n//<feed xml:lang='en'>\n//    <title>HackerRank</title>\n//    <subtitle lang='en'>Programming challenges</subtitle>\n//    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n//    <updated>2013-12-25T12:00:00</updated>\n//</feed>\n//\"\"\".split(\"\\n\"))==1\n\n>>>>>>> c53a5bb914a0f0f5ef2e0f63b1c66e8a9b13f4c0\nimport sys",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n<data>\n    <country name=\"Liechtenstein\">\n        <rank>1</rank>\n        <year>2008</year>\n        <gdppc>141100</gdppc>\n        <neighbor name=\"Austria\" direction=\"E\"/>\n        <neighbor name=\"Switzerland\" direction=\"W\"/>\n    </country>\n    <country name=\"Singapore\">\n        <rank>4</rank>\n        <year>2011</year>\n        <gdppc>59900</gdppc>\n        <neighbor name=\"Malaysia\" direction=\"N\"/>\n    </country>\n    <country name=\"Panama\">\n        <rank>68</rank>\n        <year>2011</year>\n        <gdppc>13600</gdppc>\n        <neighbor name=\"Costa Rica\" direction=\"W\"/>\n        <neighbor name=\"Colombia\" direction=\"E\"/>\n    </country>\n</data>\n''') == 3\nprint('The second test for the code passed')\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n) == 1\nassert solution(\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n) == 2\nassert solution(\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n) == 2\n\nassert solution(\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n) == 2\nassert solution(\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n) == 2\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 1\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 1\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>''') == 2\n'''\nYou are given an XML document, and you have to print the maximum level of nesting in it. Take the depth of the root as 0.\n\nFor example, given the following XML document:\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\nThe maximum level of nesting is 1.\n\nPlease keep the namespace and other namespaces in tact.\n\nThis challenge is more challenging than regular XML challenges.\n'''\n=======\nprint(5)\nprint(5)\nprint(6)\nprint(6)\nprint(7)\nprint(7)\nprint(8)\nprint(8)\nprint(9)\nprint(9)\nprint(10)\nprint(10)\nprint(11)\nprint(11)\nprint(12)\nprint(12)\nprint(13)\nprint(13)\nprint(14)\nprint(14)\nprint(15)\nprint(15)\nprint(16)\nprint(16)\nprint(17)\nprint(17)\nprint(18)\nprint(18)\nprint(19)\nprint(19)\nprint(20)\nprint(20)\nprint(21)\nprint(21)\nprint(22)\nprint(22)\nprint(23)\nprint(23)\nprint(24)\nprint(24)\nprint(25)\nprint(25)\nprint(26)\nprint(26)\nprint(27)\nprint(27)\nprint(28)\nprint(28)\nprint(29)\nprint(29)\nprint(30)\nprint(30)\nprint(31)\nprint(31)\nprint(32)\nprint(32)\nprint(33)\nprint(33)\nprint(34)\nprint(34)\nprint(35)\nprint(35)\nprint(36)\nprint(36)\nprint(37)\nprint(37)\nprint(38)\nprint(38)\nprint(39)\nprint(39)\nprint(40)\nprint(40)\nprint(41)\nprint(41)\nprint(42)\nprint(42)\nprint(43)\nprint(43)\nprint(44)\nprint(44)\nprint(45)\nprint(45)\nprint(46)\nprint(46)\nprint(47)\nprint(47)\nprint(48)\nprint(48)\nprint(49)\nprint(49)\nprint(50)\nprint(50)\nprint(51)\nprint(51)\nprint(52)\nprint(52)\nprint(53)\nprint(53)\nprint(54)\nprint(54)\nprint(55)\nprint(55)\nprint(56)\nprint(56)\nprint(57)\nprint(57)\nprint(58)\nprint(58)\nprint(59)\nprint(59)\nprint(60)\nprint(60)\nprint(61)\nprint(61)\nprint(62)\nprint(62)\nprint(63)\nprint(63)\nprint(64)\nprint(64)\nprint(65)\nprint(65)\nprint(66)\nprint(66)\nprint(67)\nprint(67)\nprint(68)\nprint(68)\nprint(69)\nprint(69)\nprint(70)\nprint(70)\nprint(71)\nprint(71)\nprint(72)\nprint(72)\nprint(73)\nprint(73)\nprint(74)\nprint(74)\nprint(75)\nprint(75)\nprint(76)\nprint(76)\nprint(77)\nprint(77)\nprint(78)\nprint(78)\nprint(79)\nprint(79)\nprint(80)\nprint(80)\nprint(81)\nprint(81)\nprint(82)\nprint(82)\nprint(83)\nprint(83)\nprint(84)\nprint(84)\nprint(85)\nprint(85)\nprint(86)\nprint(86)\nprint(87)\nprint(87)\nprint(88)\nprint(88)\nprint(89)\nprint(89)\nprint(90)\nprint(90)\nprint(91)\nprint(91)\nprint(92)\nprint(92)\nprint(93)\nprint(93)\nprint(94)\nprint(94)\nprint(95)\nprint(95)\nprint(96)\nprint(96)\nprint(97)\nprint(97)\nprint(98)\nprint(98)\nprint(99)\nprint(99)\nprint(100)\nprint(100)\nprint(101)\nprint(101)\nprint(102)\nprint(102)\nprint(103)\nprint(103)\nprint(104)\nprint(104)\nprint(105)\nprint(105)\nprint(106)\nprint(106)\nprint(107)\nprint(107)\nprint(108)\nprint(108)\nprint(109)\nprint(109)\nprint(110)\nprint(110)\nprint(111)\nprint(111)\nprint(112)\nprint(112)\nprint(113)\nprint(113)\nprint(114)\nprint(114)\nprint(115)\nprint(115)\nprint(116)\nprint(116)\nprint(117)\nprint(117)\nprint(118)\nprint(118)\nprint(119)\nprint(119)\nprint(120)\nprint(120)\nprint(121)\nprint(121)\nprint(122)\nprint(122)\nprint(123)\nprint(123)\nprint(124)\nprint(124)\nprint(125)\nprint(125)\nprint(126)\nprint(126)\nprint(127)\nprint(127)\nprint(128)\nprint(128)\nprint(129)\nprint(129)\nprint(130)\nprint(130)\nprint(131)\nprint(131)\nprint(132)\nprint(132)\nprint(133)\nprint(133)\nprint(134)\nprint(134)\nprint(135)\nprint(135)\nprint(136)\nprint(136)\nprint(137)\nprint(137)\nprint(138)\nprint(138)\nprint(139)\nprint(139)\nprint(140",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 3\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 3\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 3</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 3\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 3</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 4</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 4",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 2, \"Example\"\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1, \"Failed\"\n\"\"\")\n    ",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7017252641') == \"YES\"\nassert solution('717252641') == \"NO\"\nassert solution('7 1725 2641') == \"NO\"\nassert solution('(717)252641') == \"NO\"\nassert solution('717)252641') == \"NO\"\n",
        "num_ids_2": 28,
        "num_ids_4": 58
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"79999999999\") == \"YES\"\nassert solution(\"91 9999999999\") == \"YES\"\nassert solution(\"919 999999999\") == \"NO\"\nassert solution(\"919 999999999\") == \"NO\"\nassert solution(\"91 999999999\") == \"NO\"\n\nprint('Successfully solved!')\n\n================================================================================================================\n\nWrite a function solution(s) that, given a string s containing only uppercase letters, computes any permutation of s such that:\n\nThere are no two characters which are equal.\nThe characters are in the same order as they appear in s.\nFor example, given s='ABCD', the function should return the string 'ACBD'.\nGiven s='ABCDE', the function should return an empty string.\nYour solution should run in linear time and use linear space.\n\nHere's a starting point:",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('(123) 456-7890') == 'YES'\nassert solution('(123) 456-7890') == 'YES'\nassert solution('(123)456-7890') == 'NO'\nassert solution('(123)456-7890') == 'NO'\nassert solution('(123)456-7890') == 'NO'\n\n=====Test Case 0=====\ntest = '(123) 456-7890'\n\n=====Test Case 1=====\ntest = '(123) 456-7890'\n\n=====Test Case 2=====\ntest = '(123) 456-7890'\n\n=====Test Case 3=====\ntest = '(123) 456-7890'\n\n=====Test Case 4=====\ntest = '(123) 456-7890'\n\n=====Test Case 5=====\ntest = '(123) 456-7890'\n\n=====Test Case 6=====\ntest = '(123) 456-7890'\n\n=====Test Case 7=====\ntest = '(123) 456-7890'\n\n=====Test Case 8=====\ntest = '(123) 456-7890'\n\n=====Test Case 9=====\ntest = '(123) 456-7890'\n\n=====Test Case 10=====\ntest = '(123) 456-7890'\n\n=====Test Case 11=====\ntest = '(123) 456-7890'\n\n=====Test Case 12=====\ntest = '(123) 456-7890'\n\n=====Test Case 13=====\ntest = '(123) 456-7890'\n\n=====Test Case 14=====\ntest = '(123) 456-7890'\n\n=====Test Case 15=====\ntest = '(123) 456-7890'\n\n=====Test Case 16=====\ntest = '(123) 456-7890'\n\n=====Test Case 17=====\ntest = '(123) 456-7890'\n\n=====Test Case 18=====\ntest = '(123) 456-7890'\n\n=====Test Case 19=====\ntest = '(123) 456-7890'\n\n=====Test Case 20=====\ntest = '(123) 456-7890'\n\n=====Test Case 21=====\ntest = '(123) 456-7890'\n\n=====Test Case 22=====\ntest = '(123) 456-7890'\n\n=====Test Case 23=====\ntest = '(123) 456-7890'\n\n=====Test Case 24=====\ntest = '(123) 456-7890'\n\n=====Test Case 25=====\ntest = '(123) 456-7890'\n\n=====Test Case 26=====\ntest = '(123) 456-7890'\n\n=====Test Case 27=====\ntest = '(123) 456-7890'\n\n=====Test Case 28=====\ntest = '(123) 456-7890'\n\n=====Test Case 29=====\ntest = '(123) 456-7890'\n\n=====Test Case 30=====\ntest = '(123) 456-7890'\n\n=====Test Case 31=====\ntest = '(123) 456-7890'\n\n=====Test Case 32=====\ntest = '(123) 456-7890'\n\n=====Test Case 33=====\ntest = '(123) 456-7890'\n\n=====Test Case 34=====\ntest = '(123) 456-7890'\n\n=====Test Case 35=====\ntest = '(123) 456-7890'\n\n=====Test Case 36=====\ntest = '(123) 456-7890'\n\n=====Test Case 37=====\ntest = '(123) 456-7890'\n\n=====Test Case 38=====\ntest = '(123) 456-7890'\n\n=====Test Case 39=====\ntest = '(123) 456-7890'\n\n=====Test Case 40=====\ntest = '(123) 456-7890'\n\n=====Test Case 41=====\ntest = '(123) 456-7890'\n\n=====Test Case 42=====\ntest = '(123) 456-7890'\n\n=====Test Case 43=====\ntest = '(123) 456-7890'\n\n=====Test Case 44=====\ntest = '(123) 456-7890'\n\n=====Test Case 45=====\ntest = '(123) 456-7890'\n\n=====Test Case 46=====\ntest = '(123) 456-7890'\n\n=====Test Case 47=====\ntest = '(123) 456-7890'\n\n=====Test Case 48=====\ntest = '(123) 456-7890'\n\n=====Test Case 49=====\ntest = '(123) 456-7890'\n\n=====Test Case 50=====\ntest = '(123) 456-7890'\n\n=====Test Case 51=====\ntest = '(123) 456-7890'\n\n=====Test Case 52=====\ntest = '(123) 456-7890'\n\n=====Test Case 53=====\ntest = '(123) 456-7890'\n\n=====Test Case 54=====\ntest = '(123) 456-7890'\n\n=====Test Case 55=====\ntest = '(123) 456-7890'\n\n=====Test Case 56=====\ntest = '(123) 456-7890'\n\n=====Test Case 57=====\ntest = '(123) 456-7890'\n\n=====Test Case 58=====\ntest = '(123) 456-7890'\n\n=====Test Case 59=====\ntest = '(123) 456-7890'\n\n=====Test Case 60=====\ntest = '(123) 456-7890'\n\n=====Test Case 61=====\ntest = '(123) 456-7890'\n\n=====Test Case 62=====\ntest = '(123) 456-7890'\n\n=====Test Case 63=====\ntest = '(123) 456-7890'\n\n=====Test Case 64=====\ntest = '(123) 456-7890'\n\n=====Test Case 65=====\ntest = '(123) 456-7890'\n\n=====Test Case 66=====\ntest = '(123) 456-7890'\n\n=====Test Case 67=====\ntest = '(123) 456-7890'\n\n=====Test Case 68=====\ntest = '(123) 456-7890'\n\n=====Test Case 69=====\ntest = '(123) 456-7890'\n\n=====Test Case 70=====\ntest = '(123) 456-7890'\n\n=====Test Case 71=====\ntest = '(123) 456-7890'\n\n=====Test Case 72=====\ntest = '(123) 456-7890'\n\n=====Test Case 73=====\ntest = '(123) 456-7890'\n\n=====Test Case 74=====\ntest = '(123) 456-7890'\n\n=====Test Case 75=====\ntest = '(123) 456-7890'\n\n=====Test Case 76=====\ntest = '(123) 456-7890'\n\n=====Test Case 77=====\ntest = '(123) 456-7890'\n\n=====Test Case 78=====\ntest = '(123) 456-7890'\n\n=====Test Case 79=====\ntest = '(123) 456-7890'\n\n=====Test Case 80=====\ntest = '(123) 456-7890'\n\n=====Test Case 81=====\ntest = '(123) 456-7890'\n\n=====Test Case 82=====\ntest = '(123) 456-7890'\n\n=====Test Case 83=====\ntest = '(123) 456-7890'\n\n=====Test Case 84=====",
        "num_ids_2": 34,
        "num_ids_4": 66
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7254398712') == 'YES\\n'\nassert solution('7184475612') == 'NO\\n'\nassert solution('7734406369') == 'YES\\n'\n\nassert solution('7254398713') == 'NO\\n'\n\n====================================================\nimport re",
        "num_ids_2": 31,
        "num_ids_4": 62
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'077-234-3487'\n) == 'YES'\nassert solution(\n'077-234-34873487'\n) == 'NO'\nassert solution(\n'077-2343-3487'\n) == 'NO'\nassert solution(\n'077-234-3487-3487'\n) == 'NO'\nassert solution(\n'077-2343-34873487'\n) == 'NO'\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('(123) 456-7890') == 'YES'\nassert solution('(123) 456-7890') == 'YES'\nassert solution('(123)456-7890') == 'NO'\nassert solution('(123)456-7890') == 'NO'\nassert solution('(123)456-7890') == 'NO'\n\n=====Test 1=====\nYou are given the following two lines of code:",
        "num_ids_2": 34,
        "num_ids_4": 66
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('71234567890') == 'YES'\nassert solution('9112345678') == 'YES'\nassert solution('91 890 1234') == 'YES'\nassert solution('123456789') == 'NO'\nassert solution('987654321') == 'NO'\n",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"07895462130\") == \"YES\"\nassert solution(\"9558883249\") == \"YES\"\nassert solution(\"1238732983\") == \"NO\"\n\n=====Test Case 1=====\nInput\n3\n07895462130\n1238732983\n9558883249\nOutput\nYES\nNO\nYES\n\n\"\"\"\nimport re\n\nn = int(input())\n\nfor _ in range(n):\n    if re.match('[7-9][0-9]{9}', input()):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
        "num_ids_2": 29,
        "num_ids_4": 43
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('07895462130') == 'YES'\nassert solution('93424214') == 'NO'\nassert solution('43534534') == 'YES'\nassert solution('7734241231') == 'NO'\nassert solution('07357389') == 'YES'\n",
        "num_ids_2": 28,
        "num_ids_4": 54
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('71234567890') == \"NO\"\nassert solution('7123456789x') == \"YES\"\nassert solution('7x56789x0') == \"NO\"\nassert solution('700000000') == \"NO\"\nassert solution('7712345678') == \"YES\"\n",
        "num_ids_2": 29,
        "num_ids_4": 56
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 6 7 9\"\n    ,\"\"\"\n1 2 3 5 6 7 8 9\n2 3 6 7 9\n    \"\"\") == \"1 2 5 6\"\nassert solution(\"4\\n2 3 6 7 9\"\n    ,\"\"\"\n2 3 6 7 9\n4 8 9\n    \"\"\") == \"1 2 5 6 7 8 9\"\nassert solution(\"4\\n2 3 6 7 9\"\n    ,\"\"\"\n2 4 7 8 9\n2 3 6 7 9\n    \"\"\") == \"1 2 5 6 8 9\"\nassert solution(\"4\\n2 3 6 7 9\"\n    ,\"\"\"\n1 2 3 4 8 9\n2 3 4 7 9\n    \"\"\") == \"1 2 6 7 9\"\nassert solution(\"4\\n2 3 6 7 9\"\n    ,\"\"\"\n1 2 3 5 6 8 9\n2 3 5 7 9\n    \"\"\") == \"1 2 4 6 8 9\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 4 6 8\\n3\\n1 3 5\") == \"2 6\"\nassert solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n\") == \"1 2 5 3 6\"\nassert solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\") == \"1 2 5 3 6 9\"\n\n=====Sample Tests=====\nTest 1\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6 9\nTest 2\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 3\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 4\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 5\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 6\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 7\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 8\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 9\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 10\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 11\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 12\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 13\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 14\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 15\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 16\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 17\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 18\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 19\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 20\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 21\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 22\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 23\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 24\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 25\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 26\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 27\n>>> solution(\"4\\n2 4 6 8\\n3\\n1 3 5\\n9\\n\")\n1 2 5 3 6\nTest 28\n>>> solution(\"4\\",
        "num_ids_2": 55,
        "num_ids_4": 89
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 4 6 8\\n4\\n2 3 6 8\") == \"2 6\\n\"\n\n=====Test Case:=====\nTest case 1\nInput\n4\n2 4 6 8\n4\n2 3 6 8\nOutput\n2 6\n\nTest case 2\nInput\n5\n2 4 6 8 10\n4\n2 3 6 8\nOutput\n2 6 8 10\n\nTest case 3\nInput\n5\n2 4 6 8 10\n4\n2 4 8 10\nOutput\n2 6 8 10\n\nTest case 4\nInput\n8\n2 4 6 8 10 12 14 16 18\n8\n2 4 8 10 12 14 16 18 20\nOutput\n2 6 8 10 18 20\n'''\nfrom collections import Counter\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5\n2 4 5 9 12\n4\n2 4 11 12\n''') == '''\n5\n9\n12\n11\n'''\n\nassert solution('''\n5\n2 4 5 9 12\n4\n2 4 11 12\n''') == '''\n5\n9\n12\n11\n'''\n\nassert solution('''\n7\n1 1 1 1 1 1 1\n2\n2 2 2 2 2 2\n''') == '''\n1\n'''\n\nassert solution('''\n6\n1 1 2 2 2\n3\n2 3 4\n''') == '''\n1\n2\n'''\n\nassert solution('''\n6\n1 1 2 2 2\n3\n2 3 4\n''') == '''\n1\n2\n3\n4\n'''",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 4 5 9\\n4\\n2 4 11 12') == '12 9 5 11'\n=====Solution=====",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n2 4 5 9\n4\n2 4 11 12''') == '''5\n9\n11\n12'''\nassert solution('''4\n2 4 11 12\n4\n2 4 5 9''') == '''5\n9\n11\n12'''\nassert solution('''7\n1 1 1 1 1 1 1\n7\n1 1 1 1 1 1 1\n7\n1 1 1 1 1 1 1\n7\n1 1 1 1 1 1 1\n''') == '''1\n1\n2\n2\n3\n3\n4\n4\n5\n5\n6\n6\n7\n7'''\nassert solution('''8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 5 6 2 7 8\n8\n1 2",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 6 7\\n3\\n1 2 4 8\") == \"2\\n6\\n8\"\nassert solution(\"2\\n2\\n5\\n6\") == \"5\"\n\n=====Test Case=====\nInput\n\n1\n4\n2 3 6 7\n3\n1 2 4 8\nOutput\n\n2\n6\n8\n\n=============================",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n1 2 3\n4 5 6''') == '2\\n5\\n7'\n\nassert solution('''4\n2\n3 4 5 6''') == '3\\n5\\n6'\n\nassert solution('''5\n2\n3 6 5 4 7''') == '2\\n4\\n6'\n\nassert solution('''8\n1 2 3 4 5 6 7 8''') == '3\\n5\\n7\\n9'\n\nassert solution('''10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10''') == '2\\n4\\n6\\n8\\n10'",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 4 4 4 1 1 1 1\") == \"1 1\"\nassert solution(\"4 4 4 4 1 1 1 1 1\") == \"1\"\n=======\n\nPython Program for Symmetric Difference between two arrays.\n\nSample Input:\n\n4\n2 4 5 9\n4\n2 4 11 12\n\nSample Output:\n\n5\n9\n11\n12\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3 6 5\\n3\\n2 3 5') == '2\\n5\\n6'\n=====END OF CONTEXT=====\nn
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n=====Sample Input=====\n6\nID         MARKS      NAME       CLASS     \n1          97         Raymond    7         \n2          50         Steven     4         \n3          91         Adrian     9         \n4          72         Stewart    5         \n5          80         Peter      6   \n\n    \n=====Sample Output=====\n78.00\n\n'''\n\nimport collections",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ID,MARKS,CLASS,NAME\\n1,91,12,Haris\\n2,92,12,Rohan\\n3,93,12,Sohan\\n4,85,12,Krish\\n5,89,12,Shyam\\n6,92,12,Sajid\\n7,74,12,Ali\\n8,66,12,Sakib\") == '81.50'\n=====Sample Test Cases=====\nTest Case 01\nInput\n10\nID,MARKS,CLASS,NAME\n1,91,12,Haris\n2,92,12,Rohan\n3,93,12,Sohan\n4,85,12,Krish\n5,89,12,Shyam\n6,92,12,Sajid\n7,74,12,Ali\n8,66,12,Sakib\n9,99,12,Gagan\n10,76,12,Anu\nOutput\n81.50\nExpected\n82.00\n\nTest Case 02\nInput\n5\nMARKS,CLASS,NAME,ID\n92,12,Sohan,5\n93,12,Krish,6\n89,12,Sajid,7\n85,12,Shyam,8\n91,12,Haris,9\nOutput\n81.50\nExpected\n81.50\n\nTest Case 03\nInput\n6\nID,MARKS,CLASS,NAME,DOB,AGE\n1,91,12,Haris,01-05-2001,16\n2,92,12,Rohan,01-05-2002,16\n3,93,12,Sohan,01-05-2003,16\n4,85,12,Krish,01-05-2004,16\n5,89,12,Shyam,01-05-2005,16\n6,92,12,Sajid,01-05-2006,16\n7,74,12,Ali,01-05-2007,16\n8,66,12,Sakib,01-05-2008,16\n9,99,12,Gagan,01-05-2009,16\n10,76,12,Anu,01-05-2010,16\nOutput\n81.50\nExpected\n81.50\n\nTest Case 04\nInput\n6\nCLASS,ID,MARKS,NAME,DOB,AGE\n12,1,91,Haris,01-05-2001,16\n12,2,92,Rohan,01-05-2002,16\n12,3,93,Sohan,01-05-2003,16\n12,4,85,Krish,01-05-2004,16\n12,5,89,Shyam,01-05-2005,16\n12,6,92,Sajid,01-05-2006,16\n12,7,74,Ali,01-05-2007,16\n12,8,66,Sakib,01-05-2008,16\n12,9,99,Gagan,01-05-2009,16\n12,10,76,Anu,01-05-2010,16\nOutput\n81.50\nExpected\n81.50\n\nTest Case 05\nInput\n3\nID,MARKS,NAME\n1,91,Haris\n2,92,Rohan\n3,93,Sohan\nOutput\n81.50\nExpected\n82.00\n\nTest Case 06\nInput\n2\nMARKS,CLASS,NAME,ID\n92,12,Sohan,1\n93,12,Krish,2\nOutput\n81.50\nExpected\n81.50\n\nTest Case 07\nInput\n4\nNAME,MARKS,CLASS,ID\nHaris,91,12,1\nRohan,92,12,2\nSohan,93,12,3\nKrish,85,12,4\nOutput\n82.00\nExpected\n82.00\n\nTest Case 08\nInput\n5\nID,MARKS,CLASS,NAME,DOB,AGE\n1,91,12,Haris,01-05-2001,16\n2,92,12,Rohan,01-05-2002,16\n3,93,12,Sohan,01-05-2003,16\n4,85,12,Krish,01-05-2004,16\n5,89,12,Shyam,01-05-2005,16\n6,92,12,Sajid,01-05-2006,16\n7,74,12,Ali,01-05-2007,16\n8,66,12,Sakib,01-05-2008,16\n9,99,12,Gagan,01-05-2009,16\n10,76,12,Anu,01-05-2010,16\nOutput\n81.50\nExpected\n81.50\n\nTest Case 09\nInput\n4\nID,MARKS,CLASS,NAME\n1,91,12,Haris\n2,92,12,Rohan\n3,93,12,Sohan\n4,85,12,Krish\nOutput\n82.00\nExpected\n82.00\n\nTest Case 10\nInput\n3\nMARKS,CLASS,NAME\n92,12,Sohan\n93,12,Krish\n85,12,Shyam\nOutput\n82.00\nExpected\n82.00\n\"\"\"\nfrom collections import namedtuple\n",
        "num_ids_2": 102,
        "num_ids_4": 102
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == 'The average marks of the list is: 0.00'\nassert solution(\"2\\nMARKS\\nCLASS\\nNAME\\nID\\n\") == 'The average marks of the list is: 0.67'\n\"\"\"\n",
        "num_ids_2": 72,
        "num_ids_4": 72
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\nID,MARKS,CLASS,NAME\\n1,91,12,Raymond\\n2,95,15,Steven\\n3,80,17,Julie\\n4,87,18,Simon\\n5,83,12,Ellen\") == '81.50'\nassert solution(\"1\\nID,MARKS,CLASS,NAME\\n1,91,12,Raymond\\n2,95,15,Steven\\n3,80,17,Julie\\n4,87,18,Simon\\n5,83,12,Ellen\") == '81.50'\nassert solution(\"1\\nID,MARKS,CLASS,NAME\\n1,91,12,Raymond\\n2,95,15,Steven\\n3,80,17,Julie\\n4,87,18,Simon\\n5,83,12,Ellen\") == '81.50'\nassert solution(\"1\\nID,MARKS,CLASS,NAME\\n1,91,12,Raymond\\n2,95,15,Steven\\n3,80,17,Julie\\n4,87,18,Simon\\n5,83,12,Ellen\") == '81.50'\nassert solution(\"1\\nID,MARKS,CLASS,NAME\\n1,91,12,Raymond\\n2,95,15,Steven\\n3,80,17,Julie\\n4,87,18,Simon\\n5,83,12,Ellen\") == '81.50'\n",
        "num_ids_2": 142,
        "num_ids_4": 284
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\nID,MARKS,CLASS,NAME\\n1,90,2,JACK\\n2,91,2,FRANK\\n') == '90.00'\nassert solution('1\\nMARKS,CLASS,NAME,ID\\n100,2,JACK,1\\n200,2,FRANK,2\\n') == '150.00'\n\n=====Sample Input=====\n5\nID,MARKS,CLASS,NAME\n1,90,2,JACK\n2,91,2,FRANK\n3,73,3,HOAN\n4,66,4,MICHAEL\n5,80,5,DAVID\n\n=====Sample Output=====\n79.00\n\n=====================================================\n\n=====Test Case Description=====\nFor simplicity, the result of each input list is rounded to the nearest second decimal place,\nalthough the actual precision is much higher.\n\n=====Input Format=====\nThe first line contains an integer N, the total number of students.\nThe second line contains the names of the columns in any order.\nThe next N lines contains the marks, IDs, name and class, under their respective column names.\n\n=====Constraints=====\n0<N\u2264100\n\n=====Output Format=====\nPrint the average marks of the list corrected to 2 decimal places.\n",
        "num_ids_2": 90,
        "num_ids_4": 90
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"6\nID         MARKS      NAME       CLASS     \n1          97         Raymond    7         \n2          50         Steven     4         \n3          91         Adrian     9         \n4          72         Stewart    5         \n5          80         Peter      6   \n\"\"\") == '78.00'\n\nassert solution(\"\"\"6\nMARKS      CLASS      NAME       ID        \n92         2          Calum      1         \n82         5          Scott      2         \n94         2          Jason      3         \n55         8          Glenn      4         \n82         2          Fergus     5         \n\"\"\") == '81.00'\n\nassert solution(\"\"\"5\nID         MARKS      NAME       CLASS     \n1          87         Raymond    7         \n2          77         Steven     4         \n3          17         Adrian     9         \n4          92         Stewart    5         \n5          80         Peter      6   \n\"\"\") == '78.00'\n\nassert solution(\"\"\"5\nMARKS      CLASS      NAME       ID        \n17         2          Calum      1         \n94         2          Jason      3         \n55         8          Glenn      4         \n82         2          Fergus     5         \n\"\"\") == '81.00'\n\nassert solution(\"\"\"5\nNAME       CLASS      ID         MARKS      \nJonexu     9           1          97         \nJonny      2           2          50         \nJohnny     2           3          91         \nJonny     2           4          72         \nTina       8           5          80         \n\"\"\") == '81.00'\n\n=====Notes=====\n> Given the constraints, we can make an assumption that the last column will always be the class column.\n> We can start by considering each column and then move onto the next column.\n> In the first column, the column could be the id or name column.\n> In the second column, the column could be the mark or class column.\n> We can use the ids column to find out the unique ids present in the list.\n> If we have assumed that the last column will always be the class column, we can remove that assumption and start removing columns.\n> We can then iterate through each row and add the corresponding marks to a running total.\n> At the end, we can divide the running total by the number of students and we can print the result.\n> Remember that Python starts indexing at 0 and not at 1 like most programming languages do.\n\n\"\"\"\n\nfrom collections import namedtuple\n\nnum_students = int(input())\nfields_names = input().split()\n\nprint('num_students', num_students)\nprint('fields_names', fields_names)\n\n\nStudent = namedtuple('Student', fields_names)\n\ntotal_marks = 0\nfor i in range(num_students):\n    student_fields = input().split()\n    student_marks = Student(*student_fields)\n    total_marks += int(student_marks.MARKS)\n\nprint('total_marks', total_marks)\naverage_marks = total_marks / num_students\nprint('average_marks', average_marks)\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == \"78.00\"\n\nassert solution(\"2\\nMARKS\\nCLASS\\nNAME\\nID\\n\") == \"67.50\"\n\nassert solution(\"4\\nNAME\\nID\\nCLASS\\nMARKS\\n\") == \"67.50\"\n\n=====Test Case 2=====\nTest Case 2\n\n=====Test Data=====\nThe first line contains an integer N, the total number of students.\nThe second line contains the names of the columns in any order.\nThe next N lines contains the marks, IDs, name and class, under their respective column names.\n\n=====Output=====\nPrint the average marks of the list corrected to 2 decimal places.\n78.00\n=====Explanation=====\nTest Case 2\n=====Outline=====\nUsing the namedtuple function.\nInput\n=====Outline=====\nInput\n1\nID\nMARKS\nCLASS\nNAME\n\n2\nMARKS\nCLASS\nNAME\nID\n\n3\nNAME\nID\nCLASS\nMARKS\nOutput\n=====Outline=====\nOutput\n78.00\n\n=====Outline=====\nInput\n=====Outline=====\nInput\n1\nID\nMARKS\nCLASS\nNAME\n\n2\nMARKS\nCLASS\nNAME\nID\n\n3\nNAME\nID\nCLASS\nMARKS\nOutput\n=====Outline=====\nOutput\n78.00\n\n=====Test Data=====\nTest Data\n\n=====Test Case 1=====\nTest Case 1\n\n=====Test Data=====\nThe first line contains an integer N, the total number of students.\nThe second line contains the names of the columns in any order.\nThe next N lines contains the marks, IDs, name and class, under their respective column names.\n\n=====Outline=====\nInput\n=====Outline=====\nInput\n2\nMARKS\nCLASS\nNAME\nID\n\n3\nNAME\nID\nCLASS\nMARKS\nOutput\n=====Outline=====\nOutput\n67.50\n\n=====Outline=====\nInput\n=====Outline=====\nInput\n2\nID\nMARKS\nCLASS\nNAME\n\n3\nNAME\nID\nCLASS\nMARKS\nOutput\n=====Outline=====\nOutput\n67.50\n\n=====Explanation=====\nTest Case 1\n=====Outline=====\nUsing the namedtuple function.\nInput\n=====Outline=====\nInput\n1\nID\nMARKS\nCLASS\nNAME\n\n2\nMARKS\nCLASS\nNAME\nID\n\n3\nNAME\nID\nCLASS\nMARKS\nOutput\n=====Outline=====\nOutput\n67.50\n=====Explanation=====\nTest Case 1\n=====Outline=====\nUsing the namedtuple function.\nInput\n=====Outline=====\nInput\n1\nID\nMARKS\nCLASS\nNAME\n\n2\nMARKS\nCLASS\nNAME\nID\n\n3\nNAME\nID\nCLASS\nMARKS\nOutput\n=====Outline=====\nOutput\n67.50\n\n=====Test Data=====\nTest Data\n\n=====Test Case 2=====\nTest Case 2\n\n=====Test Data=====\nThe first line contains an integer N, the total number of students.\nThe second line contains the names of the columns in any order.\nThe next N lines contains the marks, IDs, name and class, under their respective column names.\n\n=====Output=====\nPrint the average marks of the list corrected to 2 decimal places.\n78.00\n=====Explanation=====\nTest Case 2\n=====Outline=====\nUsing the namedtuple function.\nInput\n=====Outline=====\nInput\n1\nID\nMARKS\nCLASS\nNAME\n\n2\nMARKS\nCLASS\nNAME\nID\n\n3\nNAME\nID\nCLASS\nMARKS\nOutput\n=====Outline=====\nOutput\n78.00\n\n=====Explanation=====\nTest Case 2\n=====Outline=====\nUsing the namedtuple function.\nInput\n=====Outline=====\nInput\n1\nID\nMARKS\nCLASS\nNAME\n\n2\nMARKS\nCLASS\nNAME\nID\n\n3\nNAME\nID\nCLASS\nMARKS\nOutput\n=====Outline=====\nOutput\n78.00\n\n=====Outline=====\nInput\n=====Outline=====\nInput\n1\nID\nMARKS\nCLASS\nNAME\n\n2\nMARKS\nCLASS\nNAME\nID\n\n3\nNAME\nID\nCLASS\nMARKS\nOutput\n=====Outline=====\nOutput\n78.00\n\n=====Test Data=====\nTest Data\n\n=====Test Case 1=====\nTest Case 1\n\n=====Test Data=====\nThe first line contains an integer N, the total number of students.\nThe second line contains the names of the columns in any order.\nThe next N lines contains the marks, IDs, name and class, under their respective column names.\n\n=====Output=====\nPrint the average marks of the list corrected to 2 decimal places.\n67.50\n=====Explanation=====\nTest Case 1\n=====Outline=====\nUsing the namedtuple function.\nInput\n=====Outline=====\nInput\n1\nID\nMARKS\nCLASS\nNAME\n\n2\nMARKS\nCLASS\nNAME\nID\n\n3\nNAME\nID\nCLASS\nMARKS\nOutput\n=====Outline=====\nOutput\n67.50\n=====Explanation=====\nTest Case 1\n=====Outline=====\nUsing the namedtuple function.\nInput\n=====Outline=====\nInput\n1\nID\nMARKS\nCLASS\nNAME\n\n2\nMARKS\nCLASS\nNAME\nID\n\n3\nNAME\nID\nCLASS\nMARKS\nOutput\n=====Outline=====\nOutput\n67.50\n\n=====Test Data=====\nTest Data\n\n=====Test Case 2=====\nTest Case 2\n\n=====Test Data=====\nThe first line contains an integer N, the total number of students.\nThe second line contains the names of the columns in any order.\nThe next N lines contains the marks, IDs, name and class, under their respective column names.\n\n=====Output=====\nPrint the average marks of the list corrected to 2 decimal places.\n78.00\n=====Explanation=====\nTest Case 2\n=====Outline=====\nUsing the namedtuple function.\nInput\n=====Outline=====\nInput\n1\nID\nMARKS\nCLASS\nNAME\n\n2\nMARKS\nCLASS\nNAME\nID\n\n3\nNAME\nID\nCLASS\nMARK",
        "num_ids_2": 56,
        "num_ids_4": 84
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\nID\\nMARKS\\nCLASS\\nNAME\\n') == '75.00'\nassert solution('2\\nMARKS\\nCLASS\\nNAME\\nID\\n') == '67.50'\n\"\"\"",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\nID\\n12345\\nMARKS\\n67\") == '67.00'\n\n\"\"\"\nfrom collections import namedtuple\n\nnum = int(input())\n\nmy_list = []",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nID\\nMARKS\\nCLASS\\nNAME\\n1\\n2\\n3\\n4\") == \"2.00\"\nassert solution(\"6\\nMARKS\\nCLASS\\nNAME\\n1\\n2\\n3\\n4\\n5\\n6\") == \"3.00\"\n\n=====Sample Test Cases=====\nTest Case #1\nInput\n3\nID\nMARKS\nCLASS\n1\n2\n3\n4\nOutput\n2.00\n\nTest Case #2\nInput\n5\nMARKS\nCLASS\n1\n2\n3\n4\n5\n6\nOutput\n3.00\n\n=====Notes=====\nSince this is a single line of code, after reading the input, a new line is appended automatically.\nThe string readline() retrieves a line from the stream and return a string containing the text.\nHowever, it implicitly calls f.read(size), which reads size characters from the file.\nIf the optional size argument is present and greater than zero, this function reads at most size characters from the file.\nIf size is not provided or -1, the entire file is read and returned as a string.\n\"\"\"\n\n\nimport collections",
        "num_ids_2": 79,
        "num_ids_4": 79
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == \"Weird\"\nassert solution('4') == \"Not Weird\"\nassert solution('20') == \"Weird\"\nassert solution('21') == \"Not Weird\"\nassert solution('22') == \"Not Weird\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == 'Not Weird'\nassert solution('3') == 'Weird'\nassert solution('4') == 'Not Weird'\nassert solution('5') == 'Weird'\nassert solution('6') == 'Not Weird'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(5) == 'Weird'\nassert solution(20) == 'Not Weird'\nassert solution(15) == 'Weird'\nassert solution(23) == 'Weird'\nassert solution(24) == 'Not Weird'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"Not Weird\"\nassert solution(\"14\") == \"Weird\"\nassert solution(\"1\") == \"Weird\"\nassert solution(\"21\") == \"Weird\"\nassert solution(\"19\") == \"Not Weird\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"Not Weird\"\nassert solution(\"4\") == \"Weird\"\nassert solution(\"6\") == \"Weird\"\nassert solution(\"8\") == \"Weird\"\nassert solution(\"10\") == \"Weird\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 'Not Weird'\nassert solution('4') == 'Weird'\nassert solution('6') == 'Not Weird'\nassert solution('8') == 'Weird'\nassert solution('100') == 'Not Weird'\n\n=====Test Case Input=====\n3\n\n=====Test Case Output=====\nWeird\n\n=====Test Case Explanation=====\nn = 3\n\nn is odd and odd numbers are weird, so we print Weird.\n\n=====Solution=====\nThe problem statement has us making decisions about numbers.\nWe'll define some functions to make it easier to make decisions\nIn the solution, we'll define a function is_odd() that checks if a number is odd\nWe'll define another function in_range() that checks if a number is within a given range\nWe'll call is_odd() and in_range() in a chain conditional, to make decisions\nWe'll use is_odd() to decide if a number is odd\nWe'll use in_range() to decide if a number is within a range\nWe'll use is_odd() and in_range() in a chain conditional",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"Weird\"\nassert solution(\"24\") == \"Not Weird\"\nassert solution(\"25\") == \"Weird\"\nassert solution(\"22\") == \"Not Weird\"\nassert solution(\"24\") == \"Weird\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == 'Weird'\nassert solution('24') == 'Not Weird'\nassert solution('101') == 'Weird'\nassert solution('20') == 'Weird'\nassert solution('2') == 'Not Weird'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(2) == \"Not Weird\"\nassert solution(15) == \"Weird\"\nassert solution(22) == \"Weird\"\nassert solution(23) == \"Not Weird\"\nassert solution(1) == \"Weird\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(2) == \"Not Weird\"\nassert solution(4) == \"Weird\"\nassert solution(20) == \"Not Weird\"\nassert solution(25) == \"Not Weird\"\nassert solution(100) == \"Not Weird\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n<feed xml:lang='en'>\n  <title>HackerRank</title>\n  <subtitle lang='en'>Programming challenges</subtitle>\n  <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n  <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30\nassert solution('''\n<feed xml:lang='en'>\n  <title>HackerRank</title>\n  <subtitle lang='en'>Programming challenges</subtitle>\n  <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n  <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30\nassert solution('''\n<feed xml:lang='en'>\n  <title>HackerRank</title>\n  <subtitle lang='en'>Programming challenges</subtitle>\n  <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n  <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30\nassert solution('''\n<feed xml:lang='en'>\n  <title>HackerRank</title>\n  <subtitle lang='en'>Programming challenges</subtitle>\n  <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n  <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30\n'''\n)\n=====Problem Statement=====\nYou are given a valid XML document, and you have to print the maximum level of nesting in it. Take the depth of the root as.\n\nFor example, the following document has a maximum nesting of 2:\n\n<feed xml:lang='en'>\n  <title>HackerRank</title>\n  <subtitle lang='en'>Programming challenges</subtitle>\n  <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n  <updated>2013-12-25T12:00:00</updated>\n</feed>\nSample Input\n\n<feed xml:lang='en'>\n  <title>HackerRank</title>\n  <subtitle lang='en'>Programming challenges</subtitle>\n  <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n  <updated>2013-12-25T12:00:00</updated>\n</feed>\n\nSample Output\n\n2\nExplanation\n\nHere, the root is a feed tag, which has depth of.\nThe tags title, subtitle, link and updated all have a depth of.\n\nThe tags title and subtitle each have a depth of.\nThe tag link has a depth of  since it has no attributes or values.\nThe tag updated has a depth of  since it has the single attribute whose value is.\n\nHence, the maximum depth is  \n\nimport xml.etree.ElementTree as etree\n\nmaxdepth = -1\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == '5'\n\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == '1'\n\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == '3'\n\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == '0'\n\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == '4'",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == '5'\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n</feed>\n\"\"\") == '0'\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == '3'\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Bishal</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == '6'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 10\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 10\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 10\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <question type='hard'>XML 2</question>\n    </entry>\n</feed>\n\"\"\") == 13\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <question type='hard'>XML 2</question>\n    </entry>\n</feed>\n\"\"\") == 13\n",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '<feed xml:lang=\"en\">\\n'\n    '<title>HackerRank</title>\\n'\n    '<subtitle lang=\"en\">Programming challenges</subtitle>\\n'\n    '<link rel=\"alternate\" type=\"text/html\" href=\"http://hackerrank.com/\"/>\\n'\n    '<updated>2013-12-25T12:00:00</updated>\\n'\n    '</feed>'\n) == 25\n=====Test Case=====\nInput Format\n\nThe first line contains the integer, the number of lines in the XML document\n.\nThe next  lines follow containing the XML document.\n\nOutput Format\n\nOutput a single line containing the integer score of the given XML document.\n\nSample Input\n\n6\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nSample Output\n\n25\nExplanation\n\nThe feed and subtitle tag have one attribute each - lang.\nThe title and updated tags have no attributes.\nThe link tag has three attributes - rel, type and href.\nSo, the total score is  +  +  +  +  +.\n\nYou can also use the built-in functions sum(), min() and len().\n\nYou can also solve this problem using the ElementTree module.\n\"\"\"\n\nfrom xml.etree import ElementTree",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 25\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 15\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 20\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 20\n\"\"\") == 20\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 20",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30\n\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30\n\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30\n''')\n",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 25\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 25\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 25\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Raymond Hettinger</author>\n        <question type='hard'>Programming challenges</question>\n        <description type='text'>How to print hello world in python</description>\n        <code lang='python3'><![CDATA[\nimport sys\nprint(\"Hello, World!\")\n]]></code>\n    </entry>\n</feed>''') == 104\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Raymond Hettinger</author>\n        <question type='hard'>Programming challenges</question>\n        <description type='text'>How to print hello world in python</description>\n        <code lang='python3'><![CDATA[\nimport sys\nprint(\"Hello, World!\")\n]]></code>\n    </entry>\n</feed>''') == 104\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 10\n\nassert solution(\"\"\"\n<feed xmlns='http://www.w3.org/2005/Atom' xmlns:app='http://www.w3.org/2007/app' xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'>\n    <title>HackerRank</title>\n    <subtitle>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <author>\n        <name>HackerRank</name>\n    </author>\n    <id>http://www.hackerrank.com/\"/>\n    <entry>\n        <author>\n            <name>HackerRank</name>\n        </author>\n        <title>HackerRank Challenge</title>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </entry>\n</feed>\n\"\"\") == 10\n\nassert solution(\"\"\"\n<feed xmlns='http://www.w3.org/2005/Atom' xmlns:app='http://www.w3.org/2007/app' xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <author>\n        <name>HackerRank</name>\n    </author>\n    <id>http://www.hackerrank.com/</id>\n    <entry>\n        <author>\n            <name>HackerRank</name>\n        </author>\n        <title>HackerRank Challenge</title>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </entry>\n</feed>\n\"\"\") == 10\n\nassert solution(\"\"\"\n<feed xmlns='http://www.w3.org/2005/Atom' xmlns:app='http://www.w3.org/2007/app' xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <author>\n        <name>HackerRank</name>\n    </author>\n    <id>http://www.hackerrank.com/</id>\n    <entry>\n        <author>\n            <name>HackerRank</name>\n        </author>\n        <title>HackerRank Challenge</title>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </entry>\n</feed>\n\"\"\") == 10\n\nassert solution(\"\"\"\n<feed xmlns='http://www.w3.org/2005/Atom' xmlns:app='http://www.w3.org/2007/app' xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <author>\n        <name>HackerRank</name>\n    </author>\n    <id>http://www.hackerrank.com/</id>\n    <entry>\n        <author>\n            <name>HackerRank</name>\n        </author>\n        <title>HackerRank Challenge</title>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </entry>\n</feed>\n\"\"\") == 10",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n    \"\"\") == '5'\nassert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n    </feed>\n    \"\"\") == '0'\nassert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n    </feed>\n    \"\"\") == '3'\nassert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n    </feed>\n    \"\"\") == '3'\nassert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n    </feed>\n    \"\"\") == '3'\n",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 1 1') == 45\n\n=====Test Case=====\nInput 1:\n1 1 1 1\nOutput 1:\n45.00\n\nInput 2:\n1 1 -1 1\nOutput 2:\n-90.00\n\n'''\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 1\") == 45\nassert solution(\"1 1 -1 1\") == 90\nassert solution(\"0 0 -1 1\") == 90\nassert solution(\"0 -1 1 1\") == 90\nassert solution(\"0 -1 0 1\") == 180\n",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''0 0\n0 1\n1 0\n1 1\n''') == '60.00'\n\nassert solution('''0 0\n0 1\n1 0\n2 1\n''') == '90.00'\n\nassert solution('''1 0\n0 1\n2 1\n2 2\n''') == '180.00'\n\nassert solution('''0 0\n1 0\n0 1\n1 1\n''') == '90.00'\n\nassert solution('''0 0\n1 0\n1 1\n0 2\n''') == '60.00'",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1.0 4.0 3.0 2.0\") == 45.0\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\n[output] string\n\n[Python 3] Syntax Tips",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1.0 4.0 2.0 3.0\") == \"45.0\", solution(\"1.0 4.0 2.0 3.0\")\nassert solution(\"1.0 1.0 2.0 3.0\") == \"90.0\", solution(\"1.0 1.0 2.0 3.0\")\nassert solution(\"-1.0 -2.0 -3.0 -4.0\") == \"90.0\", solution(\"-1.0 -2.0 -3.0 -4.0\")\nassert solution(\"1.0 1.0 1.0 1.0\") == \"0.0\", solution(\"1.0 1.0 1.0 1.0\")\nassert solution(\"-1.0 -1.0 -1.0 -1.0\") == \"0.0\", solution(\"-1.0 -1.0 -1.0 -1.0\")\n",
        "num_ids_2": 76,
        "num_ids_4": 160
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1 1\") == \"45.00\"\nassert solution(\"1 2 3 4\") == \"90.00\"\nassert solution(\"1 1 -2 2\") == \"180.00\"\nassert solution(\"-1 -4 2 4\") == \"180.00\"\nassert solution(\"0 1 0 3\") == \"60.00\"\n",
        "num_ids_2": 30,
        "num_ids_4": 63
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 5 2') == '60.00'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1.0 4.0 4.0') == 10.24\nassert solution('2.1 4.0 2.1') == 15.21\nassert solution('5.0 3.0 5.0') == 0.0\nassert solution('0.0 0.0 0.0') == 0.0\n\n==============================================================\nWrite 5 lines of code to test the correctness of solution:\n>>>>>>> 1019c1cd9a1955b7918d9526fcbec2bdc9039439\nassert solution('1.0 4.0 4.0') == 10.24\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4') == 85.0\nassert solution('1 1 1 1') == 0.0\nassert solution('-1 -1 -1 -1') == 180.0\n'''",
        "num_ids_2": 26,
        "num_ids_4": 43
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4') == '60.00'\nassert solution('1 1 1 1') == '0.00'\nassert solution('-1 -1 -1 -1') == '180.00'\nassert solution('1 -1 1 3') == '60.00'\nassert solution('0 0 0 0') == '0.00'\n",
        "num_ids_2": 30,
        "num_ids_4": 65
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\nhello\\nleetcode') == 3\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 abc\") == 6\nassert solution(\"3\") == 0\nassert solution(\"1 a a a\") == 2\nassert solution(\"3\") == 1\nassert solution(\"3 a a bb a a\") == 6\n",
        "num_ids_2": 18,
        "num_ids_4": 37
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 1\nassert solution('hacker book') == 2\nassert solution('aeiou') == 5\nassert solution('hello world') == 0\nassert solution('tracecars') == 4\n",
        "num_ids_2": 18,
        "num_ids_4": 37
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\na\\naa\\naa\\naaa') == 8\nassert solution('2\\nleetcode') == 2\nassert solution('1\\npeekaboo') == 1\nassert solution('2\\no\\no') == 1\nassert solution('2\\ny\\ny') == 2\n",
        "num_ids_2": 32,
        "num_ids_4": 58
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\nhello\\nworld') == 3\nassert solution('2\\naaaa\\nxyz') == 0",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\nmy\nname\nis\nmark\nyour\nname''') == 5\nassert solution('''4\ncodewars\nis\namazing''') == 1\nassert solution('''2\ncodewars\nis\namazing''') == 0\nassert solution('''3\ncodewars\nis\namazing''') == 2\nassert solution('''5\ncodewars\nis\namazing\na''') == 2\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('how are you') == 2\nassert solution('hello world') == 0\nassert solution('hEllo wOrLd') == 3\nassert solution('hElLlo wOrld') == 4\nassert solution('HellO wOrld') == 0\n",
        "num_ids_2": 19,
        "num_ids_4": 47
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"alo\") == \"2\"\nassert solution(\"always\") == \"1\"\nassert solution(\"fly\") == \"0\"\nassert solution(\"fly away\") == \"0\"\nassert solution(\"fly away (but often)\") == \"0\"\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 abc') == 2\nassert solution('2 ab bc') == 1\nassert solution('2 abc bca') == 2\nassert solution('2 abc bcb') == 1\nassert solution('2 abc bcc') == 1\n\nprint(\"All tests passed.\")\n\n=====Test Case=====\nInput:\n4\nhappy\nnew\nyear\nnow\nOutput:\n4\n\n=========Result=========\nOK",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aa bb cc dd ee ff gg\") == \"ddaaccf\"\nassert solution(\"x y z\") == \"xyz\"\nassert solution(\"aeiou\") == \"uaeiou\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\"\"\"\n",
        "num_ids_2": 35,
        "num_ids_4": 88
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('X') == True\nassert solution('XX') == False\nassert solution('CDXXI') == True\nassert solution('CDXCIX') == True\nassert solution('MMMCMXCIX') == True\n",
        "num_ids_2": 16,
        "num_ids_4": 37
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"X\") == False\nassert solution(\"XX\") == True\nassert solution(\"XXI\") == True\nassert solution(\"M\") == True\nassert solution(\"CM\") == True\n",
        "num_ids_2": 16,
        "num_ids_4": 33
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('I') == True\nassert solution('II') == True\nassert solution('III') == True\nassert solution('IV') == True\nassert solution('V') == True\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"XIV\") == True, \"Wrong answer\"\nassert solution(\"XXIV\") == False, \"Wrong answer\"\n\n=====TestCase 1=====\nInput:\nXIV\nOutput:\nTrue\n=====TestCase 2=====\nInput:\nXL\nOutput:\nFalse\n\n\"\"\"\n\nimport re",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"XIV\") == True\nassert solution(\"XXIV\") == False\nassert solution(\"CDXXI\") == True\nassert solution(\"MDCCCXLIX\") == True\nassert solution(\"DCL\") == True\n",
        "num_ids_2": 18,
        "num_ids_4": 39
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(solution.__doc__[0:-1]) == True\n'''\nimport re",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('X') == True\nassert solution('XX') == False\nassert solution('CDXCIX') == True\nassert solution('MMMDCCCLXXXVIII') == True\nassert solution('CXXI') == False\n",
        "num_ids_2": 16,
        "num_ids_4": 41
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('XXI') == True\nassert solution('XXIV') == True\nassert solution('XXX') == False\nassert solution('CDXXI') == False\nassert solution('MMMDCCCLXXXVIII') == True\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n        'X'\n    ) == False, \"Wrong answer: When there is no preceding numeral, the number is not valid\"\nassert solution(\n        'IX'\n    ) == True, \"Wrong answer: X can be placed before I only\"\nassert solution(\n        'IV'\n    ) == True, \"Wrong answer: X can be placed before I only\"\nassert solution(\n        'XLIX'\n    ) == True, \"Wrong answer: X can be placed before L only\"\nassert solution(\n        'CDXXI'\n    ) == True, \"Wrong answer: X can be placed before C only\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('XX') == False\nassert solution('MCMLXX') == True\nassert solution('CDXC') == True\nassert solution('C') == True\nassert solution('MMMCMXCIX') == True\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('+91 99999 6666 +91 99999 9999 +91 99999 9999')\n==\n+91 99999 6666\n+91 99999 9999\n+91 99999 9999\n\"\"\"\n\nimport re",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"07895462130\") == [\n    \"+919784641230\",\n    \"+919784641234\",\n    \"+919784641236\",\n    \"+9197846452\",\n    \"+9197846452\",\n    \"+91978464523\",\n    \"+91978464525\",\n    \"+91978464527\",\n]\n=====Solution=====\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 9 5 6 7 1 2 3 4\") == \"1 2 3 4 5 6 7 8 9\"\nassert solution(\"9 8 7 6 5 4 3 2 1\") == \"1 2 3 4 5 6 7 8 9\"\nassert solution(\"9 9 9 9 9 9 9 9 9 9\") == \"9 9 9 9 9 9 9 9 9 9\"\nassert solution(\"9 9 8 7 6 5 4 3 2 1\") == \"1 2 3 4 5 6 7 8 9\"\nassert solution(\"9 9 9 9 9 9 9 9 9 9\") == \"9 9 9 9 9 9 9 9 9 9\"\n",
        "num_ids_2": 52,
        "num_ids_4": 107
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('+91 99999 11111') == '+91 99999 11111'\nassert solution('91 99999 11111') == '+91 99999 11111'\nassert solution('91999 11111') == '+91 91999 11111'\nassert solution('919999 11111') == '+91 99999 11111'\nassert solution('91999 11111') == '+91 91999 11111'\n",
        "num_ids_2": 39,
        "num_ids_4": 76
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('+91 99999 4444') == '+91 99999 4444'\nassert solution('99999 1234 5678') == '+91 99999 1234 5678'\nassert solution('9999 4444 5678') == '+91 9999 4444 5678'\nassert solution('94444 6666') == '+91 9444 4444 6666'\nassert solution('9') == '+91 9'\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('91 2 3 1') == '1 2 3 91\\n','solution(91 2 3 1) == 91 2 3 1'\nassert solution('2 3 1') == '1 2 3\\n','solution(2 3 1) == 1 2 3'\nassert solution('2 3 1') == '1 2 3\\n','solution(2 3 1) == 1 2 3'\nassert solution('2 3 1') == '1 2 3\\n','solution(2 3 1) == 1 2 3'\nassert solution('2 3 1') == '1 2 3\\n','solution(2 3 1) == 1 2 3'\n",
        "num_ids_2": 60,
        "num_ids_4": 116
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"91 634 5698 9123 4567\") == \"\"\"+91 634 5698\n9123 4567\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"788347 42 546391 471\") == \"788347+421 546391+471\"\n=====Test Cases=====\nInput:\n7\n078 347 42 546 391 471\n123 456 78 91011\n927 678 54 32 1456\n8765 4321 51342 1543\n9871 12 1231 4321\n56 34 56 65 14\n8766 56 12 12 3\n56 34 56 65 14\n\nOutput:\n078 347 42 546 391 471\n123 456 78 91011\n927 678 54 32 1456\n8765 4321 51342 1543\n9871 12 1231 4321\n56 34 56 65 14\n56 34 56 65 14\n\"\"\"\n\n\"\"\"\nsolution:\nimport re",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('+91818101234 567890') == '+91 8181012345 567890'\n=====Sample Input=====\n3\n07895462130\n919875641230\n9195969878\n\n=====Sample Output=====\n+91 78954 62130\n+91 91959 69878\n+91 98756 41230\n\n=====Notes=====\n1. This problem is related to problem Truncate Sentence.\n2. This problem is related to problem Sort Colors.\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 9805 5642 3801\") == \"\"\"+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 3801\n+9805 5642 38",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(['alpha', 'beta', 'gamma', 'delta', 'epsilon'], [[20, 30, 40], [30, 50, 70], [10, 20, 30]]) == '30.00','solution([\"alpha\", \"beta\", \"gamma\", \"delta\", \"epsilon\"], [[20, 30, 40], [30, 50, 70], [10, 20, 30]]) == 30.00'\nprint(solution(['alpha', 'beta', 'gamma', 'delta', 'epsilon'], [[20, 30, 40], [30, 50, 70], [10, 20, 30]]))\n=====\n",
        "num_ids_2": 101,
        "num_ids_4": 101
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\nHarsh 25 26.5 28\\nAnurag 26 28 30\\nHarsh\") == \"26.50\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\na:1 b:2 c:3 d:4 e:5\\nb:1 1 2 3 4 5\\n\" ) == \"The average of the marks obtained by the particular student correct to 2 decimal places. a:-2.00 b:-1.67\"\n=======\n",
        "num_ids_2": 63,
        "num_ids_4": 63
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    {\n        'alpha': [20,30,40],\n        'beta': [30,50,70],\n    }\n) == '50.00', \"first\"\nassert solution(\n    {\n        'alpha': [20,30,40],\n        'beta': [30,50,70],\n        'gamma': [10,40,80],\n    }\n) == '60.00', \"second\"\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '5\\n'\n    'alpha mark 1\\n'\n    'alpha mark 2\\n'\n    'alpha mark 3\\n'\n    'beta mark 1\\n'\n    'beta mark 2\\n'\n    'beta mark 3\\n'\n    'beta mark 1\\n') == '85.00'\nassert solution(\n    '5\\n'\n    'alpha mark 1\\n'\n    'alpha mark 2\\n'\n    'alpha mark 3\\n'\n    'beta mark 1\\n'\n    'beta mark 2\\n'\n    'beta mark 3\\n'\n    'beta mark 1\\n') == '85.00'\n\nProblem Statement\n=====Problem Statement=====\nThe provided code stub reads two integers,  and, from STDIN.\n\nAdd logic to print two lines. The first line should contain the result of integer division,  //. The second line should contain the result of float division,  /.\n\nNo rounding or formatting is necessary.\n\nExample\nSample Input\n\n3\n2\n5\nSample Output\n\n1\n1.33333333333\n\n=====Problem Statement=====\nThe provided code stub reads in a dictionary containing key/value pairs of name:[marks] for a list of students. Print the average of the marks array for the student name provided, showing 2 places after the decimal.\n\nFrom: https://www.hackerrank.com/challenges/python-lists/forum/suggested-solutions/code/642463f1d4e6\n\n=====Example=====\nmarks key:value pairs are\n'alpha': [20, 30, 40]\n'beta': [30, 50, 70]\nquery_name = 'beta'\nThe query_name is 'beta'. beta's average score is (30+50+70)/3 = 50.00\n\n=====Input Format=====\nThe first line contains the integer, the number of students' records. The next  lines contain the names and marks obtained by a student, each value separated by a space. The final line contains query_name, the name of a student to query.\n\n=====Constraints=====\n2\u2264n\u226410\n0\u2264marks[i]\u2264100\nlength of marks arrays = 3\n\n=====Output Format=====\nPrint one line: The average of the marks obtained by the particular student correct to 2 decimal places.\n\n>>>>>>> bba8c4a7d0b531ea147f8b3f82f5b70bb34f844\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nHelen 67 68 69\\nMartin 70 72 73\\n\") == \"69.00\"\nprint(\"Expected: 69.00\")\nassert solution(\"2\\nHsin 44\\nHan 78\\n\") == \"78.00\"\nprint(\"Expected: 78.00\")\n\n=====Sample Test Cases=====\nTest.assert_equals(solution(\"4\\nHelen 67 68 69\\nMartin 70 72 73\\n\"), \"69.00\")\nTest.assert_equals(solution(\"2\\nHsin 44\\nHan 78\\n\"), \"78.00\")\n'''",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\nJeff\\n2.5 4.5 4\\n3\\n3\\n3\\n4\\n2\\n4\\n3\\n4\\n5\\n2.0\\n3.0\\n4.0\\n5.0\\n6\\n1.0') == '3.0'\nassert solution('5\\nJeff\\n2.5 4.5 4\\n3\\n3\\n3\\n4\\n2\\n4\\n3\\n4\\n5\\n2.0\\n3.0\\n4.0\\n5.0\\n6\\n1.0') == '3.0'\nassert solution('5\\nJeff\\n2.5 4.5 4\\n3\\n3\\n3\\n4\\n2\\n4\\n3\\n4\\n5\\n2.0\\n3.0\\n4.0\\n5.0\\n6\\n1.0') == '3.0'\nassert solution('5\\nJeff\\n2.5 4.5 4\\n3\\n3\\n3\\n4\\n2\\n4\\n3\\n4\\n5\\n2.0\\n3.0\\n4.0\\n5.0\\n6\\n1.0') == '3.0'\nassert solution('5\\nJeff\\n2.5 4.5 4\\n3\\n3\\n3\\n4\\n2\\n4\\n3\\n4\\n5\\n2.0\\n3.0\\n4.0\\n5.0\\n6\\n1.0') == '3.0'\n\ninput:\n5\nJeff\n2.5 4.5 4\n3\n3\n3\n4\n2\n4\n3\n4\n5\n2.0\n3.0\n4.0\n5.0\n6\n1.0\noutput:\n3.0\n\ninput:\n5\nJeff\n2.5 4.5 4\n3\n3\n3\n4\n2\n4\n3\n4\n5\n2.0\n3.0\n4.0\n5.0\n6\n1.0\noutput:\n3.0\n\"\"\"\n",
        "num_ids_2": 158,
        "num_ids_4": 316
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\nKrishna 67 68 69\\nArjun 70 98 63\\nMalika 52 56 60\\nMalika') == '56.00'\nassert solution('2\\nHarsh 25 26.5 28\\nAnurag 26 28 30') == '26.50'\nassert solution('1\\nPrashad\\n26 28 30') == '26.50'\n====== Tested with code in Python and PyPy3.7\n\n=====\n",
        "num_ids_2": 67,
        "num_ids_4": 89
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nArjun 70 68 67\\nHarman 26 26 20\\nMalika 52 60 51\\nSuraj 60 45 32\\nMalika\") == \"56.00\"\n\"\"\"\n\nimport math",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\nDilbert 50 60 100 40 20\\nWally 70 35 80\\nShirley 50 60 100\\nDirk 50 90 100\\nElaine 47 68 88\\n\") == \"56.00\"\nassert solution(\"4\\nBart 80\\nLisa 90\\nAdam 80\\nAtli 80\\n\") == \"80.00\"\nassert solution(\"4\\nGroucho 70 95\\nHarpo 66 89\\nIra 66 89\\nChico 70 94\\n\") == \"75.00\"\n=====Test Case 1=====\nTest 1\nInput\n6\nDilbert 50 60 100 40 20\nWally 70 35 80\nShirley 50 60 100\nDirk 50 90 100\nElaine 47 68 88\n\nOutput\n56.00\n\n=====Test Case 2=====\nTest 2\nInput\n4\nBart 80\nLisa 90\nAdam 80\nAtli 80\n\nOutput\n80.00\n=====Test Case 3=====\nTest 3\nInput\n4\nGroucho 70 95\nHarpo 66 89\nIra 66 89\nChico 70 94\n\nOutput\n75.00\n'''",
        "num_ids_2": 85,
        "num_ids_4": 125
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Henry Davids 12 M') == 'Mr. Henry Davids'\nassert solution('Mary George 12 F') == 'Ms. Mary George'\n=====END=====\nYou are given a string str. You need to find the first word consisting of maximum distinct letters.\n\nExamples:\n\nInput:  str = \"Geeks for Geeks\"\nOutput: \"Geeks\"\n\nInput:  str = \"I love Python\"\nOutput: \"Python\"\n\nInput:  str = \"a bb aaab aa ac\"\nOutput: \"a\"\n\nInput:  str = \"cccccc\"\nOutput: \"c\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Henry Davids Mary George\") == '''Mr. Henry Davids\nMs. Mary George'''\nassert solution(\"\") == ''\nassert solution(\"Krishna Murthy\") == '''Ms. Krishna Murthy'''\n=====Test 1=====\ninput:\n\n3\nArun John\nArun K John\nArun Murthy\noutput:\n\nMs. Arun John\nMr. Arun K John\nMs. Arun Murthy\n\n=====Test 2=====\ninput:\n\n4\nArun John\nArun K John\nArun Murthy\nMary George\noutput:\n\nMs. Arun John\nMr. Arun K John\nMs. Arun Murthy\nMs. Mary George\n\n=====Test 3=====\ninput:\n\n2\nArun John\nArun K John\noutput:\n\nMs. Arun John\nMr. Arun K John\n\n=====Test 4=====\ninput:\n\n2\nArun John\nArun K John\noutput:\n\nMs. Arun John\nMr. Arun K John\n\n=====Test 5=====\ninput:\n\n1\nJohn John\noutput:\n\nMs. John John\n'''\n\nimport operator",
        "num_ids_2": 25,
        "num_ids_4": 45
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Foo Fae\") == \"Ms. Foo\\nMr. Fae\"\n=====Test Case 0=====\n>>> solution(\"Foo Fae\")\nMs. Foo\nMr. Fae\n\n=====Test Case 1=====\n>>> solution(\"Foo Bar\")\nMr. Foo\nMs. Bar\n\n=====Test Case 2=====\n>>> solution(\"Foo Bar Baz\")\nMr. Foo\nMs. Bar\nMs. Baz\nMr. Baz\n\n=====Test Case 3=====\n>>> solution(\"Foo Bar Baz Qux\")\nMr. Foo\nMs. Bar\nMs. Baz\nMr. Qux\n\n=====Test Case 4=====\n>>> solution(\"Foo Fae Bar\")\nMs. Foo\nMr. Fae\nMs. Bar\nMr. Bar\n\n=====Test Case 5=====\n>>> solution(\"Foo Fae Bar Qux\")\nMs. Foo\nMr. Fae\nMs. Bar\nMr. Qux\nMr. Bar\n\n=====Test Case 6=====\n>>> solution(\"Foo Fae Baz Qux\")\nMs. Foo\nMr. Fae\nMs. Baz\nMr. Qux\nMr. Bar\n\n=====Test Case 7=====\n>>> solution(\"Foo Fae Baz Qux Mno Pqr\")\nMr. Foo\nMs. Fae\nMs. Baz\nMr. Qux\nMr. Mno\nMr. Pqr\nMr. Bar\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('Mike Thomson 20 M') == 'Mr. Mike Thomson'\nassert solution('Dwight Schrute 42 M') == 'Mr. Dwight Schrute'\nassert solution('Pam Beasley 16 F') == 'Ms. Pam Beasley'\nassert solution('Michael Scott 65 M') == 'Mr. Michael Scott'\nassert solution('William Wallace 30 M') == 'Mr. William Wallace'\n",
        "num_ids_2": 36,
        "num_ids_4": 71
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\nJohn\\n40\\nM\") == 'Mr. John\\n'\nassert solution(\"1\\nJohn\\n30\\nF\") == 'Ms. John\\n'\nassert solution(\"2\\nMike\\n23\\nM\") == 'Mr. Mike\\n'\nassert solution(\"2\\nMike\\n23\\nF\") == 'Ms. Mike\\n'\nassert solution(\"2\\nJohn\\n23\\nM\") == 'Mr. John\\n'\n",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\nMike Thomson 20 M\nRobert Bustle 32 M\nAndria Bustle 30 F\nChris Walken 17 M''') == '''Mr. Mike Thomson\nMs. Andria Bustle\nMr. Chris Walken\nMs. Robert Bustle'''\n\nassert solution('''5\nGeorge Martin 35 M\nJhonny Bravo 30 M\nBrett Favre 29 F\nJhonny Bravo 30 M\nBrett Favre 29 F''') == '''Mr. George Martin\nMs. Jhonny Bravo\nMr. Brett Favre\nMs. Jhonny Bravo\nMs. Brett Favre'''\n\nassert solution('''2\nHulk Hogan 32 M\nCaptain America 30 M\nBlack Widow 29 F\nHulk Hogan 32 M\nCaptain America 30 M''') == '''Mr. Hulk Hogan\nMs. Black Widow\nMr. Captain America\nMs. Hulk Hogan\nMs. Captain America'''\n\nassert solution('''2\nBlack Widow 29 F\nHulk Hogan 32 M\nCaptain America 30 M\nBlack Widow 29 F\nHulk Hogan 32 M''') == '''Ms. Black Widow\nMr. Hulk Hogan\nMs. Captain America\nMs. Black Widow\nMs. Hulk Hogan'''\n\nassert solution('''2\nBlack Widow 29 F\nHulk Hogan 32 M\nBlack Widow 29 F\nHulk Hogan 32 M''') == '''Ms. Black Widow\nMs. Black Widow\nMr. Hulk Hogan\nMr. Hulk Hogan'''",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('Jhon Doe\\nAlexus green\\nCathryn White\\n') == 'Mr. John Doe\\nMs. Alexus green\\nMrs. Cathryn White'\nassert solution('John Doe\\nAlexus green\\nCathryn White\\n') == 'Mr. John Doe\\nMs. Alexus green\\nMrs. Cathryn White'\nassert solution('Jhon Doe\\nAlexus green\\n') == 'Mr. John Doe\\nMs. Alexus green'\nassert solution('Jhon Doe\\nAlexus green') == 'Mr. John Doe\\nMs. Alexus green'\nassert solution('Jhon Doe') == 'Mr. John Doe'\n\n\"\"\"",
        "num_ids_2": 81,
        "num_ids_4": 137
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\nMike Thomson 20 M\\nRobert Bustle 32 M') == 'Mr. Mike Thomson\\nMr. Robert Bustle'\n=====Test Cases=====\nInput:\n4\nMike Thomson 20 M\nRobert Bustle 32 M\nAndria Bustle 30 F\nKrystyna Davids 26 F\n\nOutput:\nMr. Mike Thomson\nMr. Robert Bustle\nMs. Andria Bustle\nMr. Krystyna Davids\n\nInput:\n3\nJoe Thomson 20 M\nMaria George 31 F\nWilliam Thomas 29 M\n\nOutput:\nMr. Joe Thomson\nMr. William Thomas\nMs. Maria George\n\nInput:\n2\nJoe Thomson 20 M\nMaria George 31 F\n\nOutput:\nMr. Joe Thomson\nMr. Maria George\n\"\"\"\n\nimport collections",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Jane Doe 12 M\") == \"Ms. Jane Doe\"\n\nassert solution(\"Aaron Copland 30 M\") == \"Mr. Aaron Copland\"\n\nassert solution(\"John Smith 30 M\") == \"Mr. John Smith\"\n\nassert solution(\"Jane Doe 30 F\") == \"Ms. Jane Doe\"\n\nassert solution(\"Aaron Copland 30 M\") == \"Mr. Aaron Copland\"",
        "num_ids_2": 34,
        "num_ids_4": 66
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\nGeorge\\n25\\nM\") == \"Mr. George\\n\"\nassert solution(\"1\\nGeorge\\n20\\nM\") == \"Mr. George\\n\"\nassert solution(\"2\\nGeorge\\n20\\nM\\n25\\nF\") == \"Mr. George\\nMs. Mary George\\n\"\nassert solution(\"1\\nGeorge\\n20\\nM\") == \"Mr. George\\n\"\nassert solution(\"2\\nGeorge\\n20\\nM\\n25\\nF\") == \"Mr. George\\nMs. Mary George\\n\"\n",
        "num_ids_2": 46,
        "num_ids_4": 104
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n1\\n2\\n3\\n3') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2]]\n\nassert solution('1\\n1\\n2\\n2') == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 2], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2]]\n\nassert solution('1\\n2\\n3\\n4\\n4') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 1, 3], [0, 2, 0], [0, 2, 1], [0, 2, 2], [0, 2, 3], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 2, 0], [1, 2, 1], [1, 2, 2], [1, 2, 3]]\n\nassert solution('1\\n2\\n3\\n5\\n4') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 0], [0, 2, 1], [0, 2, 2], [0, 2, 3], [0, 2, 4], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 0, 4], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 1, 4], [1, 2, 0], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 4]]\n\nassert solution('1\\n2\\n3\\n6\\n5') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 1, 5], [0, 1, 6], [0, 2, 0], [0, 2, 1], [0, 2, 2], [0, 2, 3], [0, 2, 4], [0, 2, 5], [0, 2, 6], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 0, 4], [1, 0, 5], [1, 0, 6], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 1, 4], [1, 1, 5], [1, 1, 6], [1, 2, 0], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 2, 6]]",
        "num_ids_2": 161,
        "num_ids_4": 577
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3,2,1,1) == [[0,0,0],[1,0,0],[0,0,1],[1,1,0],[0,1,1],[1,0,1],[1,1,1]]\n\nx, y, z, n = int(stdin.readline()), int(stdin.readline()), int(stdin.readline()), int(stdin.readline())\nprint([[i,j,k] for i in range(x+1) for j in range(y+1) for k in range(z+1) if (i+j+k)!= n])\n\n=====Output=====\n[[0, 0, 0], [1, 0, 0], [0, 0, 1], [1, 1, 0], [0, 1, 1], [1, 0, 1], [1, 1, 1]]\n\n=====Notes=====\nThis solution can be improved by using combinations.\nCombinations can be generated with:\n>>> from itertools import combinations\n>>> list(combinations(a_list,2))\n[(0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1), (4, 0), (4, 1), (5, 0), (5, 1)]\nCombinations can also be generated with:\n>>> from itertools import permutations\n>>> list(permutations(a_list))\n[(0, 1, 2), (0, 2, 1), (1, 0, 2), (1, 2, 0), (2, 0, 1), (2, 1, 0)]\n\nThe solution to this problem can be broken into two parts.\n\nPart 1: print all possible permutations.\n\nPart 2: filter out permutations whose sum is not equal to n.\n\n=====Comments=====\nThis solution is adapted from https://www.geeksforgeeks.org/find-the-list-of-all-the-permutation-possible-from-a-list-of-n-numbers/\n\nI thought this was a neat way to break the problem down into a series of simple steps.\n\nI also found this solution helpful, I see that the indexing of the list is such that the permutations are done in lexographic order.\n\n=====Challenge=====\nCan you write the solution so that the solution is iterative instead of recursive?\n\n=====Solution (Recursive)=====\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 2 1') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\nassert solution('1 1 1 0') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2]]\n=====Output Format=====\nPrint the list in lexicographic increasing order.\n\n2 2 2\n\"\"\"",
        "num_ids_2": 167,
        "num_ids_4": 167
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 2 3\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\nassert solution(\"1 1 1 1\") == [[0, 0, 0]]\nassert solution(\"1 2 1 1\") == [[0, 0, 0], [1, 0, 0], [1, 1, 0]]\nassert solution(\"1 1 3 2\") == [[0, 0, 0], [0, 1, 0], [0, 1, 2], [1, 0, 0], [1, 1, 2]]\n\n=====Output Format=====\nPrint the list of lists in lexicographic increasing order, each on a separate line.\n\n=====Sample Test Cases=====\nInput\n\n1\n1\n1\n2\n\nOutput\n\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\n\nInput\n\n1\n1\n1\n1\n\nOutput\n\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\n\nInput\n\n1\n2\n1\n3\n\nOutput\n\n[[0, 0, 0], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\n\nInput\n\n1\n2\n2\n3\n\nOutput\n\n[[0, 0, 0], [0, 1, 0], [0, 1, 1], [0, 2, 0], [1, 0, 0], [1, 1, 0], [1, 1, 1], [1, 2, 0], [2, 0, 0], [2, 1, 0], [2, 1, 1], [2, 2, 0], [2, 2, 1]]\n\"\"\"\n",
        "num_ids_2": 69,
        "num_ids_4": 145
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n1\\n2\\n3\") == \"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\"\nassert solution(\"1\\n2\\n3\\n4\") == \"[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [0, 2, 0], [0, 2, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [1, 2, 0], [1, 2, 1]]\"\nassert solution(\"1\\n2\\n3\\n4\\n5\") == \"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 0], [0, 2, 1], [0, 2, 2], [0, 2, 3], [0, 2, 4], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 0, 4], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 1, 4], [1, 2, 0], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 4], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 0, 3], [2, 0, 4], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 1, 4], [2, 2, 0], [2, 2, 1], [2, 2, 2], [2, 2, 3], [2, 2, 4], [3, 0, 0], [3, 0, 1], [3, 0, 2], [3, 0, 3], [3, 0, 4], [3, 1, 0], [3, 1, 1], [3, 1, 2], [3, 1, 3], [3, 1, 4], [3, 2, 0], [3, 2, 1], [3, 2, 2], [3, 2, 3], [3, 2, 4], [4, 0, 0], [4, 0, 1], [4, 0, 2], [4, 0, 3], [4, 0, 4], [4, 1, 0], [4, 1, 1], [4, 1, 2], [4, 1, 3], [4, 1, 4], [4, 2, 0], [4, 2, 1], [4, 2, 2], [4, 2, 3], [4, 2, 4], [5, 0, 0], [5, 0, 1], [5, 0, 2], [5, 0, 3], [5, 0, 4], [5, 1, 0], [5, 1, 1], [5, 1, 2], [5, 1, 3], [5, 1, 4], [5, 2, 0], [5, 2, 1], [5, 2, 2], [5, 2, 3], [5, 2, 4]]\"\n=====Output=====\nPrint the list in lexographic increasing order.\nPrint an array of the elements that do not sum to n = 3.\n\n=====Sample Test Case=====\nINPUT\n1\n1\n2\n3\nOUTPUT\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]\n\n'''",
        "num_ids_2": 204,
        "num_ids_4": 855
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 4 3\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [3, 0, 0], [3, 0, 1], [3, 0, 2], [3, 1, 0], [3, 1, 1], [3, 1, 2], [3, 2, 0], [3, 2, 1], [3, 2, 2]]\n\"\"\"",
        "num_ids_2": 199,
        "num_ids_4": 199
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 2 1') == [[0,0,0],[0,0,1],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,1]]\nassert solution('1 1 1 0') == [[0,0,0],[0,0,1],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,1]]\nassert solution('2 2 2 2') == [[0,0,0],[0,0,1],[0,1,0],[0,1,1],[0,2,0],[0,2,1],[0,2,2],[1,0,0],[1,0,1],[1,1,0],[1,1,1],[1,2,0],[1,2,1],[1,2,2]]\nassert solution('2 2 3') == [[0,0,0],[0,0,1],[0,1,0],[0,1,1],[0,2,0],[0,2,1],[1,0,0],[1,0,1],[1,1,0],[1,1,1],[1,2,0],[1,2,1]]\n\n=====Output=====\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [1, 2, 0], [1, 2, 1], [1, 2, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [1, 2, 0], [1, 2, 1], [1, 2, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [0, 2, 0], [0, 2, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [1, 2, 0], [1, 2, 1], [1, 2, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [0, 2, 0], [0, 2, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [1, 2, 0], [1, 2, 1], [1, 2, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [0, 2, 0], [0, 2, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [1, 2, 0], [1, 2, 1], [1, 2, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [0, 2, 0], [0, 2, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [1, 2, 0], [1, 2, 1], [1, 2, 2]]\n\"\"\"\n",
        "num_ids_2": 118,
        "num_ids_4": 295
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2\\n3\\n4') == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 2], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]], 'Solution wrong'\nassert solution('4\\n2\\n3\\n5') == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]], 'Solution wrong'\nprint('Tests passed')\n=====OUTPUT=====\nTests passed\n\n=====Solution=====\n\nx = int(input())\ny = int(input())\nz = int(input())\nn = int(input())\nprint([[a,b,c] for a in range(x+1) for b in range(y+1) for c in range(z+1) if a+b+c!= n])\n\n>>>>>>> d3d928d6c9a41b4bb0c1b93a78d64a38f82d838a\n",
        "num_ids_2": 343,
        "num_ids_4": 343
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 3\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\nassert solution(\"2 2 2 6\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\nassert solution(\"1 2 3 4\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 0], [0, 2, 1], [0, 2, 2], [0, 2, 3], [0, 2, 4], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 0, 4], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 1, 4], [1, 2, 0], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 4], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 0, 3], [2, 0, 4], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 1, 4], [2, 2, 0], [2, 2, 1], [2, 2, 2], [2, 2, 3], [2, 2, 4]]\nprint(solution(\"1 1 1 3\"))\nprint(solution(\"2 2 2 6\"))\nprint(solution(\"1 2 3 4\"))\n>>>>>>> 0650ea24129892fb026a27b37028b500fb9383fa\n",
        "num_ids_2": 146,
        "num_ids_4": 471
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n1\\n2\\n3\") == \"0 0 0\\n0 0 1\\n0 1 2\\n0 2 3\\n1 0 0\\n1 0 1\\n1 1 2\\n1 2 3\\n2 0 0\\n2 0 1\\n2 1 2\\n2 2 3\"\n=======\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 -2 2') == '4 -2 2'\nassert solution('2 1 1') == '2 1 1'\nassert solution('0 0 0') == '0.00+0.00i'\nassert solution('4 0 2') == '4.00+0.00i'\nassert solution('2+2i') == '2+2i'\n",
        "num_ids_2": 30,
        "num_ids_4": 68
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1') == '0 + 1i\\n1 + 0i\\n0 + 1i\\n1 + 0i\\n1 + 1i\\n0 + 1i\\n0 + 1i\\n1 + 1i'\nassert solution('1 2') == '1 + 2i\\n3 + 4i\\n5 + 6i\\n7 + 8i\\n9 + 10i\\n11 + 12i\\n13 + 14i\\n15 + 16i'\nassert solution('1.1 2.1') == '0.0 + 1.1i\\n1.1 + 0.1i\\n0.0 + 1.1i\\n1.1 + 0.1i\\n1.1 + 1.1i\\n0.0 + 1.1i\\n0.0 + 1.1i\\n1.1 + 1.1i'\nassert solution('0 1') == '0.00 + 1.00i\\n0.00 + 1.00i\\n0.00 + 1.00i\\n0.00 + 1.00i\\n0.00 + 1.00i\\n0.00 + 1.00i\\n0.00 + 1.00i'\nassert solution('0.0 1.1') == '0.00 + 1.10i\\n0.00 + 1.10i\\n0.00 + 1.10i\\n0.00 + 1.10i\\n0.00 + 1.10i\\n0.00 + 1.10i\\n0.00 + 1.10i'\n",
        "num_ids_2": 112,
        "num_ids_4": 282
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2') == '3.00+4.00i'\nassert solution('1+1i') == '0.00+2.00i'\nassert solution('1+-1i') == '0.00-2.00i'\n\n=====Test Data=====\n1+-1i\n1+2i\n1+0.10i\n1+1i\n1+1i\n1+1i\n1+1i\n1+1i\n-1+2i\n1+-1i\n\n>>>>>>> ff70fad7c86ce959baf1e0b2ff0b00aa8aad7687\n",
        "num_ids_2": 38,
        "num_ids_4": 59
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"3 4\"\nassert solution(\"2 -1\") == \"3 0\"\nassert solution(\"4 6\") == \"4 8\"\nassert solution(\"1 3i\") == \"2 2i\"\nassert solution(\"2 -1i\") == \"3 -2i\"\n\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 51
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5') == '9.00+5.00i'\nassert solution('0 5') == '-5.00+5.00i'\nassert solution('0 0') == '0.00+0.00i'",
        "num_ids_2": 37,
        "num_ids_4": 55
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"3.00+1.00i\"\nassert solution(\"-1 2\") == \"-3.00+2.00i\"\nassert solution(\"0 1\") == \"0.00+1.00i\"\nassert solution(\"-0 1\") == \"-0.00+1.00i\"\nassert solution(\"0 0\") == \"0.00+0.00i\"\n=====END=====\n'''\n\nimport math",
        "num_ids_2": 37,
        "num_ids_4": 74
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2') == '3 4'\n=====Sample Test Case=====\nInput\n1 2\nOutput\n3 4\n'''\nimport sys\nimport math\n\nfor line in sys.stdin:\n    line = line.strip()\n    a, b = line.split(' ')\n    a, b = float(a), float(b)\n    print(round(a+b, 2), round(a-b, 2), round(a*b, 2), round(a/b, 2), round(math.sqrt(a**2+b**2), 2), round(math.sqrt(a**2+b**2), 2), sep='\\n')",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1.00+1.00i\\n1.00-1.00i\\n1.00+0.00i\\n1.00-0.00i\\n1.00+0.00i\\n0.00+1.00i\\n0.00-1.00i'\nassert solution('0 5') == '0.00+5.00i\\n0.00+0.00i\\n0.00+0.00i\\n0.00-0.00i\\n0.00-5.00i\\n0.00-0.00i'\nassert solution('1 1 1 1 1 1') == '1.00+1.00i\\n1.00-1.00i\\n1.00+1.00i\\n1.00-1.00i\\n1.00+1.00i\\n1.00-1.00i\\n1.00+1.00i\\n1.00-1.00i\\n1.00+1.00i\\n1.00-1.00i'\nassert solution('0 0') == '0.00+0.00i\\n0.00+0.00i\\n0.00+0.00i\\n0.00-0.00i\\n0.00-0.00i'\n\n=====Note=====\nComplex numbers are of the form a+bj, where a is the real part and b is the imaginary part.\n\"\"\"",
        "num_ids_2": 146,
        "num_ids_4": 316
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"3.00+5.00i\"\nassert solution(\"0 5i\") == \"0.00-5.00i\"\nassert solution(\"2 2i\") == \"4.00+0.00i\"\nassert solution(\"0 0i\") == \"0.00+0.00i\"\nassert solution(\"2+0i\") == \"2.00+0.00i\"\n\n=====Test Input=====\n1 1\n0 5i\n2 2i\n0 0i\n2+0i\n0 5i\n0 0i\n1 1\n1 0i\n0 0i\n-1 -1i\n0 -1i\n0 -1i\n-2 -1i\n0 -1i\n2 -1i\n2 -1i\n2 -1i\n-2 -1i\n2i 2\n0 5i\n2i 2\n0 0i\n-2 -1i\n2i 2\n0 -1i\n2 -1i\n2 -1i\n-2 -1i\n0 0i\n0 0i\n0 5i\n0 0i\n-2 -1i\n0 -1i\n2 -1i\n0 0i\n-2 -1i\n0 -1i\n2 -1i\n0 -1i\n2 -1i\n-2 -1i\n1 1\n0 0i\n2i 2\n0 0i\n-2 -1i\n2i 2\n0 0i\n-2 -1i\n2i 2\n0 0i\n-2 -1i\n2i 2\n0 0i\n-2 -1i\n0 0i\n0 0i\n0 0i\n-2 -1i\n2i 2\n2 -1i\n2i 2\n2 -1i\n2i 2\n0 5i\n0 0i\n-2 -1i\n2i 2\n0 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n-2 -1i\n0 5i\n0 0i\n2i 2\n2i 2\n0 5i\n-2 -1i\n2i 2\n-2 -1i\n2i 2\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n0 0i\n0 0i\n2i 2\n2i 2\n0 0i\n-2 -1i\n2i 2\n2 -1i\n2i 2\n-2 -1i\n2i 2\n0 0i\n0 0i\n2i 2\n-2 -1i\n2i 2\n-2 -1i\n2i 2\n0 0i\n2i 2\n-2 -1i\n0 0i\n2i 2\n2 -1i\n0 0i\n0 0i\n0 0i\n-2 -1i\n2i 2\n0 0i\n2i 2\n2 -1i\n2i 2\n0 0i\n-2 -1i\n2i 2\n2 -1i\n2i 2\n0 0i\n0 0i\n0 0i\n0 0i\n-2 -1i\n2i 2\n-2 -1i\n2i 2\n0 0i\n2i 2\n0 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n2 -1i\n0 0i\n2 0i\n-2 -1i\n2 0i\n2 -1i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n2 0i\n-2 -1i\n2 0i\n0 0i\n-2 -1i\n0 0i\n2 0i\n0 0i\n0 0i\n0 0i\n2 0i\n0 0i\n-2 -1i\n0 0i\n2 0i\n2 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n2 0i\n0 0i\n0 0i\n0 0i\n0 0i\n-2 -1i\n0 0i\n0 0i\n0 0i\n-2 -1i\n0 0i\n2 0i\n2 0i\n0 0i\n2 0i\n0 0i\n-2 -1i\n2 0i\n0 0i\n0 0i\n0 0i\n0 0i\n-2 -1i\n0 0i\n0 0i\n0 0i\n0 0i\n2 0i\n2 0i\n2 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n2 0i\n2 0i\n0 0i\n0 0i\n0 0i\n2 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n2 0i\n0 0i\n0 0i\n0 0i\n0 0i\n-2 -1i\n2 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n2 0i\n0 0i\n0 0i\n0 0i\n0 0i\n-2 -1i\n2 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n2 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n2 0i\n0 0i\n0 0i\n0 0i\n0 0i\n2 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n2 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n2 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0i\n0 0",
        "num_ids_2": 37,
        "num_ids_4": 75
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1+1i\") == \"0.00+2.00i\"\nassert solution(\"1+-1i\") == \"0.00-2.00i\"\nassert solution(\"1+-1i\") == \"0.00-2.00i\"\nassert solution(\"1+-1i\") == \"0.00-2.00i\"\nassert solution(\"-1+1i\") == \"0.00+2.00i\"\n",
        "num_ids_2": 41,
        "num_ids_4": 83
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_result\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('xyz') == 'xaybzc'\nassert solution('abc') == 'xaybzc'\nassert solution('abcd') == 'xaybzc'\n",
        "num_ids_2": 29,
        "num_ids_4": 44
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nassert solution(\"abc\") == \"xaybzc\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"cc\") == \"cc\"\nassert solution(\"fhcc\") == \"fhcc\"\n",
        "num_ids_2": 29,
        "num_ids_4": 49
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('xyz') == 'xaybzc'",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nassert solution(\"abc\") == \"xaybzc\"\nassert solution(\"aabbcc\") == \"abbccc\"\nassert solution(\"abcde\") == \"abcdee\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 29,
        "num_ids_4": 56
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('xyz') == 'xaybzc'",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"xaybzc\") == \"xaybzc\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"a\") == \"a\"\nassert solution(\"abcxyz\") == \"abcxyz\"\nassert solution(\"abcxyz123\") == \"abcxyz123\"\n",
        "num_ids_2": 28,
        "num_ids_4": 52
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('xyz') == 'xaybzc'\n\n\"\"\"\n\n\"\"\"\nYou are given two strings s and t.\nString t is generated by randomly shuffling string s and then adding one more letter at a random position.\nReturn the letter that was added to t.\n\nExample 1:\n\nInput: s = \"abcd\", t = \"abcde\"\nOutput: \"e\"\nExplanation: 'e' is the letter that was added.\n\nExample 2:\n\nInput: s = \"\", t = \"y\"\nOutput: \"y\"\n\nExample 3:\n\nInput: s = \"a\", t = \"aa\"\nOutput: \"a\"\n\nExample 4:\n\nInput: s = \"ae\", t = \"aea\"\nOutput: \"a\"\n \n\nConstraints:\n\n0 <= s.length <= 1000\nt.length == s.length + 1\ns and t consist of lower-case English letters.\n\"\"\"\n\nimport collections\n\nclass Solution:\n    def findTheDifference(self, s: str, t: str) -> str:\n        for char in t:\n            if t.count(char) > s.count(char):\n                return char",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n\n-------\n0 1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9 10\n\n-------\n\n0 1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n\n-------\n0 1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n\n-------\n0 1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n\n-------\n0 1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('xyz') == 'xaybzc'\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('01B0') == '00'\n\"\"\"\nimport re",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n----\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"010\") == \"00\"\n\"\"\"\n\ns = input()\nresult = \"\"\nfor i in s:\n    if i!= \"0\" and i!= \"1\" and i!= \"B\":\n        print(\"Error\")\n        break\n    if i == \"0\":\n        result += \"0\"\n    if i == \"1\":\n        result += \"1\"\n    if i == \"B\":\n        if len(result) == 0:\n            continue\n        else:\n            result = result[:len(result)-1]\n\nprint(result)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('01B0') == '00'\n\"\"\"\n\nimport re\n\nstdin = input()\n\npattern = r'\\d+\\b'\nprint(re.sub(pattern, '0', stdin))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n----",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('010B') == '00'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('01B0') == '00'\nassert solution('1011') == '11'\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\n-----\n\nimport sys\n\ntext = sys.stdin.readlines()\ntext = \"\".join(text).rstrip()\n\ntry:\n    print(text[::-1])\nexcept IndexError:\n    print(\"\")\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 5 4 3\") == \"4\"\nassert solution(\"5 2 1 4 3\") == \"6\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\nprint(solution(\"5\\n2 1 5 4 3\"))\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\ninput_arr = list(map(int, sys.stdin.readline().strip().split()))",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\nassert solution('2\\n1') == '1'\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 5 4 3\") == \"4\"\n\"\"\"\nimport math",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n2 1 5 4 3''') == '4'\nassert solution('''3\n1 2 3''') == '2'\n\"\"\"\n\nn = int(stdin.readline())\narr = [int(i) for i in stdin.readline().split()]\n\nstools = [0] * n\nstools[0] = arr[0]\nfor i in range(1, n):\n    for j in range(i - 1, -1, -1):\n        if arr[i] > arr[j]:\n            stools[i] = max(stools[i], stools[j])\n    stools[i] += arr[i]\n\nprint(max(stools))\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"aca\\naccc\\nca\"\n) == \"A\"\nassert solution(\n    \"abaa\\nabaab\\nabb\\nbb\"\n) == \"B\"\nassert solution(\n    \"a\\nb\"\n) == \"A\"\nassert solution(\n    \"a\\nb\\n\"\n) == \"B\"\nassert solution(\n    \"a\\nb\\n\"\n) == \"B\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aca\\naccc\\nca\") == \"A\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aca\\ncac\\nca\") == \"A\"\n\"\"\"\n\nimport unittest\nfrom typing import List\n\nfrom icontract import require, ensure",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"aca\\n\"\n    \"accc\\n\"\n    \"ca\"\n) == \"A\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aca\\naccc\\nca\") == \"A\"\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"B\"\n",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aca\\naccc\\nca\") == \"A\"\n\"\"\"\n\ns_a, s_b, s_c = stdin.split(\"\\n\")\n\na = \"\"\nb = \"\"\nc = \"\"\n\nwhile s_a!= \"\" or s_b!= \"\" or s_c!= \"\":\n    if s_a!= \"\":\n        a += s_a[0]\n        s_a = s_a[1:]\n    if s_b!= \"\":\n        b += s_b[0]\n        s_b = s_b[1:]\n    if s_c!= \"\":\n        c += s_c[0]\n        s_c = s_c[1:]\n    if a!= \"\" and b!= \"\" and c!= \"\":\n        if a[0] == b[0] == c[0]:\n            if len(a) > len(b) and len(a) > len(c):\n                print(a[0])\n            elif len(b) > len(a) and len(b) > len(c):\n                print(b[0])\n            elif len(c) > len(a) and len(c) > len(b):\n                print(c[0])\n        if len(a) > len(b) and len(a) > len(c):\n            print(a[0])\n        elif len(b) > len(a) and len(b) > len(c):\n            print(b[0])\n        elif len(c) > len(a) and len(c) > len(b):\n            print(c[0])\n        a = \"\"\n        b = \"\"\n        c = \"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aca\\ncac\\ncac\") == \"A\"\nassert solution(\"aaa\\naaa\\naaa\") == \"C\"\nassert solution(\"cca\\cba\\cba\") == \"B\"\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"B\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"B\"\n\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"5 7 5\") == \"NO\"\nassert solution(\"5 5 3\") == \"NO\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\">5 5 7<\") == \"YES\"\n\nassert solution(\">15 6 5<\") == \"NO\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"3 5 7\") == \"NO\"\nassert solution(\"4 5 6\") == \"NO\"\nassert solution(\"4 5 7\") == \"NO\"\nassert solution(\"3 5 5\") == \"YES\"\n\n\"\"\"\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 5 7\\n') == 'YES'\nassert solution('3 5 7\\n') == 'YES'\nassert solution('7 5 3\\n') == 'NO'\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"5 5 7\"\n) == \"YES\"\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"7 7 5\") == \"NO\"\nassert solution(\"5 7 5\") == \"YES\"\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"5 7 5\") == \"YES\"\nassert solution(\"7 5 5\") == \"NO\"\nassert solution(\"7 7 7\") == \"NO\"\nassert solution(\"7 5 5\") == \"NO\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5 7') == 'YES'\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n') == '11'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n\nimport math",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"7\"\n\"\"\"\n\nimport os\nimport sys\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"11\"\nprint(\"Success\")",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == '11'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '7'\nassert solution('5') == '11'",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"11\"\nprint(\"PASSED\")",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 2\") == \"7\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 2\") == \"7\"\nprint(solution(\"3 4 2\"))\n\nimport unittest\n\nclass Test(unittest.TestCase):\n\n    def test_case_1(self):\n        self.assertEqual(solution(\"3 4 2\"), \"7\")\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 2\") == \"7\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 2\") == \"7\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 2\") == \"7\"\nassert solution(\"1 2 3\") == \"6\"\nassert solution(\"1 1 3\") == \"3\"\n\"\"\"\n\na, b, h = map(int, input().split())\narea = (a+b)*h/2\nprint(int(area))\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 2\") == \"7\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\na, b, h = (int(i) for i in stdin.strip().split())\n\nprint(int((a+b)*h/2))",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n4\\n2') == '7'\n\"\"\"\n\nimport sys\n\n\"\"\"\na, b, h = map(int, sys.stdin.readline().strip().split())\n\nprint((a + b) * h / 2)\n\"\"\"\n\na, b, h = map(int, sys.stdin.readline().strip().split())\n\nprint(a * b * h / 2)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 2\") == 7\nassert solution(\"1 1 1\") == 1\nassert solution(\"4 5 2\") == 14\nassert solution(\"4 5 3\") == 18\nassert solution(\"4 5 4\") == 16\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 2\") == \"7\"\n\nassert solution(\"1 1 1\") == \"0\"\n\n\"\"\"\n\na, b, h = map(int, stdin.split())\n\nprint((a + b) * h // 2)\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 6 5\") == \"16\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3 4\") == '14'\nassert solution(\"6\\n1 2 3 4 5 6\") == '55'\n\"\"\"\n\nN = int(stdin.readline())\nA = [int(i) for i in stdin.readline().split()]\n\nsum = 0\nfor i in range(N-1):\n    for j in range(i+1, N):\n        sum += A[i]*A[j]\n\nprint(sum%(10**9+7))\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nA = list(map(int, sys.stdin.readline().split()))\nprint(sum(A[i] * A[j] for i in range(N) for j in range(i + 1, N)))\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\n\"\"\"\n\n\"\"\"\n\u4ee5\u4e0a\u7b54\u6848\u5c31\u662f\u81ea\u5df1\u5199\u7684\uff0c\u611f\u89c9\u8fd9\u4e2a\u65b9\u6cd5\u66f4\u7b80\u5355\uff0c\u5e94\u8be5\u5f88\u4e0d\u9519\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\") == 11\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == 11\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nL = [int(i) for i in sys.stdin.readline().split()]\n\ncount = 0\nsum_l = 0\n\nfor i in range(0, N):\n    for j in range(i + 1, N):\n        sum_l += L[i] * L[j]\n        count += 1\n\nprint(sum_l % (10 ** 9 + 7))\nprint(count)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\"\"\"\n\nfrom __future__ import annotations\n\nimport sys\n\nfrom collections import defaultdict\nfrom typing import List, Dict\n\nsys.setrecursionlimit(1000000)\n\nDEBUG = False\n\n\nclass Graph:\n    def __init__(self, number_of_nodes: int):\n        self.number_of_nodes = number_of_nodes\n        self.edges = defaultdict(dict)\n\n    def add_edge(self, node1: int, node2: int, weight: int) -> None:\n        self.edges[node1][node2] = weight\n        self.edges[node2][node1] = weight\n\n    def get_neighbours(self, node: int) -> Dict[int, int]:\n        return self.edges[node]\n\n    def print(self) -> None:\n        print(self.edges)\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\") == 11\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == 11\n\n----\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"3\n    1 2 3\n    \"\"\") == \"11\"\n\"\"\"\n\nProblem\nA company wants to determine the maximum possible profit of its marketing campaign. A marketing campaign is defined as the following:\n\n- Marketing Campaign for Sales\n\n- From an existing list of clients, find the most lucrative client in the list.\n\n- Start a new marketing campaign, choosing one of the clients in the list randomly.\n\n- If the client chosen has a higher expected profit, then replace the client in the list with the new client.\n\n- Repeat this process until the list is empty.\n\n- Now, repeat this process until the new list is empty.\n\n- The task is to find the maximum profit that can be earned from the marketing campaign.\n\n- The client with the highest expected profit, will be considered the most lucrative client. If two clients have the same expected profit, then the client with the highest sales will be considered the most lucrative client. If two clients have the same sales but different expected profits, then in this case the client with the highest expected profit will be considered the most lucrative client.\n\n- The given list of clients will always be non-empty.\n\n- The list will always contain at least one client.\n\nInput\nThe first line of the input contains T, the number of test cases.\n\nThe first line of the test case contains N, the number of clients.\n\nThe next N lines contain information about each client. The first number in each line is the sales, and the second number in each line is the expected profit.\n\nOutput\nFor each test case print the maximum possible profit, that can be earned.\n\nExamples\nInput\n3\n4\n100 100\n120 120\n100 150\n2\n10 40\n10 10\nOutput\n240\n240\n180\n\nExplanation\nTest Case 1\nThe maximum possible profit is 240 as the client with the highest expected profit has 100 sales, and the other client has 150 sales.\n\nTest Case 2\nThe maximum possible profit is 240 as the client with the highest expected profit has 10 sales, and the other client has 40 sales.\n\nTest Case 3\nThe maximum possible profit is 180 as the client with the highest sales has 10 sales, and the other client has 10 sales.\n\nSample Input\n3\n3\n100 100\n120 120\n100 150\n4\n10 40\n10 10\n100 90\n120 120\n100 150\nOutput\n240\n240\n180\n240\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\nassert solution(\"3 4 1\") == \"NO\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\nassert solution(\"4 3 1\") == \"NO\"\nassert solution(\"4 1 2\") == \"NO\"\nassert solution(\"1 1 1\") == \"YES\"\nassert solution(\"1 2 2\") == \"NO\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5 6\\n') == 'YES'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'NO'\nassert solution('3 3 3') == 'YES'\nassert solution('4 3 2') == 'YES'\nassert solution('4 4 4') == 'NO'\nassert solution('3 3 3') == 'YES'\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 2') == 'YES'\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 2\") == 'YES'\nassert solution(\"2 5 2\") == 'NO'\n\n---",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'YES'\n\nassert solution('1 2 2') == 'YES'\nassert solution('2 2 2') == 'NO'\nassert solution('3 3 3') == 'YES'\n\nassert solution('4 3 2') == 'YES'\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\nassert solution(\"8 2 7\") == \"NO\"\nassert solution(\"5 1 1\") == \"YES\"\n\n----------------------\nFind the first ten primes.\n----------------------\n\n-----Constraints-----\n- n \u2264 100\n\n-----Input-----\nThe first line of input contains an integer n, 1 \u2264 n \u2264 100, denoting the number of primes to be printed.\n\nThe second line contains n space-separated integers a1, a2,..., an, 1 \u2264 ai \u2264 100, where ai represents the i-th prime number.\n\n-----Output-----\nPrint the first ten primes on separate lines.\n\n-----Sample Input-----\n5\n2 3 5 7 11\n\n-----Sample Output-----\n2\n3\n5\n7\n11\n\n----------------------\nWrite a function:",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3 2\\n') == 'YES'\nassert solution('4 3 1\\n') == 'NO'\nassert solution('4 3 3\\n') == 'YES'\nassert solution('3 2 2\\n') == 'NO'\nassert solution('9 9 9\\n') == 'YES'\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\n\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 11\\n1\\n\") == \"30\"\n\"\"\"\n\na, b, c = [int(i) for i in stdin.split()]\nk = int(stdin)\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 11\\n1') == '30'\n\n-----",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s) == e\n\"\"\"\n\n\"\"\"\nGiven a number n, find the largest number that can be obtained by replacing exactly n '7's by a single '1'.\n\nhttps://www.hackerrank.com/challenges/one-hundred-1/problem\n\n-----\nSolution:\n\nIf we take a given number and replace n '7's by n '1's in the binary representation of the number, we obtain a number with the form n * '111111...' and a number with the form (n-1) * '111111...'. The maximum sum of such numbers obtained for n from 1 to 1010 is 1010011110.\n\nTo calculate this sum, we can use the above formula and increment the number of '1's by 1 in each step.\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == 30\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 11\") == \"30\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 11\") == \"30\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1\\n1\\n1\") == 3\n\"\"\"\n\nstdin = input()\nprint(int(stdin.split()[0]) + int(stdin.split()[1]) + int(stdin.split()[2]))\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\n\n\"\"\"\n\n\"\"\"\nAll of the numbers in the input lines are separated by a space character. The first line contains three space-separated integers A, B and C, representing the number of operations E869120 can perform. The next line contains the integer K, the number of times E869120 performs the operations. The last line contains three space-separated integers A, B and C, representing the number of integers initially written on the blackboard.\n\nE869120 performs the following operation K times:\n - Choose one integer written on the blackboard and let the chosen integer be n. Replace the chosen integer with 2n.\nWhat is the largest possible sum of the integers written on the blackboard after K operations?\n\n-----Constraints-----\n - A, B and C are integers between 1 and 50 (inclusive).\n - K is an integer between 1 and 10 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5 3 11\n1\n\n-----Output-----\nPrint the largest possible sum of the integers written on the blackboard after K operations by E869220.\n\n-----Sample Input-----\n5 3 11\n1\n\n-----Sample Output-----\n30\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\n\n\"\"\"\n\nimport unittest",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"abb\") == \"No\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"a\") == \"No\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"abccbc\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('aaaaa') == 'Yes'\nassert solution('ababb') == 'No'\n\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 34
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\n\nsolution(\"abccaba\") == \"No\"\nsolution(\"b\") == \"Yes\"\nsolution(\"bb\") == \"No\"\nsolution(\"babab\") == \"Yes\"\nassert solution(\"aaab\") == \"No\"\nassert solution(\"aaabb\") == \"No\"\nassert solution(\"abbcccccc\") == \"No\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"Yes\"\n",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abaccaba\") == 'Yes'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('abccaba') == 'No'\nassert solution('aba') == 'Yes'\nassert solution('aaa') == 'Yes'\n\"\"\"\n\nimport collections\n",
        "num_ids_2": 24,
        "num_ids_4": 44
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"abcdef\") == \"No\"\n\"\"\"\nimport unittest",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"abacc\") == \"No\"\nassert solution(\"a\") == \"Yes\"\nassert solution(\"abac\") == \"No\"\nassert solution(\"aba\") == \"Yes\"\n",
        "num_ids_2": 23,
        "num_ids_4": 44
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 1\\n2 2\\n3 3\") == '3'\nassert solution(\"5 5\\n1 1\\n2 2\\n3 3\\n4 4\") == '4'\n\"\"\"\n\nimport heapq\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1\\n2 2\\n3 3') == '3'\n\"\"\"\n\nn, k = input().split(' ')\nn, k = int(n), int(k)\narr = []\nfor _ in range(n):\n    a, b = input().split(' ')\n    a, b = int(a), int(b)\n    arr.append((a,b))\narr.sort(key=lambda x: x[0])\nprint(arr[k-1][1])",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 4\n1 1\n2 2\n3 3''') == '3'\nassert solution('''5 2\n1 1\n2 2\n3 3\n4 4\n5 5''') == '4'\nassert solution('''3 4\n1 1\n2 2\n3 3\n''') == '3'\n\n\"\"\"\nfrom heapq import heapify, heappop\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1\\n1 2\\n3 4\\n4 5\\n5 1\") == \"5\"\n\n\"\"\"\n\n\"\"\"\n\n-----DETAILS-----\nThe problem is a variation of the problem \"Find Kth Smallest Number in an Unsorted Array\", which is a variation of the problem \"Find Kth Largest Number in an Unsorted Array\", which is a variation of the problem \"Find Kth Largest Number in a Sorted Array\".\nhttps://leetcode.com/problems/kth-smallest-number-in-a-sorted-matrix/\n\nIt is related to the problem \"Find Kth Largest Number in an Unsorted Array\".\nhttps://leetcode.com/problems/kth-largest-element-in-an-array/\n\nThe problem \"Find Kth Largest Number in an Unsorted Array\" can be solved in O(K Log N) time complexity.\n\nThe problem \"Find Kth Largest Number in a Sorted Array\" can be solved in O(N + K Log N) time complexity.\n\nThe problem \"Find Kth Smallest Number in an Unsorted Array\" can be solved in O(K Log N) time complexity.\n\nThe problem \"Find Kth Smallest Number in a Sorted Matrix\" can be solved in O(K + N Log N) time complexity.\n\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4\\n1 1\\n2 2\\n3 3\\n') == '3'\n\"\"\"\nfrom collections import deque\nimport sys",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\") == \"3\"\n\"\"\"\n\nfrom heapq import heappop, heappush\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2\\n2 2\\n3 3\") == \"3\"\n\"\"\"\n\n\"\"\"\nBEST SOLUTION\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\") == \"3\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('3 1') == '1'\nassert solution('5 2') == '2'\nassert solution('3 4') == '3'\n'''\n",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'''\n3 4\n1 1\n2 2\n3 3\n'''\n) == '3'\nassert solution(\n'''\n3 4\n1 2\n2 2\n3 3\n'''\n) == '2'\nassert solution(\n'''\n1 10\n1 10\n'''\n) == '1'\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n0 1\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n\") == \"2\"\n\"\"\"\nfrom collections import defaultdict",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n0 1 0 1\\n1 1 1 0\\n1 1 1 1\\n0 1 1 1\") == \"2\"\nassert solution(\"1 1\\n0\") == \"1\"\n\"\"\"\n\nimport numpy as np",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\n') == '2'\nassert solution('3 3\\n') == '6'\nassert solution('2 1\\n') == '1'\nassert solution('3 2\\n') == '3'\nassert solution('1 2\\n') == '1'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"1 2\") == \"0\"\n\"\"\"\n\n\"\"\"\n\uaddc\uce59\uc131\uc744 \ucc3e\uc9c0 \ubabb\ud588\ub2e4...\n\ubc18\ub840: 2 2\n\n\ucd94\uac00\ub85c \uc870\uac74\uc744 \uc815\ub9ac\ud574\ubcf4\uae30:\n - \ud070 \uc218\ubd80\ud130 \uc791\uc740 \uc218\ub85c \ub098\ub220\ubcf4\uc790\n - 2\uc758 \ubc30\uc218\ub294 \ucd5c\ub300 \uacbd\uc6b0\uc5d0\ub294 \ubb34\uc870\uac74 0\n - \ub098\uba38\uc9c0\ub294 \ucd5c\ub300 \uacbd\uc6b0\uc5d0\ub294 \ucd5c\uc18c\ud55c 1\uac1c \uace0\ub974\uace0, \ud558\ub098\ub294 \ub098\uba38\uc9c0\ub4e4\uacfc \ube44\uad50\ud558\uc790\n - \uc774 \ub54c, \uacb9\uce58\ub294 \uacbd\uc6b0\ub294 \ucd5c\ub300 \uacbd\uc6b0\uc5d0 \uc758\ud574 \uc0dd\uac01\uc774 \uc548 \ub09c\ub2e4\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2') == '2'\nprint(solution(stdin))\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"2\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"2\"\n\"\"\"\nfrom typing import Callable, List\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2') == '6'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n\") == 2\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_stdin) == test_stdout",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''20 3\n5 10 15''') == '10'\n\n----------",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 10 15\") == 10\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 3\\n5 10 15\") == \"10\"\n\n\"\"\"\n\nk, n = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\nb = [k-i for i in a]\nprint(sum(min(a, b)))\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 10 15\") == \"10\"\n\n\"\"\"\n\nK, N = input().split()\nK, N = int(K), int(N)\n\na = input().split()\na = [int(i) for i in a]\n\nhouse_dist = 0\ni = 0\nwhile i < N:\n    j = i + 1\n    while j < N:\n        house_dist += abs(a[i] - a[j])\n        j += 1\n    i += 1\n\nprint(house_dist)",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 3\\n5 10 15\\n\") == \"10\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10 15\") == \"10\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10 15\\n\") == \"10\"\nassert solution(\"20 3\\n\") == \"10\"\nassert solution(\"20 100\\n\") == \"20\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 40
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 3\\n5 10 15\") == \"10\"\n\"\"\"\n\nfrom math import gcd, atan\nfrom typing import List\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1\\n3\\n') == '2'\nassert solution('5\\n1\\n2\\n2\\n2\\n') == '6'\nassert solution('5\\n1\\n2\\n3\\n4\\n') == '10'\n\n\"\"\"\n\nK, N = map(int, input().split())\nhouses = list(map(int, input().split()))\n\nhouses.sort(reverse=True)\n\ndp = [K + 1] * N\ndp[0] = 0\nfor i in range(N):\n    dp[i] = min([dp[j] + abs(houses[j] - houses[i]) for j in range(i)])\n\nprint(dp[-1])\n",
        "num_ids_2": 42,
        "num_ids_4": 66
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == '8', 'error'\nassert solution('3 5 2 7') == '15', 'error'\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5 2 7') == '15'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"4 5 6 7\") == \"20\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"0 0 0 0\") == \"0\"\n\"\"\"\nimport sys\nimport unittest\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n\"\"\"\n\nimport re\nfrom itertools import groupby",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5 2 7') == '15', 'error'\nassert solution('1 1 1 1') == '1', 'error'\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 5 2 7''') == '15'\n\"\"\"\nimport math\n\nnums = [int(x) for x in stdin.split(' ')]\n\na = nums[0]\nb = nums[1]\nc = nums[2]\nd = nums[3]\n\nmax_rect = max(a*d, b*c)\nmin_rect = min(a*d, b*c)",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n\"\"\"\nimport math\n\nA, B, C, D = map(int, input().split())",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n\n\"\"\"\n\n\"\"\"\nSolution for above problem.\n\nSolution:",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('AC') == \"AC x 3\"\nassert solution('WA') == \"WA x 1\"\nassert solution('TLE') == \"TLE x 2\"\nassert solution('RE') == \"RE x 0\"\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('AC\\nWA\\nAC\\nAC\\nWA\\nTLE') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\n\"\"\"",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('AC\\nTLE\\nAC\\nAC\\nWA\\nTLE') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AC\") == \"AC x 3\"\nassert solution(\"WA\") == \"WA x 1\"\nassert solution(\"TLE\") == \"TLE x 2\"\nassert solution(\"RE\") == \"RE x 0\"",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AC\") == \"AC x 3\"\nassert solution(\"WA\") == \"WA x 1\"\nassert solution(\"TLE\") == \"TLE x 2\"\nassert solution(\"RE\") == \"RE x 0\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected_result\n\n------\nIf the value of N is large, then you can write a solution that implements an efficient algorithm.\n\n-----Explanation-----\nYour solution can be implemented in a single loop.\nIn each iteration of the loop, you should increment the number of test cases for which the verdict is AC, WA, TLE, and RE, respectively.\n\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n\"\"\"\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AC\") == \"AC x 3\"\nassert solution(\"WA\") == \"WA x 1\"\nassert solution(\"TLE\") == \"TLE x 2\"\nassert solution(\"RE\") == \"RE x 0\"\nassert solution(\"TAC\") == \"TAC x 1\"\n",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('AC\\nTLE\\nAC\\nAC\\nWA\\nTLE') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\n\n\"\"\"\nimport sys\nimport os",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('AC\\nWA\\nAC\\nAC\\nWA\\nTLE\\n') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\nassert solution('AC\\nAC\\nAC\\nAC\\nWA\\nTLE\\n') == 'AC x 4\\nWA x 0'\n\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 81,
        "num_ids_4": 81
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"21\") == \"27\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"21\") == \"27\"\nprint(solution(\"21\"))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"21\") == \"27\"\nprint(solution(\"21\"))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('21') == '27'\n\"\"\"\n\nfrom datetime import datetime\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"21\") == \"27\"\nassert solution(\"23\") == \"31\"\nassert solution(\"0\") == \"0\"\nassert solution(\"11\") == \"10\"\nassert solution(\"22\") == \"24\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"21\") == \"27\"\nprint(solution(\"21\"))",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('21') == '27'\n\"\"\"\n\nfrom datetime import datetime\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3\") == \"9\"\n\"\"\"\n\nA, B = stdin.split()",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3\") == \"9\"\n\"\"\"\n\na, b = input().split(' ')",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 3\\n') == '9'\nassert solution('2 1\\n') == '3'\nassert solution('7 -2\\n') == '5'\nassert solution('9 7\\n') == 'error'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 6\\n') == '10'\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3\") == \"9\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"10 2\") == \"error\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"6 3\") == \"9\"\n\n\"\"\"\nimport ast\nimport os\nfrom collections import namedtuple\nfrom typing import List, NamedTuple\n\nclass Solution:\n    def solve(self, input_list: List[str]) -> str:\n        \"\"\"\n        Args:\n            input_list (List[str]): list of strings\n        Returns:\n            str: formatted string\n        \"\"\"\n        a, b = ast.literal_eval(input_list[0])\n        if a + b >= 10:\n            return \"error\"\n        else:\n            return a + b",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == \"3\"\n\nassert solution(\"6 3\") == \"9\"\n\nassert solution(\"6 3\\n6 9\") == \"12\"\n",
        "num_ids_2": 21,
        "num_ids_4": 36
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 3') == '9'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 3') == '9'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 7 9\") == \"7\"\nassert solution(\"4 4 8 9 2\") == \"8\"\nassert solution(\"6 1 4 5 2 7 8 9 10\") == \"12\"\nassert solution(\"3 2 1 2 4 7 8\") == \"5\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 27,
        "num_ids_4": 61
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n2 3 7 9''') == 7\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 7 9\") == \"7\"\nassert solution(\"10\\n9 5 1 2 3 7 4 0 6 8\") == \"11\"\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\n\n\"\"\"\nfrom math import sqrt\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 3 7 9') == 7\n\"\"\"\n\n\nfrom math import sqrt",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(1, 2) == 2\nassert solution(2, 3) == 2\nassert solution(3, 7) == 2\nassert solution(4, 9) == 2\n\"\"\"\n\n\"\"\"\nWrite a program to find the longest path in a given tree.\n\nA path is a sequence of vertices v_1,..., v_n, such that there is an edge between v_i and v_i+1 for every 1 \u2264 i \u2264 n-1.\n\nInput\nThe input to the function/method consists of three arguments:\n1. The number of vertices V,\n2. an array A of V integers, where each element of the array represents the edge length from vertex A to vertex B (if A->B, B->A),\n3. an array B of V integers, where each element of the array represents the index of the parent vertex in the tree.\nIf there is no parent for a vertex, then the value of the element is \u22121.\n\nOutput\nReturn an integer representing the longest path in the tree.\n\nExample 1\nInput\n4\n4 6 8\n0 1 1\n1 1 1\n2 3 3\n3 3 -1\nOutput\n8\n\nExplanation\nVertex 1 has no parent and thus it is at the root of the tree.\n\n\"\"\"\n\n\"\"\"\nThe problem is to determine the longest path in a tree.\n\nA path is a sequence of vertices v_1,..., v_n, such that there is an edge between v_i and v_i+1 for every 1 \u2264 i \u2264 n-1.\n\nThe path's length is the sum of the lengths of its edges.\n\nInput\nFirst line of the input contains the number of vertices V, followed by the V integers e_1, e_2,..., e_V, where each e_i denotes the edge length from vertex v_i to v_i+1.\n\nOutput\nThe output should consist of a single integer, the longest path length.\n\nExample\nInput:\n4\n4 6 8\n0 1 1\n1 1 1\n2 3 3\n3 3 -1\n\nOutput:\n8\n\nExplanation:\nThe path in the graph is shown in red.\n\n1\n    \\\n     2\n      \\\n       3\n\nThe longest path is shown in blue.\n\n1\n   2\n    3\n\nThe longest path is shown in red.\n\n1\n    2\n      3\n\nThe longest path is shown in blue.\n\n1\n    2\n      3\n        4\n\nThe longest path is shown in red.\n\"\"\"\n\n\"\"\"\nYou are given an undirected graph. You are asked to perform the following query: \nFind a subgraph of the graph with maximum number of vertices. Your task is to complete the function max_subgraph(), which takes the number of vertices V, the adjacency matrix Adjacency[] and returns the maximum number of vertices of the maximum subgraph.\n\nInput Format\nThe first line of the input contains the number of vertices V, and the next V lines contain the adjacency matrix Adjacency[].\n\nOutput Format\nThe output contains the maximum number of vertices of the maximum subgraph.\n\nConstraints\n1<= V <= 10^5\n\n1<= Adjacency[i][j] <=10^5\n\nFor Example\nInput:\n3\n0 1 1\n1 0 1\n1 1 0\nOutput:\n2\n\nExplanation:\nThe graph in the above example contains three vertices and so we return 2.\n\"\"\"\n\n\"\"\"\nYou are given a weighted DAG, the task is to determine the maximum weighted path between any pair of vertices.\n\nInput Format\nFirst line of input contains 2 integers V and E denoting the number of vertices and edges respectively. Each of the next E lines contains two integers u and v denoting that there exists an edge from u to v. Next line contains W denoting the number of queries. Each of the next W lines contains two integers x and y denoting the endpoints of the path.\n\nOutput Format\nFor each query, print the maximum weighted path between vertices x and y. Print -1 if there is no path between them.\n\nSample Input 0\n3 2\n0 1 1\n1 2 1\n0 2 1\n1 2 1\n2 3 1\n0 3 2\nSample Output 0\n2\n3\n2\nExplanation 0\n\nThe weighted paths are (0->1->2) = 2, (0->1->3) = 3, (0->2->3) = 2.\n\"\"\"\n\n\"\"\"\nYou are given a weighted DAG, the task is to determine the maximum weighted path between any pair of vertices.\n\nInput Format\nFirst line of input contains 2 integers V and E denoting the number of vertices and edges respectively. Each of the next E lines contains two integers u and v denoting that there exists an edge from u to v. Next line contains W denoting the number of queries. Each of the next W lines contains two integers x and y denoting the endpoints of the path.\n\nOutput Format\nFor each query, print the maximum weighted path between vertices x and y. Print -1 if there is no path between them.\n\nSample Input 0\n3 2\n0 1 1\n1 2 1\n0 2 1\n1 2 1\n2 3 1\n0 3 2\nSample Output 0\n2\n3\n2\nExplanation 0\n\nThe weighted paths are (0->1->2) = 2, (0->1->3) = 3, (0->2->3) = 2.\n\"\"\"\n\n\"\"\"\nYou are given a weighted DAG, the task is to determine the maximum weighted path between any pair of vertices.\n\nInput Format\nFirst line of input contains 2 integers V and E denoting the number of vertices and edges respectively. Each of the next E lines contains two integers u and v denoting that there exists an edge from u to v. Next line contains W denoting the number of queries. Each of the next W lines contains two integers x and y denoting the endpoints of the path.\n\nOutput Format\nFor each query, print the maximum weighted path between vertices x and y. Print -1 if there is no path between them.\n\nSample Input 0\n3 2\n0 1 1\n1 2 1\n0 2 1\n1 2 1\n2 3 1\n0 3 2\nSample Output 0\n2\n3\n2\nExplanation 0\n\nThe weighted paths are (0->1->2) = 2, (0->1->3) = 3, (0->2->3) = 2.\n\"\"\"\n\n\"\"\"\nYou are given an undirected graph and you need to perform the following query: \nFind the number of connected components in the graph.\n\nInput Format\nFirst line of input contains 2 integers V and E denoting the number of vertices and edges respectively. Each of the next E lines contains two integers u and v denoting that there exists an edge between u and v. Next line contains V integers where the i-th integer denotes the number of vertices in the i-th connected component.\n\nOutput Format\nPrint the number of connected components in the graph.\n\nSample Input 0\n4 4\n0 1\n0 2\n1 2\n2 3\n3 4\nSample Output 0\n2\nExplanation 0\n\nThe graph is as follows:\n\nThere are two connected components {0, 2, 3} and {1}\n\"\"\"\n\n\"\"\"\nYou are given a weighted DAG, the task is to determine the maximum weighted path between any pair of vertices.\n\nInput Format\nFirst line of input contains 2 integers V and E denoting the number of vertices and edges respectively. Each of the next E lines contains two integers u and v denoting that there exists an edge from u to v. Next line contains W denoting the number of queries. Each of the next W lines contains two integers x and y denoting the endpoints of the path.\n\nOutput Format\nFor each query",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 7 9') == '7'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\nmin_dist = a[-1] + a[0] - 2 * a[0]\n\nfor i in range(1, N-1):\n    min_dist = min(min_dist, a[i-1] + a[i] - 2 * a[i])\n    min_dist = min(min_dist, a[i] + a[i+1] - 2 * a[i+1])\n    min_dist = min(min_dist, a[i] + a[i-1] - 2 * a[i-1])\n\nprint(min_dist)\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\nassert solution(\"1\\n0\") == \"0\"\nassert solution(\"2\\n1 2\") == \"1\"\nassert solution(\"3\\n1 0 1\") == \"2\"\nassert solution(\"3\\n1 3 1\") == \"2\"\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 58
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == \"Yes\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"Yes\"\nassert solution(\"1 3\") == \"No\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1 3\n''') == 'Yes'",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'No'\nassert solution('1 2') == 'No'\nassert solution('1 1') == 'Yes'\nassert solution('1 3') == 'No'\nassert solution('1 4') == 'No'\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3') == 'Yes'\n\nassert solution('2 4') == 'No'\n\nassert solution('3 7') == 'Yes'\n\"\"\"\n\nimport sys\nimport re\nimport numpy as np",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"Yes\"\nassert solution(\"2 3\") == \"No\"\nassert solution(\"2 1\") == \"Yes\"\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3\\n4 7\\n8 12\\n10 12\\n9 7\\n4 9\\n7 3\\n4 7\\n6 1\") == \"Yes\\nYes\\nYes\\nNo\\nYes\\nNo\\nYes\"\n\"\"\"\n",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 5\\n2 5') == 'Yes'\nassert solution('2 4\\n3 3') == 'No'\n\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3') == 'Yes'\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n3 4\") == \"Even\"\nassert solution(\"2 2\\n4 4\") == \"Even\"\nassert solution(\"2 1\\n4 4\") == \"Odd\"\nassert solution(\"10 2\\n4 4\") == \"Even\"\nassert solution(\"1 10\\n4 4\") == \"Odd\"\n",
        "num_ids_2": 30,
        "num_ids_4": 61
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"Even\"\nassert solution(\"3 5\") == \"Odd\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"Even\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4') == 'Even'\nassert solution('1 2') == 'Even'\nassert solution('2 3') == 'Odd'\nassert solution('1 2') == 'Odd'\nassert solution('1 1') == 'Even'\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"Even\"\n\n\"\"\"\n\na, b = input().split()\n\na = int(a)\nb = int(b)",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"Even\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'Even'\nassert solution('3\\n4') == 'Even'\nassert solution('3\\n5') == 'Odd'\nassert solution('6\\n7') == 'Odd'\nassert solution('4\\n6') == 'Even'\n\"\"\"\n\nimport sys",
        "num_ids_2": 23,
        "num_ids_4": 51
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2') == 'Odd'\nassert solution('2 3') == 'Even'\nassert solution('2 3 4') == 'Even'\nassert solution('2 3 4 5') == 'Even'\n",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 7') == 'Even'\nassert solution('3 4') == 'Even'\nassert solution('2 1') == 'Odd'\nassert solution('5 4') == 'Odd'\nassert solution('2 1') == 'Odd'\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\") == \"Even\"\n\"\"\"\n\na, b = map(int, stdin.split())\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 6\\n') == '2'\nassert solution('3 10\\n') == '2'\nassert solution('2 10\\n') == '1'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 6\\n') == '2'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 6\") == 2\n\"\"\"\n\nimport unittest\n\n\nclass TestPuzzle(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution(\"1 6\"), 2)\n\n    def test_2(self):\n        self.assertEqual(solution(\"2 2\"), 1)\n\n    def test_3(self):\n        self.assertEqual(solution(\"5 3\"), 2)\n\n    def test_4(self):\n        self.assertEqual(solution(\"7 7\"), 2)\n\n    def test_5(self):\n        self.",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 6\\n\") == \"2\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2') == 2\nprint(solution(stdin.rstrip()))\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 6') == '2'\nassert solution('3 5') == '1'\nassert solution('5 10') == '2'\nassert solution('1 1') == '0'\nassert solution('2 2') == '0'\n\n------Test Input-----\n5 5\n3 3\n7 5\n2 4\n1 3\n1 1\n3 3\n1 2\n4 4\n3 4\n3 3\n1 1\n2 4\n3 3\n2 2\n5 4\n1 5\n1 5\n5 5\n5 5\n5 5\n1 1\n2 2\n2 2\n5 5\n3 3\n3 3\n1 1\n5 1\n2 2\n5 5\n1 2\n1 1\n1 1\n3 3\n1 1\n3 3\n1 1\n1 1\n1 1\n2 2\n1 1\n1 1\n1 1\n1 1\n3 3\n1 2\n2 4\n5 5\n5 5\n5 5\n5 5\n1 1\n1 1\n2 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 2\n1 1\n1 1\n3 3\n1 2\n1 1\n5 5\n1 2\n1 1\n1 1\n1 2\n1 1\n1 1\n5 5\n5 5\n1 1\n2 2\n1 1\n2 4\n5 5\n5 5\n3 3\n5 5\n1 1\n2 2\n5 5\n3 3\n3 3\n3 3\n2 2\n1 2\n3 3\n3 3\n5 5\n5 5\n5 5\n1 1\n5 1\n1 1\n1 2\n5 5\n5 5\n5 5\n1 1\n5 5\n2 4\n3 3\n3 3\n1 1\n5 5\n1 1\n1 1\n1 1\n1 1\n3 3\n1 1\n5 1\n3 3\n3 3\n1 1\n2 2\n5 5\n5 5\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '1 6'\n) == 2\n\"\"\"\n\nfrom math import ceil\n\nN, M = [int(s) for s in stdin.split(' ')]\n\nassert 0 < N <= 10 ** 12\nassert 0 < M <= 10 ** 12\n\nMAX = N + M + 1\n\nA = [0 for _ in range(MAX)]\n\nfor _ in range(N):\n    A[int(stdin)] += 1\n\nfor _ in range(M):\n    A[int(stdin)] += 1\n\nA.sort()\n\nans = 0\nfor i in range(MAX):\n    if A[i] == 0:\n        continue\n    if A[i] == 1:\n        ans += 1\n    else:\n        A[i] -= 1\n        ans += 1 + 2 * ceil(A[i] / 2)\n\nprint(ans)\n",
        "num_ids_2": 13,
        "num_ids_4": 22
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 6\") == 2\n\"\"\"\nimport sys\nimport math\nimport time\n\nfrom scipy.special import comb\n\nsys.setrecursionlimit(100000000)",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 6\") == \"2\"\n\"\"\"\nfrom collections import Counter\nfrom itertools import permutations",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 6\") == \"2\"\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    3\n    2 1 4\n    2\n    1 1\n    2 3\n    \"\"\") == \"\"\"\n    6\n    9\n    \"\"\"\n\nprint(solution(input()))",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\nassert solution(\"3\\n1 1 1\\n2 3\") == \"3\\n1\"\nassert solution(\"1\\n1\\n1\") == \"1\"\n",
        "num_ids_2": 51,
        "num_ids_4": 67
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2 1 4\\n2\\n1 1\\n2 3') == '6\\n9'\n\"\"\"\nimport sys",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 1 4\\n2\\n1 1\\n2 3') == '6\\n9'\n\n-------",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 4\\n2\\n1 1\\n2 3\") == \"6 9\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3\n2 1 4\n2\n1 1\n2 3\n\"\"\") == \"6\\n9\"\n\n\"\"\"\n3\n2 1 4\n2\n1 1\n2 3\n\"\"\"\nassert solution(\"\"\"3\n2 1 4\n2\n1 1\n2 3\n\"\"\") == \"6\\n9\"\n\n\"\"\"\n3\n1 1 1\n2\n1 1\n2 3\n\"\"\"\nassert solution(\"\"\"3\n1 1 1\n2\n1 1\n2 3\n\"\"\") == \"1\\n1\\n1\"\n\n\"\"\"\n3\n2 1 4\n2\n1 1\n2 3\n\"\"\"\nassert solution(\"\"\"3\n2 1 4\n2\n1 1\n2 3\n\"\"\") == \"6\\n9\"\n\n\"\"\"\n1\n1\n1\n\"\"\"\nassert solution(\"\"\"1\n1\n1\n1\n\"\"\") == \"1\"\n\n\"\"\"\n1\n1\n2\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\nprint(\"Test passed\")\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 1 4\\n2\\n1 1\\n2 3\\n') == '6\\n9'\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\n\"\"\"\n\nimport sys\n\na = sys.stdin.readline().strip()\nN, K = [int(c) for c in a.split()]\nl = [int(c) for c in sys.stdin.readline().strip().split()]\ns = ''\nfor i in l:\n    if i not in [1, 2, 3, 4, 5, 6, 7, 8, 9]:\n        s += str(i)\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1000 8\n1 3 4 5 6 7 8 9''') == '2000'\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\"\"\"\n\nfrom itertools import combinations\nimport sys\n\nn, k = [int(i) for i in sys.stdin.readline().strip().split(\" \")]\na = [int(i) for i in sys.stdin.readline().strip().split(\" \")]\nl = [i for i in range(k) if a[i]!= 0 and a[i]!= 2]\n\nd = dict()\nfor i in range(k):\n    if a[i] not in d:\n        d[a[i]] = 0\n    d[a[i]] += 1\n\nans = 0\nfor key in d:\n    if d[key]!= 0:\n        ans += k - d[key]\n\nres = sorted([i for i in range(k) if a[i]!= 0 and a[i]!= 2])\n\nfor i in range(1, len(l) + 1):\n    for c in combinations(l, i):\n        l_a = [0] + list(c) + [k - 1]\n        if len(set(l_a)) == k:\n            l_a = sorted(l_a)\n            if l_a[0] == 0 and l_a[-1] == 2:\n                if l_a[0]!= l_a[1] - 1 and l_a[1]!= l_a[2] - 1:\n                    ans = max(ans, l_a[-1] - l_a[0] + 1)\nprint(ans)\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\\n\") == \"2000\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\nprint(solution(input()))",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(123) == '234'\nassert solution(101) == '100'\nassert solution(998) == '1000'\n\n------------------------------------------------",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\"\"\"\n\nfrom typing import List\n\nfrom utils import get_data\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\"\"\"\nimport re\nimport sys",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\":\\n4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\\n\") == '2'\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == '2'\n\"\"\"\n\nN, M = [int(x) for x in input().split()]\n\nE = [[int(x) for x in input().split()] for _ in range(M)]\n\ngood = []\n\nfor i in range(N):\n    elevations = [E[j][0] for j in range(M) if E[j][1] == i]\n    if len(set(elevations)) == N:\n        good.append(i)\n\nprint(len(good))",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\"\"\"\n\nn, m = [int(x) for x in stdin.split()]\ngood_observatories = 0\nobservatories = set()\nfor i in range(1, n + 1):\n    observatories.add(i)\n\nfor road in range(m):\n    observatories_on_road = [int(x) for x in stdin.split()]\n    A, B = observatories_on_road[0], observatories_on_road[1]\n    observatories.remove(A)\n    observatories.remove(B)\n    good_observatories += 1\n\nprint(good_observatories)\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\"\"\"\n\nN, M = list(map(int, stdin.split()))\nh = list(map(int, stdin.split()))\na, b = [], []\nfor _ in range(M):\n    tmp = list(map(int, stdin.split()))\n    a.append(tmp[0])\n    b.append(tmp[1])\n\nres = 0\nfor i in range(N):\n    is_good = True\n    for j in range(M):\n        if (h[i] >= h[a[j]-1] and h[i] >= h[b[j]-1]):\n            is_good = False\n    if is_good:\n        res += 1\nprint(res)\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\nprint(\"assert OK\")\n\"\"\"\n\nn, m = map(int, input().split())\nh = list(map(int, input().split()))\na, b = [], []\nfor _ in range(m):\n    x, y = map(int, input().split())\n    a.append(x - 1)\n    b.append(y - 1)\n\ngood_obs = []\nfor i, h_i in enumerate(h):\n    can_be_reached = 0\n    for j in range(m):\n        if (i == a[j] or i == b[j]) and h[a[j]] < h_i and h[b[j]] < h_i:\n            can_be_reached += 1\n    if can_be_reached == m:\n        good_obs.append(i)\n\nprint(len(good_obs))\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"1\"\nassert solution(\"4 4\\n1 3\\n2 3\\n3 4\\n4 1\") == \"1\"\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\nassert solution(\"8 5\\n5 4 3 2 1 6 8 7\\n1 2\\n1 3\\n4 5\\n4 6\\n5 7\\n6 7\\n7 8\\n3 4\") == \"3\"\n\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\"\"\"\n\nn, m = map(int, input().split())\n\nh = list(map(int, input().split()))\n\nroads = [[int(x) for x in input().split()] for i in range(m)]\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"10\"\nassert solution(\"4 4\") == \"13\"\nassert solution(\"4 6\") == \"18\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"10\"\n\"\"\"\n\n\"\"\"\n-----Solution-----\n\nLet's build a model for this problem.\n\nWe can solve this problem via simple iteration.\n\nSuppose we have some initial value A = 1.\nWe can perform operations:\n - A increases by 1 every time.\n - A decreases by K every time.\n\nThe minimal value will be the sum of all values in the sequence.\n\nThis solution will take O(N)O(N)O(N) time.\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n') == '10'\n\"\"\"\n\nn, k = map(int, stdin.readlines())",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3') == '10'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3') == '10'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"10\"\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"10\"\n\"\"\"\nimport math",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"10\"\nassert solution(\"10 9\") == \"1010\"\nassert solution(\"7 2\") == \"49\"\n\"\"\"\nimport sys",
        "num_ids_2": 23,
        "num_ids_4": 34
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3\") == \"10\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n') == '10'\nprint('Test passes.')\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(0) == '0'\nassert solution(1) == '1'\nassert solution('-1') == '0'\nassert solution('0.5') == '1'\n\"\"\"\n\nx = input()\nprint(int(x) == 0 or int(x) == 1)\n",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0') == '1'\nassert solution('1') == '0'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"0\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '0'\nassert solution('1/2') == '1'\nassert solution('1/3') == '1'\nassert solution('1/7') == '0'\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('0') == '0'",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"0\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\nassert solution('0.9') == '1'\nassert solution('0.51') == '1'\nassert solution('0.5') == '0'\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123\") == 6\nassert solution(\"1+2+3\") == 6\nassert solution(\"2+1+2\") == 7\nassert solution(\"5+5+5+5\") == 20\nassert solution(\"5*5*5*5\") == 125\n",
        "num_ids_2": 20,
        "num_ids_4": 46
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('125') == '176'\nassert solution('999') == '3039'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('125') == '176'\nassert solution('1234') == '42'\nassert solution('12345') == '41'\nassert solution('123456') == '31'\n\nassert solution('1234567') == '31'\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('125') == '176'\n\n\"\"\"\n\nimport math\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"1+2+3\") == \"6\"\nassert solution(\"1+2+3+4\") == \"10\"\nassert solution(\"1+2+3+4+5+6\") == \"21\"\nassert solution(\"1+2+3+4+5+6+7\") == \"28\"",
        "num_ids_2": 24,
        "num_ids_4": 60
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1+2+3+4+5') == '15'\nassert solution('2+1+1+1+1') == '8'\nassert solution('2+1+1+1+2') == '8'\nassert solution('1+2+1+1+1') == '8'\n\nassert solution('1+2+1+1+1+1+1+1') == '21'\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"125+\") == \"217\"\nassert solution(\"125+10\") == \"217\"\nassert solution(\"125+1\") == \"126\"\nassert solution(\"125+5\") == \"130\"\n",
        "num_ids_2": 21,
        "num_ids_4": 45
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"111111111\") == \"18015625\"\nassert solution(\"1234\") == \"1058\"\nassert solution(\"8\") == \"8\"\nassert solution(\"\") == \"0\"\n",
        "num_ids_2": 25,
        "num_ids_4": 47
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('125') == '176'\nassert solution('9') == '11'\nassert solution('99') == '111'\nassert solution('999') == '11111'\nassert solution('9999') == '11111'\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12345') == '1+2+3+4+5'\nassert solution('1234567') == '1+2+3+4+5+6+7'\nassert solution('123456789') == '1+2+3+4+5+6+7+8+9'\n\n\"\"\"",
        "num_ids_2": 43,
        "num_ids_4": 72
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 4') == '1'\nassert solution('6\\n1 2 3 4 5 6') == '1'\n\"\"\"\n\n\"\"\"\nSolution Approach\n\nFor every card, if Snuke takes a card, then x = x + a_i and if Raccoon takes a card, then y = y + a_i.\nThen we calculate the difference between x and y and take the minimum of the difference and 1,\nwhich is the minimum difference between x and y.\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 3 4 5\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 10 10 10 10\") == \"0\"\nassert solution(\"2 10 10 10 10\") == \"1\"\nassert solution(\"2 10 10 10 10 10 10\") == \"2\"\n",
        "num_ids_2": 25,
        "num_ids_4": 53
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n1 2 3 4 5 6') == '1'\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 2\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\\n\") == \"1\\n\"\nassert solution(\"3\\n1 2 3\\n\") == \"1\\n\"\nassert solution(\"4\\n1 2 3 4\\n\") == \"0\\n\"\nassert solution(\"3\\n1 2 3\\n\") == \"1\\n\"\n\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 77
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"4\\n1 2 3 4\") == \"0\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 51
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 4 5\\n') == '1'\nassert solution('7\\n1 1 1 1 1 1\\n') == '0'\nassert solution('8\\n1 1 2 2 3 3\\n') == '1'\n\"\"\"\n\nimport sys\nimport math\n",
        "num_ids_2": 39,
        "num_ids_4": 59
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 2 3\\n\") == \"1\"\n\"\"\"\nimport sys",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('20') == '15800'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '8\\n'\n) == '15800'\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('20') == '15800'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20') == '15800'\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"15\\n20\") == \"15800\"\nprint('Success')",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"15\") == \"15\"\nassert solution(\"15\\n20\") == \"3100\"\nassert solution(\"15\\n20\\n25\") == \"3100\"\nassert solution(\"15\\n20\\n25\\n30\") == \"2300\"\nassert solution(\"15\\n20\\n25\\n30\\n35\") == \"3100\"\n\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 61
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('5\\n1\\n2\\n3\\n4\\n5') == '4500'\nassert solution('20\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20') == '1680'\n\nimport sys\nn = int(input())\nprint(n*800)\n",
        "num_ids_2": 34,
        "num_ids_4": 105
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '0'\nassert solution('6') == '200'\nassert solution('3') == '0'\n\"\"\"\n\nimport math\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n800\\n400\\n800\\n400\\n800') == '3900'\nassert solution('1\\n800') == '800'\n\"\"\"\n\nn = int(input())\nans = 0\nfor i in range(n):\n    ans += 800 * 15\n    ans -= 200\nprint(ans)\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n10\\n20\\n40\\n80\\n100\\n200\\n500\\n1000\\n1500') == '200'\nassert solution('5\\n15\\n25\\n35\\n45\\n55') == '75'\nassert solution('10\\n20\\n30\\n40\\n50\\n60\\n70\\n80\\n90\\n100\\n110\\n120\\n130\\n140\\n150\\n160\\n170\\n180\\n190\\n200\\n210\\n220\\n230\\n240\\n250\\n260\\n270\\n280\\n290\\n300\\n310\\n320\\n330\\n340\\n350\\n360\\n370\\n380\\n390\\n400\\n410\\n420\\n430\\n440\\n450\\n460\\n470\\n480\\n490\\n500\\n510\\n520\\n530\\n540\\n550\\n560\\n570\\n580\\n590\\n600') == '110'\nassert solution('50\\n100\\n150\\n200\\n250\\n300\\n350\\n400\\n450\\n500\\n550\\n600\\n650\\n700\\n750\\n800\\n850\\n900\\n950\\n1000\\n1050\\n1100\\n1150\\n1200\\n1250\\n1300\\n1350\\n1400\\n1450\\n1500\\n1550\\n1600\\n1650\\n1700\\n1750\\n1800\\n1850\\n1900\\n1950\\n2000\\n2050\\n2100\\n2150\\n2200\\n2250\\n2300\\n2350\\n2400\\n2450\\n2500\\n2550\\n2600\\n2650\\n2700\\n2750\\n2800\\n2850\\n2900\\n2950\\n3000\\n3050\\n3100\\n3150\\n3200\\n3250\\n3300\\n3350\\n3400\\n3450\\n3500\\n3550\\n3600\\n3650\\n3700\\n3750\\n3800\\n3850\\n3900\\n3950\\n4000\\n4050\\n4100\\n4150\\n4200\\n4250\\n4300\\n4350\\n4400\\n4450\\n4500\\n4550\\n4600\\n4650\\n4700\\n4750\\n4800\\n4850\\n4900\\n4950\\n5000\\n5050\\n5100\\n5150\\n5200\\n5250\\n5300\\n5350\\n5400\\n5450\\n5500\\n5550\\n5600\\n5650\\n5700\\n5750\\n5800\\n5850\\n5900\\n5950\\n6000\\n6050\\n6100\\n6150\\n6200\\n6250\\n6300\\n6350\\n6400\\n6450\\n6500\\n6550\\n6600\\n6650\\n6700\\n6750\\n6800\\n6850\\n6900\\n6950\\n7000\\n7050\\n7100\\n7150\\n7200\\n7250\\n7300\\n7350\\n7400\\n7450\\n7500\\n7550\\n7600\\n7650\\n7700\\n7750\\n7800\\n7850\\n7900\\n7950\\n8000\\n8050\\n8100\\n8150\\n8200\\n8250\\n8300\\n8350\\n8400\\n8450\\n8500\\n8550\\n8600\\n8650\\n8700\\n8750\\n8800\\n8850\\n8900\\n8950\\n9000\\n9050\\n9100\\n9150\\n9200\\n9250\\n9300\\n9350\\n9400\\n9450\\n9500\\n9550\\n9600\\n9650\\n9700\\n9750\\n9800\\n9850\\n9900\\n9950\\n100\\n150\\n200\\n250\\n300\\n350\\n400\\n450\\n500\\n550\\n600') == '22000'\n\n\"\"\"\n",
        "num_ids_2": 62,
        "num_ids_4": 1051
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\n\"\"\"\n\nimport numpy as np\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ant\") == \"abc\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n\"\"\"\n\n\"\"\"\nGiven a string that contains only lowercase English letters, swap cases.\n\nIn other words, convert all lowercase letters to uppercase letters and vice versa.\n\nExample\n\nFor s = \"code\", the output should be\nswapCases(s) = \"CODE\".\n\nFor s = \"abc\", the output should be\nswapCases(s) = \"ABC\".\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"bob\"\nassert solution(\"rec\") == \"cre\"\n",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ant\") == \"abc\"\n\nprint(solution(\"ant\"))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ant') == 'abc'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"bca\"\nassert solution(\"rec\") == \"cba\"\n\n----\n\n## NOTE: 'abc' = 'cba'\n## Solution: use recursion\n\n'''\nfrom typing import List, Union\nfrom collections import deque",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"ant\"\n) == \"abc\"\nassert solution(\n\"obe\"\n) == \"abc\"\nassert solution(\n\"rec\"\n) == \"abc\"\nassert solution(\n\"aaaa\"\n) == \"aab\"\nassert solution(\n\"aaa\"\n) == \"aba\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"boc\"\nassert solution(\"rec\") == \"cba\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ant\") == 'abc'\nassert solution(\"obe\") == 'abc'\nassert solution(\"rec\") == 'abc'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"101\") == \"2\"\nassert solution(\"111\") == \"1\"\nassert solution(\"101\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"101\") == \"2\"\n\"\"\"\n\nprint(input().count(\"1\"))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"101\") == \"2\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('101') == '2'\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101\") == 2\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"101\") == \"2\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('101') == '2'\n\nassert solution('000') == '0'\n\nassert solution('011') == '1'\n\"\"\"\n\ns1, s2, s3 = input().split()\n\nprint(int(s1) + int(s3) + int(s2))\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == 2\n\n\"\"\"\n\n\"\"\"\n\ninput\n\n101\n\noutput\n\n2\n\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('101') == '2'\nassert solution('10110101') == '3'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\") == \"48000\"\n\"\"\"\n\nn, k, x, y = (int(x) for x in input().split('\\n'))\n\nprint(n * k * (x if n == 1 else y))\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\") == \"48000\"\n\"\"\"\n\nimport sys\n\nN, K, X, Y = [int(x) for x in sys.stdin.readline().split()]\n\nres = X * K + (X + Y) * (N - K)\n\nprint(res)\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3\\n10000\\n9000\\n') == '48000'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\\n\") == \"48000\\n\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10000\\n3\\n10000\\n9000\") == \"48000\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 10000 9000\\n\") == \"48000\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n3\n10000\n9000\n''') == '48000'\nprint(\"Passed\")",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2\\n10\\n5\\n\") == \"10\\n10\\n10\\n10\\n10\\n\"\nprint(\"All tests passed.\")\n\"\"\"",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1\\n1\\n1\\n1\\n') == '9'\nassert solution('5\\n3\\n1\\n1\\n1\\n') == '12'\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 10000 9000\") == \"48000\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == '3'",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(solution_input) == solution_output\nprint(solution(solution_input))\n\n----\n1 + 2\n3\n\n3\n\n\n1 + 2 = 3\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 + 2') == '3'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 + 2') == '3'\n\"\"\"\n\nA, op, B = stdin.split()\n\nprint(eval(A + op + B))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 + 2') == '3'\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 + 2\") == \"3\"\nassert solution(\"1 - 2\") == \"3\"\nassert solution(\"1 + 2 + 3\") == \"6\"\nassert solution(\"1 - 2 - 3\") == \"0\"\nassert solution(\"2 - 1 + 3\") == \"3\"\n",
        "num_ids_2": 24,
        "num_ids_4": 52
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 + 2') == '3'\nprint(solution('1 + 2'))\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 + 2') == '3'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000\") == \"ABC\"\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('2000') == 'ARC'\n\"\"\"\n\nx = int(stdin.readline())\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000') == 'ABC'\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\"\n\nimport sys\n\nprint(\"ABC\" if int(sys.stdin.readline()) < 1200 else \"ARC\")\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1000') == 'ABC'\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000\") == \"ABC\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(10) == 'ARC'\nassert solution(12) == 'ARC'\nassert solution(13) == 'ARC'\nassert solution(1311) == 'ARC'\nassert solution(1211) == 'ARC'\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('700 600 780') == '1300'\n\"\"\"\n\nfrom typing import Iterator",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('700 600 780') == '1300'\nassert solution('8 10 13') == '4'\nassert solution('500 400 600') == '1250'\nassert solution('100000000 1 1') == '100000000 1'\nassert solution('1 2 3') == '1'\n",
        "num_ids_2": 25,
        "num_ids_4": 53
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('700 600 780') == '1300'\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\n\n\nimport math\n\na, b, c = map(int, input().split())\nprice = a + b + c\nprint(price)\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\n\nfrom collections import namedtuple\nfrom functools import reduce\nimport operator\n\n\nBell = namedtuple('Bell', ['cost', 'type'])\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('700 600 780') == '1300'\n\"\"\"\n\n\"\"\"\n\nProblem: Buying a bicycle\n\nWrite a program that takes three numbers a, b and c, each of them in range [1, 10000],\nand computes the minimum total price of two different kinds of bells, where one kind is\na single-digit number and the other kind is a double-digit number.\n\n-----Constraints-----\n - 1 \\leq a,b,c \\leq 10000\n - a, b and c are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\na b c\n\n-----Output-----\nPrint the minimum total price of two different kinds of bells.\n\n-----Sample Input-----\n150 100 50\n\n-----Sample Output-----\n850",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\n\na, b, c = [int(i) for i in input().split()]",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('700 600 780') == '1300'\n\"\"\"\n\na, b, c = map(int, input().split())\nprint(min(a, b, c) * 2 + max(a, b, c))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\n\na, b, c = map(int, stdin.split())",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nfrom unittest.mock import patch\nfrom io import StringIO\nimport unittest\n\nimport solution\n\n\nclass TestSolution(unittest.TestCase):\n    def test_sample_1(self):\n        captured_output = StringIO()\n        with patch('sys.stdout', captured_output):\n            solution.solution(stdin='2 3\\na\\tb\\tc\\n:d\\ne\\tf\\n'.format)\n        self.assertEqual(captured_output.getvalue(), '#####\\na#c#\\n#b#d#\\n#####\\n')\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\na_11 a_12\\na_21 a_22\") == \"#####\\n#a_11#\\n#a_12#\\n#a_21#\\n#a_22#\\n#####\"\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\na c\") == \"#####\\na c\\n#####\"\nassert solution(\"2 3\\nb c\") == \"#####\\nb c\\n#####\"\nassert solution(\"2 3\\nac\") == \"#####\\nac\\n#####\"\nassert solution(\"2 3\\nbc\") == \"#####\\nbc\\n#####\"\n\nprint(solution(\"2 3\\nac\"))",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '#1#\\n##2#'\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\nabc\\narc') == '#####\\n#abc#\\n#arc#\\n#####'\n\"\"\"\nimport sys\n\nH, W = [int(x) for x in sys.stdin.readline().split()]\n\nfor i in range(H):\n    row = sys.stdin.readline().strip()\n    print(\"#\" + row.center(W, \"#\") + \"#\")\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys\n\nclass Image:\n    def __init__(self, h, w):\n        self.h = h\n        self.w = w\n        self.pixels = []\n\n    def load_pixels(self, pixel_str):\n        self.pixels = [chr(int(x)) for x in pixel_str.split()]\n\n    def print(self):\n        for line in self.pixels:\n            print(''.join(line))\n        print()",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\na\\nc\\n') == '#\\n#a\\n#c\\n#'\n\nprint(solution(stdin))\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\na\\nc\") == \"#abc#\\n#arc#\\n#####\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\nabc\\narc') == '#####\\n#abc#\\n#arc#\\n#####'\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('IIDID') == '2'\nassert solution('II') == '0'\nassert solution('DDD') == '-1'\nassert solution('DDI') == '0'\nassert solution('DD') == '0'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"IIDID\") == 2\n\n------\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"IIDID\") == \"2\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"IIDID\") == 2\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"III\") == 3\nassert solution(\"IIIDI\") == 3\nassert solution(\"IIIDDD\") == 2\nassert solution(\"IDIDI\") == 1\nassert solution(\"IDIDDD\") == 0\n\"\"\"\nimport collections",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('IIDID') == 2\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"IIDID\") == 2\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\nIIDID''') == '2'\nassert solution('''2\nIDID''') == '0'\nassert solution('''1\nID''') == '0'\nassert solution('''1\nDID''') == '0'\nassert solution('''3\nDIDDI''') == '3'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"IIDID\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('IIDID') == '2'\nassert solution('IIIDI') == '3'\n\"\"\"\nimport sys\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11009 11332') == '4'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 0\nassert solution('1\\n2\\n') == 0\nassert solution('1\\n3\\n') == 1\nassert solution('1\\n2\\n') == 0\nassert solution('1\\n2\\n') == 0\n",
        "num_ids_2": 21,
        "num_ids_4": 47
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11009 11332') == 4\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11009 11332\") == 4\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11009 11332') == 4\nassert solution('22 123 123 212 231') == 0\nassert solution('111 222 333 444 555 6 666') == 9\nassert solution('9 8 7 6 5 4 3 2 1') == 6\n\"\"\"\n\na, b = stdin.strip().split()\na, b = int(a), int(b)\n\ncount = 0\n\nfor i in range(a, b + 1):\n    s = str(i)\n    if s == s[::-1]:\n        count += 1\n\nprint(count)\n",
        "num_ids_2": 23,
        "num_ids_4": 53
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11009 11332') == 4\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11009 11332\") == 4\n\"\"\"\n\na, b = map(int, stdin.split())\nprint(sum(map(lambda x: len(set(str(x))) == 1, range(a, b + 1))))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11009 11332\") == 4\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11009 11332') == 4\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11009 11332') == '4'\nprint(solution(stdin))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 4') == '3'\nassert solution('1 1 2') == '0'\nassert solution('4 2 3') == '1'\nassert solution('7 2 4') == '2'\nassert solution('4 1 2') == '0'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '3'\n\"\"\"\nimport sys\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 4') == '3'\nassert solution('3 2 3') == '1'\nassert solution('1 1 1') == '0'\nassert solution('1 2 3') == '1'\n\n\"\"\"\nimport collections\nimport sys\nfrom collections import Counter",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 4\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"3\"\nassert solution(\"3 1 2\") == \"3\"\nassert solution(\"3 1 3\") == \"0\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"3 2 3\") == \"1\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 4\") == '3'\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 4\") == \"3\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 1 4''') == 3\nassert solution('''3 1 5''') == 5\nassert solution('''100 100 100''') == 3\nassert solution('''3 2 3''') == 1\nassert solution('''1 1 1''') == 1\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 4\") == \"3\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 1 4''') == '3'\nassert solution('''1 2 3''') == '1'\nassert solution('''1 2 1''') == '1'\nassert solution('''1 2 3''') == '3'\nassert solution('''1 1 1''') == '0'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n1 2 3 4\\n') == '12'\n\n\"\"\"\n\nimport sys\n\nN, K = map(int, sys.stdin.readline().split())\n\nsticks = list(map(int, sys.stdin.readline().split()))\n\nprint(sum([max(sticks[i], sticks[i + 1]) for i in range(K - 1)]))\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == '12'\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == 12\n'''\n\nn, k = [int(i) for i in stdin.readline().strip().split()]\nsticks = [int(i) for i in stdin.readline().strip().split()]\nprint(sum(sorted(sticks)[:k]))\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5\") == 12\n\"\"\"\nimport math\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == \"12\"\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == 12\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4 5') == 12\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '12'\n\"\"\"\n\nfrom math import factorial as fac\n\nN, K = map(int, input().split())\nl = list(map(int, input().split()))\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5 3\n1 2 3 4 5\"\"\") == \"12\"\n\"\"\"\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == \"12\"\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 7') == 'B'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\"\n\nfrom typing import List, Tuple\nfrom decimal import Decimal\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 7\") == 'B'\nassert solution(\"1 5 2\") == 'A'\nassert solution(\"7 2 5\") == 'A'\nassert solution(\"1 7 2\") == 'B'\nassert solution(\"7 1 5\") == 'A'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 7\\n') == 'B'\nprint('Test pass.')\n\n-------------------------",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\"\n\nfrom typing import NamedTuple\n\n\nclass Stt(NamedTuple):\n    x: int\n    a: int\n    b: int\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_stdin) == test_stdout",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == 'A'\nassert solution('5 3 2') == 'B'\nassert solution('1 2 5') == 'B'\nassert solution('3 2 2') == 'A'\n\nfrom collections import defaultdict\nimport sys\nimport math",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 2 7''') == 'B'\nassert solution('''1 1 1''') == 'A'\n'''\nProblem Statement\nRambo, the famous actor is missing! He is known to be followed by a group of people who are trying to kill him.\nRambo is a member of the group, and is known to be at a certain position on a number line.\nThe rest of the group is trying to kill him in such a way that the last person to act before him dies is the actor.\nEach of the other people in the group is either standing strictly behind the person who is in front of him,\nor strictly behind him.\nThis group of people is trying to kill Rambo by any means necessary to achieve the result above.\nThey are currently sitting in a row.\nIf Rambo makes a move, it must not move past any of the other people in the row.\nRambo is just sitting in front of his next person, who is sitting next to him on the row.\nRambo wants to know what is the minimum number of moves that he will need to make in order to kill his next person.\n\n-----Constraints-----\n - 1 \\leq n \\leq 100\n - \\sum_{i=1}^{n} p_i = n\n - \\sum_{i=1}^{n} a_i = x\n - 1 \\leq a_i \\leq 1000\n - 1 \\leq p_i \\leq 1000\n - 1 \\leq x \\leq 1000\n\n-----Input-----\nThe first line of the input contains an integer n, the number of people.\nThe next line contains n integers, p_1, p_2,..., p_n, where p_i is the position of Rambo's next person.\nThe last line contains n integers, a_1, a_2,..., a_n, where a_i is the position of the person who is in front of Rambo.\n\n-----Output-----\nPrint the minimum number of moves Rambo will need to kill his next person.\n\n-----Sample Input-----\n5\n1 2 3 4 5\n3 4 5 6 7\n\n-----Sample Output-----\n3\n\nThe positions of Rambo's next people are 1, 2, 3, 4 and 5 respectively.\nThe positions of the people in front of Rambo are 3, 4, 5, 6 and 7 respectively.\nThe minimum number of moves is 3, because the person in front of the person in front of Rambo is the last person on the row.\n'''",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\"\n\ns = input()\nprint(s[:4] + '18' + s[4:])\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2017/01/01\") == \"2018/01/01\"\nassert solution(\"2018/01/02\") == \"2018/01/02\"\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(2017/01/07) == '2018/01/07'\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\nprint(solution('2017/01/07'))\n\"\"\"\n\nimport unittest\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\nassert solution(\"2017/1/7\") == \"2018/1/7\"\n\nimport sys\nfrom typing import List, Union",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a\\nc\\nb\\na\\na\\na\\nb\\na\\nb\\na\") == \"aac\"\nassert solution(\"a\\nc\\nb\\na\\na\\na\\nb\\na\\nb\\na\") == \"\"\nassert solution(\"a\\nc\\nb\\na\\na\\na\\nb\\na\\nb\\na\") == \"aac\"\n\"\"\"\n\nimport string\nfrom typing import List, Tuple\n",
        "num_ids_2": 55,
        "num_ids_4": 84
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\nabaaa') == 'aa'\nassert solution('4\\nabaaa') == 'abaaa'\nassert solution('3\\naccacc') == 'aa'\nassert solution('3\\ncdcd') == 'cdcd'\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430:\n\u0421\u0442\u0430\u0432\u0438\u0442\u044c \u043b\u044e\u0431\u044b\u0435 \u0446\u0438\u0444\u0440\u044b \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0431\u0443\u043a\u0432 \u0432 \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438.\n\n-----\u0412\u0445\u043e\u0434-----\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0434\u043b\u0438\u043d\u043e\u0439 \u043e\u0442 1 \u0434\u043e 50 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e.\n\n-----\u0412\u044b\u0445\u043e\u0434-----\n\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\n\n-----\u041f\u0440\u0438\u043c\u0435\u0440\u044b-----\n\u0422\u0435\u0441\u0442 1\n>>> 6\n>>> abacd\n>>> 6\n>>> abacd\n\u0422\u0435\u0441\u0442 2\n>>> 8\n>>> 12a23b\n>>> 8\n>>> 12a23b\n\u0422\u0435\u0441\u0442 3\n>>> 7\n>>> 34567\n>>> 7\n>>> 34567\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 58
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cbaa\\ndaacc\\nacacac\") == \"aac\"\nprint(\"Passed\")\n\"\"\"\n\nimport unittest",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\ncbaa\\ndaacc\\nacacac') == 'aac'\nassert solution('2\\nab\\nba') == 'ba'\nassert solution('1\\nab') == 'ab'\n\nprint(solution(stdin.read()))\n\n------Solution------\n",
        "num_ids_2": 39,
        "num_ids_4": 52
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\"\nassert solution(\"5\\tcba\\nbaa\\ncaa\\nac\\naa\") == \"aa\"\nassert solution(\"1\\ta\\nb\\nc\\n\") == \"\"\nassert solution(\"3\\ta\\na\\nb\\na\") == \"a\"\nassert solution(\"1\\taa\\nb\\nb\") == \"\"",
        "num_ids_2": 50,
        "num_ids_4": 84
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('a\\nb\\nc\\nd\\ne') == 'd'\nassert solution('c\\nc\\nb\\na\\n') == 'c'\nassert solution('ab\\nbc\\na\\nb') == 'b'\nassert solution('ab\\nab\\nab\\nab') == ''\nassert solution('a\\na\\na\\na\\na\\na\\na\\na') == 'a'\n",
        "num_ids_2": 36,
        "num_ids_4": 70
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\ncbaa\\ndaacc\\nacacac') == 'aac'\n\"\"\"\n\nfrom typing import List\nimport re",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abc') == 'abc'\nassert solution('cbaa') == 'aac'\n\"\"\"\n\nfrom typing import List, Tuple\n\n\nclass Solution:\n    def longest_str_of_characters(self, stdin: str) -> str:\n        # find longest string of characters among stdin\n        chars = list(stdin)\n        all_combinations = []\n        for i in range(1, len(chars) + 1):\n            all_combinations.append(self.get_all_possible_combinations(chars, i))\n        all_combinations.sort(key=len)\n        return all_combinations[-1]\n\n    def get_all_possible_combinations(self, chars: List[str], size: int) -> List[Tuple[str]]:\n        result = []\n        if len(chars) < size:\n            return result\n        for i in range(size):\n            tmp_list = chars[:]\n            tmp_str = ''\n            for j in range(size):\n                tmp_str += tmp_list.pop(i)\n            result.append(tmp_str)\n        return result\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n24 30\") == \"7\"\n\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 24 30') == 7\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 4\\n2 3\\n3 2\\n4 3\\n5') == '4'\nassert solution('4\\n1 4\\n2 3\\n3 2\\n4 3\\n5') == '4'\nassert solution('3\\n1 3\\n2 2\\n4') == '0'\nassert solution('1\\n1 1\\n1 1') == '0'\nassert solution('2\\n1 1\\n1 1') == '1'\n\n\"\"\"\n\nimport unittest\n",
        "num_ids_2": 58,
        "num_ids_4": 97
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n24 30\") == \"7\"\n\"\"\"\n\nn = int(input())\nseat = list(map(int, input().split()))\ncount = 0\nfor i in range(n):\n    if i == 0:\n        count += (seat[i + 1] - seat[i])\n    elif i == n - 1:\n        count += (seat[i] - seat[i - 1])\n    else:\n        count += (min(seat[i + 1], seat[i]) - max(seat[i], seat[i - 1]))\nprint(count)\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n24 30\") == \"7\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n24 30') == '7'\n\"\"\"\nimport math\n\nN = int(input())\nseats = {}\nfor _ in range(N):\n    start, end = map(int, input().split())\n    seats[start] = seats.get(start, 0) + (end - start + 1)\ntotal = 0\nfor key in seats.keys():\n    total += seats[key]\nprint(total)",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n24 30\") == \"7\"\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 24 30\\n') == '7'\n\"\"\"\n\n\"\"\"\nWrite a Python program to print all Armstrong numbers between 1 and 10000.\n\nA positive integer is called an Armstrong number of order n if\nabcd... = an + bn + cn + dn +...\nIn case of an Armstrong number of 3 digits, the sum of cubes of each digit is equal to the number itself. For example,\n371 = 3**3 + 7**3 + 1**3\n\n-----Constraints-----\nn = 0,1,2,3,4,5,6,7,8,9\n\n-----Input-----\nThe first line contains a single integer T, the number of test cases.\nEach test case consists of a single line of input, containing a single integer n.\n\n-----Output-----\nPrint all Armstrong numbers between 1 and 10000 in a comma-separated sequence on a single line.\n\n-----Sample Input-----\n3\n0\n1\n4\n\n-----Sample Output-----\n0\n1\n:\n4\n\"\"\"\n\n\"\"\"\nWrite a Python program to find the number of prime numbers less than a non-negative number, n.\n\n-----Constraints-----\nn = 1\n\n-----Input-----\nInput a number, n.\n\n-----Output-----\nPrint the count of prime numbers which are less than n.\n\n-----Sample Input-----\n10\n\n-----Sample Output-----\n4",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 24 30\") == \"7\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(1)) == \"1\"\nassert solution(str(5)) == \"5\"\nassert solution(str(100)) == \"100\"\n\"\"\"\n\nimport sys\nimport itertools",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4') == '6'\n'''\n\nn, m = map(int, input().split())\nblocks = 2*n*m\nprint(blocks)",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4') == '6'\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == \"6\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"6\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n\") == '6'\n\"\"\"\n\nn, m = [int(i) for i in input().split()]\n\nprint((n + m) * (n + m - 1) // 2)\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == 6\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4\\n3 4') == '6'\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4') == '6'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4') == '6'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5') == 'Possible'\nassert solution('1 2') == 'Impossible'\nassert solution('2 3') == 'Possible'\nassert solution('5 3') == 'Impossible'\nassert solution('4 6') == 'Possible'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5') == 'Possible'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\") == \"Possible\"\nassert solution(\"4 4\") == \"Impossible\"\nassert solution(\"100 100\") == \"Impossible\"\n\"\"\"\n\n\"\"\"\nHint\n\nYou will need to use the third variation of the Chinese Remainder Theorem (CRT).\n\nCRT Theorem\n\nA solution is possible iff:\na) There exists integers n_1, n_2, n_3 such that n_1 + n_2 + n_3 = A, n_1, n_2, n_3 are all positive and coprime.\n\nCRT Solution:\nLet m_1, m_2, m_3 be the three moduli for the three goats.\nThe CRT solution is:\nx_1 = m_1 * ((m_1 * A + m_2 * B) % m_3)\nx_2 = m_2 * ((m_1 * A + m_2 * B) % m_3)\nx_3 = m_3 * ((m_1 * A + m_2 * B) % m_3)\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\") == \"Possible\"\nassert solution(\"3 2\") == \"Impossible\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n\"\"\"\n\nA, B = map(int, input().split())\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5') == 'Possible'\nassert solution('6 5') == 'Impossible'\nassert solution('6 6') == 'Impossible'\n\n---------------------",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'''4 5\n'''\n) == \"Possible\"\nassert solution(\n'''7 6\n'''\n) == \"Possible\"\nassert solution(\n'''4 6\n'''\n) == \"Impossible\"\nassert solution(\n'''20 3\n'''\n) == \"Impossible\"\nassert solution(\n'''9 2\n'''\n) == \"Impossible\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"Possible\"\nassert solution(\"4 4\") == \"Impossible\"\nassert solution(\"9 9\") == \"Impossible\"\nassert solution(\"3 4\") == \"Possible\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\n') == \"Possible\"\nassert solution('5 4\\n') == \"Impossible\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"?tc????\") == \"atcoder\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('?tc????') == 'atcoder'\n\nassert solution('coder') == 'coder'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"coder\") == \"atcoder\"\n\"\"\"\n\nimport string\n\ns = input().strip()\nt = input().strip()\n\nfor i in range(len(string.ascii_lowercase)):\n    if s.count(string.ascii_lowercase[i]) >= t.count(string.ascii_lowercase[i]):\n        s = s.replace(string.ascii_lowercase[i], \"?\")\n    else:\n        break\n\nprint(s)\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"?tc????\") == \"atcoder\"\nassert solution(\"coder\") == \"coder\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('?tc????') == 'atcoder'\n\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('coder') == 'atcoder'\nprint(solution('?tc????'))\nassert solution('coder') == 'atcoder'\nassert solution('?tc????') == 'UNRESTORABLE'\nprint(solution('coder'))\nassert solution('coder') == 'atcoder'\nassert solution('?tc????') == 'UNRESTORABLE'\nprint(solution('coder'))\n\n\"\"\"\n\nimport unittest\n",
        "num_ids_2": 26,
        "num_ids_4": 55
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == atcoder\n\"\"\"\n\n\n\nimport sys\n\ns, t = sys.stdin.read().split('\\n')",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == \"atcoder\"\n\nYou can do it from scratch.\n\nIt is better to use Dynamic Programming (DP) to solve this problem.\n\nIt is worth noting that the string S' is obtained by replacing? to every possible letter, in all possible orders.\n\nIn other words, the string S' can be written as follows:\n S' = S \\sigma S, \\sigma = \\{a, b, c, \\ldots, z\\}\nwhere a, b, c, \\ldots, z are all lowercase English letters.\n\nFor example,\nsolution(\"?tc????\") = \"atcoder\"\nsolution(\"coder\") = \"coder\"\n\nA dynamic program that solves the problem in O(|S|) can be found in the video below.\n\n-----Solution-----\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\natcoder\n\n\"\"\") == \"atcoder\"\nassert solution(\n\"\"\"\n?tc????\ncoder\n\n\"\"\") == \"UNRESTORABLE\"\nassert solution(\n\"\"\"\natcoder\n\n\"\"\") == \"atcoder\"\n\"\"\"\n\nAt the first glance, the problem seems very easy.\n\nHowever, I got a feeling that it's not quite a simple task, so I want to explore more.\n\nAt first I thought about finding the lexicographically smallest string, so I just wrote it and checked the solution.\n\nHowever, there is a better way to write it.\n\nI tried to think about it in the following way:\n\n1. My condition 2 is also written in a way that the string S' always satisfies Condition 1.\n\nThat means,\n\nS' is the lexicographically smallest string among the strings that satisfies Condition 1.\n\nIf Condition 1 is true, then the string S is equal to the lexicographically smallest string among the strings that satisfies Condition 2.\n\nSo, now I want to know the string S.\n\nI tried to write this in one line, but I failed.  \n\nThere is no way to use a variable and a string in one line.\n\nAnd now I can't really say how I got the solution.\n\n(This question is very hard, so it's not easy to tell.)\n\nI don't know why the strings do not match even if Condition 1 is true.\n\n...\n\nThe answer is the last line of the code.\n\nHowever, I got confused, so I will write the code line by line.\n\nAt first I wrote an algorithm that finds the lexicographically smallest string among the strings that satisfies Condition 2.\n\nIf such a string exists, then it's the string S.\n\nHowever, I got an error (TypeError: 'NoneType' object is not callable).\n\nWhat does this mean?\n\nI think it means that the problem is very easy but it is very hard.\n\nThe first line of the code is \"line1 = [s[i+j] for j in range(min(len(s)-i, len(t)))\"\n\nThere is no s[i+j] in the list comprehension because s is None.\n\nI wrote \"if line1 is None:\" after \"return None\" and it was not working.\n\nSo I changed to \"if line1 is None:\" and it worked.\n\nAt first I wrote \"if line1 is None:\", but it was also not working.\n\nSo I wrote \"if line1 is None: if condition else line1\" and it worked.\n\nThis is the result of the problem.\n\nI could not explain it to you.\n\nThere is another problem where it's necessary to pass string objects as parameters.\n\nBut it's not important.\n\nAt first I wrote \"if type(line1) is str\" and it was not working.\n\nSo I changed to \"if line1 is not None: if condition else line1\" and it worked.\n\nSo the answer is the last line of the code.\n\nI will write the code line by line again.\n\nAt first I wrote\n\nline1 = [s[i+j] for j in range(min(len(s)-i, len(t)))]\n\nI wrote \"line1 = [s[i+j] for j in range(min(len(s)-i, len(t)))]\" because it was working.\n\nHowever, line1 = [s[i+j] for j in range(min(len(s)-i, len(t)))] is not working.\n\n...\n\nSo I wrote \"line1 = [s[i+j] for j in range(min(len(s)-i, len(t)))] if type(line1) is str else None\" and it worked.\n\nAt first I wrote\n\nline1 = [s[i+j] for j in range(min(len(s)-i, len(t)))] if type(line1) is str else None\n\nand it was working.\n\nHowever, line1 = [s[i+j] for j in range(min(len(s)-i, len(t)))] if type(line1) is str else None is not working.\n\n...\n\nSo I changed the code to the next one.\n\nAt first I wrote\n\nline1 = [s[i+j] for j in range(min(len(s)-i, len(t)))] if type(line1) is str else [s[i+j] for j in range(min(len(s)-i, len(t)))] if type(line1) is str else None\n\nI wrote \"line1 = [s[i+j] for j in range(min(len(s)-i, len(t)))] if type(line1) is str else [s[i+j] for j in range(min(len(s)-i, len(t)))] if type(line1) is str else None\" and it worked.\n\nHowever, line1 = [s[i+j] for j in range(min(len(s)-i, len(t)))] if type(line1) is str else [s[i+j] for j in range(min(len(s)-i, len(t)))] if type(line1) is str else None is not working.\n\n...\n\nSo I changed the code to the next one.\n\nAt first I wrote\n\nline1 = [s[i+j] for j in range(min(len(s)-i, len(t)))] if type(line1) is str else [s[i+j] for j in range(min(len(s)-i, len(t)))] if type(line1) is str else None\n\nI wrote \"line1 = [s[i+j] for j in range(min(len(s)-i, len(t)))] if type(line1) is str else [s[i+j] for j in range(min(len(s)-i, len(t)))] if type(line1) is str else None\" and it worked.\n\nHowever, line1 = [s[i+j] for j in range(min(len(s)-i, len(t)))] if type(line1) is str else [s[i+j] for j in range(min(len(s)-i, len(t)))] if type(line1) is str else None is not working.\n\n...\n\nSo I changed the code to the next one.\n\nAt first I wrote\n\nline1 = [s[i+j] for j in range(min(len(s)-i, len(t)))] if type(line1) is str else [s[i+j] for j in range(min(len(s)-i, len(t)))] if type(line1) is str else None\n\nI wrote \"line1 = [s[i+j] for j in range(min(len(s)-i, len(t)))] if type(line1) is str else [s[i+j] for j in range(min(len(s)-i, len(t)))] if type(line1) is str else None\" and it worked.\n\nHowever, line1 = [s[i+j] for j in range(min(len(s)-i, len(",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"coder\") == \"atcoder\"\nassert solution(\"a?c???z\") == \"atcoder\"\nassert solution(\"coder\") == \"atcoder\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"kode\") == \"kode\"\n",
        "num_ids_2": 29,
        "num_ids_4": 78
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2002 2017\") == \"2032\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1, 2) == 3\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2002\n2017''') == '2032'\n\n\"\"\"\n\nimport math\nr, g = map(int, input().split())",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"string\") == \"4\"\nassert solution(\"letter\") == \"2\"\nassert solution(\"aaaaaa\") == \"0\"\nassert solution(\"uncopyrightable\") == \"13\"\nassert solution(\"ambidextrously\") == \"12\"\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('string') == 4\nassert solution('letter') == 2\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('ambidextrously') == 12\n",
        "num_ids_2": 16,
        "num_ids_4": 36
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a\") == 0\nassert solution(\"aa\") == 0\nassert solution(\"ab\") == 0\nassert solution(\"aab\") == 1\nassert solution(\"aabaa\") == 2\n",
        "num_ids_2": 16,
        "num_ids_4": 33
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(string) == 4\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"string\") == \"4\"\nassert solution(\"letter\") == \"2\"\nassert solution(\"aaaaaa\") == \"0\"\nassert solution(\"uncopyrightable\") == \"13\"\nassert solution(\"ambidextrously\") == \"12\"\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('string') == 4\nassert solution('letter') == 2\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('ambidextrously') == 12\n",
        "num_ids_2": 16,
        "num_ids_4": 36
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a\") == 0\nassert solution(\"ab\") == 1\nassert solution(\"aa\") == 0\nassert solution(\"aba\") == 1\nassert solution(\"aab\") == 2\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('string') == '4'\nassert solution('letter') == '2'\nassert solution('aaaaaa') == '0'\nassert solution('uncopyrightable') == '13'\nassert solution('ambidextrously') == '12'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"string\") == 4\nassert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n",
        "num_ids_2": 16,
        "num_ids_4": 36
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a\") == 1\nassert solution(\"aa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"assesses\") == 1\nassert solution(\"uncopyrightable\") == 13\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 34
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n",
        "num_ids_2": 27,
        "num_ids_4": 58
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('19931568 1000000 6') == 'TLE'\n",
        "num_ids_2": 27,
        "num_ids_4": 58
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10000 5\") == \"AC\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n\nimport sys;",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('19931568 1000000 6') == 'TLE'\nassert solution('100000000 10001 5') == 'AC'\n",
        "num_ids_2": 27,
        "num_ids_4": 58
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100000000 500 3\\n') == 'TLE'\nassert solution('100000000 50 3\\n') == 'AC'\nassert solution('100000000 10001 5\\n') == 'TLE'\nassert solution('100000000 10000 5\\n') == 'AC'\nassert solution('19931568 1000000 6\\n') == 'TLE'\n\nimport io\nimport sys\n",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10000 5\") == \"AC\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n\"\"\"\n\nimport math",
        "num_ids_2": 27,
        "num_ids_4": 58
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100000000 500 3\") == 'TLE'\nassert solution(\"100000000 50 3\") == 'AC'\nassert solution(\"100000000 10001 5\") == 'TLE'\nassert solution(\"100000000 10001 6\") == 'TLE'\n\n\"\"\"\n\nimport re\n",
        "num_ids_2": 27,
        "num_ids_4": 57
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100000000 500 3\\n\") == \"TLE\"\nassert solution(\"100000000 50 3\\n\") == \"AC\"\nassert solution(\"100000000 10001 5\\n\") == \"TLE\"\nassert solution(\"100000000 10000 5\\n\") == \"AC\"\nassert solution(\"19931568 1000000 6\\n\") == \"TLE\"",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\nprint(solution(INPUT))\n\nInput\n-----\nThe first four lines of input, that each contains four integers, describe the 16 integers in the $4 \\times 4$ grid of 2048 puzzle. The $j$-th integer in the $i$-th line denotes the content of the cell located at the $i$-th row and the $j$-th cell. For this problem, all integers in the input will be either {0, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024}. Integer 0 means an empty cell.\n\nThe fifth line of input contains an integer 0, 1, 2, or 3 that denotes a left, up, right, or down move executed by the player, respectively.\n\nOutput\n-----\nOutput four lines with four integers each. Two integers in a line must be separated by a single space. This describes the new state of the $4 \\times 4$ grid of 2048 puzzle. Again, integer 0 means an empty cell. Note that in this problem, you can ignore the part from the 2048 puzzle where it introduces a new random tile with a value of either 2 or 4 in an empty spot of the board at the start of a new turn.\n\nSample Input 1\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n0\nSample Output 1\n4 0 0 0\n4 16 8 2\n2 64 32 4\n2048 64 0 0\n\nSample Input 2\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n1\nSample Output 2\n2 16 8 4\n4 64 32 4\n2 1024 64 0\n1024 0 0 0\n\nSample Input 3\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n2\nSample Output 3\n0 0 0 4\n4 16 8 2\n2 64 32 4\n0 0 2048 64\n\nSample Input 4\n2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n0\nSample Output 4\n4 0 0 0\n8 4 0 0\n32 32 0 0\n32 32 32 0\n\nSample Input 5\n2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n0\nSample Output 5\n4 4 8 0\n8 4 0 0\n32 32 0 0\n32 32 32 0",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\n\n\"\"\"\n\nimport math\n\nclass Solution:\n    def solution(self, stdin):\n        [grid, actions] = self.parseInput(stdin)\n        grid = self.move(grid, actions)\n        self.printOutput(grid)\n\n    def parseInput(self, stdin):\n        grid = []\n        actions = []\n\n        for line in stdin.split('\\n'):\n            if not line.strip():\n                continue\n\n            grid.append([int(n) for n in line.split()])\n\n        for action in stdin.split('\\n')[4].split():\n            actions.append(int(action))\n\n        return [grid, actions]\n\n    def move(self, grid, actions):\n        size = len(grid)\n\n        def moveRow(row, direction):\n            if direction == 0:\n                row = row[1:] + [0]\n            elif direction == 1:\n                row = [0] + row[:-1]\n            elif direction == 2:\n                row = row[-1:] + [0]\n            else:\n                row = [0] + row[:-1]\n\n            return row\n\n        def merge(row):\n            count = 0\n            for i in range(len(row) - 1, 0, -1):\n                if row[i] == row[i - 1]:\n                    row[i - 1] *= 2\n                    row[i] = 0\n                    count += 1\n            return row, count\n\n        def moveGrid(grid):\n            newGrid = []\n            for row in grid:\n                newRow = []\n                for i in range(size):\n                    newRow.append(moveRow(row, actions[i]))\n                newGrid.append(newRow)\n\n            return newGrid\n\n        def moveGridLeft(grid):\n            return [moveRow(row, 0) for row in grid]\n\n        def moveGridRight(grid):\n            return [moveRow(row, 2) for row in grid]\n\n        count = 0\n        while True:\n            newGrid = moveGrid(grid)\n            newGrid, count = merge(newGrid)\n            grid = moveGridLeft(newGrid) if actions[3] else moveGridRight(newGrid)\n            if count == 0:\n                break\n\n        return newGrid\n\n    def printOutput(self, grid):\n        for row in grid:\n            print(' '.join([str(n) for n in row]))\n\nSolution().solution(stdin)\n",
        "num_ids_2": 111,
        "num_ids_4": 166
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0') == '4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0'\nassert solution(\n    '2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64'\nassert solution(\n    '2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2') == '0 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64'\nassert solution(\n    '2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3') == '0 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64'\n\n\"\"\"\n\n\nimport sys\nimport math\nfrom collections import defaultdict\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\nassert solution(test_input_4) == test_output_4\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n2\\n3\") == \"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\\n0\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n2\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\\n0 0 0\"\n",
        "num_ids_2": 114,
        "num_ids_4": 233
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\\n\") == '4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\\n'\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\\n\") == '2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0 0 0 0\\n'\n\n-----Notes-----\nAll the integers in the input will be valid, that is, it will be an integer in the set {0, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024}.\n\"\"\"",
        "num_ids_2": 125,
        "num_ids_4": 125
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\"\n",
        "num_ids_2": 110,
        "num_ids_4": 220
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0') == '4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0'\n\nimport os,sys,inspect\ncurrentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))\nparentdir = os.path.dirname(currentdir)\nsys.path.insert(0,parentdir)\n\nfrom functions import convert_input\nimport unittest\n\nclass TestConvertInput(unittest.TestCase):\n    def test_convert_input(self):\n        stdin = \"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\"\n        stdin = convert_input(stdin)\n        self.assertEqual(stdin, ['2', [2, 0, 0, 2], ['4', 16, 8, 2], ['2', 64, 32, 4], [1024, 1024, 64, 0]])\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\") == \"2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n4\") == \"0 0 0 0\\n0 0 0 0\\n2 64 32 4\\n0 0 2048 64\\n\"\n",
        "num_ids_2": 115,
        "num_ids_4": 229
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 0 0 2\\\\n4 16 8 2\\\\n2 64 32 4\\\\n1024 1024 64 0\\\\n0\\\\n\") == \"4 0 0 0\\\\n4 16 8 2\\\\n2 64 32 4\\\\n2048 64 0 0\\\\n\"\nassert solution(\"2 0 0 2\\\\n4 16 8 2\\\\n2 64 32 4\\\\n1024 1024 64 0\\\\n1\\\\n\") == \"2 16 8 4\\\\n4 64 32 4\\\\n2 1024 64 0\\\\n1024 0 0 0\\\\n\"\nassert solution(\"2 0 0 2\\\\n4 16 8 2\\\\n2 64 32 4\\\\n1024 1024 64 0\\\\n2\\\\n\") == \"0 0 0 4\\\\n4 16 8 2\\\\n2 64 32 4\\\\n0 0 2048 64\\\\n\"\nassert solution(\"2 0 0 2\\\\n4 16 8 2\\\\n2 64 32 4\\\\n1024 1024 64 0\\\\n3\\\\n\") == \"2 0 0 0\\\\n4 16 8 0\\\\n2 64 32 4\\\\n0 0 2048 64\\\\n\"\n\n-----Problem-----\nYou are given a list of n+1 integers in the inclusive range of 1\u2026n, all of them are non-negative integers of the set {0, 1, 2, \u2026, n}.\n\nThe nth integer in the list (indexed from 0) is the number of ways to choose exactly k items from the first n+1 items such that the sum of them is exactly 0.\n\nFor example, if n=4 and k=2, then the list of all such combinations is {0,0,1,1}, {0,0,2,2}, {1,1,1,2} and {2,2,3}.\n\nIn this problem, we will consider the value of k to be always equal to the length of the list.\n\nFind the sum of the only eleven integers in the list that produce the maximum value of n!\n-----Solution-----\n",
        "num_ids_2": 119,
        "num_ids_4": 237
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"0\"\nassert solution(\"CH3OH 1\") == \"1\"\n",
        "num_ids_2": 21,
        "num_ids_4": 48
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('H2O2') == 0\nassert solution('H2O2H2O2H2O2') == 4\nassert solution('H2O2H2O2H2O2H2O2H2O2') == 6\nassert solution('C2H6 10') == 6\nassert solution('C3H8') == 0\n",
        "num_ids_2": 30,
        "num_ids_4": 69
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"H 2\") == 0\nassert solution(\"O\") == 0\nassert solution(\"H2O\") == 2\nassert solution(\"C2H6 10\") == 6\nassert solution(\"C3H8\") == 1\n",
        "num_ids_2": 17,
        "num_ids_4": 39
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"C2H6 10\") == \"0\"\nassert solution(\"H2OC100H\") == \"0\"\nassert solution(\"C3H8\") == \"6\"\nassert solution(\"CH3OH 1\") == \"1\"\nassert solution(\"C6H6OCH2O 10\") == \"0\"\n",
        "num_ids_2": 28,
        "num_ids_4": 54
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"H2O 1\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"0\"\nassert solution(\"C6H6OCH2O 10\") == \"12\"\nassert solution(\"CH3OH 1\") == \"1\"\n",
        "num_ids_2": 27,
        "num_ids_4": 58
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(A) == B\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"6\"\nassert solution(\"CH3OH 1\") == \"1\"\n",
        "num_ids_2": 21,
        "num_ids_4": 48
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"6\"\nassert solution(\"CH3OH 1\") == \"1\"\n",
        "num_ids_2": 21,
        "num_ids_4": 48
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"6\"\nassert solution(\"CH3OH 1\") == \"1\"\n",
        "num_ids_2": 21,
        "num_ids_4": 48
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"H2O 2\") == \"0\"\nassert solution(\"H2O 2\") == \"0\"\nassert solution(\"C2H6 3\") == \"0\"\nassert solution(\"C2H6 3\") == \"0\"\nassert solution(\"C2H6 3\") == \"0\"\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'",
        "num_ids_2": 41,
        "num_ids_4": 77
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\nprint('Success')\n\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 77
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(SOMECHORESARETOUGH) == 'PASS'\nassert solution(HAPPYBIRTHDAY) == 'FAIL'\nassert solution(SECRET) == 'PASS'\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 45
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n",
        "num_ids_2": 41,
        "num_ids_4": 77
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\"\"\"\n\n\nimport string\n",
        "num_ids_2": 41,
        "num_ids_4": 77
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'",
        "num_ids_2": 41,
        "num_ids_4": 77
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 77
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(STDIN_SIO.getvalue()) == EXPECTED\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n\"\"\"\n\nimport unittest\nimport string\nimport random\n\n\nclass TestValidPassword(unittest.TestCase):\n    TEST_CASES = (\n        ('ABC HAPPYBIRTHDAYCACEY', 'PASS'),\n        ('ABC TRAGICBIRTHDAYCACEY', 'FAIL'),\n        ('ABC HAPPYBIRTHDAY', 'FAIL'),\n        ('SECRET SOMECHORESARETOUGH', 'PASS')\n    )\n\n    def test_valid_password(self):\n        for password, expected in self.TEST_CASES:\n            self.assertEqual(expected, solution(password))\n",
        "num_ids_2": 41,
        "num_ids_4": 77
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 77
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('([] [] ]') == ']'\nassert solution('(([] [[]] ())') == 'ok so far'\nassert solution('[ { { () () () () } } ] () {}') == ']'\nassert solution('[ { [[()]] (({})) } ] () {}') == 'ok so far'\n",
        "num_ids_2": 28,
        "num_ids_4": 72
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"8\\n([] [] ]\\n\"\n) == \"]\"\nassert solution(\n    \"13\\n(([] [[]] ())\\n\"\n) == \"ok so far\"\nassert solution(\n    \"21\\n[ { { () () () () } } ]\\n\"\n) == \"]\"\nassert solution(\n    \"27\\n[ { [[()]] (({})) } ] () {}\\n\"\n) == \"ok so far\"\n\nprint(\"Test finished.\")",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"([] [] ]\") == \"]\"\nassert solution(\"(([] [[]] ())\") == \"ok so far\"\nassert solution(\"[ { { () () () () } } ] () {}\") == \"]\"\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == \"ok so far\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 72
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"[ { { () } ] ()\") == \"[ { { () } ] ()\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n([] [] ]\") == \"]\"\nassert solution(\"13\\n(([] [[]] ())\") == \"ok so far\"\nassert solution(\"21\\n[ { { () () () () } ]\") == \"]\"\nassert solution(\"27\\n[ { [[()]] (({})) } ] () {}\") == \"ok so far\"\n\nprint(solution(\"8\\n([] [] ]\"))\nprint(solution(\"13\\n(([] [[]] ())\"))\nprint(solution(\"21\\n[ { { () () () () } } ]\"))\nprint(solution(\"27\\n[ { [[()]] (({})) } ] () {}\"))\n",
        "num_ids_2": 34,
        "num_ids_4": 81
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"([] [] ]\") == \"]\"\nassert solution(\"(([] [[]] ())\") == \"ok so far\"\nassert solution(\"[ { { () () () () } } ] () {}\") == \"]\"\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == \"ok so far\"\n\nprint('Success')",
        "num_ids_2": 28,
        "num_ids_4": 72
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"([] [] ]\") == \"]\"\nassert solution(\"(([] [[]] ())\") == \"ok so far\"\nassert solution(\"[ { { () () () () } } ] () {}\") == \"]\"\n\n\"\"\"\n\nimport re",
        "num_ids_2": 28,
        "num_ids_4": 48
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"([] [] ]\") == \"]\"\nassert solution(\"(([] [[]] ())\") == \"ok so far\"\nassert solution(\"[ { { () () () () } } ] () {}\") == \"]\"\nassert solution(\"(() ())\") == \"ok so far\"\nassert solution(\"(() )\") == \")\"\n",
        "num_ids_2": 28,
        "num_ids_4": 62
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"([] [] ]\") == \"]\"\nassert solution(\"[ { { () () () () } } ] () {}\") == \"ok so far\"\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == \"]\"\nassert solution(\"[ { ((())) } ] () {}\") == \"]\"\n\"\"\"\n",
        "num_ids_2": 35,
        "num_ids_4": 73
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"[ { ({ () () } } ] ()\") == \"]\"\nassert solution(\"[ { ({ () } ) } ] ()\") == \"ok so far\"\nassert solution(\"[ { ({ () ) } ] ()\") == \"]\"\nassert solution(\"[ { ({ () ) } ] ()\") == \"ok so far\"\nassert solution(\"[ { ({ () ) } ] ()\") == \"]\"\n",
        "num_ids_2": 37,
        "num_ids_4": 72
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    5\n    apple\n    ear\n    real\n    letters\n    style\n    \"\"\"\n) == \"Fair Game\"\n\nassert solution(\n    \"\"\"\n    3\n    apple\n    extra\n    apple\n    \"\"\"\n) == \"Player 1 lost\"\n\nassert solution(\n    \"\"\"\n    2\n    apple\n    neat\n    \"\"\"\n) == \"Player 2 lost\"\n\n\"\"\"\nbyr : byr (Birth Year)\niyr : iyr (Issue Year)\neyr : eyr (Expiration Year)\nhgt : hgt (Height)\nhcl : hcl (Hair Color)\necl : ecl (Eye Color)\npid : pid (Passport ID)\ncid : cid (Country ID)\n\nPassport data is validated in batch files (your puzzle input). Each passport is represented as a sequence of key:value pairs separated by spaces or newlines. Passports are separated by blank lines.\n\nHere is an example batch file containing four passports:\n\necl:gry pid:860033327 eyr:2020 hcl:#fffffd\nbyr:1937 iyr:2017 cid:147 hgt:183cm\n\niyr:2013 ecl:amb cid:350 eyr:2023 pid:028048884\nhcl:#cfa07d byr:1929\n\nhcl:#ae17e1 iyr:2013\neyr:2024\necl:brn pid:760753108 byr:1931\nhgt:179cm\n\nhcl:#cfa07d eyr:2025 pid:166559648\niyr:2011 ecl:brn hgt:59in\nThe first passport is valid - all eight fields are present. The second passport is invalid - it is missing hgt (the Height field).\n\nThe third passport is interesting; the only missing field is cid, so it looks like data from North Pole Credentials, not a passport at all! Surely, nobody would mind if you made the system temporarily ignore missing cid fields. Treat this \"passport\" as valid.\n\nThe fourth passport is missing two fields, cid and byr. Missing cid is fine, but missing any other field is not, so this passport is invalid.\n\nAccording to the above rules, your improved system would report 2 valid passports.\n\nCount the number of valid passports - those that have all required fields. Treat cid as optional. In your batch file, how many passports are valid?\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\") == \"Fair Game\"\nassert solution(\"3\\napple\\nextra\\napple\") == \"Player 1 lost\"\nassert solution(\"2\\napple\\nneat\") == \"Player 2 lost\"\n\"\"\"\n\nN = int(input())\nhistory = []\nfor i in range(N):\n    x = input()\n    history.append(x)\n\ncount = 0\nfor i in range(len(history)):\n    if len(history[i]) > count:\n        count = len(history[i])\n        count_1 = i",
        "num_ids_2": 46,
        "num_ids_4": 65
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\") == \"Fair Game\"\nassert solution(\"3\\napple\\neat\\napple\") == \"Player 1 lost\"\nassert solution(\"2\\napple\\neat\") == \"Player 2 lost\"\n\"\"\"\n",
        "num_ids_2": 46,
        "num_ids_4": 64
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"5\\n\"\n\"apple\\n\"\n\"ear\\n\"\n\"real\\n\"\n\"letters\\n\"\n\"style\\n\"\n) == \"Fair Game\"\nassert solution(\n\"3\\n\"\n\"apple\\n\"\n\"extra\\n\"\n\"apple\\n\"\n) == \"Player 1 lost\"\nassert solution(\n\"2\\n\"\n\"apple\\n\"\n\"neat\\n\"\n) == \"Player 2 lost\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\napple\\near\\nreal\\nletters\\nstyle') == 'Fair Game'\nassert solution('3\\napple\\nextra\\napple') == 'Player 1 lost'\nassert solution('2\\napple\\nneat') == 'Player 2 lost'\n\nimport sys\n\nassert len(sys.argv) == 2\nn = int(sys.argv[1])\n\nassert n in range(2, 100001)\n\nwordlist = []\n\nfor _ in range(n):\n    wordlist.append(sys.stdin.readline().strip())",
        "num_ids_2": 46,
        "num_ids_4": 76
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\napple\\near\\nreal\\nletters\\nstyle') == 'Fair Game'\nassert solution('3\\napple\\nextra\\napple') == 'Player 1 lost'\n\"\"\"\n\n\"\"\"\n\uc9c0\uae08 \ubb38\uc790\uc5f4\uc758 \ub05d \ubd80\ubd84\uc744 \ud655\uc778\ud55c\ub2e4. \n\uc9c0\uae08 \ubb38\uc790\uc5f4\uc758 \ub05d \ubd80\ubd84\uc774 \uc9c0\uae08 \ud655\uc778\ub41c \ubb38\uc790\uc5f4\uc758 \ub05d \ubd80\ubd84\uacfc \uac19\ub2e4\uba74 \n\uc9c0\uae08 \ud655\uc778\ud55c \ubb38\uc790\uc5f4\uc744 \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\ud55c\ub2e4. \n\uc774\ud6c4 \uadf8 \ub2e4\uc74c \ubb38\uc790\uc5f4\uc744 \ud655\uc778\ud55c\ub2e4. \n\ub9cc\uc57d \uac19\ub2e4\uba74 \uc9c0\uae08 \ud655\uc778\ud55c \ubb38\uc790\uc5f4\uc744 \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\ud558\uace0 \n\ub2e4\uc74c \ubb38\uc790\uc5f4\uc744 \ud655\uc778\ud55c\ub2e4. \n\uc870\uac74\uc744 \ud655\uc778\ud55c\ub2e4. \n\ub9cc\uc57d \uc9c0\uae08 \ud655\uc778\ub41c \ubb38\uc790\uc5f4\uc758 \uccab\ubc88\uc9f8 \ubb38\uc790\uac00 \ud655\uc778\ub41c \ubb38\uc790\uc5f4\uc758 \ub05d \ubd80\ubd84\uc5d0 \uc788\ub2e4\uba74 \n\ub9ac\uc2a4\ud2b8\ub97c \ucd9c\ub825\ud558\uace0 \ud504\ub85c\uadf8\ub7a8\uc744 \uc885\ub8cc\ud55c\ub2e4. \n\uc870\uac74\uc744 \ud655\uc778\ud55c\ub2e4. \n\ub9cc\uc57d \uc9c0\uae08 \ud655\uc778\ub41c \ubb38\uc790\uc5f4\uc758 \ub9c8\uc9c0\ub9c9 \ubb38\uc790\uc640 \ud655\uc778\ub41c \ubb38\uc790\uc5f4\uc758 \uccab\ubc88\uc9f8 \ubb38\uc790\uac00 \uac19\ub2e4\uba74 \n\ub9ac\uc2a4\ud2b8\ub97c \ucd9c\ub825\ud558\uace0 \ud504\ub85c\uadf8\ub7a8\uc744 \uc885\ub8cc\ud55c\ub2e4.\n\"\"\"",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('\\n'.join(['5'])) == 'Fair Game'\nassert solution('\\n'.join(['3', 'apple', 'extra', 'apple'])) == 'Player 1 lost'\nassert solution('\\n'.join(['2', 'apple', 'neat', 'apple'])) == 'Player 2 lost'\n",
        "num_ids_2": 46,
        "num_ids_4": 75
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\") == \"Fair Game\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\") == \"Fair Game\"\nassert solution(\"3\\napple\\nextra\\napple\") == \"Player 1 lost\"\n\"\"\"\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\napple\near\nreal\nletters\nstyle\n\"\"\") == \"Fair Game\"\nassert solution(\"\"\"\n3\napple\nextra\napple\n\"\"\") == \"Player 1 lost\"\nassert solution(\"\"\"\n2\napple\nneat\n\"\"\") == \"Player 2 lost\"\nassert solution(\"\"\"\n1\napple\n\"\"\") == \"Player 1 lost\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000*\") == \"100000\"\nassert solution(\"10+\") == \"110\"\nassert solution(\"10-\") == \"0\"\nassert solution(\"10*\") == \"100\"\nassert solution(\"10/\") == \"0\"\n\nprint(solution(\"10*\"))\nprint(solution(\"10+\"))\nprint(solution(\"10-\"))\nprint(solution(\"10/\"))\n",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000\\n*\\n100\") == \"100000\"\nassert solution(\"10000\\n+\\n10\") == \"10010\"\nassert solution(\"10\\n+\\n1000\") == \"1010\"\nassert solution(\"1000\\n*\\n1000\") == \"100\"\nassert solution(\"1000\\n*\\n10\") == \"10000\"\n",
        "num_ids_2": 34,
        "num_ids_4": 67
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1000 * \"*\" + \"100\" + \"*\" + \"+\" + \"10\") == \"10010\"\nassert solution(1000 * \"*\" + \"100\" + \"*\" + \"10\" + \"*\" + \"+\" + \"10\") == \"1010\"\nassert solution(1000 * \"*\" + \"100\" + \"*\" + \"+\" + \"10\" + \"*\" + \"+\" + \"10\") == \"11010\"\nassert solution(1000 * \"*\" + \"100\" + \"*\" + \"+\" + \"10\" + \"*\" + \"+\" + \"10\") == \"11010\"\nassert solution(1000 * \"*\" + \"100\" + \"*\" + \"10\" + \"*\" + \"10\" + \"+\" + \"+\" + \"+\") == \"11010\"\n",
        "num_ids_2": 66,
        "num_ids_4": 146
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000\\n*\\n100') == '100000'\nassert solution('10000\\n+\\n10') == '1010'\nassert solution('1000\\n*\\n1000') == '10000000000'\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 52
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000\\n*\\n100\\n\") == \"100000\"\nassert solution(\"10000\\n+\\n10\\n\") == \"10010\"\nassert solution(\"10\\n+\\n1000\\n\") == \"1010\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100*100\") == \"10000\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000\\n*\\n100\") == \"100000\"\nassert solution(\"10000\\n+\\n10\") == \"10010\"\nassert solution(\"10\\n+\\n1000\") == \"1010\"\nassert solution(\"100\\n+\\n1000\") == \"1010\"\nassert solution(\"1000\\n*\\n100\") == \"100000\"",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 * 100\") == \"100000\"\nassert solution(\"10000 + 10\") == \"10010\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 * 100\") == \"100000\"\nassert solution(\"10000 + 10\") == \"10010\"\nassert solution(\"100010\") == \"1010\"",
        "num_ids_2": 26,
        "num_ids_4": 38
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000\\n*\\n100\\n\") == \"100000\"\nassert solution(\"10000\\n+\\n10\\n\") == \"10010\"\nassert solution(\"10\\n+\\n1000\\n\") == \"1010\"\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 out\") == \"3\\n\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 out\") == '3'\nassert solution(\"8 in\") == '6'\nassert solution(\"52 out\") == '8'\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\n\"\"\"\n\n\"\"\"\nIn a deck of cards, each card has an associated number.  The deck is \"reshuffled\" by dividing it into two new decks, and then interleaving them together randomly.\n\nFor example, consider reshuffling the six-card deck:\n\n\nIn a perfect reshuffle, the cards from the original deck are interleaved exactly in the order in which they appear in the original deck.  In other words, the first card ends up in the last position, the second card ends up in the second-to-last position, and so on.\n\nIn a perfectly reshuffled deck of size $n$, the probability that a card is contained in the deck is $\\frac{1}{n}$.  So the probability that a card is not contained in the deck is $1 - \\frac{1}{n}$.\n\nFor the example above, we can calculate the probability that a card is not contained in the deck by using the formula above:\n\n\nThe probability that a card from the original deck ends up in the first position is $\\frac{1}{n} \\times (1 - \\frac{1}{n}) + \\frac{1}{n} \\times \\frac{1}{n} = \\frac{1}{2n}$.\n\nLikewise, the probability that a card from the original deck ends up in the $i^{th}$ position is $\\frac{i}{n} \\times (1 - \\frac{i}{n}) + \\frac{i - 1}{n} \\times \\frac{i}{n} = \\frac{i - 1}{2n}$.\n\nFor a reshuffled deck of size $n$, the probability that a card ends up in position $i$ is $\\frac{i}{n}$.\n\nIn total, this amounts to dividing the probability that a card is not contained in the deck by $n$ (since we reshuffled the deck).\n\nSince the deck is reshuffled $n$ times, we have a total of $n$ values to sum, and the sum is equal to $\\frac{1}{2} + \\frac{1}{2} + \\cdots + \\frac{1}{2} = 1$.\n\nHowever, the sum is an approximation, because it does not take into account the probabilities of $n$ cards not appearing in the deck.\n\nSo, if we want to find the exact value of $1 - \\frac{1}{n}$, we need to add $\\frac{1}{n}$ to all the values in the sum.\n\nSince all the values in the sum are equal to $\\frac{1}{2}$, this amounts to subtract $\\frac{1}{n}$ from each of them.\n\nTo get the exact value, we can simply call the function `solution(stdin: str) -> str` and pass it $n$, and it will return $\\frac{1}{n}$.\n\n-----Input-----\nThe input consists of one line containing a positive integer $n \\leq 1000$ (the size of the deck) followed by either the word in or out, indicating whether you should perform in-shuffles or out-shuffles.\n\n-----Output-----\nFor each test case, output the case number followed by the value that you obtain by adding $\\frac{1}{n}$ to all the values in the sum.\n\n-----Examples-----\nSample Input 1:\n8 out\nSample Output 1:\n1.5\n\nSample Input 2:\n8 in\nSample Output 2:\n0\n\nSample Input 3:\n52 out\nSample Output 3:\n1\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\"\"\"\nfrom math import ceil",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 out\") == \"3\\n\"\nassert solution(\"8 in\") == \"6\\n\"\nassert solution(\"52 out\") == \"8\\n\"\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\nprint(solution(\"8 out\"), \"3\")\nprint(solution(\"8 in\"), \"6\")\nprint(solution(\"52 out\"), \"8\")\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(menolaxios mox) == menolaxiosexmox\nassert solution(alemaxe maxos) == alemaxexmaxos\nassert solution(pamoli toxes) == pamolextoxes\n",
        "num_ids_2": 36,
        "num_ids_4": 53
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 60
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\"\nimport re\n",
        "num_ids_2": 41,
        "num_ids_4": 60
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 60
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\n\nprint('The local tests are done. Click on \"Check\" for more details.')",
        "num_ids_2": 41,
        "num_ids_4": 60
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 60
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 60
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\nprint(\"Success\")\n\n\"\"\"\n\nfrom functools import reduce",
        "num_ids_2": 41,
        "num_ids_4": 60
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n",
        "num_ids_2": 41,
        "num_ids_4": 60
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\n",
        "num_ids_2": 41,
        "num_ids_4": 60
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n\nprint(solution(\"2018\"))\nprint(solution(\"2019\"))\nprint(solution(\"2020\"))\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2019) == \"no\"\nassert solution(2018) == \"yes\"\nassert solution(2020) == \"yes\"\n\nprint(\"All tests passed.\")",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\nprint(\"Success\")\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n\n#####################################################################\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 0 0 0 4 0 0 0 0 4') == '64'\n\nfor _ in range(int(stdin.readline())):\n    pass\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nprint(\"test passed\")\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\nassert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n\"\"\"\n\nfrom functools import lru_cache\nfrom typing import List\n\nimport numpy as np\n",
        "num_ids_2": 40,
        "num_ids_4": 61
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nprint(solution(\"10 10 10 20 0 10 10 10 10 10\"))\n\n\"\"\"\n\nimport sys\nfrom collections import Counter\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 0 0 0 4 0 0 0 0 4') == '64'\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\n\"\"\"\n\n\"\"\"\nfrom collections import Counter",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 0\\n30 270 995 996 997 998 999') == '2 330'\n\"\"\"\n\n\n\"\"\"\n\uc544\ub798\uc5d0 \uc791\uc131\ub41c \ucf54\ub4dc\ub97c \ud655\uc778\ud558\uace0 \uc218\uc815\ud558\uc9c0 \ub9c8\uc138\uc694.\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 0\\n30 270 995 996 997 998 999') == '2 330'\n\n\"\"\"\n\nfrom typing import List, Dict\nimport math",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''7 0\n30 270 995 996 997 998 999''') == '2 330'\nassert solution('''7 1\n30 270 995 996 997 998 999''') == '2 570'\nassert solution('''7 2\n30 270 995 996 997 998 999''') == '0 0'\n'''\n) == '2 570'\nassert solution('''7 0\n30 270 995 996 997 998 999''') == '2 330'\nassert solution('''7 1\n30 270 995 996 997 998 999''') == '2 570'\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ('0 0')\n\n-------------------\nstdin:\n2 7 0\n30 270 995 996 997 998 999\n\nstdout:\n2 330\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 0\\n30 270 995 996 997 998 999') == '2 330'\nassert solution('7 1\\n30 270 995 996 997 998 999') == '2 570'\nassert solution('7 2\\n30 270 995 996 997 998 999') == '0 0'\n\"\"\"\n\nimport sys\nimport re\n",
        "num_ids_2": 50,
        "num_ids_4": 75
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 0\\n30 270 995 996 997 998 999\\n') == '2 330'\nassert solution('7 1\\n30 270 995 996 997 998 999\\n') == '2 570'\nassert solution('7 2\\n30 270 995 996 997 998 999\\n') == '0 0'\n",
        "num_ids_2": 54,
        "num_ids_4": 81
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 0\\n30 270 995 996 997 998 999\\n') == '2 330'\n\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"\n\n\"\"\"\n\nimport sys\nimport collections",
        "num_ids_2": 50,
        "num_ids_4": 75
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"\n\"\"\"\n",
        "num_ids_2": 50,
        "num_ids_4": 75
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\n\nprint('Hooray!')",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abbaabbaabba') == 2\nassert solution('aaaaaaaa') == 1\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aba\") == 3\nprint(solution(\"aba\"))\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\n",
        "num_ids_2": 19,
        "num_ids_4": 28
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aaaaaaaa') == 1, \"WA\"\nassert solution('abbaabba') == 2, \"WA\"\nassert solution('abcdef') == 6, \"WA\"\n\nprint('Correct')\n\n\"\"\"\n\nfrom collections import defaultdict\n\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abccabccab') == 6\nassert solution('abc') == 3\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\n\n'''\n\nimport math\n\nclass Solution:\n    def solution(self, stdin):\n        s = stdin\n        def is_rep(s, n):\n            return len(s) % n == 0\n        \n        def gen_rotations(s, n):\n            return [s[i: i + n] for i in range(0, len(s), n)]\n        \n        def remove_char(s):\n            return s[:-1]\n        \n        def get_rotations(s, k):\n            rotations = []\n            \n            n = len(s)\n            s = s * 2\n            rotations.append(s[:n])\n            \n            for i in range(k - 1):\n                rotations.append(s[n:])\n                s = remove_char(s)\n            \n            return rotations\n        \n        def find_period(rotations):\n            length = len(rotations)\n            for i in range(length - 1):\n                if rotations[i]!= rotations[i + 1]:\n                    return length - i\n            return length\n        \n        def find_rotation_with_equal_prefix(rotations):\n            lcp = len(rotations[0])\n            for i in range(len(rotations) - 1):\n                if len(rotations[i]) > len(rotations[i + 1]):\n                    lcp = len(rotations[i])\n            return lcp\n        \n        rotations = get_rotations(s, 1)\n        k = find_period(rotations)\n        lcp = find_rotation_with_equal_prefix(rotations)\n        if is_rep(s, k):\n            print(k)\n        else:\n            print(k, '(' + str(k + lcp - 1) + ')')",
        "num_ids_2": 19,
        "num_ids_4": 28
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\nassert solution('abcd') == 4\nassert solution('abbba') == 3\n\nimport unittest\nimport sys\nimport io\nimport inspect\nimport re\nimport collections\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        solution_func = solution\n        with open('test_solution.txt', 'r') as file:\n            inputs = file.read().strip().split('\\n\\n')\n        with open('test_solution.txt', 'w') as file:\n            for result, *input_ in inputs:\n                file.write(f'# Input: {input_}\\n# Output: {solution_func(*input_)}\\n')\n",
        "num_ids_2": 19,
        "num_ids_4": 37
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abbaabba\") == 2\nassert solution(\"abcdef\") == 6\nassert solution(\"abacabad\") == 3\nassert solution(\"aaaaaaaa\") == 1\n\nprint(\"All tests passed.\")\n",
        "num_ids_2": 18,
        "num_ids_4": 37
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\n\"\"\"\n\nimport math",
        "num_ids_2": 17,
        "num_ids_4": 36
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\n\"\"\"\n\nimport sys",
        "num_ids_2": 19,
        "num_ids_4": 28
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open(\"examples/example_1.in\").read()) == \"2\\n1 2\\n\"\nassert solution(open(\"examples/example_2.in\").read()) == \"1\\n1\\n\"\nassert solution(open(\"examples/example_3.in\").read()) == \"0\\n1\\n\"\n\nprint(solution(open(\"input.in\").read()))\n",
        "num_ids_2": 53,
        "num_ids_4": 79
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '1'\nassert solution('1 2 3 4') == '1'\nassert solution('1 2 3 4 5') == '1'\n",
        "num_ids_2": 19,
        "num_ids_4": 44
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"0\\n1\"\n\nprint(\"All tests passed.\")\n",
        "num_ids_2": 68,
        "num_ids_4": 95
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9') == '1\\n1'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30') == '0\\n1'\n\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40'), '2\\n1 2')\n        self.assertEqual(solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9'), '1\\n1')\n        self.",
        "num_ids_2": 68,
        "num_ids_4": 95
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n\") == \"2\\n1 2\\n\"\n\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\\n\") == \"1\\n1\\n\"\n\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\\n\") == \"0\\n1\\n\"",
        "num_ids_2": 76,
        "num_ids_4": 107
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n') == '2\\n1 2\\n'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\\n') == '1\\n1\\n'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30\\n') == '0\\n1\\n'\n\nprint('Success')\n\n----------------------\n\n\u0423\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 3.    \u0421\u043f\u043e\u0440\u0442\u0441\u043c\u0435\u043d \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442\u0441\u044f \u0435\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u044b\u043c\u0438 \u043f\u0440\u043e\u0431\u0435\u0436\u043a\u0430\u043c\u0438. \u0412 \u043f\u0435\u0440\u0432\u044b\u0439 \u0434\u0435\u043d\u044c \u0435\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u043b a \u043a\u0438\u043b\u043e\u043c\u0435\u0442\u0440\u043e\u0432.\n\u041a\u0430\u0436\u0434\u044b\u0439 \u0434\u0435\u043d\u044c \u0441\u043f\u043e\u0440\u0442\u0441\u043c\u0435\u043d \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u043b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 10 % \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e.\n\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u0434\u043d\u044f, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u043f\u043e\u0440\u0442\u0441\u043c\u0435\u043d\u0430 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442 \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 b \u043a\u0438\u043b\u043e\u043c\u0435\u0442\u0440\u043e\u0432.\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 a \u0438 b \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043e\u0434\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u2014 \u043d\u043e\u043c\u0435\u0440 \u0434\u043d\u044f.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: a = 2, b = 3.\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n1-\u0439 \u0434\u0435\u043d\u044c: 2\n2-\u0439 \u0434\u0435\u043d\u044c: 2,2\n3-\u0439 \u0434\u0435\u043d\u044c: 2,42\n4-\u0439 \u0434\u0435\u043d\u044c: 2,66\n5-\u0439 \u0434\u0435\u043d\u044c: 2,93\n6-\u0439 \u0434\u0435\u043d\u044c: 3,22\n\n\u041e\u0442\u0432\u0435\u0442: \u043d\u0430 6-\u0439 \u0434\u0435\u043d\u044c \u0441\u043f\u043e\u0440\u0442\u0441\u043c\u0435\u043d \u0434\u043e\u0441\u0442\u0438\u0433 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u2014 \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 3 \u043a\u043c.\n\na = int(input(\"\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043c \u043f\u0440\u043e\u0431\u0435\u0436\u0430\u043b \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u0434\u0435\u043d\u044c? \"))\nb = int(input(\"\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043c \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u0440\u043e\u0431\u0435\u0436\u0430\u0442\u044c \u0441\u043f\u043e\u0440\u0442\u0441\u043c\u0435\u043d? \"))\n\ni = 1\nprint(f\"1-\u0439 \u0434\u0435\u043d\u044c: {a}\")\nwhile a < b:\n    a = a + a / 10\n    i += 1\n    print(f\"{i}-\u0439 \u0434\u0435\u043d\u044c: {round(a, 2)}\")\n\nprint(f\"\u041e\u0442\u0432\u0435\u0442: \u043d\u0430 {i}-\u0439 \u0434\u0435\u043d\u044c \u0441\u043f\u043e\u0440\u0442\u0441\u043c\u0435\u043d \u0434\u043e\u0441\u0442\u0438\u0433 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u2014 \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 3 \u043a\u043c.\")\n\n\u0422\u0435\u0441\u0442\u044b\nsolution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n') == '2\\n1 2\\n'\nsolution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\\n') == '1\\n1\\n'\nsolution('3 6\\n1 2 4\\n11 12 15 19 24 30\\n') == '0\\n1\\n'\n\nSample Input 1:\n4 12\n1 2 4 5\n6 8 12 18 26 28 30 34 36 37 39 40\n\nSample Output 1:\n2\n1 2\n\nSample Input 2:\n5 10\n1 2 3 4 5\n0 1 2 3 4 5 6 7 8 9\n\nSample Output 2:\n1\n1\n\nSample Input 3:\n3 6\n1 2 4\n11 12 15 19 24 30\n\nSample Output 3:\n0\n1\n\nSample Input 4:\n5 1\n1 2 3 4 5\n0\n\nSample Output 4:\n1\n\nSample Input 5:\n7 100\n5 10 17 28 35 45 55 65\n0 1 2 3 4 5 6 7\n\nSample Output 5:\n1\n1\n\nSample Input 6:\n8 100\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n\nSample Output 6:\n1\n1\n\nSample Input 7:\n8 100\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n\nSample Output 7:\n1\n1\n\nSample Input 8:\n7 2\n1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n\nSample Output 8:\n2\n\nSample Input 9:\n6 100\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0",
        "num_ids_2": 76,
        "num_ids_4": 107
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9') == '1\\n1'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30') == '0\\n1'\n\"\"\"\n\na, b = input().split()\na = int(a)\nb = int(b)\n\nt = sorted([int(i) for i in input().split()])\nx = [int(i) for i in input().split()]\n\nprint(a - b + 1)\nprint(*t)",
        "num_ids_2": 68,
        "num_ids_4": 95
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9') == '1\\n1'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30') == '0\\n1'\n",
        "num_ids_2": 68,
        "num_ids_4": 95
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"4 12\n1 2 4 5\n6 8 12 18 26 28 30 34 36 37 39 40\"\"\"\n) == '2\\n1 2'\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5551212\") == 1\nassert solution(\"5519876\") == 0\nassert solution(\"5055555\") == 0\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"5519876\") == \"0\"\nassert solution(\"5055555\") == \"0\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5551212') == 1\nassert solution('5519876') == 0\nassert solution('5055555') == 0",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5551212\") == 1\nassert solution(\"5519876\") == 0\nassert solution(\"5055555\") == 0\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5551212') == 1\nassert solution('5519876') == 0\nassert solution('5055555') == 0\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5551212') == 1\nassert solution('5519876') == 0\nassert solution('5055555') == 0\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"5519876\") == \"0\"\nassert solution(\"5055555\") == \"0\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5551212') == '1'\nassert solution('55555555') == '0'\nassert solution('555555555555555555555555555555') == '0'\nassert solution
        "num_ids_2": 25,
        "num_ids_4": 1716
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5551212') == 1\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\nprint(solution(\"32/1\"))\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\nassert solution(\"-11/1\") == \"-11/1\"\nassert solution(\"3/1\") == \"0/1\"\n\nprint('Successfully passed!')\n\nSolution:",
        "num_ids_2": 28,
        "num_ids_4": 58
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\nassert solution(\"13/12\") == \"1/12\"\n",
        "num_ids_2": 28,
        "num_ids_4": 57
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\nassert solution('0/1') == '0/1'\n",
        "num_ids_2": 28,
        "num_ids_4": 58
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\n",
        "num_ids_2": 28,
        "num_ids_4": 44
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n\"\"\"\nfrom collections import Counter",
        "num_ids_2": 53,
        "num_ids_4": 83
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected_output",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'Nonsense'\nassert solution('1 1') == 'Nonsense'\nassert solution('1 2') == 'Transposition'\nassert solution('2 2') == 'Nonsense'\nassert solution('2 3') == 'Inversion'\n\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected_result\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n",
        "num_ids_2": 53,
        "num_ids_4": 83
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\nC E G\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\") == \"Inversion\"\nassert solution(\"7\\nC C F F D# D# F\") == \"Retrograde\"\nassert solution(\"3\\nC E G\") == \"Transposition\"\nassert solution(\"7\\nA B C D E F G\") == \"Inversion\"\n",
        "num_ids_2": 36,
        "num_ids_4": 75
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n\n\"\"\"",
        "num_ids_2": 53,
        "num_ids_4": 83
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n",
        "num_ids_2": 53,
        "num_ids_4": 83
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n\"\"\"",
        "num_ids_2": 53,
        "num_ids_4": 83
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\nassert solution(\"5\\nG D E A C B\\nC E B A D G\") == \"Nonsense\"\nassert solution(\"5\\nF G A D C E\\nC D B A G E\") == \"Nonsense\"\n",
        "num_ids_2": 53,
        "num_ids_4": 110
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''Cat-a-pil-lar\n\nI love ba-na-na''') == 'Caciccah gs the bestuh'\n\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"",
        "num_ids_2": 41,
        "num_ids_4": 64
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 64
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    'I love ba-na-na'\n    ) == 'Gah kove bababa'\nassert solution(\n    'Cat-a-pil-lar'\n    ) == 'Catacillar'\nassert solution(\n    'Co-ding is the best'\n    ) == 'Cociccah gs the bestuh'\nprint(solution(input()))\n'''",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\n\"\"\"\n\nimport re\n\nstdin = re.sub('[^a-zA-Z]', '', stdin)\nstdin = stdin.lower()\n\nprint(' '.join([x if x!= '-' else x.replace('h', 'A') for x in stdin.split()]))\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(    \"I love ba-na-na\"    ) == \"Gah kove bababa\"\nassert solution(    \"Cat-a-pil-lar\"    ) == \"Catacillar\"\nassert solution(    \"Co-ding is the best\"    ) == \"Cociccah gs the bestuh\"",
        "num_ids_2": 49,
        "num_ids_4": 76
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n",
        "num_ids_2": 41,
        "num_ids_4": 64
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 64
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 64
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n\nprint('Success')\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"4\"\n) == 16\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == 6\nassert solution(\"2\") == 16\nassert solution(\"3\") == 14\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(    \"1\")    == \"6\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n') == '6'\nassert solution('4\\n') == '16'\nassert solution('3\\n') == '14'\n\"\"\"\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n') == '6'\nassert solution('4\\n') == '16'\nassert solution('3\\n') == '14'\nprint('test passed')\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\\n6\") == 3",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 6\\n1 2 3 4 5') == '3'\nassert solution('5 10\\n4 8 1 9 7') == '2'\nassert solution('4 10\\n1 3 1 7') == '4'\n\n\"\"\"\n\n\"\"\"\nn, X = map(int, input().split())\na = list(map(int, input().split()))",
        "num_ids_2": 36,
        "num_ids_4": 53
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2') == '1'\nassert solution('1\\n2\\n3') == '2'\nassert solution('1\\n2\\n3\\n4') == '3'\nassert solution('1\\n2\\n3\\n4\\n5') == '4'\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == '6'\n",
        "num_ids_2": 29,
        "num_ids_4": 70
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 10\\n1 3 1 7') == '4'\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\") == \"3\"\nassert solution(\"5 10\\n4 8 1 9 7\") == \"2\"\nassert solution(\"4 10\\n1 3 1 7\") == \"4\"\n\nfrom collections import deque",
        "num_ids_2": 36,
        "num_ids_4": 53
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5\\n4 8 1 9 7') == '2', 'bad'\nassert solution('1 2 3 4 5\\n4 8 1 9 7') == '4', 'bad'\nassert solution('1 2 3 4 5\\n4 8 1 9 7') == '3', 'bad'\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 72
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 10\\n4 8 1 9 7') == '2'\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\\n\") == \"3\"\nassert solution(\"5 10\\n4 8 1 9 7\\n\") == \"2\"\nassert solution(\"4 10\\n1 3 1 7\\n\") == \"4\"\n",
        "num_ids_2": 40,
        "num_ids_4": 59
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\\n\") == \"3\"\nassert solution(\"5 10\\n4 8 1 9 7\\n\") == \"2\"\nassert solution(\"4 10\\n1 3 1 7\\n\") == \"4\"\n\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 59
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 6\\n1 2 3 4 5\\n') == '3'\nassert solution('5 10\\n4 8 1 9 7\\n') == '2'\nassert solution('4 10\\n1 3 1 7\\n') == '4'\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 59
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2\\n0 1 1\\n1 0 0') == 'possible'\nassert solution('1 2\\n1 0 1\\n0 1 0') == 'impossible'\nassert solution('1 2\\n0 1 1\\n1 0 1') == 'possible'\n\n\"\"\"\nimport math",
        "num_ids_2": 44,
        "num_ids_4": 66
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(1)) == \"possible\"\nassert solution(str(2)) == \"impossible\"\n\"\"\"\n\n\"\"\"\nSample Test Cases\nInput 1:\n1 2\n0 1 1\n1 0 0\n\nOutput 1:\npossible\n\nInput 2:\n1 2\n1 0 0\n0 1 0\n\nOutput 2:\nimpossible\n\nInput 3:\n1 2\n0 1 0\n1 0 1\n\nOutput 3:\nimpossible\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"possible\"\nassert solution(\"1 2\\n1 0 0\\n0 1 0\") == \"impossible\"\n\"\"\"",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n0 1 1\\n1 0 0\\n\") == \"possible\"\nassert solution(\"1\\n2\\n0 1 0\\n1 0 1\\n\") == \"impossible\"\nassert solution(\"1\\n2\\n1 0 1\\n0 1 0\\n\") == \"impossible\"\n\nprint(solution(\"1\\n2\\n0 1 1\\n1 0 0\\n\"))\n\"\"\"\n\nimport sys\n\nlines = sys.stdin.readlines()\n\nnum_stations, num_cars, capacity = list(map(int, lines[0].split(\" \")))\n\ncar_passenger_data = [[int(x) for x in line.split(\" \")] for line in lines[1:]]\n\nstops = [[]] * num_stations\n\nfor i in range(num_stations):\n    num_entries, num_leaving, num_waiting = car_passenger_data[i]\n    stops[i] = [num_entries, num_leaving, num_waiting]\n\nnum_cars = len(stops)\n\ncars_at_station = [0] * num_stations",
        "num_ids_2": 52,
        "num_ids_4": 78
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"possible\"\nassert solution(\"1 2\\n1 0 1\\n0 1 0\") == \"impossible\"\n\"\"\"\n\nC, n = map(int, input().split())\n\nfor i in range(n):\n    l, e, s = map(int, input().split())\n    C -= l\n    C += e\n    if C < 0:\n        print(\"impossible\")\n        exit()\nprint(\"possible\")\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n0 1 1\\n1 0 0\\n') == 'possible'\nassert solution('1\\n2\\n0 1 1\\n1 0 0\\n') == 'impossible'\n\"\"\"",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2\\n0 1 0\\n1 0 0') == \"possible\"\nassert solution('1 2\\n1 0 1\\n0 0 0') == \"impossible\"",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"possible\"\nassert solution(\"1 2\\n1 0 1\\n0 1 0\") == \"impossible\"\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\\n\") == \"possible\"\nassert solution(\"1 2\\n1 0 0\\n0 1 0\\n\") == \"impossible\"\n\"\"\"\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\\n\") == \"possible\"\nassert solution(\"1 2\\n0 1 1\\n1 0 1\\n\") == \"impossible\"\nassert solution(\"1 2\\n0 1 1\\n1 0 1\\n\") == \"impossible\"\nassert solution(\"1 2\\n0 1 1\\n0 1 0\\n\") == \"impossible\"\n\"\"\"\n\n\nimport sys\nfrom typing import List\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\nassert solution(\"6 2\") == \"4.25\"\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1\\n') == '1'\n\"\"\"\n\nfrom math import factorial",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3') == '1.875'\nprint(solution(input()))",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\n\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\nfrom typing import Iterator, Sequence, Tuple\n\nfrom icontract import require, ensure\n\n\n@require(lambda dice_sides, rolls: rolls > 0)\n@require(lambda rolls: rolls < 100)\n@ensure(\n    lambda result: 0 <= result <= math.floor(math.pow(dice_sides, rolls)),\n    \"The score is in the range [0, {0}).\",\n)\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1 1''') == '1'\nassert solution('''2 3''') == '1.875'\nassert solution('''6 2''') == '4.25'\n'''",
        "num_ids_2": 30,
        "num_ids_4": 46
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == '1'\nassert solution(\"2 3\") == '1.875'\nassert solution(\"6 2\") == '4.25'\n\nprint(\"All tests passed.\")\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1 1''') == '1'\nassert solution('''2 3''') == '1.875'\nassert solution('''6 2''') == '4.25'\n\nprint(solution(input()))",
        "num_ids_2": 30,
        "num_ids_4": 46
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '1.875'\nassert solution('6 2') == '4.25'\nassert solution('3 2') == '1.5'\nassert solution('100 2') == '50.0'\n\"\"\"\n\nfrom math import factorial\nfrom decimal import Decimal",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\n\"\"\"\n\n\"\"\"\nfrom math import sqrt\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\nassert solution(\"6 2\") == \"4.25\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 0\\n\") == \"0 0\"\nassert solution(\"4 2 7\\n\") == \"1 4\"\nassert solution(\"3 0 0\\n\") == \"1 6\"\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\nassert solution(solution.test_cases[1]) == solution.test_cases[2]\nassert solution(solution.test_cases[2]) == solution.test_cases[3]\nassert solution(solution.test_cases[3]) == solution.test_cases[4]\nassert solution(solution.test_cases[4]) == solution.test_cases[5]\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n\n\"\"\"\n\nimport ast",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 1') == '1 3'\nassert solution('4 2 6') == '2 3'\nassert solution('3 3 4') == '0 6'\n\"\"\"\n\n\"\"\"\nRead input\nH, N, M\n\nH layers (get N bricks of size 2 by using 1 more brick of size 2)\n\nM bricks (get 1 more brick of size 4)\n\nTotal:\n2 * 2 * H - 2 * M\n\n2 * (2 * H - M)\n\n3 * 2 * (H - M)\n\n4 * (2 * (H - M))\n\n3 * 4 * (H - M)\n\n5 * 4 * (2 * (H - M))\n\n5 * (4 * (2 * (H - M)))\n\n7 * (4 * (2 * (H - M)))\n\n7 * 4 * (4 * (2 * (H - M)))\n\n(6 * 4 * (4 * (2 * (H - M))))\n\n(4 * 6 * (4 * (4 * (2 * (H - M)))))\n\n\"\"\"\n\nH, N, M = map(int, input().split())",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 0\\n\") == \"0 0\"\nassert solution(\"4 2 7\\n\") == \"1 4\"\nassert solution(\"3 0 0\\n\") == \"1 6\"\n\n\"\"\"\nfrom itertools import product",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"1 1 0\"\n) == \"0 0\"\nassert solution(\n\"4 2 7\"\n) == \"1 4\"\nassert solution(\n\"3 0 0\"\n) == \"1 6\"\n\nprint(solution(input()))\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"WWBBWWWBWB\") == \"0\"\nassert solution(\"WWBWBWBWW\") == \"0\"\nassert solution(\"WWBBBBWWW\") == \"0\"\nassert solution(\"WBBBBBWW\") == \"1\"\nassert solution(\"WBBBBBBB\") == \"0\"",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\nWBBW\\nWBWB\\nBWWB\\nBWBW') == '1'\nassert solution('4\\nWBWB\\nBWWB\\nBWBW') == '0'\nassert solution('6\\nBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nWBBWWB') == '0'\n\nprint('All tests passed.')\n\"\"\"\n",
        "num_ids_2": 53,
        "num_ids_4": 91
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\nBWBW\\nWBWB\\nBWWB\\nBWBW') == '1'\nassert solution('4\\nBWBW\\nWBWB\\nBWWB\\nBWBW') == '1'\nassert solution('6\\nBWWB\\nWBWB\\nWBBW\\nBBWB\\nBWWB\\nWWBW') == '0'\n",
        "num_ids_2": 58,
        "num_ids_4": 95
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\") == '1'\nassert solution(\"4\\nBWWB\\nWBWB\\nBWWB\\nBWBW\") == '0'\nassert solution(\"6\\nBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nWBBWBB\\nWWBWBB\") == '0'\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 58,
        "num_ids_4": 101
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nWBWB\\nBWBB\\nWBBW\\nBWBW\") == \"1\"\nassert solution(\"6\\nWBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nWBBWWB\\nWWBWBB\") == \"0\"\nassert solution(\"6\\nBWWBWWB\\nWBBWBWB\\nWBBWBW\\nBWWBWW\\nBWWBWW\\nWBBWWB\") == \"0\"\nassert solution(\"4\\nBWBW\\nWBWB\\nBWBW\\nBWBW\") == \"1\"\nassert solution(\"8\\nBWBWBWB\\nWBWBWBW\\nBWBBBWB\\nBWBWBWB\\nBWBWBWB\\nBWBBBWB\\nBWBWBWB\\nBWBWBWB\") == \"0\"\n",
        "num_ids_2": 71,
        "num_ids_4": 147
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nWBWB\\nBWBB\\nWBBW\\nBWBW\") == '1'\nassert solution(\"6\\nWBBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nBWWBBW\\nWWBWBB\") == '0'\n\"\"\"",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nWBWB\\nBWWB\\nWBBW\\nBWBW\") == \"1\"\nassert solution(\"4\\nBWBB\\nWBWB\\nWBBW\\nBWBW\") == \"0\"\nassert solution(\"6\\nBWBB\\nWBWB\\nWBBW\\nBBWB\\nBWWB\\nWWBW\") == \"0\"\n\"\"\"",
        "num_ids_2": 57,
        "num_ids_4": 93
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n4\nWBBW\nWBWB\nBWWB\nBWBW\n\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"\n4\nBWWB\nBWBB\nWBBW\nWBWW\n\"\"\"\n) == \"0\"\nassert solution(\n\"\"\"\n6\nBWBWWB\nWBWBWB\nWBBWBW\nBBWBWW\nBWWBBW\nWWBWBB\n\"\"\"\n) == \"0\"\nassert solution(\n\"\"\"\n1\nB\nB\n\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"\n1\nB\nW\n\"\"\"\n) == \"0\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\nWBBW\\nWBWB\\nBWWB\\nBWBW') == '1'\nassert solution('4\\nBWWB\\nWBWB\\nWBBW\\nWBWW') == '0'\nassert solution('6\\nBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nWBBWWB\\nWWBWBB') == '0'",
        "num_ids_2": 57,
        "num_ids_4": 100
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nWBWB\\nBWBB\\nWBBW\\nBWBW\") == \"1\"\nassert solution(\"6\\nBWWBB\\nWBWBWB\\nWBBBWB\\nBBWBWW\\nWWBWBB\") == \"0\"\n\nassert solution(\"4\\nBWBW\\nWBWB\\nBWBW\\nBWBW\") == \"1\"\nassert solution(\"4\\nWBWB\\nBWBW\\nWBWB\\nBWBW\") == \"1\"\n\nassert solution(\"4\\nWWBWB\\nWWWBW\\nBWBWB\\nWBWBW\") == \"1\"\n",
        "num_ids_2": 64,
        "num_ids_4": 121
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\\n\") == '3 4\\n2 1\\n3 2\\n1 2\\n3 7'\n\"\"\"\n\nimport math\n\n\"\"\"\n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043a\u0430\u043a \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u0432 \u043e\u0442\u0440\u0435\u0437\u043e\u043a.\n\u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432\u044b\u0431\u043e\u0440\u043e\u043a - \u043d\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434, \u043d\u0430\u0434\u0435\u0436\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 - \u043d\u0430 \u0434\u0440\u0443\u0433\u0438\u0445 \u0432\u044b\u0431\u043e\u0440\u043a\u0430\u0445 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0434\u0440\u0443\u0433\u043e\u0439 \u043e\u0442\u0432\u0435\u0442, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u044b \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c, \u0447\u0442\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044b \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c\u0438.\n\"\"\"",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\\n\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline())\na = []\nfor _ in range(n):\n    a.append(list(map(int, stdin.readline().split())))\n\nfor i in range(n):\n    a[i][0], a[i][1], a[i][2], a[i][3] = a[i][0], a[i][1], a[i][2], a[i][3]\n\nfor i in range(n):\n    for j in range(n):\n        if i!= j:\n            if a[i][0] >= a[j][0] and a[i][1] <= a[j][1] and a[i][2] >= a[j][2] and a[i][3] <= a[j][3]:\n                print(a[i][0], a[j][1])\n            elif a[i][0] <= a[j][0] and a[i][1] >= a[j][1] and a[i][2] <= a[j][2] and a[i][3] >= a[j][3]:\n                print(a[i][1], a[j][0])\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 8 3 4\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\\n\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n\"\"\"\n\n\nfrom collections import defaultdict",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'''\n5\n1 2 1 2\n2 6 3 4\n2 4 1 3\n1 2 1 3\n1 4 5 8\n''') == '''\n2 1\n3 4\n3 2\n1 2\n3 7\n''', solution(\n'''\n5\n1 2 1 2\n2 6 3 4\n2 4 1 3\n1 2 1 3\n1 4 5 8\n''')",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8') == '2 1\\n3 4\\n3 2\\n1 2\\n3 7'\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\nassert solution(\"2 3 2 3\\n1 3 4 5\\n3 3 3 3\\n3 5 7 9\") == \"2 1\\n3 3\\n2 4\\n5 7\"\nassert solution(\"2 4 2 3\\n2 4 2 3\\n2 3 2 4\\n1 4 1 5\") == \"2 1\\n3 4\\n1 2\\n5 7\"\n\"\"\"\nimport sys\nfrom typing import List, NamedTuple\n\ntest_data_1 = \"\"\"\n3\n1 2 1 2\n2 6 3 4\n2 4 1 3\n1 2 1 3\n1 4 5 8\n\"\"\"\n\ntest_data_2 = \"\"\"\n5\n1 2 1 2\n2 6 3 4\n2 4 1 3\n1 2 1 3\n1 4 5 8\n\"\"\"\n\n\nclass Line(NamedTuple):\n    start: int\n    end: int\n\n    def __str__(self):\n        return f\"({self.start}, {self.end})\"\n",
        "num_ids_2": 98,
        "num_ids_4": 142
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n\"\"\"",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5\n1 2 1 2\n2 6 3 4\n2 4 1 3\n1 2 1 3\n1 4 5 8\"\"\") == \"\"\"2 1\n3 4\n3 2\n1 2\n3 7\"\"\"\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open(\"input.txt\", \"r\").read()) == open(\"output.txt\", \"r\").read()\n\"\"\"\nimport sys\nimport math",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n[3,2,0,-4]\\n1') == 'true'\nassert solution('2\\n[1,2]\\n0') == 'true'\nassert solution('1\\n[1]\\n-1') == 'false'\n\"\"\"\n\nfrom util import ListNode, assertListEquals",
        "num_ids_2": 44,
        "num_ids_4": 63
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution( [1,2,3,4] ) == False\nassert solution( [1,2,3,3] ) == True\nassert solution( [1,2,3,3] ) == True\nassert solution( [1,2,3,3] ) == True\nassert solution( [1,2,3,3] ) == True\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution([1,2,3,4]) == False\nassert solution([1,2,3,4,5]) == True\nassert solution([1,2,3,4,5,6,7,8,9,10,11]) == False\nassert solution([0,1,2,3,4,5,6,7,8,9,10,11]) == True\nassert solution([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104]) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 88
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3,2,0,-4\") == True\nassert solution(\"1,2\") == True\nassert solution(\"1\") == True\nassert solution(\"1,2,3\") == False\nassert solution(\"1,2,3,4,5\") == False\n",
        "num_ids_2": 24,
        "num_ids_4": 44
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 0 -4\") == True\nassert solution(\"1 2\") == True\nassert solution(\"1\") == False\nassert solution(\"1 2 1 1 1\") == True\nassert solution(\"1 1 1 1 1\") == True\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n3\\n4') == 'True'\nassert solution('1\\n3\\n4\\n3\\n4') == 'True'\nassert solution('1\\n1') == 'True'\nassert solution('1\\n1\\n1') == 'True'\nassert solution('1\\n2') == 'False'\n",
        "num_ids_2": 38,
        "num_ids_4": 67
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"[3,2,0,-4]\\n1\") == True\nassert solution(\"[1,2]\\n0\") == True\nassert solution(\"[1]\\n-1\") == False\n\"\"\"\n\nimport sys\n\n\nclass Node:\n    def __init__(self, value, next_node):\n        self.value = value\n        self.next_node = next_node\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def push(self, node_value, node_next):\n        node = Node(node_value, node_next)\n\n        if self.head is None:\n            self.head = node\n            return\n\n        current_node = self.head\n        while current_node.next_node:\n            current_node = current_node.next_node\n        current_node.next_node = node\n\n    def has_cycle(self):\n        slow_pointer = self.head\n        fast_pointer = self.head\n        while slow_pointer and fast_pointer and fast_pointer.next_node:\n            slow_pointer = slow_pointer.next_node\n            fast_pointer = fast_pointer.next_node.next_node\n            if slow_pointer == fast_pointer:\n                return True\n\n        return False\n",
        "num_ids_2": 34,
        "num_ids_4": 48
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(['3', '2', '0', '-4'], 1) == True\nassert solution(['1', '2'], 0) == True\nassert solution(['1'], -1) == False\n",
        "num_ids_2": 37,
        "num_ids_4": 50
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3,2,0,-4,0') == True\nassert solution('1,2') == True\nassert solution('1') == False\nassert solution('3,2,0,-4,0,0') == False\nassert solution('3,2,0,-4,0,1') == True\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3, 2, 0 -4\") == True\nassert solution(\"1, 2\") == True\nassert solution(\"1\") == True\nassert solution(\"\") == False\n\n\"\"\"\n\n\nimport unittest\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        \"\"\"\n        We can do a fast/slow pointer approach\n        \"\"\"\n        fast = head\n        slow = head\n        while fast and fast.next:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n        return False\n\n\nclass TestSolution(unittest.TestCase):\n    def test_general(self):\n        assert Solution().hasCycle(None) == False\n        ",
        "num_ids_2": 24,
        "num_ids_4": 39
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(nums, target) == [0, 1]\n'''\nimport unittest\n\nclass SolutionTest(unittest.TestCase):\n    def test(self):\n        pass",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 7 11 15\\n9') == '0 1'\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution([2, 7, 11, 15]) == [0, 1]\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i, num in enumerate(nums):\n            for j in range(i + 1, len(nums)):\n                if num + nums[j] == target:\n                    return [i, j]\n        return []\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1,1,1') == [0,1,2], 'Wrong answer'\nassert solution('0,1,1') == [0,1], 'Wrong answer'\n\n\"\"\"\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 1') == '1', 'invalid'\nassert solution('1 0') == '0', 'invalid'\nassert solution('1 1') == 'invalid', 'invalid'\n\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 46
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 7 11 15') == [0, 1]\n\"\"\"\n\nclass Solution:\n    def twoSum(self, nums, target):\n        # write your code here\n        # use dict to store {num : index}\n        mapping = {}\n        for i in range(len(nums)):\n            if nums[i] not in mapping:\n                mapping[target - nums[i]] = i\n            else:\n                return [mapping[nums[i]], i]",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 7 11 15') == '0 1'\nassert solution('0 1') == '0 0'\nassert solution('1 2 3 4 5') == '0 4'\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        num_dict = dict()\n        for index, value in enumerate(nums):\n            if target - value in num_dict:\n                return [index, num_dict[target - value]]\n            num_dict[value] = index\n\n\"\"\"\n7. Write a function to find the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\".\n\nExample 1:\n\nInput: [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"\nExample 2:\n\nInput: [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings.\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        if not strs:\n            return ''\n        shortest_str = min(strs, key=len)\n        for index, char in enumerate(shortest_str):\n            for word in strs:\n                if word[index]!= char:\n                    return shortest_str[:index]\n        return shortest_str\n\n\nassert Solution().longestCommonPrefix(['flower', 'flow', 'flight']) == 'fl'\nassert Solution().longestCommonPrefix(['dog', 'racecar', 'car']) == ''\n\n\n\"\"\"\n8. Write a function to count the number of prime numbers less than a non-negative number, n.\n\nExample 1:\n\nInput: 10\nOutput: 4\nExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n\"\"\"\n\nfrom typing import int\n\n\nclass Solution:\n    def countPrimes(self, n: int) -> int:\n        if n < 2:\n            return 0\n        primes = [True] * n\n        primes[0] = primes[1] = False\n        for i in range(2, int(n ** 0.5) + 1):\n            if primes[i]:\n                primes[i * i:n:i] = [False] * len(primes[i * i:n:i])\n        return sum(primes)\n",
        "num_ids_2": 26,
        "num_ids_4": 65
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 7 11 15\") == \"0 1\"\nassert solution(\"2 7 11 15\") == \"0 1\"\n\nSample Tests\nInput:\n2 7 11 15\n9\nOutput:\n0 1\n\nInput:\n2 7 11 15\n26\nOutput:\n2 3\n\n\nIf you can't get the correct output, check your variable names or syntax.\nDo you have the right input and answer? Run the program and check the output.\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(nums = [2, 7, 11, 15], target = 9) == [0, 1]\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6, 4, 12, 1, 20, 0, 16') == '0, 1', 'Wrong!'\n\nassert solution('0, 4, 12, 1, 20, 0, 16') == '0, 5', 'Wrong!'\n\nassert solution('2, 7, 11, 15') == '0, 1', 'Wrong!'\n\nassert solution('9, 2, 13, 5') == '0, 3', 'Wrong!'\n\nassert solution('0, 4, 12, 1, 20, 0, 16') == '0, 5', 'Wrong!'",
        "num_ids_2": 56,
        "num_ids_4": 100
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n\"\"\"\nimport sys\nimport math",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n\"\"\"\n\nfrom math import sqrt\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(int)) == str(int)\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n\"\"\"\nimport math",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '0'\nassert solution('4') == '1'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"7\") == \"0\"\nassert solution(\"8\") == \"1\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\npiles = sys.stdin.readline().strip().split()\n\ncount = 0\n\nfor i in range(n):\n    if piles[i] == piles[n + i]:\n        count += 1\n    else:\n        break",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\nprint('Success')\n\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\nassert solution(\"1\\n1\") == \"impossible\"",
        "num_ids_2": 31,
        "num_ids_4": 45
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\") == 'impossible'\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'impossible'\nassert solution('0 2 3 1 2 3 1 2 3 2') == 'impossible'\nassert solution('3 7') == '4'\nassert solution('1 2 2 1') == '4'\nassert solution('2 1 1 2 3 3 3 3 1 1 1 1 1 1 1 2 2 1 1 1 2 3') == 'impossible'\n\nprint('Success')\n\n----",
        "num_ids_2": 31,
        "num_ids_4": 55
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\n\"\"\"\n\nn = int(input())\nsocks = input()\nl = [int(s) for s in socks.split()]\ncnt = 0\nfor i in range(len(l)):\n    for j in range(i, len(l)):\n        if l[i] == l[j]:\n            cnt += 1\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('184 1') == '180'\nassert solution('123450995 1') == '123451000'\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\nprint('All tests passed.')",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"184 1\"\n) == \"180\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('184 1') == '180'\nassert solution('123450995 1') == '123451000'\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('184 1') == '180'\nassert solution('123450995 1') == '123451000'\n\n\"\"\"\n\nimport math\nimport sys\n\nC, K = sys.stdin.readline().split()\nC = int(C)\nK = int(K)",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123450995 1\") == \"123451000\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport math\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('184 1') == '180'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0.0'\nassert solution('0 0') == '0.0'\nassert solution('1 1\\n2 2') == '0.0'\nassert solution('1 1\\n2 2\\n3 3') == '0.0'\n",
        "num_ids_2": 21,
        "num_ids_4": 51
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3\\n') == '0.000000'\n\"\"\"\n\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1') == 0\nassert solution('2 2') == 0\nassert solution('3 3') == 0\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/5d0198c7b3a69a5e1b00007a/train/python",
        "num_ids_2": 18,
        "num_ids_4": 27
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\\n\") == \"0.000000\"\nassert solution(\"3\\n0 1\\n1 0\\n1 1\\n\") == \"0.000000\"\n\"\"\"\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3\\n') == '0.000000'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3\\n') == '0.0'\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n0 1\\n1 0\\n1 1') == '0.000000'\n\"\"\"\n\nfrom math import sqrt\nfrom collections import Counter, defaultdict\nfrom itertools import product\nfrom functools import reduce\nfrom math import factorial\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\nassert solution('3\\n0 1\\n1 0\\n1 1') == '0.000000'\nassert solution('3\\n-1 1\\n1 1\\n2 2') == '0.000000'\nassert solution('3\\n0.00001\\n1 0\\n1 1') == '0.000000'\nassert solution('3\\n1 1\\n0 1\\n0 2') == '0.000000'\n",
        "num_ids_2": 48,
        "num_ids_4": 99
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1 2 4\"\n\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1 2 6 8\"",
        "num_ids_2": 72,
        "num_ids_4": 72
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == '1\\n2\\n4'\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == '1\\n2\\n6\\n8'\nprint(\"Passed!\")\n\n\"\"\"\n\"\"\"\nYou have $E$ pairs of singers, numbered $1 \\leq E \\leq 10$. The singers of pair $i$ sing the same song on consecutive nights $1 \\leq N_i \\leq E$. The task is to output all the pairs that share at least one song during the $E$ consecutive nights, but the singer of pair $i$ in the output should be listed once, not twice.\n\n-----Input-----\nThe first line of input contains an integer $N$, $1 \\leq N \\leq 10$, the number of pairs.\n\nThe second line contains an integer $E$, $1 \\leq E \\leq 10$, the number of consecutive nights.\n\nThe third line contains $N$ positive integers $N_1, \\ldots, N_E$ on one line, separated by spaces, the number of singers in each pair.\n\n-----Output-----\nPrint the pairs $i$ that share at least one song. Pair $i$ should be listed one time.\n\nSample Input 1:\n2\n4\n2\n3 1 1 2\nSample Output 1:\n1 2\n\nSample Input 2:\n4\n2\n3\n3 1 1 4\n2 3 3\nSample Output 2:\n1 2 3 4\n\"\"\"\n",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\\n3 4 2 1\") == \"1\\n2\\n4\"\n\"\"\"\n\nimport itertools\nfrom typing import List, Set, Tuple\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n3\n2 1 2\n3 2 3 4''') == '1\\n2\\n4'",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\\n3 4 2 1\") == \"1\\n2\\n4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\n",
        "num_ids_2": 88,
        "num_ids_4": 88
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"4\\n3\\n2 1 2\\n3 2 3 4\"\n) == \"1\\n2\\n4\"\nassert solution(\n    \"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\"\n) == \"1\\n2\\n6\\n8\"\nassert solution(\n    \"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\"\n) == \"1\\n2\\n6\\n8\"\nassert solution(\n    \"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\"\n) == \"1\\n2\\n6\\n8\"\nassert solution(\n    \"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\"\n) == \"1\\n2\\n6\\n8\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n3\n2 1 2\n3 2 3 4\n3 4 2 1''') == '1\\n2\\n4'\nassert solution('''8\n5\n4 1 3 5 6\n2 5 6\n3 6 7 8\n2 6 2\n4 2 6 8 1''') == '1\\n2\\n6\\n8'\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3\\n2 1 2\\n3 2 3 4') == '1\\n2\\n4'\nassert solution('8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1') == '1\\n2\\n6\\n8'\n\"\"\"",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3\\n2 1 2\\n3 2 3 4') == '1\\n2\\n4'\nassert solution('8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1') == '1\\n2\\n6\\n8'\nassert solution('4\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1') == '1\\n2\\n6\\n8'\nassert solution('5\\n3\\n2 1 2\\n3 2 3 4') == '1\\n2\\n4'\nassert solution('4\\n3\\n2 1 2\\n3 2 3 4') == '1\\n2\\n4'\n",
        "num_ids_2": 82,
        "num_ids_4": 164
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\\n3 4 2 1\") == \"1\\n2\\n4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\n\nfrom typing import List, Tuple\nfrom collections import Counter\nimport re",
        "num_ids_2": 88,
        "num_ids_4": 88
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2 2') == '8'\nassert solution('3 4 5') == '60'\nassert solution('5 5 5') == '120'\nassert solution('7 5 4') == '210'\nassert solution('1 1 1') == '1'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\n\"\"\"\nfrom itertools import combinations",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\n\"\"\"\n\nimport itertools",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\nprint('Passed')",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n\nfrom collections import defaultdict, Counter\nfrom itertools import product\nfrom functools import reduce",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n\"\"\"\n\nn, t, m = [int(i) for i in input().split()]\nprint((n ** 3) * (t ** 2) * m)\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 5') == '60'\n\"\"\"\n\n\"\"\"\n3 4 5\nSample Output 1:\n60\nSample Input 2:\n2 2 2\nSample Output 2:\n8\n\"\"\"\n\nN, T, M = map(int, input().split())\n\nprint(N*T*M)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\nassert solution(\"1 1 1\") == \"1\"\n\n\"\"\"\n\n\"\"\"\nExplanation:\n3 eyes, 4 noses, 5 mouths.\n\nAll possible combinations of:\neye + nose + mouth\n\n(e1, n1, m1) + (e2, n2, m2) + (e3, n3, m3)\n\n(e1, n1, m2) + (e2, n2, m1) + (e3, n3, m2)\n\n(e1, n1, m3) + (e2, n2, m3) + (e3, n3, m1)\n\n(e1, n2, m1) + (e2, n2, m2) + (e3, n3, m1)\n\n(e1, n2, m2) + (e2, n2, m3) + (e3, n3, m2)\n\n(e1, n3, m2) + (e2, n2, m2) + (e3, n3, m3)\n\n(e1, n3, m3) + (e2, n2, m2) + (e3, n3, m1)\n\n(e2, n1, m1) + (e2, n2, m2) + (e2, n3, m3)\n\n(e2, n1, m2) + (e2, n2, m3) + (e2, n3, m1)\n\n(e2, n1, m3) + (e2, n2, m3) + (e2, n3, m2)\n\n(e3, n1, m1) + (e3, n2, m2) + (e3, n3, m3)\n\n(e3, n1, m2) + (e3, n2, m3) + (e3, n3, m1)\n\n(e3, n1, m3) + (e3, n2, m2) + (e3, n3, m1)\n\n(e1, n2, m1) + (e1, n2, m2) + (e1, n2, m3)\n\n(e1, n2, m2) + (e1, n2, m3) + (e1, n2, m1)\n\n(e1, n2, m3) + (e1, n2, m1) + (e1, n2, m2)\n\n(e1, n3, m1) + (e1, n3, m2) + (e1, n3, m3)\n\n(e1, n3, m2) + (e1, n3, m3) + (e1, n3, m1)\n\n(e2, n1, m1) + (e2, n1, m2) + (e2, n1, m3)\n\n(e2, n1, m2) + (e2, n1, m3) + (e2, n1, m1)\n\n(e2, n1, m3) + (e2, n1, m1) + (e2, n1, m2)\n\n(e2, n2, m1) + (e2, n2, m2) + (e2, n2, m3)\n\n(e2, n2, m2) + (e2, n2, m3) + (e2, n2, m1)\n\n(e2, n2, m3) + (e2, n2, m1) + (e2, n2, m2)\n\n(e2, n3, m1) + (e2, n3, m2) + (e2, n3, m3)\n\n(e2, n3, m2) + (e2, n3, m3) + (e2, n3, m1)\n\n(e3, n1, m1) + (e3, n1, m2) + (e3, n1, m3)\n\n(e3, n1, m2) + (e3, n1, m3) + (e3, n1, m1)\n\n(e3, n1, m3) + (e3, n1, m1) + (e3, n1, m2)\n\n(e3, n2, m1) + (e3, n2, m2) + (e3, n2, m3)\n\n(e3, n2, m2) + (e3, n2, m3) + (e3, n2, m1)\n\n(e3, n2, m3) + (e3, n2, m1) + (e3, n2, m2)\n\n(e3, n3, m1) + (e3, n3, m2) + (e3, n3, m3)\n\n(e3, n3, m2) + (e3, n3, m3) + (e3, n3, m1)\n\n(e1, n2, m1) + (e1, n2, m2) + (e1, n2, m3)\n\n(e1, n2, m2) + (e1, n2, m3) + (e1, n2, m1)\n\n(e1, n2, m3) + (e1, n2, m1) + (e1, n2, m2)\n\n(e1, n3, m1) + (e1, n3, m2) + (e1, n3, m3)\n\n(e1, n3, m2) + (e1, n3, m3) + (e1, n3, m1)\n\n(e2, n1, m1) + (e2, n1, m2) + (e2, n1, m3)\n\n(e2, n1, m2) + (e2, n1, m3) + (e2, n1, m1)\n\n(e2, n1, m3) + (e2, n1, m1) + (e2, n1, m2)\n\n(e2, n2, m1) + (e2, n2, m2) + (e2, n2, m3)\n\n(e2, n2, m2) + (e2, n2, m3) + (e2, n2, m1)\n\n(e2, n2, m3) + (e2, n2, m1) + (e2, n2, m2)\n\n(e2, n3, m1) + (e2, n3, m2) + (e2, n3, m3)\n\n(e2, n3, m2) + (e2, n3, m3) + (e2, n3, m1)\n\n(e3, n1, m1) + (e3, n1, m2) + (e3, n1, m3)\n\n(e3, n1, m2) + (e3, n1, m3) + (e3, n1, m1)\n\n(e3, n1, m3) + (e3, n1, m1) + (e3, n1, m2)\n\n(e3, n2, m1) + (",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3\\n1 -1 4\") == \"2.5\"\nassert solution(\"4\\n1 1 1 1\") == \"1.0\"\nassert solution(\"5\\n0 0 1 2 3\") == \"1.2\"\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 75
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 0 2\\n3 0 2') == '1.6666666666666667'\nassert solution('3\\n1 -1 4') == '2.5'\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\n-----Solution-----\n'''\n\nn = int(input())\narr = list(map(int,input().split()))\n\nhit = 0\nfor i in arr:\n    if i > 0:\n        hit = hit + i\n\nprint(hit/n)\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3 -1 4\") == \"2.5\"\nassert solution(\"3 -1 0 2\") == \"1.5\"\n\nimport sys; input = sys.stdin.readline\nn = int(input())\nbases = input().split()\n\ntotal = 0\nfor i in range(len(bases)):\n    if int(bases[i]) == -1:\n        continue\n    elif int(bases[i]) > 4:\n        bases[i] = 4\n    total += int(bases[i])\nprint(total/n)\n",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 1') == '0'\nassert solution('1 1 0') == '0'\nassert solution('1 1 0 1') == '0.4'\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_cases.SINGLE_CASE) == test_cases.SINGLE_CASE_ANSWER\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3 -1 4\") == \"2.5\"\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n\n    def test_solution(self):\n        self.assertEqual(solution(\"3 0 2\"), \"1.6666666666666667\")\n        self.assertEqual(solution(\"3 -1 4\"), \"2.5\")\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 0 2\") == '1.6666666666666667'\nassert solution(\"3 -1 4\") == '2.5'\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3 -1 4\") == \"2.5\"\n\na, b, c = [int(n) for n in stdin.split()]\nprint(a, b, c)\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 1') == '1'\nassert solution('1 0') == '0.5'\nassert solution('0 1 2') == '0.6667'\n",
        "num_ids_2": 18,
        "num_ids_4": 42
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''7 3\n''') == '6'\n\nassert solution('''15 12\n''') == '7'\n'''",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n\"\"\"\n\nfrom math import sqrt\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3\\n6') == '6'\nassert solution('15 12\\n7') == '7'\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n7 3\n''') == '6'\nassert solution('''\n15 12\n''') == '7'\nprint('The solution is correct!')\n\n\"\"\"\n7 3\n6\n7\n13\n19\n23\n31\n37\n\n7 3\n7\n7\n7\n7\n7\n7\n\n7 3\n7\n7\n7\n7\n7\n7\n7\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\") == \"6\"\nassert solution(\"15 12\") == \"7\"\n\"\"\"\n\nn, k = map(int, input().split())\n\nprint((n * (n + 1)) // 2 - (n // 2 - 1) * (n // 2))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 3\\n') == '6'\nassert solution('15 12\\n') == '7'\n\n\"\"\"\n\nimport sys\n\nfrom io import StringIO",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n\"\"\"\n\nn, k = map(int, input().split())\n\nsieve = [True for _ in range(n + 1)]\ncrossed = [i for i in range(2, n + 1)]\n\nfor i in range(2, n + 1):\n    if sieve[i]:\n        for j in range(i * i, n + 1, i):\n            crossed.remove(j)\n            sieve[j] = False\n\nfor i in range(len(crossed)):\n    if i == k - 1:\n        print(crossed[i])\n        break\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('123864 123865') == '1'\nassert solution('198765 198769') == '0'\nprint('Success')\n\nhttps://www.codewars.com/kata/57f1d1eb1ed1cfd783000135/train/python",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('123864 123865') == 1\nassert solution('198765 198769') == 0\n\"\"\"\n\nfrom math import factorial",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('123864 123865') == '1'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"123864 123865\") == 1\nassert solution(\"198765 198769\") == 0",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\nassert solution(\"123864 123867\") == \"0\"\n\"\"\"\n\na = input().split()\n\nl = int(a[0])\nh = int(a[1])\n\nprint(h - l + 1)\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('123864 123865') == '1'\nassert solution('198765 198769') == '0'\n\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"1 2 3\") == \"0\"\nassert solution(\"1 2 3 4\") == \"0\"\n",
        "num_ids_2": 28,
        "num_ids_4": 51
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2') == '0.5'\nassert solution('3\\n1') == '0.33333333'\nassert solution('6\\n6') == '1.0'\n\n\"\"\"\n\n\nimport sys\nimport numpy as np\nimport math\nfrom math import sqrt\n",
        "num_ids_2": 31,
        "num_ids_4": 46
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.6666666666666666'\n\"\"\"\n\nimport sys",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.66666667'",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.66666667'\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(2) == 0.5\nassert solution(3) == 0.66666667\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('2') == '0.5'\nassert solution('3') == '0.66666667'\n",
        "num_ids_2": 18,
        "num_ids_4": 40
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'2'\n) == '0.5'\nassert solution(\n'3'\n) == '0.66666667'\n\nprint(solution(input()))\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.66666667'\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1') == '0.5'\nassert solution('3\\n0') == '0.33333333'\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.66666667'\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\nassert solution('144') == 'impossible'\nassert solution('60') == 'impossible'\nassert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\n\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 64
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\"\n\nimport math\n\n\"\"\"\nWrite 5 lines of code to test the correctness of solution:\nIn a game of darts a player throws darts at a board consisting of 20 different sections labelled $1$ to $20$. When the dart hits section $i$ the player scores $i$ points. Each section also contains a double area and a triple area. When the dart hits the double area of section $i$ the player scores $2 i$ points, and when the dart hits the triple area the player scores $3 i$ points, instead of $i$ points. When throwing three darts, the player can therefore score a total of at most $180$ points by throwing all three darts in the triple area of section $20$. \n\nGiven a target score, output at most three throw scores such that their sum is equal to the given target score. Note that the centre of the dartboard, which is usually called bullseye, is not taken into account is this problem.\n\n-----Input-----\nThe input consists of a single integer $n$ ($1\\leq n \\leq 180$), the target score.\n\n-----Output-----\nIf the target score can be achieved, output at most three lines, each of the form \u201csingle $d$\u201d, \u201cdouble $d$\u201d, or \u201ctriple $d$\u201d, where $d$ is an integer between $1$ and $20$ (inclusive), such that the sum of these scores is equal to $n$. Otherwise, output \u201cimpossible\u201d. If there are multiple valid answers you may output any of them.\n\n-----Examples-----\nSample Input 1:\n180\nSample Output 1:\ntriple 20\ntriple 20\ntriple 20\n\nSample Input 2:\n96\nSample Output 2:\ntriple 19\ndouble 15\nsingle 9\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('180') == 'triple 20'\n\"\"\"\n\n\"\"\"\nSolution Explanation\n\nIn this problem we have a target score and we need to return the maximum number of throw types. The maximum number of throw types is three because there are three possibilities:\n\nThe throw scores are all single digits, meaning we can have one of each throw type.\nThe throw scores are all double digits, meaning we can have one of each throw type.\nThe throw scores are all triple digits, meaning we can have one of each throw type.\n\nIn the third case we can have multiple doubles or single doubles.\n\nSo we can add the double range of 20 to the triple range of 20.\n\nThis gives us all the possibilities:\n\n[20, 20, 20]\n[20, 20, 21]\n[20, 20, 22]\n[20, 20, 23]\n[20, 20, 24]\n[20, 20, 25]\n[20, 20, 26]\n[20, 20, 27]\n[20, 20, 28]\n[20, 20, 29]\n[20, 20, 30]\n[20, 20, 31]\n[20, 20, 32]\n[20, 20, 33]\n[20, 20, 34]\n[20, 20, 35]\n[20, 20, 36]\n[20, 20, 37]\n[20, 20, 38]\n[20, 20, 39]\n[20, 20, 40]\n[20, 20, 41]\n[20, 20, 42]\n[20, 20, 43]\n[20, 20, 44]\n[20, 20, 45]\n[20, 20, 46]\n[20, 20, 47]\n[20, 20, 48]\n[20, 20, 49]\n[20, 20, 50]\n[20, 20, 51]\n[20, 20, 52]\n[20, 20, 53]\n[20, 20, 54]\n[20, 20, 55]\n[20, 20, 56]\n[20, 20, 57]\n[20, 20, 58]\n[20, 20, 59]\n[20, 20, 60]\n[20, 20, 61]\n[20, 20, 62]\n[20, 20, 63]\n[20, 20, 64]\n[20, 20, 65]\n[20, 20, 66]\n[20, 20, 67]\n[20, 20, 68]\n[20, 20, 69]\n[20, 20, 70]\n[20, 20, 71]\n[20, 20, 72]\n[20, 20, 73]\n[20, 20, 74]\n[20, 20, 75]\n[20, 20, 76]\n[20, 20, 77]\n[20, 20, 78]\n[20, 20, 79]\n[20, 20, 80]\n[20, 20, 81]\n[20, 20, 82]\n[20, 20, 83]\n[20, 20, 84]\n[20, 20, 85]\n[20, 20, 86]\n[20, 20, 87]\n[20, 20, 88]\n[20, 20, 89]\n[20, 20, 90]\n[20, 20, 91]\n[20, 20, 92]\n[20, 20, 93]\n[20, 20, 94]\n[20, 20, 95]\n[20, 20, 96]\n[20, 20, 97]\n[20, 20, 98]\n[20, 20, 99]\n[20, 20, 100]\n[20, 20, 101]\n[20, 20, 102]\n[20, 20, 103]\n[20, 20, 104]\n[20, 20, 105]\n[20, 20, 106]\n[20, 20, 107]\n[20, 20, 108]\n[20, 20, 109]\n[20, 20, 110]\n[20, 20, 111]\n[20, 20, 112]\n[20, 20, 113]\n[20, 20, 114]\n[20, 20, 115]\n[20, 20, 116]\n[20, 20, 117]\n[20, 20, 118]\n[20, 20, 119]\n[20, 20, 120]\n[20, 20, 121]\n[20, 20, 122]\n[20, 20, 123]\n[20, 20, 124]\n[20, 20, 125]\n[20, 20, 126]\n[20, 20, 127]\n[20, 20, 128]\n[20, 20, 129]\n[20, 20, 130]\n[20, 20, 131]\n[20, 20, 132]\n[20, 20, 133]\n[20, 20, 134]\n[20, 20, 135]\n[20, 20, 136]\n[20, 20, 137]\n[20, 20, 138]\n[20, 20, 139]\n[20, 20, 140]\n[20, 20, 141]\n[20, 20, 142]\n[20, 20, 143]\n[20, 20, 144]\n[20, 20, 145]\n[20, 20, 146]\n[20, 20, 147]\n[20, 20, 148]\n[20, 20, 149]\n[20, 20, 150]\n[20, 20, 151]\n[20, 20, 152]\n[20, 20, 153]\n[20, 20, 154]\n[20, 20, 155]\n[20, 20, 156]\n[20, 20, 157]\n[20, 20, 158]\n[20, 20, 159]\n[20, 20, 160]\n[20, 20, 161]\n[20, 20, 162]\n[20, 20, 163]\n[20, 20, 164]\n[20, 20, 165]\n[20, 20, 166]\n[20, 20, 167]\n[20, 20, 168]\n[20, 20, 169]\n[20, 20, 170]\n[20, 20, 171]\n[20, 20, 172]\n[20, 20, 173]\n[20, 20, 174]\n[20, 20, 175]\n[20, 20, 176]\n[20, 20, 177]\n[20, 20, 178]\n[20, 20, 179]\n[20, 20, 180]\nIn this particular case we have to look for only two throw types, so we simply output them and that's it.\n\nIn the second case we have to look for the maximum number of doubles and singles, so we can add the double range of 20 to the triple range of 20.\n\nAs a result we have:\n\n[20, 20, 20] + [20, 20, 21] + [20, 20, 22] = [20, 20, 20]\n[20, 20, 20] + [20, 20, 21] + [20, 20, 22] + [20, 20, 23] = [20, 20, 20]\n[20, 20, 20] + [20, 20, 21] + [20, 20, 22] + [20, 20, 23] + [20, 20, 24] = [20, 20, 20]\n[20, 20, 20] +",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('180') == 'triple 20'\n\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\nassert solution('200') == 'impossible'\nassert solution('33') == 'impossible'\nassert solution('101') == 'impossible'\n\nprint(\"All tests passed.\")\n",
        "num_ids_2": 42,
        "num_ids_4": 64
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"180\") == \"triple 20\\ntriple 20\\ntriple 20\"\nassert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\"\n\n\"\"\"\nimport sys\nfrom functools import reduce",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\nassert solution('1') == 'impossible'\nassert solution('5') == 'impossible'\nassert solution('10') == 'impossible'\n",
        "num_ids_2": 42,
        "num_ids_4": 64
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"180\") == \"triple 20\\ntriple 20\\ntriple 20\"\nassert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\"",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 4 7\") == \"168\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''10 4 7''') == '168'\nassert solution('''5 2 2''') == '36'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 32
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\nassert solution(\"4 5 7\") == \"44\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == expected\nprint(solution(input()))",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\n\nprint('Success')",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\n\"\"\"\n\nimport math",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    1\n    3 10\n    \"\"\"\n) == \"7\"\n\nassert solution(\n    \"\"\"\n    2\n    3 8\n    5 8\n    \"\"\"\n) == \"1\"\n\n\"\"\"\n2\n3 8\n5 8\n    \"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n3 10\\n\") == \"7\"\nassert solution(\"2\\n3 8\\n5 8\") == \"1\"\n\"\"\"\nimport sys\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3 8\\n5 8\") == \"1\"\nprint(\"Test PASSED\")\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 10\\n4 9\\n5 10\") == \"2\"\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n10 30 40 50') == '100'\nassert solution('4\\n10 30 40') == '30'\n\"\"\"\n\nimport sys\nfrom math import ceil\n\nnum_ingredients = int(sys.stdin.readline())\ningredients = list()\nfor i in range(num_ingredients):\n    sourness, bitterness = [int(x) for x in sys.stdin.readline().split()]\n    ingredients.append((sourness, bitterness))",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 10\\n5 8\\n8 3') == '1'\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n3 10') == '7'\nassert solution('2\\n3 8') == '1'\nassert solution('3\\n3 8') == '0'\n\nSample Input 3:\n3\n10 10\n5 5\n3 2\nSample Output 3:\n8\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 50
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n9 12\\n7 2') == 1\n\"\"\"\n\nfrom itertools import permutations",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 10') == '7'\nprint(solution(input()))\n\n\"\"\"\n\nfrom typing import Callable",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''1\n3 10\n''') == '7'\n\nassert solution('''2\n3 8\n5 8\n''') == '1'\n\n\"\"\"\nimport sys\nimport math\nfrom functools import reduce\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\") == \"raise your left hand.\"\n\nassert solution(\"4\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\") == \"smile.\"\n\nassert solution(\"1\\nSimon says smile.\") == \"\"\nassert solution(\"\") == \"\"\n",
        "num_ids_2": 71,
        "num_ids_4": 91
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''Simon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n''') == 'Simon says raise your left hand.\nSimon says raise your right hand.\nSimon says lower your right hand.\nSimon says raise your left hand.\nSimon says lower your left hand.\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\n\nfor _ in range(N):\n    instructions = sys.stdin.readline().strip()\n    if instructions.startswith('Simon says'):\n        print(instructions[len('Simon says'):])\n        \nSample Input 1:\n1\nSimon says smile.\n\nSample Output 1:\nsmile.\n\nSample Input 2:\n3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\nSample Output 2:\n raise your right hand.\nraise your left hand.\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n\") == \\\n    \"raise your left hand.\\n\"\n\n\"\"\"\nfrom collections import namedtuple\nimport sys\nfrom typing import List\n\nResult = namedtuple(\"Result\", [\"sequence\", \"instructions\"])\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\nSimon says smile.\\n') =='smile.'\nassert solution('3\\nSimon says raise your right hand.\\n'\n                 'Lower your right hand.\\n'\n                 'Simon says raise your left hand.\\n') == 'raise your left hand.'\n\n-----Explanation-----\nIn Sample Case 1, the game begins by telling the user to raise their right hand. After lowering their right hand, the user says \u201cSimon says smile.\u201d The user then asks for their left hand. The user raises their left hand, saying \u201cSimon says smile.\u201d The program prints the following output:\n\n    smile.\n\nIn Sample Case 2, the user first raises their left hand. After lowering the user\u2019s left hand, the user says \u201cSimon says raise your right hand.\u201d The program then asks the user for their right hand. The user raises their right hand, saying \u201cSimon says raise your left hand.\u201d The program prints the following output:\n\n    raise your right hand.\n    raise your left hand.\n\nThe program correctly identifies that the user is supposed to raise their left hand, so the output is as expected.\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\nSimon says smile.\\n') =='smile.\\n'\nassert solution('3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n') == 'raise your left hand.\\n'\n",
        "num_ids_2": 65,
        "num_ids_4": 65
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\nSimon says smile.\\n\") == \"smile.\"\nassert solution(\"1\\nSimon says smile.\\n\") == \"smile.\"\nassert solution(\"1\\nSimon says smile.\\n\") == \"smile.\"\nassert solution(\"1\\nSimon says smile.\\n\") == \"smile.\"\nassert solution(\"1\\nSimon says raise your right hand.\\n\") == \"raise your right hand.\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\nSimon says smile.\\n\") == \"smile.\"\n\nassert solution(\"1\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n\") == \"raise your right hand.\\nraise your left hand.\"\n\n\"\"\"\n\nn = int(input())\n\nfor _ in range(n):\n    line = input()\n    if line.startswith(\"Simon says\"):\n        print(line[len(\"Simon says\"):])\n",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '1\\n' +\n    'simon says touch your nose.\\n' +\n    'simon says touch your nose.\\n' +\n    'Simon says stop touching your nose.\\n'\n) == (\n    'simon says touch your nose.\\n' +\n    'simon says touch your nose.\\n' +\n    'Simon says stop touching your nose.\\n'\n)\n\n\"\"\"\n\nfrom unittest import TestCase\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"1\nSimon says smile.\nSimon says smile.\nSimon says smile.\"\"\") == \"\"\" smile.\n\"\"\"\n\n\"\"\"\nLines 1-3 are provided for you.\n\"\"\"\n\nn = int(input())\nlines = [input() for _ in range(n)]\nfor line in lines:\n    if line.startswith(\"Simon says\"):\n        print(line[10:])\n\n\"\"\"\nYou should probably use the following two variables to determine the best solution:\n\nlines (list of str)\nn (int)\n\"\"\"\n\n\"\"\"\nTo test that your solution works, call the solution(open('test.in', 'r').read()) function with an input file (test.in) containing the following input:\n\n3\nSimon says smile.\nLower your right hand.\nSimon says smile.\n\nThe output for this should be:\nsmile.\n\"\"\"",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\nSimon says smile.\\nLower your right hand.\") == \"smile.\\nlower your right hand.\"\nassert solution(\"3\\nSimon says smile.\\nLower your right hand.\\nSimon says frown.\\nLower your left hand.\") == \"smile.\\nlower your right hand.\\nfrown.\\nlower your left hand.\"\nassert solution(\"4\\nSimon says smile.\\nLower your right hand.\\nSimon says frown.\\nLower your left hand.\\nSimon says frown again.\\nRaise your right hand.\\nRaise your left hand.\") == \"smile.\\nlower your right hand.\\nfrown.\\nlower your left hand.\\nfrown.\\nraise your right hand.\\nraise your left hand.\"\n\nprint('Success')\n\n------OUTPUT-------\nSuccess\n\n'''\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\n\nfor i in range(N):\n    input_str = sys.stdin.readline().rstrip()\n    if input_str.find(\"Simon says\")!= -1:\n        print(input_str.replace(\"Simon says\", \"\"))\n",
        "num_ids_2": 85,
        "num_ids_4": 182
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\n\"\"\"\n\n\nimport sys\nimport math",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\nassert solution('0 2 1 0 0') == '1'\nassert solution('0 2 1 2 0') == '2'\nassert solution('2 2 1 0 0') == '1'\n\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 61
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''0 0 4 6 10 12 16 18''') == '5'\nassert solution('''1 2 4 6 10 12 16 18''') == '0'\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\n\"\"\"\n\nstdin = input()\n\nregisters = stdin.split()\nregisters = list(map(int, registers))\n\ncount = 0\n\nwhile all(registers):\n    count += 1\n    for i in range(len(registers)):\n        registers[i] += 1\n        if i % 2 == 0 and registers[i] > registers[i+1]:\n            registers[i] = 0\n            registers[i+1] += 1\n        elif registers[i] > registers[i-1] and i % 2 == 1:\n            registers[i] = 0\n            registers[i-1] += 1\n\nprint(count)\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 4 6 10 12 16 18') == '5'\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\"\"\"\n\nimport sys\n\np = [2, 3, 5, 7, 11, 13, 17, 19]\nstdin = sys.stdin.readlines()\n\nstdin = [int(i) for i in stdin[0].split()]\n\nfor i in range(len(p)):\n    if stdin[i] == 0:\n        continue\n    for j in range(1, p[i]):\n        if (stdin[i] + j) % p[i] == 0:\n            stdin[i] = 0\n            break\n\nprint(sum(stdin))\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\nassert solution(\"1 2 4 0 6 10 12 16 18\") == \"1\"\nassert solution(\"1 2 4 5 6 10 12 16 18\") == \"1\"\nassert solution(\"1 2 4 5 6 10 12 16 19\") == \"1\"\n",
        "num_ids_2": 34,
        "num_ids_4": 70
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\nassert solution(\"1 2 4 8 16 32 64 128 256\") == \"256\"\nassert solution(\"1 2 4 8 16 32 64 128 256\") == \"256\"\nassert solution(\"1 2 4 8 16 32 64 128 256\") == \"256\"\n",
        "num_ids_2": 34,
        "num_ids_4": 70
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == '3\\n0 1\\n1 2\\n2 3'\nassert solution('4 1\\nA\\nA\\nG\\nT') == '2\\n0 1\\n0 2\\n0 3'\n\n\"\"\"\nimport numpy as np\nimport collections\nfrom typing import Tuple, Union\nimport unittest\nimport sys\n",
        "num_ids_2": 70,
        "num_ids_4": 70
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC\\n') == '3\\n0 1\\n1 2\\n2 3\\n'\n\"\"\"\nfrom sys import stdin\n\nn, k = map(int, stdin.readline().split())\n\nd = [0] * 1001\nedges = []\nfor _ in range(n):\n    s = stdin.readline().strip()\n    for i in range(k - 1):\n        edges.append((s[i], s[i + 1], i + 1))\n\nfor u, v, w in sorted(edges, key=lambda x: x[2]):\n    d[u] += 1\n    d[v] += 1\n\nd[1000] = n\n\nfor i in range(1000, 0, -1):\n    if d[i]!= 0:\n        break\n\nd = [x - 1 for x in d]\nd[0] = d[1000] - 1\n\nprint(d[0])\n\nfor u, v in zip(d[1:], d[:-1]):\n    print(u, v)\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\\n0 1\\n1 2\\n2 3\"\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\\n0 1\\n0 2\\n0 3\"\nprint('Passed')\n\n---------------------\nc6e0f3d1e8bbe09f541a6a918e4a2dfe2e35813d\n\nfrom collections import defaultdict, deque\nfrom itertools import chain, combinations\nfrom math import inf\n\nclass Node:\n    def __init__(self, label, *children):\n        self.label = label\n        self.children = list(children)",
        "num_ids_2": 70,
        "num_ids_4": 70
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('AA\\nAT\\nTT\\nTC') == '3'\nassert solution('A\\nA\\nG\\nT') == '2'\nassert solution('AA\\nAT\\nAA\\nTT\\nTC') == '2'\nassert solution('AA\\nAT\\nAT\\nTT\\nTT\\nTT\\nTT') == '5'",
        "num_ids_2": 27,
        "num_ids_4": 68
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\"\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\"\n\"\"\"\n\nimport sys\nfrom math import log2, exp\n\nclass Node:\n    def __init__(self, value, weight):\n        self.value = value\n        self.weight = weight\n\nclass Tree:\n    def __init__(self):\n        self.nodes = {}\n        self.weight = 0\n\n    def addNode(self, node):\n        self.nodes[node.value] = node\n        self.weight += node.weight\n\n    def findNode(self, value):\n        for node in self.nodes.values():\n            if node.value == value:\n                return node\n        return None\n\n    def getMinWeight(self):\n        if self.weight < 0:\n            return float('inf')\n        return self.weight\n\nclass TreeNode:\n    def __init__(self, left, right, weight):\n        self.left = left\n        self.right = right\n        self.weight = weight",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == '3\\n0 1\\n0 2\\n1 2\\n1 3\\n2 3'\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == '2\\n0 1\\n0 2'\nassert solution(\"4 4\\nACAA\\nAGAA\\nATAT\\nATTC\\nAAAA\\nAAAA\") == '5\\n0 1\\n0 2\\n1 3\\n2 3'\nassert solution(\"4 4\\nATAT\\nAGAA\\nACAA\\nAAAA\") == '5\\n0 1\\n0 2\\n0 3'\nassert solution(\"3 2\\nAGCT\\nGATA\\nGGTA\") == '2\\n1 2\\n0 1'",
        "num_ids_2": 74,
        "num_ids_4": 161
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == '3'\nassert solution('4 1\\nA\\nA\\nG\\nT') == '2'\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\\n0 1\\n1 2\\n2 3\"\nprint(solution(\"4 1\\nA\\nA\\nG\\nT\"))\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == '3'\nassert solution('4 1\\nA\\nA\\nG\\nT') == '2'\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\\n0 1\\n1 2\\n2 3\"\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\\n0 1\\n0 2\\n0 3\"\n\n\"\"\"\n\nfrom sys import stdin\n\nn, m = [int(x) for x in stdin.readline().split()]\ns = stdin.readline().strip()\n\nu = v = 0\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if s[i]!= s[j]:\n            if u == 0:\n                u = i + 1\n                v = j + 1\n            elif j - i > u - v:\n                u = i + 1\n                v = j + 1\nprint(u, v)\n",
        "num_ids_2": 70,
        "num_ids_4": 70
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a\") == \"a\"\nassert solution(\"aabb\") == \"a\"\nassert solution(\"abbb\") == \"b\"\nassert solution(\"aabbb\") == \"a\"\nassert solution(\"abbbab\") == \"b\"\n",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == -1\nassert solution(\"ac\") == -1\nassert solution(\"abb\") == -1\nassert solution(\"abc\") == -1\n",
        "num_ids_2": 19,
        "num_ids_4": 37
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == -1\nprint(\"All tests passed.\")\n\n'''",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('bbabab') == 'bba'\nassert solution('ab') == -1\n\"\"\"\n\nimport collections",
        "num_ids_2": 23,
        "num_ids_4": 32
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == '-1'\n\"\"\"\nimport sys\nfrom collections import Counter",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ab') == '-1'\nassert solution('abba') == 'abba'\nassert solution('bbab') == 'abba'\n\nassert solution('a') == 'a'\nassert solution('ba') == 'a'\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == -1\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == -1\nassert solution('aaaaaaaa') == 'a'\nassert solution('abc') == '-1'\nassert solution('aaab') == 'aaab'\n",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abba') == 'b'\nassert solution('abbaabbba') == 'b'\nassert solution('abb') == '-1'\nassert solution('ababbb') == 'b'\nassert solution('abbab') == 'a'\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == -1\n\"\"\"\n\nimport re\nfrom typing import Match, Optional, Iterator\nfrom collections import Counter\n\nfrom icontract import require, DBC, snapshot\n\nfrom correct_programs.common import Lines\n\n\nclass MultiGram(DBC):\n    @require(lambda lhs: lhs.isalpha() and lhs.islower())\n    def __init__(self, lhs: str) -> None:\n        self.lhs = lhs\n\n    def __repr__(self) -> str:\n        return f\"{self.lhs}\"\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, MultiGram):\n            raise NotImplementedError()\n\n        return self.lhs == other.lhs\n\n    def __lt__(self, other: object) -> bool:\n        if not isinstance(other, MultiGram):\n            raise NotImplementedError()\n\n        return len(self.lhs) < len(other.lhs)\n\n    @require(lambda rhs: rhs.isalpha() and rhs.islower())\n    def __add__(self, rhs: str) -> \"MultiGram\":\n        return MultiGram(self.lhs + rhs)\n\n    @require(lambda rhs: rhs.isalpha() and rhs.islower())\n    def __contains__(self, rhs: str) -> bool:\n        return rhs in self.lhs\n\n\nclass Solution:\n    @require(lambda multiset: len(set(multiset.values())) == len(multiset.values()))\n    @require(lambda multiset: multiset.total_count == sum(multiset.values()))\n    @snapshot(lambda multiset: sorted(multiset.values()))\n    def solve(self, lines: Lines) -> None:\n        line = next(lines)\n\n        multiset = Counter(map(MultiGram, line.split()))\n\n        # fmt: off\n        if (\n            multiset.get(MultiGram(\"\")) > 1\n            or multiset.get(MultiGram(\"a\")) > 1\n            or multiset.get(MultiGram(\"ab\")) > 1\n            or multiset.get(MultiGram(\"aba\")) > 1\n            or multiset.get(MultiGram(\"ababa\")) > 1\n            or multiset.get(MultiGram(\"ba\")) > 1\n            or multiset.get(MultiGram(\"b\")) > 1\n            or multiset.get(MultiGram(\"aab\")) > 1\n            or multiset.get(MultiGram(\"abaab\")) > 1\n            or multiset.get(MultiGram(\"ababaab\")) > 1\n        ):\n            print(-1)\n            return\n        # fmt: on\n\n        result = \"\"\n        for multiset_key in multiset:\n            if multiset[multiset_key] == multiset[multiset_key].lhs:\n                result = multiset_key.lhs\n                break\n\n        print(result)\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution([\"20 100\"]) == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution([\"2 3\"]) == \"Dr. Chaz will have 1 piece of chicken left over!\"\n\nprint(solution(input().split()))\n\n\"\"\"\n\nimport math\nimport random\n\nnum = list(map(int, input().split()))\nchicken = num[0]\nnum_of_people = num[1]\n\ntotal_chicken = chicken * num_of_people\nleftovers = total_chicken % num_of_people",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3') == 'Dr. Chaz needs 1 more piece of chicken!'\n\n\"\"\"\n\nn, m = map(int, input().split())\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 100\\n2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\"\nassert solution(\"50 50\\n2 3\") == \"Dr. Chaz needs 2 more piece[s] of chicken!\"\n\n:param stdin:\n:return:\n\"\"\"\nimport sys\nimport math\n\nfor line in sys.stdin:\n    n, m = map(int, line.split())\n    leftovers = n % m\n    if leftovers == 0:\n        print(\"Dr. Chaz will have \" + str(leftovers) + \" piece[s] of chicken left over!\")\n    else:\n        print(\"Dr. Chaz needs \" + str(m - leftovers) + \" more piece[s] of chicken!\")\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\"\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n20 100\n''') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('''\n2 3\n''') == 'Dr. Chaz needs 1 more piece of chicken!'\nassert solution('''\n1\n''') == 'Dr. Chaz needs 1 more piece of chicken!'\nassert solution('''\n1\n1\n''') == 'Dr. Chaz needs 1 more piece of chicken!'\nassert solution('''\n20 20\n''') == 'Dr. Chaz needs 0 more piece of chicken!'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'\nassert solution('20 50') == 'Dr. Chaz needs 10 pieces of chicken!'\nassert solution('2 5') == 'Dr. Chaz needs 2 more pieces of chicken!'\n",
        "num_ids_2": 44,
        "num_ids_4": 83
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\"\n\"\"\"",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\"\n\n\"\"\"",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\"\n\n'''\nfrom collections import defaultdict",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"0\"\nassert solution(\"3 980\\n10 10 10\\n10 5 2\\n5 3 2\\n90 5 2\") == \"20\"\nassert solution(\"4 10\\n3 3 3\\n10 3 3\\n3 10 3\\n10 10 10\") == \"-2\"\n",
        "num_ids_2": 57,
        "num_ids_4": 88
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 10\\n4 1 2\\n4 2 2') == '0'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 10\n1 1 2\n2 2 2\n3 2 1''') == '-2'\nassert solution('''3 30\n1 1 1\n5 2 3\n5 2 1''') == '0'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == '-2'\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == '0'\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 10\\n1 1 2\\n2 2 2\\n3 2 1') == '-2'\nassert solution('3 30\\n1 1 1\\n5 2 3\\n5 2 1') == '0'\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 10\\n1 1 2\\n2 2 2\\n3 2 1') == '-2'\nassert solution('4 980\\n10 10 10\\n10 5 2\\n5 3 2\\n90 5 2') == '0'\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10\\n1 1 1\\n2 2 2\\n3 2 1\") == \"0\"\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == \"0\"\nassert solution(\"3 100\\n1 1 1\\n5 2 3\\n5 2 1\") == \"20\"\n\"\"\"\n\n\n\n\"\"\"\nThe idea of this solution is to find a decreasing, monotonically decreasing sequence of the volumes. We start with the largest box, so the first value of the sequence is its volume. We then go through the boxes, finding the largest one such that we can put it in the remaining ones.\n\nIf the box is not big enough, the largest box so far is the largest box we have, so we'll return that largest box.\n\nOtherwise, if the box is big enough, we'll compute the largest value in the remaining boxes and update the largest value we have so far.\n\nSince all boxes have the same volume, we can simply find the biggest value by comparing the other boxes.\n\"\"\"\n",
        "num_ids_2": 52,
        "num_ids_4": 78
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 10\n1 1 2\n2 2 2\n3 2 1''') == -2\nassert solution('''4 980\n10 10 10\n10 5 2\n5 3 2\n90 5 2''') == 20\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 10\\n1 1 2\\n2 2 2\\n3 2 1') == '-2'\nassert solution('3 30\\n1 1 1\\n5 2 3\\n5 2 1') == '0'\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"0\"\nassert solution(\"3 10\\n3 2 1\\n5 2 1\") == \"-2\"\n",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\\n\") == \"kala\"\n\"\"\"\nimport itertools",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 4\nluka\no#a#\nkula\ni#a#''') == 'kala'\nassert solution('''4 4\nluka\no#a#\nkula\ni#as''') == 'as'\nassert solution('''3 4\nluka\no#a#\nkula\ni#as''') == 'as'\nassert solution('''4 4\nkula\no#a#\nluka\ni#a#''') == 'kala'\nassert solution('''4 4\nkula\no#a#\ni#a#\nluka''') == 'kala'\n\nprint(solution(input()))\n\n\"\"\"\n\nimport re\n\nr, c = [int(i) for i in input().split()]\nmatrix = [input() for _ in range(r)]",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n4 4\nluka\no#a#\nkula\ni#a#\n''') == 'kala'\nassert solution('''\n4 4\nluka\no#a#\nkula\ni#as\n''') == 'as'\nassert solution('''\n4 4\nluka\no#a#\nkula\ni#a#\n''') == 'as'\nassert solution('''\n4 4\nluka\no#a#\nkula\ni#a#\n''') == 'kala'\nassert solution('''\n4 4\nluka\no#a#\nkula\ni#a#\n''') == 'kala'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\nassert solution(\"4 4\\nluka\\n#o#a#\\nkula\\ni#a#\") == \"ala\"\nassert solution(\"4 4\\n#o#a#\\nkula\\ni#a#\") == \"kula\"",
        "num_ids_2": 61,
        "num_ids_4": 89
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as') == 'as'\nassert solution('4 4\\nluka\\n#o#\\nkula\\ni#a#') == 'kala'\nassert solution('4 4\\n#o#\\nluka\\n#a#\\nkula\\ni#a#') == 'as'\n\"\"\"",
        "num_ids_2": 58,
        "num_ids_4": 122
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as') == 'as'",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == 'kala'\nassert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == 'as'\nassert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\\nkula\") == 'kala'\nassert solution(\"4 4\\nluka\\n#a#\\nkula\\ni#a#\") == 'kula'\nassert solution(\"4 4\\n#a#\\nkula\\ni#a#\") == 'kula'\n",
        "num_ids_2": 58,
        "num_ids_4": 122
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as') == 'as'\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\n\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\nassert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == \"as\"\n\nprint(\"All tests passed.\")\n\n\"\"\"",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(WNEENWEENEENE) == 10\nassert solution(NSEW) == 4\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"WNEENWEENEENE\") == \"10\"\nassert solution(\"NSEW\") == \"4\"\nassert solution(\"WNWSWWNWSWWNWSWWNWSWW\") == \"13\"\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 49
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('WNEENWEENEENE') == 10\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('WNEENWEENEENE') == '10'",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('WNEENWEENEENE') == 10\nassert solution('NSEW') == 4",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"WNEENWEENEENE\"\n) == 10\nassert solution(\n\"NSEW\"\n) == 4\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(WNEENWEENEENE) == 10\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"WNEENWEENEENE\") == \"10\"\nassert solution(\"NSEW\") == \"4\"\nassert solution(\"WNWSWWSWWWWWWWWWWWWWWWWWWEWNWNSWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNW\") == \"13\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 69
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('WNEENWEENEENE') == 10\nassert solution('NSEW') == 4\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('WNEENWEENEENE') == 10\nassert solution('NSEW') == 4\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n\"\nassert solution(\"1 2 3 0\") == \"problems ahead\\n\"\nassert solution(\"0 1 1 1\") == \"problems ahead\\n\"\nassert solution(\"0 -1 1 1\") == \"problems ahead\\n\"\n",
        "num_ids_2": 83,
        "num_ids_4": 117
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"\"\"1 - 2 = 3 - 4\n1 / 2 = 3 / 4\"\"\"\n\nassert solution(\"0 4 2 2\") == \"problems ahead\"\nassert solution(\"0 4 2 3\") == \"0 * 4 = 2 - 2\"\nassert solution(\"1 3 2 4\") == \"\"\"1 - 3 = 2 - 4\n1 / 3 = 2 / 4\n1 + 3 = 2 + 4\n1 * 3 = 2 * 4\n2 - 3 = -1 - 4\n2 * 3 = 6 * 4\n2 + 3 = 2 + 6\n3 - 2 = 3 - 4\n3 / 2 = 4 / 4\n3 * 2 = 6 * 4\n4 - 2 = 4 - 4\n4 / 2 = 2 / 4\"\"\"\nassert solution(\"5 1 2 3\") == \"\"\"5 - 1 = 4 - 3\n5 * 1 = 5 * 3\n5 + 1 = 5 + 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 / 3\n5 + 1 = 5 + 3\n5 * 1 = 5 * 3\n5 - 1 = 5 - 3\n5 / 1 = 5 /",
        "num_ids_2": 33,
        "num_ids_4": 70
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\n\"\n\n\"\"\"\n\nimport itertools\nimport operator\nfrom math import floor\n\nfrom util import *\n",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2'\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\"\n\"\"\"\n\na, b, c, d = [int(x) for x in input().split()]\n\nfor x in range(-100, 100):\n    for y in range(-100, 100):\n        if a * x + b * y == c * x + d * y:\n            print(f\"{a} * {x} + {b} * {y} = {c} * {x} + {d} * {y}\")\n        if c * x - d * y == a * x + b * y:\n            print(f\"{c} * {x} - {d} * {y} = {a} * {x} + {b} * {y}\")",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2'\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution(\"0 4 2 2\") == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\n'\n",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2'\nassert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4'\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABBA PPZA') == '4'\nassert solution('CCBB AACC') == '4'\n\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"ABBA CCCC\"\n) == \"4\\n.C..\\n.C..\\nABBA\\n.B..\"\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABBA CCBB\") == \"\"\"\n.C..\n.C..\nABBA\n.B..\n\n\"\"\".replace('    ', '')\n\nassert solution(\"ABAB CCBB\") == \"\"\"\n.C..\n.C..\nABAB\n.B..\n\n\"\"\".replace('    ', '')\n\nassert solution(\"ABAB ZZBB\") == \"\"\"\n.C..\n.C..\nABAB\n.B..\n\n\"\"\".replace('    ', '')\n\nassert solution(\"ABCB ABBB\") == \"\"\"\n.C..\n.C..\nABCB\nA.B..\n\n\"\"\".replace('    ', '')\n\nassert solution(\"ABCB BAAA\") == \"\"\"\n.C..\n.C..\nABCB\nA.B..\n\n\"\"\".replace('    ', '')",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ABBA PIDZAMA') == '.P....\\n.I....\\nABBA\\n.M....\\n.A....'\nassert solution('CCBB TATA') == '.T..\\nC...B\\nC...B\\nT...A\\n'\nprint(solution('ABBA PIDZAMA'))\nprint(solution('CCBB TATA'))\n\n'''\nimport itertools",
        "num_ids_2": 65,
        "num_ids_4": 65
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('BANANA PIDZAMA') == '\\n.P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....'\nassert solution('MAMA TATA') == '\\n.T..\\nMAMA\\n.T..\\n.A..'\nassert solution('ABBA BBB') == '\\n.C..\\n.C..\\nABBA\\n.B..\\n.B..'\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    a, b = line.split()\n    a = a.replace(a[0], b[0])\n    b = b.replace(b[0], a[0])\n    print(\"\\n\".join(\"{0:<{1}}\".format(a, len(b)) for a in b))\n",
        "num_ids_2": 80,
        "num_ids_4": 116
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == expected_output\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\"\n\"\"\"\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABBA CCBB') == '\\n'.join(['C..', 'C..', 'ABBA', '.B..'])\n\"\"\"\n\nimport unittest\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\"\nassert solution(\"MAMA TATA\") == \".T..\\nMAMA\\n.T..\\n.A..\"\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"BANANA PIDZAMA\") == '.P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....'\n\"\"\"\nfrom collections import defaultdict\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\\n\") == \"10\"\nassert solution(\"2\\n1 365\\n20 28\\n\") == \"365\"\n\"\"\"",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open('input.txt').read()) == open('output.txt').read()\nprint(solution(open('input.txt').read()))\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 14\\n13 17\\n25 26\") == 10\nassert solution(\"1 365\\n20 28\") == 365",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 14\\n13 17\\n25 26\") == 10\nassert solution(\"1 365\\n20 28\") == 365\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 14\\n13 17\\n25 26\") == \"10\"\nassert solution(\"1 365\\n20 28\") == \"365\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\\n\") == \"10\"\nassert solution(\"2\\n1 365\\n20 28\\n\") == \"365\"",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n10 14\\n13 17\\n25 26') == '10'\nassert solution('2\\n1 365\\n20 28') == '365'\n\nprint('Success')\n\n------End-Of-File-------\n'''",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 7\") == \"6\"\nassert solution(\"1 1\") == \"365\"\nassert solution(\"1 1000\") == \"1\"\nassert solution(\"1 10\") == \"365\"\nassert solution(\"0 0\") == \"0\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 14\\n13 17\\n25 26\") == 10\n\"\"\"\n\n\"\"\"\n---SOLUTION---\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\nassert solution(\"2\\n1 365\\n20 28\") == \"365\"\nassert solution(\"1\\n1 365\") == \"365\"\nprint(\"Passed all tests!\")",
        "num_ids_2": 40,
        "num_ids_4": 54
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"0 1\"\nassert solution(\"4\") == \"2 3\"\nprint(\"All tests passed.\")\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '2 3'\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == (\"0 1\")\nassert solution(\"4\") == (\"2 3\")\n\"\"\"\n\nK = int(input())\nA = \"\"\nB = \"\"\nfor i in range(K):\n    A = A + \"A\"\n    B = B + \"B\"\n    A = B + A\nprint(A.count(\"A\"), A.count(\"B\"))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nAA') == '0 1'\nassert solution('12\\nABAAB') == '2 3'\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"0 1\"\nassert solution(\"4\") == \"2 3\"\n\"\"\"\n\nk = int(input())\nl = []\na, b = 0, 0\nfor i in range(k):\n    l.append(input())\nfor i in l:\n    if i[0] == 'A':\n        a += 1\n    else:\n        b += 1\nprint(a, b)\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''1\n''') == '0 1'\nassert solution('''4\n''') == '2 3'\nassert solution('''5\n''') == '3 4'\nassert solution('''6\n''') == '4 5'\nassert solution('''45\n''') == '34 54'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == (0, 1)\nassert solution('1') == (0, 1)\nassert solution('2') == (0, 1)\nassert solution('3') == (0, 2)\nassert solution('4') == (0, 2)\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"0 1\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == '0 1'\nassert solution(\"2\") == '0 1'\nassert solution(\"3\") == '0 2'\nassert solution(\"4\") == '0 2'\nassert solution(\"5\") == '0 3'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"0 1\"\nassert solution(\"2\") == \"0 1\"\nassert solution(\"3\") == \"0 1\"\nassert solution(\"4\") == \"0 1\"\nassert solution(\"5\") == \"1 1\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    5 3\n    1 100 200\n    2 100 99\n    3 100 50\n    3 100 50\n    2 100 98\n    \"\"\"\n) == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\n\n\"\"\"\n    4 4\n    3 100 99\n    2 100 99\n    1 100 99\n    4 100 99\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\n\"\"\"\n\nfrom collections import defaultdict\nimport math",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n100 200\") == 'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\nassert solution(\"1\\n100 99\") == 'A 1 98\\nB 0 99\\nA 1 97\\n0.098314463'\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"2 3\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 0 99\\nA 0 99\\n0.4974874372\"\nassert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"1 10\\n0 1\\n0 1\") == \"A 0 1\\nA 0 1\"\nassert solution(\"1 10\\n1 1\\n0 1\") == \"A 0 1\\nA 0 1\"\n",
        "num_ids_2": 97,
        "num_ids_4": 179
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"\n\"\"\"\n",
        "num_ids_2": 112,
        "num_ids_4": 112
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5 3\n1 100 200\n2 100 99\n3 100 50\n3 100 50\n2 100 98\n''') == '''\nB 100 49\nA 1 197\nA 49 100\n0.1965897693\n'''\n\nassert solution('''\n4 4\n3 100 99\n2 100 99\n1 100 99\n4 100 99\n''') == '''\nA 0 99\nA 0 99\nA 0 99\nA 0 99\n0.4974874372\n'''\n\nprint('Success')",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"\n\nprint(\"Successfully solved\")\n",
        "num_ids_2": 112,
        "num_ids_4": 112
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98') == 'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\nprint(solution('4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99'))\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 3\n1 100 200\n2 100 99\n3 100 50\n3 100 50\n2 100 98''') == 'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\nprint('Test pass.')\n\n-----Constraints-----\n1 <= P, D <= 10000\n0 <= a_ i, b_ i <= 100000\n1 <= d_ i <= D\n0 < a_ i + b_ i <= 100000\nNo ties in any district.\n0 < w_ A, w_ B < 100000\n1 <= V <= 5 * 104\n\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\n\"\"\"\n\nimport math\nimport sys\nfrom typing import List",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == \"168\"\nassert solution(\"2\\n1\\n1\") == \"1\"\n\nassert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == \"168\"\nassert solution(\"2\\n1\\n1\") == \"1\"\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 82
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2\\n1\\n4\\n3\\n5') == '168'\n\nprint(solution('5\\n2\\n1\\n4\\n3\\n5'))\n\"\"\"\n\nimport sys",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1\\n1\\n') == '1'\nassert solution('5\\n2\\n1\\n4\\n3\\n5\\n') == '168'\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline().strip())\nnumbers = [int(stdin.readline().strip()) for _ in range(n)]\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2\\n1\\n4\\n3\\n5\\n') == '168'\nprint(solution('4\\n2\\n1\\n4\\n3\\n5\\n'))\n\"\"\"\nimport sys\nfrom typing import List",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2\\n1\\n4\\n3\\n5') == '168'\n\nprint(solution('5\\n2\\n1\\n4\\n3\\n5'))",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1\\n1\") == \"1\"\nassert solution(\"3\\n1\\n1\\n1\") == \"9\"\nassert solution(\"5\\n1\\n1\\n1\\n1\") == \"56\"\nassert solution(\"10\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\") == \"326\"\nassert solution(\"7\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"360\"\n",
        "num_ids_2": 35,
        "num_ids_4": 103
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == \"168\"\nprint(solution(\"5\\n2\\n1\\n4\\n3\\n5\"))\n\n'''",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n2\n1\n4\n3\n5''') == '168'\nassert solution('''2\n1\n1\n''') == '1'",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == \"168\"\nassert solution(\"2\\n1\\n1\") == \"1\"\n\"\"\"\n\nn = int(input())\ns = [int(i) for i in input().split()]\n\nans = 0\nfor i in range(n):\n    ans = max(ans,s[i]*s[i+1])\nprint(ans)",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == \"168\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n0') == 'CBADEF'\n\"\"\"\nfrom itertools import zip_longest\n\nn1, n2 = list(map(int, input().split()))\n\nl1, l2 = [0] * n1, [0] * n2\n\nfor i in range(n1):\n    l1[i] = input()\n\nfor i in range(n2):\n    l2[i] = input()\n\nt = int(input())\n\nfor time in range(t):\n    for i in range(n1):\n        for j in range(n2):\n            if l1[i][j]!= l2[i][j]:\n                l1[i] = ''.join(x if x == l1[i][j] else x + l1[i][j] for x in l1[i])\n                l2[j] = ''.join(x if x == l2[j][i] else x + l2[j][i] for x in l2[j])\n                break\n\nfor x in zip_longest(l1, l2):\n    print(''.join(x))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2\\n') == 'CBAEDF'\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2') == 'CDBEAF'\nassert solution('3 3\\nABC\\nDEF\\n3') == 'ACBDEF'\nassert solution('3 3\\nZAB\\nCDE\\n2') == 'ZBCDEAF'\n\n:param stdin:\n:return:\n\"\"\"\n\n_, _, T = [int(n) for n in stdin.split('\\n')[0].split()]\nN_1, N_2 = [int(n) for n in stdin.split('\\n')[1].split()]\norders_1, orders_2 = [stdin.split('\\n')[i + 1].split() for i in range(2)]\n\norders_1 = orders_1[::-1]\norders_2 = orders_2[::-1]\n\norder_1 = [ord(n) for n in orders_1]\norder_2 = [ord(n) for n in orders_2]\n\nposition = {}\n\nfor i, order in enumerate(order_1):\n    position[order] = i\n\nposition_2 = {}\n\nfor i, order in enumerate(order_2):\n    position_2[order] = i\n\norder_2.insert(0, order_2.pop(T + 1))\n\nfor i in range(T + 1):\n    if order_2[i] == order_1[i]:\n        order_2[i] = order_2[i + 1]\n\nfor i in range(T + 1):\n    if position_2[order_2[i]] == position_1[order_1[i]]:\n        position_2[order_2[i]] = position_2[order_2[i + 1]]\n\nprint(''.join([chr(order_1[i]) for i in range(len(order_1))]))\nprint(''.join([chr(order_2[i]) for i in range(len(order_2))]))",
        "num_ids_2": 44,
        "num_ids_4": 69
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\\n\") == \"CDBEAF\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1) == 'ABC'\nassert solution(2) == 'ACBD'\nassert solution(3) == 'ABDC'\nassert solution(4) == 'ACDB'\n\"\"\"\n\nfrom itertools import zip_longest",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n0\") == \"CBADEF\"\n\"\"\"\n\nfrom collections import deque\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3, 3, \"ABCDEF\", 2) == \"CDBEAF\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\nABC\nDEF\n2\n''') == 'CDBEAF'\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2') == 'CDBEAF'\nassert solution('3 3\\nFFF\\nABC\\nDEF\\n2') == 'FACD'\nassert solution('3 3\\nFFF\\nDEF\\nABC\\n2') == 'DFCA'\nassert solution('3 3\\nFFF\\nFFF\\n2') == 'FFFF'\nassert solution('3 3\\nABC\\nFFF\\nDEF\\n2') == 'CBAD'\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '5'\nassert solution('3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N') == '4'",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2",
        "num_ids_2": 1427,
        "num_ids_4": 1427
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2\\n0 T\\n0 T\\n0 T\\n0 T\\n0 T\") == \"4\"\nassert solution(\"1\\n3\\n0 T\\n0 T\\n0 T\\n0 T\\n0 T\") == \"1\"\nassert solution(\"8\\n2\\n0 T\\n0 T\\n0 T\\n0 T\\n0 T\\n0 T\") == \"8\"\nassert solution(\"1\\n3\\n0 T\\n0 T\\n0 T\\n0 T\\n0 T\\n0 T\") == \"1\"\nassert solution(\"1\\n3\\n0 T\\n0 N\\n0 P\\n0 T\\n0 T\\n0 N\") == \"1\"\n",
        "num_ids_2": 66,
        "num_ids_4": 140
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5\n20 T\n50 T\n80 T\n50 T\n30 T\n''') == '5'\n\nassert solution('''\n3\n100 T\n100 N\n100 T\n''') == '4'\n\nassert solution('''\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\n''') == '1'\n\nprint('Success')\n\n'''\n3\n5\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100 N\n100 T\n100",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"1\"\nassert solution(\"2\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"3\"\n\"\"\"\nimport sys",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"1\"\nassert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"3\"\n",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\nassert solution('3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N') == '3'\nprint('The local tests are done. Click on \"Check\" for more cases.')\n\n\"\"\"\n\nk = int(input())\nn = int(input())\np = []\nt = []\nnT = []\nfor i in range(n):\n    t.append(int(input()))\n    nT.append(input())\n    \nfor i in range(n):\n    if nT[i] == \"T\":\n        p.append(i)\n    else:\n        continue\nfor i in range(n):\n    if i in p:\n        k -= 1\n    else:\n        continue\n    if k == 0:\n        print(p[0] + 1)\n        break\n",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\nassert solution('3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N') == '3'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"1\"\n\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\n\"\"\"\n) == \"1\"\n\n\"\"\"\nExplanation:\nThe first player who holds the box is player 1, and the second player who holds the box is player 2. After the first question, the player holding the box passes it to player 3. After the second question, the player holding the box passes it to player 4. During the third question, the player holding the box passes it to player 5. During the fourth question, the player holding the box passes it to player 6. During the fifth question, the player holding the box passes it to player 7. During the sixth question, the player holding the box passes it to player 8. During the seventh question, the player holding the box passes it to player 1. The player holding the box has the box in the end, so the answer is 1.\n\"\"\"\n\"\"\"\nInput:\n3\n5\n100 T\n100 N\n100 T\n100 T\n100 N\n\nOutput:\n3\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3') == '6'\nassert solution('6 8') == '22'\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 2\\n3 4') == '6'\nassert solution('6 8\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6') == '22'\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 4\\n4 5\") == \"6\"\n\"\"\"\n\nfrom math import comb\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3') == '6'\nassert solution('6 8') == '22'\n\nprint(solution(stdin.readline()))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2\\n3 4\") == \"6\"\nassert solution(\"6 8\\n1 2\\n2 4\\n3 5\\n3 6\\n4 5\") == \"22\"\nprint('The local tests are done. Click on \"Check\" for more details.')\n\"\"\"\n\nfrom math import factorial",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n') == 6\nassert solution('6 8\\n') == 22\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('3 5') == ''\nassert solution('4 5') == ''\nassert solution('2 4') == ''\nassert solution('1 2') == ''\n\n'''",
        "num_ids_2": 17,
        "num_ids_4": 35
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 3 4 5\") == '6'\nassert solution(\"6 8\\n1 2 3 4 5 6\") == '22'\n\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\") == \"6\"\nassert solution(\"6 8\\n3 2 5 1 2 4 1 3\") == \"22\"\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\nd = [[0] * n for _ in range(n)]\nfor _ in range(m):\n    i, j = [int(x) for x in input().split()]\n    d[i - 1][j - 1] = d[j - 1][i - 1] = 1\n\nfor k in range(n):\n    for i in range(n):\n        for j in range(n):\n            if d[i][k] and d[k][j]:\n                d[i][j] = d[i][k] + d[k][j]\n\nprint(max([max(i) for i in d]))\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n\") == \"6\"\nassert solution(\"6 8\\n1 2 3 4 5 6 7 8\\n\") == \"22\"\n\n\"\"\"\nimport sys\nimport math",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\nassert solution(\"4 4\\n1 2 2 1\\n1 2 3 3\\n1 2 3 4\\n1 2 3 5\") == \"0\"\n",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_str_1) == test_input_str_1_expected_output\nassert solution(test_input_str_2) == test_input_str_2_expected_output\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 3\n1 2 3\n6 5 4\n7 8 9\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 4\n4 1 2 3\n1 2 3 4\n1 3 2 4\n4 1 2 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n4 4\n1 3 2 3\n2 3 4 5\n3 4 6 7\n4 1 2 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n4 3\n1 1 1 1\n2 1 2 1\n1 2 3 4\n4 1 2 3\n\"\"\") == \"0\"\n\n\"\"\"\n\"5 5\n1 2 1 2 1\n2 1 1 2 1\n1 1 1 2 1\n2 1 2 1 1\n1 2 3 4 5\n4 1 2 3 4\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\n\"\"\"\n\nimport sys\nimport math\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2 3') == '3'\nassert solution('1 2 3 4') == '3'\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 3\n1 2 3\n6 5 4\n7 8 9''') == '1'\n\nassert solution('''3 3\n1 2 3\n6 5 4\n7 8 9''') == '0'\nassert solution('''1 4\n4 3 2 1''') == '0'\nassert solution('''1 4\n4 3 2 1\n5 4 3 2 1\n''') == '0'\nassert solution('''1 4\n4 3 2 1\n4 5 2 1\n4 6 1 1''') == '2'\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\nassert solution('1 4\\n4 3 2 1') == '0'\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def add(self, s):\n        node = self.root\n        for c in s:\n            if c not in node.children:\n                node.children[c] = TrieNode()\n            node = node.children[c]\n        node.is_word = True\n        node.word = s\n\n    def search(self, s):\n        node = self.root\n        for c in s:\n            if c not in node.children:\n                return False\n            node = node.children[c]\n        return node.is_word\n\n    def __str__(self):\n        return str(self.root)\n\n    def __repr__(self):\n        return str(self.root)\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_word = False\n        self.word = None\n\n    def __repr__(self):\n        return str(self)\n\n    def __str__(self):\n        if self.is_word:\n            return f'Word: {self.word}\\nChildren: {self.children}'\n        else:\n            return f'Children: {self.children}'",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\n\"\"\"\n\nimport math\nimport sys\nfrom typing import List\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2 3 4 5\") == \"28\"\n\"\"\"\n\nx, n = input().split()\nn = int(n)\nm = []\nfor i in range(n):\n    m.append(int(input()))\n\na = 0\ni = 0\nwhile(i < n):\n    if i == 0:\n        a += m[i]\n        i += 1\n        continue\n    a += m[i] - m[i - 1]\n    i += 1\n\nprint(a)\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\"\nprint(solution(\"10\\n3\\n10\\n2\\n12\"))\n\n\"\"\"\n\nimport unittest",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\n3\\n4\\n6\\n2\") == \"28\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\n3\\n4\\n6\\n2') == '28'\nassert solution('10\\n3\\n10\\n2\\n12') == '16'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\"\nprint(solution(\"10\\n3\\n10\\n2\\n12\"))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\n3\\n4\\n6\\n2\") == \"28\"\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\"\nassert solution(\"1\\n1\\n1\\n1\\n1\") == \"0\"\nassert solution(\"1\\n1\\n2\\n1\") == \"1\"",
        "num_ids_2": 44,
        "num_ids_4": 63
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10\\n3\\n4\\n6\\n2') == '28'\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"10\"\n) == \"28\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\"\n\"\"\"\n\nfrom collections import deque\n\nx, n = input().split()\nx, n = int(x), int(n)\n\np = []\nfor i in range(n):\n    p.append(int(input()))\n\np = deque(p)\n\nmoney_spent = 0\nmegabytes_available = 0\n\nfor i in range(n):\n    money_spent += p[i]\n    megabytes_available += money_spent\n    if megabytes_available > x:\n        megabytes_available = money_spent - x\n        money_spent -= megabytes_available\n    else:\n        money_spent = 0\n\nprint(megabytes_available)\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nassert solution('jabscbsasbscsbsjbscsbs') == 'no hiss'\nassert solution('abscsbsbscsbs') == 'no hiss'\n\nprint('All tests passed.')\n",
        "num_ids_2": 26,
        "num_ids_4": 69
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\n\nprint(\"All tests passed.\")\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"amiss\") == \"hiss\"\n\nprint(solution(input()))",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nassert solution('kkk') == 'no hiss'\nassert solution('iitlk') == 'hiss'\nassert solution('sos') == 'hiss'\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"thisisnotamiss\") == \"thisisnotamiss\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 44
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"illness\") == \"hiss\"\nassert solution(\"wonderful\") == \"no hiss\"\nassert solution(\"puzzling\") == \"hiss\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"amiss\") == \"hiss\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('hiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\n\"\"\"\n\nimport re",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('mississippi') == 'hiss'\nassert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 39
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\nC++\\nC++\\nC\\nC#') == '3'\nassert solution('5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux') == '5'\n\"\"\"\nimport sys\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nc\\nc\\nc\\nC\\n\") == \"5\\n\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\nc++\\nC++\\n c\\n c#') == '3'\nassert solution('5\\nc++\\nC++\\n c\\n c#') == '5'\nassert solution('6\\nc++\\nC++\\n c\\n c#') == '6'\n\"\"\"\n",
        "num_ids_2": 48,
        "num_ids_4": 72
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nc++\\nC++\\nc\\nc#') == 3\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nc++\\nC++\\nc\\nC#') == 3\nassert solution('5\\nCryptography\\nBlockchain\\nArtificial intelligence\\nMachine learning\\nLinux') == 5\n\"\"\"\n\nn = int(input())\ns = set()\nfor i in range(n):\n    keyword = input()\n    s.add(keyword)\nprint(n-len(s))",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nc++\\nC++\\nc\\nC#\") == 3\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\nc++\\nC++\\nC\\nC#') == 3\nassert solution('5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux') == 5\n\n----Problem-----\nYou are given a list of keyphrases and phrases that should be excluded.\n\nWrite a function that returns a list of keyphrases that should be included in the final resume.\n\nExample:\n\nFor phrases = [\"machine learning\", \"ai\", \"python\", \"ruby\", \"computer vision\", \"natural language processing\"] and\n\nkeyphrases = [\"machine learning\", \"python\", \"ai\", \"ruby\", \"computer vision\", \"natural language processing\", \"programming languages\"], the output should be\n\nkeyphraseExtraction(phrases, keyphrases) = [\"python\", \"ai\", \"ruby\", \"computer vision\", \"natural language processing\", \"programming languages\"]\n\"\"\"\n\n\nimport math\n",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\nc++\\nC++\\nc\\nc#') == 3\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\nc++\\nc\\nc#') == 3\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\nc\\nC++\\n\\nc\\n\\n\\n\\n') == '3'\n\n\"\"\"\nimport sys",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"TCGTTC\") == \"21\"\nassert solution(\"CCC\") == \"9\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CC\") == 9\nassert solution(\"GGG\") == 0\nassert solution(\"CCCCC\") == 36\nassert solution(\"GTTTTCG\") == 20\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9\n\"\"\"\n\nimport math",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"TCGTTC\") == \"21\"\nassert solution(\"CCC\") == \"9\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('TCG') == 21\nassert solution('TCTC') == 9\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('TCG') == 21\nassert solution('CCT') == 9\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"TCGTC\") == 21\nassert solution(\"TCGTG\") == 21\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('TTC') == 9\nassert solution('CC') == 9\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('TCGTTTC') == 21\n\"\"\"\n\nimport collections\n\n\nclass Game:\n    def __init__(self, deck):\n        self.decks = collections.defaultdict(collections.deque)\n        for card in deck:\n            self.decks[card].append(1)\n\n    def play(self):\n        cards = set()\n        while len(self.decks[\"T\"]) > 0 and len(self.decks[\"C\"]) > 0 and len(self.decks[\"G\"]) > 0:\n            cards.add(\"T\"*self.decks[\"T\"].popleft() + \"C\"*self.decks[\"C\"].popleft() + \"G\"*self.decks[\"G\"].popleft())\n        return sum(int(c)**2 for c in cards)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"315\") == \"90\"\nassert solution(\"0\") == \"180\"\nassert solution(\"180\") == \"0\"\n\"\"\"\nimport sys\nimport math\nimport collections",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('315\\n45') == '90'\nassert solution('180\\n270') == '90'\n\"\"\"\n\nimport math",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nassert solution(\"180\\n270\") == \"90\"\nassert solution(\"315\\n45\\n90\") == \"180\"\n\n\"\"\"\n\nfrom math import atan2, degrees",
        "num_ids_2": 26,
        "num_ids_4": 42
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n'315'\n'45') == '90'\nassert solution(\n'180'\n'270') == '90'\nassert solution(\n'180'\n'90') == '180'\nassert solution(\n'0'\n'360') == '0'\n\nimport math\nfrom math import atan",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('315\\n45') == '90'\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nassert solution(\"180\\n270\") == \"90\"\n\"\"\"\n\nimport math",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('315', '45') == '90'\nassert solution('180', '270') == '90'\nassert solution('45', '315') == '180'\nassert solution('45', '270') == '-90'\nassert solution('315', '270') == '-90'\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('315\\n45') == '90'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"315\\n45\") == \"90\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nassert solution(\"180\\n270\") == \"90\"\nassert solution(\"180\\n270\\n0\\n360\") == \"0\"\n\"\"\"\n\n\"\"\"\nA:",
        "num_ids_2": 26,
        "num_ids_4": 45
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == 3\n'''\n\nimport collections",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\n\nimport math\nimport itertools\nimport typing",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\nassert solution(\"5\\n11\\n20\\n33\\n40\\n55\") == \"1\"\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99\\n') == '3'\nassert solution('5\\n11\\n20\\n33\\n40\\n55\\n') == '1'\n\n\"\"\"\n\nfrom typing import List\nfrom collections import OrderedDict\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n\n\nclass OrderedDict(dict):\n    pass\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\nassert solution(\"5\\n11\\n20\\n33\\n40\\n55\") == \"1\"\nassert solution(\"10\\n4\\n8\\n3\\n2\\n14\") == \"1\"\n\"\"\"\n\nfrom math import ceil",
        "num_ids_2": 50,
        "num_ids_4": 75
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\nassert solution(\"5\\n11\\n20\\n33\\n40\\n55\") == \"1\"\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\n\n\"\"\"\n\n################################################################################################################################\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"WWWWBBW\") == 0\nassert solution(\"WWWWBBBWW\") == 1\nassert solution(\"WWWWBBBWWW\") == 0\nassert solution(\"WWWWBBBBBW\") == 0\nassert solution(\"BBWWWWWWW\") == 1\n",
        "num_ids_2": 23,
        "num_ids_4": 48
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWBBW') == '1'\nassert solution('WWBBBBB') == '0'\nassert solution('BBBBBB') == '1'\nassert solution('WWWWBBB') == '1'\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WWWWBBW\") == '0'\nassert solution(\"WWBBWWW\") == '1'\nassert solution(\"WWWWBB\") == '0'\nassert solution(\"WWBBBWW\") == '0'\nassert solution(\"WBWBWBW\") == '1'\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 51
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWBWBB\") == \"1\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWBBWWW\") == \"1\"\nassert solution(\"WWBBBWWW\") == \"0\"\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 40
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWBBW') == '1'\nassert solution('WWBBBW') == '0'\nassert solution('BWBWBWBW') == '0'\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 51
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWWWBBB') == '1'\n\nassert solution('WWWWBBW') == '0'\nassert solution('WWWWBBB') == '1'\n\nassert solution('WWWWBBW') == '0'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('WWWBBBWWB') == 1\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWBWBB') == '1'\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWBBW') == '1'\n\"\"\"\n\n\"\"\"\nIn the first example, the stones are balanced for the first time by taking consecutive $W$s and replacing them with a single $W$. It then becomes balanced again.\n\nIn the second example, the stones are balanced for the first time by taking consecutive $B$s and replacing them with a single $B$. It then becomes balanced again.\n\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 3 3') == '9'\n\"\"\"\n\nfrom math import sqrt",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\nassert solution(\"4 6 1 7\") == \"6.5\"\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 49
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\n\"\"\"\n\nfrom fractions import Fraction",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\n\n\"\"\"\n\na = [int(x) for x in stdin.split()]\ns = a[0]\n\nlst = [1,s]\n\nfor x in a:\n    s -= x\n    if s>0:\n        lst.append(x)",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 3 3') == '9'\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 3 3') == '9'\n\"\"\"\n\nimport math",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('roobert') == 'robert'\nassert solution('rooobert') == 'robert'\nassert solution('roooooobert') == 'robert'\nassert solution('roroobert') == 'robert'\nassert solution('rorooberta') == 'roberta'\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"roobert\") == \"robert\"\nassert solution(\"rrroobert\") == \"robert\"\nassert solution(\"rrr\") == \"r\"\nassert solution(\"rrrbbbbbbb\") == \"r\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"roobert\") == \"robert\"\n\nSample Input 2:\nroobert\nSample Output 2:\nroobert\n\nSample Input 3:\nrooobobobobobobobob\nSample Output 3:\nroobobobbo\n\"\"\"\n\nimport re",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('robert') == 'robert'\nassert solution('roboobert') == 'robert'\nassert solution('roboobertasdf') == 'robertasdf'\nassert solution('roboobertasdfasdfasdf') == 'robertasdfasdf'\nassert solution('roboobertasdfasdfasdfsdfsdfsdfsdfsdf') == 'robertasdfasdfasdfsdfsdfsdfsdf'\n",
        "num_ids_2": 26,
        "num_ids_4": 68
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\nassert solution(\"rrrooobbbert\") == \"robert\"\nassert solution(\"rrrooobbbbbert\") == \"robert\"\nassert solution(\"rrrooobbbbbertr\") == \"robert\"\n",
        "num_ids_2": 25,
        "num_ids_4": 55
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"roberto\") == \"rbt\"\nassert solution(\"rober\") == \"r\"\nassert solution(\"rober\") == \"r\"\nassert solution(\"rober\") == \"r\"\n",
        "num_ids_2": 24,
        "num_ids_4": 46
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"roobert\") == \"robert\"\nassert solution(\"roooooooooobert\") == \"robert\"\nassert solution(\"rrroobert\") == \"robert\"\nassert solution(\"rrrrooobert\") == \"robert\"\nassert solution(\"rrroobertapealaxiamethostenes\") == \"robertapealaxiamethostenes\"\n",
        "num_ids_2": 27,
        "num_ids_4": 56
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\nassert solution(\"rrrooobbbert\") == \"robert\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 39
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rooobert') == 'robert'\nassert solution('rrrooobbbert') == 'robert'\nassert solution('adam') == 'adam'\nassert solution('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n\n---\n\nSample Input 1:\na\nSample Output 1:\na\n\nSample Input 2:\naaaaaa\nSample Output 2:\na\n\nSample Input 3:\nab\nSample Output 3:\nab\n\nSample Input 4:\nabbbba\nSample Output 4:\nab\n\nSample Input 5:\nabcde\nSample Output 5:\nabcde\n\nSample Input 6:\nabcdefghijklmnopqrstuvwxyz\nSample Output 6:\nabcdefghijklmnopqrstuvwxyz\n\nSample Input 7:\nabcdefghijklmnopqrstuvwxyzab\nSample Output 7:\nabcdefghijklmnopqrstuvwxyz\n\nSample Input 8:\nabcdefghijklmnopqrstuvwxyzabcd\nSample Output 8:\nabcdefghijklmnopqrstuvwxyz\n\nSample Input 9:\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nSample Output 9:\nabcdefghijklmnopqrstuvwxyz\n\nSample Input 10:\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nSample Output 10:\nabcdefghijklmnopqrstuvwxyz\n\nSample Input 11:\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nSample Output 11:\nabcdefghijklmnopqrstuvwxyz\n\nSample Input 12:\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nSample Output 12:\nabcdefghijklmnopqrstuvwxyz\n\nSample Input 13:\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nSample Output 13:\nabcdefghijklmnopqrstuvwxyz\n\nSample Input 14:\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nSample Output 14:\nabcdefghijklmnopqrstuvwxyz\n\nSample Input 15:\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nSample Output 15:\nabcdefghijklmnopqrstuvwxyz\n\nSample Input 16:\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv",
        "num_ids_2": 25,
        "num_ids_4": 51
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rooobert') == 'robert'\nassert solution('rooooobert') == 'robert'\nassert solution('rrrooobert') == 'robert'\nassert solution('rrroobert') == 'robert'\n",
        "num_ids_2": 25,
        "num_ids_4": 53
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000 9 7') == '108 4'\n\"\"\"\n\n\"\"\"\n\u0421\u0443\u043c\u043c\u0430 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0434\u0432\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 $a$ \u0438 $b$, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u043e $c$, \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b $a$ \u0438 $b$, \u0441\u0443\u043c\u043c\u0443 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b $a$ \u0438 $b$, \u0438\u0445 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435, \u0438\u0445 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0438 \u043e\u0441\u0442\u0430\u0442\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u043d\u0430 $b$.\n\n\u041a\u0430\u0436\u0434\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 $a$ \u0438 $b$, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000 9 7') == '108 4'\nassert solution('1000 900 7') == 'Impossible'\nassert solution('12 11 10') == 'Impossible'\nassert solution('10000 9999 0') == 'Impossible'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1000 9 7') == '108 4'\n\nprint(solution(input()))",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n\"\"\"\n\nimport sys\n\ns, v1, v2 = map(int, sys.stdin.readline().split())",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000 9 7\\n') == '108 4'\nassert solution('1000 900 7\\n') == 'Impossible'\n\n\"\"\"\n\nimport math\nimport re",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '1000 9 7'\n) == '108 4'\nassert solution(\n    '1000 900 7'\n) == 'Impossible'",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000 9 7') == '108 4'\n\"\"\"\n\ns, v1, v2 = [int(x) for x in stdin.split()]",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\nprint(\"All tests passed.\")\n\nprint(\"Example solution:\")\nprint(\"Example solution:\", solution(\"1000 9 7\"))\n\n-----Hints-----\n\n-----Related Problems-----\nQ9: Fill a missing rectangle\nQ15: The Tank Problem\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n\"\"\"\n\nimport sys\nfrom math import gcd\n\na, b, c = map(int, sys.stdin.readline().split())\n\ng = gcd(a, b)\nprint(int(c / g), int(c / g), sep=' ')\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 4\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\\n\") == \"1\\n1\\n2\\n1\\n0\"\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\"\n\nprint(solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\"))\nprint(solution(\"4 4\\n....\\n....\\n....\\n....\"))\n\"\"\"\n\nrows, cols = [int(x) for x in input().split()]\n\nmatrix = []\n\nfor _ in range(rows):\n    matrix.append(input())\n\nprint(0, 0, 0, 0, 0)\n",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n..#\\n..X.\\n..X.\\n#XX#\") == '1\\n1\\n2\\n1\\n0'\n\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == (\n    \"1\\n1\\n2\\n1\\n0\"\n)\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\".#.\\n.X.\\n.X.\") == \"0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0",
        "num_ids_2": 1514,
        "num_ids_4": 1514
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n....\\n....\\n....\\n....') == '9\\n0\\n0\\n0\\n0'\n\"\"\"",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n..#\\n..X\\n..X\\n#XX\\n\") == [1, 1, 2, 1, 0]\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n#..#\\n..X.\\n..X.\\n#XX#') == '1\\n1\\n2\\n1\\n0'\nassert solution('4 4\\n....\\n....\\n....\\n....') == '9\\n0\\n0\\n0\\n0'\n\nprint(solution(input()))",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"\\n1\") == \"1\"\nassert solution(\"\\n2\") == \"2\"\nassert solution(\"\\n3\") == \"3\"\nassert solution(\"\\n3\\n123\") == \"123\"\n",
        "num_ids_2": 19,
        "num_ids_4": 43
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"22\\n17\\n43\\n52\\n23\") == \"102\"\nprint(solution(\"22\\n17\\n43\\n52\\n23\"))\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n212\\n1253') == '1953566'\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('212\\n1253') == '1953566'\nassert solution('5\\n23\\n17\\n43\\n52\\n22') == '102'\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n212\\n1253\") == \"1953566\"\nprint(solution(\"5\\n23\\n17\\n43\\n52\\n22\"))\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('\\n'.join([\n    '2',\n    '212',\n    '1253',\n])) == '1953566'\n\nassert solution('\\n'.join([\n    '5',\n    '23',\n    '17',\n    '43',\n    '52',\n    '22',\n])) == '102'\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n212\\n1253') == '1953566'\nprint(solution('5\\n23\\n17\\n43\\n52\\n22'))\n\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('21^2 + 125^3') == '212'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"23\\n17\\n43\\n52\\n22\") == '102'\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(11234) == 11234\nassert solution('11234') == 11234\nassert solution('') == 0\nassert solution(' ') == 0\nassert solution('1') == 1\n",
        "num_ids_2": 20,
        "num_ids_4": 36
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10 10\\n3 2 1\") == \"0.000000 0.000000 0.000000\"\nassert solution(\"9 9 9\\n3 2 1\") == \"0.000000 3.000000 6.000000\"\n\"\"\"",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.0 0.0 0.0\"\nprint('The solution is correct!')\nassert solution(\"9 9 9\\n3 2 1\") == \"0.0 3.0 6.0\"\nprint('The solution is correct!')\n\n\"\"\"\nfrom math import ceil, log10\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 10 10') == '0.000000 0.000000 0.000000'\nassert solution('9 9 9') == '0.000000 3.000000 6.000000'\n\"\"\"\n\nA, B, C = list(map(int, input().split()))\nI, J, K = list(map(int, input().split()))\n\nL = C - A * I - B * J\nO = L - K * C\nprint(O / (K + 1), L / (K + 1), C / (K + 1))\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 10 10\\n3 2 1\") == \"0.000000 0.000000 0.000000\"\n\nassert solution(\"9 9 9\\n3 2 1\") == \"0.000000 3.000000 6.000000\"\n\nassert solution(\"9 9 9\\n3 2 1\") == \"0.000000 3.000000 6.000000\"\n\nassert solution(\"9 9 9\\n3 2 1\") == \"0.000000 3.000000 6.000000\"\n\nassert solution(\"9 9 9\\n3 2 1\") == \"0.000000 3.000000 6.000000\"",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 10 10\") == \"0.0 0.0 0.0\"\nassert solution(\"9 9 9\") == \"0.0 3.0 6.0\"\nassert solution(\"8 8 8\") == \"0.0 0.0 0.0\"\n\n\"\"\"\n\nA, B, C = map(int, input().split())\nI, J, K = map(int, input().split())\n\norange = (A * I) / (K * J)\napple = (B * J) / (K * I)\npineapple = (C * K) / (J * K)\n\nprint(str(round(orange - A, 6)) + \" \" + str(round(apple - B, 6)) + \" \" + str(round(pineapple - C, 6)))\n",
        "num_ids_2": 40,
        "num_ids_4": 60
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10 10\\n3 2 1\") == \"0.0 0.0 0.0\"\nassert solution(\"9 9 9\\n3 2 1\") == \"0.0 3.0 6.0\"\n\nassert solution(\"4 1 1\\n3 2 1\") == \"0.0 3.0 6.0\"\nassert solution(\"1 4 1\\n3 2 1\") == \"0.0 1.0 2.0\"\n\nassert solution(\"4 1 1\\n2 2 1\") == \"0.0 0.5 1.0\"\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\nSample Input 3:\n8 5 2\n5 5 5\nSample Output 3:\n0.000000 0.500000 3.500000\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 10 10\\n3 3 3') == '0.000000 0.000000 0.000000'\nassert solution('9 9 9\\n3 2 1') == '0.000000 3.000000 6.000000'\n\"\"\"",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.000000 0.000000 0.000000\"\nassert solution(\"9 9 9\\n3 2 1\") == \"0.000000 3.000000 6.000000\"\nprint('The code ran Correctly')\n\n-----Comments-----\nYou can use the following standard data types:\n\nIntegers: int\nFloats: float\nStrings: str\n\"\"\"",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.0 0.0 0.0\"\nassert solution(\"9 9 9\\n3 2 1\") == \"0.0 3.0 6.0\"\n\n\"\"\"",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"foss<<rritun\") == \"forritun\"\nassert solution(\"a<bc<\") == \"b\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n\nimport sys",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\nassert solution(\"<b\") == \"\"\nassert solution(\"foss<rritun\") == \"forritun\"\nassert solution(\"a<<b\") == \"b\"\n",
        "num_ids_2": 30,
        "num_ids_4": 56
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\n\nimport re",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\nprint(solution(stdin.readline()))\n\n-----Notes-----\nUse the built-in < operator.\n\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n\nSample Input 3:\nabc\nSample Output 3:\nabc\n\nSample Input 4:\nabc<\nSample Output 4:\nabc\n\"\"\"\n\nimport re\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\n\n'''\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('KMP') == 'KMP'\nassert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\nassert solution('A-Z') == 'AZ'\nassert solution('ABC-XYZ') == 'ABC-XYZ'\n",
        "num_ids_2": 30,
        "num_ids_4": 57
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('KMP') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\nassert solution('Mirko-Slavko-123') == 'MS-123'\n\"\"\"\n\n\nimport string\nimport re\n",
        "num_ids_2": 27,
        "num_ids_4": 46
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\nprint(solution(\"Knuth-Morris-Pratt\"))\nprint(solution(\"Mirko-Slavko\"))\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"KMP\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\nassert solution(\"Mirko-Slavko-Pavlov\") == \"MSP\"\nassert solution(\"Mirko-Slavko-Pavlov-Vasiak\") == \"MSPV\"\nassert solution(\"Mirko-Slavko-Pavlov-Vasiak-Slav-Milosevic\") == \"MSPV-MS\"\n\nSample Input 2:\nK-M-P\nSample Output 2:\nKMP\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 72
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\nprint(\"Success\")\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Mirko-Slavko') == 'MS'\nassert solution('Knuth-Morris-Pratt') == 'KMP'\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\n\"\"\"\n\nimport re\n\npat = re.compile('-{0,1}\\w+')\n\nstdin = input()\nprint(pat.search(stdin).group())\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\nimport re\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('KMP') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\nassert solution(\"Mirko-Slavko-Slan\") == \"MS-SL\"\nassert solution(\"Mirko-Slavko-Slan-Mal\") == \"MS-ML\"\nassert solution(\"Mirko-Slavko-Slan-Mal-Zofia\") == \"MS-ML-ZO\"\n",
        "num_ids_2": 33,
        "num_ids_4": 75
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('0 2 1') == 'Province or Gold'\nassert solution('1 2 1') == 'Duchy or Gold'\nassert solution('0 0 0') == 'Estate or Copper'\n",
        "num_ids_2": 30,
        "num_ids_4": 61
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"0 1 2\") == \"Province or Silver\"\nassert solution(\"0 1 1\") == \"Province or Gold\"\nassert solution(\"1 0 2\") == \"Duchy or Silver\"\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\n\"\"\"\n\nG, S, C = [int(x) for x in input().split()]\n\nimport itertools\n\ncombinations = list(itertools.product([\"Province\", \"Duchy\", \"Estate\"], [\"Gold\", \"Silver\", \"Copper\"]))\n\nans = None\n\nfor card in combinations:\n    if sum([G * card[1].count(\"Gold\"), S * card[1].count(\"Silver\"), C * card[1].count(\"Copper\")]) <= 5:\n        ans = card\n        break\n\nprint(*ans, sep = \" or \")",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('0 2 0') == 'Province or Gold'\nassert solution('2 2 0') == 'Province or Gold'\nassert solution('2 1 2') == 'Province or Gold'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(0, 0, 0) == (\"Estate or Copper\", \"\")\nassert solution(2, 1, 0) == (\"Province or Gold\", \"Gold\")\nassert solution(2, 2, 0) == (\"Province or Gold\", \"Province\")\nassert solution(2, 2, 1) == (\"Province or Gold\", \"Silver\")\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 80
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 0\") == \"Province or Gold\"\nassert solution(\"2 1 0\") == \"Province or Copper\"\nassert solution(\"1 2 2\") == \"Province or Duchy or Province or Duchy\"\nassert solution(\"1 0 0\") == \"Estate or Copper\"\n\nassert solution(\"2 2 2\") == \"Province or Estate or Province or Duchy or Province or Duchy\"\n\nprint(\"Test passed.\")\n\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 68
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 0\") == \"Province or Gold\"\nassert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"0 0 1\") == \"Estate or Copper\"\nassert solution(\"0 2 1\") == \"Estate or Copper\"\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"1 0 1\") == \"Province or Gold\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"2 2 0\") == \"Province or Gold\"\nassert solution(\"2 2 1\") == \"Province or Gold\"\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\n70 50') == '90.0'\nassert solution('10 3\\n80 90') == '75.7142857'\nassert solution('4 6\\n100 100\\n50 100') == 'impossible'\nassert solution('2 1\\n100 100') == 'impossible'\n\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.00\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.00\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.0\"\n\nassert solution(\"10 3\\n80 90\") == \"75.714285\"",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.00\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\n\"\"\"\n\n\"\"\"\n\u0421\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u0432\u044b\u0432\u043e\u0434\u044f\u0449\u0443\u044e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438 \u0435\u0451 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u043e\u0439 \u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 $x$ \u0438 $y$, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 \u0442\u043e\u0447\u043a\u0435 $x,y$, \u0437\u0430\u0442\u0435\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0435\u0451 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u043e\u0439.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 1. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 $y$ \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u0430\u043a\u0443\u044e \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0443 \u0432\u043f\u043b\u0438\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 2. \u0418\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0438\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0446\u0438\u044f \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u043e\u043c \u041b\u0430\u0433\u0440\u0430\u043d\u0436\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0432\u043e\u0441\u044c\u043c\u0438 \u0441\u0442\u0435\u043f\u0435\u043d\u0435\u0439 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0441\u043e\u043a\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043e\u0434\u0438\u043d. \u041f\u043e\u0434\u0432\u043e\u0434\u044f \u0438\u0442\u043e\u0433, \u043d\u0430\u0439\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 \u0442\u043e\u0447\u043a\u0435 $x,y$.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 3. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 $x,y$ \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u044d\u0442\u0430\u043f\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435.\n\nSample Input 1:\n1 2\nSample Output 1:\n0.5\n\"\"\"\n\n\"\"\"\n\u0421\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u0432\u044b\u0432\u043e\u0434\u044f\u0449\u0443\u044e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 $x$, $y$, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 \u0442\u043e\u0447\u043a\u0435 $x,y$ \u0438 \u0437\u0430\u0442\u0435\u043c \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u043e\u0447\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 \u0442\u043e\u0447\u043a\u0435 $x,y$.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 1. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 $y$ \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u0430\u043a\u0443\u044e \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0443 \u0432\u043f\u043b\u0438\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 2. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 $x,y$ \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u044d\u0442\u0430\u043f\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435.\n\nSample Input 1:\n1 2\nSample Output 1:\n0.5\n\"\"\"\n\n\"\"\"\n\u0421\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u0432\u044b\u0432\u043e\u0434\u044f\u0449\u0443\u044e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 $x$, $y$, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1\\n70 50') == '90.0'\nassert solution('10 3\\n80 90') == '75.7142857'\nprint('Success')\n\n\"\"\"\n\nimport math\nimport sys\nimport io",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.00\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\nassert solution(\"7 4\\n1 2\\n3 4\\n5 6\\n6 7\") == \"impossible\"\n\nprint(\"Success\")\n\n\"\"\"\n\nn, k = map(int, input().split())\n\nd, s = map(int, input().split())",
        "num_ids_2": 36,
        "num_ids_4": 64
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.0\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.0\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\n\"\"\"\n\nn, k = map(int, input().split())\nd, s = map(int, input().split())",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.0\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\n\"\"\"\n\n\"\"\"\nMemo\n\n1. use recursion?\n2. use brute force?\n\nplan:\n    - sum up all the number less than k\n    - sum up all the number less than k and less than n\n    - sum up all the number less than k and less than n divided by n\n\"\"\"\n\n\nimport sys",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 1 5 4 7 6') == '2 3 5 7'\nassert solution('1 2 3 4 5') == '1 2 3 4 5'\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\nassert solution(\"5 1 2 3 4 5\") == \"5\\n1 2 3 4 5\"\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 3 1 5 7\") == '2 3 5 7'\nassert solution(\"7 2 3 1 5 4 7 6\") == '2 3 5 7'\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1, 3, 4, 2, 5, 7') == '1, 3, 4, 5, 7'\n\nassert solution('1, 2, 3, 4, 5') == '1, 2, 3, 4, 5'\nassert solution('1, 3, 2, 4, 5') == '1, 2, 3, 4, 5'\nassert solution('2, 3, 1, 5, 4, 7, 6') == '2, 3, 5, 7'\n",
        "num_ids_2": 36,
        "num_ids_4": 88
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"7\n2 3 1 5 4 7 6\"\"\") == \"\"\"4\n2 3 5 7\"\"\"\nassert solution(\"\"\"5\n1 2 3 4 5\"\"\") == \"\"\"5\n1 2 3 4 5\"\"\"\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == '4\\n2 3 5 7', 'Test #1. Failed.'\nassert solution(\"5\\n1 2 3 4 5\") == '5\\n1 2 3 4 5', 'Test #2. Failed.'\n",
        "num_ids_2": 63,
        "num_ids_4": 63
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 3 1 5') == '2 3 5'\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2 1 5 4 7 6\") == \"4, 2, 3, 5, 7\"\nassert solution(\"5 1 2 3 4\") == \"1, 2, 3, 4, 5\"\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 1 5 4 7 6\") == \"4\"\nassert solution(\"1 2 3 4 5\") == \"5\"\n\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\n2 3 1 5 4 7 6') == '4\\n2 3 5 7'\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(input()), 'WA'",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 10\") == \"9 25\"\n\"\"\"\n\nH, M = input().split()\nhour = int(H) + 45 // 60\nminute = int(M) + 45 % 60\nprint(str(hour).zfill(2), str(minute).zfill(2))",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\nprint('Success')\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12 20\") == \"10 25\"\nassert solution(\"1 1\") == \"0 0\"\nassert solution(\"24 1\") == \"23 59\"\nassert solution(\"23 59\") == \"23 59\"\nassert solution(\"0 1\") == \"23 59\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\nassert solution(\"23 30\") == \"2 45\"\n\nassert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\nassert solution('10 50') == '8 35'\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\nprint(solution(\"10 10\"))\nprint(solution(\"0 30\"))\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin), end=\"\")\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\n\n\"\"\"\n\n\nimport math\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2.718281\") == \"1.141414\"\nprint(solution(\"2.718281\"))\nassert solution(\"0.36788\") == \"1.141414\"\nprint(solution(\"0.36788\"))",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.000000\") == '1.000000'\nassert solution(\"2.718281\") == '2.718281'\nassert solution(\"0.36788\") == '0.36788'\nassert solution(\"2.000000\") == '1.414214'\nassert solution(\"-1.000000\") == '-1.000000'\n",
        "num_ids_2": 30,
        "num_ids_4": 61
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\nassert solution('0.36788') == '1.414214'\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 45
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\nassert solution('0.36788') == '0.4994142'\nassert solution('1e-5') == '1.000000'\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 61
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.0\") == \"1.0\"\nassert solution(\"1.234\") == \"1.2342\"\nassert solution(\"2.71828\") == \"2.718281\"\nassert solution(\"3.14159\") == \"3.141592653589793\"\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 65
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2.000000\") == \"1.414214\"\nassert solution(\"1.000000\") == \"1.000000\"\nassert solution(\"0.36788\") == \"1.079100\"\n\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 46
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\nassert solution('2.718281') == '2.353534'\n\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 46
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0.36788\") == \"1.414214\"\nassert solution(\"2.718281\") == \"e\"\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\nassert solution('1.1') == '1.1'\nassert solution('0.000') == '0.000'\nassert solution('0.367879') == '0.367879'",
        "num_ids_2": 29,
        "num_ids_4": 57
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"3:\", \"Wrong answer for 3\"\nassert solution(\"50\") == \"50:\", \"Wrong answer for 50\"\nassert solution(\"100\") == \"100:\", \"Wrong answer for 100\"\nassert solution(\"10\") == \"10:\", \"Wrong answer for 10\"\nassert solution(\"55\") == \"55:\", \"Wrong answer for 55\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"3:\"\nassert solution(\"50\") == \"50:\"\nassert solution(\"50\") == \"50:2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\"\nassert solution(\"3\") == \"3:2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\"\nassert solution(\"3\") == \"3:2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\"\n",
        "num_ids_2": 20,
        "num_ids_4": 138
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"50\") == \"50\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"3:2,1\"\nassert solution(\"50\") == \"50:2,1\"\nassert solution(\"7\") == \"7:1,1,1,1,1,1,1\"\nassert solution(\"9\") == \"9:1,1,1,1,2,2,2\"\nassert solution(\"11\") == \"11:1,1,2,2,2,2,2,2,2,2\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 76
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"3:\"\nassert solution(\"50\") == \"50:\"\nassert solution(\"27\") == \"27:\"\nassert solution(\"8\") == \"8:\"\nassert solution(\"6\") == \"6:\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3) == \"3:\\\\n2,1\\\\n\"\nassert solution(50) == \"50:\\\\n2,1\\\\n2,2\\\\n3,2\\\\n5,4\\\\n5,5\\\\n6,5\\\\n10,10\\\\n13,12\\\\n17,16\\\\n25,25\\\\n\"\n\n---Problem---\nA $51$-star flag has a design that is equally elegant on its own, but it also needs to work as a triangle or rectangle. This star flag is so elegant that it is often mistaken for a rectangle. Design and implement a function that prints a rectangle flag of $S$ stars, in the same layout as a $51$-star flag.\n\n-----Solution---\nFor every possible value of $S$, we create a flag of $S$ stars using this algorithm:\n\nCreate an empty list called patterns that will store the patterns.\nCreate an empty list called rectangles that will store the rectangles.\nInitialize $S$ to $2$, the minimum number of stars a rectangle can have.\nWhile $S$ is less than $32767$, do the following:\nUpdate $S$ by multiplying it by 2.\nCreate a new list, called growing_rectangles, and add to it the elements of rectangles.\nAdd the element to growing_rectangles:\nIf $S$ is odd, use the pattern shown in the sample output above:\n    1) Add $S$ stars to growing_rectangles.\n    2) Add the new element to growing_rectangles.\nIf $S$ is even, use the pattern shown in the sample output above:\n    1) Add $S$ stars to growing_rectangles.\n    2) Add $S$ stars to growing_rectangles.\n    3) Add the new element to growing_rectangles.\n    4) Add the new element to growing_rectangles.\nPrint the new element to growing_rectangles.\nAdd the new element to patterns.\nIf the element of growing_rectangles is not a rectangle, remove it from growing_rectangles.\nPrint all the elements in patterns.\n\n-----Constraints-----\n1 \u2264 S \u2264 32767\n\n3 \u2264 S \u2264 100\n\n1 \u2264 S \u2264 100\n\n1 \u2264 S \u2264 100\n\n---Test Cases---\nInput:\n5\nOutput:\n5:\n2,1\n2,2\n3,2\n5,4\n5,5\n2,1\n3,1\n3,2\n4,3\n5,2\n5,3\n4,4\n5,5\n3,3\n4,3\n5,3\n5,4\n5,5\n5,5\n5,6\n5,7\n5,8\n5,9\n5,10\n5,11\n5,12\n5,13\n5,14\n5,15\n5,16\n5,17\n5,18\n5,19\n5,20\n5,21\n5,22\n5,23\n5,24\n5,25\n5,26\n5,27\n5,28\n5,29\n5,30\n5,31\n5,32\n5,33\n5,34\n5,35\n5,36\n5,37\n5,38\n5,39\n5,40\n5,41\n5,42\n5,43\n5,44\n5,45\n5,46\n5,47\n5,48\n5,49\n5,50\n5,51\n5,52\n5,53\n5,54\n5,55\n5,56\n5,57\n5,58\n5,59\n5,60\n5,61\n5,62\n5,63\n5,64\n5,65\n5,66\n5,67\n5,68\n5,69\n5,70\n5,71\n5,72\n5,73\n5,74\n5,75\n5,76\n5,77\n5,78\n5,79\n5,80\n5,81\n5,82\n5,83\n5,84\n5,85\n5,86\n5,87\n5,88\n5,89\n5,90\n5,91\n5,92\n5,93\n5,94\n5,95\n5,96\n5,97\n5,98\n5,99\n5,100\n5,101\n5,102\n5,103\n5,104\n5,105\n5,106\n5,107\n5,108\n5,109\n5,110\n5,111\n5,112\n5,113\n5,114\n5,115\n5,116\n5,117\n5,118\n5,119\n5,120\n5,121\n5,122\n5,123\n5,124\n5,125\n5,126\n5,127\n5,128\n5,129\n5,130\n5,131\n5,132\n5,133\n5,134\n5,135\n5,136\n5,137\n5,138\n5,139\n5,140\n5,141\n5,142\n5,143\n5,144\n5,145\n5,146\n5,147\n5,148\n5,149\n5,150\n5,151\n5,152\n5,153\n5,154\n5,155\n5,156\n5,157\n5,158\n5,159\n5,160\n5,161\n5,162\n5,163\n5,164\n5,165\n5,166\n5,167\n5,168\n5,169\n5,170\n5,171\n5,172\n5,173\n5,174\n5,175\n5,176\n5,177\n5,178\n5,179\n5,180\n5,181\n5,182\n5,183\n5,184\n5,185\n5,186\n5,187\n5,188\n5,189\n5,190\n5,191\n5,192\n5,193\n5,194\n5,195\n5,196\n5,197\n5,198\n5,199\n5,200\n5,201\n5,202\n5,203\n5,204\n5,205\n5,",
        "num_ids_2": 81,
        "num_ids_4": 81
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"3:\", \"Wrong output for input 3\"\nassert solution(\"50\") == \"50:\", \"Wrong output for input 50\"\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def solution(self, stdin):\n        pass\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        pass\n\n    def test_solution(self):\n        self.assertEqual(Solution().solution(\"3\"), \"3:\", \"Wrong output for input 3\")\n        self.assertEqual(Solution().solution(\"50\"), \"50:\", \"Wrong output for input 50\")",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '3:', 'Check you logic'\nassert solution('50') == '50:', 'Check you logic'\nprint('Hooray!')\n\n\"\"\"\nimport time\nimport math\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '3:', 'Check your solution for number of stars: 3'\nassert solution('2') == '2:', 'Check your solution for number of stars: 2'\nassert solution('50') == '50:', 'Check your solution for number of stars: 50'\nassert solution('5') == '5:', 'Check your solution for number of stars: 5'\n\nassert solution('3') == '3:', 'Check your solution for number of stars: 3'\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"50\") == \"50\"\nassert solution(\"1\") == \"1\"\n\"\"\"\nimport sys\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\"\"\"\n\n\nimport sys\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN\") == \"yes\"\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'no'\nassert solution('THE RAIN IN SPAIN') == 'yes'\nassert solution('IN THE RAIN AND THE SNOW') == 'no'\nassert solution('THE RAIN IN SPAIN IN THE PLAIN') == 'yes'\nassert solution('THINCH OVER') == 'no'\n",
        "num_ids_2": 26,
        "num_ids_4": 63
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\"\nassert solution(\"X Y Z Z Z X Z Z Z X Z X Z\") == \"yes\"\nassert solution(\"THE ANOTHER DAY\") == \"no\"\n",
        "num_ids_2": 33,
        "num_ids_4": 75
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\"\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 53
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('THE RAIN IN SPAIN') == 'yes'\nassert solution('IN THE RAIN AND THE SNOW') == 'no'\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == 'yes'\nassert solution(\"IN THE RAIN AND THE SNOW\") == 'no'\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == 'yes'\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == 'yes'\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == 'yes'\n\nprint('Success')",
        "num_ids_2": 33,
        "num_ids_4": 73
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\nprint(\"All tests passed.\")\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution
        "num_ids_2": 1429,
        "num_ids_4": 1429
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\nprint('Success')\n\"\"\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('RRRRRRRRRRRRRRRRRRRRRR') == 'C'\nassert solution('BRLRLBRLRLRBRRRRLLL') == 'CSKHHC'\n\"\"\"\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 7\\n') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\n\nprint(solution(stdin))",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 7\\n') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\nassert solution('2 4 7\\n') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n'\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7'\nassert solution('2 4 7') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7'\nprint('Success')",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\"\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 7\\n') == '\\n1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7'\nprint('Test pass.')",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 7\") == \"\"\"1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7\"\"\"\nassert solution(\"2 4 7\") == \"\"\"1\nFizz\n3\nFizzBuzz\n5\nFizz\n7\"\"\"\nassert solution(\"2 4 7\") == \"\"\"1\nFizz\n3\nFizzBuzz\n5\nFizz\n7\"\"\"\n\"\"\"\n    X, Y, N = map(int, stdin.readline().strip().split(' '))\n    for i in range(1, N + 1):\n        if i % X == 0 and i % Y == 0:\n            print('FizzBuzz')\n        elif i % X == 0:\n            print('Fizz')\n        elif i % Y == 0:\n            print('Buzz')\n        else:\n            print(i)\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 7\") == \"\"\"1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7\n\"\"\"\nassert solution(\"2 4 7\") == \"\"\"1\nFizz\n3\nFizzBuzz\n5\nFizz\n7\n\"\"\"\nassert solution(\"1 3 7\") == \"\"\"1\n1\nFizz\n3\nFizz\n5\nFizz\n7\n\"\"\"\n\n\"\"\"\nQuestion 2\n\nWrite a function that returns the maximum product of three integers in a given list. \n\n-----Input-----\nInput contains two lines, the first one contains a single integer $N$ (1 \\leq N \\leq 100), the second one contains $N$ integers, each of them is no more than $10^6$.\n\n-----Output-----\nPrint the maximum product of three integers, if any such product exists. Otherwise, print -1.\n\n-----Examples-----\nSample Input 1:\n4\n1 2 3 4\nSample Output 1:\n12\n\nSample Input 2:\n2\n3 3 4\nSample Output 2:\n-1\n\nSample Input 3:\n5\n1 2 3 4 5\nSample Output 3:\n60\n\nSample Input 4:\n3\n1 2 3\nSample Output 4:\n-1\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7'\n\nassert solution('2 4 7') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7'\n\n\"\"\"\nimport re\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\"\nassert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\"\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\ndata = list(map(int, stdin.readline().split()))\ndata.sort()\n\nfor i in range(n):\n    if m - data[i] < 0:\n        print(\"It hadn't snowed this early in 0 years!\")\n        break\n    else:\n        print(\"It hadn't snowed this early in {} years!\".format(m - data[i]))\n        break\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n\n\"\"\"\nimport math\nfrom typing import List\n\n\"\"\"\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'\n\n\"\"\"\n\nn, m = list(map(int, stdin.readline().split()))\nd = list(map(int, stdin.readline().split()))\n\nfor i in range(n):\n    if d[i] > m:\n        print('It hadn\\'t snowed this early in %d years!' % i)\n        break\nelse:\n    print('It hadn\\'t snowed this early in %d years!' % n)\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(\n    input()\n)\nprint(solution(input()))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str([3, 3, 3, 2])) == \"It hadn't snowed this early in 3 years!\"\nassert solution(str([2, 10])) == \"It hadn't snowed this early in 0 years!\"\n\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\nd = [int(i) for i in sys.stdin.readline().split()]",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'\n\"\"\"",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\nassert solution(\"1 100\\n100\") == \"It hadn't snowed this early in 1 years!\"\n\"\"\"\n\n\"\"\"\nRead in the total number of years and the maximum number of consecutive years that had snow. Then loop through each year to see if there is a year before that had snow.\n\"\"\"\n\nimport math\nimport sys",
        "num_ids_2": 50,
        "num_ids_4": 73
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2') == '7'\nassert solution('10 10') == '9'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 10\") == \"7\"\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 1\nassert solution('12') == 3\nassert solution('123') == 5\nassert solution('1234') == 1\nassert solution('12345') == 2\n",
        "num_ids_2": 16,
        "num_ids_4": 33
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 2') == '2'\nassert solution('10 10') == '7'\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 10') == '7'\nassert solution('10 2') == '2'\nassert solution('3 2') == '1'\nassert solution('3 3') == '3'\nassert solution('2 2') == '1'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 2\") == \"2\"\nassert solution(\"10 10\") == \"7\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''10 2\n''') == 2\n\nassert solution('''10 10\n''') == 7\n\nassert solution('''10 10\n''') == 7\n\nassert solution('''10 10\n''') == 7\n\nassert solution('''1 1\n''') == 1",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 2') == '2'\nassert solution('10 10') == '7'\n\nprint(solution(stdin))\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 2') == '2'\n\nprint(solution(stdin))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 2') == '2'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"mamamu\") == \"mamamu\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 42
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"kak\") == \"kakosi\"\nassert solution(\"x\") == \"x\"\nassert solution(\"n\") == \"n\"\nassert solution(\"aaaaaaa\") == \"aaaaaaa\"\n",
        "num_ids_2": 25,
        "num_ids_4": 45
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nprint('All tests passed.')\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\nassert solution('akbbs') == 'akbbs'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 40
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('bok') == 'bok'\nassert solution('kakosi') == 'kakosi'\nassert solution('bk') == 'bk'\n\nprint(solution(stdin))",
        "num_ids_2": 20,
        "num_ids_4": 46
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"8 2\"\nassert solution(\"7\") == \"8 3\"\n\nassert solution(\"3\") == \"2 1\"\nassert solution(\"4\") == \"2 2\"\n\nassert solution(\"2\") == \"2 1\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\n8 2') == '8 2'\nassert solution('7\\n8 3') == '8 3'\n\"\"\"\nimport math\n\n_, K = [int(x) for x in input().split()]\n\nn = int(math.log2(K))\nk = K - 2**n\nans = 2**n + k\nprint(ans, n + 1)\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n3\") == \"8 2\"\n\nassert solution(\"7\\n3\") == \"8 3\"\n\nassert solution(\"6\\n3\") == \"8 2\"\n\nassert solution(\"4\\n3\") == \"8 3\"\n\nassert solution(\"2\\n3\") == \"8 2\"",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"8 2\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n') == '8 2'\nassert solution('7\\n') == '8 3'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2\") == \"2 3\"\nassert solution(\"7\\n7\") == \"8 3\"\nassert solution(\"8\\n3\") == \"8 4\"\nassert solution(\"13\\n4\") == \"16 4\"\nassert solution(\"30\\n6\") == \"32 6\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6') == '8 2'\nassert solution('7') == '8 3'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"8 2\"\nassert solution(\"7\") == \"8 3\"\nassert solution(\"8\") == \"9 1\"\n\"\"\"\n\nfrom math import log2",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"8 2\"\nassert solution(\"7\") == \"8 3\"\n\"\"\"\n\nK = int(stdin.readline())\nd = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536]\nprint(d.index(K) + 1, d[K // 2])\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_0) == test_output_0",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"stairs\", 2,\n    [\"erres airs ears ares aires\",\n    \"eet eat\"],\n    [(\"apples and pears\",),\n    (\"plates of meat\",)]) == \"YES\\nNO\\nYES\\nYES\"\n\nassert solution(\"drought\", 2,\n    [(\"aught ought aut acht\",),\n    \"ought oubt outte out oute\"],\n    [(\"tasty sprout\",),\n    (\"difficult route\",),\n    (\"worried and dreaded\",),\n    (\"forever in doubt\",),\n    (\"apples and pears\",)]) == \"YES\\nYES\\nYES\\nYES\\nNO\"\n\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"stairs\\n2\\nerres airs ears ares aires\\neet eat\\n2\\napples and pears\\nplates of meat\\n2\\ntasty sprout\\ndifficult route\\nworried and ca\\nforever in doubt\\napples and pears\\n\") == \"YES\\nNO\\nYES\\nYES\\nNO\\n\"\nassert solution(\n\"drought\\n2\\naught ought aut acht\\nought oubt outte out oute\\n5\\n\\ntasty sprout\\ndifficult route\\nworried and ca\\nforever in doubt\\napples and pears\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\\n\"\n\nprint(solution(stdin))\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open(r\"D:\\Projects\\Python\\pytutor\\p098_rhyming_slang\\test_input.txt\", \"r\").read()) == open(r\"D:\\Projects\\Python\\pytutor\\p098_rhyming_slang\\test_output.txt\", \"r\").read()\n\n\"\"\"\nimport re",
        "num_ids_2": 79,
        "num_ids_4": 79
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('stairs', 2, ['erres airs ears ares aires', 'eet eat'], 2, ['apples and pears', 'plates of meat']) == 'YES\\nNO'\nassert solution('drought', 2, ['aught ought aut acht', 'ought oubt outte out oute'], 5, ['tasty sprout', 'difficult route', 'worried and charged', 'forever in doubt', 'apples and pears']) == 'YES\\nYES\\nYES\\nYES\\nNO'\nassert solution('water', 1, ['drank a cup of tea'], 1, ['water']) == 'YES'\n\"\"\"",
        "num_ids_2": 124,
        "num_ids_4": 151
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"chairs\") == \"NO\"\nassert solution(\"water\") == \"NO\"\nassert solution(\"tables\") == \"NO\"\nassert solution(\"dictionary\") == \"YES\"\nassert solution(\"rhymes\") == \"YES\"\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution(''') == ''\nassert solution('2') == '2'\nassert solution('\\n') == '\\n'\nassert solution('2\\n') == '2\\n'\n",
        "num_ids_2": 16,
        "num_ids_4": 38
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"stairs\") == \"YES\"\nassert solution(\"drought\") == \"NO\"\nassert solution(\"dirt\") == \"YES\"\n\"\"\"\nimport sys\n\nfrom typing import List\nfrom collections import defaultdict\n\nfrom icontract import require, ensure, DBC\n\n\nclass RhymeSlang(DBC):\n    \"\"\"Represent the result of `solution`.\"\"\"\n\n    @require(lambda common: 1 <= len(common) <= 20)\n    def common(self) -> str:\n        \"\"\"Return the common word.\"\"\"\n        return self.line\n\n    @require(lambda rhymes: 1 <= len(rhymes) <= 10)\n    def rhymes(self) -> List[List[str]]:\n        \"\"\"Return the lists of rhyming words.\"\"\"\n        return self.rhymes\n\n    @require(lambda e: 1 <= e <= 10)\n    def num_rhyme_lists(self) -> int:\n        \"\"\"Return the number of rhyme lists.\"\"\"\n        return self.e\n\n    @require(lambda phrases: 1 <= len(phrases) <= 10)\n    def phrases(self) -> List[List[str]]:\n        \"\"\"Return the phrases.\"\"\"\n        return self.phrases\n\n    @require(lambda phrases: len(phrases) == len(set(phrases)))\n    def no_duplicates(self) -> None:\n        \"\"\"Check that no phrases appear twice.\"\"\"\n        # NOTE: duplicates will result in `ValueError`s, so it is OK to\n        # silently ignore these.\n        d = defaultdict(list)\n        for phrase in self.phrases:\n            d[phrase].append(phrase)\n\n        for phrases in d.values():\n            if len(phrases) > 1:\n                raise ValueError(\"Duplicate phrases: {}\".format(phrases))\n\n    @require(lambda phrases: all(len(phrase) <= 100 for phrase in phrases))\n    def max_len_of_phrases(self) -> None:\n        \"\"\"Check that the phrases are not too long.\"\"\"\n        max_len = 0\n        for phrase in self.phrases:\n            max_len = max(max_len, len(phrase))\n        if max_len > 100:\n            raise ValueError(\"Phrase(s) are too long: {}\".format(max_len))\n\n    @require(lambda phrases: all(\n        all(len(word) <= 3 for word in phrase.split())\n        for phrase in phrases\n    ))\n    def word_ends_are_all_valid(self) -> None:\n        \"\"\"Check that the phrases contain three or fewer words.\"\"\"\n        for phrase in self.phrases:\n            if len(phrase.split()) > 3:\n                raise ValueError(\"Phrase contains more than three words: {}\"\n                                .format(phrase))\n\n    def __repr__(self) -> str:\n        return (\"RhymeSlang({common!r}, {rhymes!r}, {num_rhyme_lists!r}, \"\n                \"{phrases!r})\".format(**self.__dict__))\n\n\n@ensure(lambda result: isinstance(result, RhymeSlang))\n",
        "num_ids_2": 21,
        "num_ids_4": 32
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"stairs\") == \"YES\"\nassert solution(\"drought\") == \"NO\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('test') == 'NO'\nassert solution('drought') == 'NO'\nassert solution('butter') == 'YES'\nassert solution('street') == 'YES'\nassert solution('tasty') == 'NO'\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"stairs\") == \"YES\\nNO\\n\"\nassert solution(\"drought\") == \"NO\\nYES\\nYES\\nYES\\nNO\\n\"\n\"\"\"\n\nimport sys\nimport os\nimport unittest",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(HANGMAN) == \"WIN\"\nassert solution(BANANA) == \"LOSE\"\nassert solution(\"BANANA\") == \"LOSE\"\nassert solution(\"\") == \"\"\n\"\"\"\n\n\nfrom itertools import permutations",
        "num_ids_2": 25,
        "num_ids_4": 45
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\nassert solution('ACB') == 'WIN'\nassert solution('ABC') == 'LOSE'\nassert solution('ABCDEFG') == 'LOSE'\n",
        "num_ids_2": 25,
        "num_ids_4": 47
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'WIN'\nassert solution('B') == 'LOSE'\nassert solution('HANGMAN') == 'WIN'\nassert solution('BA') == 'LOSE'\nassert solution('BANAN') == 'LOSE'\n\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\nassert solution(\"BAANAN\") == \"LOSE\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 25,
        "num_ids_4": 38
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\nassert solution('BANANANAA') == 'LOSE'\n\n\"\"\"\n\nimport string\nimport sys\nimport unittest",
        "num_ids_2": 25,
        "num_ids_4": 40
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\nassert solution(\"FOO\") == \"WIN\"\nassert solution(\"F\") == \"WIN\"\nassert solution(\"F\") == \"WIN\"\n",
        "num_ids_2": 25,
        "num_ids_4": 46
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\nassert solution('NED') == 'NED'\nassert solution('NAN') == 'LOSE'\nassert solution('NEDNED') == 'WIN'\n\n\"\"\"\n\nimport sys\nimport random\nfrom collections import Counter",
        "num_ids_2": 25,
        "num_ids_4": 49
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(SAMPLE_INPUT) == \"DECREASING\"\n\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\\n') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\\n') == 'NEITHER'\nassert solution('2\\nBOB\\nJOE\\n') == 'INCREASING'\nassert solution('4\\nBORG\\nDERICK\\nBARRACK\\nCRISPIN\\n') == 'INCREASING'\nassert solution('7\\nHOLDER\\nSARAH\\nDILWAN\\nNAMIH\\nDEUSIS\\nSANHEE\\n') == 'INCREASING'\n",
        "num_ids_2": 100,
        "num_ids_4": 157
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\nassert solution('5\\nJOE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\n') == 'INCREASING'\nassert solution('5\\nJOE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\n') == 'INCREASING'",
        "num_ids_2": 96,
        "num_ids_4": 174
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\nJOE\nBOB\nANDY\nAL\nADAM''') == \"DECREASING\"\nassert solution('''11\nHOPE\nALI\nBECKY\nJULIE\nMEGHAN\nLAUREN\nMORGAN\nCARLI\nMEGAN\nALEX\nTOBIN''') == \"NEITHER\"\n\n'''\nYou've already built a well-functioning group meeting system with a host and up to 20 attendees that can be found on Codewars. Now it's time to build the best group meeting system ever!\n\nYour task is to implement a function that, given a list of pairs of integers\u00a0$[a_1, b_1], [a_2, b_2],...$, returns the maximum number of meetings that can be scheduled without two attendees having to wait for each other. Note that if there are three attendees, two of them won't even have to wait for each other.\n\nFor example, given the list of pairs\u00a0$[5, 9], [12, 3], [10, 17], [4, 8]$ the output should be\u00a03.\n\nHere's your starting point:",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(['JOE', 'BOB', 'ANDY', 'AL', 'ADAM']) == 'DECREASING'\nassert solution(['ALI', 'BECKY', 'JULIE', 'MEGHAN', 'LAUREN', 'MORGAN', 'CARLI', 'MEGAN', 'ALEX', 'TOBIN']) == 'NEITHER'\n\"\"\"\n\nimport itertools\n\nN = int(input())\nnames = list(input().split())",
        "num_ids_2": 90,
        "num_ids_4": 90
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n\nprint(solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\"))\nprint(solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\"))\n",
        "num_ids_2": 96,
        "num_ids_4": 96
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n\n\"\"\"",
        "num_ids_2": 96,
        "num_ids_4": 96
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n",
        "num_ids_2": 96,
        "num_ids_4": 96
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n",
        "num_ids_2": 96,
        "num_ids_4": 96
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n\n\"\"\"\n\nfrom functools import cmp_to_key",
        "num_ids_2": 96,
        "num_ids_4": 96
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 10 13\nJohn\nKelly\nGeorge\nKelly 1\nGeorge 2\nKelly 1\nJohn 2\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\nGeorge 3\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\nGeorge 3\nGeorge 1\nJohn 3\nKelly 3\nKelly 1''') == '''No winner!\nGeorge wins!\nJess wins!\n'''\n\nassert solution('''4 10 13\nBob\nNina\nJess\nTim\nNina 2\nBob 2\nNina 1\nJess 3\nBob 2\nJess 2\nNina 1\nJess 2\nNina 3\nBob 1\nNina 3\nJess 3\nBob 2''') == '''Nina wins!\nJess wins!\n'''\n\nprint('Success')",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\\nNo winner!\\nJess wins!\\nNo winner!\\nJess wins!\\nNo winner!\"\n\nprint(solution(stdin))\n",
        "num_ids_2": 110,
        "num_ids_4": 110
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10 13\") == \"\"\"George wins!\nNo winner!\"\"\"\nassert solution(\"4 10 13\") == \"\"\"Nina wins!\nJess wins!\"\"\"\n\"\"\"\nYou are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.\n\nReturn the length of the longest substring containing the same letter you can get after performing the above operations.\n\n \n\nExample 1:\n\nInput: s = \"ABAB\", k = 2\nOutput: 4\nExplanation: Replace the two 'A's with two 'B's or vice versa.\nExample 2:\n\nInput: s = \"AABABBA\", k = 1\nOutput: 4\nExplanation: Replace the one 'A' in the middle with 'B' and form \"AABBBBA\".\nThe substring \"BBBB\" has the longest repeating letters, which is 4.\nExample 3:\n\nInput: s = \"ABAA\", k = 19\nOutput: 3\nExplanation: Replace the 'A' at index 0 and the 'A' at index 1.\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nJess wins!\\n\"\n\"\"\"\n",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\\nNina wins!\"",
        "num_ids_2": 91,
        "num_ids_4": 91
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 10 13') == 'George wins!\\nNina wins!\\nJess wins!'\nassert solution('4 10 13') == 'Nina wins!\\nJess wins!\\nNo winner!'",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\"\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nfor line in stdin:\n    line = line.split()\n    n = int(line[0])\n    p = int(line[1])\n    m = int(line[2])\n    players = {}\n    for _ in range(n):\n        players[line[_ + 1]] = 0\n    for _ in range(m):\n        player, points = line[_ + 2].split()\n        if points == \"1\":\n            players[player] += 1\n        elif points == \"2\":\n            players[player] += 2\n        elif points == \"3\":\n            players[player] += 3\n    print(players)\n    for player in players:\n        if players[player] >= p:\n            print(player)\n    if len(players) > 0:\n        print(\"No winner!\")\n\n\"\"\"\nimport sys\n\nstdin = sys.stdin",
        "num_ids_2": 85,
        "num_ids_4": 85
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == 'George wins!\\nJess wins!\\nNo winner!'\n",
        "num_ids_2": 84,
        "num_ids_4": 84
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 10 13\\n\"\n    \"John\\n\"\n    \"Kelly\\n\"\n    \"George\\n\"\n    \"Kelly 1\\n\"\n    \"George 2\\n\"\n    \"Kelly 1\\n\"\n    \"John 2\\n\"\n    \"George 1\\n\"\n    \"John 3\\n\"\n    \"Kelly 3\\n\"\n    \"Kelly 1\\n\"\n    \"George 3\\n\"\n    \"George 1\\n\"\n    \"John 3\\n\"\n    \"George 3\\n\"\n    \"Kelly 1\") == \"George wins!\"\n\nassert solution(\n    \"4 10 13\\n\"\n    \"Bob\\n\"\n    \"Nina\\n\"\n    \"Jess\\n\"\n    \"Tim\\n\"\n    \"Nina 2\\n\"\n    \"Bob 2\\n\"\n    \"Nina 1\\n\"\n    \"Jess 3\\n\"\n    \"Bob 2\\n\"\n    \"Jess 2\\n\"\n    \"Nina 1\\n\"\n    \"Jess 2\\n\"\n    \"Nina 3\\n\"\n    \"Bob 1\\n\"\n    \"Nina 3\\n\"\n    \"Jess 3\\n\"\n    \"Bob 2\") == \"Nina wins!\"\n\nassert solution(\n    \"3 10 13\\n\"\n    \"John\\n\"\n    \"Kelly\\n\"\n    \"George\\n\"\n    \"Kelly 1\\n\"\n    \"George 2\\n\"\n    \"Kelly 1\\n\"\n    \"John 2\\n\"\n    \"George 1\\n\"\n    \"John 3\\n\"\n    \"Kelly 3\\n\"\n    \"Kelly 1\\n\"\n    \"George 3\\n\"\n    \"George 1\\n\"\n    \"John 3\\n\"\n    \"George 3\\n\"\n    \"Kelly 1\") == \"No winner!\"\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n------\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '1.0'\nassert solution('1 3 1 3 4') == '0.0'\nassert solution('3 1 -3 4 5') == '3.0'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 57
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\"\"\"\n\nimport math\n\nx, y, x1, y1, x2, y2 = map(int, stdin.split())\n\nx2 = abs(x - x2)\ny2 = abs(y - y2)\n\na = abs(x1 - x2)\nb = abs(y1 - y2)",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 0 0 5 4\") == \"2.0\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''7 3 0 0 5 4''') == '2.0'\nassert solution('''6 0 0 2 7 6''') == '2.0'\n'''",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\n\"\"\"\n\nx, y, x1, y1, x2, y2 = [int(x) for x in stdin.split(' ')]",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\n\nSample Output:\n7 3 0 0 5 4\nSample Input:\n1 0 2 -3 0 1\nSample Output:\n4.0\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"15\") == \"16\"\nassert solution(\"10\") == \"11\"\nassert solution(\"331\") == \"0\"\nassert solution(\"1\") == \"2\"\nassert solution(\"12345\") == \"23456\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"156\") == \"165\"\nassert solution(\"330\") == \"0\"\n\n\"\"\"\n\nimport unittest\nimport sys\nfrom typing import List\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"330\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n''') == '0'\nassert solution('''\n0\n''') == '0'\nassert solution('''\n9\n''') == '9'\nassert solution('''\n9\n''') == '9'\nassert solution('''\n9\n99999\n''') == '100000000'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"330\") == \"0\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"156\") == \"165\"\nassert solution(\"330\") == \"0\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('15') == '16'\nassert solution('3') == '0'\nassert solution('555') == '611'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 31
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '0'\nassert solution('4') == '5'\nassert solution
        "num_ids_2": 20,
        "num_ids_4": 1895
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000''') == '4'\nassert solution('''4 4\n180000 185000 199999 100000\n199999 180000 170000 120000''') == '3'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000') == 3\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000') == '4'\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000') == '3'\n",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n') == '4'\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n') == '3'\n\n-----Test Description-----\nYou will be given two input arrays of integers. Your goal is to solve the given problem.\n\nOutput Format:\nOutput a single integer denoting the maximum number of tasks that can be completed during the first week.\n\nSample Test:\nSample Input:\n5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000\nSample Output:\n4\nExplanation:\nHere is a visual representation of the intervals that Zac will be working on in this week:\n\n150000    <-- a task\n100000    <-- a task\n160000    <-- a task\n100000    <-- a task\n180000    <-- a task\n190000    <-- a quiet interval\n170000    <-- a quiet interval\n140000    <-- a quiet interval\n160000    <-- a quiet interval\nSample Input 2:\n4 4\n180000 185000 199999 100000\n199999 180000 170000 120000\nSample Output 2:\n3\nExplanation:\nHere is a visual representation of the intervals that Zac will be working on in this week:\n\n180000    <-- a task\n185000    <-- a task\n199999    <-- a quiet interval\n100000    <-- a quiet interval\n199999    <-- a quiet interval\n170000    <-- a quiet interval\n120000    <-- a quiet interval\nSample Input 3:\n3 4\n130000 131500 140000\n121500 141000 151000\nSample Output 3:\n2\nExplanation:\nHere is a visual representation of the intervals that Zac will be working on in this week:\n\n130000    <-- a task\n131500    <-- a task\n140000    <-- a quiet interval\n141000    <-- a quiet interval\n151000    <-- a quiet interval\n'''\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == \"4\"\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n\") == \"3\"\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000') == '3'\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000') == 4\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000') == '4'\n\nprint(solution(stdin))",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == '4'\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\") == \"3\"\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\\n') == '1'\nassert solution('0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n') == '0'\nassert solution('39\\n40\\n41\\n0\\n1\\n2\\n40\\n41\\n0\\n1\\n') == '6'\n\n\"\"\"\n\nimport sys\nimport collections",
        "num_ids_2": 78,
        "num_ids_4": 156
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\\n') == '1'",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('0\\n42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\n\"\"\"\n",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\nassert solution(\"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\") == \"0\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n12\\n14\\n15\\n16\\n18\\n20\\n21\\n22\\n24\\n25\\n26\\n27\\n28\\n30\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\") == \"0\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n",
        "num_ids_2": 74,
        "num_ids_4": 391
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\n\"\"\"\n",
        "num_ids_2": 74,
        "num_ids_4": 148
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\\n') == '1'\n\"\"\"",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\n",
        "num_ids_2": 74,
        "num_ids_4": 148
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == '10'\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == '0'\nassert solution(\"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\") == '1'\nassert solution(\"1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\") == '1'\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == '6'\n",
        "num_ids_2": 74,
        "num_ids_4": 148
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\n\nprint(solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10'))\nprint(solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126'))",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == '10'\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == '1'\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"13 4\") == \"no\"\nassert solution(\"13 5\") == \"no\"\nassert solution(\"13 6\") == \"no\"\n\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'yes'\nassert solution('5 2') == 'no'\nassert solution('4 2') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('2 0') == 'yes'\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 0\") == \"yes\"\nassert solution(\"13 3\") == \"yes\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('2 3') == 'no'\nassert solution('5 1') == 'yes'\nassert solution('10 10') == 'yes'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"10 10\") == \"no\"\nassert solution(\"100 100\") == \"yes\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"13 3\") == \"yes\"\nassert solution(\"5 3\") == \"no\"\nassert solution(\"2 4\") == \"no\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('2 2') == 'no'\nassert solution('10 10') == 'yes'\n\nassert solution('13 4') == 'no'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"1 1\") == \"no\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\n\nprint(solution(input()))\n\n-----\n\nP01K02H03H04\n12 12 11 13\n\nH02H10P11H02\nGRESKA\n\n\"\"\"\n\ncards = input()\nsuits = ['P', 'K', 'H', 'T']\ncards_count = [0, 0, 0, 0]\n\nfor card in cards:\n    if card[0] in suits:\n        cards_count[suits.index(card[0])] += 1\n    elif len(card) == 1:\n        cards_count[0] += 1\n    else:\n        cards_count[len(card) - 2] += 1",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(P01K02H03H04) == '12 12 11 13'\nassert solution(H02H10P11H02) == 'GRESKA'\n\"\"\"\nfrom collections import Counter\nfrom typing import List\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\nprint(solution(\"P01K02H03H04\"))\nprint(solution(\"H02H10P11H02\"))\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\nassert solution('P02P10P11P02P02P02') == '0 0 0 0'\n\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 39,
        "num_ids_4": 63
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\n\"\"\"\n\nimport collections\nfrom typing import Counter",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\n\"\"\"\n\nimport sys\n\ncards = sys.stdin.readline()\n\nsuits = {'P': 0, 'K': 0, 'H': 0, 'T': 0}\n\nfor card in cards:\n    if card == 'P':\n        suits['P'] += 1\n    elif card == 'K':\n        suits['K'] += 1\n    elif card == 'H':\n        suits['H'] += 1\n    elif card == 'T':\n        suits['T'] += 1\n\nprint(suits['P'], suits['K'], suits['H'], suits['T'])\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 3\", \".....\", \".*.*.\", \".....\") == \"1\"\nassert solution(\"7 6 4\", \"......\", \".*.*.*\", \"......\", \".*.*..\", \"..*...\", \"..*...\", \"*....*\") == \"2\"\n",
        "num_ids_2": 65,
        "num_ids_4": 65
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 5 3\n.....\n.*.*.\n.....\n''') == '1'\nassert solution('''7 6 4\n......\n.*.*.*\n......\n.*.*..\n..*...\n..*...\n*....*\n''') == '2'\n\n'''\nimport math",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5 3') == '1'\nassert solution('7 6 4') == '2'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\\n\") == \"1\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n\") == \"2\"\nprint(\"Test PASSED\")\n",
        "num_ids_2": 70,
        "num_ids_4": 70
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....') == '1'\n\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*') == '2'\n\nprint(\"The code ran Correctly\")\n\n'''",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 3\") == \"1\"\nassert solution(\"7 6 4\") == \"2\"\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\") == \"1\"\n\nprint(solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\"))\n\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\") == \"2\"\n\nprint(solution(\"5 5 1\\n..*..\\n.*.*.\\n.*.*.\\n.*.*.\\n..*..\"))\n\nassert solution(\"5 5 1\\n..*..\\n.*.*.\\n.*.*.\\n.*.*.\\n..*..\") == \"5\"\n\nprint(solution(\"10 10 1\\n..*..*..*..\\n*.*.*.*.*.*\\n*.*.*.*.*.*\\n*.*.*.*.*.*\\n*.*.*.*.*.*\\n*.*.*.*.*.*\\n*.*.*.*.*.*\\n*.*.*.*.*.*\\n*.*.*.*.*.*\\n..*..*..*..\"))\n\nassert solution(\"10 10 1\\n..*..*..*..\\n*.*.*.*.*.*\\n*.*.*.*.*.*\\n*.*.*.*.*.*\\n*.*.*.*.*.*\\n*.*.*.*.*.*\\n*.*.*.*.*.*\\n*.*.*.*.*.*\\n..*..*..*..\") == \"10\"\n\nprint(solution(\"5 4 1\\n..*..\\n.*.*.\\n.*.*.\\n*.*.\\n..*..\"))\n\nassert solution(\"5 4 1\\n..*..\\n.*.*.\\n.*.*.\\n*.*.\\n..*..\") == \"4\"\n\nprint(solution(\"5 5 1\\n..*..\\n.*.*.\\n*.*.*\\n*.*.*\\n..*..\"))",
        "num_ids_2": 66,
        "num_ids_4": 189
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....') == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*') == '2'\n\"\"\"",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 5 3\n.....\n.*.*.\n.....''') == '1'\nassert solution('''7 6 4\n......\n.*.*.*\n......\n.*.*..\n..*...\n..*...\n*....*''') == '2'\nassert solution('''3 5 3\n.....\n.*.*.\n.....''') == '1'\nassert solution('''7 6 4\n......\n.*.*.*\n......\n.*.*..\n..*...\n..*...\n*....*''') == '2'\nassert solution('''3 5 3\n.....\n.*.*.\n.....''') == '1'\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....') == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*') == '2'\n\n\"\"\"\n\nimport sys\n\nm = [list(map(str, input().split())) for _ in range(3)]\n\nmax_flies = 0\nn = int(sys.stdin.readline())\n\nfor i in range(n):\n    x, y = list(map(int, sys.stdin.readline().split()))\n    for row in m:\n        if x <= len(row) and y <= len(row):\n            for i in range(y-1, y+2):\n                if row[x-1] == '*':\n                    row[x-1] = '.'\n                    if max_flies < 1:\n                        max_flies = 1\n                    break\n                else:\n                    row[x-1] = '*'\n\nfor row in m:\n    print(\"\".join(row))\nprint(max_flies)\n",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\n\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2C 4D 4H 2D 2H\") == 3\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\n\"\"\"\n\nfrom collections import Counter\nfrom operator import itemgetter",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\n\"\"\"\n\nimport sys\n\nSTDIN_SIO = sys.stdin\nassert len(sys.argv) == 1\n",
        "num_ids_2": 33,
        "num_ids_4": 44
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('2H 2D 2S 2C') == '2'\nassert solution('3H 3C 3D 3S') == '3'\nassert solution('4H 4C 4D 4S') == '4'\nassert solution('AH AS KS AC') == '1'\n",
        "num_ids_2": 25,
        "num_ids_4": 59
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('AC AD AH AS KD') == 4\nassert solution('2C 4D 4H 2D 2H') == 3\nassert solution('KH AS KC JC 7D 8D') == 7\nassert solution('QH AS JS QC KS 9H') == 10\nassert solution('JH KH JS JD JC TH') == 4\n",
        "num_ids_2": 29,
        "num_ids_4": 60
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('AC AD AH AS KD') == 4\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1\\n0 0 0 0 0\") == 7\n\"\"\"\nfrom itertools import product\nfrom itertools import combinations",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\nprint(solution(stdin))\n\n-----\n\nclass Column:\n    def __init__(self, column_height):\n        self.column_height = column_height\n    \nclass Drop:\n    def __init__(self, column, piece):\n        self.column = column\n        self.piece = piece\n    \nclass Piece:\n    def __init__(self, piece_name, piece_rotation, piece_id):\n        self.piece_name = piece_name\n        self.piece_rotation = piece_rotation\n        self.piece_id = piece_id\n\nclass Field:\n    def __init__(self):\n        self.field = []\n        self.column_height = []\n    \n    def init_field(self, column_height):\n        self.column_height = column_height\n        \n        for i in range(len(column_height)):\n            self.field.append([0] * len(column_height))\n        \n        \n        \n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5\\n2 1 1 1 0 1\") == \"5\"\n\"\"\"\n\nfrom math import factorial",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n0 1 0\") == \"4\"\n\"\"\"\n\n\"\"\"\nSee Also:\n    - https://www.martinkysel.com/codility/lesson8-Tetris/\n    - https://codility.com/media/train/solution-to-Tetris.pdf\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n2 1 1 1 0 1\") == \"5\"\n\nassert solution(\"10 10\\n
        "num_ids_2": 1581,
        "num_ids_4": 1581
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1\\n0 0 0 0 0\") == \"7\"\nassert solution(\"6 4\\n0 0 0 0 1\") == \"2\"\nassert solution(\"6 1\\n0 0 0 1\") == \"3\"\nassert solution(\"6 6\\n0 1 1 1 1\") == \"0\"\nassert solution(\"6 3\\n1 1 1 1\") == \"1\"\n",
        "num_ids_2": 36,
        "num_ids_4": 71
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 5\\n2 1 1 1 0 1\") == \"5\"\nprint(solution(\"6 5\\n2 1 1 1 0 1\"))\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n0 0 1 1\") == 3\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('a\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\n') == ''\nassert solution('a\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\",
        "num_ids_2": 34,
        "num_ids_4": 1582
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1\\n0 0 0 0 0\") == \"7\"\n\nassert solution(\"6 5\\n2 1 1 1 0 1\") == \"5\"\n\nassert solution(\"6 5\\n1 1 1 1 0 1\") == \"0\"\n\nassert solution(\"6 5\\n2 1 1 1 1 1\") == \"0\"\n\nassert solution(\"6 5\\n2 1 1 1 1 0\") == \"7\"",
        "num_ids_2": 37,
        "num_ids_4": 75
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('All your base are belong to us.\\n') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 \\'][\\'0 |_|$.\\n'\nassert solution('What\\'s the Frequency, Kenneth?\\n') == '\\/\\/[-]@\\'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3\\']['[-]?\n\n------Notes------\nIt's a one-to-many translation (one character of the English alphabet translates to anywhere between $1$ and $6$ other characters), with each character translation as follows:\n\nOriginal\n\nNew\n\nEnglish Description\n\na\n\n@\n\nat symbol\n\nn\n\n[]\\[]\n\nbrackets, backslash, brackets\n\nb\n\n8\n\ndigit eight\n\no\n\n0\n\ndigit zero\n\nc\n\n(\n\nopen parenthesis\n\np\n\n|D\n\nbar, capital D\n\nd\n\n|)\n\nbar, close parenthesis\n\nq\n\n(,)\n\nparenthesis, comma, parenthesis\n\ne\n\n3\n\ndigit three\n\nr\n\n|Z\n\nbar, capital Z\n\nf",
        "num_ids_2": 121,
        "num_ids_4": 121
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n",
        "num_ids_2": 117,
        "num_ids_4": 117
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('All your base are belong to us') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n'`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@@^\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\n",
        "num_ids_2": 83,
        "num_ids_4": 83
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/.|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|_|0|",
        "num_ids_2": 1244,
        "num_ids_4": 1244
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"hello world\") == \"[-]3110 \\/\\/0|Z1|)!\\n\"\nassert solution(\"!@#!?$%^&*()_+\") == \"!@#!?$%^&*()_+\\n\"\nassert solution(\"Here is \\t a tab \\t and \\n 4 spaces.\") == \"[-]3110 \\/\\/0|Z1|)\\n\"\nassert solution(\"!#$%^&*()_+\") == \"!#$%^&*()_+\\n\"\n\"\"\"\n\nfrom string import digits, ascii_lowercase, ascii_uppercase\nimport re",
        "num_ids_2": 57,
        "num_ids_4": 120
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"All your base are belong to us\") == \\\n    \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \\\n    \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"All your base are belong to us.\\n\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\\n\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n",
        "num_ids_2": 122,
        "num_ids_4": 122
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 \\'][\\'0 |_|$.\\n'\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@\\'][\\'$ \\'][\\'[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3\\'][\\'[-]?\\n'\n\n\"\"\"\n",
        "num_ids_2": 120,
        "num_ids_4": 120
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n\"\"\"\n\nimport string",
        "num_ids_2": 117,
        "num_ids_4": 117
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\nassert solution(\"7\") == \"Bob\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\nassert solution(\"10\") == \"Bob\"\nassert solution(\"10000000\") == \"Alice\"\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\nassert solution(\"3\") == \"Alice\"\nassert solution(\"4\") == \"Bob\"\nassert solution(\"5\") == \"Alice\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n') == 'Alice'\nassert solution('2\\n') == 'Bob'\nassert solution('5\\n') == 'Bob'\nassert solution('100\\n') == 'Bob'\nassert solution('10000\\n') == 'Bob'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 'Bob'\nassert solution('1') == 'Alice'\nassert solution('3') == 'Alice'\n\nSample Input 2:\n5\nSample Output 2:\nBob\nassert solution('5') == 'Bob'\nassert solution('4') == 'Alice'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == 'Alice'\nassert solution(4) == 'Bob'\nassert solution(5) == 'Alice'\nassert solution(1) == 'Bob'\nassert solution(2) == 'Alice'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\nassert solution(\"3\") == \"Alice\"\nassert solution(\"4\") == \"Bob\"\n\nprint(\"All tests passed.\")",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\nassert solution('3') == 'Alice'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"this sentence has thirtyone letters\") == \"this sentence has $ letters\"\nassert solution(\"this sentence has thirtyone letters $\") == \"this sentence has $ letters\"\nassert solution(\"this sentence has thirtyone letters $ and $ letters $\") == \"this sentence has $ and $ letters $\"\nassert solution(\"thirtyone letters is the number of letters here\") == \"thirtyone letters is the number of letters here\"\nassert solution(\"thirty is the number of letters here\") == \"thirty is the number of letters here\"\n",
        "num_ids_2": 39,
        "num_ids_4": 94
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('Thir$ten eleven$teen two. ') == 'ten eleven twenty two.'\nassert solution('Thir$ten eleven$teen two. ') == 'ten eleven twenty two.'\nassert solution('$ten one$ twelve two. ') == 'twenty twelve.'\nassert solution('$thirty one$ four. ') == 'thirty one four.'\nassert solution('Thir$ten eleven$teen two. ') == 'ten eleven twenty two.'\n",
        "num_ids_2": 44,
        "num_ids_4": 83
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"this sentence has $ letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"thirtyone is the number of letters here\") == \"thirty is the number of letters here\"\n\nprint(solution(\"this sentence has $ letters\"))\nprint(solution(\"thirtyone is the number of letters here\"))\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"threehundrednineteen\") == \"threehundrednineteen\"\nassert solution(\"twohundrednineteen\") == \"twohundrednineteen\"\nassert solution(\"fiftytwo\") == \"fiftytwo\"\nassert solution(\"onehundredninety\") == \"onehundredninety\"\nassert solution(\"thirtyfive\") == \"thirtyfive\"\n",
        "num_ids_2": 36,
        "num_ids_4": 68
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2\\n1\") == \"two\\none\\ntwo\\n\"\n\"\"\"\n\nn = int(input())\nsentence = \"\"\n\nfor _ in range(n):\n    sentence += input()\n\nsentence = sentence.split()\nsentence = ''.join(sentence)\n\nanswer = sentence.replace(\"$\", \"\")\n\nanswer = ''.join(char for char in answer if char.isalpha())\n\nprint(answer)",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\nthis\\nsentence\\nhas\\n$\\nletters\") == \"this sentence has thirtyone letters\"\nassert solution(\"7\\n$\\nis\\nthe\\nnumber\\nof\\nletters\\nhere\") == \"thirty is the number of letters here\"\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n' '1\\n' 'two\\n') == 'three one two'\nassert solution('4\\n' 'twenty\\n' 'three\\n' 'hundred\\n') == 'fourty twenty three hundred'\nassert solution('1\\n' 'twenty\\n') == 'twenty'\nassert solution('2\\n' 'one\\n' 'one\\n') == 'one one'\nassert solution('2\\n' 'one\\n' 'eleven\\n') == 'one eleven'\n",
        "num_ids_2": 57,
        "num_ids_4": 99
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\nthis\\nsentence\\nhas\\n$\\nletters\") == \"this sentence has $ letters\"\nassert solution(\"7\\n$\\nis\\nthe\\nnumber\\nof\\nletters\") == \"thirty is the number of letters here\"\n\"\"\"",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\nthis\\nsentence\\nhas\\n$\\nletters\") == \"this sentence has $ letters\"\nassert solution(\"7\\n$\\nis\\nthe\\nnumber\\nof\\nletters\\nhere\") == \"thirty is the number of letters here\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 67,
        "num_ids_4": 67
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"this sentence has thirtyone letters\") == \"this sentence has $ letters\"\nassert solution(\"this sentence has thirtyone letters2\") == \"this sentence has $ letters2\"\nassert solution(\"this sentence has thirtyone letters3\") == \"this sentence has $ letters3\"\nassert solution(\"this sentence has thirtyone letters4\") == \"this sentence has $ letters4\"",
        "num_ids_2": 40,
        "num_ids_4": 82
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Abcd\") == 0\nassert solution(\"EaEbFabG\") == 5\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Abcd\") == 0\nassert solution(\"EaEbFabG\") == 5\n\nprint(solution(\"Abcd\"))\nprint(solution(\"EaEbFabG\"))\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('Abcd') == '0'\nassert solution('EaEbFabG') == '5'\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Abcd\") == 0\nassert solution(\"EaEbFabG\") == 5\n\"\"\"\n\nfrom itertools import chain",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\nassert solution(\"AbcdABCd\") == \"0\"\nassert solution(\"EaEbFabGBCd\") == \"10\"\nassert solution(\"AbcdABCd\") == \"0\"\n",
        "num_ids_2": 26,
        "num_ids_4": 56
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\"\"\"\n\nimport sys\nimport math\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\n\n\"\"\"\n\nimport re",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"Even 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"0 0\") == \"Not a moose\"\nassert solution(\"3 3\") == \"Odd 6\"\nassert solution(\"4 4\") == \"Even 8\"\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 51
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"0 3\") == \"Even 6\"\nassert solution(\"1 1\") == \"Not a moose\"\nassert solution(\"1 0\") == \"Odd 1\"\n",
        "num_ids_2": 25,
        "num_ids_4": 51
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"2 1\") == \"Not a moose\"\nassert solution(\"2 2\") == \"Even 2\"\nassert solution(\"1 1\") == \"Even 2\"\n",
        "num_ids_2": 25,
        "num_ids_4": 51
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"Even 6\"\nassert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"0 0\") == \"Not a moose\"\n\"\"\"\n\nfrom collections import namedtuple\n\n\nclass Point:\n    def __init__(self, count):\n        self.count = count\n\n    def __add__(self, other):\n        return self.count + other.count\n\n    def __sub__(self, other):\n        return self.count - other.count\n\n    def __mul__(self, other):\n        return self.count * other.count\n\n    def __floordiv__(self, other):\n        return self.count // other.count\n\n    def __truediv__(self, other):\n        return self.count / other.count\n\n    def __ge__(self, other):\n        return self.count >= other.count\n\n    def __lt__(self, other):\n        return self.count < other.count\n\n    def __le__(self, other):\n        return self.count <= other.count\n\n    def __gt__(self, other):\n        return self.count > other.count\n\n    def __neg__(self, other):\n        return -self.count\n\n    def __eq__(self, other):\n        return self.count == other.count\n\n    def __str__(self):\n        return str(self.count)\n\n    def __repr__(self):\n        return str(self.count)\n\n\nPoints = namedtuple(\"Points\", [\"left\", \"right\"])\n",
        "num_ids_2": 25,
        "num_ids_4": 39
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"Even 6\"\nassert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"2 2\") == \"Not a moose\"\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 39
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('tomo') == 1\n\nassert solution('mono') == 1\n\nassert solution('dak') == 2\n\nassert solution('6666') == 2\n\nassert solution('ja') == 2",
        "num_ids_2": 18,
        "num_ids_4": 35
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"def\") == \"def\"\nassert solution(\"tomo\") == \"tomo\"\nassert solution(\"mono\") == \"mono\"\nassert solution(\"dak\") == \"dak\"\nassert solution(\"6666\") == \"6666\"\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"tomo\"\nassert solution(\"2\") == \"ja\"\nassert solution(\"2\") == \"la\"\nassert solution(\"52\") == \"def\"\nprint('The local tests are done. Try Solution II now.')\n\n-----Solution-----\n\"\"\"\nimport collections\nimport re",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"a\"\nassert solution(\"3\") == \"b\"\nassert solution(\"4\") == \"c\"\n",
        "num_ids_2": 17,
        "num_ids_4": 37
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"tomo\") == 1\nassert solution(\"mono\") == 1\nassert solution(\"dak\") == 2\nassert solution(\"6666\") == 2\n\nprint(solution(\"tomo\"))\nprint(solution(\"mono\"))\nprint(solution(\"dak\"))\nprint(solution(\"6666\"))\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 35
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123\") == '3'\nassert solution(\"123456789\") == '1'\nassert solution(\"222222222\") == '1'\nassert solution(\"2222222222222222\") == '1'\nassert solution
        "num_ids_2": 23,
        "num_ids_4": 53
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('tomo') == 1\nassert solution('mono') == 1\nassert solution('dak') == 1\nassert solution('6666') == 2\nassert solution('ja') == 2\n",
        "num_ids_2": 18,
        "num_ids_4": 35
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"13\") == \"a\"\nassert solution(\"12\") == \"b\"\nassert solution(\"11\") == \"c\"\nassert solution(\"10\") == \"d\"\nassert solution(\"9\") == \"e\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1345\") == \"hacker\"\nassert solution(\"23\") == \"code\"\n\nassert solution(\"1236\") == \"equal\"\nassert solution(\"2345\") == \"twelve\"\n\nassert solution(\"1236\") == \"equal\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\ntomo\\nmono\\ndak\\n6666') == '1'\nassert solution('2\\nja\\nla\\n52') == '2'\nassert solution('1\\nbez') == '0'\nassert solution('2\\nbez') == '1'\n\"\"\"\n\nN = int(input())",
        "num_ids_2": 42,
        "num_ids_4": 70
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..'",
        "num_ids_2": 41,
        "num_ids_4": 97
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A\") == \".#.#.\\n#.#.\\n.#.\\n.#.\\n#.#.\"\nassert solution(\"DOG\") == \".#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\n\"\"\"\n\nimport sys\nfrom typing import List\nfrom itertools import zip_longest\n",
        "num_ids_2": 84,
        "num_ids_4": 84
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\\n\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\\n\"\n",
        "num_ids_2": 93,
        "num_ids_4": 93
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\nassert solution(\"Z\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.Z.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\n\n\"\"\"",
        "num_ids_2": 89,
        "num_ids_4": 144
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('A') == '..#..\\n.###.\\n#.A.\\n.###.\\n..#..\\n'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\\n'\n",
        "num_ids_2": 93,
        "num_ids_4": 93
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\nassert solution(\"DOTTED\") == \"..#....#.##*..\\n.###....#*..\\n#.D.O.##.T.*.\\n.#.###.##.*\\n..#....#.##*..\"\nassert solution(\"ABC\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\n\n\"\"\"",
        "num_ids_2": 89,
        "num_ids_4": 180
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A\") == \"..#..\\n.##.\\n#.A.\\n.##.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.###.#.#.*.\\n#.D.#.O.*.G.*\\n.###.#.#.*.\\n..#...#...*..\"\n\n\"\"\"\n\nimport string\n",
        "num_ids_2": 87,
        "num_ids_4": 87
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..'",
        "num_ids_2": 89,
        "num_ids_4": 89
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\nassert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\n\"\"\"",
        "num_ids_2": 89,
        "num_ids_4": 89
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A\") == \"...#...\\n#.#.#.#\\n.#.A.#\\n.#.#.#\\n...#...\\n\"\nassert solution(\"DOG\") == \"...#...#...*..\\n#.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n#.#.#.#.#.*.*.\\n...#...#...*..\\n\"\n\"\"\"\n\nimport string",
        "num_ids_2": 94,
        "num_ids_4": 94
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == 3.141593\nassert solution(\"2\") == 2.0\nassert solution(\"21\") == 1385.442360\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 35
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"3.14159\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == 3.141593\nassert solution(\"21\") == 1385.442360\n\n\"\"\"\n\nfrom math import pi\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '3.141593'\nassert solution('2') == '2.000000'\nassert solution('3') == '6.283185'\nassert solution('1000') == '4889.046230'\n\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '3.141593'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"27.40318\"\nassert solution(\"25\") == \"975.93777\"\n\"\"\"\n\nimport math\n\nR = int(input())\n\narea = math.pi * R ** 2\n\ntaxi = math.pi * R ** 2\n\nprint(area)\nprint(taxi)\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\n\"\"\"\n\nr = int(input())",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\n\nassert solution(\"5\\n129 44 394 253 147\") == \"0\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n1 1') == ''\nassert solution('-1 -2 3\\n1 1') == '2'\nassert solution('-1 -2 -3\\n1 1') == '0'\nassert solution('-1 -2 -3\\n1 1') == '0'\n",
        "num_ids_2": 21,
        "num_ids_4": 58
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 -2 3\\n') == '2'\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 -2 3\\n') == '2'\nassert solution('3\\n129 44 394 253 147\\n') == '0'\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 -2 3\\n') == '2'\n\"\"\"\nimport os",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n-2 3\\n') == '2'\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n-2 3') == 2\nassert solution('5\\n129 44 394 253 147') == 0\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 -2 3\\n') == '2'\nassert solution('5\\n129 44 394 253 147\\n') == '0'\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n-2 3 -5 1 -4\") == \"0\"\nassert solution(\"4\\n1 2 3 4\") == \"0\"\nassert solution(\"3\\n1 -2 3\") == \"2\"\n\"\"\"\nimport numpy\n\nfrom typing import List, Union\n\nn = int(input())\nnumbers = list(map(int, input().split()))\n\nresult = numpy.sum(numbers)\nprint(result)\n",
        "num_ids_2": 36,
        "num_ids_4": 52
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 -2 3') == '2'\nassert solution('5\\n129 44 394 253 147') == '0'\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 2 2') == '6'\nassert solution('3\\n4 1 2') == '8'\nassert solution('1\\n1 1 1') == '0'\nassert solution('2\\n3 2 2') == '6'\nassert solution('4\\n1 1 1 1') == '0'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\nassert solution(\"3\\n4 1 2\") == \"8\"\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\nassert solution(\"4\\n1 2 3\") == \"8\"\n\"\"\"\n\nN = int(input())\narr = list(map(int, input().split()))\n\narr.sort()\n\nprint(sum(arr[1::2]))",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '0'\nassert solution('1 2') == '1'\nassert solution('1 2 2') == '3'\nassert solution('1 1 1') == '3'\nassert solution('1 2 3') == '6'\n",
        "num_ids_2": 21,
        "num_ids_4": 45
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 2 2') == '6'\nassert solution('3\\n4 1 2') == '8'\n\n------Solution------\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\nassert solution(\"4\\n1 2 3\") == \"8\"\n\n\"\"\"\n\nn = int(input())\nlst = list(map(int, input().split()))\nprint(sum(lst))",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\nassert solution(\"3\\n4 1 2\") == \"8\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 2\") == \"5\"\nassert solution(\"3\\n1 3 2\") == \"6\"\n\n-----Test Format-----\nYou can find below a sample of input and output for the test format. Note that in the real test the number of test cases will be quite large.\n\nSample Input 1:\n2\n2 2 2\nSample Output 1:\n4\n\nSample Input 2:\n2\n1 3 2\nSample Output 2:\n5\n\"\"\"\n\nimport collections\n\nN = int(input())\nL = list(map(int, input().split()))\nL = sorted(L)\nresult = 0",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n2 2 2') == '6'\nassert solution('3\\n4 1 2') == '8'\n\nprint(solution(input()))\n\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\nassert solution('2 4 4\\n1111\\n1S01\\n1011\\n0L11') == 'NOT POSSIBLE'\n\"\"\"\n\n\"\"\"\n------SOLUTION------\n\"\"\"",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\\n\") == \"2\"\nprint(\"Test 1 Passed\")\n\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\\n\") == \"NOT POSSIBLE\"\nprint(\"Test 2 Passed\")\n\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0D11\\n\") == \"NOT POSSIBLE\"\nprint(\"Test 3 Passed\")\n\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0R11\\n\") == \"NOT POSSIBLE\"\nprint(\"Test 4 Passed\")\n",
        "num_ids_2": 65,
        "num_ids_4": 133
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"NOT POSSIBLE\"\n",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\n\n-----Tests-----\nExample 1:\n\nInput\nt = 2\nN = 4\nM = 4\ngrid =\n1111\n1S01\n1011\n0U11\nOutput\n2\nExplanation\nThe time at which titans will rush in is 2. There are two zones that Eren must traverse to escape. The first one is from (0, 0) to (0, 3), and the second is from (1, 1) to (3, 1). The minimum number of zones that must be traversed to escape is 2.\n\nSample Input 2:\n2 4 4\n1111\n1S01\n1011\n0L11\nOutput\nNOT POSSIBLE\nExplanation\nEren cannot escape from the center of Wall Maria.\n\n\"\"\"\n\nimport math\nimport itertools",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\\n\") == 2\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\\n\") == \"NOT POSSIBLE\"\n",
        "num_ids_2": 63,
        "num_ids_4": 63
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\")!= \"NOT POSSIBLE\"\n\n\"\"\"\n",
        "num_ids_2": 62,
        "num_ids_4": 62
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\n\"\"\"\n\nt, N, M = map(int, input().split())\ngrid = [list(map(str, input())) for i in range(N)]\n\nx, y = 0, 0\nfor i in range(N):\n    for j in range(M):\n        if grid[i][j] == \"S\":\n            x, y = i, j\n            break\n\ncount = 0\nwhile True:\n    if grid[x][y] == \"1\":\n        grid[x][y] = \"U\"\n    else:\n        grid[x][y] = \"U\"\n        break\n    if grid[x][y] == \"U\":\n        if y > 0:\n            grid[x][y] = \"L\"\n            y -= 1\n        elif x > 0:\n            grid[x][y] = \"U\"\n            x -= 1\n        else:\n            break\n        count += 1\n        if count > t:\n            print(\"NOT POSSIBLE\")\n            break\n\nprint(count)\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == '2'\n\"\"\"\nimport sys\nimport math\n\nt, n, m = map(int, sys.stdin.readline().split())\n\ngrid = [[char for char in sys.stdin.readline() if char!= '\\n']]\ngrid += [[char for char in sys.stdin.readline() if char!= '\\n']]\ngrid += [[char for char in sys.stdin.readline() if char!= '\\n']]\n\nsafe_zone = 0",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == \"4\"\nassert solution(\"7 5\\n1 5 4 3 2 1 1\") == \"3\"\n\"\"\"\nimport collections\nimport sys\nimport math",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == \"4\"\nassert solution(\"7 5\\n1 5 4 3 2 1 1\") == \"3\"\n\"\"\"\n\nfrom collections import Counter\n\nn, c = [int(x) for x in input().split(' ')]\narr = [int(x) for x in input().split(' ')]\n\ncounter = Counter(arr)\n\nresult = 0\n\nfor key, value in counter.items():\n    result += 1\n    if value > 1:\n        if value - 1 <= c:\n            c -= value - 1\n        else:\n            result += value - 1\n            c = 0\n            break\nprint(result)\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\n\"\"\"\nfrom collections import Counter\n\nstdin = open('./input.txt')\nn, c = [int(i) for i in stdin.readline().split()]\n\nfruits = Counter(int(i) for i in stdin.readline().split())\n\nres, i = 0, 1\n\nfor v in sorted(fruits.values(), reverse=True):\n    if i > c:\n        break\n    res += v\n    i += v\n\nprint(res)\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(output())\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == '4'\nassert solution(\"7 5\\n1 5 4 3 2 1 1\") == '3'\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == \"4\"\nassert solution(\"7 5\\n1 5 4 3 2 1 1\") == \"3\"\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2 1 1\") == \"4\"\nassert solution(\"5 5\") == \"4\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\n\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\n\n\"\"\"\n\n\nimport sys\nimport math",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 5\n3 1 2 1 1\n''') == 4\n\nassert solution('''7 5\n1 5 4 3 2 1 1\n''') == 3\n\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\"\n\nprint(\"All tests passed.\")\n",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n2\\nPPRRS\\nRRSSP\") == \"5\\n10\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"5\\n\"\n    \"SSPPR\\n\"\n    \"1\\n\"\n    \"SSPPR\\n\"\n) == \"5\\n\"\nassert solution(\n    \"5\\n\"\n    \"SSPPR\\n\"\n    \"2\\n\"\n    \"PPRRS\\n\"\n    \"RRSSP\\n\"\n) == \"10\\n\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\nSSPPR\\n1\\nSSPPR') == '5\\n10'\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\nSSPPR\\n1\\nSSPPR') == '5\\n10'\nassert solution('5\\nSSPPR\\n2\\nPPRRS\\nRRSSP') == '10\\n15'\n\"\"\"",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\"\n\n\"\"\"\n",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"SSPPR\") == \"5\"\nassert solution(\"SSPPR\") == \"10\"\nassert solution(\"SSPPR\") == \"5\"\nassert solution(\"SSPPR\") == \"10\"\n\"\"\"\nimport re\nfrom typing import List\n\npattern = r\"(P|S|R)(P|S|R)*\"\n\nassert re.fullmatch(pattern, \"PP\")\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"SSPPR\\n1\\nSSPPR\") == \"5\\n10\"\nassert solution(\"SSPPR\\n2\\nPPRRS\\nRRSSP\") == \"10\\n15\"\n\"\"\"",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\nSSPPR\\n1\\nSSPPR\\n') == '5\\n10'\n\nassert solution('5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n') == '10\\n15'\n\nassert solution('5\\nSSPPR\\n3\\nPPRRS\\nRRSSP\\n') == '15\\n20'\n\nprint('The code ran Correctly')\n\n-----Solution-----\n\nn = int(input())\na = input()\nb = input()\nc = input()\nd = input()\ne = input()\ncountS = 0\ncountP = 0\ncountR = 0\n\nfor i in range(n):\n    if a[i] == b[i] and a[i] == c[i] and a[i] == d[i]:\n        countS = countS + 0\n        countP = countP + 0\n        countR = countR + 0\n    elif a[i] == b[i] and a[i] == c[i]:\n        countS = countS + 0\n        countP = countP + 0\n        countR = countR + 2\n    elif a[i] == b[i] and a[i] == d[i]:\n        countS = countS + 0\n        countP = countP + 0\n        countR = countR + 2\n    elif a[i] == c[i] and a[i] == d[i]:\n        countS = countS + 0\n        countP = countP + 0\n        countR = countR + 2\n    elif a[i] == b[i]:\n        countS = countS + 0\n        countP = countP + 0\n        countR = countR + 1\n    elif a[i] == c[i]:\n        countS = countS + 0\n        countP = countP + 0\n        countR = countR + 1\n    elif a[i] == d[i]:\n        countS = countS + 0\n        countP = countP + 0\n        countR = countR + 1\n    elif b[i] == c[i]:\n        countS = countS + 0\n        countP = countP + 0\n        countR = countR + 1\n    elif b[i] == d[i]:\n        countS = countS + 0\n        countP = countP + 0\n        countR = countR + 1\n    elif c[i] == d[i]:\n        countS = countS + 0\n        countP = countP + 0\n        countR = countR + 1\n    else:\n        countS = countS + 0\n        countP = countP + 1\n        countR = countR + 0\nprint(countS)\nprint(countP)\nprint(countR)",
        "num_ids_2": 61,
        "num_ids_4": 94
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\nSSPPR\\n1\\nSSPPR\\n') == '5\\n10'\nassert solution('5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n') == '10\\n15'\n\"\"\"\n\nimport sys\nimport itertools",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n7\\n11\\n') == '4'\nassert solution('5\\n2\\n5\\n9\\n10\\n17\\n') =='still running'\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2) =='still running'\nassert solution(5) =='still running'\nassert solution(2) == '4'\nassert solution(5) =='still running'\nassert solution(2) == '4'\n",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n7\\n11\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"still running\"\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n11\\n') == '4'\nassert solution('5\\n2\\n5\\n9\\n10\\n17\\n') =='still running'\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"still running\"\nassert solution(\"2\\n7\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"4\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"1\\n1\\n1\") == \"2\"\n",
        "num_ids_2": 39,
        "num_ids_4": 77
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n11\\n\") == \"4\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n7\\n11\\n') == '4\\n'\nassert solution('5\\n2\\n5\\n9\\n10\\n17\\n') =='still running'\n\"\"\"\n\n\"\"\"\nfrom typing import List, Union\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n7\\n11\\n\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\") == \"still running\"\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n11\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\") == \"still running\"\nassert solution(\"1\\n7\\n11\") == \"4\"\nassert solution(\"1\\n7\\n11\\n11\\n11\") == \"still running\"\nassert solution(\"1\\n7\\n11\\n11\\n11\\n11\\n11\\n11\\n11\") == \"still running\"\n",
        "num_ids_2": 36,
        "num_ids_4": 75
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n7\\n11\\n\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\") == \"still running\"\n\n\"\"\"\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 1 3 2 2 3\\n2 2\") == \"0.6\"\nassert solution(\"2 2\\n2 2\") == \"impossible\"\n\n\"\"\"\n\nimport sys\nimport math\n\nn = int(sys.stdin.readline())\nassert 1 <= n <= 10**5\ncanisters = [int(c) for c in sys.stdin.readline().split()]\nassert len(canisters) == n\ncanisters.sort()\nmin_canister = 0\nmax_canister = canisters[-1]\nassert 1 <= min_canister <= n\n",
        "num_ids_2": 37,
        "num_ids_4": 55
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\n6 1 3 2 2 3') == '0.6'\nassert solution('2\\n2 2') == 'impossible'\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n6\n6 1 3 2 2 3\n''') == '0.6'\nassert solution('''\n2\n2 2\n''') == 'impossible'\n\n'''\nTODO:",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''6\n6 1 3 2 2 3''') == '0.6'\nassert solution('''2\n2 2''') == 'impossible'\n\n'''\nimport math",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n6 1 3 2 2 3') == '0.6'\nassert solution('2\\n2 2') == 'impossible'\nassert solution('2\\n1 2') == 'impossible'\nassert solution('5\\n4 4 4 4 4') == 'impossible'\nassert solution('4\\n2 1 2 3') == 'impossible'",
        "num_ids_2": 35,
        "num_ids_4": 68
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 1 3 2 2 3\") == \"0.6\"\nassert solution(\"2 2\") == \"impossible\"\n\nassert abs(solution(\"6 1 3 2 2 3\") - 0.6) <= 1e-6\nassert abs(solution(\"2 2\") - \"impossible\") <= 1e-6\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 73
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 5 6\") == \"0.5\"\nassert solution(\"4\\n1 1 3 2\") == \"impossible\"\n\"\"\"\n\nimport math",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n6 1 3 2 2 3') == '0.6'\nassert solution('2\\n2 2') == 'impossible'\nprint('Success')\n\n\"\"\"\n\nimport math",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 1 3 2 2 3') == '0.6'\nassert solution('2 2') == 'impossible'\n\"\"\"\n\nfrom itertools import combinations\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 1 3 4 5') == '0.6'\nassert solution('3\\n2 2') == 'impossible'\nassert solution('1\\n1') == '1.0'\nassert solution('1\\n2') == 'impossible'\nassert solution('1\\n3') == 'impossible'\n\nprint('Success')\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 63
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 4 1 4\") == \"Emma\"\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 4 1 4\n1 6 1 6''') == 'Emma'\nassert solution('''1 8 1 8\n1 10 2 5''') == 'Tie'\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Emma'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 4 1 4\", \"1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\", \"1 10 2 5\") == \"Tie\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\n\"\"\"\n\nimport sys\n\na, b, c, d = [int(num) for num in sys.stdin.readline().split()]\nstdin = sys.stdin.readline()",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1, 4, 1, 4) == 'Emma'\nassert solution(1, 6, 1, 6) == 'Tie'\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 4 1 4\") == \"Emma\"\nassert solution(\"1 8 1 8\") == \"Tie\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"\n\nassert solution(\"1 5 5 3\\n3 3 1 1\") == \"Gunnar\"\nassert solution(\"2 8 5 2\\n3 3 1 1\") == \"Gunnar\"\n\nassert solution(\"1 5 5 3\\n1 2 2 1\") == \"Tie\"\n",
        "num_ids_2": 40,
        "num_ids_4": 82
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == 'Emma'\nassert solution(\"1 8 1 8\\n1 10 2 5\") == 'Tie'\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Emma'\nassert solution('1 8 1 8\\n1 10 2 5') == 'Tie'\nassert solution('1 10 1 10\\n1 5 1 5') == 'Tie'\n\nimport os",
        "num_ids_2": 40,
        "num_ids_4": 60
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\nassert solution(\"1 2 3 mumble mumble 7 mumble 8\") == \"makes sense\"\nassert solution(\"5 1 2 3 mumble mumble 7 mumble 8\") == \"makes sense\"\nassert solution(\"1 2 3 mumble mumble 7 mumble 8 mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble mumble",
        "num_ids_2": 44,
        "num_ids_4": 1711
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8 1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n\"\"\"",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n\"\"\"\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n\nprint(\"All tests passed.\")\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n\nprint(solution('8\\n1 2 3 mumble mumble 7 mumble 8'))",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 6 9 12 15\\n4 9 25 49 81') == '1 18'\nassert solution('1 1 1 1 1\\n0 1 1 1 1') == '0 1'\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 9 25 49 81') == '2 121'\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3 6 9 12 15 3 3 3 3\n''') == '1 18\\n'\n\nassert solution('''\n4 9 25 49 81\n''') == '2 121\\n'\n\nassert solution('''\n
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 6 9 12 15\\n') == '1 18'\nassert solution('4 9 25 49 81\\n') == '2 121'\nassert solution('1\\n') == '1 0'\n\"\"\"\n\nimport sys\nfrom copy import copy\nfrom itertools import groupby",
        "num_ids_2": 35,
        "num_ids_4": 48
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 4 5\") == \"1 4\"\nassert solution(\"3 3 4 5\") == \"0 3\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 6 9 12 15\") == '1 18'\nassert solution(\"4 9 25 49 81\") == '2 121'\nassert solution(\"2 3 9 10 21\") == '1 10'\nassert solution(\"3 0 21 8 13 14\") == '0 21'\nassert solution(\"4 0 21 8 13 14\") == '0 21'\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 62
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4\n''') == 'CORRECT'\n\nassert solution('''4\n2 3\n1 0\n0 2\n3 1\n''') == 'CORRECT'\n\nassert solution('''4\n3 2\n1 0\n0 2\n2 1\n''') == 'INCORRECT'\n\nassert solution('''4\n2 2\n1 0\n0 2\n2 1\n''') == 'INCORRECT'\n\nassert solution('''5\n2 4\n0 0\n1 1\n4 4\n2 3\n1 2\n3 0\n''') == 'CORRECT'",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'CORRECT'\nassert solution('4\\n1 1\\n0 0\\n3 2\\n') == 'INCORRECT'\nassert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n') == 'CORRECT'\nassert solution('8\\n2 3\\n1 0\\n0 2\\n3 1\\n') == 'CORRECT'\nassert solution('8\\n0 2\\n3 1\\n') == 'CORRECT'\n",
        "num_ids_2": 37,
        "num_ids_4": 111
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\\n\") == \"CORRECT\"\nassert solution(\"8\\n6 0\\n3 5\\n5 7\\n1 1\\n7 3\\n2 6\\n4 4\\n\") == \"CORRECT\"\n\nimport sys\nfrom collections import deque",
        "num_ids_2": 74,
        "num_ids_4": 115
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"8\n    1 5\n    6 2\n    3 1\n    5 0\n    4 6\n    0 3\n    2 7\n    7 4\n    \"\"\"\n) == \"CORRECT\"\n\nassert solution(\n    \"\"\"4\n    2 3\n    1 0\n    0 2\n    3 1\n    \"\"\"\n) == \"CORRECT\"\n\nassert solution(\n    \"\"\"4\n    2 3\n    1 0\n    0 2\n    3 1\n    \"\"\"\n) == \"INCORRECT\"\n\nassert solution(\n    \"\"\"8\n    1 5\n    6 2\n    3 1\n    5 0\n    4 6\n    0 3\n    2 7\n    7 4\n    \"\"\"\n) == \"CORRECT\"\n\nassert solution(\n    \"\"\"8\n    1 5\n    6 2\n    3 1\n    5 0\n    4 6\n    0 3\n    2 7\n    7 4\n    \"\"\"\n) == \"CORRECT\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"INCORRECT\"\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"INCORRECT\"\nassert solution(\"3\\n2 3\\n1 0\\n0 2\\n3 1\") == \"INCORRECT\"\n",
        "num_ids_2": 70,
        "num_ids_4": 158
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\nassert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\nassert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'",
        "num_ids_2": 70,
        "num_ids_4": 113
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\n",
        "num_ids_2": 70,
        "num_ids_4": 70
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'CORRECT'\nassert solution('1 1') == 'CORRECT'\nassert solution('2 2') == 'CORRECT'\nassert solution('3 3') == 'CORRECT'\nassert solution('4 4') == 'INCORRECT'\n",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4''') == 'CORRECT'\n\nassert solution('''8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4''') == 'INCORRECT'\n\nassert solution('''5\n4 4\n5 2\n4 0\n2 3\n0 3\n3 0\n1 4\n2 2\n0 4\n4 1\n''') == 'CORRECT'\n\nassert solution('''5\n4 3\n5 2\n4 0\n2 3\n0 3\n3 0\n1 4\n2 2\n0 4\n4 1\n''') == 'CORRECT'\n\nassert solution('''5\n4 4\n5 2\n4 0\n2 3\n0 3\n3 0\n1 4\n2 2\n0 4\n4 1\n''') == 'INCORRECT'",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n3\n0 1 1\n1 0 1\n1 1 0\n\"\"\"\n) == \"\"\"\n1 1 1\n\"\"\"\nassert solution(\n\"\"\"\n5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0\n\"\"\"\n) == \"\"\"\n1 2 3 1 11\n\"\"\"\n)\nprint(\"Test finished.\")\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n0\\n0\\n1\\n1\\n1\") == \"1\\n1\\n1\"\nassert solution(\"5\\n0\\n0\\n1\\n1\\n1\") == \"1\\n1\\n1\"\n\nassert solution(\"5\\n0\\n0\\n1\\n1\\n1\") == \"1\\n1\\n1\"\nassert solution(\"5\\n0\\n0\\n1\\n1\\n1\") == \"1\\n1\\n1\"\n\nassert solution(\"3\\n0\\n0\\n1\\n1\\n1\") == \"1\\n1\\n1\"\n",
        "num_ids_2": 62,
        "num_ids_4": 124
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3\n0 1 1\n1 0 1\n1 1 0\n''') == '1 1 1'\n\nassert solution('''\n5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0\n''') == '1 2 3 1 11'\n\nassert solution('''\n5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0\n''') == '1 2 3 1 11'\n\nassert solution('''\n4\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0\n''') == '1 2 3 1 11'\n\nassert solution('''\n5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0\n''') == '1 2 3 1 11'",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\n\n\"\"\"\n\nimport math\n\nn = int(input())\nmatrix = [[int(j) for j in input().split()] for i in range(n)]\n\nmaximum = -math.inf\nmaximum_row = 0\nmaximum_col = 0\n\nfor i in range(n):\n    for j in range(n):\n        if matrix[i][j] > maximum:\n            maximum = matrix[i][j]\n            maximum_row = i\n            maximum_col = j\n\nmax_sum = 0\n\nfor i in range(n):\n    sum_row = 0\n    for j in range(n):\n        sum_row += matrix[i][j]\n    if sum_row > max_sum:\n        max_sum = sum_row\n\nmax_sum = 0\n\nfor i in range(n):\n    sum_col = 0\n    for j in range(n):\n        sum_col += matrix[j][i]\n    if sum_col > max_sum:\n        max_sum = sum_col\n\nprint(\"{} {} {}\".format(maximum_row, maximum_col, maximum))\nprint(max_sum)",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n0 1 1\n1 0 1\n1 1 0''') == '1 1 1'\nassert solution('''5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0''') == '1 2 3 1 11'\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '3\\n0 1 1\\n1 0 1\\n1 1 0'\n) == '1 1 1'\nassert solution(\n    '5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0'\n) == '1 2 3 1 11'\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == '1 1 1'\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\n\nassert solution(\"2\\n2\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\n\nassert solution(\"2\\n2\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 2 3\"\n\n\"\"\"",
        "num_ids_2": 60,
        "num_ids_4": 90
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n0 1 1\\n1 0 1\\n1 1 0') == '1 1 1'\nassert solution('5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0') == '1 2 3 11'\n\"\"\"\n\nimport numpy as np\n\nsize = int(input())\n\nmatrix = np.zeros(size, dtype=int)\n\nfor i in range(size):\n    matrix[i] = list(map(int, input().split()))\n\nsum_matrix = np.sum(matrix, axis=1)\n\nprint(np.flip(np.argsort(sum_matrix, kind='heapsort')))",
        "num_ids_2": 75,
        "num_ids_4": 75
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nprint(solution(\"1 1\"))",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n\n\nThe first line contains two positive integers $D$ (day) and $M$ (month) separated by a space. The numbers will be a valid date in $2009$.\n\nSample Input 1:\n1 1\nSample Output 1:\nThursday\nSample Input 2:\n17 1\nSample Output 2:\nSaturday\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('12 1') == 'Thursday'\nassert solution('1 1') == 'Thursday'\nassert solution('8 1') == 'Monday'\nassert solution('29 1') == 'Tuesday'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\n\"\"\"\n\nd, m = [int(x) for x in stdin.split()]",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\nassert solution('31 3') == 'Sunday'",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"17 1\") == \"Saturday\"\nprint('Test pass.')\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"17 1\") == \"Saturday\"\n\"\"\"\n\nimport datetime",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('17 1') == 'Saturday'\nassert solution('12 6') == 'Monday'\nassert solution('1 1') == 'Monday'\n\"\"\"\n\nfrom datetime import date\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"17 1\") == \"Saturday\"\n\nprint(\"All tests passed.\")\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 6\") == \"Saturday\"\nassert solution(\"10 11\") == \"Thursday\"\nassert solution(\"1 2\") == \"Sunday\"\n\nprint('Hooray!')\n\n### Do not edit the code below\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40'\nprint('Test passed')",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40'\nprint('Test pass.')\n\n-----\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40'\nassert solution('100\\n500\\n12\\n') == '129\\n480'\n\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\"\nprint('Test pass.')",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40\\n'\nassert solution('1\\n100\\n12\\n') == '129\\n480\\n'\nassert solution('10000\\n10000\\n12\\n') == '9999\\n9998\\n'\n\n-----\n",
        "num_ids_2": 46,
        "num_ids_4": 70
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n100\\n4\\n12') == '129\\n480'\nprint('Test pass.')",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n100\\n4\\n12\") == \"129\\n480\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n100\\n4\\n12') == '4\\n129\\n'\n\"\"\"\n\nimport math\n\nL, D, X = map(int, input().split())\nL, D, X = sorted([L, D, X])\n\nN_min = math.ceil(L / D)\nN_max = math.floor(L / X)\n\nprint(N_min, N_max)\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40'\nassert solution('1\\n500\\n12\\n') == '129\\n480'\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"6.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"6.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"6.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"6.0\\n3\"\n",
        "num_ids_2": 86,
        "num_ids_4": 172
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4') == '4.0\\n3'\n\n\"\"\"",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '4.0\\n3'\n\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0\\n3'\n\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0\\n3'\n\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0\\n3'\n\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0\\n3'",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str([1,1]), str([5,1])) == \"4.0\"\nassert solution(str([1,1]), str([5,1])) == \"4.0\"\nassert solution(str([3,1]), str([3,2])) == \"1.0\"\nassert solution(str([3,1]), str([3,2])) == \"1.0\"\nassert solution(str([3,1]), str([3,2])) == \"1.0\"\n\"\"\"\n\nimport math",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"\n\"\"\"",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\") == \"4.0\\n3\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"\n\"\"\"\n",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\n\"\"\"",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '4.0\\n3', 'Wrong answer'\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0\\n3', 'Wrong answer'\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '3.75\\n3', 'Wrong answer'\n\nprint('Check done.')",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\n",
        "num_ids_2": 82,
        "num_ids_4": 125
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\\n\") == \"4.0\\n3\"\n\n\"\"\"\n\nfrom decimal import Decimal",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n\"\"\"\n\nimport math\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('3') == 2",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"2\"\n\"\"\"\nimport math\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n\"\"\"\n\nn = int(input())\n\ni = 2\nwhile (i * i) <= n:\n    if (n % i == 0):\n        print(i)\n        n //= i\n    else:\n        i += 1\n\nprint(n)\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == 2\nassert solution(30) == 7\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\n\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\\n\"",
        "num_ids_2": 94,
        "num_ids_4": 94
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\nSee https://www.algoexpert.io/questions/Sled_Locations\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == '1\\nHE GOT AWAY!'\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == 'HE GOT AWAY!'\n\"\"\"\n",
        "num_ids_2": 95,
        "num_ids_4": 95
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"N-FBI1\"\n) == \"1\"\n\nassert solution(\n\"N321-CIA\"\n) == \"HE GOT AWAY!\"\n\nassert solution(\n\"N3-B12I\"\n) == \"1\"\n\nassert solution(\n\"F3-B12I\"\n) == \"1\"\n\nassert solution(\n\"F-BI-12\"\n) == \"1\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == '1\\n2\\n3\\n4\\nHE GOT AWAY!'\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == 'HE GOT AWAY!'\nprint('Passed!')\n",
        "num_ids_2": 104,
        "num_ids_4": 104
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == '1\\n2\\n'\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == 'HE GOT AWAY!'\n\"\"\"\n\nimport sys",
        "num_ids_2": 94,
        "num_ids_4": 94
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\n\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\\n\"\n",
        "num_ids_2": 94,
        "num_ids_4": 94
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(r'N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1') == '1\\nHE GOT AWAY!'\nassert solution(r'N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1') == 'HE GOT AWAY!'\n\nprint(solution(r\"\"\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\"\"\"))\nprint(solution(r\"\"\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\"\"\"))\n\n\"\"\"\nSample Input 1:\nN-FBI1\n9A-USKOK\nI-NTERPOL\nG-MI6\nRF-KGB1\nSample Output 1:\n1\nSample Input 2:\nN321-CIA\nF3-B12I\nF-BI-12\nOVO-JE-CIA\nKRIJUMCAR1\nSample Output 2:\nHE GOT AWAY!\n\"\"\"\n",
        "num_ids_2": 99,
        "num_ids_4": 99
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\n\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\\n\"\n",
        "num_ids_2": 94,
        "num_ids_4": 94
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\n\"\n\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\\n\"\n\"\"\"\n",
        "num_ids_2": 94,
        "num_ids_4": 94
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 3\\n4 5 4\") == '8.0'\n\"\"\"\n\nimport math\n\nfrom collections import Counter",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n3 3 3\\n4 5 4') == '6.843530573929037'\nassert solution('2\\n3 3 3\\n4 5 6') == '10.285714285714285'\n\"\"\"\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n3 4 5 6 7\n2 2 3 4 5\n3 2 3 4 5\n3 2 3 4 5\n1 2 2 3 4\n\"\"\") == \"8.0\"\nassert solution(\"\"\"\n5\n2 3 4 5 6\n3 2 3 4 5\n3 2 3 4 5\n3 2 3 4 5\n1 2 2 3 4\n\"\"\") == \"6.843530573929037\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n4 3\\n1 2 3') == '1.8108108108108109'\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n3 3 3\\n4 5 4') == '6.843530573929037'\nassert solution('1\\n3 3 3\\n4 5 4') == '8.0'\nprint('Success')\n\n-----Solution-----\n\nx = [float(input()) for _ in range(int(input()))]\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n4 4 5') == '8.0'\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n4 5 4\\n') == '6.843530573929037'\nassert solution('2\\n3 3 3\\n4 5 4\\n') == '8.0'\nprint(solution(stdin.read()))\n\n-----Test Cases-----\nSample Test Cases:\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n3 3 3\\n4 5 4') == '6.843530573929037'\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3 3 3\\n4 5 4') == '6.843530573929037'\nassert solution('2\\n3 3 3\\n4 5 4') == '8.0'\n\n\"\"\"\n\nfrom math import sqrt\nfrom collections import Counter\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 3\\n4 5 4') == '6.843530573929037'",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\nassert solution('15') == '21'\nassert solution('1') == '1'\nassert solution('2') == '2'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\nassert solution(\"1000000000000000\") == \"10000000000000001\"\n\nprint(\"All tests passed.\")\n",
        "num_ids_2": 20,
        "num_ids_4": 35
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\nassert solution(\"23\") == \"23\"\n\n###############################################################################",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\nassert solution(\"10\") == \"12\"\n\"\"\"\nimport sys\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\"\n\nn = input()",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"24\"\n) == \"24\"\nassert solution(\n    \"25\"\n) == \"27\"\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\n\"\"\"\n\nimport operator",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '1+9+8+4') == '7'\nassert solution(\n    '1+2+3+4+5+6+7+8+9') == '188'\n\n\"\"\"\n\n\nfrom collections import Counter\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '0'\nassert solution('1+9+8+4') == '7'\nassert solution('1+2+3+4+5+6+7+8+9') == '188'\nassert solution('1+9+8+4+1+9+8+4') == '7'\n\"\"\"\n\n\nimport re",
        "num_ids_2": 26,
        "num_ids_4": 76
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4+1+9+8+4\") == \"188\"\nassert solution(\"1+9+8+4+1+9+8+4+1+9+8+4+1+9+8+4\") == \"188\"\nassert solution(\"1+9+8+4+1+9+8+4+1+9+8+4+1+9+8+4+1+9+8+4+1+9+8+4\") == \"188\"\n\nSample Input 3:\n2+3\nSample Output 3:\n5\n\nSample Input 4:\n2+3+4\nSample Output 4:\n9\n\nSample Input 5:\n1+2+3+4+5+6+7+8+9\nSample Output 5:\n189\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 136
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1+9+8+4') == 7\nassert solution('1+9+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+8+",
        "num_ids_2": 1440,
        "num_ids_4": 1440
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\nassert solution(\"1+2+3+4+5+6+7+8+9+0+1+2+3+4+5+6+7+8+9+0+1+2+3+4+5+6+7+8+9\") == \"1921\"\n",
        "num_ids_2": 42,
        "num_ids_4": 109
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+2+3+4+5+6+7+8+9') == '188'\n\"\"\"\n\nimport re\nfrom collections import Counter",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+2+3+4+5+6+7+8+9') == '188'\nassert solution('1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20') == '2578'",
        "num_ids_2": 42,
        "num_ids_4": 91
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\n\"\"\"\nimport math\nfrom typing import List\n\nINPUT_MIDDLE = 1 + 9 + 8 + 4\nINPUT_MAX_DIGITS = 18\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\\n2 3 1\") == \"2 3 3\"\n\"\"\"\n\nn, *a = map(int, input().split())\nassert n >= 1 and n <= 6\nassert all(abs(i) < 50 for i in a)\n\nC = [0] + a\nfor i in range(n - 1):\n    C[i + 2] += C[i + 1]\n    C[i + 2] %= (10 ** 9) + 7\n\nprint(*C[1:])\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\n\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\n\nassert solution(\"6 -3 4 5 9 2 -1\") == \"2 -9 -2 -5 3\"\n",
        "num_ids_2": 30,
        "num_ids_4": 55
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 3\") == \"3 -1\"\nassert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\nassert solution(\"4 2 -4 5\") == \"5 -2 4\"\nassert solution(\"3 2 -4 5\") == \"5 -2 4\"\n",
        "num_ids_2": 27,
        "num_ids_4": 61
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\nassert solution(\"3 4 2\") == \"4 8\"\nassert solution(\"4 1 -5 6\") == \"2 -8\"\nassert solution(\"4 6 1\") == \"5 4\"\n",
        "num_ids_2": 30,
        "num_ids_4": 59
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"2 3\") == \"5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 22,
        "num_ids_4": 39
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 5 2\\n') == '2 5'\nassert solution('2 2 -4 5\\n') == '5 -2 4'\n\nprint('Success')",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 5 2\\n') == '2 5'\n\"\"\"\n\nfrom math import factorial as f",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 5 2\\n\") == \"2 5\"\nassert solution(\"2 2 -4 5\\n\") == \"5 -2 4\"\nassert solution(\"4 6 9 0 -9 -3\\n\") == \"5 9 3 -3 -1\"\n",
        "num_ids_2": 34,
        "num_ids_4": 59
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5 2\\n\") == \"2 5\"\n\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"\nassert solution(\"3 1\\n1\\n2\\n3\") == \"1 1 2 3\"\n\"\"\"\n",
        "num_ids_2": 52,
        "num_ids_4": 75
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\\n\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\\n\") == \"1 1 1 3 3 3 2 2 2\"\n\nimport os\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"5 2\n2 1 2 1 2\n\"\"\"\n        output = \"\"\"2 2 2 1 1\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"9 3\n1 3 3 3 2 2 2 1 1\n\"\"\"\n        output = \"\"\"1 1 1 3 3 3 2 2 2\"\"\"\n        self.assertIO(input, output)\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\\n\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\\n\") == \"1 1 1 3 3 3 2 2 2\"\n\"\"\"",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"\n\"\"\"\n\nfrom collections import Counter\n\nN, C = map(int, input().split())\nnumbers = Counter(map(int, input().split()))\n\nresult = [0] * N\n\nfor k, v in numbers.items():\n    result[v-1] = k\n\nprint(' '.join(map(str, result)))\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1 2 1 2\\n') == '2 2 2 1 1'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\\n\") == \"2 2 2 1 1\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 2 1 2\\n3') == '2 2 2 1 1'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n2 1 2 1 2') == '2 2 2 1 1'\nassert solution('9 3\\n1 3 3 3 2 2 2 1 1') == '1 1 1 3 3 3 2 2 2'",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(input()).strip('\\n')\n\nprint(solution(str(input())))\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\\n\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\\n\") == \"1 1 1 3 3 3 2 2 2\"\nprint(\"Successfully passed all tests.\")",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 100\") == \"100\"\nassert solution(\"38 24\") == \"875\"\nprint('Success')\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 100') == '100'\nassert solution('38 24') == '875'\n\"\"\"\n\na, b = [int(i) for i in input().split()]",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''38 24''') == '875'\n\"\"\"\n\nfrom math import ceil\n\na, i = [int(x) for x in stdin.split()]\n\nprint(ceil(a / i))\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"38 24\\n\") == \"875\"\nprint(solution(\"38 24\\n\"))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 22') == 100\n\"\"\"\nimport math\n\na, i = map(int, stdin.split())\nprint(math.ceil(i / a))\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('38 24') == '875'\nassert solution('1 100') == '100'\n\nprint(\"PASSED\")\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 24\") == \"1\"\nassert solution(\"1 100\") == \"100\"\n\n\"\"\"\n\nimport math",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"38 24\") == \"875\"\nprint(solution(input()))\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\n\"\"\"\n\n\nfrom math import log\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('38 24') == '875'\nassert solution('1 100') == '100'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\nprint(\"Successfully solved.\")\n\n-----Solution-----\na = int(stdin[0:3])\nb = int(stdin[4:7])",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n\n\"\"\"\n\na = input()\nb = input()\na = str(a)\nb = str(b)\na = a[::-1]\nb = b[::-1]\na = int(a)\nb = int(b)\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\nassert solution('23 30') == '3023'\nassert solution('12 31') == '3112'\nassert solution('1 1') == '1111'\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('11\\n22') == '22'\nassert solution('121\\n12') == '121'\nassert solution('955\\n88') == '955'\nassert solution('957\\n88') == '888'\n'''\n",
        "num_ids_2": 21,
        "num_ids_4": 49
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\nprint('Success')\n\n----\n\nMatej has a friend who happens to be a little mechbird. Recently, he was trying to teach it how to multiply two four-digit numbers, but he made some errors. Now his friend wants to talk to you, to find out who is the most amazing teacher ever. Can you help?\n\nThe four-digit numbers, $A$ and $B$, will always have the same length and will always contain a leading zero, except for the number 0 itself.\n\n-----Input-----\nThe first and only line of input contains two four-digit numbers, $A$ and $B$, each on a separate line. Those numbers do not contain any leading zeroes (except for the number 0 itself).\n\n-----Output-----\nPrint out \"Matej\" (without the quotes), if $A * B < 1000 * B$, or print \"Arianna\" (without the quotes), otherwise.\n\n-----Examples-----\nSample Input 1:\n367 892\nSample Output 1:\nArianna\nSample Input 2:\n0 30\nSample Output 2:\nMatej",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\nprint('Passed all tests')",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n\nprint(\"Successfully submitted\")\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"734 893\"\n) == \"437\"\nassert solution(\n    \"221 231\"\n) == \"132\"\nassert solution(\n    \"734 893\"\n) == \"437\"\nassert solution(\n    \"221 231\"\n) == \"132\"\nassert solution(\n    \"734 893\"\n) == \"437\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\nprint('Success')\n\nIf you like this Kata, please try:\n\nPlain: the starting number is used for both numbers\nIncrementing: The second number is always one more than the first.\nDecrementing: The second number is always one less than the first.",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11 131') == 'programming'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\nassert solution('5 71') == 'impossible'",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11 131') == 'programming'\n\"\"\"\n\n\n\nimport math\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''11 131\n''') == 'programming'\nassert solution('''7 96\n''') == 'contest'\n'''\n\nprint(\"Complete the solution so that it returns the longest palindrome that can be built with those letters.\")\nprint(\"The string can be built from any letter at any quantity.\")\nprint(\"Ignore non-lowercase letters.\")",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\nprint('All tests passed.')\n\nhttps://www.codewars.com/kata/5d750d5a35a4dd63d600003d/train/python\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11 131') == 'programming', \"Test 1: failed\"\nassert solution('7 96') == 'contest', \"Test 2: failed\"\n\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'impossible'\nassert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\nassert solution('6 93') == 'impossible'\nassert solution('8 92') == 'contest'\n",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\n\"\"\"\n\n\"\"\"\n1. \u0420\u0435\u0448\u0438\u0442\u044c \u0432 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443\n2. \u0420\u0435\u0448\u0438\u0442\u044c \u0432 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438\n3. \u0420\u0435\u0448\u0438\u0442\u044c \u0432 \u0442\u0440\u0438 \u0441\u0442\u0440\u043e\u043a\u0438\n4. \u0420\u0435\u0448\u0438\u0442\u044c \u0432 \u0447\u0435\u0442\u044b\u0440\u0435 \u0441\u0442\u0440\u043e\u043a\u0438\n5. \u0420\u0435\u0448\u0438\u0442\u044c \u0432 \u043f\u044f\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438\n6. \u0420\u0435\u0448\u0438\u0442\u044c \u0432 \u0448\u0435\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438\n7. \u0420\u0435\u0448\u0438\u0442\u044c \u0432 \u0441\u0435\u043c\u044c \u0441\u0442\u0440\u043e\u043a\u0438\n8. \u0420\u0435\u0448\u0438\u0442\u044c \u0432 \u0432\u043e\u0441\u0435\u043c\u044c \u0441\u0442\u0440\u043e\u043a\u0438\n9. \u0420\u0435\u0448\u0438\u0442\u044c \u0432 \u0434\u0435\u0432\u044f\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438\n10. \u0420\u0435\u0448\u0438\u0442\u044c \u0432 \u0434\u0435\u0441\u044f\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438\n\"\"\"\n\nl, w = input().split()\nl, w = int(l), int(w)",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\".^\") == \"--\"\n\"\"\"\n\n\"\"\"\nWe have a camera that has horizontal and vertical resolution both equal to 32 pixels. The camera has been placed on a plane, pointing towards the sky, and is looking in the positive direction of the horizontal axis. The camera has no zoom capability, i.e. all images are the same size.\n\nOur image is a point cloud that represents the points of finite number on a plane. The points have random x and y coordinates in the range [0; 2^31 \u2212 1], but their coordinates are integers.\n\nThe camera can take several photos in a row. Each photo represents the point cloud, but the next photo seems to start from a slightly different point cloud. The photos are numbered sequentially, starting from 0.\n\nIt's not difficult to realize that all photos of the same point cloud form a connected graph. If we identify a point cloud with a label, we can simply connect all the points that have the same label in any photo to the same label in the next photo.\n\nFor example, in the following photo, the points that have the same label belong to the same connected component, as do the points that have the label 5 and 7. The graph is formed as follows:\n\n\n\nThe first photo is labeled in such a way that the label 0 is used by all points, so it will not change.\n\nThe second photo will assign labels to the points (0,0), (0,2), (0,4), (0,6), (2,0), (2,2), (2,4), (4,0), (4,2), (4,4). The new labels are assigned so that the number 0 is used by all points that were in the same connected component as in the previous photo. The labels 1, 2, 3, and 5 are used to identify the new connected components.\n\nHere are the new labels of the second photo:\n\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 2 'X'\nX^\n--\n\n.X\n--''') == '''.^\n--'''\n\nassert solution('''3 12 'A'\nABABABABABAC\nBABABABABABB\nABABABABABAB\n\nBABABABABABA\nBBABABABABAB\nBABABABABABA\nSample Output 2:\nBBABABABABAC\nBBBABABABABA\nBBABABABABAB\n\n''') == '''BBABABABABAC\nBBBABABABABA\nBBABABABABAB'''",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\n\nfrom typing import List\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 \\'X\\nX^\\n--\\n\\n.X\\n--\\n') == '.X\\n--\\n'\nassert solution('3 12 \\'A\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\\nBABABABABABA\\nBBABABABABAB\\nBABABABABABA\\n') == 'BBABABABABAC\\nBBBABABABABA\\nBBABABABABAB\\n'\n\"\"\"\n",
        "num_ids_2": 129,
        "num_ids_4": 129
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 'X'\") == \"X\\n^\"\nassert solution(\"3 12 'A'\") == \"ABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\"\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 'X'\") == \".X\"\nassert solution(\"3 12 'A'\") == \"BBABABABABAC\"\nassert solution(\"3 12 'A'\") == \"BBABABABABAC\"\nassert solution(\"2 2 'X'\") == \".X\"\nassert solution(\"2 2 'X'\") == \".X\"\n\nprint(\"=== tests passed===\")\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 'X'\\nX^\\n--\\n.X\\n--\\n\") == \".^\\n--\\n\"\nassert solution(\"3 12 'A'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\") == \"BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n\"",
        "num_ids_2": 102,
        "num_ids_4": 102
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 \\'X\\'\\nX^\\n--\\n\\n.X\\n--') == '.^\\n--\n\nassert solution('3 12 \\'A\\'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\\nBABABABABABB\\nBBABABABABAB\\nBABABABABABA') == 'BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\n",
        "num_ids_2": 121,
        "num_ids_4": 121
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input) == output\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '2 2 \\'X\\nX^\\n--\\n\\n.X\\n--\\n') == '.^\\n--\\n\\n'\nassert solution(\n    '3 12 \\'A\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\\nBABABABABABA\\nBBABABABABAB\\nBABABABABABA\\n') == 'BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n\\nBBBABABABABA\\nBBABABABABAB\\nBABABABABABA\\n'\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n3 0 2\\n3 1 1'\nassert solution('20 15 10 120') == '2 0 2\\n2 1 0\\n2 2 0\\n5 0 1\\n5 1 0\\n7 0 0'\n\"\"\"\nimport itertools\nimport sys\n",
        "num_ids_2": 90,
        "num_ids_4": 130
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n\"\"\"\nimport math\n",
        "num_ids_2": 115,
        "num_ids_4": 115
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n3 2 0\\n5 0 1\\n5 1 0\\n7 0 0'\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n3 2 0\\n5 0 1\\n5 1 0\\n7 0 0'\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n3 2 0\\n5 0 1\\n5 1 0\\n7 0 0'\n\nSample Input 1:\n1 2 3 4\nSample Output 1:\nimpossible\n\"\"\"\n",
        "num_ids_2": 120,
        "num_ids_4": 250
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\\n'\n\"\"\"\n\n\"\"\"\nTo solve this problem, we will look at the different ways in which the solution could come about.\n\nFor example, the simplest way would be to start by counting the number of each animal, and if the answer is too large, then delete that animal. This way, we can ensure that the solution is not too large by using an upper bound on the answer.\n\nFor example, if there are two dogs and two cats, then there are three possible ways to solve the problem.\n\nWe could start with a dog, a cat, and a dog. In this way, we could solve the problem in exactly three steps, and the answer will be within range.\n\nWe could start with a dog, a cat, and a cat. In this way, we could solve the problem in exactly three steps, and the answer will be within range.\n\nSimilarly, if there are only three animals, then there are only three possible ways to solve the problem.\n\nWe could start with a dog, a cat, and a dog. In this way, we could solve the problem in exactly three steps, and the answer will be within range.\n\nWe could start with a dog, a dog, and a cat. In this way, we could solve the problem in exactly three steps, and the answer will be within range.\n\nTo determine how many steps we can take, we need to determine the number of animals that are possible to be counted using the current number of animals. There are $b$, $d$, and $c$ possible animals, so that we can count as many as $bcd$ animals.\n\nIf we use $b$ animals, then we are looking for the total number of animals that we could count. This is $b + bd + bc$ (with any arrangements of the order of the $b$ animals).\n\nIf we use $d$ animals, then we are looking for the total number of animals that we could count. This is $d + dd + dc$ (with any arrangements of the order of the $d$ animals).\n\nIf we use $c$ animals, then we are looking for the total number of animals that we could count. This is $c + cd + cd$ (with any arrangements of the order of the $c$ animals).\n\nBy looking at the counts, it is clear that we can count as many as $bcd$ animals.\n\nNow, we only need to determine how many of the possible animals we could take. We only need to look at the smallest of the possible numbers that we can use to count. In other words, we need to determine the largest of the smallest possible number of the first, second, and third type of animal we could take. We can simply determine the largest of the number of the first, second, and third type of animal we could take, and then use that as the upper bound. In the code, this is given by the variable $LIMIT$.\n\nFor example, suppose that the number of the first type of animal is $b$, the number of the second type of animal is $d$, and the number of the third type of animal is $c$. The largest possible number of the first, second, and third type of animal we could take is $b+d+c$. We could also just take the largest number that we can count with the maximum number of the first, second, and third type of animal. This gives us a bound of $b+d+c = bd+bc+b = bd+bc+b = bd+b+c$.\n\nWe can use this bound to determine the maximum number of the first, second, and third type of animal we can take. We can count as many as $bcd$ animals, so the maximum possible is $bcd$.\n\nWhen we want to count as many as $bcd$ animals, we don\u2019t have to count all of the animals, but only the minimum number of animals possible to count.\n\nWe don\u2019t have to count every animal. We can start with the animal that has the smallest number of possible animals, and then go in order. So, we start with the lowest number of possible animals, and go in order of the number of possible animals.\n\nIn the code, this is the following:\n\nKeep track of the maximum number of the possible animals we can count. It starts at $0$ and can get as high as $bcd$.\n\nCreate an empty list called $animal_counts$ to store the number of possible animals we can count with. The number of possible animals we can count for each animal is given by $i$.\n\nFor $i$ equal to $0$, add $b$ to $animal_counts$.\n\nFor $i$ equal to $1$, add $d$ to $animal_counts$.\n\nFor $i$ equal to $2$, add $c$ to $animal_counts$.\n\nThe loop continues until the number of possible animals we can count is greater than the number of possible animals we can count so far.\n\nIf the number of possible animals we can count is equal to the number of possible animals we can count so far, then we know we can\u2019t count any more animals.\n\nWe could count as many as $bcd$ animals, so the maximum number of the first, second, and third type of animal we could take is $bcd$.\n\nIf we have counted all of the possible animals, then we have found our answer.\n\nIf the number of possible animals we can count is less than the number of possible animals we can count so far, then we can\u2019t count all of the possible animals.\n\nWe have to continue counting until the number of possible animals we can count is equal to the number of possible animals we can count so far.\n\nIn the code, this is the following:\n\nWhile the number of possible animals we can count is not equal to the number of possible animals we can count so far, go through the loop.\n\nIf the number of possible animals we can count is equal to the number of possible animals we can count so far, then we have found our answer.\n\nOtherwise, continue the loop and keep adding to the number of possible animals we can count.\n\nIf we have counted all of the possible animals, then we have found our answer.\n\"\"\"\n\nfrom itertools import permutations\n\nLIMIT = 250",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\"\nassert solution(\"100 80 60 240\") == \"0 0 4\"\nassert solution(\"100 80 60 240\") == \"0 0 4\"\nassert solution(\"100 80 60 240\") == \"0 0 4\"\nassert solution(\"100 80 60 240\") == \"0 0 4\"\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\"\nassert solution(\"100 80 60 240\") == \"0 0 4\"\nassert solution(\"2 3 2 10\") == \"impossible\"\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 30,
        "num_ids_4": 44
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n\nprint(\"Success!\")\n\"\"\"\n\nimport math",
        "num_ids_2": 110,
        "num_ids_4": 110
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n\"\"\"\nimport time\n",
        "num_ids_2": 115,
        "num_ids_4": 115
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\\n\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n3 0 2\\n5 0 1\\n5 1 0\\n7 0 0\\n\"\n\"\"\"\n",
        "num_ids_2": 109,
        "num_ids_4": 109
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n3 0 2\\n5 0 1\\n7 0 0\"\n\"\"\"\n\nstdin = input().split(\" \")\nb,d,c,l = [int(x) for x in stdin]\n\nsol = []\n\nfor i in range(b+1):\n    for j in range(c+1):\n        for k in range(d+1):\n            if i+j+k==l:\n                sol.append(\"{0} {1} {2}\".format(i,j,k))",
        "num_ids_2": 95,
        "num_ids_4": 95
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"good job\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n4\\n4\\n4\\n4\\n4\\n4\") == \"1\\n3\\n6\\n12\"",
        "num_ids_2": 102,
        "num_ids_4": 102
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13') == 'good job'\nassert solution('9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13') == '1\\n3\\n6\\n12'\n",
        "num_ids_2": 84,
        "num_ids_4": 84
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13') == 'good job'\nassert solution('9\\n2\\n4\\n6\\n7\\n8\\n9\\n10\\n11\\n13') == '1\\n3\\n6\\n12'\nassert solution('9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n14') == '1\\n3\\n6\\n12\\n14'\nassert solution('9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n14\\n15') == '1\\n3\\n6\\n12\\n14\\n15'\n",
        "num_ids_2": 84,
        "num_ids_4": 194
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == 'good job'\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == '1 3 6 12'\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == '1 3 6 12'\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == '1 3 6 12'\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == '1 3 6 12'\n",
        "num_ids_2": 78,
        "num_ids_4": 158
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\n1\\n3\\n5\\n7\\n9\\n10\\n11\\n13') == 'good job', 'Test 1 Failed'\nassert solution('8\\n1\\n3\\n6\\n7\\n9\\n10\\n11\\n13') == '3\\n6\\n12', 'Test 2 Failed'\n\nprint('All tests passed.')\n\nSample Output:\n1\n3\n6\n12\ngood job\nAll tests passed.\n'''\nimport sys",
        "num_ids_2": 85,
        "num_ids_4": 85
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"good job\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n1\") == \"1\\n3\\n6\\n12\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\") == \"good job\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\") == \"1\\n3\\n6\\n12\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\") == \"1\\n3\\n6\\n12\\n14\"\n\nprint(\"Successfully tested.\")\n\n-----\n\nimport re\nimport sys\n\nn = int(sys.stdin.readline())\nnums = []\nfor i in range(n):\n    nums.append(int(sys.stdin.readline()))\n\nfor i in range(n-1):\n    if nums[i+1]!= nums[i] + 1:\n        print(str(nums[i] + 1))\n        break\n\nprint(nums[-1])\n\n-----\n\nimport re\nimport sys\n\nn = int(sys.stdin.readline())\nnums = []\nfor i in range(n):\n    nums.append(int(sys.stdin.readline()))\n\nfor i in range(n-1):\n    for j in range(i+1, n):\n        if nums[i] + 1!= nums[j]:\n            print(nums[i] + 1)\n            break\n\nprint(nums[-1])\n\n-----\n\nimport re\nimport sys\n\nn = int(sys.stdin.readline())\nnums = []\nfor i in range(n):\n    nums.append(int(sys.stdin.readline()))\n\nfor i in range(n-1):\n    if nums[i+1]!= nums[i] + 1:\n        print(nums[i+1])\n        break\n\nprint(nums[-1])\n\n-----\n\nimport re\nimport sys\n\nn = int(sys.stdin.readline())\nnums = []\nfor i in range(n):\n    nums.append(int(sys.stdin.readline()))\n\nnums.append(1)\n\nfor i in range(n-1):\n    if nums[i] + 1!= nums[i+1]:\n        print(nums[i+1])\n\nprint(nums[-1])\n\n-----\n\nimport re\nimport sys\n\nn = int(sys.stdin.readline())\nnums = []\nfor i in range(n):\n    nums.append(int(sys.stdin.readline()))\n\nnums.sort()\n\nfor i in range(n-1):\n    if nums[i+1] - nums[i]!= 1:\n        print(nums[i] + 1)\n\nprint(nums[-1])\n\n-----\n\nimport re\nimport sys\n\nn = int(sys.stdin.readline())\nnums = []\nfor i in range(n):\n    nums.append(int(sys.stdin.readline()))\n\nnums.sort()",
        "num_ids_2": 87,
        "num_ids_4": 249
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n9\\n7\\n5\\n2\\n1\\n4\\n3\\n8\\n6\\n10\") == '1\\n3\\n6\\n12\\n8\\n4\\n2\\n10\\n7\\n9\\n5'\nassert solution(\"5\\n9\\n7\\n5\\n2\\n1\\n4\\n3\\n8\\n6\\n10\") == '1\\n3\\n6\\n12\\n8\\n4\\n2\\n10\\n7\\n9\\n5'\nassert solution(\"5\\n9\\n7\\n5\\n2\\n1\\n4\\n3\\n8\\n6\\n10\") == '1\\n3\\n6\\n12\\n8\\n4\\n2\\n10\\n7\\n9\\n5'\n\n----\n\n3\n2\n3\n4\n5\n6\n7\n8\n9\n10\nSample Output\n1\n3\n6\n12\n8\n4\n2\n10\n7\n9\n5",
        "num_ids_2": 140,
        "num_ids_4": 210
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n6\n4\n9\n10\n1\n7\n3\n8\n5''') == 'good job'\nassert solution('''6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n780\n781\n782\n783\n784\n785\n786\n787\n788\n789\n790\n791\n792\n793\n794\n795\n796",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"good job\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"\"\"1\n3\n6\n12\"\"\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"\"\"1\n3\n6\n12\n17\"\"\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"\"\"1\n3\n6\n12\n17\"\"\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"\"\"1\n3\n6\n12\n17\"\"\"\n",
        "num_ids_2": 74,
        "num_ids_4": 146
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3\\n2\\n1') == '1\\n2\\n3\\n4'\nassert solution('4\\n3\\n2\\n1\\n4\\n3\\n2\\n1') == '1\\n2\\n3\\n4\\n6\\n7\\n8\\n9'\nassert solution('4\\n3\\n2\\n1\\n4\\n3\\n2\\n1') == '1\\n2\\n3\\n4\\n6\\n7\\n8\\n9'\nassert solution('4\\n3\\n2\\n1\\n4\\n3\\n2\\n1') == '1\\n2\\n3\\n4\\n6\\n7\\n8\\n9'\nassert solution('4\\n3\\n2\\n1\\n4\\n3\\n2\\n1') == '1\\n2\\n3\\n4\\n6\\n7\\n8\\n9'\n",
        "num_ids_2": 80,
        "num_ids_4": 184
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 8.9 40075000 272.1') == '157079.04857106 15.598261092309'\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\n\"\"\"\n\nimport math",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\n\nimport math\n\nn, p, s, v = map(float, stdin.split())\n\nc = math.log(n * n * p * (10**9)) / (v * 10**9)\nt = (s * (1 + 1/c)) / v\nprint(round(t, 6))\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\nassert solution(\"10 8.9 40075000 272.100\") == \"157079.0487151 15.598271992331\"\nassert solution(\"10 8.9 40075000 272.1000\") == \"157079.04871 10 15.598271992331\"\n\"\"\"\n",
        "num_ids_2": 64,
        "num_ids_4": 96
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(solution_example[0]) == solution_example[1]\nprint(solution(input()))\n\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 8.9 40075000 272.1') == '157079.04857106 15.598261092309'\n\"\"\"\n\nfrom math import log2\nimport sys\n\nstdin = sys.stdin.readlines()\nn, p, s, v = map(float, stdin[0].split())",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 8.9 40075000 272.1') == '157079.04857106 15.598261092309'\n\"\"\"\n\nn, p, s, v = [float(s) for s in input().split()]\nc = 2 ** (n * (n - 1) ** 0.5) / p\nt = s * (1 + 1 / c) / v\nprint(t)\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\n\nimport sys\n\nsys.path.append('./')\nimport math\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\n\"\"\"\n\nn = int(input())",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == 0\nassert solution(\"2\") == 1\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\n\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == 0\n\"\"\"\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 0\n\n-----Problem-----\nThe problem is to find the number of ways to partition the set into $k$ non-empty subsets.\n\n-----Solution-----\n\n\"\"\"\n\nimport itertools",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n') == 1\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == 0\nassert solution('2') == 1\nassert solution('3') == 2\nassert solution('4') == 3\n\"\"\"\n\nn = int(input())\n\nsum = (n * (n-1)) / 2\n\nprint(int(sum))\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\nassert solution('5') == '5'\nassert solution('10') == '4'\nassert solution('15') == '8'\nassert solution('20') == '14'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\">A<\") == 0\nassert solution(\"<A<<>>AB<<>A\") == 1\nassert solution(\"<A<>A<<>>AB<<>>A<>\") == 2\nassert solution(\"<A<>>A<<>>AB<<>>A<>>A\") == 2\nassert solution(\"<A<>>A<>>A<<>>AB<<>>A<>>A\") == 3",
        "num_ids_2": 25,
        "num_ids_4": 66
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == '3'\nassert solution('4\\nA\\nA\\nB\\nA') == '2'\nassert solution('4\\nB\\nB\\nC\\nA') == '1'\nassert solution('4\\nC\\nC\\nC\\nA') == '4'\nassert solution('4\\nD\\nD\\nD\\nA') == '0'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == '3'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == '3'\nassert solution('4\\nB\\nC\\nD\\nA') == '0'\nassert solution('4\\nA\\nB\\nC\\nD') == '0'\nassert solution('4\\nA\\nB\\nC\\nD') == '0'\nassert solution('4\\nA\\nB\\nC\\nD') == '0'\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == \"3\"\n\"\"\"\n\nimport ast\nimport sys\n\nn = int(sys.stdin.readline())\n\nanswers = []\nfor i in range(n):\n    answers.append(sys.stdin.readline().strip())\n\nscore = 0\nfor answer in answers:\n    try:\n        score += ord(answer) - ord(\"A\") + 1\n    except:\n        pass\nprint(score)\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == '3'\nassert solution('5\\nB\\nB\\nA\\nC\\nD') == '2'\nassert solution('5\\nC\\nC\\nA\\nB\\nD') == '1'\nassert solution('5\\nD\\nD\\nA\\nB\\nC') == '5'\n\n\"\"\"\n",
        "num_ids_2": 47,
        "num_ids_4": 97
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\nA\nA\nA\nA''') == 3\nassert solution('''4\nB\nC\nA\nD''') == 0\nassert solution('''4\nD\nD\nA\nA''') == 4\nassert solution('''4\nA\nA\nC\nA''') == 2\nassert solution('''4\nA\nA\nA\nA''') == 4\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\nA\nA\nA\nA\") == \"3\"\nassert solution(\"4\nB\nC\nD\nD\") == \"0\"\nassert solution(\"4\nB\nB\nC\nB\") == \"1\"\nassert solution(\"4\nD\nC\nB\nD\") == \"1\"\nassert solution(\"4\nC\nC\nC\nC\") == \"1\"\n",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == 3\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline().strip())\nanswer = []\nfor _ in range(n):\n    answer.append(sys.stdin.readline().strip())\n\ncount = 0\nfor i in range(n):\n    if answer[i] == \"A\":\n        count += i + 1\nprint(count)\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == 3\nprint(solution('4\\nA\\nA\\nA\\nA'))\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == 3\nassert solution('3\\nA\\nA\\nA') == 3\n\n-----Constraints-----\n* 1 <= n <= 1000\n* Each answer\u00a0will be a valid\u00a0single\u00a0character:\u00a0\n    * 'A'\u00a0- correct answer\n    * 'B'\u00a0- wrong answer\n    * 'C'\u00a0- wrong answer\n    * 'D'\u00a0- wrong answer\n\n\"\"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n----",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n3 3 1 2\n.x.\nx.x\n.x.\n\"\"\"\n) == \"\"\"\n..xx..\nxx..xx\n..xx..\n\"\"\"\n\nassert solution(\n\"\"\"\n3 2 1 2\n.x.\nx.x\n.x.\n\"\"\"\n) == \"\"\"\n..xx..\n.xx..x\n..xx..\n\"\"\"\n\nassert solution(\n\"\"\"\n5 2 1 2\n.x.\nx.x\n.x.\n\"\"\"\n) == \"\"\"\n..xx..\n.xx..x\n..xx..\n\"\"\"\n\nassert solution(\n\"\"\"\n3 3 1 3\n.x.\nx.x\n.x.\n\"\"\"\n) == \"\"\"\n..xx..\n.xx..x\n..xx..\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"...xx...\"\nassert solution(\"2 2 1 1\\n..\\n..\") == \"..\"\nassert solution(\"3 3 1 1\\n..\\n..\\n..\") == \"...\\n\\n...\"\nprint(solution(stdin))\n\"\"\"\n",
        "num_ids_2": 46,
        "num_ids_4": 71
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"3 3 1 2\\n.x.\\nx.x\\n.x.\"\n) == \"..xx..\\nxx..xx\\n..xx..\"\nassert solution(\n    \"4 3 1 5\\n.x.\\nx.x\\n.x.\\nxxxx\"\n) == \"..xxxx\\nxxxxxx\\n..xxxx\\nxxxxxx\"\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 1 2\\n.x.\\nx.x\\n.x.') == '..xx..\\nxx..xx\\n..xx..', 'Answer'\nprint('Success')\n\"\"\"\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin))\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\n\nprint(solution(stdin))\n\"\"\"\n\nimport math",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 1 2\\n.x.\\nx.x\\n.x.\\n\") == \"..xx..\\nxx..xx\\n..xx..\\n\"\nassert solution(\"4 5 1 2\\n.x.\\nx.x\\n.x.\\n\") == \"..xx..\\nxx..xx\\n..xx..\\n\"\nassert solution(\"4 5 1 2\\n.x.\\nx.x\\n.x.\\n\") == \"..xx..\\nxx..xx\\n..xx..\\n\"\nassert solution(\"4 5 1 2\\n.x.\\nx.x\\n.x.\\n\") == \"..xx..\\nxx..xx\\n..xx..\\n\"\nassert solution(\"4 5 1 2\\n.x.\\nx.x\\n.x.\\n\") == \"..xx..\\nxx..xx\\n..xx..\\n\"\n",
        "num_ids_2": 88,
        "num_ids_4": 176
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"...xx...\"\nassert solution(\"3 3 2 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\nassert solution(\"3 3 2 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\nassert solution(\"3 3 3 2\\n.x.\\nx.x\\n.x.\") == \"...xx...\"\nassert solution(\"5 5 1 3\\n..x.\\n.x.x\\nx.x.\\nxx..\\nxxxx.\") == \".....\\n..x..\\n..x..\\n..x..\\n..x..\\n.....\"\n",
        "num_ids_2": 66,
        "num_ids_4": 132
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\nF 60 13 20') == '14 20'\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('F 60 13 20') == '14 20'\nassert solution('B 36 59 55') == '23 55'\n\"\"\"\n\nimport datetime\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '0 0'\nassert solution('F 10') == '1 0'\nassert solution('F 10', 'B') == '23 0'\nassert solution('F 10', 'B', 'B') == '23 30'\nassert solution('F 10', 'B', 'B', 'B', 'F', 'B') == '23 59'\n",
        "num_ids_2": 23,
        "num_ids_4": 56
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"B 20 33 38\") == \"0 1\"\nassert solution(\"F 60 13 20 F 60 13 20\") == \"14 20 14 20\"\nassert solution(\"F 60 13 20 F 60 13 20 F 60 13 20\") == \"14 20 14 20 14 20\"\nassert solution(\"F 60 13 20 B 60 13 20\") == \"0 1\"\n\"\"\"\n\nfrom typing import List\nfrom enum import Enum\n\nclass Direction(Enum):\n    FORWARD = 1\n    BACKWARD = -1",
        "num_ids_2": 28,
        "num_ids_4": 74
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\nassert solution(test_input_4) == test_output_4\n\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n\nSample Input:\n2\nF 30 13 20\nB 2 17 30\nSample Output:\n19 23\n19 20\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"F 60 13 20\") == \"14 20\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\nF 60 13 20') == '14 20'\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 34
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n\nassert solution(\"F 1 13 20\") == \"14 20\"\n\nassert solution(\"F 60 13 15\") == \"23 30\"\n\nassert solution(\"F 60 13 40\") == \"0 1\"\n\nassert solution(\"B 60 13 20\") == \"22 20\"",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1\n\n------Solution------\n\"\"\"\n\nimport sys\n\ntest_input_0 = \"\"\"\nF 1 13 20\n\"\"\"\ntest_output_0 = \"\"\"\n14 20\n\"\"\"\n\ntest_input_1 = \"\"\"\nB 1 13 20\n\"\"\"\ntest_output_1 = \"\"\"\n12 20\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"SEP 23\") == \"nope\"\nassert solution(\"JAN 1\") == \"nope\"\nassert solution(\"NOV 12\") == \"nope\"\n\"\"\"\n\nimport sys\nfrom datetime import datetime\n\ntry:\n    # Python 3\n    from itertools import zip_longest\nexcept ImportError:\n    # Python 2\n    from itertools import izip_longest as zip_longest\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('JAN 1') == 'nope'\nassert solution('DEC 31') == 'yup'\nassert solution('SEP 3') == 'nope'\nassert solution('NOV 1') == 'nope'\n\"\"\"\n\nimport datetime",
        "num_ids_2": 26,
        "num_ids_4": 51
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(OCT 31) == yup\n\nSample Input:\nJAN 1\nSample Output:\nnope\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('OCT 30') == 'nope'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\n\n-----Solution-----\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('NOV 25') == 'nope'\nassert solution('JAN 1') == 'yup'\nassert solution('FEB 9') == 'nope'\nassert solution('DEC 24') == 'yup'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"NOV 25\") == \"nope\"\n\nimport os\nimport json\nimport math\nfrom typing import List\nimport re",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('OCT 32') == 'nope'\nassert solution('NOV 30') == 'nope'\nassert solution('NOV 31') == 'yup'\nassert solution('NOV 32') == 'yup'\n\"\"\"\n\nimport datetime\n\nmonth_list = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']\n\ndate_str = input()\ndate_str_split = date_str.split()\nmonth = date_str_split[0]\nday = date_str_split[1]\ndate = datetime.datetime(2020, int(month_list.index(month)+1), int(day))",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"SEP 9\") == \"nope\"\nassert solution(\"SEP 25\") == \"nope\"\nassert solution(\"JAN 10\") == \"nope\"\n\"\"\"\n\nimport datetime",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('JAN 1') == 'nope'\nassert solution('OCT 1') == 'yup'\nassert solution('OCT 1') == 'yup'\nassert solution('JAN 1') == 'nope'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"\"\"#.#.#.#.\n.#.#.#.#\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nera\\nirak\") == \\\n        \"#.#.#.#.\\n#.#.#.#.\\n#.honi#.\\n#oker.#.\\n#.nera#.\\n#irak.#.\\n#.#.#.#.\\n#.#.#.#.\"\n\nprint(solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nera\\nirak\"))\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4 2 2 2\\nhoni\\noker\\nnera\\nirak') == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.'\n\"\"\"\n\nfrom io import StringIO\nfrom typing import List\nfrom unittest import main, TestCase",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \\\n    '#.#.#.#\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n2 2 2 2\\nhoni\\noker\\nera\\nirak') == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#\\n'\n",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4 2 2 honi\\noker\\nnera\\nirak') == '#.#.#.#\\n#.honi#\\n#.oker#\\n#.nera#\\n#.irak#\\n#.#.#.#\\n#.#.#.#'\n\n\"\"\"",
        "num_ids_2": 67,
        "num_ids_4": 67
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \\\n    \"#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#\"\n\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"###.#.#\\n#.#.#.#\\n###honi#\\n.#ker.#\\n#.na#.#\\n###irak#\\n#.#.#.#\\n###.#.#\"\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \\\n    \"#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#\"\nprint(\"PASSED\")",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4 2 2\\nhoni\\noker\\nera\\nnera\") == \"@#@#@#\\n@#honi@#\\n@#@@@@\\n@@@@@@\\n@@@honi@\\n@@@@@@\\n@@@@@@@\\n@#nera@#\\n@#@@@@\\n@@@@@@\\n@@@honi@\\n@@@@@@\\n@@@@@@@\\n@@@@@@@\\n@@@@@@@@\\n@@@@@@@@\\n@@@@@@@@\"\n\"\"\"",
        "num_ids_2": 103,
        "num_ids_4": 103
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\\\n') == '+---+---+---+---+---+---+---+---+\\\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\\\n+---+---+---+---+---+---+---+---+\\\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\\\n+---+---+---+---+---+---+---+---+\\\\n|...|:::|.n.|:::|...|:::|...|:p:|\\\\n+---+---+---+---+---+---+---+---+\\\\n|:::|...|:::|...|:::|...|:::|...|:p:|\\\\n+---+---+---+---+---+---+---+---+\\\\n|...|:::|...|:::|.P.|:::|...|:::|...|:p:|\\\\n+---+---+---+---+---+---+---+---+\\\\n|:P:|...|:::|...|:::|...|:::|...|:::|:P:|\\\\n+---+---+---+---+---+---+---+---+\\\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|:P:|\\\\n+---+---+---+---+---+---+---+---+\\\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\\\n+---+---+---+---+---+---+---+---+\\\\n', 'Invalid solution'\nassert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\\\n') == '+---+---+---+---+---+---+---+---+\\\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\\\n+---+---+---+---+---+---+---+---+\\\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\\\n+---+---+---+---+---+---+---+---+\\\\n|...|:::|.n.|:::|...|:::|...|:p:|\\\\n+---+---+---+---+---+---+---+---+\\\\n|:::|...|:::|...|:::|...|:::|...|:p:|\\\\n+---+---+---+---+---+---+---+---+\\\\n|...|:::|...|:::|.P.|:::|...|:::|...|:p:|\\\\n+---+---+---+---+---+---+---+---+\\\\n|:P:|...|:::|...|:::|...|:::|...|:::|:P:|\\\\n+---+---+---+---+---+---+---+---+\\\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|:P:|\\\\n+---+---+---+---+---+---+---+---+\\\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\\\n+---+---+---+---+---+---+---+---+\\\\n', 'Invalid solution'\nassert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\\\n') == '+---+---+---+---+---+---+---+---+\\\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\\\n+---+---+---+---+---+---+---+---+\\\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\\\n+---+---+---+---+---+---+---+---+\\\\n|...|:::|.n.|:::|...|:::|...|:p:|\\\\n+---+---+---+---+---+---+---+---+\\\\n|:::|...|:::|...|:::|...|:::|...|:p:|\\\\n+---+---+---+---+---+---+---+---+\\\\n|...|:::|...|:::|.P.|:::|...",
        "num_ids_2": 1078,
        "num_ids_4": 1423
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n) == (\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|...|:::|.n.|:::|...|:::|...|:p:|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|:::|...|:::|...|:::|...|:::|...|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|...|:::|...|:::|.P.|:::|...|:::|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|:P:|...|:::|...|:::|...|:::|...|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n)\n\nassert solution(\n    \"Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n) == (\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|...|:::|.n.|:::|...|:::|...|:p:|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|:::|...|:::|...|:::|...|:::|...|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|...|:::|...|:::|.P.|:::|...|:::|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|:P:|...|:::|...|:::|...|:::|...|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n)\n\nassert solution(\n    \"Ke8,Qd8,Ra8,Rh8,Bc8,Bf8,Nb8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n) == (\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|...|:::|.n.|:::|...|:::|...|:p:|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|:::|...|:::|...|:::|...|:::|...|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|...|:::|...|:::|.P.|:::|...|:::|\\n\"\n    \"+---+---+---+---+---+---+---",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n) == \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n) == \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n) == \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n) == \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n) == \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n",
        "num_ids_2": 110,
        "num_ids_4": 220
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\")\n\"\"\"\n\nimport collections\nimport re",
        "num_ids_2": 509,
        "num_ids_4": 509
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\n\"\"\"",
        "num_ids_2": 509,
        "num_ids_4": 509
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\"\n\"\"\"\n\n\"\"\"\nWrite a program to find the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\".\n\n\n\nExample 1:\n\nInput: strs = [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"\nExample 2:\n\nInput: strs = [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings.\n\n\n\nConstraints:\n\n1 <= strs.length <= 200\n0 <= strs[i].length <= 200\nstrs[i] consists of only lower-case English letters.\n\"\"\"\n\n\nclass Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        pass\n        # m = len(strs)\n        # if m == 0:\n        #     return \"\"\n        # min_length = min([len(s) for s in strs])\n        # end = 0\n        # while end < min_length:\n        #     for i in range(1, m):\n        #         if strs[i][end]!= strs[i - 1][end]:\n        #             return strs[0][0:end]\n        #     end += 1\n        # return strs[0][0:end]",
        "num_ids_2": 511,
        "num_ids_4": 511
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4') == '+---+---+---+---+---+---+---+---+'\nassert solution('Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == '+---+---+---+---+---+---+---+---+'\nassert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4') == '+---+---+---+---+---+---+---+---+'\nassert solution('Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == '+---+---+---+---+---+---+---+---+'\nassert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4') == '+---+---+---+---+---+---+---+---+'\n",
        "num_ids_2": 146,
        "num_ids_4": 296
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \\\n    \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\n",
        "num_ids_2": 109,
        "num_ids_4": 109
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6+\\nWhite: Kd1,Ka1,Kf1,Kg1,Kh1,Kb1,Ke1,Kc2,Kd2,Ka2,Kf2,Kg2,Kh2,Kb2,Ke2,Kh3,Kf3,Kg3,Kh3,Kb3,Ke3+\\n\"\n\nassert solution(\"White: Pd1,Pc1,Pa1,Pb1,Kd1,Kc1,Ka1,Kb1,Nf1,Nc2,Nd2,Nf2,Nh2,Ng2,Nh1,Ng1,Kh1,Kf2,Kg2,Kh2,Kg3,Kh3,Kh4,Kf4,Kg4,Kh4,Kf3,Kg3,Kh3,Kb3,Ka3+\\nBlack: Kd8,Kc8,Ka8,Kb8,Kf8,Nc6,Nd6,Nf6,Ng6,Nh6,Nc7,Nd7,Nf7,Ng7,Nh7,Nf8,Ng8,Nh8+\\n\") == \"Black: Kd8,Kc8,Ka8,Kb8,Kf8,Nc6,Nd6,Nf6,Ng6,Nh6,Nc7,Nd7,Nf7,Ng7,Nh7,Nf8,Ng8,Nh8+\\nWhite: Pd1,Pc1,Pa1,Pb1,Kd1,Kc1,Ka1,Kb1,Nf1,Nc2,Nd2,Nf2,Nh2,Ng2,Nh1,Ng1,Kh1,Kf2,Kg2,Kh2,Kg3,Kh3,Kh4,Kf4,Kg4,Kh4,Kb3,Ka3+\\n\"\n\nassert solution(\"White: Kd1,Kc1,Ka1,Kb1,Nf1,Nc2,Nd2,Nf2,Nh2,Ng2,Nh1,Ng1,Kh1,Kf2,Kg2,Kh2,Kg3,Kh3,Kh4,Kf4,Kg4,Kh4,Kb3,Ka3+\\nBlack: Kd8,Kc8,Ka8,Kb8,Kf8,Nc6,Nd6,Nf6,Ng6,Nh6,Nc7,Nd7,Nf7,Ng7,Nh7,Nf8,Ng8,Nh8+\\n\") == \"Black: Kd8,Kc8,Ka8,Kb8,Kf8,Nc6,Nd6,Nf6,Ng6,Nh6,Nc7,Nd7,Nf7,Ng7,Nh7,Nf8,Ng8,Nh8+\\nWhite: Kd1,Kc1,Ka1,Kb1,Nf1,Nc2,Nd2,Nf2,Nh2,Ng2,Nh1,Ng1,Kh1,Kf2,Kg2,Kh2,Kg3,Kh3,Kh4,Kf4,Kg4,Kh4,Kb3,Ka3+\\n\"\n\nassert solution(\"White: Kd1,Kc1,Ka1,Kb1,Nf1,Nc2,Nd2,Nf2,Nh2,Ng2,Nh1,Ng1,Kh1,Kf2,Kg2,Kh2,Kg3,Kh3,Kh4,Kf4,Kg4,Kh4,Kb3,Ka3+\\nBlack: Kd8,Kc8,Ka8,Kb8,Kf8,Nc6,Nd6,Nf6,Ng6,Nh6,Nc7,Nd7,Nf7,Ng7,Nh7,Nf8,Ng8,Nh8+\\n\") == \"Black: Kd8,Kc8,Ka8,Kb8,Kf8,Nc6,Nd6,Nf6,Ng6,Nh6,Nc7,Nd7,Nf7,Ng7,Nh7,Nf8,Ng8,Nh8+\\nWhite: Kd1,Kc1,Ka1,Kb1,Nf1,Nc2,Nd2,Nf2,Nh2,Ng2,Nh1,Ng1,Kh1,Kf2,Kg2,Kh2,Kg3,Kh3,Kh4,Kf4,Kg4,Kh4,Kb3,Ka3+\\n\"\n\nassert solution(\"White: Kd1,Kc1,Ka1,Kb1,Nf1,Nc2,Nd2,Nf2,Nh2,Ng2,Nh1,Ng1,Kh1,Kf2,Kg2,Kh2,Kg3,Kh3,Kh4,Kf4,Kg4,Kh4,Kb3,Ka3+\\nBlack: Kd",
        "num_ids_2": 627,
        "num_ids_4": 1315
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(White) == '+---+---+---+---+---+---+---+---+'\nassert solution(Black) == '+r:|n:|b:|q:|k:|b:|:::|r:|'\n\nprint('PASSED')\n\n-----Solution-----\n\nfrom string import ascii_lowercase\n\nwhite = input()\nblack = input()",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1.000000 4.000000') == \"Diablo is happy!\"\nassert solution('1.000000004 1.000000004') == \"Need more materials!\"\n\"\"\"\n\na, n = map(float, input().split())\n\nprint(\"Need more materials!\") if n * a < 100 else print(\"Diablo is happy!\")\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1.0 4.0') == 'Diablo is happy!'\nassert solution('5.0 3.0') == 'Need more materials!'\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('0.000001 1.000000') == 'Need more materials!'\n\"\"\"\n\nimport sys",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('1.1 4.1') == 'Need more materials!'\n\"\"\"",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"3.00000 6.00000\") == \"Need more materials!\"\n\n\"\"\"\n\nfrom math import *",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"3.56432 3.86583\") == \"Need more materials!\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('0.5 4.5') == 'Need more materials!'\n\"\"\"\nimport sys\nA = float(sys.stdin.readline())\nN = int(sys.stdin.readline())\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '1.000000 4.000000'\n) == 'Diablo is happy!'\n\nassert solution(\n    '10.0 4.0'\n) == 'Need more materials!'\n\nassert solution(\n    '10.0 20.0'\n) == 'Need more materials!'\n\nassert solution(\n    '10.0 1.0'\n) == 'Diablo is happy!'\n\nassert solution(\n    '10.0 4.0'\n) == 'Diablo is happy!'",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"0.500000 4.500000\") == \"Need more materials!\"\nassert solution(\"1.000000 0.500000\") == \"Need more materials!\"\nassert solution(\"0.500000 1.000000\") == \"Need more materials!\"\nassert solution(\"1.000000 1.000000\") == \"Diablo is happy!\"\n",
        "num_ids_2": 37,
        "num_ids_4": 73
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1.0 4.0') == 'Diablo is happy!'\nassert solution('1.1 4.0') == 'Need more materials!'\nassert solution('1.0 1.0') == 'Diablo is happy!'\n\"\"\"\n\nimport math\nimport sys\n\n_, A = sys.stdin.readline().split()\nA = float(A)\n\nN = sys.stdin.readline().strip()\nN = int(N)\n\nans = math.sqrt(A)",
        "num_ids_2": 35,
        "num_ids_4": 53
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"10 1 10 2 2\") == \"use the stairs\"\nassert solution(\"1 1 1 1 1\") == \"use the stairs\"\nassert solution(\"100 101 100 101\") == \"use the stairs\"\nassert solution(\"100 101 100 101 100 101\") == \"use the stairs\"\n\n-----Constraints-----\n$f$ will always be greater than or equal to 2 and less than or equal to 10^6$.\n$s$ and $g$ will always be between 1 and $f$.\n$u$ and $d$ will always be between 0 and 10^6$.\n\n'''",
        "num_ids_2": 30,
        "num_ids_4": 61
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"10 1 10 2 20\") == \"use the stairs\"\n\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 1 10 2 1') == '6'\nassert solution('10 1 10 4 1') == '6'\nassert solution('100 1 100 4 1') == 'use the stairs'\nassert solution('100 1 1 2 1') == '6'\nassert solution('100 1 1 4 1') == 'use the stairs'\n\n-----Notes-----\n\"\"\"\n\nimport sys",
        "num_ids_2": 28,
        "num_ids_4": 58
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 10 2 1') == 'use the stairs'\nassert solution('10 1 10 2 1') == '6'\nassert solution('10 5 10 2 1') == '8'\n\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 43
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"6 1 5 2 1\") == \"use the stairs\"\nassert solution(\"5 1 1 2 1\") == \"use the stairs\"\nassert solution(\"4 1 5 2 1\") == \"4\"\nassert solution(\"1 5 5 2 1\") == \"use the stairs\"\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\n\n\"\"\"\n\nf, s, g, u, d = [int(i) for i in stdin.split()]\n\nsteps = 0\n\nwhile s!= g:\n    steps += 1\n    if s > g:\n        s -= d\n        if s == g:\n            break\n    elif s < g:\n        s += u\n        if s == g:\n            break\n\nprint(steps) if s == g else print('use the stairs')",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\n\"\"\"\n\nf,s,g,u,d = [int(i) for i in input().split()]\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"10 2 10 1 2\") == \"use the stairs\"\nassert solution(\"4 2 4 3 1\") == \"use the stairs\"\nassert solution(\"4 2 4 3 0\") == \"use the stairs\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.readlines()\n\nf = int(stdin[0].split()[0])\ns = int(stdin[0].split()[1])\ng = int(stdin[0].split()[2])\nu = int(stdin[0].split()[3])\nd = int(stdin[0].split()[4])\n\nd_floor = 0\nf_floor = 0\n\nwhile s > g:\n    if u > 0:\n        if u > d:\n            u = u - d\n            d_floor = d_floor + d\n        elif d > u:\n            u = u - d\n            d_floor = d_floor + d\n    elif d > 0:\n        if d > u:\n            d = d - u\n            u = 0\n            f_floor = f_floor + u\n        elif u > d:\n            d = d - u\n            u = 0\n            f_floor = f_floor + u\n\nprint(d_floor + f_floor)\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n500\\n120\\n75') == '128.8'\nassert solution('3\\n5\\n5\\n1') == '4.0'\nassert solution('3\\n2\\n3\\n5') == '8.0'\nassert solution('3\\n0\\n0\\n0') == '0.0'\nassert solution('3\\n7\\n9\\n9') == '14.0'\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\\n89.06666666666666\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == '128.8'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\n500\n120\n75\"\"\") == \"128.8\"\n\nassert solution(\"\"\"2\n1\n9\n\"\"\") == \"9\"\n\nassert solution(\"\"\"4\n1\n9\n90\n900\"\"\") == \"88.33\"\n\"\"\"\n)\n\nprint(\"Successfully submitted\")\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n3\n500\n120\n75\n''') == '128.8'\nassert solution('''\n4\n150\n220\n350\n450\n''') == '208.5'\nassert solution('''\n5\n50\n120\n150\n180\n240\n''') == '110.0'\nassert solution('''\n7\n50\n120\n150\n180\n220\n250\n280\n''') == '140.5'\nassert solution('''\n9\n50\n120\n150\n180\n250\n180\n240\n210\n200\n''') == '115.0'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\"\nassert solution(\"1\\n1000\") == \"1000.0\"\nassert solution(\"3\\n1000\\n120\\n75\") == \"89.06666666666666\"\n\"\"\"\n\nimport math\nimport sys",
        "num_ids_2": 36,
        "num_ids_4": 60
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\"\n\n-----Challenge-----\n\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\"\nassert solution(\"2\\n400\\n400\") == \"400.0\"\n\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\"\nassert solution(\"4\\n5\\n2\\n7\") == \"5.4\"\nassert solution(\"6\\n9\\n9\\n9\\n9\\n9\") == \"9.8\"\n\nprint(solution(stdin))\n",
        "num_ids_2": 42,
        "num_ids_4": 69
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3\\n2\\n1\\n') == '50.0'\nassert solution('4\\n3\\n2\\n1\\n') == '128.8'\n\n------Hints------\nRemember that the group score for your university is the average new group score if exactly one of your students leaves.\nUse the fact that you can apply the formula\\[ \\frac{1}{5} \\sum _{i=0}^{n-1} s_ i \\cdot \\left( \\frac{4}{5} \\right)^i \\] to calculate the average new group score if exactly one of your students leaves.\n\"\"\"\n\nfrom itertools import combinations\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 45 65 84 346') == '4'\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 45 65 84 346\") == 4\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n\n\"\"\"\n\n\nimport sys\nfrom dataclasses import dataclass\nfrom typing import List\n\n\n@dataclass\nclass Arguments:\n    raw: str\n\n\n@dataclass\nclass CommandResult:\n    output: str\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n1 45 65 84 346''') == '4'\n\"\"\"\n\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nn = int(input())\nd = list(map(int, input().split()))\nd_ar = np.array(d)\n\ndays_before_new_year = np.zeros(366)\nfor i in range(n):\n    days_before_new_year[d[i]] += 1\n    \n\ntotal_cleanup_phase_count = 0\nfor i in range(1, len(days_before_new_year)):\n    if days_before_new_year[i] > days_before_new_year[i-1]:\n        total_cleanup_phase_count += 1\n        days_before_new_year[i:] -= 1\n\nprint(total_cleanup_phase_count)",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n'''\n\nimport math",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 5 3') == '1'\nassert solution('4\\n1 5 3') == '2'\nassert solution('7\\n1 1 1 1 1 1 1') == '0'\nassert solution('12\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '1'\nassert solution('16\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1",
        "num_ids_2": 30,
        "num_ids_4": 80
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n\nSolution:\n\nimport sys\n\nn = int(sys.stdin.readline())\nd = [0] * 366\nfor i in sys.stdin.readline().strip().split():\n    d[int(i)] += 1\nfor i in range(1, 366):\n    d[i] += d[i - 1]\nans = 0\nfor i in range(366):\n    if d[i] > 20:\n        ans += (d[i] - 20) // 5\n        if (d[i] - 20) % 5 > 0:\n            ans += 1\nprint(ans)\n\n'''\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == 4\n\n------Solution------\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\n\nSolution 1\n--------------------\nfrom collections import Counter",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\n\n-----Notes-----\nYou may want to use this challenge as a starting point for a problem solving session, as it is fairly simple and can be solved easily with basic tools.\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''7 4\n#######\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(int(input()))\nprint(solution(str(input())))\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == 1\nassert solution(\"7 4\\n#######\\n#.P.GTG#\\n#.G.TGG#\\n#######\") == 2\nassert solution(\"7 4\\n#######\\n#P.GTG#\\n#.G.#TGG#\\n#######\") == 2\nassert solution(\"7 4\\n#######\\n#.G.#TGG#\\n#P.GTG#\\n#######\") == 0\n",
        "num_ids_2": 67,
        "num_ids_4": 135
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"\nassert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"\nassert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"\nassert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"\nassert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"\n",
        "num_ids_2": 68,
        "num_ids_4": 136
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == '1'\nprint('Test pass.')",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n.P#T#.\\n#.G.T#\\n#..#G#\") == \"3\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == \"5\"\n",
        "num_ids_2": 318,
        "num_ids_4": 318
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('_') == ''\nassert solution('__') == ''\nassert solution('__$') == ''\nassert solution('__$$') == ''\n",
        "num_ids_2": 16,
        "num_ids_4": 33
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == 5\n",
        "num_ids_2": 314,
        "num_ids_4": 314
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == 5\nprint(solution(stdin))\n-----\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13 50\") == \"5\"\nassert solution(\"13 51\") == \"8\"\nassert solution(\"13 52\") == \"8\"\n\"\"\"\n\nfrom collections import deque\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$_________$_$_________$_$_____$_$________\\n____$___$______$___$___$______$___$____$___$_____\\n___$____$____$_____$___$____$____$____$___$_____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____\\n\") == 5\n\"\"\"\n\n\"\"\"\n- The complexity of this solution is O(NM) = O(N + M), where N and M are the length of the input string and columns.\n\n\"\"\"",
        "num_ids_2": 304,
        "num_ids_4": 304
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n\") == \"5\"\n\n\"\"\"\n\nN, M = map(int, input().split())\n\nA = [list(input()) for i in range(N)]\n\ncnt = 0\nfor i in range(N):\n    for j in range(M):\n        if A[i][j] == '$':\n            cnt += 1\n\nprint(cnt)\n",
        "num_ids_2": 318,
        "num_ids_4": 318
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n\") == \"5\"\n\nassert solution(\"13 50\\n______$$$________$$$______$$$________$$$______$$$____\\n______$$$________$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n____$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n\") == \"6\"\n\n\"\"\"\n\nfrom typing import List\nfrom collections import deque\n",
        "num_ids_2": 636,
        "num_ids_4": 636
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$') == 5\n\nassert solution('3 3\\n_$_\\n_$_\\n_$_') == 0\nassert solution('3 2\\n$_\\n_$\\n_$') == 1\nassert solution('5 5\\n_$$_\\n_$$_\\n__$$\\n_$$_\\n__$$') == 2\nassert solution('5 5\\n_$_\\n_$_\\n__$\\n_$_\\n__$') == 4\n",
        "num_ids_2": 338,
        "num_ids_4": 391
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$\\n\") == 5\n\n\"\"\"\n\nimport numpy as np",
        "num_ids_2": 308,
        "num_ids_4": 308
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\nassert solution('i am a pig') == 'iay ay amay ayay ebay ebay ayay ebay iyay atay itay itayay atinlay'\nassert solution('i saw a cat') == 'iay saway aay ebay aay aay ebay iday ayay atay itay ayay atinlay'\nassert solution('hello how are you') == 'hellohow areyouay ebay ouyay ebay ouyay ajay ayay atinlay'\n\"\"\"\n\nimport re\nimport math\nimport logging\nlogging.basicConfig(level=logging.DEBUG)",
        "num_ids_2": 68,
        "num_ids_4": 142
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\nassert solution('i cant speak Pig Latin') == 'iyay antcay eakspay igpay atinlay'\nassert solution('i am a pig') == 'iay ayam ayay'\nassert solution('is it be, or is it a pig?') == 'is itbay or is itayay aayay'\nassert solution('I am a pig') == 'Iay ayam ayay'\n",
        "num_ids_2": 55,
        "num_ids_4": 102
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\nassert solution('I can speak pig latin') == 'Iay ay cannspay ucklpay igpay atinlay'\nassert solution('I can speak pig latin and other things too') == 'Iay ay cannspay ucklpay igpay atinlay anday ay otheray too'\nassert solution('and I can speak pig latin too') == 'and Iay ay cannspay ucklpay igpay atinlay too'\nassert solution('this is a text for pig latin translation') == 'htisay isyay aaystpay evlpay igpay atinlay'\n",
        "num_ids_2": 57,
        "num_ids_4": 129
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n'''\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('i can speak pig latin') == 'iayay antcay eakspay igpay atinlay'\nassert solution('i cant speak pig latin') == 'iayay anctay eakspay igpay atinlay'\n\"\"\"\n\nimport re",
        "num_ids_2": 37,
        "num_ids_4": 66
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\n-------\nSample Input (stdin):\ni cant speak pig latin\n    this is a test\n    this is another test\n    this is the last test\nSample Output (stdout):\niyay antcay eakspay igpay atinlay\n\n-------\n\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"nymble\"\nassert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"Anywhere is fine I guess\"\n",
        "num_ids_2": 94,
        "num_ids_4": 94
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"nymble\"\n\"\"\"\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n') == 'nymble\\n'\nassert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n') == 'Anywhere is fine I guess'\nassert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\n') == 'Anywhere is fine I guess'",
        "num_ids_2": 100,
        "num_ids_4": 147
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\n\"\"\"\n\nfrom typing import List, Optional\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n\") == 'nymble'\nassert solution(\"4\\n3\\npea soup\\npancakes\\nnymble\\npunsch\\n\") == 'Anywhere is fine I guess'",
        "num_ids_2": 84,
        "num_ids_4": 84
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nnymble\\npancakes\\npea soup\") == \"nymble\"\n\"\"\"\n\nfrom typing import List\n\nn = int(input())\n\nmenu = []\n\nfor _ in range(n):\n    k = int(input())\n    menu.append(input().split())\n\npea_soup = False\npancakes = False\n\nfor menu_item in menu:\n    for dish in menu_item:\n        if dish == \"pea soup\":\n            pea_soup = True\n        if dish == \"pancakes\":\n            pancakes = True\n    if pea_soup and pancakes:\n        print(\"Anywhere is fine I guess\")\n        break",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n') == 'nymble'\nassert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\n') == 'Anywhere is fine I guess'\n\"\"\"",
        "num_ids_2": 94,
        "num_ids_4": 94
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n') == 'nymble'\n\"\"\"\n",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(s) == \"nymble\"\n'''",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 0 15\") == 3\n\"\"\"\na, b, h = map(int, stdin.split())\nprint(a // (b - a) + h // a)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 0 15') == '3'\nassert solution('0 15 0') == '0'\nassert solution('15 0 15') == '1'\nassert solution('0 15 15') == '4'\nassert solution('15 15 15') == '6'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 0 15\n''') == '3'\nassert solution('''4 0 11\n''') == '4'\nassert solution('''5 0 1\n''') == '1'\nassert solution('''5 0 3\n''') == '1'\nassert solution('''5 0 15\n''') == '3'\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 0 15\") == 3\nassert solution(\"10 20 15\") == 1\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.readlines()",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 0 15') == 3\n\"\"\"\n\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 0 15\") == 3\nassert solution(\"100 1 100\") == 2\nassert solution(\"100 1000 100\") == 1\nassert solution(\"0 0 1\") == 1\nassert solution(\"1 0 1\") == 1\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 0 15\") == 3\n\"\"\"\n\nimport os\nimport sys\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 0 15') == '3'\nassert solution('5 5 15') == '0'\nassert solution('5 0 2') == '1'\nassert solution('1 0 2') == '1'\n\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 0 15\") == 3\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 0 15\") == \"3\"\nprint(solution(\"5 0 15\"))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('11 15') == '19'\n'''\n\na, b = map(int, input().split())\nprint(a+b)\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 15\") == \"19\"\n\"\"\"\n\n\"\"\"\n    \"Solve\" it without any use of inbuilt functions.\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 15\") == \"19\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11 15\") == \"19\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 16\\n\") == 19\n\"\"\"\n\nimport unittest\nfrom collections import Counter\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 15\") == \"19\"\nassert solution(\"3 4\") == \"6\"\n\"\"\"\n\na,b = map(int,input().split())\nprint(b+a)",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 15\") == \"19\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11 15\") == \"19\"\n\n---Solution---\n\"\"\"\n\nr1, s = input().split()\nr1, s = int(r1), int(s)\nr2 = r1 + (s - r1) // 2\nprint(r2)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 15\") == \"19\"\nassert solution(\"4 6\") == \"5\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 -1\") == \"0\"\nassert solution(\"-1 -1\") == \"0\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 15\") == \"19\"\nprint(solution(\"11 15\"))",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('East South West') == 'No'\nassert solution('West East South') == 'Yes'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('North West South') == 'No'\nassert solution('South East West') == 'No'\nassert solution('South West South') == 'No'\nassert solution('South East South') == 'Yes'\n\"\"\"\n\na, b, c = stdin.split(' ')",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('South East West') == 'No'\n\"\"\"\n\nimport unittest\n\nfrom collections import deque\n\nclass Car:\n    def __init__(self, curr_dir, next_dir):\n        self.curr_dir = curr_dir\n        self.next_dir = next_dir",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"East West East\") == \"No\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"South West East\"\n) == \"Yes\"\n\nassert solution(\n    \"North East West\"\n) == \"No\"\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n\"\"\"\n\n\n\"\"\"\nSolution:\n\n1. Assert that you are arriving straight from South\n2. Assert that the other vehicle is approaching from West\n3. Assert that you are turning left to leave towards East\n4. Assert that you are turning right to leave towards West\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"East South East\") == \"No\"\n\nassert solution(\"North East South\") == \"No\"\nassert solution(\"East North South\") == \"Yes\"\n\nassert solution(\"North East West\") == \"No\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('North South East') == 'No'\nassert solution('East South West') == 'Yes'\nassert solution('West North East') == 'No'\nassert solution('East South East') == 'No'\n\n\"\"\"\n\nimport sys\n\na, b, c = sys.stdin.read().strip().split()",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'South West East'\n) == 'Yes'\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('South East West') == 'No'\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 16\nagain\npirpumsemoystoal''') =='marywasnosyagain'\nassert solution('''5 16\npi\nrp\np\nu\nm\nem\ns\nem\no\ny\nst\no\na\ng\nagain\n''') =='mwssnagain'\n'''\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\n\"\"\"\n\n\"\"\"\nn, m = [int(i) for i in input().split()]\n\nkey = [i for i in input().split()][:n]\n\ntext = [i for i in input().split()][:m]\n\nfor i in range(n):\n    text[i] = chr((ord(key[i]) - 97 + ord(text[i]) - 97) % 26 + 97)\n\nprint(''.join(text))\n\"\"\"\n\nn, m = [int(i) for i in input().split()]\n\nkey = [i for i in input().split()][:n]\n\ntext = [i for i in input().split()][:m]\n\nkey = key + [i for i in text]",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"2 3\\na b c\\nabacabad\"\n) == \"cba\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 16\\nbob\\npirpumsemoystoal\") == \"marywasnosyagain\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"5 16\nagain\"\"\") == \"marywasnosyagain\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 16\\naagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 16\\nagain\\npirpumsemoystoal') =='marywasnosyagain'\nassert solution('5 20\\nagain\\npirpumsemoystoal') =='marywasnosyagain'\nassert solution('6 21\\nagain\\npirpumsemoystoal') =='marywasnosyagain'\nassert solution('7 22\\nagain\\npirpumsemoystoal') =='marywasnosyagain'\n\nassert solution('5 20\\nagain\\npirpumsemoystoal') =='marywasnosyagain'\n",
        "num_ids_2": 56,
        "num_ids_4": 112
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 16\\n again\\n pirpumsemoystoal\") =='marywasnosyagain'\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 16\nagain\npirpumsemoystoal''') =='marywasnosyagain'\nprint('Test pass.')\n\n---",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().strip().split())\ns = sys.stdin.readline().strip()\nt = sys.stdin.readline().strip()\n\nk = [0]\nfor i in range(1, n):\n    for j in range(26):\n        if ord(s[i]) + j < ord(t[i]):\n            k.append((ord(s[i]) + j) % ord(t[i]))\n            break\n        if j == 25:\n            k.append(ord(s[i]) + j + 1)\n\nprint(''.join(map(chr, k)))",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Even'\nassert solution('4') == 'Odd'\nassert solution('5') == 'Odd'\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0\") == \"Odd\"\nassert solution(\"1\") == \"Either\"\nassert solution(\"2\") == \"Even\"\nassert solution(\"3\") == \"Odd\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Even'\nassert solution('5') == 'Even'\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"Either\"\nassert solution(\"2\") == \"Odd\"\nassert solution(\"3\") == \"Even\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 'Either'\nassert solution('0') == 'Odd'\nassert solution('2') == 'Even'\nassert solution('9') == 'Odd'\n\n'''",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"Either\"\nassert solution(\"5\") == \"Odd\"\nassert solution(\"15\") == \"Odd\"\nassert solution(\"100\") == \"Even\"\nassert solution(\"10\") == \"Odd\"\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Odd\"\nassert solution(\"2\") == \"Even\"\nassert solution(\"3\") == \"Odd\"\nassert solution(\"4\") == \"Odd\"\nassert solution(\"5\") == \"Even\"\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Even'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Either'\nassert solution('5') == 'Odd'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Odd'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'Either'\nassert solution('10') == 'Either'\nassert solution('8') == 'Odd'\nassert solution('22') == 'Even'\nassert solution('100') == 'Even'\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == '3'\nassert solution(1) == '1'\nassert solution(5926) == '4'\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 31
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\nprint(solution(stdin=input))\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5\n314\n1\n5926\n5\n35897\"\"\") == \"\"\"3\n1\n4\n1\n5\"\"\"\n\"\"\"\nfrom typing import List",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\nprint(\"tests passed\")",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\nassert solution('2\\n5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n5\\n3\\n2\\n0'\nassert solution('2\\n2\\n5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n5\\n3\\n2\\n0'\nassert solution('2\\n1\\n2\\n5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n5\\n3\\n2\\n0'\n\n\"\"\"",
        "num_ids_2": 86,
        "num_ids_4": 187
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5\n314\n1\n5926\n5\n35897\n\"\"\") == \"3\\n1\\n4\\n1\\n5\"\n\"\"\"\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\n\n-------------------------------------------------------\n\nInput:\n5\n314\n1\n5926\n5\n35897\n\nOutput:\n3\n1\n4\n1\n5\n\nSolution:\nlines = stdin.readlines()\ncount = 0\nfor i in range(len(lines)):\n    count = len(lines[i].strip())\n    print(count)\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n314\n1\n5926\n5\n35897\n\"\"\") == \"3\\n1\\n4\\n1\\n5\"\nprint(solution(\"\"\"\n5\n314\n1\n5926\n5\n35897\n\"\"\"))\nprint(solution(\"\"\"\n\n5\n314\n1\n5926\n5\n35897\n\"\"\"))\n\nassert solution(\"\"\"\n5\n314\n1\n5926\n5\n35897\n\"\"\") == \"3\\n1\\n4\\n1\\n5\"\nassert solution(\"\"\"\n5\n314\n1\n5926\n5\n35897\n\"\"\") == \"3\\n1\\n4\\n1\\n5\"\nassert solution(\"\"\"\n5\n314\n1\n5926\n5\n35897\n\"\"\") == \"3\\n1\\n4\\n1\\n5\"\nassert solution(\"\"\"\n5\n314\n1\n5926\n5\n35897\n\"\"\") == \"3\\n1\\n4\\n1\\n5\"\n",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the') == 'yes\\nno\\nno\\nyes\\nyes'\n\nsolution('9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the')",
        "num_ids_2": 70,
        "num_ids_4": 70
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9 5\\nc t\\ni r\\nk p\\n'\n'o c\\n'\n'r o\\n'\n't e\\n'\n't f\\n'\n'u h\\n'\n'w p\\n'\n'we we\\n'\n'can the\\n'\n'work people\\n'\n'it of') == 'yes\\nno\\nno\\nyes\\nyes\\n'\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 5\\nc t\\ni r\\nk p\\no c\\r o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the') == 'no yes\\nno\\nyes\\nyes yes\\nno\\nyes'\nassert solution('9 5\\nc t\\ni r\\nk p\\no c\\r o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the') == 'no yes\\nno\\nyes\\nyes yes\\nno\\nyes'\nassert solution('9 5\\nc t\\ni r\\nk p\\no c\\r o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the') == 'no yes\\nno\\nyes\\nyes yes\\nno\\nyes'\nassert solution('9 5\\nj o\\nk p\\no c\\r o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the') == 'yes\\nno\\nno\\nyes yes\\nno\\nyes'\nassert solution('9 5\\nj o\\nk p\\no c\\r o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the') == 'yes\\nno\\nno\\nyes yes\\nno\\nyes'\n",
        "num_ids_2": 150,
        "num_ids_4": 297
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 5\\n\"\n\"c t\\n\"\n\"i r\\n\"\n\"k p\\n\"\n\"o c\\n\"\n\"r o\\n\"\n\"t e\\n\"\n\"t f\\n\"\n\"u h\\n\"\n\"w p\\n\"\n\"we we\\n\"\n\"can the\\n\"\n\"work people\\n\"\n\"it of\\n\") == \"yes\\nno\\nno\\nyes\\nyes\\n\"\nprint(\"Passed!\")",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\r o\\nt e\\n t f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\") == \"yes\\nno\\nno\\nyes\\nyes\"\n\n\"\"\"\n\nfrom collections import defaultdict\nimport numpy as np",
        "num_ids_2": 67,
        "num_ids_4": 67
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 5\\nc t\\ni r\\nk p\\no c\\ror o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of') == 'yes\\nno\\nno\\nyes\\nyes'\nassert solution('7 10\\nh c\\no k\\nh m\\no k\\nx i\\nh o\\nx o\\nt t\\nh x\\no x\\nx o\\nx x\\nx h\\nx i') == 'yes\\nno\\nyes\\nyes'\nassert solution('7 10\\nh c\\no k\\nh m\\no k\\nx i\\nh o\\nx o\\nt t\\nh x\\no x\\nx o\\nx x\\nx h\\nx i') == 'no\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno'\nassert solution('7 10\\nh c\\no k\\nh m\\no k\\nx i\\nh o\\nx o\\nt t\\nh x\\no x\\nx o\\nx x\\nx h\\nx i') == 'no\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno'\nassert solution('7 10\\nh c\\no k\\nh m\\no k\\nx i\\nh o\\nx o\\nt t\\nh x\\no x\\nx o\\nx x\\nx h\\nx i') == 'no\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno'\n",
        "num_ids_2": 138,
        "num_ids_4": 312
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 3\\nh e\\np e\\na h\\nh i\\na i\\nu i\\nu o\\nh o\\na o\\ne l\\na l\\no i\\nh e\\nh i\\nu i\\nh u\\na u\\na p\\nh o\\nh u\\na u\\nh u\\na i\\nh e\\nh i\\nu i\\nh u\\na u\\nh u\\nh u\\na u\\nh o\\nh o\\nh o\\nh u\\na u\\nh o\\nh i\\nh e\\nh i\\nu i\\nh u\\nh o\\na o\\nh o\\nh u\\nh i\\nh e\\nh i\\nh u\\nh o\\nh u\\nh u\\nh u\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\nh o\\",
        "num_ids_2": 1323,
        "num_ids_4": 1323
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1') == 'yes'\nassert solution('2 1') == 'no'\nassert solution('1 1\\n a b') == 'yes'\nassert solution('1 1\\n a b\\n a b') == 'yes'\n",
        "num_ids_2": 19,
        "num_ids_4": 45
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''9 5\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the''') == '''yes\nno\nno\nyes\nyes\nyes\nyes\nyes\nyes\nno\nyes'''\nprint(solution(stdin))",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\r o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"yes\\nno\\nno\\nyes\\nyes\\n\"",
        "num_ids_2": 72,
        "num_ids_4": 72
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\ncarrots?\\nbunnies\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"\nprint(solution(\"2 1\\ncarrots?\\nbunnies\"))\nassert solution(\"3 2\\ncarrots?\\nhuffle-puff\\nfriends\") == \"4\"\nprint(solution(\"3 2\\ncarrots?\\nhuffle-puff\\nfriends\"))\nassert solution(\"2 2\\ncarrots?\\nhuffle-puff\\nfriends\") == \"0\"\nprint(solution(\"2 2\\ncarrots?\\nhuffle-puff\\nfriends\"))\n\n\"\"\"\n\n\"\"\"\n\n1) \u0414\u0430\u043d\u043e \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430 a, b, c. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u0435\u0441\u0442\u044c \u043b\u0438 \u0441\u0440\u0435\u0434\u0438 \u043d\u0438\u0445 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e \u0447\u0435\u0442\u043d\u043e\u0435.\n\n-----Input-----\n5\n1\n3\n7\n9\n12\n\n-----Output-----\nYES\n\n\"\"\"\n\n\"\"\"\n\n2) \u0414\u0430\u043d\u044b \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430 a, b, c. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u0435\u0441\u0442\u044c \u043b\u0438 \u0441\u0440\u0435\u0434\u0438 \u043d\u0438\u0445 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0449\u0435\u0435.\n\n-----Input-----\n5\n1\n2\n5\n6\n9\n\n-----Output-----\nYES\n\n\"\"\"\n\n\"\"\"\n\n3) \u0414\u0430\u043d\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e a \u0438 \u0446\u0435\u043b\u043e\u0435 \u043d\u0435\u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n. \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c a^n.\n\n-----Input-----\n5\n2\n\n-----Output-----\n32\n\n\"\"\"\n\n\"\"\"\n\n4) \u0414\u0430\u043d\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e a \u0438 \u0446\u0435\u043b\u043e\u0435 \u043d\u0435\u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n. \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c an.\n\n-----Input-----\n5\n2\n\n-----Output-----\n10\n\n\"\"\"\n\n\"\"\"\n\n5) \u0414\u0430\u043d\u044b \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430 a, b, c. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u0435\u0441\u0442\u044c \u043b\u0438 \u0441\u0440\u0435\u0434\u0438 \u043d\u0438\u0445 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e \u0447\u0435\u0442\u043d\u043e\u0435 \u0438 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e \u043d\u0435\u0447\u0435\u0442\u043d\u043e\u0435.\n\n-----Input-----\n5\n1\n2\n3\n\n-----Output-----\nYES\n\n\"\"\"\n\n\"\"\"\n\n6) \u0414\u0430\u043d\u044b \u0447\u0435\u0442\u044b\u0440\u0435 \u0447\u0438\u0441\u043b\u0430 a, b, c, d. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u0435\u0441\u0442\u044c \u043b\u0438 \u0441\u0440\u0435\u0434\u0438 \u043d\u0438\u0445 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e \u0447\u0435\u0442\u043d\u043e\u0435 \u0438 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e \u043d\u0435\u0447\u0435\u0442\u043d\u043e\u0435.\n\n-----Input-----\n5\n1\n2\n3\n4\n\n-----Output-----\nNO\n\n\"\"\"\n\n\"\"\"\n\n7) \u0414\u0430\u043d\u044b \u0447\u0435\u0442\u044b\u0440\u0435 \u0447\u0438\u0441\u043b\u0430 a, b, c, d. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u0435\u0441\u0442\u044c \u043b\u0438 \u0441\u0440\u0435\u0434\u0438 \u043d\u0438\u0445 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e \u043d\u0435\u0447\u0435\u0442\u043d\u043e\u0435 \u0438 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e \u0447\u0435\u0442\u043d\u043e\u0435.\n\n-----Input-----\n5\n1\n2\n3\n4\n\n-----Output-----\nYES\n\n\"\"\"\n\n\"\"\"\n\n8) \u0414\u0430\u043d\u044b \u0447\u0435\u0442\u044b\u0440\u0435 \u0447\u0438\u0441\u043b\u0430 a, b, c, d. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u0435\u0441\u0442\u044c \u043b\u0438 \u0441\u0440\u0435\u0434\u0438 \u043d\u0438\u0445 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e \u043d\u0435\u0447\u0435\u0442\u043d\u043e\u0435 \u0438 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e \u0447\u0435\u0442\u043d\u043e\u0435.\n\n-----Input-----\n5\n1\n2\n3\n4\n\n-----Output-----\nNO\n\n\"\"\"\n\n\"\"\"\n\n9) \u0414\u0430\u043d\u044b \u0447\u0435\u0442\u044b\u0440\u0435 \u0447\u0438\u0441\u043b\u0430 a, b, c, d. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u0435\u0441\u0442\u044c \u043b\u0438 \u0441\u0440\u0435\u0434\u0438 \u043d\u0438\u0445 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e \u0447\u0435\u0442\u043d\u043e\u0435 \u0438 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e \u043d\u0435\u0447\u0435\u0442\u043d\u043e\u0435.\n\n-----Input-----\n5\n1\n2\n3\n4\n\n-----Output-----\nYES\n\n\"\"\"\n\n\"\"\"\n\n10) \u0414\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u0437\u0430 \u043d\u0438\u043c \u0447\u0435\u0442\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e.\n\n-----Input-----\n5\n\n-----Output-----\n6\n\n\"\"\"\n\n\"\"\"\n\n11) \u0414\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u0437\u0430 \u043d\u0438\u043c \u043d\u0435\u0447\u0435\u0442\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e.\n\n-----Input-----\n5\n\n-----Output-----\n4\n\n\"\"\"\n\n\"\"\"\n\n12) \u0414\u0430\u043d\u044b \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430 a, b, c. \u0412\u044b\u044f\u0441\u043d\u0438\u0442\u044c, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0441 \u0442\u0430\u043a\u0438\u043c\u0438 \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u043c\u0438. \u0415\u0441\u043b\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u0442\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430.\n\n-----Input-----\n5\n6\n7\n\n-----Output-----\n\u0422\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442.\n\n\"\"\"\n\n\"\"\"\n\n13) \u0414\u0430\u043d\u044b \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430 a, b, c. \u0412\u044b\u044f\u0441\u043d\u0438\u0442\u044c, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0442\u0440\u0435\u0443",
        "num_ids_2": 45,
        "num_ids_4": 70
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == '1'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 1\ncarrots?\nbunnies\nhufflepuff\n''') == 1\n\nassert solution('''3 2\ncarrots?\nbunnies\nhufflepuff\ncarrots?\nhufflepuff''') == 2\n\nassert solution('''3 3\ncarrots?\nbunnies\nhufflepuff\ncarrots?\nbunnies\n''') == 2\n\nassert solution('''5 4\nhufflepuff\ncarrots?\nbunnies\nhufflepuff\ncarrots?\nbunnies\n''') == 0\n\nassert solution('''5 5\nhufflepuff\ncarrots?\nbunnies\nhufflepuff\ncarrots?\nbunnies\n''') == 0",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"\nassert solution(\"2 1\\nbunnies\\ncarrots?\") == \"1\"\nassert solution(\"2 2\\nbunnies\\ncarrots?\\nbunnies\") == \"2\"\nassert solution(\"2 2\\ncarrots\\nbunnies\\ncarrots?\\nbunnies\") == \"0\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 92
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('carrots?\\nbunnies') == 1",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n5 2\ncarrots\nBunnies\nTrees\nBunnies\nBunnies\n''') == 5\n\nassert solution('''\n5 2\nbunnies\nBunnies\nTrees\nBunnies\nBunnies\n''') == 10\n\nassert solution('''\n5 2\ncarrots\nbunnies\nTrees\nbunnies\nBunnies\n''') == 5\n\nassert solution('''\n5 2\ncarrots\nbunnies\nTrees\nbunnies\nBunnies\n''') == 10\n'''\n\n'''\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\ncarrots?\\nbunnies\\n') == '1'\nassert solution('2 1\\ncarrots?\\nbunnies\\n') == '1'\nassert solution('2 2\\ncarrots?\\nbunnies\\n') == '1'\nassert solution('2 3\\ncarrots?\\nbunnies\\n') == '1'\nassert solution('2 1\\ncarrots?\\n\\nbunnies\\n') == '1'\n",
        "num_ids_2": 43,
        "num_ids_4": 87
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\ncarrots?\\nbunnies\") == \"1\\n\"\nassert solution(\"1 2\\ncarrots?\\nbunnies\") == \"0\\n\"\nassert solution(\"2 2\\ncarrots?\\nbunnies\\ncarrots?\\nbunnies\") == \"2\\n\"\nassert solution(\"2 3\\ncarrots?\\nbunnies\\ncarrots?\\nbunnies\") == \"1\\n\"\nassert solution(\"3 3\\ncarrots?\\nbunnies\\ncarrots?\\nbunnies\\nbunnies\\nbunnies\") == \"3\\n\"\n",
        "num_ids_2": 44,
        "num_ids_4": 106
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\") == \"Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\") == \"White: Kd1,",
        "num_ids_2": 941,
        "num_ids_4": 941
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n\n\"\"\"\nSolution:\nThe first line is the position of the white pieces of the white player. The second line is the position of the black pieces of the black player.\n\nThe letters in the first line are:\n\nK - King\nQ - Queen\nR - Rook\nB - Bishop\nN - Knight\nP - Pawn\nThe letters in the second line are:\n\nK - King\nQ - Queen\nR - Rook\nB - Bishop\nN - Knight\nP - Pawn\n\nThe possible pieces in the first line are K, Q, R, B, N, and P. The possible pieces in the second line are K, Q, R, B, N, and P. The pieces are in the following order:\n\nKings (K) - First.\nQueens (Q) - Second.\nRooks (R) - Third.\nBishops (B) - Fourth.\nKnights (N) - Fifth.\nPawns (P) - Sixth.\n\nThe possible chess board positions are in the following order:\n\nFirst row - 8\nSecond row - 7\nThird row - 6\nFourth row - 5\nFifth row - 4\nSixth row - 3\nSeventh row - 2\nEighth row - 1\n\nFirst column - a\nSecond column - b\nThird column - c\nFourth column - d\nFifth column - e\nSixth column - f\nSeventh column - g\nEighth column - h\n\nGiven the position of the white pieces and the position of the black pieces, determine the description of each position in the notation described above.\n\"\"\"\n",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\") == \"White: Ke1",
        "num_ids_2": 941,
        "num_ids_4": 941
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|::p|.p.|::p|.p.|::p|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|::p|.P|::p|.P|::p|.P|::p|.p.|::p|\\n+---+---+---+---+---+---+---+---+\\n|.P.|::p|.P|::p|.P|::p|.P|::p|.P|\\n+---+---+---+---+---+---+---+---+\\n|::k|.K|::k|.K|::k|.K|:::|.K|::k|\\n+---+---+---+---+---+---+---+---+\\n|::b|.B|::b|.B|::b|.B|::b|.B|::b|\\n+---+---+---+---+---+---+---+---+\",\n\"+---+---+---+---+---+---+---+---+\\n|r.|::|.b|:q|.k|::|.n|:r|\\n+---+---+---+---+---+---+---+---+\\n|::p|.p|::p|.p|::p|.p|:::|.p|\\n+---+---+---+---+---+---+---+---+\\n|...|::|.n|:::|...|:::|...|p|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|::|.P|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|",
        "num_ids_2": 647,
        "num_ids_4": 647
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|r.|   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+\n| b | b |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+\n|   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+\n|   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+\n|   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+\n|   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\"\"\nassert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|r.|   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+\n| b |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+\n|   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+\n|   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+\n|   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+\n|   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\"\"\nassert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|r.|b.|   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+\n| b |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+\n|   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+\n|   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+\n|   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+\n|   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"White",
        "num_ids_2": 10,
        "num_ids_4": 15
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"White: Kb1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Kb8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\n\nassert solution(\"\"\"+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"White: Kb1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n\" +\n                \"|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n\" +\n                \"+---+---+---+---+---+---+---+---+\\n\" +\n                \"|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n\" +\n                \"+---+---+---+---+---+---+---+---+\\n\" +\n                \"|...|:::|.n.|:::|...|:::|...|:p:|\\n\" +\n                \"+---+---+---+---+---+---+---+---+\\n\" +\n                \"|:::|...|:::|...|:::|...|:::|...|\\n\" +\n                \"+---+---+---+---+---+---+---+---+\\n\" +\n                \"|...|:::|...|:::|.P.|:::|...|:::|\\n\" +\n                \"+---+---+---+---+---+---+---+---+\\n\" +\n                \"|:P:|...|:::|...|:::|...|:::|...|\\n\" +\n                \"+---+---+---+---+---+---+---+---+\\n\" +\n                \"|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n\" +\n                \"+---+---+---+---+---+---+---+---+\\n\" +\n                \"|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n\" +\n                \"+---+---+---+---+---+---+---+---+\\n\") == \"\"\"White: Kd1,Qg1,Rd1,Rh1,Qd1,Nb1,a2,b2,b3,g4,h4,a4,b5,d6,d7,f7,e8\nBlack: Kg8,Qf8,Rg8,Rh8,Kg8,Nc6,a7,b7,c7,d7,e7,f7,g7,h7,h6\"\"\"\n\nassert solution(\"+---+---+---+---+---+---+---+---+\\n\" +\n                \"|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n\" +\n                \"+---+---+---+---+---+---+---+---+\\n\" +\n                \"|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n\" +\n                \"+---+---+---+---+---+---+---+---+\\n\" +\n                \"|...|:::|.n.|:::|...|:::|...|:p:|\\n\" +\n                \"+---+---+---+---+---+---+---+---+\\n\" +\n                \"|:::|...|:::|...|:::|...|:::|...|\\n\" +\n                \"+---+---+---+---+---+---+---+---+\\n\" +\n                \"|...|:::|...|:::|.P.|:::|...|:::|\\n\" +\n                \"+---+---+---+---+---+---+---+---+\\n\" +\n                \"|:P:|...|:::|...|:::|...|:::|...|\\n\" +\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"+---+---+---+---+---+---+---+---+\\n|:q:|:r:|:r:|:p:|:p:|:p:|:p:|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:b:|:p:|:p:|:b:|:p:|:b:|:p:|:b:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|:p:|:p:|:b:|:p:|:p:|:p:|:b:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|:p:|:p:|:p:|:p:|:p:|:p:|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:r:|:p:|:p:|:r:|:p:|:r:|:p:|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|:p:|:p:|:p:|:p:|:p:|:p:|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|:p:|:p:|:p:|:p:|:p:|:p:|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:b:|:p:|:p:|:b:|:p:|:",
        "num_ids_2": 941,
        "num_ids_4": 941
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \\\n    \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n\nassert solution(\"+---+---+---+---+---+---+---+---+\\n|:q:|:::|:b:|:r:|:k:|:::|:n:|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:P:|:P:|:P:|:P:|:P:|:::|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|:B:|:Q:|:K:|:B:|:B:|:B:|\\n+---+---+---+---+---+---+---+---+\\n|:r:|:n:|:b:|:q:|:k:|:b:|:n:|:q:|\\n+---+---+---+---+---+---+---+---+\\n|:P:|:::|:P:|:P:|:P:|:::|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:::|:::|:P:|:::|:::|:::|:::|\\n+---+---+---+---+---+---+---+---+\\n|:::|:::|:::|:::|:::|:::|:::|\\n+---+---+---+---+---+---+---+---+\\n|P.|:P:|P.|P.|P.|P.|P.|P.|P.|\\n+---+---+---+---+---+---+---+---+\\n|P.|",
        "num_ids_2": 834,
        "num_ids_4": 834
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\"\nassert solution(\"10 10\") == \"You will become a flying monkey!\"\nassert solution(\"3 3\") == \"You will become a flying monkey!\"\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 46
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('10 2') == 'You will become a flying monkey!'\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\n\n-------\n6 3\n\n-------\n7 4\n\n-------\n8 5\n\n-------\n9 7\n\n-------\n10 8\n\n-------\n11 9\n\n-------\n12 10\n\n-------\n13 11\n\n-------\n14 12\n\n-------\n15 13\n\n-------\n16 14\n\n-------\n17 15\n\n-------\n18 16\n\n-------\n19 17\n\n-------\n20 18\n\n-------\n21 19\n\n-------\n22 20\n\n-------\n23 21\n\n-------\n24 22\n\n-------\n25 23\n\n-------\n26 24\n\n-------\n27 25\n\n-------\n28 26\n\n-------\n29 27\n\n-------\n30 28\n\n-------\n31 29\n\n-------\n32 30\n\n-------\n33 31\n\n-------\n34 32\n\n-------\n35 33\n\n-------\n36 34\n\n-------\n37 35\n\n-------\n38 36\n\n-------\n39 37\n\n-------\n40 38\n\n-------\n41 39\n\n-------\n42 40\n\n-------\n43 41\n\n-------\n44 42\n\n-------\n45 43\n\n-------\n46 44\n\n-------\n47 45\n\n-------\n48 46\n\n-------\n49 47\n\n-------\n50 48\n\n-------\n51 49\n\n-------\n52 50\n\n-------\n53 51\n\n-------\n54 52\n\n-------\n55 53\n\n-------\n56 54\n\n-------\n57 55\n\n-------\n58 56\n\n-------\n59 57\n\n-------\n60 58\n\n-------\n61 59\n\n-------\n62 60\n\n-------\n63 61\n\n-------\n64 62\n\n-------\n65 63\n\n-------\n66 64\n\n-------\n67 65\n\n-------\n68 66\n\n-------\n69 67\n\n-------\n70 68\n\n-------\n71 69\n\n-------\n72 70\n\n-------\n73 71\n\n-------\n74 72\n\n-------\n75 73\n\n-------\n76 74\n\n-------\n77 75\n\n-------\n78 76\n\n-------\n79 77\n\n-------\n80 78\n\n-------\n81 79\n\n-------\n82 80\n\n-------\n83 81\n\n-------\n84 82\n\n-------\n85 83\n\n-------\n86 84\n\n-------\n87 85\n\n-------\n88 86\n\n-------\n89 87\n\n-------\n90 88\n\n-------\n91 89\n\n-------\n92 90\n\n-------\n93 91\n\n-------\n94 92\n\n-------\n95 93\n\n-------\n96 94\n\n-------\n97 95\n\n-------\n98 96\n\n-------\n99 97\n\n-------\n100 98\n\n-------\n101 99\n\n-------\n102 100\n\n-------\n103 101\n\n-------\n104 102\n\n-------\n105 103\n\n-------\n106 104\n\n-------\n107 105\n\n-------\n108 106\n\n-------\n109 107\n\n-------\n110 108\n\n-------\n111 109\n\n-------\n112 110\n\n-------\n113 111\n\n-------\n114 112\n\n-------\n115 113\n\n-------\n116 114\n\n-------\n117 115\n\n-------\n118 116\n\n-------\n119 117\n\n-------\n120 118\n\n-------\n121 119\n\n-------\n122 120\n\n-------\n123 121\n\n-------\n124 122\n\n-------\n125 123\n\n-------\n126 124\n\n-------\n127 125\n\n-------\n128 126\n\n-------\n129 127\n\n-------\n130 128\n\n-------\n131 129\n\n-------\n132 130\n\n-------\n133 131\n\n-------\n134 132\n\n-------\n135 133\n\n-------\n136 134\n\n-------\n137 135\n\n-------\n138 136\n\n-------\n139 137\n\n-------\n140 138\n\n-------\n141 139\n\n-------\n142 140\n\n-------\n143 141\n\n-------\n144 142\n\n-------\n145 143\n\n-------\n146 144\n\n-------\n147 145\n\n-------\n148 146\n\n-------\n149 147\n\n-------\n150 148\n\n-------\n151 149\n\n-------\n152 150\n\n-------\n153 151\n\n-------\n154 152\n\n-------\n155 153\n\n-------\n156 154\n\n-------\n157 155\n\n-------\n158 156\n\n-------\n159 157\n\n-------\n160 158\n\n-------\n161 159\n\n-------\n162 160\n\n-------\n163 161\n\n-------\n164 162\n\n-------\n165 163\n\n-------\n166 164\n\n-------\n167 165\n\n-------\n168 166\n\n-------\n169 167\n\n-------\n170 168\n\n-------\n171 169\n\n-------\n172 170\n\n-------\n173 171\n\n-------\n174 172\n\n-------\n175 173\n\n-------\n176 174\n\n-------\n177 175\n\n-------\n178 176\n\n-------\n179 177\n\n-------\n180 178\n\n-------\n181 179\n\n-------\n182 180\n\n-------\n183 181\n\n-------\n184 182\n\n-------\n185 183\n\n-------\n186 184\n\n-------\n187 185\n\n-------\n188 186\n\n-------\n189 187\n\n-------\n190 188\n\n-------\n191 189\n\n-------\n192 190\n\n-------\n193 191\n\n-------\n194 192\n\n-------\n195 193\n\n-------\n196 194\n\n-------\n197 195\n\n-------\n198 196\n\n-------\n199 197\n\n-------\n200 198\n\n-------\n201 199\n\n-------\n202 200\n\n-------\n203 201\n\n-------\n204 202\n\n-------\n205 203\n\n-------\n206 204\n\n-------\n207 205\n\n-------\n208 206\n\n-------\n209 207\n\n-------\n210 208\n\n-------\n211 209\n\n-------\n212 210\n\n-------\n213 211\n\n-------\n214 212\n\n-------\n215 213\n\n-------\n216 214\n\n-------\n217 215\n\n-------\n218 216\n\n-------\n219 217\n\n-------\n220 218\n\n-------\n221 219\n\n-------\n222 220\n\n-------\n223 221\n\n-------\n224 222\n\n-------\n225 223\n\n-------\n226 224\n\n-------\n227 225\n\n-------\n228 226\n\n-------\n229 227\n\n-------\n230 228\n\n-------\n231 229\n\n-------\n232 230\n\n-------\n233 231\n\n-------\n234 232\n\n-------\n235 233\n\n-------\n236 234\n\n-------\n237 235\n\n-------\n238 236\n\n-------\n239 237\n\n-------\n240 238\n\n-------\n241 239\n\n-------\n242 240\n\n-------\n243 241\n\n-------\n244 242\n\n-------\n245 243\n\n-------\n246 244\n\n-------\n247 245\n\n-------\n248 246\n\n-------\n249 247\n\n-------\n250 248\n\n-------\n251 249\n\n-------\n252 250\n\n-------\n253 251\n\n-------\n254",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3\") == \"Your wish is granted!\"\nassert solution(\"1 1\") == \"You will become a flying monkey!\"\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''8 3''') == 'Your wish is granted!'\nassert solution('''7 7''') == 'Your wish is granted!'\nassert solution('''2 2''') == 'You will become a flying monkey!'\nassert solution('''1 1''') == 'You will become a flying monkey!'\nassert solution('''11 100''') == 'You will become a flying monkey!'\n",
        "num_ids_2": 34,
        "num_ids_4": 72
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('8 4') == 'You will become a flying monkey!'\nassert solution('7 9') == 'You will become a flying monkey!'\nassert solution('1 1') == 'You will become a flying monkey!'\nassert solution('6 4') == 'You will become a flying monkey!'\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('8 4') == 'You will become a flying monkey!'\nassert solution('6 10') == 'You will become a flying monkey!'\nassert solution('7 0') == 'Your wish is granted!'\nassert solution('10 10') == 'Your wish is granted!'\n\"\"\"\n\nimport sys\nimport timeit\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\n\"\"\"\nfrom collections import defaultdict\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"Your wish is granted!\"\nassert solution(\"12 6\") == \"Your wish is granted!\"\nassert solution(\"17 7\") == \"Your wish is granted!\"\nassert solution(\"45 32\") == \"Your wish is granted!\"\nassert solution(\"39 17\") == \"Your wish is granted!\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 2''') == 'Your wish is granted!'\nassert solution('''5 3''') == 'You will become a flying monkey!'\n'''",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('16') == 16\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('16') == 16\n\"\"\"\n\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('16') == '16'\nassert solution('16') == '16'\nassert solution('16') == '16'\nassert solution('16') == '16'\nassert solution('16') == '16'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"16\") == 16\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('16') == '16'\nassert solution('16') == '16'\nassert solution('16') == '16'\nassert solution('16') == '16'\nassert solution('16') == '16'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('16') == '16'\nassert solution('16') == '16'\nassert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('9') == '9'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"16\") == \"16\"\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''16''') == '16'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"16\") == \"16\"\n\n'''\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"16\") == \"16\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n'''",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 180\\n45 30 55 20 80 20') == 4\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 180\\n45 30 55 20 80 20') == '4'\n\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 180\\n45 30 55 20 80 20') == '4'\nprint(solution(stdin=input))\n\"\"\"\n\nimport collections\nimport itertools\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''6 180\n45 30 55 20 80 20''') == '4'\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5 6') == '6'\n\"\"\"\n\nimport sys\n\nlines = sys.stdin.readlines()\nn, T = map(int, lines[0].split())\ntimes = list(map(int, lines[1].split()))\n\nidx = 0\nn_completed = 0\nwhile T > 0:\n    T -= times[idx]\n    idx = (idx + 1) % n\n    n_completed += 1\n\nsys.stdout.write(str(n_completed))\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''6 180\n45 30 55 20 80 20''') == '4'\n\n\"\"\"\nfrom typing import List",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 180\\n1 2 4 8 10 20') == '4'\nassert solution('4 180\\n2 1') == '2'\n\"\"\"\n\nimport sys",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 180\\n45 30 55 20 80 20') == '4'\n\"\"\"\n\n\nimport os",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 180\\n45 30 55 20 80 20\") == \"4\"\n\"\"\"\n\nn, T = map(int, input().split())\nlst = list(map(int, input().split()))\ni, j = 0, 0\n\nfor j in range(n):\n    if i < T and lst[j] + i <= T:\n        i += lst[j]\n    else:\n        break\nprint(j)\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n\nSample Input:\n2\n100\n50\nSample Output:\n150\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '3'\n\"\"\"\n\nn = int(stdin)\nl = [int(i) for i in stdin.split('\\n')]\n\ncount = 0\n\nwhile n!= 1:\n    for i in range(len(l)):\n        count += 1\n        if l[i] % 2!= 0:\n            l[i] = l[i] / 2\n        else:\n            l[i] = l[i]\n    n -= 1\n\nprint(int(sum(l)))\nprint(count)",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n\"\"\"\n\n\"\"\"\nThe idea is to calculate the total number of pairs of rods we can have and then \nmultiply it by the minimum viable javelin size.\n\"\"\"\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\nassert solution(\"8\\n19\\n9\\n17\\n16\\n20\\n6\\n3\") == \"41\"\nassert solution(\"3\\n14\\n2\\n3\") == \"31\"\nassert solution(\"1\\n6\") == \"6\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 53,
        "num_ids_4": 85
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\nassert solution(\"4\\n21\\n34\\n18\\n9\\n2\") == \"83\"\nassert solution(\"4\\n21\\n34\\n18\\n9\\n2\\n0\") == \"85\"\nassert solution(\"4\\n21\\n34\\n18\\n9\\n2\\n0\\n0\") == \"85\"\n\"\"\"\n",
        "num_ids_2": 47,
        "num_ids_4": 106
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\\n\") == \"2 3 0\"\nassert solution(\"2 1 1 0\\n2 1\") == \"impossible\"\nassert solution(\"1 1 1 1\\n2 1\") == \"impossible\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nfrom random import randint\n",
        "num_ids_2": 40,
        "num_ids_4": 58
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 4 1\\n0 1 4') == '2 3 0'\nassert solution('3 3 4 2\\n0 1 4') == 'impossible'\n\"\"\"\n\nimport sys\nimport random",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\n\"\"\"\nfrom itertools import combinations\nfrom math import factorial\nfrom random import randint",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 3 3 4\n0 1 4\n''') == '2 3 0'\nassert solution('''6 3 2 4\n0 2 4\n''') == 'impossible'\nassert solution('''2 2 1 3\n0 1 3\n''') == '0 0'\nassert solution('''5 2 5 4\n0 1 3\n''') == '3 3 0'\n\nSolution:\n\nn,m,s,d = [int(x) for x in stdin.split()]\nc = [int(x) for x in stdin.split('\\n')[:-1]]\n\nc.sort()\ni = 0\nans = []\nwhile c[i] > 0:\n    if c[i] < d:\n        ans.append(c[i])\n        c[i] = 0\n        m -= 1\n    i = (i + 1) % s\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\nprint(solution(\"5 3 3 4\\n0 1 4\"))\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\nassert solution(\"5 3 3 5\\n0 1 4\") == \"impossible\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\n\nassert solution(\"3 2 2 1\\n0 1 2\") == \"impossible\"\n\nassert solution(\"4 2 2 1\\n0 1 1\") == \"impossible\"\n\nassert solution(\"3 4 2 3\\n1 0 0\") == \"impossible\"\n\nassert solution(\"3 4 2 3\\n0 1 0\") == \"2 3 0\"",
        "num_ids_2": 39,
        "num_ids_4": 77
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 3 4\\n0 1 4') == '2 3 0'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == '2 3 0'\n\"\"\"\n\n\nfrom typing import List, Dict, Tuple, Set, Union\nimport heapq\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 1 2 3 2 7\") == \"1 0 0 1 0 1\"\nassert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(stdin)) == str(stdin)",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\nassert solution('0 1 2 2 7 2') == '1 0 0 0 1 1'\nassert solution('0 1 2 7 2 2') == '1 0 0 1 1 1'\nassert solution('0 7 2 2 2 0') == '1 0 1 1 0 1'\nassert solution('0 7 2 2 2 2') == '1 0 0 0 1 1'\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"1 1 1 2 3 4 8\") == \"1 1 -1 0 1 1\"\nassert solution(\"2 4 4 4 1 1 1\") == \"1 1 1 1 -1 1 1\"\nassert solution(\"0 0 0 1 1 2 2\") == \"1 1 1 1 1 1 1\"\nassert solution(\"3 2 2 3 2 5 2\") == \"-1 -1 -1 1 1 1 1\"\n",
        "num_ids_2": 42,
        "num_ids_4": 87
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\n\n* Solution:\n:type stdin: str\n:rtype: str\n'''\n\nimport math\n\ninput = \"0 1 2 2 2 7\"\n\ninput = [int(x) for x in input.split()]\n\nk = input[0]\nq = input[1]\nr = input[2]\nb = input[3]\nn = input[4]\np = input[5]\n\nm = min(k,q,r,b,n,p)\nd = max(k,q,r,b,n,p)\n\ndiff = d-m\n\nprint(diff,m,k,q,r,b,n,p)\n\nprint(k-diff,q-diff,r-diff,b-diff,n-diff,p-diff)",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''0 1 2 2 2 7''') == '''1 0 0 0 0 1'''\nassert solution('''0 1 1 1 1 1''') == '''0 0 0 0 0 0'''\nassert solution('''0 1 2 3 1 1''') == '''2 0 1 1 1 0'''\nassert solution('''0 1 2 3 1 1''') == '''2 0 1 1 1 0'''\nassert solution('''0 1 1 1 1 1''') == '''0 0 0 0 0 0'''\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\n\"\"\"\n\nking, queen, rook, bishop, knight, pawn = map(int, input().split())",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == '1.3334'\nassert solution(\"2\\nqwerty 0.3334\\n123456 0.6666\") == '1.3334'\nassert solution(\"5\\n123456 1.0\\n123456 0.5\\nqwerty 0.3334\\nqwerty 0.25\") == '1.25'\nassert solution(\"2\\n123456 1.0\\n123456 0.5\\nqwerty 0.3334\\nqwerty 0.25\") == '1.25'\nassert solution(\"5\\n123456 1.0\\n123456 0.5\\nqwerty 0.3334\\nqwerty 0.25\") == '1.25'\n",
        "num_ids_2": 58,
        "num_ids_4": 144
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123456 0.6666\\nqwerty 0.3334\") == 1.3334\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\nassert solution(\"4\\nbcdef 0.2\\nabcd 0.4\\nabcd 0.4\") == \"0.7\"\n",
        "num_ids_2": 62,
        "num_ids_4": 62
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n\nprint(solution(input()))\n\n\"\"\"\n\nfrom collections import deque\nfrom math import log10\nimport re",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\nprint(solution(\"2\\n123456 0.6666\\nqwerty 0.3334\"))\nassert solution(\"1\\n111111 0.1111\\n111111 0.1111\") == \"0.1111\"\nprint(solution(\"1\\n111111 0.1111\\n111111 0.1111\"))\nassert solution(\"1\\n111111 0.1111\\n111111 0.1111\\n111111 0.1111\") == \"0.1111\"\nprint(solution(\"1\\n111111 0.1111\\n111111 0.1111\\n111111 0.1111\"))\nassert solution(\"1\\n111111 0.1111\\n111111 0.1111\\n111111 0.1111\\n111111 0.1111\") == \"0.1111\"\nprint(solution(\"1\\n111111 0.1111\\n111111 0.1111\\n111111 0.1111\\n111111 0.1111\"))\nassert solution(\"1\\n111111 0.1111\\n111111 0.1111\\n111111 0.1111\\n111111 0.1111\\n111111 0.1111\") == \"0.1111\"\nprint(solution(\"1\\n111111 0.1111\\n111111 0.1111\\n111111 0.1111\\n111111 0.1111\\n111111 0.1111\"))\n\n\"\"\"\n",
        "num_ids_2": 55,
        "num_ids_4": 128
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334\\n') == '1.3334'\n\n------Hint------\nThink of a greedy algorithm. Try to find an order of the passwords that makes finding the correct password very easy. What will the optimal order be? \n\"\"\"\n\nimport unittest\nimport collections\nimport math",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\nassert solution('2\\nqwerty 0.3334\\n123456 0.6666') == '1.3334'\nassert solution('1\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\nassert solution('1\\n123456 0.6666\\nqwerty 0.3334\\n') == '1.3334'\nassert solution('1\\nqwerty 0.3334\\n123456 0.6666\\n') == '1.3334'\n",
        "num_ids_2": 58,
        "num_ids_4": 118
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1 2 4 5\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n1 1\n2 2\n3 3\n4 4''') == '4.0000'\n\nassert solution('''5\n1 1\n2 2\n3 3\n4 4\n5 5''') == '5.0000'\n\nassert solution('''6\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6''') == '6.6667'\n\nassert solution('''7\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7''') == '7.6667'\n\nassert solution('''8\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8''') == '8.6667'",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\\n5 6 7 8\") == \"0.1 0.1 0.2 0.2 0.3 0.3 0.4 0.4\"\n\n---Problem Description---\nYou have a new browser with the following default settings:\n\nAccept Cookie: Accept all cookies\nDetect and block bots: Do not allow bots to access the website\nDetect and block popups: Do not allow popups to appear\nDetect and block downgrades: Do not allow the website to downgrade itself\nDetect and block updates: Do not allow the website to update itself\n\nYou have downloaded $N$ websites (one website per line). Each website consists of the following information:\n\nThe website name\nThe domain of the website\nThe maximum number of cookies a website can have\nThe maximum number of cookies that can be stored in a browser\nThe maximum number of bytes that can be used to store the history of the browser\n\nYou have a browser that can handle websites with any number of cookies and the size of history record. You have an unlimited number of browsers that are ready to go, each with their own history record.\n\nYou have decided to visit these websites one after another using the following algorithm:\n\nChoose the current website from the websites list\nAdd the website to the history of the browser\nWait for $T$ seconds\nIf the website has cookies:\nAccept the cookies from the website\nIf the website has history:\nMake sure that the history record does not exceed the maximum number of bytes allowed, otherwise it will be trimmed\nIf the website has popups:\nClose the popups\nIf the website has updates:\nClose the updates\nYou have one browser that is ready to go and an unlimited number of browsers that you have, all with their own history record.\n\nYou have decided to visit websites in a optimal order, where the websites you visit are in no particular order. You have decided to choose the websites in the following order:\n\n1) Visit websites with no cookies and no history\n2) Visit websites with no cookies but with history\n3) Visit websites with cookies but no history\n4) Visit websites with cookies and history\n5) Visit websites with no cookies but with history\n6) Visit websites with no cookies but with history and popups\n7) Visit websites with no cookies but with history and popups\n8) Visit websites with no cookies but with history, updates, and popups\n9) Visit websites with no cookies but with history, updates, and popups\n10) Visit websites with cookies but no history\n11) Visit websites with cookies but with history\n12) Visit websites with no cookies and no history\n13) Visit websites with no cookies but with history and popups\n14) Visit websites with no cookies but with history, updates, and popups\n15) Visit websites with no cookies but with history, updates, and popups\n16) Visit websites with no cookies but with history, updates, and popups and popups\n17) Visit websites with no cookies but with history, updates, and popups and popups\n18) Visit websites with no cookies but with history, updates, and popups and popups\n19) Visit websites with no cookies but with history, updates, and popups and popups\n20) Visit websites with no cookies but with history, updates, and popups and popups\n21) Visit websites with no cookies but with history, updates, and popups and popups\n22) Visit websites with no cookies but with history, updates, and popups and popups\n23) Visit websites with no cookies but with history, updates, and popups and popups\n24) Visit websites with no cookies but with history, updates, and popups and popups\n25) Visit websites with no cookies but with history, updates, and popups and popups\n26) Visit websites with no cookies but with history, updates, and popups and popups\n27) Visit websites with no cookies but with history, updates, and popups and popups\n28) Visit websites with no cookies but with history, updates, and popups and popups\n29) Visit websites with no cookies but with history, updates, and popups and popups\n30) Visit websites with no cookies but with history, updates, and popups and popups\n31) Visit websites with no cookies but with history, updates, and popups and popups\n32) Visit websites with no cookies but with history, updates, and popups and popups\n33) Visit websites with no cookies but with history, updates, and popups and popups\n34) Visit websites with no cookies but with history, updates, and popups and popups\n35) Visit websites with no cookies but with history, updates, and popups and popups\n36) Visit websites with no cookies but with history, updates, and popups and popups\n37) Visit websites with no cookies but with history, updates, and popups and popups\n38) Visit websites with no cookies but with history, updates, and popups and popups\n39) Visit websites with no cookies but with history, updates, and popups and popups\n40) Visit websites with no cookies but with history, updates, and popups and popups\n41) Visit websites with no cookies but with history, updates, and popups and popups\n42) Visit websites with no cookies but with history, updates, and popups and popups\n43) Visit websites with no cookies but with history, updates, and popups and popups\n44) Visit websites with no cookies but with history, updates, and popups and popups\n45) Visit websites with no cookies but with history, updates, and popups and popups\n46) Visit websites with no cookies but with history, updates, and popups and popups\n47) Visit websites with no cookies but with history, updates, and popups and popups\n48) Visit websites with no cookies but with history, updates, and popups and popups\n49) Visit websites with no cookies but with history, updates, and popups and popups\n50) Visit websites with no cookies but with history, updates, and popups and popups\n51) Visit websites with no cookies but with history, updates, and popups and popups\n52) Visit websites with no cookies but with history, updates, and popups and popups\n53) Visit websites with no cookies but with history, updates, and popups and popups\n54) Visit websites with no cookies but with history, updates, and popups and popups\n55) Visit websites with no cookies but with history, updates, and popups and popups\n56) Visit websites with no cookies but with history, updates, and popups and popups\n57) Visit websites with no cookies but with history, updates, and popups and popups\n58) Visit websites with no cookies but with history, updates, and popups and popups\n59) Visit websites with no cookies but with history, updates, and popups and popups\n60) Visit websites with no cookies but with history, updates, and popups and popups\n61) Visit websites with no cookies but with history, updates, and popups and popups\n62) Visit websites with no cookies but with history, updates, and popups and popups\n63) Visit websites with no cookies but with history, updates, and popups and popups\n64) Visit websites with no cookies but with history, updates, and popups and popups\n65) Visit websites with no cookies but with history, updates, and popups and popups\n66) Visit websites with no",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 4\\n1') == '1'\nassert solution('3 1\\n1 2 4') == '1'\nassert solution('2 1\\n3 1 4') == '1'\nassert solution('3 1\\n3 1 4') == '1'\nassert solution('3 1\\n1 1 1') == '1'\n",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\n\n\n-----Solution-----\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n1 2 4\") == \"1\"\n\n\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\nfrom dataclasses import dataclass\nfrom typing import List, Set, Tuple\n\n\n@dataclass\nclass Car:\n    name: str\n    distance: int\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('1\\n1\\n1\\n1') == 0\nassert solution('2\\n1\\n1\\n1\\n1') == 0\nassert solution('2\\n1\\n2\\n1\\n1') == 0\nassert solution('2\\n1\\n2\\n2\\n1') == 0\n",
        "num_ids_2": 25,
        "num_ids_4": 65
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1') == '1'\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n1 2 4\") == \"1\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(solution(str(input())))",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '3 1\\n1 2 4'\n) == '1'\n\n\"\"\"\n\n\nimport sys",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nfrom sys import stdin, stdout\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:\\nF:\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*\\t*",
        "num_ids_2": 1204,
        "num_ids_4": 1204
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") ==\n\"\"\"\nG:                                                                        \nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                                        \ne: ----------------------------------------------------------\nd:                                                                        \nc:                                                                        \nb:                                                                        \na: ----------------------------------------------------------\"\"\"\n\n\"\"\"\nYou are a software engineer who works at a large company that sells a large selection of softwares. The software is very easy to use, as software developers usually only have to learn one or two new languages for each project they are working on. For each software, you know in what language it is written, but you don\u2019t know what languages your colleagues at the company are proficient in. In other words, each software may be written in one language, or in more than one language.\n\nYour company wants to use your expertise to help them choose the right software to produce. You\u2019ve asked your colleagues to rate each software on a scale from 1 to 10, with 1 being the least useful and 10 being the most useful. You have collected all of the ratings and compiled them into an $m$ by $n$ matrix, where $m$ is the number of languages, and $n$ is the number of software. You want to find the best software for your company to produce.\n\nGiven the scores for all of the software, find the software with the highest average rating. Your program should return an array of the languages with the highest average score, in descending order. If multiple languages have the same average score, order them in ascending alphabetical order.\n\n-----Input-----\nThe first line of input consists of two integers $n$ and $m$, the number of languages and the number of software, respectively. The next $n$ lines contain $m$ integers each, separated by a space, indicating the scores for each of the software.\n\n-----Output-----\nPrint the software IDs of all the software with the highest average score, in descending order. The languages should be printed in ascending alphabetical order.\n\n-----Examples-----\nSample Input:\n2 10\n3 1 2 4 5\n6 1 1 1 4 2\n6 2 3 1 3 2\nSample Output:\n[1, 2, 3]\n[1, 2]\"\"\"\n\nimport numpy as np",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\"\n\nassert solution(\"22\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: ---------------------------------------------------------------\nE:       *   *          *             *   *                  \nD: ---------------------------------------------------------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: ---------------------------------------------------------------\nf:                                                           \ne: ---------------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ---------------------------------------------------------------\"\"\"\n\nassert solution(\"4\\nB B D E E\") == \"\"\"G:\nF: --------------------------\nE:       *   *          *            \nD: -----------------------------\nC:     *     *      * *     **    \nB: * *     **    * *           \nA: --------------------------\"\"\"\n\nassert solution(\"14\\nC B D E E F G C B B A G C C A B A A B\") == \"\"\"G:\nF: --------------------------*---------------*-----------*---*----------------\nE:       *   *          *             *   *                  *\nD: --------------------------------------------------*----*---------*------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: ---------------------------------------------------------------\nf:                                                           \ne: ------------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ------------------------------------------------------------\"\"\"\n\nassert solution(\"8\\nA B D E E C B D C C B B\") == \"\"\"G:\nF: ---------------------------*----------------\nE:       *   *          *            *   *                \nD: ---------------------------*----------------\nC:     *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: ---------------------------------------------------------------\nf:                                                           \ne: ------------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ------------------------------------------------------------\"\"\"",
        "num_ids_2": 88,
        "num_ids_4": 136
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\n\"\"\"\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\"\nprint(\"All tests passed.\")\n\"\"\"\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:                                                                                            \nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------'\n",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\"\n\nassert solution(\"14\\nA A G A A G G C C C C C D D D D E E E E E E E E D\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA: * *     *      * *     **    * *           *         ** **\ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\"\n\"\"\"",
        "num_ids_2": 81,
        "num_ids_4": 81
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \\\n\"G:                                                               \\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:                                                  *        \\ng: -----------------------------------------------*----------\\nf:                                                           \\ne: ----------------------------------------------------------\\nd:                                                           \\nc:                                                           \\nb:                                                           \\na: ----------------------------------------------------------\"\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \n\"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\n\"\"\"\n\n\"\"\"\n5\nA B D E F G A B C D E F E D C B A\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(sample_stdin) == sample_output\n\n----\n\"\"\"\n\nfrom typing import Tuple, List, Dict\nimport re\n\nSTDIN_SCHEMA = Tuple[int]",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1\\n3 3 3\") == \"possible\"\nassert solution(\"3 3 3\") == \"possible\"\nassert solution(\"1 2 3\\n3 3 3\") == \"possible\"\nassert solution(\"3 3 2\\n3 2 1\") == \"possible\"\nassert solution(\"1 2 3\\n3 3 2\") == \"impossible\"\n",
        "num_ids_2": 31,
        "num_ids_4": 67
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"3\\n1 2 1\") == \"possible\"\nassert solution(\"3\\n1 1 2\") == \"possible\"\nassert solution(\"3\\n2 1 1\") == \"possible\"\nassert solution(\"3\\n1 2 2\") == \"possible\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"2\\n1 1\") == \"possible\"\nassert solution(\"2\\n1 1\\n1 1\") == \"possible\"\nassert solution(\"2\\n1 1\\n1 1\\n1 1\") == \"possible\"\nassert solution(\"2\\n1 1\\n1 1\\n1 1\\n1 1\") == \"possible\"\n",
        "num_ids_2": 31,
        "num_ids_4": 73
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"3\\n2 2 2\") == \"impossible\"\nassert solution(\"3\\n3 3 3\") == \"possible\"\nassert solution(\"3\\n1 3 1\") == \"impossible\"\nassert solution(\"2\\n2 2\") == \"possible\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 1\") == \"possible\"\nassert solution(\"2 1 2\") == \"impossible\"\nassert solution(\"1 1 1\") == \"impossible\"\nassert solution(\"3 3 3\") == \"possible\"\n\"\"\"\nimport collections\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'possible'\n\nSample Input:\n4\n1 1 1 1\nSample Output:\npossible\n\nSample Input:\n2\n1 1\nSample Output:\nimpossible\n\nSample Input:\n3\n1 1 1\nSample Output:\npossible\n\nSample Input:\n1\n1\nSample Output:\nimpossible\n\nSample Input:\n2\n1 1\nSample Output:\nimpossible\n\nSample Input:\n3\n1 1 1\nSample Output:\npossible\n\nSample Input:\n6\n1 1 1 1 1 1\nSample Output:\nimpossible\n\nSample Input:\n3\n1 1 1\nSample Output:\npossible\n\nSample Input:\n2\n1 1\nSample Output:\nimpossible\n\nSample Input:\n3\n1 1 1\nSample Output:\npossible\n\nSample Input:\n1\n1\nSample Output:\nimpossible\n\nSample Input:\n3\n1 1 1\nSample Output:\npossible\n\nSample Input:\n4\n1 1 1 1\nSample Output:\npossible\n\nSample Input:\n2\n1 1\nSample Output:\nimpossible\n\nSample Input:\n6\n1 1 1 1 1 1\nSample Output:\npossible\n\nSample Input:\n3\n1 1 1\nSample Output:\npossible\n\nSample Input:\n1\n1\nSample Output:\nimpossible\n\nSample Input:\n2\n1 1\nSample Output:\nimpossible\n\nSample Input:\n3\n1 1 1\nSample Output:\npossible\n\nSample Input:\n6\n1 1 1 1 1 1\nSample Output:\npossible\n\nSample Input:\n4\n1 1 1 1\nSample Output:\nimpossible\n\nSample Input:\n4\n1 1 1 1\nSample Output:\nimpossible\n\nSample Input:\n4\n1 1 1 1\nSample Output:\npossible\n\n'''\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n1 1 1''') == 'possible'\nassert solution('''5\n1 1 1 1 1''') == 'possible'\nassert solution('''2\n1 1\n1 2\n\n''') == 'possible'\n\nSample Input:\n3\n1 1 1\nSample Output:\n\nSample Input:\n3\n1 1 1\nSample Output:\nimpossible'''",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"4\\n4 4 4 4\") == \"possible\"\nassert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"6\\n5 5 5 5 5 5 5\") == \"possible\"\nassert solution(\"6\\n1 1 1 1 1 1 1\") == \"possible\"\n",
        "num_ids_2": 33,
        "num_ids_4": 69
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1 1 1''') == 'possible'\nassert solution('''2 1 1''') == 'impossible'\nassert solution('''3 1 1''') == 'possible'\nassert solution('''4 1 1''') == 'impossible'\nassert solution('''5 1 1''') == 'possible'\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('5\\n1 2 3 4 5') == 'possible'\nassert solution('2\\n2 1') == 'possible'\nassert solution('3\\n1 2 1') == 'impossible'\nassert solution('1\\n2') == 'impossible'\n\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 65
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == 3\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 3 2 1 2 2 1 1 3') == 3\n\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n4 3 3 2 1 2 2 1 1 3') == 3\nprint(solution('10\\n4 3 3 2 1 2 2 1 1 3'))\n\n-----Notes-----\nIf the bricks are already ordered in ascending width order, this is a variation of the problem Towers of Hanoi.\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\n4 3 3 2 1 2 2 1 1 3') == 3\nprint(solution(stdin.strip()))\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 3 2 1 2 2 1 1 3') == 3\n'''",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('5\\n4 3 3 2 1') == '3'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == \"3\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('a') == 1\nassert solution('a\\nb') == 2\nassert solution('a\\nbb') == 3\nassert solution('a\\nbbb') == 4\n",
        "num_ids_2": 16,
        "num_ids_4": 37
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 4 3 3 2 1 2 2 1 1 3') == 3\n\"\"\"\n\nfrom sys import stdin, stdout",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\n4 3 3 2 1 2 2 1 1 3') == 3\n\"\"\"\n\n\"\"\"\nimport sys\nsys.stdin = open(\"input.txt\", \"r\")\n\"\"\"\nimport sys\nsys.stdin = open(\"input.txt\", \"r\")\n\n\"\"\"\nn = int(input())\nsequence = list(map(int,input().split(' ')))\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\nHAMZEH 8.95 8.60\nMAHNOZ 9.05 8.51\nMOHAMED 9.05 8.56\nROCHAN 9.10 8.52\nTAYLAN 9.18 8.47''') == 'TAYLAN'\n\nassert solution('''5\nSALIM 0.54 0.10\nMIKHAIL 0.35 0.51\nRUSSIA 9.46 9.40\nARENAS 10.28 9.34\nZUBA 9.43 9.21''') == 'RUSSIA'\n\nassert solution('''5\nHAYES 8.88 8.33\nMARINAS 9.39 8.79\nIRAN 11.52 9.53\nRUSSIA 9.99 9.63\nVANDERBILT 9.68 8.39''') == 'IRAN'\n\nassert solution('''6\nKHALID 10.79 8.28\nMOHAMED 9.05 8.56\nLAMADAN 9.05 8.59\nDINASTRA 9.05 8.52\nBOLT 9.05 8.48\nSANNEHA 8.55 8.60''') == 'DINASTRA'\n\nassert solution('''6\nUZZAN 10.39 8.36\nMENDES 10.05 8.61\nARENAS 9.55 9.20\nKAREN 10.27 9.20\nMOHAMED 10.18 8.58\n''') == 'UZZAN'",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\"\n\"\"\"\nimport sys\nimport math\n\nTIMES = (\n    (\"ASHMEADE\", \"9.90\"),\n    (\"BLAKE\", \"9.69\"),\n    (\"BOLT\", \"9.58\"),\n    (\"CARTER\", \"9.78\"),\n    (\"FRATER\", \"9.88\"),\n    (\"POWELL\", \"9.72\"),\n)",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A 20.52 8.63\") == \"19.50\"\n\"\"\"\n\nimport itertools",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nA B C D\\n9.80 8.70 8.20 8.10\\n9.80 8.90 8.20 8.10\\n9.80 8.90 8.20 8.10\\n9.80 8.70 8.20 8.10\") == \"8.90\", \"the 1st\"\nassert solution(\"4\\nA B C D\\n9.80 8.70 8.20 8.10\\n9.80 8.90 8.20 8.10\\n9.80 8.90 8.20 8.10\\n9.80 8.70 8.20 8.10\") == \"9.80\", \"the 2nd\"\nassert solution(\"4\\nA B C D\\n9.80 8.70 8.20 8.10\\n9.80 8.90 8.20 8.10\\n9.80 8.90 8.20 8.10\\n9.80 8.70 8.20 8.10\") == \"9.80\", \"the 3rd\"\nassert solution(\"4\\nA B C D\\n9.80 8.70 8.20 8.10\\n9.80 8.90 8.20 8.10\\n9.80 8.90 8.20 8.10\\n9.80 8.70 8.20 8.10\") == \"9.80\", \"the 4th\"\nassert solution(\"4\\nA B C D\\n9.80 8.70 8.20 8.10\\n9.80 8.90 8.20 8.10\\n9.80 8.90 8.20 8.10\\n9.80 8.70 8.20 8.10\") == \"9.80\", \"the 5th\"\n\n-----Notes-----\n\n\"\"\"\n",
        "num_ids_2": 158,
        "num_ids_4": 316
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE\"\nassert solution(\"ASHMEADE 9.85 8.75\\nBLAKE 9.70 8.85\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.52\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE\"\nassert solution(\"ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\"\nassert solution(\"ASHMEADE 9.85 8.75\\nBLAKE 9.70 8.85\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.52\"\n\"\"\"",
        "num_ids_2": 184,
        "num_ids_4": 330
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\\n') == '35.54\\nCARTER\\nBOLT\\nPOWELL'\nassert solution('LIONEL HUGS 9.10 9.40\\nMAHER 9.19 9.29\\nROBERTO LAZAR 9.27 9.29\\nTOM SELB 9.28 9.28\\nDENIS CORMACK 9.12 9.15\\nEVGENY GRAPE 9.03 9.10\\nGABIR CLINE 9.07 9.19\\nTHAIS CARLOS 9.15 9.04\\n') == '9.16\\nCORMACK\\nGRAPE\\nGRAPE'\nassert solution('POLYALA 9.11 9.25\\nJUDE 9.07 9.20\\nMIRANDA 9.11 9.12\\nSOUZA 9.09 9.15\\nSOUZA 9.10 9.14\\nLORENZO 9.12 9.12\\nNOAH 9.07 9.11\\nALUISIO 9.11 9.24\\nCASADO 9.17 9.04\\n') == '9.17\\nCASADO\\nNOAH\\nLORENZO'\n\n'''\nhttps://www.hackerrank.com/challenges/relay-leaderboard\n\nSolution:\n1. We need to consider 4 legs, and we need to consider 100 meters as well.\n2. We need to create a runner dictionary with the runner names as keys and the number of times they have completed the 100m run as values.\n3. We need to create a variable that contains the names of the four fastest runners.\n4. We need to loop through the runners and check the number of times each runner has completed the 100m run and compare it to the number of times the first fastest runner has completed the 100m run.\n5. If the first runner has completed the 100m run twice more than the second, then we need to update the variable of the fastest runner.\n6. We return the fastest runner at the end.\n\n'''",
        "num_ids_2": 217,
        "num_ids_4": 349
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''ASHMEADE 9.90 8.85\nBLAKE 9.69 8.72\nBOLT 9.58 8.43\nCARTER 9.78 8.93\nFRATER 9.88 8.92\nPOWELL 9.72 8.61''') == '35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE'",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\nASHMEDE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\"\n\"\"\"",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('\\n'.join([\n        '4',\n        'BLAKE 9.69 8.72',\n        'BOLT 9.58 8.43',\n        'FRATER 9.88 8.92',\n        'POWELL 9.72 8.61',\n    ])) == '35.54'\n\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ASDMND\\nL\\nOIS\\nGQ\\nQRE\\nI\") == \"11.3\\nC\\nO\\nG\\nQ\\nR\\nE\"\n\"\"\"\n\nimport math\n\nn = int(stdin.readline())\n\nlines = stdin.read().strip().split(\"\\n\")\n\nrunners = {}\n\nfor line in lines:\n    name, a, b = line.split(\" \")\n    runners[name] = {\n        \"a\": float(a),\n        \"b\": float(b),\n    }\n\nall_runtimes = sorted([(runners[runner][\"b\"] + runners[runner][\"a\"], runner) for runner in runners])\n\nfirst_leg = all_runtimes.pop(0)[0]\n\nbest_team = [runner for (runtime, runner) in all_runtimes if runtime == first_leg]\n\nfor team in best_team:\n    print(team)\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6') == 2\n\"\"\"\nfrom collections import Counter",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n1 2\n2 4\n5 6\n\"\"\") == '2'\n\nassert solution(\"\"\"\n2\n1 2\n2 4\n5 6\n\"\"\") == '2'\n\nassert solution(\"\"\"\n2\n1 5\n2 4\n5 6\n\"\"\") == '0'\n\nassert solution(\"\"\"\n1\n5 1\n\"\"\") == '0'\n\nassert solution(\"\"\"\n2\n2 1\n5 4\n\"\"\") == '1'",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n2 4\") == \"2\"\nassert solution(\"3\\n1 2\\n3 5\\n2 4\") == \"2\"\nassert solution(\"3\\n1 2\\n3 5\\n5 7\\n2 4\") == \"1\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\\n4 5\") == \"0\"\nassert solution(\"4\\n1 2\\n3 4\\n4 5\") == \"0\"\n",
        "num_ids_2": 40,
        "num_ids_4": 92
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6') == '2'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2\\n2 4') == '2'\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2\\n2 4\\n5 6\") == \"2\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 3 5 7\") == \"3\"\nassert solution(\"2 4 4 6\") == \"0\"\nassert solution(\"3 3 3 3 3\") == \"2\"\nassert solution(\"1 1\") == \"0\"\nassert solution
        "num_ids_2": 27,
        "num_ids_4": 52
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\nassert solution('1\\n2') == '1\\n2'\n\nassert solution('1 2') == '1\\n2'\n\nassert solution('1 2\\n3 4') == '2\\n1\\n2\\n3\\n4'\n\nassert solution('1 2\\n3 4\\n5 6') == '2\\n1\\n2\\n3\\n4\\n6'",
        "num_ids_2": 24,
        "num_ids_4": 65
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2\\n2 4') == 2\n\n\"\"\"\nimport sys\nimport os\nimport time\nimport math\nimport bisect",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2\n2 4\n5 6''') == '2'\nassert solution('''3\n3 6\n1 5\n2 4''') == '1'\nassert solution('''2\n3 3\n3 4\n1 2''') == '0'\nassert solution('''3\n2 6\n1 4\n3 5''') == '1'\nassert solution('''3\n3 3\n1 2\n3 6''') == '1'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('hey') == 'hee'\n\nprint(solution('hey'))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('hey') == 'heey'\nassert solution('hulk') == 'heey'\nassert solution('ciao') == 'ciao'\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 35
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"hey\") == \"heey\"\nassert solution(\"hee\") == \"hee\"\nassert solution(\"hee yee\") == \"heehee\"\nassert solution(\"he\") == \"hee\"\nassert solution(\"hee ee\") == \"heehee\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('hey') == 'heey'\nassert solution('hello') == 'heeellloooo'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"heye\") == \"hee\"\nassert solution(\"hey\") == \"hee\"\nassert solution(\"heee\") == \"hee\"\nassert solution(\"hye\") == \"hee\"\nassert solution(\"heee\") == \"hee\"\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('hey') == 'hee'\nassert solution('hee') == 'hee'\nassert solution('he') == 'hee'\nassert solution('hel') == 'hee'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"hey\") == \"heeheey\"\nassert solution(\"hi\") == \"hihihihi\"\nassert solution(\"hi, how are you?\") == \"hihi, hihihi\"\nassert solution(\"goodbye\") == \"byebyebye\"\nassert solution(\"do you like football?\") == \"do you like football?footballfootball\"\n",
        "num_ids_2": 26,
        "num_ids_4": 61
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"hey\") == \"heey\"\nassert solution(\"heyyyy\") == \"heehee\"\nassert solution(\"heeeeee\") == \"heeheee\"\nassert solution(\"hee\") == \"hee\"\nassert solution(\"h\") == \"h\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('heey') == 'hee'\nassert solution('hello') == 'heelllloo'\nassert solution('helloo') == 'heelllloo'\nassert solution('heeeee') == 'heeeee'\nassert solution('hey') == 'heey'\n",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('he') == 'hee'\nassert solution('h') == 'h'\nassert solution('hhee') == 'heey'\nassert solution('hey') == 'heey'\n",
        "num_ids_2": 18,
        "num_ids_4": 40
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\\n\"\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0''') == \"\"\"1 2\n1 3\n1 4\"\"\"\n\nassert solution('''2\n0 1\n1 0''') == \"\"\"1 2\"\"\"\n\nassert solution('''3\n0 1 2\n1 0 2\n2 2 0''') == \"\"\"1 2\n1 3\n2 1\n2 3\"\"\"\n\nassert solution('''2\n0 1\n1 0''') == \"\"\"1 2\"\"\"\n\nassert solution('''4\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0''') == \"\"\"1 2\n1 3\n1 4\n2 3\n2 1\n3 2\n3 1\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\n\nimport numpy as np\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\n\n\"\"\"",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\nassert solution('5\\n0 1 1 2 2\\n1 0 2 3 3\\n1 2 0 3 3\\n2 3 3 0 4\\n3 4 3 0 4\\n3 5 3 0 4') == '1 2\\n1 3\\n1 4\\n2 3\\n2 4'\n\n-----Notes-----\n\n\"\"\"\n",
        "num_ids_2": 112,
        "num_ids_4": 112
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\nassert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\nassert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\nassert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\n\"\"\"",
        "num_ids_2": 86,
        "num_ids_4": 172
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\n\"\"\"\n\nfrom collections import defaultdict, deque\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0''') == '''1 2\n1 3\n1 4'''\nassert solution('''4\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0''') == '''1 2\n1 3\n1 4'''\n\n-----Challenge-----\nYou may use whatever programming language you wish.\n\nIf you wish to test your solution locally, you can use our Jupyter notebook solution.\n\n\n'''\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\n\"\"\"\n\nfrom heapq import heappush, heappop",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\n\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\n\"\"\"\n\nmessage = input()",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\n\n----\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nprint(solution(\"EWPGAJRB\"))\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nassert solution(\"ABAZDC\") == \"ABCD\"\nassert solution(\"AABAA\") == \"AABAA\"\nassert solution(\"AABBA\") == \"AABBC\"\nassert solution(\"AABBC\") == \"AABBC\"\n",
        "num_ids_2": 29,
        "num_ids_4": 56
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABCD') == 'ABCD'\nassert solution('ABCDEFGHIJKLMNOP') == 'ABCDEFGHIJKLMNOP'\n\nprint(solution('ABCD'))\nprint(solution('ABCDEFGHIJKLMNOP'))\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nassert solution(\"SJOAKNP\") == \"ABCD\"\nassert solution(\"EWPGAJRBJPGAJRB\") == \"ABCD\"\nassert solution(\"JONASNP\") == \"ABCD\"\nassert solution(\"JONASKJP\") == \"ABCD\"\n",
        "num_ids_2": 29,
        "num_ids_4": 63
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\n\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\nassert solution('JXZWYU') == 'DGKBV'\nassert solution('TGHQS') == 'EFJK'\nassert solution('ZBKSC') == 'AFGK'\nassert solution('WVAGG') == 'YKCQ'\n\nprint('All tests passed.')\n\n------Solution------\nDRM Encryption is a new kind of encryption. Given an encrypted string (which we\u2019ll call a DRM message), the decryption process involves three steps: Divide, Rotate and Merge. This process is described in the following example with the DRM message \u201cEWPGAJRB\u201d:Divide\n\n\u2013 First, divide the message in half to \u201cEWPG\u201d and \u201cAJRB\u201d.Rotate\n\n\u2013 For each half, calculate its rotation value by summing up the values of each character ($\\textrm{A} = 0, \\textrm{B} = 1, \\ldots, \\textrm{Z} = 25$). The rotation value of \u201cEWPG\u201d is $4 + 22 + 15 + 6 = 47$. Rotate each character in \u201cEWPG\u201d $47$ positions forward (wrapping from Z to A when necessary) to obtain the new string \u201cZRKB\u201d. Following the same process on \u201cAJRB\u201d results in \u201cBKSC\u201d.Merge\n\n\u2013 The last step is to combine these new strings (\u201cZRKB\u201d and \u201cBKSC\u201d) by rotating each character in the first string by the value of the corresponding character in the second string. For the first position, rotating \u2018Z\u2019 by \u2018B\u2019 means moving it forward 1 character, which wraps it around to \u2018A\u2019. Continuing this process for every character results in the final decrypted message, \u201cABCD\u201d.\n\n-----Input-----\nThe input contains a single DRM message to be decrypted. All characters in the string are uppercase letters and the string\u2019s length is even and $\\leq 15000$.\n\n-----Output-----\nDisplay the decrypted DRM message.\n\n-----Examples-----\nSample Input:\nEWPGAJRB\nSample Output:\nABCD\n",
        "num_ids_2": 33,
        "num_ids_4": 63
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"abcdef\") == 0\n\n-----Constraints-----\nTime limit: 3 seconds per test set.\nMemory limit: 1 MB per test set.\n-----Test set 1-----\nNo file will be provided to you, the solution will be provided by Per.\n-----Test set 2-----\nNo file will be provided to you, the solution will be provided by Per.\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"aabbb\") == 0\nassert solution(\"aabcaa\") == 2\nassert solution(\"abccba\") == 0\nassert solution(\"abbca\") == 2\n",
        "num_ids_2": 18,
        "num_ids_4": 39
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abc') == 2\n\n------Hints------\n- This is like a letter-guessing problem.\n\n-------Sources-----\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"abca\") == 1\nassert solution(\"dedec\") == 4\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 26
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('abcccba') == 3\nassert solution('acd') == 2\nassert solution('aaabbbbbbbcccaaaaa') == 1\nassert solution('ab') == 0\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 43
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aba') == 0\nassert solution('aab') == 1\nassert solution('abb') == 1\nassert solution('abc') == 0\nassert solution('abbc') == 1\n",
        "num_ids_2": 17,
        "num_ids_4": 33
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abc') == 2\nassert solution('def') == 0\nassert solution('abd') == 1\nassert solution('bdc') == 2\nassert solution('ddd') == 1\n\nprint(solution(stdin.strip()))\n\n-----Challenge-----\nThe solution is guaranteed to be the correct one if you have passed the challenge. If not, just don't crash and beat the challenge instead.\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 34
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abracadabra') == 3\nassert solution('coding') == 1\n\n-----Notes-----\nTry to solve the problem using a mathematical approach, since this is what you would be asked during an interview.\n\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abc') == 2, 'Test 1'\nassert solution('abcb') == 0, 'Test 2'\nassert solution('aabbc') == 2, 'Test 3'\nassert solution('aabcc') == 2, 'Test 4'\nassert solution('aabbcdef') == 2, 'Test 5'\nprint('Test passed')\n",
        "num_ids_2": 27,
        "num_ids_4": 57
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abc') == 2\nassert solution('aaaa') == 0\nassert solution('abcccba') == 3\nassert solution('kapak') == 3\n\"\"\"\n\nimport unittest\n",
        "num_ids_2": 16,
        "num_ids_4": 37
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aaah\") == \"no\"\nassert solution(\"aaaaa\") == \"no\"\nassert solution(\"aaaaah\") == \"go\"\n\nSample Input:\nh\naaaaah\nSample Output:\nno\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aaah') == 'go'",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"go\"\n\n-----Input-----\na\naaaaaah\nSample Output:\nno\nassert solution(stdin) == \"no\"\n\n-----Input-----\nh\naaah\nSample Output:\nno\nassert solution(stdin) == \"no\"\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaah\") == \"go\"\n\nassert solution(\"aaaah\") == \"no\"\nassert solution(\"ah\") == \"no\"\nassert solution(\"a\") == \"no\"\nassert solution(\"h\") == \"go\"\n\"\"\"\n\naaah = input()\naaah = set(aaah)\naaah.remove('a')\naaah.remove('h')\n",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aaah\") == \"go\"\n\nSample Input:\naah\naaaaaah\nSample Output:\nno",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin=\"aaah\") == \"go\"\nassert solution(stdin=\"aaaaaah\") == \"no\"\nassert solution(stdin=\"h\") == \"no\"\n\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 41
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aaah\") == \"no\"\nassert solution(\"aaaaaaah\") == \"no\"\nassert solution(\"aaaaaaaaaaaaaaaaah\") == \"go\"\nassert solution(\"h\") == \"no\"\nassert solution(\"a\") == \"go\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaaaah\") == \"go\"\n\nassert solution(\"aaah\") == \"no\"\n\nassert solution(\"a\") == \"no\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 32
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aaah\") == \"go\"\n\nassert solution(\"aaaaa\") == \"no\"\n\nassert solution(\"aaaah\") == \"no\"\n\nassert solution(\"hh\") == \"no\"\n\nassert solution(\"hhahah\") == \"no\"",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aaah\") == \"no\"\nassert solution(\"aa\") == \"go\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2B1B2A1A2A2A2\") == \"B\"\nassert solution(\"A1B2A1B1A2A1A1A1\") == \"B\"\nassert solution(\"A1A1A1A1A1A1A1B1\") == \"A\"\nassert solution(\"B1B1A1A1A1A1B1A\") == \"A\"\n",
        "num_ids_2": 48,
        "num_ids_4": 98
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A1B2A2B2A2A1\") == \"A\"\nassert solution(\"B2A1A2A2A1\") == \"B\"\nassert solution(\"A1B1A2A2B2\") == \"A\"\nassert solution(\"B1B2A2B2A1\") == \"B\"\nassert solution(\"A1B1A1A2A2A2B2B2\") == \"A\"\n",
        "num_ids_2": 40,
        "num_ids_4": 78
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A1B2B1\") == \"B\"\n\"\"\"",
        "num_ids_2": 50,
        "num_ids_4": 65
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n\"\"\"\n\nimport unittest\nfrom collections import Counter\n\nclass Solution:\n    def __init__(self, game_record: str):\n        self.game_record = game_record\n\n    def get_winner(self) -> str:\n        record = self.game_record.split(\" \")\n        counter = Counter(record)\n        if counter[\"A\"] >= 11:\n            return \"A\"\n        elif counter[\"B\"] >= 11:\n            return \"B\"\n        elif counter[\"A\"] == 10 and counter[\"B\"] == 10:\n            if abs(counter[\"A\"] - counter[\"B\"]) >= 2:\n                return \"B\"\n            else:\n                return \"A\"\n        elif counter[\"A\"] == 10:\n            return \"A\"\n        elif counter[\"B\"] == 10:\n            return \"B\"\n        else:\n            return \"D\"\n\nclass UnitTest(unittest.TestCase):\n    def test_1(self):\n        stdin = \"A2B1A2B2A1A2A2A2\"\n        expected = \"A\"\n        self.assertEqual(Solution(stdin).get_winner(), expected)\n\n    def test_2(self):\n        stdin = \"B2A2B2A2A1B1B1\"\n        expected = \"B\"\n        self.assertEqual(Solution(stdin).get_winner(), expected)\n\n    def test_3(self):\n        stdin = \"A2A1A2A2B1B2B2\"\n        expected = \"D\"\n        self.assertEqual(Solution(stdin).get_winner(), expected)",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A1B1A2B2A2A1A2A1B2B1A2A2A1\") == \"B\"\nassert solution(\"A2B2A2A2A2B1B2A2B2A1B1A1B1A2A2A1\") == \"A\"\n\"\"\"",
        "num_ids_2": 60,
        "num_ids_4": 101
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"B2A1B2A2A1B2A2A2\") == \"B\"\nassert solution(\"A2B2A1B2A2B1A2A1A2\") == \"B\"\n\nprint(solution(stdin))\n",
        "num_ids_2": 50,
        "num_ids_4": 77
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A1B2A2B2A2A1B2A2') == 'B'\nassert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('B1A2B2A1A2A2A2') == 'B'\nassert solution('A1B1A2B2A2A1B1A2') == 'B'\n",
        "num_ids_2": 50,
        "num_ids_4": 98
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open('input.txt').read()) == '21'\n\"\"\"\n\nimport collections\n\nINT_MAX = 100000\n\nclass Intersection:\n    def __init__(self, id: int):\n        self.id = id\n        self.time = 0\n        self.streets = {}\n\n    def __str__(self):\n        return f'id: {self.id}\\ntime: {self.time}\\nstreets: {self.streets}'\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __eq__(self, other):\n        if type(self)!= type(other):\n            return False\n\n        return self.id == other.id\n\n    def __hash__(self):\n        return hash(self.id)\n\n    def add_street(self, street_id: int, time: int):\n        self.streets[street_id] = time\n\n    def add_times(self, times: dict):\n        self.time = max(self.time, max(times.values()))\n\n        for street_id, time in times.items():\n            self.add_street(street_id, time)\n\nclass Street:\n    def __init__(self, street_id: int, start_intersection: int, end_intersection: int, length: int):\n        self.street_id = street_id\n        self.start_intersection = start_intersection\n        self.end_intersection = end_intersection\n        self.length = length\n        self.times = {}\n\n    def __str__(self):\n        return f'street_id: {self.street_id}\\nstart_intersection: {self.start_intersection}\\nend_intersection: {self.end_intersection}\\nlength: {self.length}\\ntimes: {self.times}'\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __eq__(self, other):\n        if type(self)!= type(other):\n            return False\n\n        return self.street_id == other.street_id\n\n    def __hash__(self):\n        return hash(self.street_id)\n\nclass Solution:\n    def __init__(self, filename: str):\n        self.intersections = collections.defaultdict(Intersection)\n        self.streets = collections.defaultdict(Street)\n        self.read_input(filename)\n\n    def read_input(self, filename: str):\n        with open(filename, 'r') as f:\n            lines = f.read().splitlines()\n\n            N, M = [int(x) for x in lines[0].split(' ')]\n            self.intersections[1]\n\n            for line in lines[1:N+1]:\n                A, B, K, G = [int(x) for x in line.split(' ')]\n                self.intersections[A].add_times({B:K})\n\n            for line in lines[N+1:]:\n                A, B, L = [int(x) for x in line.split(' ')]\n                street = Street(A, B, L)\n                self.streets[street.street_id] = street\n\n            for line in lines[N+1+M:]:\n                A, B, L = [int(x) for x in line.split(' ')]\n                street = Street(A, B, L)\n                self.streets[street.street_id] = street\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15') == '21'\nassert solution('6 10\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15') == '25'\nassert solution('6 10\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\\n2 1 5\\n5 4 10\\n4 6 20') == '35'\n\"\"\"\n\n\nfrom typing import List, Tuple, Dict\n\nN, M, A, K, G = [int(x) for x in input().split()]\nG = [int(x) for x in input().split()]\nA = int(input())\nB = int(input())\nK = int(input())\nK = A + K\nG = list(map(int, input().split()))\nG = [int(x) for x in input().split()]\n\nA = A - 1\nB = B - 1\n\nl = [[int(y) for y in x.split()] for x in input().split(\"\\n\")]",
        "num_ids_2": 96,
        "num_ids_4": 159
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 2\\n2 3 8\\n1 2 2\\n2 3 8\\n1 2 2\\n2 3 8\\n1 2 2') == '21'\nassert solution('3 6 10\\n3 5 15\\n2 3 8\\n2 4 3\\n1 2 2\\n1 2 2') == '25'\nassert solution('6 5\\n3 6 10\\n3 5 15\\n2 3 8\\n2 4 3\\n1 2 2\\n1 2 2') == '25'\nassert solution('3 6 10\\n3 6 10\\n3 5 15\\n2 3 8\\n2 4 3\\n1 2 2\\n1 2 2') == '25'\n\nSample Case:\n3 5\n1 2 8\n1 2 2\n1 3 6\n1 3 6\n1 3 6\n2 3 8\n2 4 3\n1 2 2\n1 2 2\n\nSample Output:\n32\n\nSample Case:\n6 5\n1 6 20 4\n5 3 2 4\n1 2 2\n2 3 8\n2 4 3\n3 6 10\n3 5 15\n2 3 8\n2 4 3\n1 2 2\n1 2 2\n\nSample Output:\n21\n\nSample Case:\n6 5\n1 6 20 4\n5 3 2 4\n1 2 2\n2 3 8\n2 4 3\n3 6 10\n3 5 15\n2 3 8\n2 4 3\n1 2 2\n1 2 2\n\nSample Output:\n25\n'''\n\nfrom typing import List, Tuple, Dict, Set",
        "num_ids_2": 79,
        "num_ids_4": 162
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n1 2 3\\n2 3 2\\n3 1 3\\n3 3 1') == '8'\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n2 2 2\\n1 3 3\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''6 5\n1 6 20 4\n5 3 2 4\n1 2 2\n2 3 8\n2 4 3\n3 6 10\n3 5 15''') == '21'\n\n\"\"\"\nimport math\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\"\"\"\n\n\n\"\"\"\nSolution:\n\n1. Create a list of lists, first list of size N with all intersections. Second list of size M with all roads.\n2. Calculate time of leaving intersection to all roads, and then get minimum.\n\"\"\"\n\nfrom itertools import combinations\nimport copy",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == \"21\"\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2 3\\n2 3 8') == '21'\n\"\"\"\n\nfrom dataclasses import dataclass\n\n@dataclass\nclass Intersection:\n    num: int\n    streets: list\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == \"21\"\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\nassert solution(\"D 61924\") == \"HHHeellloWooorrrrlld!\"\n\"\"\"\n\nimport sys\nimport re\n\nsys.stdin = open('./input.txt', 'r')",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\nassert solution
        "num_ids_2": 1536,
        "num_ids_4": 1536
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\nsolution(\"E HHHeellloWooorrrrlld!!\")\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\"\"\"\n\nimport unittest\nimport re\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\nassert solution('D 2120') == 'HHHEEEEELLLLLLOOO'\n\"\"\"\n\nimport unittest\nimport collections",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\nassert solution
        "num_ids_2": 1537,
        "num_ids_4": 1537
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"7\") == \"Bob\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('0') == 'Alice'\nassert solution('1') == 'Bob'\nassert solution('2') == 'Alice'\nassert solution('4') == 'Bob'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n\") == \"Alice\"\nassert solution(\"3\\n\") == \"Bob\"\n\"\"\"\n\nn = int(input().strip())",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"Alice\"\n\"\"\"\n\n\"\"\"\nYou are given a binary tree, and you need to write a function that can determine if it is height-balanced.\n\nA height-balanced binary tree can be defined as one in which the heights of the two subtrees of any node never differ by more than one.\n\nExample:\n\nGiven the following tree [5,10,25,None,None,12,3]:\n\n    5\n   / \\\n 10  25\n    /  \\\n   12   3\nreturn True.\n\nReturn False for the following tree [5,10,25,None,None,12,3,None,None,6,None,None,None,None]:\n\n       5\n      / \\\n     10  25\n    /  \\\n   12   3\n    \\\n     6\n\"\"\"\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nclass Tree:\n    def __init__(self, data):\n        self.root = Node(data)\n\n    def height(self, node):\n        if node is None:\n            return 0\n        return 1 + max(self.height(node.left), self.height(node.right))",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n\") == \"Alice\"\nassert solution(\"2\\n\") == \"1\"\nassert solution(\"9\\n\") == \"Bob\"\nassert solution(\"8\\n\") == \"Alice\"\nassert solution(\"3\\n\") == \"Alice\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 'Alice'\nassert solution('3') == 'Bob'\nassert solution('4') == 'Alice'\nassert solution('6') == 'Bob'\nassert solution('6') == 'Alice'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\nassert solution('3') == 'Alice'\n\nprint(solution(stdin.rstrip()))\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'Alice'\nassert solution('1') == 'Bob'\nassert solution('3') == 'Alice'\nassert solution('4') == 'Bob'\nassert solution('4') == 'Alice'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"3\") == \"Bob\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 'Alice'\nassert solution('3') == 'Bob'\nassert solution('4') == 'Alice'\nassert solution('5') == 'Bob'\nassert solution('6') == 'Alice'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 8\") == \"5 + 3 = 8\"\nassert solution(\"2 7 1\") == \"2 + 7 = 1\"\nassert solution(\"1 5 3\") == \"1 + 5 = 3\"\nassert solution(\"0 4 2\") == \"4 - 2 = 2\"\nassert solution(\"7 3 2\") == \"7 - 3 = 4\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"1 1 2\") == \"1+1=2\"\nassert solution(\"6 8 5\") == \"6+8=5\"\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 3 8''') == '''5+3=8'''\nassert solution('''5 3 8''') == '''5+3=8'''\nassert solution('''5 3 8''') == '''5+3=8'''\nassert solution('''5 3 8''') == '''5+3=8'''\nassert solution('''5 3 8''') == '''5+3=8'''\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"6 6 6\") == \"6-6=0\"\nassert solution(\"6 3 6\") == \"6-3=3\"\nassert solution(\"6 6 6\") == \"6/6=1\"\nassert solution(\"6 3 3\") == \"6/3=2\"\n\nprint(\"All tests passed.\")\n\nSample Input:\n1 1 2\nSample Output:\n1+1=2\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 8') == '5+3=8'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"5 3 8\"\n) == \"5 + 3 = 8\"\n\nassert solution(\n    \"5 3 2\"\n) == \"5 + 3 = 2\"\n\nassert solution(\n    \"5 1 7\"\n) == \"5 + 1 = 7\"\n\nassert solution(\n    \"3 1 6\"\n) == \"3 + 1 = 6\"\n\nassert solution(\n    \"10 3 6\"\n) == \"10 + 3 = 6\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(5) +'' + str(3) +'' + str(8)) == '5+3=8'\nassert solution(str(5) +'' + str(3) +'' + str(8) +'' + str(8)) == '5+3=8'\nassert solution(str(5) +'' + str(3) +'' + str(8) +'' + str(8) +'' + str(8)) == '5+3=8'\nassert solution(str(5) +'' + str(3) +'' + str(8) +'' + str(8) +'' + str(8) +'' + str(8)) == '5+3=8'\nassert solution(str(5) +'' + str(3) +'' + str(8) +'' + str(8) +'' + str(8) +'' + str(8) +'' + str(8)) == '5+3=8'\n",
        "num_ids_2": 67,
        "num_ids_4": 162
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 8') == '5+3=8'\nassert solution('6 10 9') == '6+10=16'\nassert solution('6 10 15') == '10+6=16'\nassert solution('15 6 10') == '10+6=16'\nassert solution('5 6 9') == '5+6=9'\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"3 5 8\") == \"3+5=8\"\nassert solution(\"1 1 1\") == \"1+1=2\"\nassert solution(\"1 3 4\") == \"1+3=4\"\nassert solution(\"1 4 5\") == \"1+4=5\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"3 5 7\") == \"3-5=2\"\nassert solution(\"3 5 9\") == \"3-5=2\"\nassert solution(\"5 3 7\") == \"5-3=2\"\nassert solution(\"5 3 9\") == \"5-3=2\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 4') == 'NO'\nassert solution('3\\n1 2 3') == 'NO'\nassert solution('3\\n2 3') == 'YES'\nassert solution('4\\n1 1 2 3') == 'YES'\n\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 61
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''8\n3 2 2 1 1 3 1 1''') == 'YES'\nassert solution('''8\n3 2 2 1 1 3 1 1''') == 'YES'\nassert solution('''8\n3 2 2 1 1 3 1 2''') == 'NO'\nassert solution('''8\n3 2 2 1 1 3 1 2''') == 'NO'\nassert solution('''8\n3 2 2 1 1 3 1 2''') == 'NO'\n\n'''\n\n'''",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n8\n3 2 2 1 1 3 1 1\n\"\"\") == \"YES\"\n\nassert solution(\n\"\"\"\n5\n1 1 1 1 2\n\"\"\") == \"NO\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"\n\nassert solution(\"7\\n3 2 2 1 1 3 1\") == \"NO\"\n\nassert solution(\"8\\n3 2 2 1 1 3 1 2\") == \"NO\"\n\nassert solution(\"8\\n3 2 2 1 1 3 2\") == \"NO\"\n\nassert solution(\"9\\n1 1 1 1 1 1 1 1 1\") == \"YES\"",
        "num_ids_2": 39,
        "num_ids_4": 78
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\nassert solution('8\\n3 2 2 1 1 3 1 5') == 'NO'\n\n-----Explanation-----\nIn the first example, the map given above is valid.\n\nIn the second example, it is impossible because there exists two rooms $i$ and $j$ such that $1 \\leq i < j \\leq N$.\n\nYou can use Python built-in functions to solve this problem.\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3 2 1 1') == 'YES'\nassert solution('5\\n3 1 2 3 3') == 'YES'\nassert solution('7\\n3 1 1 2 3 4') == 'NO'\nassert solution('7\\n3 1 1 2 3 5') == 'NO'\nassert solution('9\\n1 1 2 3 2 1 2 3') == 'YES'\n",
        "num_ids_2": 33,
        "num_ids_4": 69
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom itertools import permutations\nfrom typing import List, Set\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\nassert solution('7\\n2 1 3 3 1 1 2') == 'YES'\nassert solution('8\\n2 1 1 2 1 1 3 1') == 'YES'\nassert solution('8\\n1 2 3 2 1 1 3 1') == 'NO'\nassert solution('8\\n2 1 1 3 1 1 2 1') == 'NO'\n\nprint(solution(stdin))\n\n----Solution-----\n",
        "num_ids_2": 39,
        "num_ids_4": 79
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\") == \"ghost\"\nassert solution(\"6\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\"\nassert solution(\"5\\nghost\\nmummy\\nmummy\\nmummy\\nghost\") == \"ghost\"\nassert solution(\"8\\nghost\\nmummy\\nmummy\\ndemon\\nmummy\\nghost\\nghost\\nghost\") == \"ghost\"\nassert solution(\"2\\nghost\\nghost\\nghost\\nghost\\nghost\\nghost\") == \"ghost\"\n",
        "num_ids_2": 59,
        "num_ids_4": 118
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10\\nghost') == 'ghost'\nassert solution('10\\nmummy') =='mummy'\nassert solution('10\\nwitch') == 'witch'\nassert solution('10\\ndemon') == 'demon'\nassert solution('10\\ndemon') == 'demon'\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == 'ghost'\nassert solution('11') =='mummy'\nassert solution('7') == 'witch'\nassert solution('13') == 'ghost'\nassert solution('15') == 'witch'\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') =='mummy'\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\"\nassert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost,mummy\"\n\"\"\"\n\nN = int(input())\narr = []\nfor _ in range(N):\n    arr.append(input())\n\nres = []\nfor i in arr:\n    if i not in res:\n        res.append(i)\n\nres.sort()\nfor i in range(len(res)):\n    print(res[i], end=\" \")",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n10\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\n\"\"\"\n) == 'ghost'\n\nassert solution(\n\"\"\"\n5\nmummy\nwitch\ndemon\ndemon\nmummy\n\"\"\"\n) =='mummy'\n\nassert solution(\n\"\"\"\n1\nghost\n\"\"\"\n) == 'ghost'\n\nassert solution(\n\"\"\"\n4\nghost\nmummy\nwitch\ndemon\n\"\"\"\n) =='mummy'\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon') == 'ghost\\nmummy\\nwitch\\ndemon'\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\nghost\\nghost\\nghost\\nmummy') == 'ghost'\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''10\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon''') == 'ghost'\n\nassert solution('''10\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon''') =='mummy'\n\nassert solution('''10\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon''') == 'witch'\n\nassert solution('''10\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon''') == 'demon'\n\nassert solution('''10\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon''') =='mummy'",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\\n\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\"\"\"\n\n\"\"\"\nSince, when a list is sorted by 2 attributes, the result will be sorted by first attribute.\nIn our case, when a list is sorted by 2 attributes, it'll be sorted by 1st attribute.\nSo, we need to maintain the order of the list in the 2nd attribute.\n\"\"\"\n\nn, m = list(map(int, input().split()))\nsongs = []\nfor _ in range(n):\n    songs.append(list(map(str, input().split())))\n\nfor _ in range(m):\n    artist = [i[0] for i in sorted(songs, key=lambda x: x[0])]\n    album = [i[1] for i in sorted(songs, key=lambda x: x[0])]\n    song = [i[2] for i in sorted(songs, key=lambda x: x[0])]\n    songs = [i for i in zip(artist, album, song)]\n    print()\n\n[print(*i) for i in songs]\n",
        "num_ids_2": 118,
        "num_ids_4": 118
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\") == \"Artist Album Song_Title Length_seconds\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\"\nprint(\"Test 1 Successful!\")\n\nSample Input:\nArtist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\nSample Output:\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nGeorge_Winston Summer Lullaby 215\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\nArtist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\nArtist Album Song_Title Length_seconds\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\nArtist Album Song_Title Length_seconds\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n\nArtist Album Song_Title Length_seconds\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n\nArtist Album Song_Title Length_seconds\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\nArtist Album Song_Title Length_seconds\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\nArtist Album Song_Title Length_seconds\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\nArtist Album Song_Title Length_seconds\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nGeorge_Winston Summer Lullaby",
        "num_ids_2": 177,
        "num_ids_4": 177
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''Artist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\n''') == '''Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n'''\n\n\nimport sys\n\nclass Attribute:\n    def __init__(self, name, minVal, maxVal, minIndex, maxIndex, validValues):\n        self.name = name\n        self.minVal = minVal\n        self.maxVal = maxVal\n        self.minIndex = minIndex\n        self.maxIndex = maxIndex\n        self.validValues = validValues",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\"\"\"\n\"\"\"\n\n\n\n\nGiven two strings s and t, the Hamming distance between s and t, denoted dH(s,t), is the number of corresponding symbols that differ in s and t. See Figure 2.\n\nGiven: Two DNA strings s and t of equal length (not exceeding 1 kbp).\n\nReturn: The Hamming distance dH(s,t).\n\nSample Dataset\nGAGCCTACTAACGGGAT\nCATCGTAATGACGGCCT\nSample Output\n7\n\"\"\"\n\ns = \"GAGCCTACTAACGGGAT\"\nt = \"CATCGTAATGACGGCCT\"",
        "num_ids_2": 116,
        "num_ids_4": 116
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('Artist Album Song_Title Length_seconds') == '''Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n'''\n\nassert solution('Artist Album Song_Title Length_seconds') == '''Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n'''\n\nassert solution('Artist Album Song_Title Length_seconds') == '''Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n'''\n\nassert solution('Artist Album Song_Title Length_seconds') == '''Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n'''\n\n\"\"\"\nimport re\nimport sys\n\nclass song(object):\n    def __init__(self, artist, album, title, length_s):\n        self.artist = artist\n        self.album = album\n        self.title = title\n        self.length_s = length_s\n    def __lt__(self, other):\n        #ABS\n        if self.length_s == other.length_s:\n            #BOTH SORT BY ARTIST\n            if self.artist == other.artist:\n                #BOTH SORT BY ALBUM\n                if self.album == other.album:\n                    #BOTH SORT BY TITLE\n                    if self.title == other.title:\n                        return True\n                    #BOTH SORT BY TITLE\n                    else:\n                        return self.title < other.title\n                #BOTH SORT BY ALBUM\n                else:\n                    return self.album < other.album\n            #BOTH SORT BY ARTIST\n            else:\n                return self.artist < other.artist\n        #ABS\n        else:\n            return self.length_s < other.length_s\n\nn = int(sys.stdin.readline())\nfor i in range(n):\n    #COLLECT SONG DATA\n    artist = sys.stdin.readline().rstrip()\n    album = sys.stdin.readline().rstrip()\n    title = sys.stdin.readline().rstrip()\n    length_s = int(sys.stdin.readline())\n    #CREATE SONG OBJECT\n    s = song(artist, album, title, length_s)\n    #WRITE TO STDOUT\n    print(s.artist +'' + s.album +'' + s.title +'' + str(s.length_s))\n\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215') == '\\nArtist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n'\n\"\"\"\n\nimport sys\n\ndata = sys.stdin.readlines()\nlines = data[0].splitlines()\nlen_lines = len(lines)",
        "num_ids_2": 181,
        "num_ids_4": 181
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\"\"\".strip()\n\nassert solution(\"Artist Album Song_Title Length_seconds\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\"\"\".strip()\n\nprint(solution(\"Artist Album Song_Title Length_seconds\"))\n\nTheory:\nhttps://www.youtube.com/watch?v=QrUd3odU8vw\n\n\"\"\"",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\") == \\\n    \"Artist Album Song_Title Length_seconds\"\nassert solution(\"Tchaikovsky Piano_Favorites November 163\") == \\\n    \"Tchaikovsky Piano_Favorites November 163\"\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''Artist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\n''') == '''Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nGeorge_Winston Summer Lullaby 215\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n'''\n\nassert solution('''Artist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\n''') == '''Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nGeorge_Winston Summer Lullaby 215\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n'''\n\nassert solution('''Artist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\n''') == '''Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nGeorge_Winston Summer Lullaby 215\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n'''\n\nassert solution('''Artist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\\n\") == \"Artist Album Song_Title Length_seconds\\nTchaikovsky Piano_Favorites November 163\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\n\"\n\"\"\"\n\nimport sys\n\na = sys.stdin.readline().split()\ni = 0\nwhile True:\n    b = sys.stdin.readline().split()\n    if b:\n        for n in b:\n            print(a[i], n, sep=' ')\n            i += 1\n    else:\n        break\n    print()\n",
        "num_ids_2": 196,
        "num_ids_4": 196
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\n\nassert solution(\"2 10 7\\n5 5 5 5 5 5 6\") == \"NO\"\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'YES'\nassert solution('5 5 5 5 5 5 5') == 'YES'\nassert solution('5 5 5 5 5 5') == 'NO'\nassert solution('1 1 1 1 1 1 1') == 'YES'\nassert solution('1 1 1 1 1') == 'YES'\n",
        "num_ids_2": 26,
        "num_ids_4": 57
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'YES'\nassert solution('1\\n1') == 'YES'\nassert solution('2\\n1\\n1') == 'NO'\nassert solution('3\\n1\\n1\\n1') == 'NO'\nassert solution('4\\n1\\n1\\n1\\n1') == 'NO'\n",
        "num_ids_2": 23,
        "num_ids_4": 58
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('2 10 7\\n3 3 3 3 3 3 3') == 'NO'\nassert solution('2 10 7\\n3 3 3 3 3 3 3') == 'NO'\nassert solution('2 10 7\\n3 3 3 3 3 3 3') == 'YES'\n\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\n\"\"\"\n\nimport sys\n\n_, _, n, w, *bricks = map(int, sys.stdin.read().split())\n\nassert 1 <= n <= 10000, 'n should be in range [1; 10000]'\nassert 1 <= w <= 100, 'w should be in range [1; 100]'\nassert 1 <= bricks[0] <= 10, 'bricks[0] should be in range [1; 10]'\nfor x in bricks[1:]:\n    assert 1 <= x <= 10, 'bricks[1:] should be in range [1; 10]'\n\nbricks.sort()\n\nheight = 0\nfor x in bricks:\n    if height + 1 + x > w:\n        print('NO')\n        exit(0)\n    height += 1\n\nprint('YES')\n",
        "num_ids_2": 40,
        "num_ids_4": 85
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == 'YES'\n\"\"\"\n\nh, w, n = map(int, stdin.readline().strip().split())\nl = list(map(int, stdin.readline().strip().split()))\n\nl.sort()\nl = l[::-1]\n\nleft, right = 0, n - 1\n\nwhile left < right:\n    if h < w:\n        h = h + 1\n        if l[left] + l[right] > w:\n            right -= 1\n        else:\n            left += 1\n    else:\n        w = w + 1\n        if l[left] + l[right] > h:\n            right -= 1\n        else:\n            left += 1",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open(\"sample.in\").read()) == \"YES\"\n\"\"\"\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 10 7\n5 5 5 5 5 5 5''') == 'YES'\nassert solution('''2 10 7\n5 5 5 5 5 5 5''') == 'NO'\nassert solution('''2 10 7\n5 5 4 5 5 5 5''') == 'YES'\nassert solution('''2 10 7\n5 5 5 5 5 5 5''') == 'NO'\nassert solution('''2 10 7\n5 5 4 4 4 5 5''') == 'NO'\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('NYNY') == 'Not Effective'\nassert solution('NNYY') == '66.666667'\nassert solution('NYYY') == '50.000000'\nassert solution('NYYN') == 'Not Effective'\nassert solution('NNNY') == '66.666667'\n",
        "num_ids_2": 26,
        "num_ids_4": 51
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN') == 'Not Effective\\n66.666667\\n50.000000'\nprint(solution(input()))\n\n---\n\nfrom collections import Counter\nfrom math import floor\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\") == \"Not Effective\"\nassert solution(\"10\\nYNYY\\nNNYY\\nYYYY\\nYYYN\\nNNNY\\nYYYN\\nYYNY\\nYYNN\") == \"66.666667\"\n\"\"\"",
        "num_ids_2": 93,
        "num_ids_4": 93
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nNYNY\\nYYNN\\nNNYY\\nYYNN') == 'Not Effective'\nassert solution('4\\nYNNY\\nYYNY\\nNNNY\\nYYNY') == '66.666667'\nassert solution('4\\nNNNN\\nYYNN\\nNNYY\\nYYNN') == '50.000000'\nassert solution('4\\nNNNN\\nYYNY\\nNNYY\\nYYNN') == 'Not Effective'\n",
        "num_ids_2": 57,
        "num_ids_4": 112
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\") == \"Not Effective\\n66.666667\\n50.000000\"\n\"\"\"\n\nimport re\n\nN = int(input())\nvac_strain = [[] for _ in range(N)]\nvac_list = []\nvac_strain_num = 0\nvac_list_num = 0\nfor i in range(N):\n    vac_list.append([re.search('Y', v) for v in re.split('\\n', input())])\n    for j in range(len(vac_list[i])):\n        if vac_list[i][j]:\n            vac_strain[i].append(j)\nfor i in range(len(vac_strain)):\n    for j in range(len(vac_strain[i])):\n        if j == 0:\n            vac_strain_num += 1\n        elif j!= 0:\n            vac_list_num += 1\n\nstrain_A = 0\nstrain_B = 0\nstrain_C = 0\nfor i in range(len(vac_strain)):\n    if len(vac_strain[i]) == 1:\n        strain_A += 1\n    elif len(vac_strain[i]) == 2:\n        strain_B += 1\n    elif len(vac_strain[i]) == 3:\n        strain_C += 1\n\nresult = []\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\nyNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\\nYYNY\\n\") == \"Not Effective\\n66.666667\\n50.000000\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\") == \"66.666667\\n50.000000\"\n\n\"\"\"\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\") == \"Not Effective\\n66.666667\\n50.000000\"\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nYYYY\\nNYYY\\nYYNN\\nYYNN\") == \"Not Effective\"\nassert solution(\"4\\nNYNN\\nYYNN\\nYYNN\\nYYYY\") == \"100.000000\"\nassert solution(\"4\\nYYYY\\nNYYY\\nYYNN\\nYYYY\") == \"50.000000\"\nassert solution(\"4\\nYYNN\\nYYNN\\nYYYY\\nYYYY\") == \"Not Effective\"\n\"\"\"\n",
        "num_ids_2": 55,
        "num_ids_4": 110
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\") == \"66.666667\\n50.000000\"\n\"\"\"\n\nfrom functools import reduce",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('AAABC') == 'Goran'\nassert solution('AABBBC') == 'Adrian'\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BAACC\") == \"Bruno\"\nassert solution(\"CBAAC\") == \"Adrian\"\nassert solution(\"ABBBC\") == \"Bruno\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BAACC\") == \"Bruno\"\nassert solution(\"CCAAC\") == \"Bruno\"\nassert solution(\"ABCC\") == \"Adrian\"",
        "num_ids_2": 27,
        "num_ids_4": 39
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('BAACC') == '2'\nassert solution('CCAABB') == '2'\nassert solution('BBBAAC') == '1'\nassert solution('CBACBA') == '2'\nassert solution('AAABB') == '2'\n",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('BAACC') == '3'\nassert solution('AAACD') == '2'\nassert solution('CCAABB') == '1'\nassert solution('CAAABA') == '0'\nassert solution('CACABA') == '0'\n",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BAACC\") == \"Bruno\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABC') == 'A'\nassert solution('ABCABC') == 'ABC'\nassert solution('ACBCCB') == 'AC'\nassert solution('BCA') == 'C'\nassert solution('ABB') == 'AB'\n",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('BAACC') == 'Bruno'\nassert solution('ABCCB') == 'Bruno'\nassert solution('ABCBB') == 'Adrian'\nassert solution('BCCB') == 'Adrian'\nassert solution('BCCBAA') == 'Adrian'\n",
        "num_ids_2": 26,
        "num_ids_4": 50
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('BAACC') == '3\\nBruno'\n\nSample Input:\n9\nCBABAABCBCBB\nSample Output:\n2\nGoran\nAdrian\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"BAACC\") == 3\nassert solution(\"BAABC\") == 1\nassert solution(\"CBAAC\") == 2\n",
        "num_ids_2": 19,
        "num_ids_4": 29
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n\"\"\") == \"3 543\"\nassert solution(\"\"\"3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\"\"\") == \"3 543\"\n\n\"\"\"\nSample Input:\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n1 A right\n2 B wrong\n3 D wrong\n4 C wrong\n5 E wrong\n6 E right\n7 A wrong\n8 B wrong\n9 C right\n10 C wrong\n11 E wrong\n12 D right\n13 D wrong\n14 E right\n15 A wrong\n16 C wrong\n17 D wrong\n18 C wrong\n19 E right\n-1\n\nSample Output:\n3 12\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\") == \"3 543\"",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == (3, 543)\n\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        stdin = stdin.split('\\n')\n        if stdin[-1]!= '-1':\n            raise Exception(\"Invalid input\")\n        stdin = stdin[:-1]\n        nums = list(map(lambda x: x.split(' '), stdin))\n        ans = [0,0]\n        for num in nums:\n            ans[0] += int(num[0])\n            if num[2] == 'right':\n                ans[1] += int(num[0]) + 20 * (ord(num[1])-ord('A'))\n            else:\n                ans[1] += 0\n        return (ans[0], ans[1])",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\n\"\"\"\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\"\"\"\n) == \"3 543\"\n\"\"\"\nwhen testing the solution, simply run \"python3 challenges.py challenges/d.py\" and enter the input from the previous problem.\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_data) == (-1, -1)\n\n-----Notes-----\nSince the number of problems is capped at 300, no team has more than 300 minutes to finish them. Therefore, the time to solve a particular problem should not be calculated in minutes, but in the number of entries in the log corresponding to that problem. This is achieved by counting the number of entries that have the same problem, and then summing the total times and penalties of those entries.\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\n\"\"\"\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\") == \"3 543\"\nassert solution(\"7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n\") == \"4 502\"\nassert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\") == \"3 543\"\nassert solution(\"7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n\") == \"4 502\"\n\"\"\"\n",
        "num_ids_2": 109,
        "num_ids_4": 218
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == (3, 543)\n\nprint(solution(stdin))\n\n-----Problem Description-----\n\n---\n\n\nNOTE: The solutions for each problem below are commented out, to make the larger problem easier to solve!\n\nGiven:\nA list of log entries describing the submissions made by a team.\n\nWe want:\nA list of the number of problems that the team successfully completed, and the total time score (including penalties) of all their submissions.\n\n-----Solution-----\n\nimport math\nimport os\nimport random\nimport re\nimport sys",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\nassert solution(\"7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n-1\") == \"4 502\"\nassert solution(\"100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"0 0\"\n\"\"\"",
        "num_ids_2": 115,
        "num_ids_4": 147
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == '5'\n\n----\n\"\"\"",
        "num_ids_2": 119,
        "num_ids_4": 119
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '5'\n\"\"\"\n",
        "num_ids_2": 119,
        "num_ids_4": 119
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '5'\n\"\"\"",
        "num_ids_2": 119,
        "num_ids_4": 119
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\\n') == 5\nprint(solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\\n') == 5)\n\n\"\"\"",
        "num_ids_2": 131,
        "num_ids_4": 131
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == \"5\"\n\n\"\"\"\n\nfrom collections import deque\nimport math",
        "num_ids_2": 119,
        "num_ids_4": 119
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\\n\") == \"5\"\n",
        "num_ids_2": 133,
        "num_ids_4": 133
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == '5'\n\n\"\"\"\n\nimport sys\nimport math\nimport numpy as np",
        "num_ids_2": 119,
        "num_ids_4": 119
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == \"5\"\n\"\"\"\n\nfrom __future__ import annotations\nfrom typing import List\nimport sys\nimport math\n\nsys.setrecursionlimit(1500)\n",
        "num_ids_2": 119,
        "num_ids_4": 119
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == \"5\"\n\n-----Solution-----\n'''\n\nimport sys\nimport os\nimport time\nimport re\nimport math\nimport copy\nimport heapq\nimport itertools\nfrom functools import lru_cache\n",
        "num_ids_2": 119,
        "num_ids_4": 119
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('5 2') == '5'\nassert solution('5 2\\n4 1 5 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5') == '5'\n",
        "num_ids_2": 19,
        "num_ids_4": 124
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 7\\n5 5\") == \"gunilla has a point\"\nassert solution(\"5\\n3 7\\n5 10\\n2 10\\n1 10\") == \"edward is right\"\nassert solution(\"5\\n1 10\\n2 10\\n3 10\\n4 10\") == \"edward is right\"\n\"\"\"\n\nN = int(input())\ntime_log = []\nfor _ in range(N):\n    a, b = map(int, input().split())\n    time_log.append((a, b))\n\nlast_a, last_b = 0, 0\nlast_boiling = 0\n\nfor a, b in time_log:\n    if last_a <= a <= last_b:\n        last_a = a\n        last_b = b\n    else:\n        last_boiling = b",
        "num_ids_2": 51,
        "num_ids_4": 80
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"2\n1 7\n5 5\"\"\") == \"gunilla has a point\"\n\"\"\"\nfrom typing import List, Dict\n\nfrom intcode import IntcodeComputer\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 7') == 'edward is right'\n\nassert solution('2\\n5 5') == 'gunilla has a point'\nassert solution('3\\n2 5 7') == 'edward is right'\n\nassert solution('5\\n10 9 9 9 9') == 'gunilla has a point'\nassert solution('5\\n1 1 1 1 1') == 'edward is right'\n",
        "num_ids_2": 35,
        "num_ids_4": 74
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open('input.txt', 'r').read()) == 'gunilla has a point'\nprint(solution(open('input.txt', 'r').read()))\n\n----\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 7\") == \"gunilla has a point\"\nassert solution(\"3\\n1 1\\n0 3\\n1 1\") == \"edward is right\"\n\n\"\"\"\n\nimport sys\nfrom collections import Counter",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1 7') == 'edward is right'\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 7\") == \"gunilla has a point\"\nassert solution(\"1\\n5 5\") == \"edward is right\"\nassert solution(\"2\\n1 7\\n5 5\") == \"edward is right\"\nassert solution(\"2\\n1 7\\n3 2\") == \"gunilla has a point\"\nassert solution(\"2\\n1 7\\n4 2\") == \"edward is right\"\n",
        "num_ids_2": 35,
        "num_ids_4": 78
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 7\\n5 5\") == 'gunilla has a point'\n\nSample Input:\n2\n1 7\n10 20\nSample Output:\nedward is right\"\"\"\n\n\nimport itertools\nimport math\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 7\") == \"edward is right\"\nassert solution(\"2\\n5 5\") == \"gunilla has a point\"\n\nSample Input:\n3\n1 10\n1 3\n1 5\nSample Output:\nedward is right\n\"\"\"\n\nn = int(input())\nl = []\nfor i in range(n):\n    l.append(list(map(int, input().split())))\n\nfor i in range(len(l)):\n    for j in range(l[i][0], l[i][1]+1):\n        if j not in range(l[i][0], l[i][1] + 1):\n            print('edward is right')\n\nfor i in range(len(l)):\n    for j in range(l[i][0], l[i][1]+1):\n        if j not in range(l[i][0], l[i][1] + 1):\n            print('gunilla has a point')\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1 7') == 'edward is right'\n\"\"\"\n\nimport math",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 11\\n1 2\\n2 3\\n2 4\\n1 5\\n3 6\\n2 7\\n3 8\\n4 9\\n3 10\\n5 6\\n7 8\\n8 9\\n6 10\\n5 11\\n8 11\\n9 10\\n9 11\\n10 11\") == \"5\"\n",
        "num_ids_2": 83,
        "num_ids_4": 83
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 11\\nt 1 10\\nt 1 2\\nt 1 3\\ns 1\\ns 2\\ns 3\\ns 4\\nt 5 6\\ns 5\\ns 6\\ns 10\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\n\n\"\"\"\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 10\\n1 2\\n1 3\\n'\n                's 1\\n'\n                 't 1 4\\n'\n                 't 1 5\\n'\n                 't 1 6\\n'\n                 't 1 7\\n'\n                 't 1 8\\n'\n                 't 1 9\\n'\n                's 1\\n'\n                's 2\\n'\n                's 3\\n'\n                's 4\\n'\n                 't 5 6\\n'\n                's 5\\n'\n                's 6\\n'\n                's 7\\n'\n                 't 5 7\\n'\n                 't 5 8\\n'\n                 't 5 9\\n'\n                 't 6 7\\n'\n                 't 6 8\\n'\n                 't 6 9\\n'\n                 't 7 8\\n'\n                 't 7 9\\n'\n                 't 8 9\\n') == '1\\n2\\n3\\n4\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n4\\n1",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 11\\nt 1 2\\nt 1 3\\nt 1 4\\ns 1\\ns 2\\ns 3\\ns 4\\nt 5 6\\ns 5\\ns 6\\ns 10\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\nassert solution(\"10 11\\nt 1 2\\nt 1 3\\nt 1 4\\ns 1\\ns 2\\ns 3\\ns 4\\nt 5 6\\ns 5\\ns 6\\ns 10\") == \"5\\n5\\n5\\n1\\n2\\n2\\n5\\n\"\nassert solution(\"10 11\\nt 1 2\\nt 1 3\\nt 1 4\\ns 1\\ns 2\\ns 3\\ns 4\\nt 5 6\\ns 5\\ns 6\\ns 10\") == \"6\\n6\\n6\\n1\\n2\\n2\\n6\\n\"\nassert solution(\"10 11\\nt 1 2\\nt 1 3\\nt 1 4\\ns 1\\ns 2\\ns 3\\ns 4\\nt 5 6\\ns 5\\ns 6\\ns 10\") == \"7\\n7\\n7\\n1\\n2\\n2\\n7\\n\"\nassert solution(\"10 11\\nt 1 2\\nt 1 3\\nt 1 4\\ns 1\\ns 2\\ns 3\\ns 4\\nt 5 6\\ns 5\\ns 6\\ns 10\") == \"8\\n8\\n8\\n1\\n2\\n2\\n8\\n\"\n",
        "num_ids_2": 136,
        "num_ids_4": 272
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 10\\n\"\n                \"t 1 10\\n\"\n                \"t 1 2\\n\"\n                \"t 1 3\\n\"\n                \"s 1\\n\"\n                \"s 2\\n\"\n                \"s 3\\n\"\n                \"s 4\\n\"\n                \"t 5 6\\n\"\n                \"s 5\\n\"\n                \"s 6\\n\"\n                \"s 10\\n\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\n\n\"\"\"\n\nn, q = [int(x) for x in input().split()]\nt_q = []\ns_q = []\nfor i in range(q):\n    t_q.append(input())\nfor i in range(q):\n    s_q.append(input())\n\n\nclass Chat:\n    def __init__(self, name):\n        self.name = name\n        self.members = []\n        self.last_added = -1\n        self.c = 0\n\n    def add_member(self, m):\n        self.members.append(m)\n        self.last_added = len(self.members)\n        self.c += 1\n\n    def merge(self, c):\n        # 1) find the index of self.c in the list of members, we will remove the members until the index of c + 1\n        # 2) remove the index self.c from the list\n        # 3) replace the index c in the list with self.c + 1\n        # 4) add c + 1 to the list\n        # 5) update the last_added variable\n        # 6) increase the counter c\n        # 7) decrease the counter c_q\n        c -= 1\n        index = self.members.index(self.c)\n        self.members = self.members[:index]\n        self.members.append(self.c + 1)\n        self.members.extend(c + 1)\n        self.last_added -= 1\n        self.c += 1\n\n\nchats = [Chat(0)]\nfor i in range(1, n + 1):\n    chats.append(Chat(i))\n\nfor i in range(q):\n    if t_q[i][0] == \"t\":\n        chats[int(t_q[i][2])].add_member(int(t_q[i][1]))\n    else:\n        chats[int(s_q[i][1])].merge(int(s_q[i][2]))\n\nprint(' '.join([str(x.last_added) for x in chats]))\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 11\\n\\tt 1 10\\n\\tt 1 2\\n\\tt 1 3\\n\\ts 1\\n\\ts 2\\n\\ts 3\\n\\ts 4\\n\\tt 5 6\\n\\ts 5\\n\\ts 6\\n\\ts 10') == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\nassert solution('3 3\\n\\ts 1\\n\\ts 2\\n\\ts 3\\n\\tt 1 2\\n\\tt 1 3') == '1\\n2\\n2\\n'\n\n\"\"\"\n\nn, q = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nfor i in range(q):\n    s = input().split()\n    if s[0] =='s':\n        print(a[int(s[1])-1])\n    else:\n        a[int(s[1])-1] = int(s[2])\n",
        "num_ids_2": 136,
        "num_ids_4": 136
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 11\\n't 1 10\\n's 1\\nt 1 2\\n't 1 3\\n's 1\\nt 1 4\\n't 1 5\\n's 2\\nt 1 6\\n's 3\\nt 1 7\\n's 4\\nt 1 8\\n's 5\\nt 1 9\\n's 6\\nt 1 10\\n's 10\\nt 5 6\\n's 5\\nt 7 8\\n's 5\\nt 9 10\\n's 10\\n\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4\\n2\\n2\\n4",
        "num_ids_2": 1515,
        "num_ids_4": 1515
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 11\\n\"\n                 \"t 1 2\\n\"\n                 \"t 1 3\\n\"\n                 \"t 1 10\\n\"\n                 \"s 1\\n\"\n                 \"s 2\\n\"\n                 \"s 3\\n\"\n                 \"s 4\\n\"\n                 \"t 5 6\\n\"\n                 \"s 5\\n\"\n                 \"s 6\\n\"\n                 \"s 10\\n\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\n\nprint(\"All tests passed.\")\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\n'''\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10''') == '''4\n4\n4\n1\n2\n2\n4\n'''\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\n') == '2016\\n1982\\n2016\\n'\n\nprint(solution(stdin))\n\n----\n\nOver the years, Grandpa Bernie has traveled all over the world. He doesn't travel that much anymore, but he loves to tell his grandchildren stories from all these trips. He\u2019ll tell them the story from when he went to Israel for the first time, or when he went to Greece for the third time.\n\nHis memory works in a funny way. He can easily remember his $k$:th trip to a particular country, but he\u2019ll have a hard time remembering in which year he went on that trip. Given a list of all the trips Grandpa Bernie went on, can you answer a number of queries asking in which year he went on his $k$:th trip to a particular country?\n\n-----Input-----\nThe input consists of:\n - one line with one integer $n$ ($1 \\leq n \\leq 10^5$), the number of trips Grandpa Bernie went on;\n - $n$ lines each containing the name $s$ ($1 \\leq |s| \\leq 20$) of a country and an integer $y$ ($1 \\leq y \\leq 10^6$) representing a trip to country $s$ that Grandpa Bernie went on in year $y$;\n - one line with one integer $q$ ($1 \\leq q \\leq 10^5$), the number of queries;\n - $q$ lines each containing the name $s$ of a country and an integer $k$ representing a query for the $k$:th time Grandpa Bernie went to country $s$.\n\nEach country name only consists of letters from the English alphabet. It is also guaranteed that, for each query asking for the $k$:th trip to country $s$, $k$ is at least $1$ and no greater than the number of times Grandpa Bernie went to country $s$. In particular, it is guaranteed that Grandpa Bernie has visited country $s$ at least once.\n\n-----Output-----\nFor each query for the $k$:th trip Grandpa Bernie went to a country $s$, output a single line containing the year in which Grandpa Bernie went on that trip.\n\n-----Examples-----\nSample Input:\n4\nIceland 2016\nSweden 2015\nIceland 1982\nNorway 1999\n3\nSweden 1\nIceland 1\nIceland 2\nSample Output:\n2016\n1982\n2015\n1999\n1974\n1982\n2001\n2015\n2016\n2016\n1998\n2002\n2015\n1996\n2001\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996\n1996",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2') == '2015\\n1982\\n2016\\n'\nassert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2') == '2016\\n2016\\n2016\\n'\n\nprint('All tests passed.')\n",
        "num_ids_2": 112,
        "num_ids_4": 112
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2015\\n1982\\n2016\\n\"\nassert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2016\\n2016\\n2016\\n\"\nassert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2016\\n2016\\n2016\\n\"\nassert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nIceland 1\\nIceland 1\\nIceland 2\") == \"2016\\n2016\\n2016\\n\"",
        "num_ids_2": 112,
        "num_ids_4": 224
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\n\") == \"2015\\n1982\\n2016\\n\"\n\"\"\"",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_solution",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\nIceland 2016\nSweden 2015\nIceland 1982\nNorway 1999\n3\nSweden 1\nIceland 1\nIceland 2\n''') == '2015\\n1982\\n2016\\n'\n\nassert solution('''4\nIceland 2016\nSweden 2015\nIceland 1982\nNorway 1999\n3\nIceland 1\nIceland 2\nIceland 3\n''') == '2012\\n2012\\n2012\\n'\n\nassert solution('''4\nIceland 2016\nSweden 2015\nIceland 1982\nNorway 1999\n3\nIceland 1\nIceland 2\nIceland 3\nIceland 4\nIceland 5\nIceland 6\nIceland 7\nIceland 8\nIceland 9\nIceland 10\nIceland 11\nIceland 12\nIceland 13\nIceland 14\nIceland 15\nIceland 16\nIceland 17\nIceland 18\nIceland 19\nIceland 20\nIceland 21\nIceland 22\nIceland 23\nIceland 24\nIceland 25\nIceland 26\nIceland 27\nIceland 28\nIceland 29\nIceland 30\nIceland 31\nIceland 32\nIceland 33\nIceland 34\nIceland 35\nIceland 36\nIceland 37\nIceland 38\nIceland 39\nIceland 40\nIceland 41\nIceland 42\nIceland 43\nIceland 44\nIceland 45\nIceland 46\nIceland 47\nIceland 48\nIceland 49\nIceland 50\nIceland 51\nIceland 52\nIceland 53\nIceland 54\nIceland 55\nIceland 56\nIceland 57\nIceland 58\nIceland 59\nIceland 60\nIceland 61\nIceland 62\nIceland 63\nIceland 64\nIceland 65\nIceland 66\nIceland 67\nIceland 68\nIceland 69\nIceland 70\nIceland 71\nIceland 72\nIceland 73\nIceland 74\nIceland 75\nIceland 76\nIceland 77\nIceland 78\nIceland 79\nIceland 80\nIceland 81\nIceland 82\nIceland 83\nIceland 84\nIceland 85\nIceland 86\nIceland 87\nIceland 88\nIceland 89\nIceland 90\nIceland 91\nIceland 92\nIceland 93\nIceland 94\nIceland 95\nIceland 96\nIceland 97\nIceland 98\nIceland 99\nIceland 100\nIceland 101\nIceland 102\nIceland 103\nIceland 104\nIceland 105\nIceland 106\nIceland 107\nIceland 108\nIceland 109\nIceland 110\nIceland 111\nIceland 112\nIceland 113\nIceland 114\nIceland 115\nIceland 116\nIceland 117\nIceland 118\nIceland 119\nIceland 120\nIceland 121\nIceland 122\nIceland 123\nIceland 124\nIceland 125\nIceland 126\nIceland 127\nIceland 128\nIceland 129\nIceland 130\nIceland 131\nIceland 132\nIceland 133\nIceland 134\nIceland 135\nIceland 136\nIceland 137\nIceland 138\nIceland 139\nIceland 140\nIceland 141\nIceland 142\nIceland 143\nIceland 144\nIceland 145\nIceland 146\nIceland 147\nIceland 148\nIceland 149\nIceland 150\nIceland 151\nIceland 152\nIceland 153\nIceland 154\nIceland 155\nIceland 156\nIceland 157\nIceland 158\nIceland 159\nIceland 160\nIceland 161\nIceland 162\nIceland 163\nIceland 164\nIceland 165\nIceland 166\nIceland 167\nIceland 168\nIceland 169\nIceland 170\nIceland 171\nIceland 172\nIceland 173\nIceland 174\nIceland 175\nIceland 176\nIceland 177\nIceland 178\nIceland 179\nIceland 180\nIceland 181\nIceland 182\nIceland 183\nIceland 184\nIceland 185\nIceland 186\nIceland 187\nIceland 188\nIceland 189\nIceland 190\nIceland 191\nIceland 192\nIceland 193\nIceland 194\nIceland 195\nIceland 196\nIceland 197\nIceland 198\nIceland 199\nIceland 200\nIceland 201\nIceland 202\nIceland 203\nIceland 204\nIceland 205\nIceland 206\nIceland 207\nIceland 208\nIceland 209\nIceland 210\nIceland 211\nIceland 212\nIceland 213\nIceland 214\nIceland 215\nIceland 216\nIceland 217\nIceland 218\nIceland 219\nIceland 220\nIceland 221\nIceland 222\nIceland 223\nIceland 224\nIceland 225\nIceland 226\nIceland 227\nIceland 228\nIceland 229\nIceland 230\nIceland 231\nIceland 232\nIceland 233\nIceland 234\nIceland 235\nIceland 236\nIceland 237\nIceland 238\nIceland 239\nIceland 240\nIceland 241\nIceland 242\nIceland 243\nIceland 244\nIceland 245\nIceland 246\nIceland 247\nIceland 248\nIceland 249\nIceland 250\nIceland 251\nIceland 252\nIceland 253\nIceland 254\nIceland 255\nIceland 256\nIceland 257\nIceland 258\nIceland 259\nIceland 260\nIceland 261\nIceland 262\nIceland 263\nIceland 264\nIceland 265\nIceland 266\nIceland 267\nIceland 268\nIceland 269\nIceland 270\nIceland 271\nIceland 272\nIceland 273\nIceland 274\nIceland 275\nIceland 276\nIceland 277\nIceland 278\nIceland 279\nIceland 280\nIceland 281\nIceland 282\nIceland 283\nIceland 284\nIceland 285\nIceland 286\nIceland 287\nIceland 288\nIceland 289\nIceland 290\nIceland 291\nIceland 292\nIceland 293\nIceland 294\nIceland 295\nIceland 296\nIceland 297\nIceland 298\nIceland 299\nIceland 300\nIceland 301\nIceland 302\nIceland 303\nIceland 304\nIceland 305\nIceland 306\nIceland 307\nIceland 308\nIceland 309\nIceland 310\nIceland 311\nIceland 312\nIceland 313\nIceland 314\nIceland 315\nIceland 316\nIceland 317\nIceland 318\nIceland 319\nIceland 320\nIceland 321\nIceland 322\nIceland 323\nIceland 324\nIceland 325\nIceland 326\nIceland 327\nIceland 328\nIceland 329\nIceland 330\nIceland 331\nIceland 332\nIceland 333\nIceland 334\nIceland 335\nIceland 336\nIceland 337\nIceland 338\nIceland 339\nIceland 340\nIceland 341\nIceland 342\nIceland 343\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\n\") == \"2015\\n1982\\n2016\\n\"\n\"\"\"",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\n') == '2016\\n1982\\n2016'\n\"\"\"\n\nfrom collections import defaultdict\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('Iceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999') == '2016\\n1982\\n2015\\n1999'\nassert solution('Iceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2') == '2016\\n1982\\n2015\\n1999\\n2015'\n\n\"\"\"\n",
        "num_ids_2": 44,
        "num_ids_4": 101
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == '2016\\n1982\\n2016\\n'\n\"\"\"\n\nfrom sys import stdin, stdout",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0\n\nlines = stdin.splitlines()\nprint(solution(lines[0]))\nassert solution(lines[0]) == 0\n\nprint(solution('abbcccddddeeeee'))\nassert solution('abbcccddddeeeee') == 10\n\nprint(solution('aabcccddddeeeee'))\nassert solution('aabcccddddeeeee') == 2\n\nprint(solution('aabbcccddddeeeee'))\nassert solution('aabbcccddddeeeee') == 1\n\nprint(solution('aabbbbccccddddeeeee'))\n",
        "num_ids_2": 18,
        "num_ids_4": 47
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\nassert solution(\"aabbcccddddeeeee\") == 10\nassert solution(\"aabbcccddddeeeee\") == 10\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 44
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aabcccddddeeee') == 10\n\n\"\"\"\n\nimport re\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abbcccddddeeeee') == 10\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\nassert solution(\"abcdefghijklmnop\") == 3\nassert solution(\"abcdddeeeee\") == 1\nassert solution(\"dddeeee\") == 0\nassert solution(\"ddddeee\") == 0\n",
        "num_ids_2": 28,
        "num_ids_4": 50
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abbcccddddeeeee') == 10\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\nassert solution(\"aabbbbcccccddddeeeee\") == 10\nassert solution(\"bbbbbbcccccccddddeeeee\") == 0\nassert solution(\"aabbbbbcccccddddeeeee\") == 10\nassert solution(\"abbbbcccddddeeeee\") == 10\n",
        "num_ids_2": 31,
        "num_ids_4": 67
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abbcccddddeeeee') == 10\nassert solution('aab') == 3\n\n---\n\nhttps://app.codility.com/demo/results/training6SYWZC-HU4/\n\nhttps://app.codility.com/demo/results/training5F2XCW-6P8/",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abbcccddddeeeee') == 10\n\"\"\"\n\n\"\"\"\nTODO:\n- Discuss:\n    - O(n) = linear time\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - O(n) = linear time\n\n- Brainstorm:\n    - O(n) = linear time\n    - O(n) = linear time\n    - O(1) = constant time\n\n- Discuss:\n    - O(n) = linear time\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - O(n) = linear time\n    - O(1) = constant time\n\n- Brainstorm:\n    - O(n) = linear time\n    - O(n) = linear time\n    - O(1) = constant time\n\n- Discuss:\n    - O(n) = linear time\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - O(n) = linear time\n    - O(1) = constant time\n\n- Brainstorm:\n    - O(n) = linear time\n    - O(n) = linear time\n    - O(1) = constant time\n\n- Discuss:\n    - O(n) = linear time\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - O(n) = linear time\n    - O(1) = constant time\n\n- Brainstorm:\n    - O(n) = linear time\n    - O(n) = linear time\n    - O(1) = constant time\n\n- Discuss:\n    - O(n) = linear time\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - O(n) = linear time\n    - O(1) = constant time\n\n- Brainstorm:\n    - O(n) = linear time\n    - O(n) = linear time\n    - O(1) = constant time\n\n- Discuss:\n    - O(n) = linear time\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - O(n) = linear time\n    - O(1) = constant time\n\n- Brainstorm:\n    - O(n) = linear time\n    - O(n) = linear time\n    - O(1) = constant time\n\n- Discuss:\n    - O(n) = linear time\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - O(n) = linear time\n    - O(1) = constant time\n\n- Brainstorm:\n    - O(n) = linear time\n    - O(n) = linear time\n    - O(1) = constant time\n\n- Discuss:\n    - O(n) = linear time\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - O(n) = linear time\n    - O(1) = constant time\n\n- Brainstorm:\n    - O(n) = linear time\n    - O(n) = linear time\n    - O(1) = constant time\n\n- Discuss:\n    - O(n) = linear time\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - O(n) = linear time\n    - O(1) = constant time\n\n- Brainstorm:\n    - O(n) = linear time\n    - O(n) = linear time\n    - O(1) = constant time\n\n- Discuss:\n    - O(n) = linear time\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - O(n) = linear time\n    - O(1) = constant time\n\n- Brainstorm:\n    - O(n) = linear time\n    - O(n) = linear time\n    - O(1) = constant time\n\n- Discuss:\n    - O(n) = linear time\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - https://www.youtube.com/watch?v=mY07_B5Oq3A\n    - O(n) = linear time\n    - O(1) = constant time\n\n- Brainstorm:\n    - O(n) = linear time\n    - O(n) = linear time\n    - O(1) = constant time\n\n-",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == \\\n'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\n\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == \\\n'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\n\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == \\\n'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\n\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == \\\n'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\n\n-----Constraints-----\n1 <= n <= 2000\n\n1 <= m <= 200\n\n1 <= s.length <= 100\n\ns contains only uppercase letters and spaces.\n\ns contains no leading or trailing spaces.\n\n1 <= m <= 200\n\n1 <= x.length <= 20\n\n1 <= x <= 20\n\n1 <= y.length <= 20\n\n1 <= y <= 20\n\n1 <= z.length <= 20\n\n1 <= z <= 20\n\ns does not contain any spaces before or after the words.\n\ns contains no periods.\n\ns contains no spaces.\n\nThe last line of s is the empty string.\n\nno two words are the same.\n\nno two pairs of adjacent words are the same.\n\nno two consecutive lines are the same.\n\nAt most $20000$ words in total.\n\n\"\"\"\n",
        "num_ids_2": 66,
        "num_ids_4": 132
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n\nprint(\"All tests passed.\")",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n\nassert solution(\"Inefficiency is a blight on the world and its\") == \"Inefficiency is a blight on the world and its\\n. is a blight on.. and its\\nhumanity\"\n\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\\n\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\\n\"\n\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\\n\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\\n\"",
        "num_ids_2": 84,
        "num_ids_4": 202
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''Engineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity''') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(solution_test_input_1) == solution_test_output_1\nassert solution(solution_test_input_2) == solution_test_output_2\nassert solution(solution_test_input_3) == solution_test_output_3\nprint('The local tests are done. Click on \"Check\" for more details about in-depth tests.')\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 63
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Engineering will save the world from inefficiency') == 'Engineering will save the world from inefficiency'\nassert solution('Inefficiency is a blight on the world and its') == 'Inefficiency is a blight on.. and its'\nassert solution('duplicated words are duplicated work') == 'duplicated. work'\n\"\"\"\n\nimport collections\nimport sys",
        "num_ids_2": 55,
        "num_ids_4": 76
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nprint(\"Test pass.\")\n\nSample Input:\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in the west.\nThe sun rises in the east and sets in the west.\nSun sets in the east and rises in",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\") == 'Engineering will save the world from inefficiency'\nassert solution(\"Inefficiency is a blight on the world and its\") == 'Inefficiency is a blight on the world and its.'\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\") == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its'\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nHumanity\") == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nHumanity'\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nHumanity\\n\") == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nHumanity\\n'\n",
        "num_ids_2": 56,
        "num_ids_4": 162
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"Engineering will save the world from inefficiency\"\n) == \"Engineering will save the world from inefficiency\"\nassert solution(\n    \"Inefficiency is a blight on the world and its\"\n) == \"Inefficiency is a blight on the world and its\"\nassert solution(\n    \"The quick brown fox jumps over the lazy dog\"\n) == \"The quick brown.. jumps over the lazy.. dog\"\nassert solution(\n    \"The quick brown fox jumps over the lazy dog\"\n) == \"The quick brown.. jumps over the lazy.. dog\"\nassert solution(\n    \"The quick brown fox jumps over the lazy dog\"\n) == \"The quick brown.. jumps over the lazy.. dog\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 2 3\\n4 5 6\\n7 -1 8\\n9') == 'unsatisfactory'\nassert solution('4 4\\n-1 -2 3\\n1 2 3\\n4 5 6\\n7 -1 8\\n9') =='satisfactory'\n\n\"\"\"\n\nimport sys\nimport sys\nimport sys\n",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == 'unsatisfactory'\nassert solution('1 2 -3') == 'unsatisfactory'\nassert solution('1 -2 3') =='satisfactory'\nassert solution('1 -2 -3') =='satisfactory'\n",
        "num_ids_2": 22,
        "num_ids_4": 52
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3''') == 'unsatisfactory'\n\n'''\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3''') == 'unsatisfactory'\nassert solution('''5 2\n-1 1\n-2 1\n0 2\n0 1\n0 -1\n1 1\n2 1\n-2 -2\n-1 -1\n-1 -1\n1 1\n2 2\n-1 1\n0 1''') =='satisfactory'\nassert solution('''1 1\n0 1\n1 1\n0 1\n1 1\n0 1\n1 1\n-1 1\n1 1\n0 1\n1 1\n1 1\n0 1\n-1 1\n0 1\n1 1\n-1 1\n-1 1\n0 1\n0 1\n-1 1\n1 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n-1 1\n1 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n-1 1\n0 1\n0 1\n1 1\n-1 1\n1 1\n0 1\n0 1\n1 1\n0 1\n-1 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n-1 1\n0 1\n1 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n-1 1\n1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n-1 1\n1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n1 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n-1 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n-1 1\n0 1\n0 1\n0 1\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\nassert solution(\"4 2\\n1 -1 1\\n1 1 -1\\n1 1 1\") == \"satisfactory\"\n",
        "num_ids_2": 75,
        "num_ids_4": 75
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\nassert solution('5 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') =='satisfactory'\nassert solution('5 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') =='satisfactory'\nassert solution('5 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\nassert solution('5 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n1 -1 2') =='satisfactory'\n",
        "num_ids_2": 84,
        "num_ids_4": 162
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\n\"\"\"",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\"\n) == \"unsatisfactory\"\n\nassert solution(\n\"7 3\\n-1 1 1\\n-1 -2 2\\n1 -2 2\\n1 -2 -3\\n1 2 -3\\n1 2 3\\n1 -3 3\\n\"\n) == \"satisfactory\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3''') == 'unsatisfactory'\nassert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3''') =='satisfactory'\nassert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3''') =='satisfactory'\nassert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3''') == 'unsatisfactory'\n'''",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\n1 1 1 5 3 4 6 6') == '4'\n\nassert solution('8\\n2 2 4 4 6 6') == 'none'\n\nassert solution('4\\n1 1 5 5') == 'none'\nassert solution('5\\n1 1 1 1 1') == 'none'\nassert solution('8\\n1 1 1 1 1 1 1 1') == 'none'",
        "num_ids_2": 38,
        "num_ids_4": 71
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 1 1 1 1 1\") == \"none\"\nassert solution(\"3\\n1 1 1\") == \"0\"\nassert solution(\"5\\n1 2 1 1 3\") == \"2\"\nassert solution(\"1\\n1\") == \"none\"\nassert solution(\"5\\n3 3 2 1 1\") == \"none\"\n",
        "num_ids_2": 33,
        "num_ids_4": 63
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\\n1\\n1\") == \"none\"\n\nassert solution(\"3\\n1\\n1\\n6\") == \"none\"\n\nassert solution(\"3\\n1\\n1\\n5\") == \"1\"\n\nassert solution(\"3\\n1\\n1\\n5\") == \"2\"\n\nassert solution(\"3\\n1\\n1\\n5\") == \"3\"",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1\\n2') == '2'\nassert solution('3\\n2\\n2\\n1') == '2'\nassert solution('4\\n1\\n1\\n1\\n1') == 'none'\nassert solution('8\\n6\\n3\\n5\\n4\\n1\\n2\\n3\\n2\\n2') == 'none'\n\"\"\"\nfrom collections import Counter",
        "num_ids_2": 35,
        "num_ids_4": 94
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'none'\nassert solution('5\\n1 1 1 1 1') == 'none'\nassert solution('5\\n1 1 2 1 1') == '2'\nassert solution('5\\n1 1 1 2 1') == 'none'\nassert solution('5\\n1 1 1 1 2') == 'none'\n",
        "num_ids_2": 27,
        "num_ids_4": 61
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n3 1 4 1 2 1') == '3'\nassert solution('10\\n1 1 1 1 1 1 1 1 1 1 1 1 1') == 'none'\nassert solution('10\\n3 1 4 1 2 1') == '3'\nassert solution('10\\n4 1 4 1 2 1') == 'none'\nassert solution('5\\n3 1 4 1 2') == 'none'\n",
        "num_ids_2": 43,
        "num_ids_4": 79
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1\\n3\\n4\") == \"0\"\nassert solution(\"2\\n3\\n1\\n3\\n4\") == \"1\"\nassert solution(\"2\\n3\\n2\\n3\\n4\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 41,
        "num_ids_4": 63
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1 1 5 3 4 6 6\") == \"4\"\nassert solution(\"4\\n6 6 1 5 3 4 2\") == \"none\"",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == '4'\nprint(solution(stdin))",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"04:00:00\") == \"08:00:00\"\n\"\"\"\n\nfrom datetime import datetime\nimport sys",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"04:00:00\") == \"08:00:00\"",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('20:00:00') == '08:00:00'\nassert solution('04:00:00') == '08:00:00'\n\nprint(solution('20:00:00'))\nprint(solution('04:00:00'))",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20:00:00\", \"04:00:00\") == \"08:00:00\"\nassert solution(\"13:15:19\", \"11:57:21\") == \"08:13:11\"\nassert solution(\"12:12:12\", \"12:12:12\") == \"00:00:00\"\nassert solution(\"18:07:30\", \"18:07:30\") == \"00:00:00\"\n\"\"\"",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20:00:00\", \"04:00:00\") == \"08:00:00\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20:00:00\",\"04:00:00\") == \"08:00:00\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"04:00:00\") == \"08:00:00\"\n\nprint(solution(\"20:00:00\"))\nprint(solution(\"04:00:00\"))\n\"\"\"\n\n\n\nimport datetime as dt\n\nstdin = \"20:00:00\"\nstdout = \"08:00:00\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"20:00:00\"\n) == \"08:00:00\"\nassert solution(\n\"04:00:00\"\n) == \"08:00:00\"\nassert solution(\n\"10:00:00\"\n) == \"08:00:00\"\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('20:00:00', '04:00:00') == '08:00:00'\nassert solution('01:12:00', '03:14:00') == '09:42:00'\nassert solution('23:59:59', '00:00:00') == '00:00:01'\nassert solution('07:00:00', '21:00:00') == '18:00:00'\n\"\"\"\n\nfrom datetime import datetime",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\n\"\"\"\n\nimport datetime\n\nstdin = \"20:00:00\"\nstdout = \"08:00:00\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"31 6\") == 4\n\n\"\"\"\n\nfrom math import ceil, log2",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"31 6\") == \"4\"\nprint(solution(\"31 6\"))\n\"\"\"\n\nfrom typing import Dict\n\nclass FrugalRolls:\n    def __init__(self, length: int, max_crisis: int) -> None:\n        self.length = length\n        self.max_crisis = max_crisis\n        self.layers: Dict[int, int] = {\n            1: 0\n        }\n\n    def update(self, layer: int, roll: int) -> None:\n        if layer in self.layers:\n            if self.layers[layer] < self.length:\n                self.layers[layer] += roll\n            else:\n                self.layers[layer] = roll\n        else:\n            self.layers[layer] = roll\n\n    def layers_left(self) -> Dict[int, int]:\n        layers = {}\n        for layer in self.layers:\n            layers[layer] = self.length - self.layers[layer]\n        return layers\n\n    def get_layers_left(self) -> Dict[int, int]:\n        return self.layers_left()\n\n    def get_crisis_counter(self) -> int:\n        counter = 0\n        for layer in self.layers:\n            if layer > self.max_crisis:\n                counter += 1\n        return counter\n\n    def get_k(self) -> int:\n        layers = self.layers_left()\n        n = len(layers)\n        if n == 0:\n            return 0\n        k = 0\n        while n > 0:\n            k += 1\n            crisis_count = 0\n            for layer, value in layers.items():\n                if value > self.length:\n                    crisis_count += 1\n            if crisis_count <= self.max_crisis:\n                n -= 1\n        return k\n\n\nimport unittest\n\n\nclass TestFrugalRolls(unittest.TestCase):\n    def test_layers_left(self):\n        fr = FrugalRolls(31, 6)\n        fr.update(1, 3)\n        fr.update(2, 6)\n        fr.update(3, 4)\n        fr.update(4, 2)\n        fr.update(5, 7)\n        self.assertEqual(fr.layers_left(), {1: 19, 2: 20, 3: 21, 4: 21, 5: 14})\n\n    def test_crisis_count(self):\n        fr = FrugalRolls(31, 6)\n        fr.update(1, 3)\n        fr.update(2, 6)\n        fr.update(3, 4)\n        fr.update(4, 2)\n        fr.update(5, 7)\n        self.assertEqual(fr.get_crisis_counter(), 0)\n        fr.update(2, 6)\n        self.assertEqual(fr.get_crisis_counter(), 1)\n        fr.update(4, 2)\n        self.assertEqual(fr.get_crisis_counter(), 2)\n        fr.update(5, 7)\n        self.",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('31 6') == 4\n\n-----Problem-----\nFind the smallest number of layers such that the maximum number of crises never happens.\n\n-----Solution-----\n\"\"\"\n\nfrom math import gcd\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('31 6') == '4'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"31 6\") == \"4\"\n\n\n\nSample Input:\n8 3\nSample Output:\n3\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('31 6') == '4'\nassert solution('11 9') == '6'",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"31 6\") == \"4\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"31 6\") == \"4\"\n\"\"\"\n\n\nfrom collections import deque\n\nstdin = input()\nl, n = stdin.split()\nl, n = int(l), int(n)\n\ncrisis = [0] * (n + 1)\nl = deque()\nl.append(l)\n\nfor i in range(n):\n    # appending from the right\n    l.appendleft(i + 1)\n    if l[0] > l[-1]:\n        # Crisis\n        crisis[l.popleft()] += 1\n        crisis[l.popleft()] += 1\n    else:\n        crisis[l.pop()] += 1\n    l.append(i + 1)\n\nwhile len(l) > 1:\n    # appending from the right\n    l.appendleft(l.pop())\n    if l[0] > l[-1]:\n        # Crisis\n        crisis[l.popleft()] += 1\n        crisis[l.popleft()] += 1\n    else:\n        crisis[l.pop()] += 1\n\nfor j in range(1, n + 1):\n    if crisis[j] == 0:\n        print(j)\n        break\n\n\n\"\"\"\nSample Input:\n31 6\nSample Output:\n4\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"31 6\") == \"4\"\nassert solution(\"3 10\") == \"1\"\nassert solution(\"3 10 5\") == \"3\"\nassert solution(\"3 10 10\") == \"2\"\nassert solution(\"3 10 10 2\") == \"2\"\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('31 6') == '4'\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"2.414213562373095\"\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == 2.6666666666666665\n\"\"\"\nfrom itertools import islice\nimport math\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == 2.6666666666666665\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == 2.6666666666666665\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == 2.6666666666666665\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == 2.6666666666666665\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\nassert solution(\"0\") == \"2.718281828459045\"\nassert solution(\"1\") == \"2.718281828459045\"\nassert solution(\"2\") == \"2.718281828459045\"\nassert solution(\"3\") == \"2.718281828459045\"\n",
        "num_ids_2": 33,
        "num_ids_4": 69
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '2.6666666666666665'\nassert solution('10') == '2.7182818284590455'\n\"\"\"\n\nimport math",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == 2.6666666666666665\n\"\"\"\n\n\n\n\"\"\"\nSolution 1\n\"\"\"\n\nn = int(input())\n\ne = 0\n\nfor i in range(n + 1):\n    e += 1 / i\n\nprint(\"%.12f\" % e)\n\n\n\n\"\"\"\nSolution 2\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '2.6666666666666665'\nassert solution('1') == '2.718281828459045235360287471352662497757247093699959574966967627'\n\"\"\"",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"1 1 1\") == \"opponent\"\nassert solution(\"9 10 10\") == \"opponent\"\nassert solution(\"3 3 3\") == \"paul\"\nassert solution(\"4 0 8\") == \"opponent\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 7\\n') == 'paul'\nassert solution('5 2 6\\n') == 'opponent'\nassert solution('5 1 6\\n') == 'paul'\n\"\"\"\n\nN, P, Q = [int(x) for x in input().split()]\n",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 7') == 'paul'\nassert solution('4 2 6') == 'opponent'\nassert solution('10 5 0') == 'opponent'\nassert solution('1 2 3') == 'paul'\n\"\"\"\nimport math\nfrom typing import List\n\n\nclass PongGame:\n    def __init__(self, N: int, P: int, Q: int) -> None:\n        self.N = N\n        self.P = P\n        self.Q = Q\n        self.remain_rounds = self.N - 1\n\n    def play_pong_game(self) -> List[int]:\n        if self.P < self.Q:\n            self.remain_rounds = math.ceil((self.Q - self.P) / (self.P - self.Q))\n        else:\n            self.remain_rounds = math.ceil((self.P - self.Q) / (self.P - self.Q))\n        return self.remain_rounds\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 7') == 'paul'\nassert solution('5 3 4') == 'opponent'\n\"\"\"\n\nn, p, q = map(int, input().split())\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"10 10 10\") == \"opponent\"\n\"\"\"\n\nimport unittest\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"2 5 1\") == \"opponent\"\nassert solution(\"3 4 5\") == \"paul\"\nassert solution(\"4 1 2\") == \"opponent\"\nassert solution(\"5 4 4\") == \"paul\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"5 3 2\") == \"opponent\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"7 5 3\") == \"opponent\"\n\nassert solution(\"1 100 100\") == \"paul\"\nassert solution(\"1 1 100\") == \"opponent\"\n\nassert solution(\"1 2 3\") == \"paul\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"3 4 5\") == \"opponent\"\nassert solution(\"1 2 3\") == \"paul\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3 7') == 'paul'\nassert solution('10 2 8') == 'opponent'\nassert solution('3 3 6') == 'paul'\nassert solution('1 1 2') == 'opponent'\nassert solution('10 9 7') == 'opponent'\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"4\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 2\n\"\"\"\n\nimport math\nimport sys",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '2'\nassert solution('1') == '2'\n'''",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"2\"\n\"\"\"\n\nn = int(input())\n\nprint(n//2 + 1)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == 2\nassert solution('1') == 1\nassert solution('2') == 1\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == 2\n\"\"\"\n\nimport math",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1\n''') == 2\nassert solution('''2\n''') == 1\nassert solution('''10\n''') == 4\nassert solution('''100\n''') == 4\nassert solution('''947\n''') == 7\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == 2\n\"\"\"\n\nimport math",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n') == '2'\nassert solution('2\\n') == '3'\nassert solution('3\\n') == '4'\nassert solution('4\\n') == '5'\nassert solution('5\\n') == '6'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == 2\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"123a\") == \"No\"\nassert solution(\"c0deninja5\") == \"Yes\"\nassert solution(\"c0deninja51\") == \"No\"\n\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 51
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123\") == \"No\"\nassert solution(\"123a\") == \"Yes\"\n\n-----Constraints-----\n|S| and |P| \u2264 101\n\n-----Notes-----\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123a\") == \"No\"\nassert solution(\"123\") == \"Yes\"\n\nprint(solution(\"123\"))\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('123\\n123a') == 'No'\nassert solution('123\\n123') == 'No'\nassert solution('123\\n1234') == 'Yes'\nassert solution('123\\n1234a') == 'Yes'\n\nprint(solution('123\\n1234a'))",
        "num_ids_2": 27,
        "num_ids_4": 56
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"123a\") == \"No\"\n\nprint(solution(stdin.readline()))\n\n-----Notes-----\nDictionary attack, there is nothing to match.\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123\\n123a\") == \"No\"\nassert solution(\"123\\n123A\") == \"No\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12345') == 'Yes'\nassert solution('23456') == 'Yes'\nassert solution('abcde') == 'Yes'\nassert solution('ABCde') == 'Yes'\nassert solution('0') == 'Yes'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"123\") == \"No\"\nassert solution(\"123a\") == \"No\"\nassert solution(\"11\") == \"No\"\nassert solution(\"1234\") == \"No\"\nassert solution(\"a1234\") == \"Yes\"\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('123\\n123a') == 'No'\nassert solution('aaa\\naaa') == 'Yes'\nassert solution('qwerty\\nqwert') == 'No'\nassert solution('a1b2\\nab2a') == 'Yes'\nassert solution('ab\\nab') == 'No'\n",
        "num_ids_2": 27,
        "num_ids_4": 62
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"123\") == \"No\"\nassert solution(\"a2\") == \"Yes\"\nassert solution(\"a22\") == \"Yes\"\nassert solution(\"a122\") == \"No\"\nassert solution(\"a2a\") == \"No\"\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"kemija paprika papapripikapa\") == \"zelena paprika\"\nassert solution(\"bana paprika papapripikapa\") == \"bana paprika papapripikapa\"\nassert solution(\"bana paprika papapripikapa papapri\") == \"bana paprika papapripikapa\"\nassert solution(\"bana paprika papapripikapa papapri mika\") == \"bana paprika papapripikapa mika\"\n\"\"\"\n",
        "num_ids_2": 48,
        "num_ids_4": 110
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\nprint(\"All tests passed.\")",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\nassert solution('paprika') == 'paprika'\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\nprint(solution(\"zepelepenapa papapripikapa\"))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\nassert solution(\"\") == \"\"\n\nassert solution(\"zepelepenapa papapripikapa    \") == \"zelena paprika\"\n\nassert solution(\"asdfadf   asdf   sadf   \") == \"asdfadf asdf sadf\"\n\nassert solution(\"   asdfadf   asdf   sadf   \") == \"asdfadf asdf sadf\"\n",
        "num_ids_2": 29,
        "num_ids_4": 80
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\nassert solution('sulotpa pahpapa') =='sulotpa pahpapapa'\n",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('kemija') == 'pemipijapa'\nassert solution('paprika') == 'papapripikapa'\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"kemija\") == \"kepemipijapa\"\nassert solution(\"paprika\") == \"papapripikapa\"\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''kemija\npaprika\nluka\n''') == 'zelena paprika'",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'IMPOSSIBLE'\nassert solution('4 5') == 'IMPOSSIBLE'\nassert solution('16 5') == '1.600000000000001'\n\nimport sys; input = lambda: sys.stdin.readline().rstrip()\nassert abs(float(solution('32 2')) - -32) <= 1e-6\nassert abs(float(solution('8 10')) - 0.5) <= 1e-6\n",
        "num_ids_2": 27,
        "num_ids_4": 65
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('32 2') == '-32'\n\nassert solution('50 1') == 'IMPOSSIBLE'\n\"\"\"\n\nfrom typing import Iterable\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(32 2) == '-32'\nassert solution(50 4) == 'IMPOSSIBLE'\nassert solution(50 0) == 'IMPOSSIBLE'\nassert solution(40 3) == 'IMPOSSIBLE'\nassert solution(40 1) == 'IMPOSSIBLE'\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('32 2') == '-32'\nassert solution('1 1') == 'IMPOSSIBLE'\nassert solution('7 3') == 'ALL GOOD'",
        "num_ids_2": 26,
        "num_ids_4": 38
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(32, 2) == '-32'\nassert solution(72, 1) == 'IMPOSSIBLE'\nassert solution(4, 100) == 'ALL GOOD'\n",
        "num_ids_2": 28,
        "num_ids_4": 41
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"32 2\"\n) == \"-32\"\nassert solution(\n    \"32 2\"\n) == \"-32\"\nassert solution(\n    \"34 2\"\n) == \"IMPOSSIBLE\"\nassert solution(\n    \"34 2\"\n) == \"IMPOSSIBLE\"\nassert solution(\n    \"50 2\"\n) == \"ALL GOOD\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('32 2') == '-32'\nassert solution('98 99') == 'IMPOSSIBLE'\nassert solution('0 0') == 'IMPOSSIBLE'\nassert solution('2 100') == 'ALL GOOD'\nassert solution('100 0') == 'ALL GOOD'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"32 2\") == \"-32\"\nassert solution(\"0 1\") == \"IMPOSSIBLE\"\nassert solution(\"0 0\") == \"ALL GOOD\"\n",
        "num_ids_2": 25,
        "num_ids_4": 37
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('32 2') == '-32'\n\nSample Input:\n45 5\nSample Output:\nIMPOSSIBLE\n\"\"\"\n\n\nimport math\n\na, b = [int(x) for x in stdin.split()]",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('32 2') == '-32'\nassert solution('-32 2') == '-32'\nassert solution('0 2') == 'IMPOSSIBLE'\nassert solution('0 0') == 'IMPOSSIBLE'\nassert solution('32 32') == 'IMPOSSIBLE'\n",
        "num_ids_2": 25,
        "num_ids_4": 53
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 2 3 3\n1 3 4''') == 'both'",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"none\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 2 3 3\n1 3 4''') == 'both'\nassert solution('''2 2 3 3\n1 3 4''') == 'one'\nassert solution('''2 2 3 3\n1 3 4''') == 'none'\nassert solution('''2 2 3 3\n1 3 4''') == 'none'\nassert solution('''2 2 3 3\n1 3 4''') == 'both'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 3 3\\n1 3 4\") == \"both\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"none\"\n\"\"\"\n\nimport sys\nimport os\nfrom collections import namedtuple\nimport math\n\nclass ParseError(Exception):\n    pass\n\nclass Solution:\n    def solve(self, _input):\n        pass",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2 3 3') == 'both'\nassert solution('1 3 4') == 'one'\nassert solution('0 2 3 4') == 'none'\n\"\"\"\n\na, b, c, d = map(int, stdin.readline().split())\n",
        "num_ids_2": 25,
        "num_ids_4": 38
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"2 2 3 3\"\n) == \"both\"\nassert solution(\n    \"1 3 4\"\n) == \"one\"\nassert solution(\n    \"1 1 1\"\n) == \"none\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2 3 3\\n1 3 4') == 'both'\nassert solution('2 2 3 3\\n1 1 1') == 'one'\nassert solution('2 2 3 3\\n1 3 4') == 'none'\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        pass",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 3 3\") == \"both\"\nassert solution(\"3 3 3 3\") == \"none\"\nassert solution(\"1 1 1 1\") == \"both\"\nassert solution(\"3 3 3 3\") == \"none\"\n\nimport sys\n\na, b, c, d = map(int, sys.stdin.readline().split())",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 6 8') == '10'\n\"\"\"\n\nnumbers = input().split()\nnumbers = list(map(int, numbers))\n\nnumbers.sort()\nd = numbers[1] - numbers[0]\nl = len(numbers) - 1\n\nfor i in range(1, l):\n    if numbers[i + 1] - numbers[i]!= d:\n        break\n\nprint(numbers[i] + d)\n\n\"\"\"\nSample Input:\n1 3 5\nSample Output:\n4\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 6 8\") == \"10\"\n\nsolution(\"4 6 8\")\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6 8\") == \"10\"\nassert solution(\"-4 -6 -8\") == \"10\"\nassert solution(\"-1 -2 3\") == \"2\"\n\nassert solution(\"0 1 0\") == \"1\"\nassert solution(\"-1 1 -3\") == \"1\"\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 6 8\") == \"10\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '4'\nassert solution('1 2 3 4') == '10'\nassert solution('1 2 4 3') == '10'\nassert solution('4 2 3') == '10'\n",
        "num_ids_2": 20,
        "num_ids_4": 46
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 6 8') == '10'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 6 8\") == \"10\"\nassert solution(\"1 2 3\") == \"4\"\nassert solution(\"-1 -2 -3\") == \"4\"\nassert solution(\"-10 -1 1\") == \"-8\"\n\"\"\"\n\nimport sys\nfrom itertools import combinations",
        "num_ids_2": 24,
        "num_ids_4": 53
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6 8\") == \"10\"\nassert solution(\"1 2 3\") == \"4\"\nassert solution(\"-4 2 0\") == \"4\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 6 8') == '10'\nassert solution('4 6 9') == '7'\nassert solution('4 6 8 9') == '10'\nassert solution('3 6 9') == '7'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\nassert solution(\"1 2 3 4\") == \"6\"\nassert solution(\"1 2 3\") == \"4\"\nassert solution(\"3 4 1 2\") == \"10\"\n",
        "num_ids_2": 22,
        "num_ids_4": 47
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('500 70') == '533'\n\"\"\"\n\nh,v = [int(x) for x in stdin.split(' ')]\nprint(round(h*(v/90+1)))",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('500 70') == '533'\nassert solution('1 100') == '115'",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('500 70') == '533'\n\n-------------\n\nSolution:\n\nreturn int(round(math.sqrt((h ** 2 + h ** 2) / 2)) + 1)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"500 70\") == \"533\"\nassert solution(\"1000 89\") == \"1023\"\nassert solution(\"250 89\") == \"409\"\nassert solution(\"500 89\") == \"533\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('500 70') == '533'\nassert solution('90 40') == '220'\nassert solution('10000 80') == '10200'\nassert solution('1000 10') == '1020'\n\"\"\"\n\nimport sys\n\nh, v = map(int, sys.stdin.readline().split())\n\nprint(h * (1 + v / 180))\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100 70') == '533'\nassert solution('50 90') == '554'\n\n\"\"\"\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"500 70\") == \"533\"\nassert solution(\"800 50\") == \"896\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('500 70') == '533'\n\"\"\"\n\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('500 70') == '533'",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"500 70\") == \"533\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n\"\"\"\n\nimport math\nfrom math import cos, radians\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'\n\n-----Instructions-----\nPlace each of the inputs to the question on a new line.\n\nWrite code to test the validity of the inputs.\n\nFor the first test, the slope is horizontal (1 = 0). The length of the line segment is the height of the mountain. The velocity of the biker should be 0 m/s.\n\nFor the second test, the slope is vertical (1 = 90). The length of the line segment is the distance between the two points. The velocity of the biker should be 0 m/s.\n\nFor the third test, the slope is neither vertical nor horizontal. The length of the line segment is the length of the line segment. The velocity of the biker should be 1 m/s.\n\n-----Constraints-----\n1 \u2264 N \u2264 4\n1 \u2264 g \u2264 100\n1 \u2264 D_i, \\theta_i \u2264 10^4\n\n'''\n\nimport re\nimport math\n\nn = int(input())\ng = float(input())\n\ni = 1\nheight = 0\nvelocity = 0\nwhile i <= n:\n    line = input()\n    a, b = re.findall(r'\\d+', line)\n    a = int(a)\n    b = int(b)\n    theta = math.radians(b)\n    height += a\n    velocity += g * math.cos(theta)\n    i += 1\n\nprint(str(velocity / height))\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n\"\"\"\nimport math\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 9\\n69 60\\n100 60\\n') == '39.0\\n30.0'\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 9\n69 60\n100 60''') == '''39.0\n30.0'''\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 9\\n69 60\\n100 60\\n') == '39.0\\n30.0'\n\n-----Notes-----\nThe input does not include a newline.\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n\"\"\"\n\nimport re\nimport math\n\nimport numpy as np",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n1 1\n1 100\n1 1''') == '100.0 100.0 100.0'\nassert solution('''3\n1 1\n10 100\n1 1''') == '10.0 10.0 10.0'\nassert solution('''1\n1 1\n1 100''') == '100.0'\nassert solution('''3\n10 100\n100 100\n100 100''') == '100.0 100.0 100.0'\n\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\nassert solution('10\\n34 -4 -40 17 19 20 36') == '5 17'\n\"\"\"\n\nfrom math import inf",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1') == '1'\nassert solution('5 6') == '1'\nassert solution('3 7') == '0'\nassert solution('7 8') == '2'\nassert solution('15 15') == '1'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\n15 26 42\"\"\") == \"2 0\"\nassert solution(\"\"\"5\n28 27 42 27 36 45\"\"\") == \"1 2\"\nassert solution(\"\"\"3\n45 42 30\"\"\") == \"2 1\"\nassert solution(\"\"\"5\n25 29 45 20 42\"\"\") == \"3 1\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str([3, 5, 4, 2, 6, 8, 7, 9, 3, 5, 1, 4, 4, 8, 6, 6, 7, 9, 3, 5, 2, 1, 2, 3, 2, 3, 5, 7, 9, 5, 7, 4, 8, 9, 8, 2, 7, 3, 2, 2, 9, 4, 7, 2, 2, 4, 2, 1, 2, 6, 1, 2, 4, 3, 9, 4, 3, 3, 7, 4, 9, 1, 5, 2, 1, 1, 4, 1, 6, 9, 9, 5, 4, 7, 4, 8, 6, 9, 1, 4, 4, 3, 4, 4, 5, 8, 6, 4, 4, 6, 6, 7, 5, 5, 4, 9, 2, 1, 3, 2, 4, 7, 3, 3, 2, 3, 1, 9, 1, 8, 2, 3, 4, 9, 3, 2, 1, 9, 9, 5, 5, 2, 8, 1, 9, 3, 4, 8, 4, 1, 7, 3, 4, 7, 9, 6, 2, 9, 6, 2, 4, 4, 4, 7, 9, 8, 2, 2, 8, 1, 6, 6, 8, 4, 1, 4, 1, 8, 3, 4, 5, 4, 2, 5, 5, 3, 2, 2, 6, 3, 5, 3, 3, 4, 2, 3, 5, 3, 4, 5, 2, 5, 6, 7, 7, 4, 4, 4, 9, 2, 2, 5, 3, 3, 3, 7, 3, 3, 9, 4, 1, 7, 1, 4, 4, 3, 6, 1, 2, 7, 3, 9, 7, 4, 2, 2, 3, 4, 7, 3, 4, 5, 2, 2, 6, 7, 7, 5, 5, 9, 4, 8, 9, 2, 1, 3, 9, 9, 2, 8, 7, 2, 7, 3, 1, 9, 4, 9, 4, 8, 1, 1, 6, 1, 7, 6, 4, 8, 2, 9, 1, 2, 4, 5, 7, 6, 6, 5, 6, 5, 4, 6, 9, 2, 4, 3, 3, 6, 1, 4, 9, 4, 7, 9, 2, 5, 4, 4, 5, 1, 6, 2, 1, 7, 9, 4, 8, 7, 7, 3, 2, 4, 2, 5, 5, 4, 2, 4, 5, 2, 5, 5, 2, 9, 2, 5, 6, 3, 2, 2, 6, 4, 6, 9, 2, 7, 5, 6, 1, 5, 7, 4, 5, 4, 3, 6, 1, 2, 4, 7, 7, 7, 4, 7, 3, 4, 9, 2, 2, 7, 4, 1, 5, 4, 8, 1, 2, 9, 3, 7, 7, 6, 6, 5, 8, 6, 2, 6, 2, 9, 1, 5, 4, 4, 2, 5, 5, 5, 4, 4, 3, 2, 6, 9, 5, 6, 9, 3, 5, 7, 8, 2, 8, 3, 7, 1, 9, 4, 9, 3, 1, 7, 2, 6, 4, 2, 4, 8, 3, 5, 2, 7, 4, 6, 4, 3, 6, 7, 5, 6, 6, 9, 9, 2, 5, 7, 2, 4, 2, 3, 4, 6, 2, 3, 6, 9, 8, 2, 8, 6, 2, 3, 5, 7, 3, 6, 8, 2, 6, 2, 9, 7, 5, 7, 4, 5, 6, 7, 7, 2, 2, 3, 9, 4, 9, 4, 1, 7, 6, 3, 9, 6, 2, 6, 1, 2, 3, 7, 4, 7, 6, 2, 8, 7, 4, 2, 8, 4, 2, 4, 3, 8, 7, 8, 8, 6, 5, 2, 9, 2, 8, 1, 3, 5, 5, 9, 6, 2, 6, 4, 7, 5, 9, 5, 6, 4, 4, 8, 4, 7, 9, 9, 9, 9, 4, 7, 1, 3, 5, 7, 9, 7, 8, 6, 5, 5, 9, 5, 5, 3, 4, 8, 4, 7, 7, 7, 4, 3, 9, 7, 4, 3, 3, 7, 7, 2, 4, 5, 5, 5, 2, 6, 9, 3, 2, 9, 7, 2, 9, 7, 4, 5, 4, 6, 8, 7, 6, 3, 4, 9, 9, 3, 4, 8, 1, 2, 3, 9, 4, 8, 8, 7, 6, 7, 9, 7, 2, 2, 6, 8, 8, 4, 4, 6, 1, 4, 8, 3, 5, 3, 9, 7, 5, 9, 4, 8, 1, 7, 7, 2, 5, 6, 3, 2, 2, 3, 4, 3, 4, 9, 4, 2, 1, 4, 5, 2, 3, 4, 2, 8, 7, 3, 4, 2, 7, 7, 4, 8, 4, 5, 7, 5, 2, 3, 1, 3, 8, 1, 4, 5, 4, 3, 4, 2, 1, 9, 2, 4, 2, 7, 6, 1, 3, 2, 8, 3, 9, 6, 5, 4, 3, 9, 4, 5, 4, 8, 2, 4, 8, 6, 6, 2, 4, 7, 4, 4, 1, 4, 2, 5, 7, 2, 3, 2, 1, 3, 2, 5, 2, 8, 8, 6, 5, 9, 9, 9, 3, 5, 6, 2, 6, 2, 2, 3, 7, 1, 9, 7, 3, 6, 7, 3, 8, 1, 2, 9, 4, 8, 5, 3, 8, 7, 6, 2, 5, 2, 5, 6, 3, 4, 6, 7, 1, 4, 4, 4, 7, 7, 4, 8, 6, 6, 6, 8, 3, 3, 1, 4, 6, 7, 3, 4, 5, 6, 7, 5, 4, 3, 5, 6, 9, 9, 2, 5, 9, 2, 4, 7, 7, 3, 3, 1, 5, 6, 7, 9, 8, 2, 8, 7, 5, 3, 6, 3, 4, 4, 1, 9, 6, 4, 8, 7, 1, 5, 4, 2, 4, 2, 7, 7, 3, 3, 3, 4, 6, 7, 8, 5, 7, 5, 1, 2, 7, 1",
        "num_ids_2": 1673,
        "num_ids_4": 1673
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\n\"\"\"\n\nimport math",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n\nprint(solution('5\\n23 27 31 28 30'))\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\") == (\"\", 0)\n\nassert solution(\"1\") == (\"1\", 1)\n\nassert solution(\"2\") == (\"2\", 1)\n\nassert solution(\"3\") == (\"2\", 1)\n\nassert solution(\"4\") == (\"3\", 3)",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n\"\"\"\n\nfrom functools import reduce\nfrom operator import add",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6\\n1 2 3\") == 2\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6\\n1 2 3\") == \"2\"\n\"\"\"\n\n\nfrom collections import Counter\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 6\n1 2 3''') == 2\n\nassert solution('''3 6\n4 8 2''') == 0\n\nassert solution('''3 6\n2 2 2''') == 1\n\nassert solution('''3 6\n1 2 3\n3 1 3''') == 1\n\nassert solution('''3 6\n4 8 1\n1 2 3''') == 0",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 6\\n1 2 3') == 2\n\"\"\"\n\nimport os\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3\\n1 3 3') == '2'\nassert solution('1 2 3\\n2 3 6') == '1'\nassert solution('1 2 3\\n3 5 10') == '0'\nassert solution('1 2 3\\n3 3 3') == '0'\n\nassert solution('1 2 3\\n4 5 6') == '2'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 6\\n1 2 3') == 2\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\\n1 2\") == 2\n\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\\n1 2 3\") == 2\n\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5 5') == '1'\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\n1 2 3\") == 2\n\n\"\"\"\n\nfrom collections import defaultdict\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"WWWWWMMMMM\") == 9\nassert solution(\"MWMWMWMWWMWM\") == 6\nassert solution(\"M\") == 0\nassert solution(\"W\") == 1\nassert solution(\"WWMWMWMWM\") == 8\n",
        "num_ids_2": 27,
        "num_ids_4": 43
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"MWWMWMMWM\") == \"9\"\nassert solution(\"MWWMWMMMW\") == \"5\"\nassert solution(\"MWWMWMMMWMW\") == \"6\"\nassert solution(\"WMWMWMM\") == \"6\"\n\nassert solution(\"WMWMWM\") == \"4\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WMWMWMWWMW\") == 9\nassert solution(\"MWMWMWWMWM\") == 9\nassert solution(\"WWMWMWWWWWWMW\") == 10\nassert solution(\"WMWMWMWWMW\") == 9\nassert solution(\"WMWMWMWWMWWMWWWMW\") == 13\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"MWWMWMMWM\") == \"9\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2\nWM''') == '0'\nassert solution('''3\nWMWMWM''') == '2'\nassert solution('''3\nMWM''') == '1'\nassert solution('''3\nMWMWM''') == '1'\nassert solution('''1\nWW''') == '0'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('MWWMMMMMMW') == '9'\nassert solution('WMWMWMWMW') == '9'\nassert solution('WWMWMWWWM') == '5'\nassert solution('MWMWWWWWW') == '6'\nassert solution('WWWWWWWWW') == '5'\n",
        "num_ids_2": 29,
        "num_ids_4": 57
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('MWWMWMWMW') == '9'\nassert solution('MWMWMWMW') == '9'\nassert solution('WWMWMWMW') == '8'\nassert solution('WWM') == '2'\nassert solution('MW') == '1'\n",
        "num_ids_2": 27,
        "num_ids_4": 51
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"MWWMMMMMMM\") == 9\n\"\"\"\n\n\nimport collections",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('WWMMMWWWMM') == 9\n\nassert solution('WWMWMW') == 5\n\nassert solution('M') == 1\n\nassert solution('W') == 0\n\nassert solution('MWMW') == 4",
        "num_ids_2": 22,
        "num_ids_4": 38
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WWWMWMMWM\") == \"9\"\nassert solution(\"WMWMW\") == \"5\"\n\"\"\"\n\nimport math\n\nclass Solution:\n    def test_solution(self):\n        assert solution(\"WWWMWMMWM\") == \"9\"\n        assert solution(\"WMWMW\") == \"5\"\n\n\"\"\"\nDijkstra's algorithm\nhttps://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-greedy-algo-7/\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\nassert solution('10 4\\n3 -2 3 undo 2') == '6'\nassert solution('10 4\\n1 -2 3 undo 2') == '2'\nassert solution('10 4\\n-5 -2 3 undo 2') == '5'\nassert solution('10 4\\n-10 -2 3 undo 2') == '9'\n",
        "num_ids_2": 38,
        "num_ids_4": 77
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5 4\n8 -2 3 undo 2\n\"\"\") == \"3\"\n\"\"\"\n\n\"\"\"\n\n\nimport sys",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\n\nimport codewars_test as test\n\ntest.assert_equals(solution('''5 4\n8 -2 3 undo 2'''), '3')\n\ntest.assert_equals(solution('''10 7\n3 -1 5 -2 5 undo 4'''), '0')\n\ntest.assert_equals(solution('''10 7\n3 -1 5 -2 5 undo 1'''), '1')\n\ntest.assert_equals(solution('''10 7\n3 -1 5 -2 5 undo -1'''), '4')\n\ntest.",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n5 4\n8 -2 3 undo 2\n\"\"\") == '3'\n\nassert solution(\n\"\"\"\n5 5\n8 -2 3 undo 2\n\"\"\") == '0'\n\nassert solution(\n\"\"\"\n6 3\n1 -1 -1 undo 1\n\"\"\") == '5'\n\nassert solution(\n\"\"\"\n5 4\n0 -2 3 undo 2\n\"\"\") == '0'\n\nassert solution(\n\"\"\"\n5 5\n8 -2 3 undo 2\n\"\"\") == '0'",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n1 2 3 4\") == \"1\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import chain\nfrom typing import List\n\nfrom helpers import chronological_trace, int_stream\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\\\n8 -2 3 undo 2\") == \"3\"\n\"\"\"\n\nn, k = input().split()\nstack = []\nwhile k:\n    k = int(k)\n    if k > 0:\n        stack.append(k)\n    else:\n        if stack:\n            stack.pop()\n    k = input()\n\nprint(stack[0] - 1)\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n8 -2 3 undo 2\") == \"3\"\nassert solution(\"8 2\\n8 -2 3 undo 2\") == \"0\"\nassert solution(\"8 2\\n8 -2 3 undo 2 undo 2\") == \"0\"\nassert solution(\"8 2\\n8 -2 3 undo 2 undo 3\") == \"0\"\nassert solution(\"8 2\\n8 -2 3 undo 3\") == \"3\"\n",
        "num_ids_2": 38,
        "num_ids_4": 80
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == '3'\nassert solution(\"5 4\\n8 2 3 undo 2\") == '0'\n\nprint(solution(stdin))\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n3 2 1\\n1 2 3') == '6 7'\nassert solution('1 2\\n1 2\\n1 1') == '3'\nassert solution('2 2\\n1 1') == '2'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 41,
        "num_ids_4": 56
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2 3\n1 2 3\n3 2 1\n\"\"\") == \"6 7\"\n\nassert solution(\"\"\"\n2 3\n1 2 3\n3 2 1\n\"\"\") == \"6 7\"\n\nassert solution(\"\"\"\n2 3\n1 2 3\n3 2 1\n\"\"\") == \"6 7\"\n\nassert solution(\"\"\"\n2 3\n1 2 3\n3 2 1\n\"\"\") == \"6 7\"\n\nassert solution(\"\"\"\n1 1\n0\n\"\"\") == \"0\"",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'''\n2 3\n1 2 3\n3 2 1\n''') == '6 7'\n\nassert solution(\n'''\n2 3\n2 2 3\n3 2 1\n''') == '6 7'\n\nassert solution(\n'''\n2 3\n1 2 3\n3 2 1\n''') == '6 7'\n\nassert solution(\n'''\n2 3\n3 2 1\n''') == '6 7'\n\nassert solution(\n'''\n2 3\n2 2 3\n3 2 1\n''') == '6 7'",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '1'\nassert solution('2\\n1 1') == '2'\nassert solution('3\\n1 1 1') == '5'\nassert solution('4\\n1 1 1 1') == '7'\n",
        "num_ids_2": 21,
        "num_ids_4": 50
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 2 3\") == \"6 7\"\n\n---Problem---\nThe people at the city council are trying to decide what is going to be done with the city's water supply, they have a budget of $P$ dollars.\n\nThe total usage for the year is $Q$.\n\nIf the usage for the year is higher than the budget, then they will have to pay for it.\n\nOtherwise, the city will be able to use the water for a year.\n\nYour task is to find the maximum number of years that can be used for a year.\n\nInput Format\nThe first line of input contains $P$ and $Q$, respectively.\n\nThe next $P$ lines of input contain $P$ integers each, one per line.\n\nConstraints\n$1 \\leq P \\leq 10^6$, $1 \\leq Q \\leq 10^6$\n\nOutput Format\nOutput a single line containing the maximum number of years that can be used for a year.\n\nSample Input\n100 200\n1\n20\n30\n50\n60\n70\n80\n90\n100\nSample Output\n3\n'''\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n1 2 3\\n3 2 1') == '6 7'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n1 2 3\\n3 2 1') == '6 7'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"\n\"\"\"\n\nN,M = input().split(' ')\n\nP = []\nfor _ in range(int(N)):\n    P.append(list(map(int,input().split(' '))))\n\nT = []\nfor i in range(int(N)):\n    T.append(0)\n\nfor i in range(int(N)):\n    for j in range(int(M)):\n        if j==0:\n            T[i] = max(T[i],P[i][j])\n        else:\n            T[i] = max(T[i],T[i-1]+P[i][j])\n\nfor i in range(int(N)):\n    print(T[i])\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(s) == answer\nprint(solution(s))\n\n----\n\nIn case there is only a single translation of $s$, output one line with the translation followed by one line with \u201ccorrect\u201d or \u201cincorrect\u201d. In case there is more than one translation, output one line with the number of possible correct translations followed by \u201ccorrect\u201d, and one line with the number of possible incorrect translations followed by \u201cincorrect\u201d.\n\nThere is a confusion of Dutchman Dutch and English, but no one confused English with Dutch.\n\nimport re\nimport sys\n\nfor i in range(int(input())):\n    n = int(input())\n    s = input()\n    m = int(input())\n    d = {}\n    for j in range(m):\n        d[input().split(' ')[0]] = input().split(' ')[2]\n    c = 0\n    for k in range(n):\n        if re.match(d[s[k]], input()):\n            c += 1\n    print(c)\n    for l in range(c):\n        print(input())\n\n----\n\nIn case there is only a single translation of $s$, output one line with the translation followed by one line with \u201ccorrect\u201d or \u201cincorrect\u201d. In case there is more than one translation, output one line with the number of possible correct translations followed by \u201ccorrect\u201d, and one line with the number of possible incorrect translations followed by \u201cincorrect\u201d.\n\nIn case there is no confusion, or in case the confusion is of the wrong kind, or in case the confusion does not result in the correct translation, output \u201cNO\u201d.\n\nimport re\nimport sys\n\nfor i in range(int(input())):\n    n = int(input())\n    s = input()\n    m = int(input())\n    d = {}\n    for j in range(m):\n        d[input().split(' ')[0]] = input().split(' ')[2]\n    c = 0\n    for k in range(n):\n        if re.match(d[s[k]], input()):\n            c += 1\n    if c == 0:\n        print('NO')\n        continue\n    elif c == 1:\n        print(c)\n        print(input())\n        continue\n    print(c)\n    for l in range(c):\n        print(input())\n\n----\n\nIn case there is only a single translation of $s$, output one line with the translation followed by one line with \u201ccorrect\u201d or \u201cincorrect\u201d. In case there is more than one translation, output one line with the number of possible correct translations followed by \u201ccorrect\u201d, and one line with the number of possible incorrect translations followed by \u201cincorrect\u201d.\n\nIn case there is no confusion, or in case the confusion is of the wrong kind, or in case the confusion does not result in the correct translation, output \u201cNO\u201d.\n\nimport re\nimport sys\n\nfor i in range(int(input())):\n    n = int(input())\n    s = input()\n    m = int(input())\n    d = {}\n    for j in range(m):\n        d[input().split(' ')[0]] = input().split(' ')[2]\n    c = 0\n    for k in range(n):\n        if re.match(d[s[k]], input()):\n            c += 1\n    if c == 0:\n        print('NO')\n        continue\n    elif c == 1:\n        print(c)\n        print(input())\n        continue\n    print(c)\n    for l in range(c):\n        print(input())\n\n----\n\nIn case there is only a single translation of $s$, output one line with the translation followed by one line with \u201ccorrect\u201d or \u201cincorrect\u201d. In case there is more than one translation, output one line with the number of possible correct translations followed by \u201ccorrect\u201d, and one line with the number of possible incorrect translations followed by \u201cincorrect\u201d.\n\nIn case there is no confusion, or in case the confusion is of the wrong kind, or in case the confusion does not result in the correct translation, output \u201cNO\u201d.\n\nimport re\nimport sys\n\nfor i in range(int(input())):\n    n = int(input())\n    s = input()\n    m = int(input())\n    d = {}\n    for j in range(m):\n        d[input().split(' ')[0]] = input().split(' ')[2]\n    c = 0\n    for k in range(n):\n        if re.match(d[s[k]], input()):\n            c += 1\n    if c == 0:\n        print('NO')\n        continue\n    elif c == 1:\n        print(c)\n        print(input())\n        continue\n    print(c)\n    for l in range(c):\n        print(input())\n\n----\n\nIn case there is only a single translation of $s$, output one line with the translation followed by one line with \u201ccorrect\u201d or \u201cincorrect\u201d. In case there is more than one translation, output one line with the number of possible correct translations followed by \u201ccorrect\u201d, and one line with the number of possible incorrect translations followed by \u201cincorrect\u201d.\n\nIn case there is no confusion, or in case the confusion is of the wrong kind, or in case the confusion does not result in the correct translation, output \u201cNO\u201d.\n\nimport re\nimport sys\n\nfor i in range(int(input())):\n    n = int(input())\n    s = input()\n    m = int(input())\n    d = {}\n    for j in range(m):\n        d[input().split(' ')[0]] = input().split(' ')[2]\n    c = 0\n    for k in range(n):\n        if re.match(d[s[k]], input()):\n            c += 1\n    if c == 0:\n        print('NO')\n        continue\n    elif c == 1:\n        print(c)\n        print(input())\n        continue\n    print(c)\n    for l in range(c):\n        print(input())\n\n----\n\nIn case there is only a single translation of $s$, output one line with the translation followed by one line with \u201ccorrect\u201d or \u201cincorrect\u201d. In case there is",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\naaaa a\nbbbb b\ncccc c\ndddd d\neeee e\nffff f\ngggg g\nhhhh h\niiii i\njjjj j\nkkkk k\nllll l\nmmmm m\nnnnn n\n\n11\nbaboon baboon baboon baboon baboon\n3\nbaboon can can can\nbaboon kill kill kill\nbaboon red red red\nbaboon runs runs runs\nbaboon tea tea tea\nbaboon weasel weasel weasel\nbaboon zoo zoo zoo\n\n3\nbaboon can can can\nbaboon kill kill kill\nbaboon red red red\n\n1\nbaboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n\n9\nbaboon baboon baboon baboon baboon\n2\nbaboon can can can\nbaboon can can can\nbaboon can can can\nbaboon can can can\nbaboon can can can\nbaboon can can can\nbaboon can can can\n\n4\nbaboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n4\nbaboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n5\nbaboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n5\nbaboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n\n5\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n5\nbaboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n5\nbaboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n5\nbaboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n5\n\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9\nbaboon baboon baboon baboon baboon\n1\nbaboon baboon baboon baboon\n9",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(    \"7\\n\"\n        \"als mollen mollen mollen mollen mollen mollen\\n\"\n        \"4\\n\"\n        \"als when correct\\n\"\n        \"mollen moles correct\\n\"\n        \"mollen destroy correct\\n\"\n        \"mollen mills incorrect\\n\") == \"64 correct\\n665 incorrect\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''8\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect''') == '64 correct\\n665 incorrect'\n\nassert solution('''9\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect''') == '64 correct\\n0 incorrect'\n\nassert solution('''8\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect''') == '64 correct\\n0 incorrect'\n'''",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ('', '')\nassert solution('a') == ('a', 'incorrect')\nassert solution('ab') == ('ab', 'incorrect')\nassert solution('a b') == ('a b', 'incorrect')\nassert solution('a b c') == ('a b c', 'incorrect')\n",
        "num_ids_2": 25,
        "num_ids_4": 55
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n    7\n    als mollen mollen mollen mollen mollen mollen\n    4\n    als when correct\n    mollen moles correct\n    mollen destroy correct\n    mollen mills incorrect\n    \"\"\"\n) == \"64 correct\\n665 incorrect\"\n\n\"\"\"\n7\nmollen\nmollen\nmollen\nmollen\nmollen\nmollen\nmollen\nals\n\n4\nwhen correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\n\n4\nmollen\nmollen\nmollen\nmollen\n\n1\nals\n\n3\nmollen mollen mollen\nmollen mollen mollen\nmollen mollen mollen\n\n3\nmollen\nmollen\nmollen\n\n3\nmollen molen mollen\nmolen mollen mollen\nmolen mollen molen\n\n1\nmollen\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\") == \"64 correct\"\nassert solution(\"4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"665 incorrect\"\n\n-----Notes-----\nThe n-th word in the Dutch sentence is the (n-1)-th word in the dictionary.\n\"\"\"\n\nimport sys",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect') == '64 correct\\n665 incorrect'\n\nassert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect') == '64 correct\\n665 incorrect'\n",
        "num_ids_2": 108,
        "num_ids_4": 108
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect') == '64 correct\\n665 incorrect'\nassert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect') == '64 correct\\n665 incorrect'\nassert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect') == '64 correct\\n665 incorrect'\nassert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect') == '64 correct\\n665 incorrect'\nassert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect') == '64 correct\\n665 incorrect'\n",
        "num_ids_2": 108,
        "num_ids_4": 216
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 3 4 3') == 7\n\"\"\"\n\n\n\"\"\"\n    - just need to check the 2nd element of the array\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 3 4 3') == '7'\n\n-----Solution-----",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 4 3\") == 7\n\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '1'\n\n-----Constraints-----\n1 <= N <= 100000\n1 <= t_i <= 1000000\n\n-----Bite-----\nLearn about the sliding window.\n\n\"\"\"\n\n\nfrom typing import List\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\nassert solution(\"7\\n1 1 1 1 1 1 1\") == \"1\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\nassert solution(\"5\\n1 2 3 4 5\") == \"8\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('3\\n1\\n2\\n1') == '3'\nassert solution('3\\n1\\n2\\n1\\n1') == '4'\nassert solution('4\\n1\\n2\\n1\\n1\\n1') == '6'\n",
        "num_ids_2": 20,
        "num_ids_4": 61
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\n\"\"\"\nimport sys\nimport math\nfrom typing import List",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 4 3\") == 7\n\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nN = int(stdin.readline())\ndays = list(map(int, stdin.readline().split()))\n\nlast_day = 0\n\nfor day in days:\n    if day > last_day:\n        last_day = day\n\nprint(last_day + 1)\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\\n\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\") == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n\"\"\"\n\nimport math\nimport sys\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 1\\n1 1\\n1 1\\n0 0\\n4\\n') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\nassert solution('2\\n0 0\\n1 1\\n0 2\\n4\\n') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n\n\"\"\"\n",
        "num_ids_2": 100,
        "num_ids_4": 100
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 0\\n1 1\\n0 2\\n4') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n\n\"\"\"",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\nassert solution(\"4\\n0 0\\n1 1\\n0 2\\n1 1\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\\n1.5 1.5\"\nassert solution(\"4\\n0 0\\n0 1\\n1 1\\n1 1\") == \"0.0 0.0\\n1.0 1.0\\n0.0 4.0\\n1.5 1.5\"\n\"\"\"\n",
        "num_ids_2": 98,
        "num_ids_4": 153
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 0\\n1 1\\n0 2\\n4') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n\"\"\"",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0\\n1 1\\n0 2\\n4\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '3\\n0 0\\n1 1\\n0 2\\n4'\n) == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\nassert solution(\n    '3\\n0 0\\n1 1\\n0 2\\n8'\n) == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3\n0 0\n1 1\n0 2\n4\n''') == '''\n0.0 0.0\n2.0 2.0\n0.0 4.0\n'''.strip()\n\n\"\"\"\n\nnum_corners = int(stdin.readline())\n\ncorners = []\nfor _ in range(num_corners):\n    corners.append(list(map(float, stdin.readline().split())))\n\nmax_x = max(corners, key=lambda x: x[0])[0]\nmin_x = min(corners, key=lambda x: x[0])[0]\nmax_y = max(corners, key=lambda x: x[1])[1]\nmin_y = min(corners, key=lambda x: x[1])[1]\n\nside = max(max_x - min_x, max_y - min_y)\n\nres = list(map(lambda x: x[0] * 1.2, corners))\n\nfor x, y in zip(res, res[1:]):\n    if x < min_x:\n        x = min_x\n    if y < min_y:\n        y = min_y\n    print(x, y)\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 1\n\"\"\"\n\nfrom math import ceil\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\n\n\"\"\"\n\nimport math\nfrom collections import deque\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == 1\nassert solution('3') == 3\nassert solution('7') == 6\nassert solution('10') == 7\nassert solution('23') == 15\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\n\"\"\"\n\nfrom typing import Callable\nfrom math import ceil\n\nIntFunc = Callable[[int], int]\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == 1\nassert solution('100') == 2\nassert solution('5') == 1\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '5'\nassert solution('6') == '8'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(testcase_0) == testcase_0_result\nassert solution(testcase_1) == testcase_1_result\nassert solution(testcase_2) == testcase_2_result\n",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '3 1\\n12 16') == '34'\nprint(solution(\n    stdin.readlines()))\n\"\"\"\nimport sys\nimport math",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n12 16\") == \"34\"\n\"\"\"\n\na, b = [int(x) for x in stdin.split()]\nm, s = [int(x) for x in stdin.split()]",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"3 1\\n12 16\"\n) == \"34\"\n\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n12 16\") == \"34\"\nassert solution(\"5 12\\n2 20\") == \"32\"\nassert solution(\"5 12\\n3 20\") == \"50\"\nassert solution(\"5 12\\n4 20\") == \"48\"\nassert solution(\"5 12\\n5 20\") == \"52\"\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n12 16\") == \"34\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n3 1\n12 16\n''') == '34'\nprint(solution(stdin))\n\n\"\"\"\nimport numpy as np\na = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n\nm = np.ceil((m-1)/2)\nsigma = np.ceil((sigma-1)/2)",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 1\n12 16\n\"\"\") == '34'\n\nassert solution(\"\"\"\n3 1\n12 16\n\"\"\") == '34'\n\nassert solution(\"\"\"\n3 1\n12 16\n\"\"\") == '34'\n\nassert solution(\"\"\"\n3 1\n12 16\n\"\"\") == '34'\n\nassert solution(\"\"\"\n3 1\n12 16\n\"\"\") == '34'",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == output()\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\"\"\"\n\n\nimport math\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 1') == 3\n\"\"\"\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 3 1') == '3'\nassert solution('4\\n2 2 2 2') == '4'\nassert solution('4\\n3 3 3 3') == '5'\nassert solution('4\\n2 2 2 2') == '4'\n\"\"\"\n\nimport sys",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n1 2 3 1''') == 3\n\nassert solution('''4\n1 1 1 1''') == 4\n\nassert solution('''4\n2 2 2 2''') == 4\n\nassert solution('''4\n3 2 3 3''') == 4\n\nassert solution('''4\n3 3 3 3''') == 4",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\n\"\"\"\n\nimport sys\nimport os\nimport unittest",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 1\") == \"3\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3 1') == 3\n\"\"\"\n\nfrom functools import reduce\n\nn = int(input())\narr = list(map(int, input().strip().split()))\n\narr.sort()\n\nprint(reduce(lambda x, y: x + y, arr))",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 1') == '3'\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\n\n-------------\nSample Input:\n4\n3 4 2 3\nSample Output:\n1\n\n-------------------\nSample Input:\n3\n1 2 3\nSample Output:\n3\n\n------------------\nSample Input:\n3\n1 2 3\nSample Output:\n1\n\n------------------\nSample Input:\n5\n1 2 3 4 1\nSample Output:\n2\n\n------------------\nSample Input:\n4\n1 2 3 1\nSample Output:\n3\n\n------------------\nSample Input:\n5\n1 2 3 4 1\nSample Output:\n3\n\n------------------\nSample Input:\n8\n1 2 3 4 1 5 2 3\nSample Output:\n3\n\n--------------------\nSample Input:\n5\n1 2 3 4 1\nSample Output:\n2\n\n--------------------\nSample Input:\n1\n1\nSample Output:\n1\n\n--------------------\nSample Input:\n4\n1 1 1 1\nSample Output:\n0\n\n--------------------\nSample Input:\n5\n1 1 1 1\nSample Output:\n0\n--------------------\nSample Input:\n1\n1\nSample Output:\n1\n--------------------\nSample Input:\n4\n1 1 1 2\nSample Output:\n3\n--------------------\nSample Input:\n6\n1 1 1 1 1 1\nSample Output:\n2\n--------------------\nSample Input:\n6\n1 1 2 1 1 1\nSample Output:\n1\n--------------------\nSample Input:\n5\n1 1 2 3 4\nSample Output:\n3\n--------------------\nSample Input:\n5\n1 1 2 3 4\nSample Output:\n2\n\"\"\"\n\nimport itertools",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\n\"\"\"\n\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\n1 2 3 1''') == 3\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1.0') == '1088'\nassert solution('0.75') == '651'\nassert solution('3.14159') == '4631'\nassert solution('6.022') == '16466'\nassert solution('5.58') == '1633'\n",
        "num_ids_2": 25,
        "num_ids_4": 52
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.0\") == \"1088\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.0\") == \"1088\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1.0) == 1088\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3.5) == 3152\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.0\") == \"1088\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1000\"\nassert solution(\"10\") == \"1000\"\nassert solution(\"100\") == \"100\"\nassert solution(\"110\") == \"1100\"\nassert solution(\"111\") == \"1111\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0.0\") == \"0\"\nassert solution(\"1.0\") == \"1000\"\nassert solution(\"2.0\") == \"1100\"\nassert solution(\"3.0\") == \"1200\"\nassert solution(\"4.0\") == \"1300\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1088'\nassert solution('1.5') == '1224'\nassert solution('100.1') == '1260'\nassert solution('100.9') == '1260'\n",
        "num_ids_2": 19,
        "num_ids_4": 45
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1.0') == 1088\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 4\\n0 0 1 1\\n2 0 0 2\") == \"25.0 25.0 25.0 25.0\"\nassert solution(\"0 4\\n2 0 0 2\") == \"25.0 25.0 25.0 25.0\"\nassert solution(\"0 4\\n0 0 0 1\") == \"25.0 25.0 25.0 25.0\"",
        "num_ids_2": 62,
        "num_ids_4": 90
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 4\\n1 1 3 7\\n2 3 4 8\\n3 3 7 9\\n4 2 6 10\\n5 1 4 11\\n6 2 4 12\\n7 3 4 13\\n8 4 5 14\\n9 5 6 15\\n10 5 8 16\\n11 6 7 17\\n12 7 8 18\\n13 8 9 19\\n14 9 10 20\\n15 9 11 21\\n16 10 12 22\\n17 10 14 23\\n18 11 12 24\\n19 11 14 25\\n20 12 13 26\\n21 12 15 27\\n22 13 14 28\\n23 13 16 29\\n24 14 15 30\\n') == '25.000000'\nassert solution('0 4\\n1 1 3 7\\n2 3 4 8\\n3 3 7 9\\n4 2 6 10\\n5 1 4 11\\n6 2 4 12\\n7 3 4 13\\n8 4 5 14\\n9 5 6 15\\n10 5 8 16\\n11 6 7 17\\n12 7 8 18\\n13 8 9 19\\n14 9 10 20\\n15 9 11 21\\n16 10 12 22\\n17 10 14 23\\n18 11 12 24\\n19 11 14 25\\n20 12 13 26\\n21 12 15 27\\n22 13 14 28\\n23 13 16 29\\n24 14 15 30\\n') == '25.000000'\n",
        "num_ids_2": 318,
        "num_ids_4": 318
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 4\\n100 100 100 100\\n100 100 100 100\\n100 100 100 100\\n100 100 100 100') == '25.0'\nassert solution('0 4\\n50 10 10 50\\n50 10 10 50\\n50 10 10 50\\n50 10 10 50') == '25.0'\nassert solution('0 4\\n10 10 10 10\\n10 10 10 10\\n10 10 10 10\\n10 10 10 10') == '25.0'\n\n-----Notes-----\nThe number of slices is less than or equal to 100, and the total cheese weight is less than or equal to 1000.\n'''\n\nimport math",
        "num_ids_2": 74,
        "num_ids_4": 111
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''0 4\n''') == '''25.0\n25.0\n25.0\n25.0'''",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n3 1 1 1\\n4 1 1 1\\n2 1 1 1') == '0.5\\n0.5\\n0.5'\n\n------------------\n\nimport math",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 4\") == \"25.000000000\\n25.000000000\\n25.000000000\\n25.000000000\"\n\"\"\"\n\nimport math",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 4\\n0 0 100 0\\n0 0 100 100\\n0 0 100 100\\n0 0 100 100') == '25.000000'\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\n'''",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 4\\n100 0 0 100\\n0 100 0 100\\n100 0 0 100\\n100 0 0 100\\n') == '25.000000000'\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 4\") == \"25.0\\n25.0\\n25.0\\n25.0\"\n\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\nprint(solution(input()))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 4\\n3\\n4\\n5\\n6\\n7\\n') == 'DA\\nDA\\nDA\\nNE\\nNE'\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('11') == '1'\nassert solution('1112') == '1'\nassert solution('111213') == '1'\n",
        "num_ids_2": 18,
        "num_ids_4": 39
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"\n\"\"\"\nimport sys\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 3 4\n3\n4\n5\n6\n7''') == 'DA\\nDA\\nDA\\nNE\\nNE'\n\nprint('Hoho, tests are good!')\n\nSample Output:\n\nHoho, tests are good!\n\nSample Input:\n3 5 4\n3\n4\n5\n6\n7\nSample Output:\n\nNE\\nNE\\nDA\n\n'''\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 4\\n3\\n4\\n5\\n6\\n7') == 'DA\\nDA\\nDA\\nNE\\nNE'\nassert solution('5 3 4\\n4\\n5\\n6\\n7') == 'DA\\nDA\\nDA\\nDA'\n\"\"\"\n\nimport sys",
        "num_ids_2": 72,
        "num_ids_4": 72
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('5 3 4\\n3\\n4\\n5\\n6\\n7') == 'DA\\nDA\\nDA\\nNE\\nNE'\n\"\"\"\n\nn, w, h = map(int, input().split())\nl = [int(input()) for i in range(n)]\n\nfor i in l:\n    if i <= w:\n        print(\"DA\")\n    else:\n        print(\"NE\")\n",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 2\") == \"DA\"\nassert solution(\"4 1 2\") == \"DA\"\nassert solution(\"4 4 2\") == \"NE\"\nassert solution(\"5 4 3\") == \"DA\"\nassert solution(\"5 5 3\") == \"NE\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"\n\n\"\"\"\n\nN, W, H = [int(x) for x in stdin.split('\\n')[:3]]\n\nfor n in range(1, N + 1):\n    if (n <= W * H) and ((n % W) * (n // W) == n):\n        print('DA')\n    else:\n        print('NE')",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"\n\"\"\"\nimport math\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'c'\n'''\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2\\n4 5') == '5'\n\nprint(solution(stdin))\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n0\\n7 42\\n') == '6'\nassert solution('2\\n0 0\\n7 42\\n') == '6'\nassert solution('2\\n0 0\\n7 42\\n') == '6'\n\nassert solution('1\\n0\\n7 42\\n') == '6'\nassert solution('2\\n0 0\\n7 42\\n') == '6'\n",
        "num_ids_2": 39,
        "num_ids_4": 78
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 0\\n7 42\\n') == 6\nprint(solution(stdin.readlines()))\n\n-----Explanation-----\nFor the first photograph, the distance traveled is $0$ miles, so the speed was $0$ miles per hour.\n\nFor the second photograph, the distance traveled is $42$ miles, so the speed was $42$ miles per hour.\n\nThe speed $50$ is the maximum speed that could have been travelled, so the answer is $50$.\n\nSample Case 1:\n\nWe can conclude that the speed of the car that took the first photograph was $0$ miles per hour, so it must have been driving at $0$ miles per hour.\n\nSample Case 2:\n\nWe can conclude that the speed of the car that took the second photograph was $42$ miles per hour, so it must have been driving at $42$ miles per hour.\n\nFor example, consider the following sample case:\n\nWe can conclude that the speed of the car that took the first photograph was $0$ miles per hour, so it must have been driving at $0$ miles per hour.\n\nHowever, if the speed of the car that took the second photograph was $42$ miles per hour, then it must have been driving at $42$ miles per hour.\n\nBecause $42$ was greater than $0$, we know that the car must have been driving faster than $42$ miles per hour, and thus it must have been faster than $42$ miles per hour.\n\nBecause the car could have been driving at a speed greater than $50$ miles per hour, the answer is $50$.\n\n'''",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n7 42\") == \"6\"\n\"\"\"\nimport re\n\nclass Solution:\n    def solution(self, stdin):\n        p = re.compile(r'(?<!\\d)\\d+(?!\\d)')\n        n = int(stdin.readline())\n        photos = [tuple(map(int, re.findall(p, stdin.readline()))) for _ in range(n)]\n        photos.sort(key=lambda x: x[0])\n\n        prev_time, prev_dist = 0, 0\n        for time, dist in photos:\n            if time > prev_time + prev_dist:\n                return dist - prev_dist\n            prev_time, prev_dist = time, dist",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n0 0\\n0 1\\n1 0\\n1 2') == '1'\n\"\"\"\n\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('test') == 'test'",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0\") == \"0\"\nassert solution(\"7 42\") == \"6\"\nassert solution(\"6 9\") == \"9\"\n\"\"\"\n\n\"\"\"\nIn a single photo we have two variables:\n\nthe time (in hours) t\nthe distance (in miles) d\n\nWe know the time and distance of the photo, so we can find the speed in miles per hour:\n\nspeed = distance/time\n\nThe variables are given in strictly increasing order, so the speed is always positive, so we have:\n\nspeed = distance/time >= 0\n\nIf the speed is $v$, the distance $d$ must be such that:\n\n$d \\equiv vt$, so:\n\n$d = vt$\n\nBy the property of this construction we have:\n\n$t \\ge d / v$\n\nThis means we can always find a time $t$ such that it is possible to see the car at this time:\n\n$t \\le d / v$\n\nSo the time at which the car will be at the same distance as the photo:\n\n$t = d / v$\n\nTherefore we have:\n\n$d = vt$\n\nUsing this we can find the speed:\n\n$v = d/t$\n\nAnd so:\n\n$v = d / t$\n\nWhich is the speed we're looking for!\n\"\"\"\n\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n7 42\") == \"6\"\nassert solution(\"2 5\\n4 0\") == \"4\"\nassert solution(\"3 9\\n4 1\\n6 0\") == \"8\"\nassert solution(\"4 4\\n4 1\\n8 2\\n8 3\\n8 4\\n8 5\\n9 7\") == \"14\"\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import Dict, List\n\n\nclass Car:\n    def __init__(self, timestamp: int, distance: int) -> None:\n        self.timestamp = timestamp\n        self.distance = distance\n\n\nclass HashMap:\n    def __init__(self) -> None:\n        self.car_distance: Dict[int, int] = defaultdict(int)\n        self.cars: List[Car] = []\n\n    def add_car(self, car: Car) -> None:\n        self.cars.append(car)\n\n    def get_cars_by_timestamp(self, timestamp: int) -> List[Car]:\n        return [car for car in self.cars if car.timestamp == timestamp]\n\n    def get_cars_by_distance(self, distance: int) -> List[Car]:\n        return [car for car in self.cars if car.distance == distance]\n",
        "num_ids_2": 30,
        "num_ids_4": 84
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n0 0\\n1 0\\n2 1\\n3 1\\n4 3') == '6'\nassert solution('3\\n0 0\\n1 1\\n2 1') == '3'\n\n-------------",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\n') == 'correct'\nassert solution('2\\n-> ALICE\\n-> BOB\\nALICE BOB\\n') == '2'\nassert solution('3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\n') == 'correct'\nassert solution('2\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\n') == 'correct'\n\n---Problem---\nThere are $3n$ lines of input. Each line starts with a number $1 \\le n \\le 400000$, the number of lines in the \u201cproof\u201d, followed by $n$ lines of the \u201cproof\u201d.\n\n---Sample Input---\n3\n-> ALICE\n-> BOB\nALICE BOB -> CARL\n---Sample Output---\ncorrect\n---Examples---\nIn the sample input above, there are $2$ lines with $2$ lines each. The first line is the second line and the second line is the third line.\n\nThe first line is an assumption of the second line, and is thus correct.\n\nThe second line is an assumption of the third line, and is thus correct.\n\nThe third line is an assumption of the first line, and is thus correct.\n\nTherefore the third line is correct, and there are no errors.\n\nIn the sample input above, there are $2$ lines with $2$ lines each. The first line is the second line and the second line is the third line.\n\nThe first line is an assumption of the second line, and is thus correct.\n\nThe second line is an assumption of the third line, and is thus correct.\n\nThe third line is an assumption of the first line, and is thus correct.\n\nTherefore the third line is correct, and there are no errors.\n\nIn the sample input above, there are $2$ lines with $2$ lines each. The first line is the second line and the second line is the third line.\n\nThe first line is an assumption of the second line, and is thus correct.\n\nThe second line is an assumption of the third line, and is thus correct.\n\nThe third line is an assumption of the first line, and is thus correct.\n\nTherefore the third line is correct, and there are no errors.\n\nIn the sample input above, there are $2$ lines with $2$ lines each. The first line is the second line and the second line is the third line.\n\nThe first line is an assumption of the second line, and is thus correct.\n\nThe second line is an assumption of the third line, and is thus correct.\n\nThe third line is an assumption of the first line, and is thus incorrect.\n\nTherefore the third line is incorrect, and there is an error in the first line.\n\"\"\"",
        "num_ids_2": 59,
        "num_ids_4": 121
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"1\n-> 2\n2 1 -> 3\n3 2 -> 4\n4 3 -> 5\n5 4 -> 6\n6 5 -> 7\n7 6 -> 8\n8 7 -> 9\n9 8 -> 10\n10 9 -> 11\n11 10 -> 12\n12 11 -> 13\n13 12 -> 14\n14 13 -> 15\n15 14 -> 16\n16 15 -> 17\n17 16 -> 18\n18 17 -> 19\n19 18 -> 20\n20 19 -> 21\n21 20 -> 22\n22 21 -> 23\n23 22 -> 24\n24 23 -> 25\n25 24 -> 26\n26 25 -> 27\n27 26 -> 28\n28 27 -> 29\n29 28 -> 30\n30 29 -> 31\n31 30 -> 32\n32 31 -> 33\n33 32 -> 34\n34 33 -> 35\n35 34 -> 36\n36 35 -> 37\n37 36 -> 38\n38 37 -> 39\n39 38 -> 40\n40 39 -> 41\n41 40 -> 42\n42 41 -> 43\n43 42 -> 44\n44 43 -> 45\n45 44 -> 46\n46 45 -> 47\n47 46 -> 48\n48 47 -> 49\n49 48 -> 50\n50 49 -> 51\n51 50 -> 52\n52 51 -> 53\n53 52 -> 54\n54 53 -> 55\n55 54 -> 56\n56 55 -> 57\n57 56 -> 58\n58 57 -> 59\n59 58 -> 60\n60 59 -> 61\n61 60 -> 62\n62 61 -> 63\n63 62 -> 64\n64 63 -> 65\n65 64 -> 66\n66 65 -> 67\n67 66 -> 68\n68 67 -> 69\n69 68 -> 70\n70 69 -> 71\n71 70 -> 72\n72 71 -> 73\n73 72 -> 74\n74 73 -> 75\n75 74 -> 76\n76 75 -> 77\n77 76 -> 78\n78 77 -> 79\n79 78 -> 80\n80 79 -> 81\n81 80 -> 82\n82 81 -> 83\n83 82 -> 84\n84 83 -> 85\n85 84 -> 86\n86 85 -> 87\n87 86 -> 88\n88 87 -> 89\n89 88 -> 90\n90 89 -> 91\n91 90 -> 92\n92 91 -> 93\n93 92 -> 94\n94 93 -> 95\n95 94 -> 96\n96 95 -> 97\n97 96 -> 98\n98 97 -> 99\n99 98 -> 100\n100 99 -> 101\n101 100 -> 102\n102 101 -> 103\n103 102 -> 104\n104 103 -> 105\n105 104 -> 106\n106 105 -> 107\n107 106 -> 108\n108 107 -> 109\n109 108 -> 110\n110 109 -> 111\n111 110 -> 112\n112 111 -> 113\n113 112 -> 114\n114 113 -> 115\n115 114 -> 116\n116 115 -> 117\n117 116 -> 118\n118 117 -> 119\n119 118 -> 120\n120 119 -> 121\n121 120 -> 122\n122 121 -> 123\n123 122 -> 124\n124 123 -> 125\n125 124 -> 126\n126 125 -> 127\n127 126 -> 128\n128 127 -> 129\n129 128 -> 130\n130 129 -> 131\n131 130 -> 132\n132 131 -> 133\n133 132 -> 134\n134 133 -> 135\n135 134 -> 136\n136 135 -> 137\n137 136 -> 138\n138 137 -> 139\n139 138 -> 140\n140 139 -> 141\n141 140 -> 142\n142 141 -> 143\n143 142 -> 144\n144 143 -> 145\n145 144 -> 146\n146 145 -> 147\n147 146 -> 148\n148 147 -> 149\n149 148 -> 150\n150 149 -> 151\n151 150 -> 152\n152 151 -> 153\n153 152 -> 154\n154 153 -> 155\n155 154 -> 156\n156 155 -> 157\n157 156 -> 158\n158 157 -> 159\n159 158 -> 160\n160 159 -> 161\n161 160 -> 162\n162 161 -> 163\n163 162 -> 164\n164 163 -> 165\n165 164 -> 166\n166 165 -> 167\n167 166 -> 168\n168 167 -> 169\n169 168 -> 170\n170 169 -> 171\n171 170 -> 172\n172 171 -> 173\n173 172 -> 174\n174 173 -> 175\n175 174 -> 176\n176 175 -> 177\n177 176 -> 178\n178 177 -> 179\n179 178 -> 180\n180 179 -> 181\n181 180 -> 182\n182 181 -> 183\n183 182 -> 184\n184 183 -> 185\n185 184 -> 186\n186 185 -> 187\n187 186 -> 188\n188 187 -> 189\n189 188 -> 190\n190 189 -> 191\n191 190 -> 192\n192 191 -> 193\n193 192 -> 194\n194 193 -> 195\n195 194 -> 196\n196 195 -> 197\n197 196 -> 198\n198 197 -> 199\n199 198 -> 200\n200 199 -> 201\n201 200 -> 202\n202 201 -> 203\n203 202 -> 204\n204 203 -> 205\n205 204 -> 206\n206 205 -> 207\n207 206 -> 208\n208 207 -> 209\n209 208 -> 210\n210 209 -> 211\n211 210 -> 212\n212 211 -> 213\n213 212 -> 214\n214 213 -> 215\n215 214 -> 216\n216 215 -> 217\n217 216 -> 218\n218 217 -> 219\n219 218 -> 220\n220 219 -> 221\n221 220 -> 222\n222 221 -> 223\n223 222 -> 224\n224 223 -> 225\n225 224 -> 226\n226 225 -> 227\n227 226 -> 228\n228 227 -> 229\n229 228 -> 230\n230 229 -> 231\n231 230 -> 232\n232 231 -> 233\n233 232 -> 234\n234 233 -> 235\n235 234 -> 236\n236 235 -> 237\n237 236 -> 238\n238 237 -> 239\n239 238 -> 240\n240 239 -> 241\n241 240 -> 242\n242 241 -> 243\n243 242 -> 244\n244 243 -> 245\n245 244 -> 246\n246 245 -> 247\n247 246 -> 248\n248 247 -> 249\n249 248 -> 250\n250 249 -> 251\n251 250 -> 252\n252 251 -> 253\n253 252 -> 254\n254 253 -> 255\n255 254 -> 256\n256 255 -> 257\n257 256 -> 258\n258 257 -> 259\n259 258 -> 260\n260 259 -> 261\n261 260 -> 262\n262 261 -> 263\n263 262 -> 264\n264 263 -> 265\n265 264 -> 266\n266 265 -> 267\n267 266 -> 268\n268 267 -> 269\n269 268 -> 270\n270 269 -> 271\n271 270 -> 272\n272 271 -> 273\n273 272 -> 274\n274 273 -> 275\n275 274 -> 276\n276 275 -> 277\n277 276 -> 278\n278 277 -> 279\n279 278 -> 280\n280 279 -> 281\n281 280 -> 282\n282 281 -> 283\n283 282 -> 284\n284 283 -> 285\n285 284 -> 286\n286 285 -> 287\n287 286 -> 288\n288 287 -> 289\n289 288 -> 290\n290 289 -> 291\n291 290 -> 292\n292 291 -> 293\n293 292 -> 294\n294 293 -> 295\n295 294 -> 296\n296 295 -> 297\n297 296 -> 298\n298 297 -> 299\n299 298 -> 300\n300 299 -> 301\n301 300 -> 302\n302 301 -> 303\n303 302 -> 304\n304 303 -> 305\n305 304 -> 306\n306 305 -> 307\n307 306 -> 308\n308 307 -> 309\n309 308 -> 310\n310 309 -> 311\n311 310 -> 312\n312 311 -> 313\n313 312 -> 314\n314 313 -> 315\n315 314 -> 316\n316 315 -> 317\n317 316 -> 318\n318 317 -> 319\n319 318 -> 320\n320 319 -> 321\n321 320 -> 322\n322 321 -> 323\n323 322 -> 324\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\nassert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> BOB\") == \"1\"\nassert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE -> BOB\") == \"2\"\nassert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE -> ALICE\") == \"1\"\nassert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE -> BOB\\nBOB -> CARL\") == \"1\"\n",
        "num_ids_2": 58,
        "num_ids_4": 112
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\n\nSample Input:\n4\n-> INTRO -> NAME\n-> NAME -> PUSH\n-> A -> B -> C\n-> INTRO -> D\nSample Output:\n3\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ALICE BOB -> CARL\") == \"correct\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\nassert solution(\"2\\n-> BOB\\n-> CARL\\nBOB CARL\") == \"1\"\nassert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE -> BOB\") == \"2\"\nassert solution(\"3\\n-> ALICE\\nALICE -> BOB\\nALICE BOB -> CARL\") == \"1\"\nassert solution(\"3\\n-> ALICE\\nALICE -> BOB\\nALICE BOB -> CARL\\nALICE -> BOB\") == \"2\"\n",
        "num_ids_2": 55,
        "num_ids_4": 113
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\n\") == \"correct\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n1\n-> ALICE\n-> BOB\nALICE BOB -> CARL\n\n''') == 'correct'\nassert solution('''\n2\n-> ALICE\n-> BOB\nALICE BOB -> CARL\n-> ALICE\n-> BOB\nALICE BOB -> CARL\n\n''') == '1'\nassert solution('''\n1\n-> ALICE\nALICE -> BOB\n\n''') == '1'\nassert solution('''\n2\n-> ALICE\nALICE -> BOB\n-> ALICE\nALICE -> BOB\n\n''') == '2'\n'''\n\n{\n    \"alice\" : \"A\"\n    \"bob\" : \"B\"\n    \"carl\" : \"C\"\n}\n{\n    \"alice\" : \"A\"\n    \"bob\" : \"B\"\n    \"carl\" : \"C\"\n}\n\n{\n    \"alice\" : \"B\"\n    \"bob\" : \"C\"\n    \"carl\" : \"A\"\n}\n{\n    \"alice\" : \"C\"\n    \"bob\" : \"A\"\n    \"carl\" : \"B\"\n}\n\n{\n    \"alice\" : \"A\"\n    \"bob\" : \"C\"\n    \"carl\" : \"B\"\n}\n{\n    \"alice\" : \"C\"\n    \"bob\" : \"B\"\n    \"carl\" : \"A\"\n}\n\n{\n    \"alice\" : \"C\"\n    \"bob\" : \"B\"\n    \"carl\" : \"A\"\n}\n\n{\n    \"alice\" : \"B\"\n    \"bob\" : \"C\"\n    \"carl\" : \"A\"\n}\n{\n    \"alice\" : \"C\"\n    \"bob\" : \"A\"\n    \"carl\" : \"B\"\n}\n{\n    \"alice\" : \"A\"\n    \"bob\" : \"B\"\n    \"carl\" : \"C\"\n}\n{\n    \"alice\" : \"C\"\n    \"bob\" : \"A\"\n    \"carl\" : \"B\"\n}\n\n{\n    \"alice\" : \"A\"\n    \"bob\" : \"B\"\n    \"carl\" : \"C\"\n}\n{\n    \"alice\" : \"B\"\n    \"bob\" : \"C\"\n    \"carl\" : \"A\"\n}\n{\n    \"alice\" : \"C\"\n    \"bob\" : \"A\"\n    \"carl\" : \"B\"\n}\n{\n    \"alice\" : \"B\"\n    \"bob\" : \"A\"\n    \"carl\" : \"C\"\n}\n{\n    \"alice\" : \"A\"\n    \"bob\" : \"C\"\n    \"carl\" : \"B\"\n}\n{\n    \"alice\" : \"C\"\n    \"bob\" : \"B\"\n    \"carl\" : \"A\"\n}\n\n{\n    \"alice\" : \"B\"\n    \"bob\" : \"C\"\n    \"carl\" : \"A\"\n}\n{\n    \"alice\" : \"C\"\n    \"bob\" : \"A\"\n    \"carl\" : \"B\"\n}\n{\n    \"alice\" : \"A\"\n    \"bob\" : \"B\"\n    \"carl\" : \"C\"\n}\n{\n    \"alice\" : \"C\"\n    \"bob\" : \"A\"\n    \"carl\" : \"B\"\n}\n\n{\n    \"alice\" : \"C\"\n    \"bob\" : \"B\"\n    \"carl\" : \"A\"\n}\n{\n    \"alice\" : \"B\"\n    \"bob\" : \"C\"\n    \"carl\" : \"A\"\n}\n{\n    \"alice\" : \"A\"\n    \"bob\" : \"C\"\n    \"carl\" : \"B\"\n}\n{\n    \"alice\" : \"C\"\n    \"bob\" : \"B\"\n    \"carl\" : \"A\"\n}\n{\n    \"alice\" : \"B\"\n    \"bob\" : \"A\"\n    \"carl\" : \"C\"\n}\n{\n    \"alice\" : \"A\"\n    \"bob\" : \"C\"\n    \"carl\" : \"B\"\n}\n\n{\n    \"alice\" : \"C\"\n    \"bob\" : \"B\"\n    \"carl\" : \"A\"\n}\n{\n    \"alice\" : \"B\"\n    \"bob\" : \"C\"\n    \"carl\" : \"A\"\n}\n{\n    \"alice\" : \"A\"\n    \"bob\" : \"C\"\n    \"carl\" : \"B\"\n}\n{\n    \"alice\" : \"C\"\n    \"bob\" : \"A\"\n    \"carl\" : \"B\"\n}\n\n{\n    \"alice\" : \"A\"\n    \"bob\" : \"B\"\n    \"carl\" : \"C\"\n}\n{\n    \"alice\" : \"B\"\n    \"bob\" : \"C\"\n    \"carl\" : \"A\"\n}\n{\n    \"alice\" : \"C\"\n    \"bob\" : \"A\"\n    \"carl\" : \"B\"\n}\n{\n    \"alice\" : \"B\"\n    \"bob\" : \"A\"\n    \"carl\" : \"C\"\n}\n{\n    \"alice\" : \"A\"\n    \"bob\" : \"B\"\n    \"carl\" : \"C\"\n}\n\n{\n    \"alice\" : \"A\"\n    \"bob\" : \"B\"\n    \"carl\" : \"C\"\n}\n{\n    \"alice\" : \"B\"\n    \"bob\" : \"C\"\n    \"carl\" : \"A\"\n}\n{\n    \"alice\" : \"C\"\n    \"bob\" : \"A\"\n    \"carl\" : \"B\"\n}\n{\n    \"alice\" : \"B\"\n    \"bob\" : \"A\"\n    \"carl\" : \"C\"\n}\n{\n    \"alice\" : \"A\"\n    \"bob\" : \"B\"\n    \"carl\" : \"C\"\n}\n\n{\n    \"alice\" : \"B\"\n    \"bob\" : \"C\"\n    \"carl\" : \"A\"\n}\n{\n    \"alice\" : \"C\"\n    \"bob\" : \"A\"\n    \"carl\" : \"B\"\n}\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution([\"Penny Franklin\", \"Marti Graham\", \"Connie Froggatt\", \"Joseph Ivers\", \"Connie Froggatt\", \"Penny Franklin\", \"Connie Froggatt\", \"Bruce Stanger\", \"Connie Froggatt\", \"Barbara Skinner\", \"Barbara Skinner\"]) == \"Connie Froggatt\"\nassert solution([\"Penny Franklin\", \"Marti Graham\", \"Connie Froggatt\", \"Joseph Ivers\", \"Connie Froggatt\", \"Penny Franklin\", \"Connie Froggatt\", \"Bruce Stanger\", \"Connie Froggatt\", \"Barbara Skinner\", \"Barbara Skinner\"]) == \"Runoff!\"\nassert solution([\"Penny Franklin\", \"Penny Franklin\", \"Connie Froggatt\", \"Joseph Ivers\", \"Connie Froggatt\", \"Penny Franklin\", \"Connie Froggatt\", \"Bruce Stanger\", \"Connie Froggatt\", \"Barbara Skinner\", \"Barbara Skinner\"]) == \"Penny Franklin\"\n\"\"\"",
        "num_ids_2": 149,
        "num_ids_4": 223
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Connie Froggatt\"\nassert solution(stdin) == \"Runoff!\"\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Runoff!'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Connie Froggatt'\n",
        "num_ids_2": 145,
        "num_ids_4": 293
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Connie Froggatt\"\n\nYou can use input() to simulate receiving input from the user.\n'''\nimport unittest\nimport io\nimport sys\nfrom collections import Counter",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == 'Connie Froggatt' or solution(stdin) == 'Runoff!'\nprint(solution(stdin))\n\n-----\nsolution.py\n-----\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nPenny Franklin\\nPenny Franklin\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"",
        "num_ids_2": 103,
        "num_ids_4": 180
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nPenny Franklin\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\n***\") == \"Penny Franklin\"\nassert solution(\"Penny Franklin\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nPenny Franklin\\n***\") == \"Runoff!\"\n",
        "num_ids_2": 98,
        "num_ids_4": 136
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\\n\") == 'Connie Froggatt'\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\\n\") == 'Runoff!'\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\\n\") == 'Connie Froggatt'\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\\n\") == 'Connie Froggatt'\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\\n\") == 'Runoff!'\n",
        "num_ids_2": 155,
        "num_ids_4": 313
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\n\"\"\"\n",
        "num_ids_2": 148,
        "num_ids_4": 148
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\n\"\"\"",
        "num_ids_2": 151,
        "num_ids_4": 151
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n''') == '2'\n\"\"\"",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == '2'\nassert solution(test_input_2) == '1'\nassert solution(test_input_3) == '4'\n\"\"\"\n\n\nimport collections\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"",
        "num_ids_2": 88,
        "num_ids_4": 88
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_1) == solution(test_input_2)\nprint(solution(test_input_1))\nprint(solution(test_input_2))\n\n-----Notes-----\nThe number of characters in the cantina is at most 100.\n'''\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s) == solution.__annotations__['return']\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\nassert solution(\"4\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nGrakchawwaa Shyriiwook Basic\\nR2D2 Binary Basic\") == \"1\"\n\n\"\"\"\n",
        "num_ids_2": 143,
        "num_ids_4": 143
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\n",
        "num_ids_2": 88,
        "num_ids_4": 88
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n''') == '2'\nassert solution('''\n7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n''') == '2'\nassert solution('''\n7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n''') == '1'\nassert solution('''\n7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n''') == '1'\n'''\n7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n'''\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == '2'\n\"\"\"\n",
        "num_ids_2": 88,
        "num_ids_4": 88
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\nprint('The module is working correctly')\n\n-----Explanation-----\nWe have the following model:\n\nWe have $N$ participants, having a budget of $B$. For each hotel, we have $H$ weeks to choose from. We want to be able to stay for $W$ weeks at the same hotel, so each weekend we need $W$ days.\n\nThus, we need to find $W*H$ nights.\n\nBut we cannot stay for more nights than the maximum number of weeks available in a year, so we can't go more than $12*W$ nights.\n\nThus, we need to stay at the cheapest hotel that can give us $12*W$ nights, but at most $N$ nights.\n\nWhat is the cheapest hotel to stay at that can give us at most $N$ nights?\n\nThe problem is easy to approach: For each hotel, we want to find the cheapest price that gives us the maximum of $N$ nights.\n\nThen, we have to take the cheapest price that gives us the maximum of $N$ nights, from every hotel.\n\nWe want to find the minimum number of hotels that we need to consider.\n\nWe can see that the cheapest price that gives us at most $N$ nights must be from the cheapest hotel. So we can start our search from this hotel.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights.\n\nTo find the cheapest price that gives us at most $12*W$ nights from the cheapest hotel, we can start from the cheapest hotel, since we know that the cheapest hotel with at most $12*W$ nights is the cheapest.\n\nIt is the same to find the cheapest price that gives us at most $N$ nights from the cheapest hotel.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights.\n\nThe cheapest price that gives us at most $12*W$ nights from the cheapest hotel is the minimum of all the cheapest prices.\n\nWe can do the same for the cheapest price that gives us at most $N$ nights from the cheapest hotel.\n\nNow, we want to find the cheapest price that gives us at most $N$ nights from the cheapest hotel, and this is the same as finding the cheapest price that gives us at most $12*W$ nights from the cheapest hotel.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights from the cheapest hotel.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights.\n\nThe cheapest price that gives us at most $12*W$ nights from the cheapest hotel is the minimum of all the cheapest prices.\n\nWe can do the same for the cheapest price that gives us at most $N$ nights from the cheapest hotel.\n\nNow, we want to find the cheapest price that gives us at most $N$ nights from the cheapest hotel, and this is the same as finding the cheapest price that gives us at most $12*W$ nights from the cheapest hotel.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights from the cheapest hotel.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights.\n\nThe cheapest price that gives us at most $12*W$ nights from the cheapest hotel is the minimum of all the cheapest prices.\n\nWe can do the same for the cheapest price that gives us at most $N$ nights from the cheapest hotel.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights from the cheapest hotel.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights.\n\nThe cheapest price that gives us at most $12*W$ nights from the cheapest hotel is the minimum of all the cheapest prices.\n\nWe can do the same for the cheapest price that gives us at most $N$ nights from the cheapest hotel.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights from the cheapest hotel.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights.\n\nThe cheapest price that gives us at most $12*W$ nights from the cheapest hotel is the minimum of all the cheapest prices.\n\nWe can do the same for the cheapest price that gives us at most $N$ nights from the cheapest hotel.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights from the cheapest hotel.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights.\n\nThe cheapest price that gives us at most $12*W$ nights from the cheapest hotel is the minimum of all the cheapest prices.\n\nWe can do the same for the cheapest price that gives us at most $N$ nights from the cheapest hotel.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights from the cheapest hotel.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights.\n\nThe cheapest price that gives us at most $12*W$ nights from the cheapest hotel is the minimum of all the cheapest prices.\n\nWe can do the same for the cheapest price that gives us at most $N$ nights from the cheapest hotel.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights from the cheapest hotel.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights.\n\nThe cheapest price that gives us at most $12*W$ nights from the cheapest hotel is the minimum of all the cheapest prices.\n\nWe can do the same for the cheapest price that gives us at most $N$ nights from the cheapest hotel.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights from the cheapest hotel.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights.\n\nWe can do the same for the cheapest price that gives us at most $12*W$ nights.\n\nThe cheapest price that",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\n\"\"\"\n\nfrom typing import List\n\nN, B, H, W = map(int, input().split())\ncosts = [[int(i) for i in input().split()] for _ in range(H)]",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\nC C C C C C C C C C C\") == \"A# C D# F G# A\"\nassert solution(\"10\\nC D F D C D F F F C C D\") == \"A# C D# F G# A C# D# F G# A\"\nassert solution(\"6\\nG D B C D E F C C C\") == \"A# C D# F G# A C# D# F G# A\"\nassert solution(\"1\\nA\") == \"A\"\nassert solution(\"2\\nA B\") == \"A B\"\n",
        "num_ids_2": 71,
        "num_ids_4": 122
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10\\nC D F D C D F F F C ') == 'A# C D# F'\n\"\"\"\n\nn = int(input())\na = input().split(' ')\n\nnotes = {'A': 0, 'A#': 1, 'B': 2, 'C': 3, 'C#': 4, 'D': 5, 'D#': 6, 'E': 7, 'F': 8, 'F#': 9, 'G': 10, 'G#': 11}",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\nC D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"2\\nC C\") == \"none\"\nassert solution(\"12\\nC D F D C D F F F C C D D\") == \"A# C D# F\"\nassert solution(\"22\\nC C C C C C D C C C C C C C C C\") == \"A C C D E\"\n\n------Hints------\n\n------Solution------\n\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 41,
        "num_ids_4": 103
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"C D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"G B E D C D B A B A G\") == \"G B D# F A# B C# A G\"\nassert solution(\"E D C D B G A G A D\") == \"none\"\n\"\"\"",
        "num_ids_2": 55,
        "num_ids_4": 74
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"C D F D C D F F F C\") == \"A# C D# F\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\nC D F D C D F F F C ') == 'A# C D# F'\nassert solution('20\\nC D E G D C D E G F C ') == 'A C D E G D C D E G F C D A# G'\nassert solution('100\\n
        "num_ids_2": 67,
        "num_ids_4": 1430
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nC D F G\") == \"A# C D# F#\"\nassert solution(\"9\\nC D E F G A B C D\") == \"A C D E F# G# A# B C# D\"\n\nassert solution(\"5\\nC D F G A\") == \"A# C D# F# G# A#\"\nassert solution(\"4\\nC D F G B\") == \"A# C D# F# G# B\"\n\nassert solution(\"6\\nC D E F G A B\") == \"A# C D# E# F# G# A# B\"\n",
        "num_ids_2": 56,
        "num_ids_4": 109
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10', 'C D F D C D F F F C ') == 'A# C D# F'\nassert solution('5', 'A B C D E') == 'none'",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10\\nC D F D C D F F F C') == 'A# C D# F'\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\nA B C') == 'A B C D# E# F'\nassert solution('10\\nC B D E G A B D') == 'A B C D E F# G# A B D'\nassert solution('6\\nC E G B') == 'C E G B A# B C E'\n\nprint(solution(stdin.read()))\n",
        "num_ids_2": 53,
        "num_ids_4": 77
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"Anders talks in Swedish dialect of \u00f6stg\u00f6tska\") == \"dae ae ju traeligt va\"",
        "num_ids_2": 53,
        "num_ids_4": 85
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"d\u00e4r \u00e4r du rik\") == \"d\u00e4r \u00e4r du rik\"\nassert solution(\"\u00e4r du d\u00e5 rik?\") == \"\u00e4r du d\u00e5 rik?\"\n\n\"\"\"\n",
        "num_ids_2": 60,
        "num_ids_4": 109
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\nassert solution('a b c dae ae ju traeligt va') == 'dae ae ju traeligt va'\n\nprint(solution('dae ae ju traeligt va'))\nprint(solution('haer talar vi rikssvenska'))\nprint(solution('a b c dae ae ju traeligt va'))",
        "num_ids_2": 60,
        "num_ids_4": 91
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\nassert solution('dee ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('dee ji traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\n",
        "num_ids_2": 60,
        "num_ids_4": 115
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"jag d\u00f6r m\u00e5nga dagars m\u00e4stare\") == \"jag d\u00f6r m\u00e5nga dagars m\u00e4stare\"\nassert solution(\"dagens namnsdag \u00e4r den 26 maj\") == \"dagens namnsdag \u00e4r den 26 maj\"\nassert solution(\"jag \u00e4r tr\u00e4ffad av sin konst\") == \"jag \u00e4r tr\u00e4ffad av sin konst\"\n",
        "num_ids_2": 60,
        "num_ids_4": 132
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju traeligt va ju\") == \"dae ae ju traeligt va ju\"\nassert solution(\"dae ae ju traeligt va juu\") == \"haer talar vi rikssvenska\"\nassert solution(\"ju ju ju ju\") == \"haer talar vi rikssvenska\"\nassert solution(\"ju ju ju ju ju\") == \"haer talar vi rikssvenska\"\n",
        "num_ids_2": 58,
        "num_ids_4": 114
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\n\nSample Input:\ndae ae ju traeligt va caa\nSample Output:\ndae ae ju traeligt va\n\"\"\"\n",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju kval\") == \"haer talar vi rikssvenska\"\nassert solution(\"hai ae kval\") == \"haer talar vi rikssvenska\"\nassert solution(\"g\u00e5 kval\") == \"haer talar vi rikssvenska\"\nassert solution(\"g\u00e5 kval ae \u00e4k\") == \"haer talar vi rikssvenska\"\n\n\"\"\"",
        "num_ids_2": 55,
        "num_ids_4": 104
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\nassert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\n\nimport os, sys, re, math\nfrom io import StringIO\nfrom collections import Counter, defaultdict, deque\nfrom itertools import permutations, combinations, groupby\nfrom functools import lru_cache\nfrom heapq import heappush, heappop, nlargest\nfrom bisect import bisect_left, bisect_right\nfrom math import ceil, floor, factorial, gcd, modf, log, log2, log10, sqrt, \\\n    sin, cos, tan, asin, acos, atan, radians, degrees, inf, pi\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom fractions import Fraction\nfrom bisect import insort_left, insort_right",
        "num_ids_2": 60,
        "num_ids_4": 88
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\".#..#.#.#..##.###....###\") == \"E.##.#.#####.#####.##.###\"\nassert solution(\".#.##.###...#.###.##....\") == \"E.#######...#.#.###.#.##.###\"\nassert solution(\".#..##.###....#.##.###.##\") == \"E.###.#######...##.#.#.##.###\"\nassert solution(\".#.#.#.#####.####.#.###.###\") == \"E.#####.###.#####.#.#.#.###.###\"\nassert solution(\".#.#..#..#.#..#.#.#..#.#.#\") == \"E.####.#.####.#####.#.#######.#\"\n",
        "num_ids_2": 69,
        "num_ids_4": 143
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"...E.#E\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\nassert solution('10 10\\n#.........\\n.#.......#\\n.#......#.\\n#.###.....\\n#.#.....#.\\n#.....#..#\\n#....##..#\\n#...#..#..\\n#.##.#.#.#\\n#.#####.##\\n#.##.##.#.\\n#...#.#...') == '#.###.##.\\n#...##..#.\\n#.#.#...#.\\n.#..#.#..#\\n#.#.#.##.#\\n#.##..#.##\\n#...#...#.\\n#...#..#..\\n#.####.#.#\\n#.#.#.#.#.#\\n.#######.#\\n#..#.#..#.'\nassert solution('5 3\\n#.#.\\n#.#.\\n#.#.\\n#.#.\\n#.#.') == '#.#.\\n#.#.\\n#.#.\\n#.#.\\n#.#.\\n#.#.'\nassert solution('5 3\\n.#.\\n#.#.\\n#.#.\\n#.#.\\n#.#.') == '#.#.\\n#.#.\\n#.#.\\n#.#.\\n#.#.\\n#.#.'\nassert solution('5 3\\n#.#.\\n#.#.\\n#.#.\\n#.#.\\n###.') == '#.#.\\n#.#.\\n#.#.\\n#.#.\\n#.#.\\n#.#.'\n",
        "num_ids_2": 245,
        "num_ids_4": 368
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n5 6\n....#.\n....#.\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"...\") == \"...E\"\nassert solution(\"......\") == \".E...E\"\nassert solution(\"#..#..#\") == \"#..E.#E\"\nassert solution(\"#..#.#..\") == \"#..E..E\"\nassert solution(\"###....\") == \"E.E.E.E\"\n",
        "num_ids_2": 22,
        "num_ids_4": 56
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\".#.#.\\n##.##\\n#.#.#\\n##.#.\") == \"...E.#E\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n\nassert solution(\"....#.\\n##.##\\n#.#.#\\n##.#.\") == \"...E.#E\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n\nassert solution(\"#.#.\\n##.##\\n....#\\n#.#.#\\n##.#.\") == \"...E.#E\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n\nassert solution(\"#.##.\\n##.#.\") == \"...E.#E\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n\nassert solution(\"#.#.\\n.##.#\\n##.#.\") == \"...E.#E\\n.E..E\\n#..E..\\n.E...E\\n##E.E#\"",
        "num_ids_2": 107,
        "num_ids_4": 208
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('.#..#\\n.....\\n#####\\n....#\\n...##') == '#..E#\\n..E..\\n#..E#\\n.E...\\n##E.E'\nassert solution('##\\n##') == '#E\\n#E'\nassert solution('#.#\\n..#') == '#.#\\n.E#'\nassert solution('.#.#\\n#.##') == '#.E\\n#.E'\nassert solution('#.E\\n#.E') == '#.E\\n#.E'\n",
        "num_ids_2": 71,
        "num_ids_4": 116
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\n----",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n\"\"\"",
        "num_ids_2": 62,
        "num_ids_4": 62
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5 1 1 1 1') == '5 1 1 1 1'\nassert solution('1 1 1 1 1') == '1 1 1 1 1'\nassert solution('1 1 1 1 2') == '1 1 1 1 2'\n\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 62
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\nprint(\"PASSED\")\n\n---\nSample Input:\n5 5 1 5 10\nSample Output:\n5 10 5 1 5\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'12 8 2 4 10 3 25 14'\n) == '12 10 3 8 4 2'\n\"\"\"\n\nimport unittest\nimport math",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\n\"\"\"\n\nfrom typing import List, Tuple\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\nprint(\"The test passed\")",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''12 8 2 4 10 3 25 14''') == '''12 10 3 8 4 2'''\nassert solution('''20 8 10 3 15 4 1 25 14''') == '''20 15 4 10 3 8 1'''\nassert solution('''9 10 2 6 12 5 10 7''') == '''9 12 5 7 10 6 2'''\nassert solution('''15 1 9 5 11 13 6 3''') == '''15 11 6 3 1 9 13'''\nassert solution('''21 9 5 11 13 6 3''') == '''21 13 6 3 9 5 11'''\n",
        "num_ids_2": 56,
        "num_ids_4": 112
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n') == '1'\nassert solution('0 1 2\\n') == '2'\nassert solution('0 9 0\\n') == '0'\nassert solution('3 0 3\\n') == '0'\n",
        "num_ids_2": 22,
        "num_ids_4": 50
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9 0 3') == '4'\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 1') == '1'\nassert solution('1 1 1') == '1'\nassert solution('1 1 1 1') == '1'\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 0 3\") == \"4\"\n\n\"\"\"\n\ne,f,c = [int(i) for i in stdin.split(' ')]\nprint((e+f)//c)",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 0 3\") == \"4\"\nassert solution(\"0 0 3\") == \"1\"\nassert solution(\"9 0 0\") == \"0\"\nassert solution(\"9 0 1\") == \"1\"\nassert solution(\"9 0 3\") == \"4\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''9 0 3''') == '4'\n\"\"\"\n\nimport collections",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 0 3') == '4'\nassert solution('9 2 3') == '3'\nassert solution('9 2 4') == '3'\nassert solution('9 2 5') == '2'\nassert solution('9 2 6') == '2'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('9 0 3') == 4\n\"\"\"\n\ne, f, c = [int(x) for x in stdin.split()]\n\nx = e + f + c - 1\n\nprint(x // e)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9 0 3\\n') == '4'\nassert solution('9 0 0\\n') == '0'\nassert solution('9 0 2\\n') == '2'\nassert solution('9 2 1\\n') == '2'\nassert solution('9 0 0\\n') == '0'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''9\n0\n3''') == '4'\n\"\"\"\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1010') == '12'\nassert solution('1110111011101') == '71110'\nassert solution('11') == '3'\nassert solution('10') == '2'\nassert solution('101010') == '21'\n",
        "num_ids_2": 28,
        "num_ids_4": 48
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1010') == '12'\nprint(solution('1010'))\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1010\") == \"12\"\nprint(solution(\"1010\"))",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1010\") == \"12\"\n\nprint(solution(\"1010\"))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1010\") == \"12\"\nassert solution(\"11011101110011\") == \"173\"\nassert solution
        "num_ids_2": 26,
        "num_ids_4": 1772
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1010\") == \"12\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1010\") == \"12\"\nassert solution(\"1011\") == \"13\"\nassert solution(\"10111\") == \"14\"\nassert solution(\"10011\") == \"13\"\n\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1010') == '12'\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1010\") == \"12\"\nprint(solution(\"1010\"))\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1010') == '12'\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n..o\\no..') == 2\n\n-----Solution-----\n\"\"\"\n\nimport numpy as np\n\nr, s = [int(num) for num in stdin.strip().split(' ')]\n\nn = [np.array([char == 'o' for char in stdin.strip().split('\\n')[i]], dtype=np.int64) for i in range(r)]\nn = np.stack(n)\n\ncnt = 0\n\nfor i in range(r):\n    cnt += n[i, s - 1]\n\nprint(cnt)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == \"2\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n..o\\no..') == 2\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 3\n..o\no..''') == 2\nassert solution('''2 3\n..o\no..\n.o.''') == 2\nassert solution('''2 3\n.o.\n..o\n.o.''') == 2\nassert solution('''2 3\no..\n..o\no..\no..''') == 2\nassert solution('''2 3\no..\n..o\no..\no..''') == 2\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('.oo') == 1\nassert solution('oo') == 1\nassert solution('o.o') == 1\nassert solution('o...') == 0\nassert solution('oo...') == 1\n",
        "num_ids_2": 17,
        "num_ids_4": 36
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n..o\\no..') == 2\n\n-----Note-----\nInput is handled for you.\nYou are allowed to change the function signature if necessary.\nThe standard input will always contain a valid seating order.\nPlease do not remove this header. Please do not change the names of the function and the input format.\n\"\"\"\n\n\"\"\"\nA nice part of the Roman Catholic Mass is the rite of peace when people shake hands with their neighbours and say \u201cpeace be with you\u201d. Mirko has found a way to turn this ritual into his own favor. Inside the church, there are $R$ rows of benches where each row can hold a capacity of $S$ people. We can imagine the seating order as a matrix sized $R \\times S$ where each element represents either a person or an empty seating space. Let us assume that each person shakes hands with their neighbours. That means that the neighbours are located in one of the eight neighbouring elements (if such element exists):\n\nA seating order of the people inside the church has been given before Mirko enters. Mirko is, of course, late for the morning Mass and will sit in an empty space so that he shakes hands with as many people as he can. If there are no empty seats left, Mirko will simply give up on the idea and go to the evening Mass instead. We can assume that nobody enters the church after Mirko.\n\nCalculate the total number of handshakes given during the morning Mass.\n\n-----Input-----\nThe first line of input contains positive integers $R$ and $S$ ($1 \\leq R, S \\leq 50$) as stated in the text. Each of the following $R$ lines contains $S$ characters. These $R \\times S$ characters represent the seating order. The character \u201c.\u201d (dot) represents an empty place and the character \u201co\u201d (lowercase letter o) represents a person.\n\n-----Output-----\nThe first and only line of output should contain the required number of handshakes.\n\n-----Examples-----\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == \"2\"\nassert solution(\"2 3\\n.oo\\no.o\") == \"0\"\nassert solution(\"2 3\\noo\\noo\") == \"1\"\nassert solution(\"2 3\\n..o\\n.o.\") == \"2\"\nassert solution(\"2 3\\noo\\n.o.\") == \"1\"\n\"\"\"\n\n\"\"\"\nInput\n2 3\n..o\no..\n\nOutput\n2\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 37,
        "num_ids_4": 73
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == 2\nprint('Hooray!')\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == 2\nprint(solution(\"2 3\\n..o\\no..\"))\n\n-----Explanation-----\nIn the following example, Mirko sits in a free space which is not in the middle of the room. The seats are numbered starting from 1. He shakes hands with the people sitting in the order 2, 3 and 4. He then shakes hands with the people sitting in the order 5 and 6.\n\nThe total number of handshakes is 2.",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == b\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\nassert solution('5 3\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nSMECE\\nSMECE'\nassert solution('5 3\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n\n\"\"\"\n",
        "num_ids_2": 97,
        "num_ids_4": 146
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\nassert solution('3 2\\n1 2\\n1 3\\n1 2') == 'SMECE\\nSMECE'\nassert solution('7 5\\n2 3\\n1 2\\n3 5\\n4 7\\n1 3\\n2 5\\n4 6\\n5 1\\n1 6\\n3 4\\n4 2') == 'LADICA\\nLADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n\"\"\"\n\nimport sys\n\n\"\"\"\n",
        "num_ids_2": 83,
        "num_ids_4": 165
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\nassert solution('5 3\\n2 1\\n1 3\\n1 2\\n1 3\\n1 2') == 'SMECE\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n\n-----Notes-----\nHint: The solution is quite straightforward, but there is one trick to it: at the end of each step you need to check if it\u2019s possible to move some item to some other drawer.\n\"\"\"",
        "num_ids_2": 106,
        "num_ids_4": 106
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 4\\n1 3\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\nassert solution(\"4 2\\n1 2\\n1 3\\n1 4\\n1 2\\n1 3\\n1 4\\n1 2\") == \"LADICA\\nLADICA\\nSMECE\\nSMECE\"\n\n\"\"\"\n",
        "num_ids_2": 113,
        "num_ids_4": 113
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open(\"solution_lab_1_2.txt\", \"r\").read()) == open(\"solution_lab_1_2_expected.txt\", \"r\").read()\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n\n-----Test 1-----\nSample Input:\n3 3\n1 1\n1 2\n1 3\nSample Output:\nSMECE\nSMECE\nSMECE\n'''",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n\n-----Hint-----\nThis is a simple implementation of the game \"Miroko\".\n\"\"\"\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\\nSMECE\"\n\"\"\"\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 2\\n2 1\\n3 1\") == \"LADICA\"\nassert solution(\"3 3\\n1 2\\n2 1\\n3 1\\n4 1\") == \"SMECE\"\nassert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\"\n\n\"\"\"\n",
        "num_ids_2": 54,
        "num_ids_4": 87
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 2\\n') == '1 2'\nassert solution('2 0\\n') == '1 2'\nassert solution('2 1\\n') == '2 1'\nassert solution('1 1\\n') == '1 1'\nassert solution('1 2\\n') == '2 1'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1 2'\nassert solution('3') == '2 1 3'\nassert solution('3 2') == '3 2 1'\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n0') == '1 2'\nassert solution('3\\n0 1 2') == '1 2 3'\nassert solution('4\\n0 1 2 3') == '1 2 3 0'",
        "num_ids_2": 31,
        "num_ids_4": 50
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n0\") == \"1 2\"\nassert solution(\"2\\n0 1\") == \"1 2\"\nassert solution(\"3\\n0 1 1\") == \"2 1 1\"\nassert solution(\"4\\n0 1 1 2\") == \"2 1 1 2\"\n\nprint(solution(stdin))\n",
        "num_ids_2": 29,
        "num_ids_4": 65
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n0') == '1 2'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n0\\n1\") == \"1 2\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n0') == '1 2'\n\"\"\"\n\nimport math\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n0\\n\") == \"1 2\"\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n0\") == \"1 2\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n0') == '1 2'\n\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == '1'\n\n\"\"\"\n\nimport sys\n\nT = [int(i) for i in sys.stdin.readline().split()]\nN, H, L = T\nH = list(map(int, sys.stdin.readline().split()))\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\n\"\"\") == '1'\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n') == '1'\n\"\"\"\nimport sys",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == '1'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n') == '1'",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2''') == '1'\n\nassert solution('''7 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 3\n1 3\n1 4\n3 4\n0 4\n1 5\n5 6\n6 7\n0 5\n0 6\n1 6\n3 6\n3 7\n6 7\n''') == '6'\n\nassert solution('''6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 3\n1 3\n1 4\n3 4\n0 4\n1 5\n5 6\n6 7\n0 5\n0 6\n1 6\n3 6\n3 7\n6 7\n''') == '0'\n\nassert solution('''8 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 3\n1 3\n1 4\n3 4\n0 4\n1 5\n5 6\n6 7\n0 5\n0 6\n1 6\n3 6\n3 7\n6 7\n''') == '3'\n\nassert solution('''8 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 3\n1 3\n1 4\n3 4\n0 4\n1 5\n5 6\n6 7\n0 5\n0 6\n1 6\n3 6\n3 7\n6 7\n''') == '5'",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n\") == '1'\n\"\"\"\n\nfrom collections import deque\nfrom functools import lru_cache\nfrom itertools import permutations\nimport math\nimport sys",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == '1'\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 4') == '4 3 1'\nassert solution('3\\n1 3 4') == 'impossible'\nassert solution('4\\n1 2 3') == 'impossible'\nassert solution('4\\n1 2 3 4') == 'impossible'\nassert solution('3\\n1 2 3') == 'impossible'\n\"\"\"\n\nimport sys",
        "num_ids_2": 33,
        "num_ids_4": 66
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 3 4') == '4 3 1'\nassert solution('3\\n3 4 1') == 'impossible'\nassert solution('5\\n1 1 1 2 1') == 'impossible'\n",
        "num_ids_2": 33,
        "num_ids_4": 51
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\nassert solution(\"4\\n4 5 1 5\") == \"impossible\"\nassert solution(\"2\\n1 2\") == \"impossible\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"1\\n5 1 4\") == \"impossible\"\n",
        "num_ids_2": 34,
        "num_ids_4": 62
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 3 4') == '4 3 1'\nassert solution('3\\n2 4 3') == 'impossible'\nassert solution('4\\n2 4 3') == '4 3 2'\nassert solution('5\\n2 4 1 3') == '4 3 2 1'\nassert solution('5\\n2 2 3 4') == 'impossible'\n",
        "num_ids_2": 33,
        "num_ids_4": 69
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 3 4') == '4 3 1'\n\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 3 4') == '4 3 1'\nassert solution('3\\n4 1 3') == 'impossible'\nassert solution('3\\n1 4 3') == 'impossible'",
        "num_ids_2": 33,
        "num_ids_4": 49
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 3 4\") == '4 3 1'\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n1 3 4''') == '''4 3 1'''\nassert solution('''3\n3 1 4''') == '''impossible'''\nassert solution('''2\n1 3\n3 1''') == '''impossible'''\nassert solution('''4\n1 3 4\n2 4 3''') == '''impossible'''\nassert solution('''4\n3 1 4\n2 4 3''') == '''impossible'''\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n1 1\\n') == 'impossible'\nassert solution('3\\n1 3 4') == '4 3 1'\nassert solution('5\\n1 2 3 4 5\\n') == '4 3 1 2 5'\n",
        "num_ids_2": 20,
        "num_ids_4": 54
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('2 20 15') == '18.400'\nassert solution('2 20 15', '3 10') == '18.400'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 40
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 20 15\\n3 10') == '18.400'\nassert solution('2 20 15\\n3 10')!= '18.400'\nassert solution('2 20 15\\n3 10') == '18.400'\nassert solution('2 20 15\\n3 10')!= '18.400'\nassert solution('2 20 15\\n3 10') == '18.400'\n",
        "num_ids_2": 37,
        "num_ids_4": 74
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 20 15\\n3 10\") == '18.400'\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 20 15\", \"3 10\") == \"18.400\"\n\nprint(solution(\"2 20 15\", \"3 10\"))\n\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 10\n4\n6\n8''') == '7.200'\n\nassert solution('''3 10\n4\n6\n8''') == '7.200'\n\nassert solution('''2 100\n4\n6\n8''') == '18.400'\n\nassert solution('''2 100\n4\n6\n8''') == '18.400'\n\nassert solution('''5000 100\n4\n6\n8''') == '749.817'",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 20 15\\n3 10\") == 18.400\n\"\"\"\n\nn, p, k = [int(x) for x in stdin.split()]\n\ntime = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n\ntime = [sum(time[i:i+n]) for i in range(0, len(time), n)]\n\nres = 0\nfor i in range(n):\n    res += k - time[i]\n    res /= (100 + p)\n\nprint(res)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\n\"\"\"\n\nn, p, k = [int(x) for x in stdin.split(\" \")]\ntimes = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n\nt = []\nt.append(times[0])\nfor i in range(1, n):\n    t.append(t[i-1] + p * times[i])",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5\\n2 4 6 8 10\") == '12.5'\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 20 15\\n3 10') == '18.400'\nassert solution('2 20 15\\n3 10') == '18.400'\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 10\\n0 1 2 3 5 6 7 9') == '0.76666666'\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\\n\") == \"5\"\nprint(\"All tests passed.\")\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\n\"\"\"\n\nimport math",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == 5\nassert solution('5\\n...H\\n.H..\\nS..H\\nH...') == 3\n\n\"\"\"\n\n\nimport sys",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\n'''\n\nfrom itertools import permutations",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\nassert solution('2\\n.S.\\n.H.') == '1'\nassert solution('8\\n....H\\n......\\n..S...\\n.H.S..\\n.S.S.S\\n....S\\n.S....\\n....H') == '6'\n\n\"\"\"\n\nimport sys\nimport numpy as np",
        "num_ids_2": 48,
        "num_ids_4": 98
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('.HHHH') == 2\nassert solution('S.HHHH') == 4\nassert solution('S....H') == 3\nassert solution('S..H..') == 2\nassert solution('S.S..H') == 3\n",
        "num_ids_2": 19,
        "num_ids_4": 40
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\n\"\"\"\n\nfrom sys import stdin\n\ninput = stdin.readline\n\nm, n = map(int, input().split())\n\nx = [input().strip() for _ in range(m)]\n\nhouses = set()\nspies = set()\n\nfor i in range(m):\n    for j in range(n):\n        if x[i][j] == 'H':\n            houses.add((i, j))\n        elif x[i][j] == 'S':\n            spies.add((i, j))\n\nhouses_to_spies = [[abs(i[0] - j[0]) + abs(i[1] - j[1]) for j in spies] for i in houses]\n\nprint(min(houses_to_spies))\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\") == \"5\"\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom math import inf\nfrom typing import List, Tuple\n\nimport sys\n\nimport pandas as pd",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"....H\\n.....\\nS....\\n....H\\n.....\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\nassert solution('8\\nS....\\n..H..\\n..HHH\\n...H.\\n..HHH\\n...H.') == '9'\nassert solution('7\\n....H\\n....H\\n....H\\nS....\\n....H\\n....H') == '8'\nassert solution('8\\n....H\\n....H\\n....H\\n....H\\n....H\\n....H') == '8'\nassert solution('8\\nS....\\nH....\\n....H\\n....H\\n....H\\n....H') == '8'\n",
        "num_ids_2": 67,
        "num_ids_4": 135
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 3\nassert solution(5) == 4\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == \"0\"\n\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == '0'\n\"\"\"\n\nn, s, r = map(int, stdin.readline().split())\n\nstart = list(map(int, stdin.readline().split()))\nreserve = list(map(int, stdin.readline().split()))\n\nstart = set(start)\nreserve = set(reserve)",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == '0'\nassert solution('5 3 4\\n1 2 3 5\\n4 3') == '2'\nassert solution('5 2 3\\n2 4\\n5 3\\n4 5') == '0'\nassert solution('5 3 4\\n5 1 2 3\\n4 3') == '1'\nassert solution('5 3 4\\n5 1 2 3\\n4 5') == '0'\n",
        "num_ids_2": 43,
        "num_ids_4": 89
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n5 2 3\n2 4\n1 3 5\n''') == 0\n\nassert solution('''\n5 2 3\n2 4\n1 3 5\n''') == 0\n\nassert solution('''\n7 5 0\n4 7\n1 4 8\n6 7\n3 5\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == 5\n\nassert solution('''\n6 0 0\n6 0\n4 6\n6 0\n''') == 6\n\nassert solution('''\n1 0 0\n1 0\n1 1\n''') == 1",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == '0'\nprint(solution('5 2 3\\n2 4\\n1 3 5'))\n\"\"\"\n\nfrom collections import Counter\nfrom math import ceil",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == '0'\n'''\n\nimport unittest\n\nclass TestSolutions(unittest.TestCase):\n    def test_solution1(self):\n        self.assertEqual(solution('5 2 3\\n2 4\\n1 3 5'), '0')\n\n    def test_solution2(self):\n        self.assertEqual(solution('6 5 2\\n1 3 5\\n4 2'), '2')\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == 0\n\nassert solution('5 2 3\\n2 4\\n1 3 6') == 1\n\nassert solution('5 2 3\\n2 4\\n1 3 5\\n1 3 5') == 2\n\nassert solution('5 2 3\\n2 4\\n1 3 6\\n1 3 5\\n1 3 5') == 2\n\nassert solution('5 2 3\\n2 4\\n1 3 6\\n1 3 5\\n1 3 6\\n1 3 5') == 3\n",
        "num_ids_2": 38,
        "num_ids_4": 91
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3) == 1\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\\n\") == 0\n\n------\n\n>>> [len(stdin.split()) for stdin in input(\"5 2 3\\n2 4\\n1 3 5\\n\").split('\\n')]\n[5, 2, 3]",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1) == 0\nassert solution(2) == 0.5\nassert solution(100) == 0.99999999\nassert solution(100) == 0.99999999\nassert solution(50) == 0.5\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 40
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1') == '0.0'\n\"\"\"\n\nfrom math import pi",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1\\n') == '0.000000'\nassert solution('2 2\\n') == '0.500000'\nassert solution('3 2\\n') == '0.666667'\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 47
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"0.000000\"\nassert solution(\"2 2\") == \"0.500000\"\nassert solution(\"10 10\") == \"0.732141\"\nassert solution(\"15 15\") == \"1.000000\"\nassert solution(\"100 100\") == \"0.999999\"\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1\\n') == '0.000000000'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1\\n') == '0.000000000'\nassert solution('0 0\\n') == '0.000000000'\nassert solution('2 1\\n') == '0.222222222'\nassert solution('3 1\\n') == '0.33333333'\nassert solution('4 1\\n') == '0.444444444'\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"0.0\"\nassert solution(\"2 1\") == \"0.5\"\nassert solution(\"10 0\") == \"1.0\"\nassert solution(\"10 5\") == \"0.8\"\nassert solution(\"1 100\") == \"0.01\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n') == '0.000000'\nassert solution('1 2\\n') == '0.111111'\nassert solution('2 1\\n') == '0.111111'\nassert solution('2 2\\n') == '0.222222'\nassert solution('100 1\\n') == '1.000000'\n",
        "num_ids_2": 31,
        "num_ids_4": 64
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n') == '0.000000000'\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"0.0\"\nassert solution(\"2 2\") == \"0.33333333\"\nassert solution(\"2 1\") == \"0.0\"\nassert solution(\"100 2\") == \"0.1666666666\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100') == '2'\nassert solution('5\\n200 110 110 200 110 110\\n101 200 110 110 200 110 110\\n100 200 110 110 200 110 110\\n100 110 110 200 110 110 100\\n101 110 200 110 110 200 110 100\\n') == '5'\n\n\"\"\"\n\n\"\"\"\n\u9996\u5148\u62ff\u4e00\u4e2a\u7a7a\u5b57\u5178\uff0c\u5c06\u6570\u5b57\uff0c\u6570\u7ec4\u5b57\u7b26\u4e32\u5b58\u50a8\u4e0b\u6765\u3002\n\u6bcf\u6b21\u9009\u62e9\u4e00\u4e2a\u503c\uff0c\u7136\u540e\u5bf9\u8be5\u503c\u8fdb\u884c\u8ba1\u6570\uff0c\u8ba1\u6570\u52a0\u4e00\uff0c\u52a0\u5230\u5b57\u5178\u91cc\u9762\u3002\n\u5f53\u904d\u5386\u5b8c\u6240\u6709\u7684\u6570\u5b57\u503c\u4e4b\u540e\uff0c\u904d\u5386\u5b57\u5178\uff0c\u67e5\u627e\u6700\u5927\u7684\u6570\u5b57\u503c\uff0c\u5e76\u8f93\u51fa\u3002\n\"\"\"\nimport collections",
        "num_ids_2": 90,
        "num_ids_4": 90
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2 2\") == \"1\"\nassert solution(\"1\\n1 1\") == \"0\"\nassert solution(\"1\\n4 9 10 11\") == \"0\"\n\n------Hints------\n-\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 28,
        "num_ids_4": 44
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"\nassert solution(\"3\\n111 222 3 3 33\\n111 2 2 3 33\") == \"0\"\nassert solution(\"4\\n1 2 3 4 5\\n5 5 5 5 5\\n1 1 1 1 1\\n2 2 2 2 2\") == \"0\"\nassert solution(\"4\\n1 2 3 4 5\\n5 5 5 5 5\\n1 1 1 1 1\\n2 2 2 2 2\") == \"4\"\nassert solution(\"3\\n1 2 3 4\\n4 4 4 4\\n1 1 1 1\") == \"2\"\n\n\"\"\"\n\nn = int(stdin.readline())\nc = dict()\nfor i in range(n):\n    course = set(map(int, stdin.readline().split()))\n    c[tuple(course)] = len(course)\n\nans = 0\nfor v in c.values():\n    ans += v*(v-1)//2\nprint(ans)\n",
        "num_ids_2": 57,
        "num_ids_4": 133
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\") == \"2\"\nassert solution(\"4\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\") == \"4\"\nassert solution(\"1\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\") == \"4\"\nassert solution(\"2\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\") == \"6\"\nassert solution(\"2\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\\n100\\n101\\n102\\n103\") == \"12\"\n",
        "num_ids_2": 200,
        "num_ids_4": 412
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100') == 2\nprint(solution(stdin=input()))",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n101 111 101 111\\n101 101 101 101 101\\n101 101 101 101 101\\n101 101 101 101 101\\n101 101 101 101 101\\n101 101 101 101 101\\n') == 2\nassert solution('3\\n101\\n101\\n101\\n101\\n101\\n') == 1\nassert solution('5\\n100 111 101 112\\n101 101 101 102\\n102 102 102 102\\n101 101 101 101\\n101 101 101 101\\n') == 5\nassert solution('5\\n100 111 101 112\\n101 101 101 102\\n102 102 102 102\\n101 101 101 101\\n101 101 101 101\\n') == 5\nassert solution('5\\n101 112 112 112\\n101 101 101 102\\n102 102 102 102\\n101 101 101 101\\n101 101 101 101\\n') == 5\n",
        "num_ids_2": 76,
        "num_ids_4": 156
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n100 101 102 103\\n100 200 300 101 102\\n103 102 101 488 100') == '2'\n\n-----Problem-----\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3 4') == '2'\nassert solution('3\\n100 101 102 103 488') == '2'\nassert solution('1\\n200 300 100 101 102') == '1'\nassert solution('3\\n100 101 102 103 488') == '2'\nassert solution('1\\n101 102 103 488 100') == '1'\n\n\"\"\"\nimport collections\nimport itertools\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n\n\nclass Solution:\n    def __init__(self) -> None:\n        pass\n\n    def solution(self, stdin: str) -> str:\n        pass\n",
        "num_ids_2": 34,
        "num_ids_4": 69
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == 2\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"\nassert solution(\"1\\n100 101 102 103\\n100 200 300 101 102\") == \"1\"\nassert solution(\"2\\n100 101 102 103\\n100 200 300 101 102\") == \"0\"\n",
        "num_ids_2": 56,
        "num_ids_4": 79
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1730') == '1729'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1730') == '1729'\nassert solution('3') == '2'\nassert solution('10') == '9'\nassert solution('19') == '18'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1730\") == \"1729\"\n\nassert solution(\"9\") == \"9\"\n\nassert solution(\"9\") == \"9\"\n\nassert solution(\"9\") == \"9\"\n\nassert solution(\"9\") == \"9\"",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1730\") == \"1729\"\nassert solution(\"2\") == \"None\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"5\"\n",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1730') == '1729'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1730') == '1729'\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1730\") == \"1729\"\nassert solution(\"5\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1730\") == \"1729\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1730') == '1729'\n\"\"\"\n\nimport sys\n\nm = int(sys.stdin.readline().rstrip())",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1730\") == \"1729\"\nassert solution(\"4000\") == None\nassert solution(\"-3\") == None",
        "num_ids_2": 20,
        "num_ids_4": 29
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('65536') == 16\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('65536') == 16\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('65536') == '16'\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"65536\") == 16\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('65536') == 16\nprint(solution('65536'))\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('7') == '0'\nassert solution('5') == '1'\nassert solution('100') == '2'\nassert solution('1000') == '11'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('65536') == '16'\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"65536\") == \"16\"\nassert solution(\"24\") == \"2\"\nassert solution(\"50\") == \"4\"\nassert solution(\"26\") == \"4\"\nassert solution(\"851\") == \"1\"\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('65536') == 16\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('65536') == '16'\nprint(solution('65536'))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n''') == '-1'\nassert solution('''\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n....\\n....\\n....\\n...K\") == \"2\"\nassert solution(\"5\\n.K..\\n....\\n....\\n....\") == \"0\"\n\n-----Note-----\nThe knight moves in an L-shaped motion, i.e., two cells in one direction and one cell in the other direction. You can solve the same problem with a more efficient solution if you are interested in that.\n\"\"\"\n",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3\n...#\n##K\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n....\\n....\\n....\\n...K') == 2\nprint('Success')",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\", \"....\\n....\\n....\\n...K\") == \"2\"\nassert solution(\"3\", \"..#\\n..#\\nK.#\") == \"-1\"\n\n\"\"\"",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n....\\n....\\n....\\n...K\") == 2\nassert solution(\"2\\n...#\\n.##\\n#.K\") == -1\nassert solution(\"3\\n#.K\\n#.#\\n..#\") == -1\n\n------",
        "num_ids_2": 43,
        "num_ids_4": 65
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n....\\n....\\n....\\n...K') == '2'\nassert solution('4\\n....\\n....\\n....\\n....') == '-$1$'\n\n\"\"\"\n\n\n\n\"\"\"\nThe code can be optimized using a set or dictionary with key, value = (r + 2, c + 1), (r + 2, c - 1), (r - 2, c + 1), (r - 2, c - 1), (r + 1, c + 2), (r + 1, c - 2), (r - 1, c + 2), (r - 1, c - 2)\n\nThe code can be optimized by storing the set in a dictionary with key as the index of the row and the value as a set\n\nThe code can be optimized by making the process more optimized by calculating the minimum value with the nearest valid point on the grid and then simply calculating the minimum required to reach from the initial position to the valid position\n\n\n\n\"\"\"",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n\"\n    \"....\\n\"\n    \"....\\n\"\n    \"....\\n\"\n    \"...K\") == '2'\n\nassert solution(\"4\\n\"\n    \"....\\n\"\n    \"....\\n\"\n    \"....\\n\"\n    \"K...\") == '-1'\n\nassert solution(\"4\\n\"\n    \"....\\n\"\n    \"....\\n\"\n    \"....\\n\"\n    \"..K.\") == '2'\n\nassert solution(\"4\\n\"\n    \"....\\n\"\n    \"....\\n\"\n    \"....\\n\"\n    \"K....\") == '-1'\n\nprint(solution(stdin))\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n....\\n....\\n....\\n...K') == 2\nassert solution('5\\n...#\\n....\\n....\\n....\\n....') == -1\nassert solution('5\\n#..#\\n....\\n....\\n....\\n....') == -1",
        "num_ids_2": 46,
        "num_ids_4": 72
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n....\\n....\\n....\\n...K\") == \"2\"\n\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\\n\") == \"23\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\nprint(\"Test passed\")\n-----\n\nSample Input:\n100 2\n2\n3\n99\nSample Output:\ntoo late\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n3\\n2\\n99\\n1') == 'too late'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''100 5\n42\n3\n2\n99\n1''') == '23'\nassert solution('''100 5\n42\n3\n2\n99\n1''') == 'too late'\nassert solution('''100 5\n42\n3\n2\n99\n1''') == 'too late'\nassert solution('''100 5\n42\n3\n2\n99\n1''') == 'too late'\nassert solution('''100 5\n42\n3\n2\n99\n1''') == 'too late'\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'too late'\nassert solution('1\\n2\\n3') == '1'\nassert solution('3\\n1\\n2\\n3') == '3'\nassert solution('100\\n42\\n3\\n2\\n99\\n1\\n') == '23'\n\n\"\"\"\n\nimport sys\nimport math\nimport itertools",
        "num_ids_2": 27,
        "num_ids_4": 73
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\nprint(solution(stdin.strip()))",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\nprint(solution(\"100 5\\n42\\n3\\n2\\n99\\n1\"))\nassert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\nprint(solution(\"100 5\\n42\\n3\\n2\\n99\\n1\"))",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n100 5\n42\n3\n2\n99\n1\n\"\"\"\n) == \"23\"\n\"\"\"\nHow to check if your solution is correct?\n\nIn order to check your solution, you can write a function that reads the input and returns a value of some type. Then you can run the various functions of your solution on this value and check whether they return what you expected.\n\nFor example, the following function returns the line read from the input (without any trailing newlines):",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"ZYOJEGKPBXAIVIDLF\"\nassert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\n\n\"\"\"\n\n\"\"\"\n\nimport re",
        "num_ids_2": 56,
        "num_ids_4": 112
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump
        "num_ids_2": 1173,
        "num_ids_4": 1173
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"playfair example\"\n) == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\nassert solution(\n\"hide the gold in the tree stump\"\n) == 'HQVQYQKZZFJNMLBCFRLRQQN'\nassert solution(\n\"cipher is a manual symmetric encryption technique and was the first digraph substitution cipher. The scheme was invented in 1854 by Charles Wheatstone, but bears the name of Lord Playfair who promoted the use of the cipher.\"\n) == 'UQJUQXWBKUAWZOJURGELWLQHONBBBBLFQQCFJZNJPKUQJXZBKLXWUQJYBZQBUBFBBUQJWUZFJHWLXBQFWJBWHXUQFGQJHXFBCXQWQJHBRUJXQWUOJXHBLBROJBWHWXUQFQBWHFJQBWHBQJHXUQFGQJHXFBBUQJWUZJXCXWUQGQBWHWXUQFQBWHFJQBWHBQJHXUQFGQJHXFBBUQJWUZFJHWLQRQPQGQBRQFWJZMOVKMQBWHWXUQFQBWHFJQBWHBQJHXUQFGQJHXFBBUQJWUZFJHWLQRQPQGQBRQFWJZMOVKMQBWHWXUQFQBWHFJQBWHBQJHXUQFGQJHXFBBUQJWUZJXCXWUQGQBWHWXUQFQBWHFJQBWHBQJHXUQFGQJHXFBBUQJWUZJXCXWUQGQBWHWXUQFQBWHFJQBWHBQJHXUQFGQJHXFBBUQJWUZFJHWLQRQPQGQBRQFWJZMOVKMQBWHWXUQFQBWHFJQBWHBQJHXUQFGQJHXFBBUQJWUZJXCXWUQGQBWHWXUQFQBWHFJQBWHBQJHXUQFGQJHXFBBUQJWUZJXCXWUQGQBWHWXUQFQBWHFJQBWHBQJHXUQFGQJHXFBBUQJWUZFJHWLQRQPQGQBRQFWJZMOVKMQBWHWXUQFQBWHFJQBWHBQJHXUQFGQJHXFBBUQJWUZFJHWLQRQPQGQBRQFWJZMOVKMQBWHWXUQFQBWHFJQBWHBQJHXUQFGQJHXFBBUQJWUZJXCXWUQGQBWHWXUQFQBWHFJQBWHBQJHXUQFGQJHXFBBUQJWUZFJHWLQRQPQGQBRQFWJZMOVKMQBWHWXUQFQBWHFJQBWHBQJHXUQFGQJHXFBBUQJWUZFJHWLQRQPQGQBRQFWJZMOVKMQBWHWXUQFQBWHFJQBWHBQJHXUQFGQJHXFBBUQJWUZFJHWLQRQPQGQBRQFWJZMOVKMQBWHWXUQFQBWHFJQBWHBQJHXUQFGQJHXFBBUQJWUZFJHWLQRQPQGQBRQFWJZMOVKMQBWHWXUQFQBWHFJQBWHBQJHXUQFGQJHXFBBUQJWUZJXCXWUQGQBWHWXUQFQBWHFJQBWHBQJHXUQFGQJHXFBBUQJWUZFJHWLQRQPQGQBRQFWJZMOVKMQBWHWXUQFQBWHFJQBWHBQJHXUQFGQJHXFBBUQJWUZFJHWLQRQPQGQBRQFWJZMOVKMQBWHWXUQFQBWHFJQBWHBQJHXUQFGQJHXFBBUQJWUZFJHWLQRQPQGQBRQFWJZMOVKMQBWHWXUQFQBWHFJQBWHB",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('playfair example') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\n\"\"\"\n\nimport string",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('playfair example') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\n\nassert solution('hide the gold in the tree stump') == 'HMZJPNPSIYQRUFWGLMPKXYSI'\n\n\"\"\"\n",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"playfair example\") == \"BMNXDPBYSFVIBMKYZHUWMDJUUIE\"\nassert solution(\"hide the gold in the tree stump\") == \"GQABTVRKRIEJVDMKXKDUHOIFUY\"\n\"\"\"\n\nclass PlayFair:\n    def __init__(self, key):\n        self.key = key\n        self.table = []\n        self.make_table()\n        self.mappings = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11,'m': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17,'s': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25,'': 26}\n\n    def make_table(self):\n        for i in range(26):\n            if i == 25:\n                self.table.append([\"x\", \"x\"])\n            else:\n                self.table.append([chr(ord('a') + i), \" \"])\n                self.table.append([\" \", chr(ord('a') + i)])\n\n        for i in range(len(self.key)):\n            if self.key[i] == \" \":\n                continue\n            if self.key[i] == self.key[i+1]:\n                self.table[self.mappings[self.key[i]]][1] = self.table[self.mappings[self.key[i]]][1][:-1] + \"x\"\n            else:\n                if self.key[i] == self.key[i-1]:\n                    continue\n                self.table[self.mappings[self.key[i]]][1] = self.table[self.mappings[self.key[i]]][1][:-1] + self.key[i]\n\n    def encrypt(self, plain):\n        self.plain = plain\n        self.encrypt_text = \"\"\n        for i in range(0, len(plain), 2):\n            if plain[i] == plain[i+1]:\n                self.encrypt_text += self.table[self.mappings[self.plain[i]]][1][-1]\n                self.encrypt_text += self.table[self.mappings[self.plain[i+1]]][1][-1]\n            elif self.table[self.mappings[plain[i]]][1][1:] == self.table[self.mappings[plain[i+1]]][1][1:]:\n                self.encrypt_text += self.table[self.mappings[plain[i]]][1][0]\n                self.encrypt_text += self.table[self.mappings[plain[i+1]]][1][0]\n            else:\n                self.encrypt_text += self.table[self.mappings[plain[i]]][1][1]\n                self.encrypt_text += self.table[self.mappings[plain[i+1]]][1][1]\n        return self.encrypt_text\n\n    def decrypt(self, cipher):\n        self.cipher = cipher\n        self.decrypt_text = \"\"\n        for i in range(0, len(cipher), 2):\n            if self.table[self.mappings[cipher[i]]][1][1:] == self.table[self.mappings[cipher[i+1]]][1][1:]:\n                self.decrypt_text += self.table[self.mappings[cipher[i]]][1][0]\n                self.decrypt_text += self.table[self.mappings[cipher[i+1]]][1][0]\n            elif self.table[self.mappings[cipher[i]]][1][1:] == self.table[self.mappings[cipher[i+1]]][1][1:]:\n                self.decrypt_text += self.table[self.mappings[cipher[i]]][1][-1]\n                self.decrypt_text += self.table[self.mappings[cipher[i+1]]][1][-1]\n            else:\n                self.decrypt_text += self.table[self.mappings[cipher[i]]][1][0]\n                self.decrypt_text += self.table[self.mappings[cipher[i+1]]][1][0]\n        return self.decrypt_text\n\nkey = \"playfair example\"\nplain = \"hide the gold in the tree stump\"\ncipher = \"BMBNXDPBYSFVIBMKYZHUWMDJUUIE\"\nobj = PlayFair(key)\nprint(obj.encrypt(",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"KHBDJMXMSMKRURGMDMVHLGUYKFZH\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 63,
        "num_ids_4": 63
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('playfair example', 'hide the gold in the tree stump') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\n\"\"\"\n\nimport re",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"playfair example\") == \"BXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"ZDYXWKVDPZWNKZAWWQSZKNCF\"\n\"\"\"\n",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\n\"\"\"\nfrom typing import List\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"1.000 1.000 2.000 2.000\\n\"\n    \"1.500 1.500\"\n    ) == \"The gopher cannot escape.\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1.000 1.000 2.000 2.000\\n1.500 1.500\\n') == 'The gopher cannot escape.'\nassert solution('1.000 1.000 2.000 2.000\\n0.000 0.500\\n') == 'The gopher can escape through the hole at (-1.000, 0.500).'\n\n\"\"\"\n",
        "num_ids_2": 83,
        "num_ids_4": 83
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1.000 1.000 2.000 2.000\\n1.500 1.500') == 'The gopher can escape through the hole at (1.500,1.500).'\n\"\"\"\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\nassert solution(\"1.0 1.0 2.0 2.0\\n0.0 1.0\") == \"The gopher cannot escape.\"\nassert solution(\"1.0 1.0 2.0 2.0\\n-1.0 1.0\") == \"The gopher cannot escape.\"\nassert solution(\"1.0 1.0 2.0 2.0\\n1.0 0.0\") == \"The gopher cannot escape.\"\n\n---------------------",
        "num_ids_2": 66,
        "num_ids_4": 133
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''1.000 1.000 2.000 2.000\n1.500 1.500''') == 'The gopher cannot escape.'\n\nassert solution('''0.0 -1.0 -2.0 -1.0\n-1.0 1.0''') == 'The gopher cannot escape.'\n\nassert solution('''0.0 -1.0 -2.0 -1.0\n0.0 -1.0''') == 'The gopher cannot escape.'\n\nassert solution('''0.0 -1.0 -2.0 -1.0\n1.0 1.0''') == 'The gopher can escape through the hole at (0.0, 0.0).'\n\nassert solution('''0.0 -1.0 -2.0 -1.0\n1.0 -1.0''') == 'The gopher can escape through the hole at (0.0, 0.0).'",
        "num_ids_2": 39,
        "num_ids_4": 81
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\") == \"The gopher cannot escape.\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'The gopher cannot escape.'\n'''\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1.0 1.0 2.0 2.0\\n1.5 1.5\\n\") == \"The gopher cannot escape.\\n\"\nassert solution(\"1.0 1.0 2.0 2.0\\n1.5 1.5\\n1.0 1.0\\n1.5 1.5\") == \"The gopher can escape through the hole at (1.0, 1.0).\\n\"\n\"\"\"\n\n\nimport math\n",
        "num_ids_2": 102,
        "num_ids_4": 102
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\nassert solution(\"0.939 0.939 1.949 1.949\") == \"The gopher can escape through the hole at (-1, 0).\"\n\"\"\"\n\nimport sys\n\nimport pytest\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\nassert solution(\"3 4\\n3 3\\n0\") == \"N\"\nassert solution(\"3 4\\n5 5\\n1\") == \"Y\"\nassert solution(\"3 4\\n2 2\\n1\") == \"Y\"\nassert solution(\"3 4\\n4 4\\n0\") == \"N\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == 'Y'\nassert solution(\"3 4\\n3 3\\n3\") == 'Y'\n\n\"\"\"\n\nimport sys\n\nimport numpy as np\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\nassert solution(\"1 -1\\n0 0\\n1\") == \"Y\"\nassert solution(\"1 2\\n1 0\\n0\") == \"N\"\nassert solution(\"1 0\\n1 0\\n1\") == \"N\"\nassert solution(\"-1000 -1000\\n-1000 0\\n1\") == \"Y\"\n",
        "num_ids_2": 37,
        "num_ids_4": 73
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 4\n3 3\n3''') == 'Y'\nassert solution('''3 4\n3 4\n6''') == 'N'\nassert solution('''3 4\n3 4\n5''') == 'N'\n\n:param stdin:\n:return:\n'''",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n1 1\\n3\") == \"Y\"\nassert solution(\"1 2\\n2 2\\n3\") == \"N\"\nassert solution(\"1 2\\n2 2\\n2\") == \"N\"\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n3\n4\n3\n3\n) == 'Y'\nassert solution(\n3\n3\n3\n3\n) == 'Y'\nassert solution(\n3\n3\n3\n0\n) == 'N'\nassert solution(\n3\n3\n4\n4\n) == 'Y'\nassert solution(\n3\n4\n3\n4\n) == 'N'\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('3 4\\n3 2\\n5') == 'N'\nassert solution('3 4\\n3 5\\n5') == 'N'\nassert solution('3 4\\n3 5\\n4') == 'Y'\nassert solution('3 4\\n3 5\\n3') == 'Y'\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('3 4\\n4 4\\n3') == 'N'\nassert solution('3 4\\n3 3\\n5') == 'N'\nassert solution('3 4\\n4 4\\n2') == 'N'\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('3 4\\n4 4\\n3') == 'N'\nassert solution('3 4\\n4 3\\n3') == 'N'\nassert solution('-3 4\\n3 3\\n3') == 'Y'\nassert solution('3 -3\\n3 3\\n3') == 'Y'\n",
        "num_ids_2": 36,
        "num_ids_4": 73
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('.V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V....#V",
        "num_ids_2": 1659,
        "num_ids_4": 1659
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"..VVV..\\n.VV#VV.\\n.V###V.\"\n\"\"\"\nimport sys\n",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\".V....#.##..\") == \"...V...#.##..\"\nassert solution(\".V....#.##..\") == \"...V...#.##..\"\nassert solution(\".V....#.##..\") == \"...V...#.##..\"\nassert solution(\".V....#.##..\") == \"...V...#.##..\"\nassert solution(\".V....#.##..\") == \"...V...#.##..\"\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"...\") == \"...\"\n\"\"\"\n\nfrom typing import List, Any, Tuple, Dict\n\nfrom numpy import array\n\nN, M = list(map(int, stdin.readline().split()))\n\ngrid: List[List[Any]] = [list(stdin.readline().strip()) for _ in range(N)]\n\ndirections: Dict[str, Tuple[int, int]] = {\n    \"left\": (-1, 0),\n    \"right\": (1, 0),\n    \"up\": (0, -1),\n    \"down\": (0, 1),\n}\n\nfor i in range(N):\n    for j in range(M):\n        if grid[i][j] == \"V\":\n            for direction in directions:\n                x, y = i + directions[direction][0], j + directions[direction][1]\n                if 0 <= x < N and 0 <= y < M:\n                    if grid[x][y] == \".\":\n                        grid[x][y] = \"V\"\n                    elif grid[x][y] == \"#\":\n                        grid[x][y] = \"V\"\n\nfor row in grid:\n    print(\"\".join(row))\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7\\n.V...\\n.......\\n.......\\n...#...\\n..###..\") == \"..VVV..\\n.VV#VV.\\n.V###V.\"\n\"\"\"\n",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('..') == '..'\nassert solution('...') == '...'\nassert solution('#') == '#'\nassert solution('..#') == '..#'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 7\\n.....\\n.......\\n...#...\\n..###..') == '.....\\n.....\\n..VVV\\n.VV#V\\n.V###'\n\"\"\"\n\n\"\"\"\n-------\nSolution\n-------\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\".V.#\") == \".V#\"\nassert solution(\"...#\") == \"...#\"\nassert solution(\"..V..V\") == \"..V..V\"\nassert solution(\".V.V.#\") == \".VVV.#\"\n\nprint('\\n'.join(solution(stdin) for stdin in sys.stdin.readlines()))\n\n\"\"\"\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 57
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n.V\\n..\\n.V\") == \"...V...\\n...V...\\n.VVV..\\n.V#VV.\\n.V###V.\"\nassert solution(\"5 5\\n.VVVVVVV\\nVVVVVVV\\nVVVVVVV\\nVVVVVVV\\nVVVVVVV\") == \"...VVVVVVV\\nVVVVVVVV\\nVVVVVVVV\\nVVVVVVVV\\nVVVVVVVV\"\nassert solution(\"5 5\\n#V#V#V#\\nVVVVVVV\\nVVVVVVV\\nVVVVVVV\\nVVVVVVV\") == \"...VVVVVVV\\nVVVVVVVV\\nVVVVVVVV\\nVVVVVVVV\\nV#V#V#V\"\n\"\"\"\n",
        "num_ids_2": 152,
        "num_ids_4": 253
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\nassert solution(\"5 7\\n...VV\\n.......\\n.......\\n...#...\\n..###..\") == \"...VV\\n...VV\\n..VVV..\\n.VV#VV.\\n.V###V.\"\nassert solution(\"5 7\\n...#V\\n...VV\\n....V\\n...VV\\n.VVVV\") == \"...#V\\n...VV\\n.VVVV\\n.VVVV\\n.VVVV.\"\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def spread(self, grid, N, M):\n        # init vars\n        self.stone = \"#\"\n        self.air = \".\"\n        self.water = \"V\"\n\n        # vars for lookup\n        self.dict = defaultdict(list)\n        self.dict[self.air] = [(i, j) for i in range(N) for j in range(M)]\n\n        # loop for each second\n        for second in range(1, 21):\n            # vars for new grid\n            new_grid = []\n            for i in range(N):\n                new_grid.append([])\n                for j in range(M):\n                    if grid[i][j] == self.water:\n                        if (i, j) == (0, 0) or (i, j) == (0, M-1) or (i, j) == (N-1, 0) or (i, j) == (N-1, M-1):\n                            new_grid[i].append(self.water)\n                        else:\n                            water_neighbors = self.get_water_neighbors(grid, i, j, N, M)\n                            if water_neighbors and water_neighbors[0] == self.air:\n                                new_grid[i].append(self.water)\n                            elif water_neighbors and water_neighbors[0] == self.stone:\n                                water_neighbors.pop(0)\n                                for neighbor in water_neighbors:\n                                    new_grid[neighbor[0]][neighbor[1]] = self.air\n                                new_grid[i].append(self.water)\n                            else:\n                                new_grid[i].append(self.water)\n                    elif grid[i][j] == self.air:\n                        water_neighbors = self.get_water_neighbors(grid, i, j, N, M)\n                        if water_neighbors:\n                            if water_neighbors[0] == self.water:\n                                new_grid[i].append(self.air)\n                            elif water_neighbors[0] == self.stone:\n                                water_neighbors.pop(0)\n                                for neighbor in water_neighbors:\n                                    new_grid[neighbor[0]][neighbor[1]] = self.air\n                                new_grid[i].append(self.air)\n                            else:\n                                new_grid[i].append(self.air)\n                        else:\n                            new_grid[i].append(self.air)\n                    else:\n                        new_grid[i].append(grid[i][j])\n            grid = new_grid\n        return new_grid\n\n    def get_water_neighbors(self, grid, i, j, N, M):\n        neighbors = []\n        for neighbor in self.dict[grid[i][j]]:\n            if 0 <= neighbor[0] < N and 0 <= neighbor[1] < M:\n                neighbors.append(neighbor)\n        return neighbors\n\n    def print_grid(self, grid):\n        for i in range(len(grid)):\n            print(\"\".join(grid[i]))\n\n    def solution(self, stdin: str) -> str:\n        # init vars\n        grid = stdin.split(\"\\n\")\n        N, M = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n        grid = [list(i) for i in grid]\n\n        # solve problem\n        new_grid = self.spread(grid, N, M)\n\n        # print solution\n        self.print_grid(new_grid)",
        "num_ids_2": 120,
        "num_ids_4": 184
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('13') == '11'\nassert solution('10') == '1'\nassert solution('1111') == '1111'\nassert solution('110') == '101'\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13') == '11'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"13\") == \"11\"\nassert solution(\"100\") == \"100\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13\") == \"11\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('101101') == '101100'\n\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13\") == \"11\"\nassert solution(\"9\") == \"1001\"\nassert solution(\"1234\") == \"4321\"\nassert solution(\"1000\") == \"1\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('13') == '11'\n\"\"\"\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"13\") == \"11\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13') == '11'\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('1111') == '1111'\nassert solution('100') == '1111'",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13') == '11'\nassert solution('9') == '1001'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\\npink\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\n\n\"\"\"",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nrOsee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12\\npink\\nteaqulSunrose\\nmexicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\n\n-----Constraints-----\n1 <= N <= 1000\n\n'''\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12\\n\" + \"pink\\n\" + \"tequilaSunrose\\n\" + \"mExicanPInK\\n\" + \"Coquelicot\\n\" + \"turqrose\\n\" + \"roSee\\n\" + \"JETblack\\n\" + \"pink\\n\" + \"babypink\\n\" + \"pInKpinkPinK\\n\" + \"PInkrose\\n\" + \"lazerlemon\") == \"9\"\n",
        "num_ids_2": 114,
        "num_ids_4": 114
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12\\npink\\ntequilaSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\n",
        "num_ids_2": 73,
        "num_ids_4": 73
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\\npink\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\nassert solution(\"12\\nJETblack\\npink\\nbabypink\\nlazerlemon\") == \"I must watch Star Wars with my daughter\"\nassert solution(\"12\\npInKpinkPinK\\nJETblack\") == \"4\"\nassert solution(\"12\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\nassert solution(\"12\\npInKpinkPinK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\n",
        "num_ids_2": 95,
        "num_ids_4": 172
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12\\npink\\ntequilaSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon') == '9'\nassert solution('1\\npink') == 'I must watch Star Wars with my daughter'\n\"\"\"\n",
        "num_ids_2": 93,
        "num_ids_4": 93
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon') == '9'\nprint(solution('12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon'))\nassert solution('8\\npink\\nteaquilSunrise\\nmExicanPInk\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon') == '5'\nprint(solution('8\\npink\\nteaquilSunrise\\nmExicanPInk\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon'))\nassert solution('8\\npink\\nteaquilSunrise\\nmExicanPInk\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon') == '5'\nprint(solution('8\\npink\\nteaquilSunrise\\nmExicanPInk\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon'))\nassert solution('8\\npink\\nteaquilSunrise\\nmExicanPInk\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon') == '5'\nassert solution('8\\npink\\nteaquilSunrise\\nmExicanPInk\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon') == '5'\n",
        "num_ids_2": 148,
        "num_ids_4": 296
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\nPInkpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\n\n\"\"\"",
        "num_ids_2": 75,
        "num_ids_4": 75
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\nprint(\"OK\")\n\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 5 3\\nABC') == '1 3 5'\nassert solution('1 3 5\\nABC') == '1 3 5'\nassert solution('1 3 5\\nAB') == '1 3 5'\nassert solution('1 5 3\\nAC') == '1 5 3'\nassert solution('1 5 3\\nCA') == '1 5 3'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 5 3\\nABC') == '1 3 5'\nassert solution('3 2 1\\nCAB') == '3 2 1'\nassert solution('1 5 3\\nCBA') == '1 3 5'\nassert solution('1 2 3\\nABC') == '1 2 3'\nassert solution('1 2 3\\nBAC') == '1 2 3'\n",
        "num_ids_2": 35,
        "num_ids_4": 70
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\n\n---Problem---\nYou are given three integers (A, B, C), which you want to put on a shelf at the same time. They are sorted from smallest to biggest.\n\nYou want to put a pair of bookcase (with A-B books) into the first shelf, and a pair of bookcase (with C-A books) into the second shelf. You can only take a single book from a shelf, and you can\u2019t take a pair of books from a single shelf.\n\nWhat is the minimum number of books you must take from each shelf?\n\nInput\n3 2 1\nOutput\n2",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nassert solution(\"3 1 5\") == \"1 3 5\"\nassert solution(\"3 5 1\") == \"1 3 5\"\nassert solution(\"3 5 5\") == \"3 5 1\"\nassert solution(\"5 5 3\") == \"5 3 1\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"1 5 3\\nABC\"\n) == \"1 3 5\"\nassert solution(\n\"3 1 5\\nABC\"\n) == \"3 1 5\"\nassert solution(\n\"5 3 1\\nABC\"\n) == \"5 3 1\"\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 5 3\\nABC') == '1 3 5'\n\"\"\"\n\nA, B, C = [int(i) for i in input().split()]\n\nletters = input()",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(input())\n\"\"\"\n\n\"\"\"\nLet's consider the order: A < B < C.\n\nWe can write A, B and C in a permutation way, if C in the middle of the sequence,\notherwise we can write C, B and A, because the order A < B < C is satisfied.\nWe can write all numbers from 1 to 3 in this way.\n\nIf there is no middle number, then we can write A, B and C in a permutation way.\nWe can write any number from 1 to 3 in this way.\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nassert solution(\"3 5 1\") == \"3 5 1\"\n\nprint(solution(stdin))\n\"\"\"\nimport sys\n\nnums = sys.stdin.readlines()\nnums = [int(num) for num in nums[0].split(\" \")]\norder = sys.stdin.readlines()[1].split(\" \")\n\nnums.sort(key=lambda num: order.index(num))\nprint(\" \".join(nums))\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 5 3\\nABC') == '1 3 5'\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 4\") == \"1 2 4\"\n\nassert solution(\"1 4 2\") == \"1 2 4\"\n\nassert solution(\"4 1 2\") == \"1 2 4\"\n\nassert solution(\"2 1 3\") == \"1 2 3\"\n\nassert solution(\"4 5 3\") == \"1 2 3 4\"",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"buy 1 15\\\\nsplit 3\\\\nsell 1 5\\\\ndie 4\") == \"8.0\"\nassert solution(\"buy 1 15\\\\nsplit 3\\\\nsell 1 5\\\\nmerge 2\") == \"8.0\"\nassert solution(\"buy 1 15\\\\nsplit 3\\\\nsell 1 5\\\\ndie 4\") == \"7.8\"\nassert solution(\"buy 1 15\\\\nsplit 3\\\\nsell 1 5\\\\nsell 1 5\\\\ndie 4\") == \"6.75\"\nassert solution(\"buy 1 15\\\\nsplit 3\\\\nsell 1 5\\\\nmerge 3\") == \"7.5\"\n",
        "num_ids_2": 57,
        "num_ids_4": 118
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\") == '8.0'",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"buy 1 15\n    split 3\n    sell 1 5\n    die 4\"\"\"\n) == \"8.00000000\"\n\n\"\"\"\nIf you have a look at your notebook, you will see that you have:\n- bought and sold one share for one pound,\n- split and merged it into 3 shares,\n- died and sold them for four pounds each,\n- and then bought some more shares at a cheaper price.\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\\n\") == \"8.0\"\n\n\"\"\"\n\nimport collections",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\\n') == '8.0'\n\"\"\"\n\ntest_cases = [\n    {\n        'input': 'buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\\n',\n        'output': '8.0'\n    }, {\n        'input': 'buy 1 15\\nbuy 5 15\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\nbuy 1 5\\",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''buy 1 15\nsplit 3\nsell 1 5\ndie 4''') == '8.0'\nassert solution('''buy 1 15\nsplit 3\nsell 1 5\nsplit 2\nbuy 2 10\nsell 1 5\nsell 2 5\ndie 4''') == '14.0'\nassert solution('''buy 1 15\nsplit 3\nsell 1 5\ndie 4''') == '7.5'\nassert solution('''buy 1 15\nsplit 3\nbuy 2 10\nsell 1 5\nsell 2 5\ndie 4''') == '18.0'\nassert solution('''buy 1 15\nsplit 3\nbuy 2 10\nsell 1 5\nsell 2 5\ndie 4''') == '14.0'\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\\n\") == '8.0'\nassert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\nsell 1 5\\ndie 4\\n\") == '8.0'\n\n-----Test Data-----\nSample Test Case #0\n\nSample Input:\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\nSample Output:\n8.0\n\"\"\"\n",
        "num_ids_2": 80,
        "num_ids_4": 80
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n''') == \"8.00000000\"\n\n\"\"\"\nSample Output:\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n8.00000000\n\"\"\"\n\"\"\"\nSample Input:\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 3\nsell 1 5\ndie 4\nbuy",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4') == '8.00000000'\n\"\"\"\n\n\n\"\"\"\nSolution:\nConsider the time complexity of the Greedy strategy. \n\nThe time complexity of Greedy strategy is O(N^2) where N is the total number of events. \nFor each event, we first read the number of shares that we bought or sold in the current event and then we increment or decrement the total wealth on hand for the current event. \nSince the number of shares is less than or equal to N, the total wealth on hand cannot exceed N. \nThus, the time complexity of the Greedy strategy is O(N^2)\n\nTo compute the total wealth after N days, we need to consider the maximum of the following three scenarios:\n1. Sell all the shares on the last day and buy in on day N-1\n2. Sell all the shares on day N-1 and buy in on day N\n3. Do nothing on day N-1 and buy in on day N\nTherefore, the time complexity is O(N)\n\nTo compute the capital gains tax, we need to consider the maximum of the following two scenarios:\n1. Sell all the shares on the last day and buy in on day N-1\n2. Sell all the shares on day N-1 and buy in on day N\nTherefore, the time complexity is O(N)\n\"\"\"\n\n\"\"\"\nfrom collections import deque",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\") == '8.00000000'\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"808\") == \"8\"\n\"\"\"\n\nimport sys\n\nx = int(input())\n\nd = {1: \"\", 2: \"\", 3: \"\", 4: \"\", 5: \"\", 6: \"\", 7: \"\", 8: \"\", 9: \"\"}\n\nfor i in str(x):\n    if i!= \"0\":\n        d[int(i)] = int(i) * int(i)\n\nfor j in sorted(d.keys()):\n    print(d[j])\n\nprint(d)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"808\") == \"8\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"100\") == \"0\"\nassert solution(\"301\") == \"3\"\nassert solution(\"40\") == \"4\"\nassert solution(\"0\") == \"0\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"1\") == \"1\"\n\nSolution.assert_solution(solution)",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(808)) == \"8\"\nassert solution(str(1111)) == \"1\"\nassert solution(str(999)) == \"9\"\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('808') == '8'\nassert solution('1') == '1'\n\n\"\"\"\n\n\n\nimport math",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"808\") == \"8\"\n\"\"\"\n\nx = int(input())\nnum = 0\nwhile x:\n    num += x % 10 * (x % 10!= 0)\n    x = x // 10\nprint(num % 10)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"808\") == \"8\"\n\nassert solution(\"1\") == \"1\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"808\") == \"8\"\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('808') == '8'\nassert solution('9100') == '4'\nassert solution('100') == '0'\nassert solution('999999') == '9'\nassert solution('0') == '0'\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('L') == 'L'\nassert solution('W') == 'W'\nassert solution('C') == 'W'\nassert solution('LLL') == 'LLL'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC') == 0\n\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC') == 0\n\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC') == '0'\n\"\"\"\nfrom collections import deque\n\n\nclass Graph:\n    def __init__(self):\n        self.queue = deque()\n        self.graph = {}\n        self.visited = {}\n        self.min_island_count = 0\n        self.islands = []\n\n    def add_edge(self, node1, node2):\n        if node1 not in self.graph:\n            self.graph[node1] = [node2]\n        elif node2 not in self.graph[node1]:\n            self.graph[node1].append(node2)\n\n        if node2 not in self.graph:\n            self.graph[node2] = [node1]\n        elif node1 not in self.graph[node2]:\n            self.graph[node2].append(node1)\n\n    def add_node(self, node):\n        self.graph[node] = []\n\n    def _dfs(self, node):\n        self.queue.append(node)\n        self.visited[node] = True\n\n        while self.queue:\n            node = self.queue.popleft()\n            for neighbour in self.graph[node]:\n                if neighbour not in self.visited:\n                    self.visited[neighbour] = True\n                    self.queue.append(neighbour)\n\n    def get_islands(self):\n        for node in self.graph.keys():\n            if node not in self.visited:\n                self._dfs(node)\n                self.min_island_count += 1\n\n    def get_min_island_count(self):\n        self.get_islands()\n        return self.min_island_count\n\n\ngraph = Graph()\nr, c = map(int, input().split())\nfor _ in range(r):\n    graph.add_node(list(input()))\n\nfor i in range(r):\n    for j in range(c):\n        node1 = (i, j)\n        if node1[0] < r - 1:\n            graph.add_edge(node1, (i + 1, j))\n        if node1[1] < c - 1:\n            graph.add_edge(node1, (i, j + 1))\n\nprint(graph.get_min_island_count())\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\nassert solution(\"4 5\\nCCCCC\\nCCCCC\\nWWWWW\\nWWWWW\") == 1\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\"\"\"\n\n\"\"\"\nSolution Approach\n\nThere are three ways to solve this problem:\n\n1. Union Find\n2. DFS\n3. Union Find with Rank\n\"\"\"\n\n\"\"\"\nUnion Find\n\nInitialize a grid with one set for each point. For example, if we have a 4 x 5 grid:\n\n[[0, 1, 1, 1, 1],\n[1, 0, 1, 1, 1],\n[1, 1, 0, 1, 1],\n[1, 1, 1, 0, 1]]\n\nThen the following sets will be created:\n\n0: [0]\n1: [0, 1]\n2: [1, 3, 4]\n3: [2, 3]\n4: [2, 4]\n\nNow, we have two cases:\n\n1. If we see a cloud, then we join the set containing the point to the set containing the cloud.\n2. If we see a set that was previously joined to another set, then we don't have to do anything.\n\n\"\"\"\n\nclass UnionFind:\n    def __init__(self, n):\n        self.n = n\n        self.sz = [1] * n\n        self.cnt = n\n        self.id = list(range(n))\n\n    def root(self, x):\n        while self.id[x]!= x:\n            self.id[x] = self.id[self.id[x]]\n            x = self.id[x]\n        return x\n\n    def find(self, p, q):\n        return self.root(p) == self.root(q)\n\n    def union(self, p, q):\n        if self.find(p, q):\n            return False\n\n        rp = self.root(p)\n        rq = self.root(q)\n\n        if self.sz[rp] < self.sz[rq]:\n            self.id[rp] = rq\n            self.sz[rq] += self.sz[rp]\n        else:\n            self.id[rq] = rp\n            self.sz[rp] += self.sz[rq]\n        self.cnt -= 1\n        return True\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC') == 0\n\n-----Notes-----\n\n'''\n\nfrom typing import List\n\nlines = stdin.readlines()\n\nr, c = map(int, lines[0].split())\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\nassert solution(\"4 5\\nWWWWW\\nWWWWW\\nWWWWW\\nWWWWW\") == 1\nassert solution(\"4 5\\nWWWWW\\nWWWWW\\nWWWWW\\nWWWWW\") == 1\nassert solution(\"4 5\\nWWWWW\\nWWWCC\\nWWWWW\\nWWWWW\") == 2\nassert solution(\"4 5\\nWWWWW\\nWWWCC\\nWWWWW\\nWWWCC\") == 2\n",
        "num_ids_2": 54,
        "num_ids_4": 112
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 S\\nTH\\nKD\\nKH\\nQH\\nJS\\nTD\\nAD\\nJH\") == \"60\"\nprint(solution(\"3 S\\nTH\\nKD\\nKH\\nQH\\nJS\\nTD\\nAD\\nJH\"))\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\nassert solution(\"5 D\\n5S\\n5H\\n5D\\n5C\") == \"5\"\nassert solution(\"1 D\\n2S\\n3H\\n4D\\n5C\") == \"0\"\nassert solution(\"4 D\\n5S\\n5H\\n5D\\n5C\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 65,
        "num_ids_4": 119
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\nassert solution(\"2 S\\n3H\\n3D\\n3C\\n3S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"0\"\nassert solution(\"2 S\\nAD\\nAD\\n3H\\n3D\\n3C\\n3S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"0\"\nassert solution(\"2 S\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\\n7H\\n7D\\n7C\\n7S\\nTH\") == \"0\"\nassert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\\n7H\\n7D\\n7C\\n7S\") == \"0\"\n\"\"\"",
        "num_ids_2": 92,
        "num_ids_4": 206
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'\nassert solution('3 S\\nTH\\n9C\\nKS\\nQS') == '30'\nassert solution('3 H\\nTH\\n9C\\nKS\\nQS') == '0'\n\"\"\"\n\ns = stdin.split('\\n')[0]\npoints = 0\nfor i in s:\n    if i[0] == 'A':\n        points += 11\n    elif i[0] == 'K':\n        points += 4\n    elif i[0] == 'Q':\n        points += 3\n    elif i[0] == 'J':\n        points += 20\n    elif i[0] == 'T':\n        points += 10\n    elif i[0] == '9':\n        points += 14\n    elif i[0] == '8':\n        points += 0\n    elif i[0] == '7':\n        points += 0\nprint(points)\n",
        "num_ids_2": 63,
        "num_ids_4": 88
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'\n\"\"\"\n\nimport sys",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\\n\") == \"60\"\nassert solution(\"1 S\\nQH\\n3C\\nKD\\n3H\\nKD\\nKC\\n5S\\n0H\\n0D\\n0S\\n\") == \"30\"\n\nprint(solution(stdin))\n",
        "num_ids_2": 92,
        "num_ids_4": 92
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\\n') == '60'\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\"\"\"\n\nfrom string import ascii_lowercase, ascii_uppercase, ascii_letters",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\n-----Constraints-----\nThe input will always be valid, i.e. neither \"this\" nor \"thiss\" will be empty.\n\nThe input will always contain two valid inputs on each line.\n\nTime limit: 40 seconds per test set.\nMemory limit: 1 GB.\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\n\nSample Input:\nword is very wow\nword is very wow\nSample Output:\nw o\n\"\"\"\n\nimport re\nimport string",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('this is very annoying') =='se'\nassert solution('thiss iss veery annoying') =='se'\n\"\"\"\n\nimport string",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\n-----Constraints-----\n$1 \\leq \\mathrm{length}(s) \\leq 1000$\n$1 \\leq \\mathrm{length}(t) \\leq 1000$\n\n\"\"\"\n\nimport sys\n\ns, t = sys.stdin.readlines()\n\nans = \"\"\nfor i in range(len(s)):\n    if t[i * 2] == t[i * 2 + 1]:\n        ans += t[i * 2]\n\nprint(ans)\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''this is very annoying\nthiss iss veery annoying''') =='se'\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def solution(self, stdin: str):\n        ans = []\n        s, t = stdin.split('\\n\\n')\n        for i in range(len(s)):\n            if s[i]!= t[i * 2]:\n                ans.append(s[i])\n\n        return \"\".join(ans)\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(Solution().solution('''this is very annoying\nthiss iss veery annoying'''),'se')\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\n\n-----Input-----\nt i s w i s s i w i s s i w i s s i\nt i s w i s s i w i s s i w i s s i\n-----Output-----\nw i s s\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\nassert solution(\"aaa bbb ccc\") == \"a\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"this is very annoying\") =='se'\nassert solution(\"thiss iss veery annoying\") =='se'\n\"\"\"\n\n\nimport string\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"this is very annoying\\nthiss iss veery annoying\\n\"\n) == \"se\"\nassert solution(\n\"we are the so-called \\\"Vikings\\\" from the north\"\n) == \"hfwi nrdv hfwi uif wihv\"\nassert solution(\n\"dw fkmjdwmw mwmbkqmj kbmjm wmjmdw fwmmdmm wmmmdj\"\n) == \"bdddd ddddd fdddd fdddd ddddd\"",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\n\"\"\"\n\nS, C, K = [int(x) for x in stdin.readline().split()]\nD = [int(x) for x in stdin.readline().split()]\n\nd = max(D) - min(D)",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2\\n') == 3\n\"\"\"\n\nimport sys\n\nS, C, K = [int(x) for x in sys.stdin.readline().strip().split()]\n\nnums = [int(x) for x in sys.stdin.readline().strip().split()]\n\nnums.sort()\n\nprev = nums[0]\n\ncount = 1\n\nfor i in range(1, len(nums)):\n    if nums[i] - prev >= K:\n        count += 1\n        prev = nums[i]\n\nprint(count)\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\nassert solution(\"10 1 0\\n0 0 1 1 2 1 2 2 2 3\") == 4\nassert solution(\"8 2 0\\n0 0 1 1 2 1 2 2\") == 1\nassert solution(\"9 1 0\\n0 0 1 1 2 1 2 2\") == 2\nassert solution(\"2 2 0\\n0 0 1\") == 1\n",
        "num_ids_2": 39,
        "num_ids_4": 79
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\n\n\"\"\"\n\nfrom collections import deque\n\nS, C, K = map(int, input().split())\nsocks = list(map(int, input().split()))\n\nsocks = deque(sorted(socks))\nsocks.append(socks.popleft())\nprint(socks)\nprint(C)\n\ni = 0\nj = 0\ncount = 0\nwhile i < S:\n    while j < S:\n        if socks[j] - socks[i] <= K:\n            count += 1\n            j += 1\n        else:\n            j += 1\n    i += 1\n    j = i\nprint(count)\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('5 3 0\\n0 0 1 1 2') == '3'\n\nfrom collections import deque\nfrom typing import List\n\nclass Solution:\n    def minCnt(self, A: List[int], B: List[int], diff: int) -> int:\n        if diff == 0:\n            return 1\n\n        q = deque()\n        q.append(0)\n\n        visited = [False] * len(A)\n\n        while q:\n            curr = q.popleft()\n            visited[curr] = True\n\n            for i in range(curr + 1, len(A)):\n                if A[curr] - B[i] <= diff and not visited[i]:\n                    q.append(i)\n\n        return len([i for i in visited if visited[i]])\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == '3'\n\"\"\"\n\nimport math\nimport sys",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\n\"\"\"\n\nfrom math import gcd",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2\\n1\") == '6'",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n3\\n') == '6'\n\"\"\"\n\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\\n2\\n3\") == 6\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"6\"\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"6\"\nprint(\"PASSED\")\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n') == '6'\nassert solution('12\\n') == '4'\nassert solution('0\\n') == '0'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n3\\n5') == '2'\nassert solution('3\\n2\\n1') == '6'\nassert solution('2\\n1\\n2') == '1'\nassert solution('3\\n2\\n1') == '6'\n\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n4\\n5\") == \"0\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport math\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\") == '6'\nassert solution(\"2\\n3\\n4\") == '6'\nassert solution(\"3\\n5\\n6\") == '5'\nassert solution(\"7\\n10\\n8\") == '3'\n\nprint(\"All tests passed.\")\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n3\n3 1 2\n''') == '4 2'\n\nassert solution('''\n5\n5 10 8 4 3\n''') == '12 10'\n\nassert solution('''\n3\n2 1 1\n''') == '2 1'\n\nassert solution('''\n1\n1\n''') == '1'\n\nassert solution('''\n4\n1 2 3 4\n''') == '0 0'",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\") == \"4 2\"\n\"\"\"\n\nimport math",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\nassert solution(\"2 1 2\") == \"3 3\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\\n\") == \"4 2\"\nassert solution(\"5 5 5 5\\n\") == \"19 10\"\nassert solution(\"1 1 1\\n\") == \"0 3\"\nassert solution(\"1 2 3\\n\") == \"6 1\"\nassert solution(\"1 1 1\\n\") == \"0 4\"\n",
        "num_ids_2": 31,
        "num_ids_4": 61
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2\") == \"4 2\"\nassert solution(\"4\\n4 4\") == \"8 8\"\nassert solution(\"5\\n2 5 4 3\") == \"12 9\"\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 47
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\nassert solution(\"3 3 3\") == \"9 9 9\"\nassert solution(\"3 2 2\") == \"5 5\"\nassert solution(\"1 1 1\") == \"0 0 1\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\nassert solution(\"2 2 3\") == \"5 3\"\nassert solution(\"1 1 2\") == \"3 3\"\nassert solution(\"6 1 2 3 1\") == \"10 8\"\nassert solution(\"4 0 2 1\") == \"5 2\"\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2\\n\") == \"4 2\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split(\" \")))\n\nalice = 0\nbob = 0\n\nalice += sum(a[:n // 2])\nbob += sum(a[n // 2:])\n\nprint(alice, bob)",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\nsolution(\"2 2\")\n\nassert solution(\"3 2\") == \"3 1\"\n\nsolution(\"10 7 6 5 4 3 2 1\")\n\nassert solution(\"15 8 9 10 11 12 13 14\") == \"36 29\"\n\nsolution(\"5 3 2\")\n\nassert solution(\"4 2\") == \"5 2\"\n\nsolution(\"2 1\")\n\nassert solution(\"1 0\") == \"1 0\"\n\nsolution(\"0 1\")",
        "num_ids_2": 25,
        "num_ids_4": 55
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 2') == '4 2'\nassert solution('4 1 3') == '8 5'\nassert solution('3 4 2') == '5 5'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 1\") == \"2\"\nassert solution(\"20 12 3\") == \"5\"\nassert solution(\"9 10 2\") == \"5\"\nassert solution(\"1 10 10\") == \"10\"\nassert solution(\"4 4 2\") == \"0\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(r'5 2 1') == '2'\nassert solution(r'5 3 1') == '1'\nassert solution(r'5 2 2') == '0'\nassert solution(r'5 3 2') == '1'\nassert solution(r'7 10 10') == '5'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 1\") == \"2\"\nassert solution(\"10 5 7\") == \"2\"\n\"\"\"\n\n\"\"\"\nRuntime: 28 ms, faster than 96.07% of Python3 online submissions for Trolls in Bridge.\nMemory Usage: 14.2 MB, less than 51.73% of Python3 online submissions for Trolls in Bridge.\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 1') == '2'\nassert solution('3 3 4') == '1'\nassert solution('2 2 2') == '0'\nassert solution('1 1 1') == '0'\n\"\"\"\n\nfrom math import sqrt",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 1\") == \"2\"\n\"\"\"\n\nimport sys\nimport numpy as np\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 1\") == \"2\"\nassert solution(\"3 2 1\") == \"3\"\nassert solution(\"5 3 1\") == \"2\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 1') == '2'\nassert solution('3 3 2') == '1'\nassert solution('1000 1 1') == '1000'\nassert solution('1 1 1') == '1'\nassert solution('2 3 2') == '0'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 1\") == 2\n\n\"\"\"\n\nfrom typing import List\nimport unittest\n\nclass Solution:\n    def solve(self, a: List[str]) -> int:\n        return int(a[0]) * int(a[1]) // int(a[2])\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        assert Solution().solve(a=\"5 2 1\") == 2\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 1\\n\") == 2\n\"\"\"\n\ninput = [int(x) for x in input().split()]\nprint(input)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 2 1''') == '''2'''\nassert solution('''5 2 2''') == '''0'''\nassert solution('''5 2 5''') == '''3'''\nassert solution('''5 1 5''') == '''3'''\nassert solution('''4 4 5''') == '''1'''\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == 36\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(5) == 36\nassert solution(7) == 288\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(5)) == '36'\nassert solution(str(7)) == '288'\n\"\"\"\n\n\"\"\"\nSolution - Do not use memoization, instead use the logic below.\n\nWe know that all hailstone sequences will end in 1 at the end, so if we take the sum of 1 to n, we can find the sum of all hailstone sequences.\n\nIt's worth noting that the sum of all hailstone sequences of n is given by:\n\nS_n = (S_{n-1} + 1) * 2 + 1, where S_0 = 1\n\nThis is because:\n\nh(n) = (n, 2n, n + 1)\n\nh(n) = (n-1) + 1, where n-1 is the previous entry in the sequence\n\nIf we ignore the part of the sequence that isn't the entire sequence, we can write this as:\n\nS_n = (S_{n-1} + 1) * 2, where S_0 = 1\n\nWe can recursively write this as:\n\nS_n = (S_{n-1} + 1) * 2 + h(n-1)\n\nThis is also known as the \"golden ratio\" formula, because of the famous correspondence between the sequence and the golden ratio.\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"36\"\nassert solution(\"7\") == \"288\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == '36'\nassert solution('7') == '288'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == 36\nassert solution('7') == 288\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == 36\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"36\"\nassert solution(\"7\") == \"288\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == 36\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"36\"\nassert solution(\"7\") == \"288\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin), end = '\\n\\n')\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n\n-------------",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '4\\n2 3 3 1'\n) == '2 3 4 1'\nassert solution(\n    '4\\n1 2 3 4'\n) == 'impossible'\nassert solution(\n    '5\\n3 2 2 1 3'\n) == '3 2 4 1 5'\nassert solution(\n    '6\\n2 1 2 3 4 5 6'\n) == '3 2 4 6 5 1 2'\nassert solution(\n    '7\\n2 1 3 4 5 6 7'\n) == 'impossible'\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"4\\n2 3 1 3\") == \"impossible\"\n\"\"\"\nimport sys\nimport random\n\nsys.setrecursionlimit(100000)",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n\n\"\"\"\n\nimport math\nimport random\nimport re\n\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solution(self, stdin):\n        # n = int(stdin)\n        n = int(stdin)\n\n        # s = [int(item) for item in stdin.strip().split(' ')]\n        s = [int(item) for item in stdin.strip().split(' ')]\n\n        \"\"\"\n        Given that this problem is a combination of 2 other problems:\n         - Recursion problem: sorting a permutation of n elements (in this case: the n rooms)\n         - Combination problem: generating permutations of k items from a set of size n.\n\n        From the permutation problem, we can generate every possible arrangement of n elements, and for each one of them we can generate all possible combinations of k elements from the n elements (n choose k).\n        \"\"\"\n\n        # len(s) = n\n        # combination_size = math.factorial(n) / (math.factorial(k) * math.factorial(n-k))\n\n        # If there is only one room, all students will have to get their own exam.\n        if n == 1:\n            return \"impossible\"\n\n        # There is no way to avoid students receiving their own exam\n        if sum(s) == n:\n            return \"impossible\"\n\n        # There is no way to avoid students receiving their own exam\n        if sum(s) == 1:\n            return \"impossible\"\n\n        # There is no way to avoid students receiving their own exam\n        if sum(s) == 0:\n            return \"impossible\"\n\n        # There is no way to avoid students receiving their own exam\n        if sum(s) == len(s):\n            return \"impossible\"\n\n        # There is no way to avoid students receiving their own exam\n        if sum(s) == len(s) - 1:\n            return \"impossible\"\n\n        # If there are only two rooms, students are split between the two.\n        if n == 2:\n            return \"2 1\"\n\n        # If there are more than 2 rooms, the best option is to split the exams between all rooms equally, and then assign the remaining exams to the last room.\n        # When generating permutations, we can make the following choice:\n        # * pick k of the n elements at random\n        # * assign the remaining elements to the last room\n        if n > 2:\n            combinations = list()\n            combination_size = math.factorial(n) / (math.factorial(n-2) * 2)\n            for i in range(combination_size):\n                # We know that there are n-2 elements, so we can assign them to any room\n                permutation = random.sample(s, n - 2)\n                permutation.append(0)\n                permutation.append(0)\n                combinations.append(permutation)\n\n            # We don't need to do anything to the last room, since we know that it contains 0s\n            # So, we just append an empty array to the combinations\n            combinations.append([])\n\n        # If we have more than 3 rooms, we can run into the following issue:\n        # * If we split the exams between the first two rooms and the last room, how could we distribute the exams in the last room?\n        # * If we split the exams in the first room, how could we distribute the exams in the last room?\n        #\n        # This is where recursion comes in. If we had 2 rooms, there was nothing we could do to distribute the exams in the last room.\n        # If we had 3 rooms, we could split the exams in the first room and in the last room.\n        # If we had 4 rooms, we could split the exams in the first three rooms and in the last room.\n        #\n        # We can see that there is no way to know beforehand which of the rooms will contain the exams for the last room,\n        # therefore we will have to generate the permutations for each possible case, and then choose the best one.\n\n        # There is no way to avoid students receiving their own exam\n        if n > 2:\n            combinations_with_permutations = list()\n            for combination in combinations:\n                if 0 not in combination:\n                    # There is no way to assign the exams to the last room\n                    continue\n                permutations = list()\n                for permutation in self.combination_to_permutation(combination):\n                    # There is no way to assign the exams to the last room\n                    if 0 in permutation:\n                        continue\n                    permutations.append(permutation)\n                combinations_with_permutations.append(permutations)\n\n            combinations = combinations_with_permutations\n            # If we have 2 rooms, there is no way to assign the exams to the last room\n            if len(combinations) == 1:\n                return \"impossible\"\n\n        # If there are three rooms, we cannot do anything to the last room\n        if n == 3:\n            return \"impossible\"\n\n        # There is no way to assign the exams to the last room\n        if len(combinations) == 0:\n            return \"impossible\"\n\n        # There is no way to avoid students receiving their own exam\n        if len(combinations) == 1:\n            return \"impossible\"\n\n        # There is no way to avoid students receiving their own exam\n        if len(combinations) == 2:\n            return \"impossible\"\n\n        # There is no way to avoid students receiving their own exam\n        if len(combinations) == 3:\n            return \"impossible\"\n\n        # There is no way to avoid students receiving their own exam\n        if len(combinations) == 4:\n            return \"impossible\"\n\n        # There is no way to assign the exams to the last room\n        if len(combinations) == 5:\n            return \"impossible\"\n\n        # There is no way to assign the exams to the last room\n        if len(combinations) == 6:\n            return \"impossible\"\n\n        # There is no way to assign the exams to the last room\n        if len(combinations) == 7:\n            return \"impossible\"\n\n        # There is no way to assign the exams to the last room\n        if len(combinations) == 8:\n            return \"impossible\"\n\n        # There is no way to assign the exams to the last room\n        if len(combinations) == 9:\n            return \"impossible\"\n\n        # There is no way to assign the exams to the last room\n        if len(combinations) == 10:\n            return \"impossible\"\n\n        # There is no",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"3\\n2 3 1\") == \"2 3 1\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"2\\n1\") == \"impossible\"\nassert solution(\"3\\n1 1\") == \"1 1 3\"\n\n-----Solution-----\n\"\"\"\n\nimport sys\n\nimport numpy as np\nimport scipy.stats as st\nimport matplotlib.pyplot as plt\n\nsys.setrecursionlimit(1500)\n\nn = int(sys.stdin.readline())\nstudents = list(map(int, sys.stdin.readline().strip().split(\" \")))\n",
        "num_ids_2": 36,
        "num_ids_4": 63
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"4\\n2 3 3 1\\n5\\n2 3 1 2\") == \"impossible\"\nassert solution(\"4\\n2 3 3 1\\n5\\n2 1 2 3\") == \"2 1 4 3\"\nassert solution(\"4\\n2 3 3 1\\n5\\n2 1 2 3\\n1\") == \"impossible\"\nassert solution(\"4\\n2 3 3 1\\n5\\n2 2 3 1\") == \"impossible\"\n",
        "num_ids_2": 45,
        "num_ids_4": 102
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"4\\n1 2 3 4\") == \"impossible\"\n\"\"\"\n\nimport random\nimport math\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\n\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == 4\n\"\"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s) == t\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == 4\n\n\"\"\"\n\nP, N = [int(x) for x in stdin.split(' ')]\nparts = {}\n\nfor i in range(N):\n    p = stdin.split('\\n')[i]\n    if p in parts:\n        parts[p] += 1\n    else:\n        parts[p] = 1\n\nday_when_changed = -1\nfor i, v in enumerate(parts.values()):\n    if v == P:\n        day_when_changed = i",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\nprint(solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\"))\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3 5\nleft_oar\nright_oar\nleft_oar\nhull\nright_oar\n''') == '4'\nassert solution('''\n3 5\nleft_oar\nright_oar\nleft_oar\nhull\nright_oar\n''') == 'paradox avoided'\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(sample_input_0)) == str(sample_output_0)\nprint(solution(str(input())))\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5 7 7\") == \"7 7\"\n\"\"\"\n\nimport sys\n\nwhile True:\n    lst = list(map(int, sys.stdin.readline().split()))\n    if len(lst) == 0:\n        break\n    print('{} {}'.format(lst[0] + lst[1], lst[2] + lst[3]))\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5\\n5 7\\n7 5') == '7 7'\nassert solution('6 6\\n3 4\\n2 2') == '3 4'\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 5\n5 7\n7 5''') == '7 7'\n\nassert solution('''2 2\n1 2\n3 2\nSample Output:\n3 1\n3 1''') == '3 3'\n\nassert solution('''3 3\n3 3\n1 1\nSample Output:\n3 4\n3 4''') == '3 3'\n\nassert solution('''3 4\n3 4\n3 4\n3 4''') == '3 3'\n\nassert solution('''5 6\n5 6\n5 6\n6 5\nSample Output:\n6 6\n5 5\n''') == '5 5'",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5\\n5 7\\n7 5') == '7 7'\nassert solution('1 1\\n2 2\\n2 1') == '1 1'\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\nassert solution(\"5 5\\n7 7\\n5 5\") == \"7 7\"\nassert solution(\"5 7\\n5 7\\n7 5\") == \"7 7\"\nassert solution(\"5 5\\n7 5\\n5 5\") == \"7 7\"\nassert solution(\"5 5\\n7 7\\n7 5\") == \"7 7\"\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\n\"\"\"\nimport sys\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(sample_input_lines)) == str(sample_output)\n\nprint(solution(stdin.readlines()))\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\nassert solution(\"0 0\\n0 0\\n0 0\") == \"0 0\"\nassert solution(\"0 0\\n1 1\\n2 2\") == \"0 0\"\nassert solution(\"0 0\\n0 0\\n1 1\") == \"0 0\"\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\nassert solution(\"1 5\\n7 5\\n5 7\") == \"7 7\"\nassert solution(\"1 1\\n1 5\\n5 5\") == \"1 1\"\nassert solution(\"1 5\\n7 5\\n5 1\") == \"7 5\"\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5\\n5 7\\n7 5') == '7 7'\nassert solution('5 5\\n7 7\\n7 5') == '7 7'\nassert solution('7 5\\n5 7\\n7 5') == '7 7'\n\nprint(solution('1 2\\n1 3\\n1 4'))",
        "num_ids_2": 40,
        "num_ids_4": 60
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 61\") == \"1.016666667\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1\n61''') == \"measurement error\"\nassert solution('''3\n2 61\n2 61\n2 61''') == \"0.6666666666666666\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n1 61') == '1.016666667'\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n1 61\\n') =='measurement error'\n\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 61\\n\") == \"measurement error\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n1 61') =='measurement error'\nassert solution('2\\n1 61') == '0.5'\nassert solution('2\\n60 62') == '1.0'\nassert solution('2\\n61 62') == '1.016666667'\nassert solution('3\\n61 62') == '1.016666667'\n",
        "num_ids_2": 33,
        "num_ids_4": 67
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n1 61\") == \"measurement error\"\n\"\"\"\n\nimport sys\nimport os",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n1\n1 61\n\"\"\") == \"1.016666667\"\nassert solution(\n\"\"\"\n2\n1 26\n1 31\n\"\"\") == \"measurement error\"\nassert solution(\n\"\"\"\n2\n1 60\n1 36\n\"\"\") == \"1.083333333\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n61\") == \"1.016666667\"\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n1 61') =='measurement error'\nassert solution('2 2\\n1 61\\n1 121') == '2.03125'\nassert solution('3 3\\n1 61\\n1 121\\n1 561') == '2.04166667'\n\n\"\"\"\n\n\"\"\"\n\n3 3\n1 61\n1 121\n1 561\n1 561\nSample Output\n2.03125\n\"\"\"\n\n\"\"\"\n\n1 1\n61\n121\n561\n561\n1 1\n1 1\n1 1\n1 1\nSample Output\nmeasurement error\n\"\"\"\n\n\"\"\"\n\n1 1\n61\n121\n561\n561\n1 1\n1 1\n1 1\n1 1\n1 1\nSample Output\n1.016666667\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 69
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('CPMCRYY') == 'CALGARY'\nassert solution('YRPKKYQ') == 'KQPMCYY'\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    'CPMCRYY'\n) == 'CALGARY'\nassert solution(\n    'LEZHVKIISJYKKLKPVYH'\n) == 'PYTHON'\n\"\"\"\n\nimport math\n\nmessage = stdin.split()",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"CPMCRYY\", \"ALBERTA\") == \"CALGARY\"\nassert solution(\"CQMCRYY\", \"ALBERTA\") == \"CAQMCRY\"\nassert solution(\"CQMCRYY\", \"ALBERTA\") == \"CAQMCRY\"\nassert solution(\"CQMCRYY\", \"ALBERTA\") == \"CAQMCRY\"\nassert solution(\"CQMCRYY\", \"ALBERTA\") == \"CAQMCRY\"\n",
        "num_ids_2": 44,
        "num_ids_4": 90
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"CPMCRYY\") == \"ALBERTA\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('CPMCRYY') == 'ALBERTA'\n\nSample Input:\nCALGARY\nALBERTA\nSample Output:\nCPMCRYY\n\"\"\"\n\nimport unittest\nimport sys\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('CPMCRYY', 'ALBERTA') == 'CALGARY'\nassert solution('BAMCKXK', 'PICCOLO') == 'CAGRKXK'\n\"\"\"\n\nfrom string import ascii_uppercase\n",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"CPMCRYY\", \"ALBERTA\") == \"CALGARY\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"WSRNNCY\") == \"WILDLIFE\"\nassert solution(\"KGRDNKG\") == \"KARELIS\"\nassert solution(\"PRGDMDH\") == \"PROGRAMMING\"\nassert solution(\"WLLNNDT\") == \"WILLOWLOOKINTHEDARK\"\n",
        "num_ids_2": 33,
        "num_ids_4": 67
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"CPMCRY\") == \"CALGARY\"\n\n\"\"\"\n\nimport string\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"ABA\") == \"2\"\nassert solution(\"ABC\") == \"1\"\n\"\"\"\nimport math",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AB\") == \"3\"\n\nassert solution(\"AA\") == \"1\"\n\nassert solution(\"BB\") == \"2\"\n\nassert solution(\"CC\") == \"1\"\n\nassert solution(\"BC\") == \"2\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABC') == '3'\nassert solution('AA') == '1'\nassert solution('BA') == '2'\n\nprint(solution(input()))\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"CBA\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AB') == '3'\nprint(solution('AB'))\n-----\nAB\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('AB') == '3'\nassert solution('ABA') == '1'\nassert solution('AA') == '1'\nassert solution('B') == '2'\nassert solution('ABAB') == '2'\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('AB') == '3'\nassert solution('ABC') == '1'\nassert solution('ACB') == '2'\nassert solution('BABC') == '2'\nassert solution('BACB') == '1'\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n\n-----Constraints-----\n1 <= len(stdin) <= 50\n\n-----Notes-----\nA possible trick would be to write a dictionary of the three cups with a boolean value for each of them (one of them might be None, because Borko has no cup under him).\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"CBA\") == \"2\"\nassert solution(\"ABCBA\") == \"1\"\n\nSample Input:\nABCB\nSample Output:\n1\nassert solution(\"ABCB\") == \"1\"\n\"\"\"\nimport sys",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"AC\") == \"1\"\nassert solution(\"BC\") == \"2\"\nassert solution(\"BA\") == \"1\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"4 3 2 1\") == \"1\"\nassert solution(\"1 2 1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"1 2 3 4 5\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\n\"\"\"\n\nimport sys\nfrom typing import List",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('1 2 3 4\\n5 6 7 8') == '9'\nprint('All tests passed.')\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 2 3 5\") == \"3\"\nassert solution(\"1 2 3 5\") == \"3\"\nassert solution(\"1 2 3 5\") == \"3\"\nassert solution(\"1 2 3 5\") == \"3\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == 3\n\"\"\"\n\nimport math",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == 3\n\"\"\"\nimport sys",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == 3\nassert solution(\"5 7 9 8\") == 7\n\nprint(solution())\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('2 4 2 4') == '8'\n\"\"\"\n\na, b, c, d = map(int, input().split())\n\nsmallest = min(a, b, c, d)\nlargest = max(a, b, c, d)\n\nprint(largest * smallest)",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 3 1\") == \"3\"\nassert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"1 1 2 3\") == \"1\"\nassert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"0 2 3 4\") == \"0\"\n\n\"\"\"\n\nimport sys\n\na, b, c, d = map(int, sys.stdin.readline().split())\n\nprint(min(a*b, a*c, b*c, c*d, d*a, a*d))\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''103 27''') == 4\nprint(solution(input()))\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('103 27') == '4'\nassert solution('1 6') == '0'\nassert solution('1 1') == '0'\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"103 27\") == \"4\"\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''103 27''') == '4'\nassert solution(''') == '''4'''\nassert solution('''100 200''') == '''0'''\nassert solution('''100 200''') == '''0'''\n'''\n",
        "num_ids_2": 26,
        "num_ids_4": 58
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(a)) == str(b)\nprint(solution(str(a)))\n\n-----Explanation-----\nWe perform the following operations:\n - Divide 103 by 2: 33\n - Add 1 to 33: 34\n - Divide 34 by 2: 17\n - Add 1 to 17: 18\n - Divide 18 by 2: 9\n - Add 1 to 9: 10\n - Divide 10 by 2: 5\n - Add 1 to 5: 6\n - Divide 6 by 2: 3\n - Add 1 to 3: 4\n\"\"\"\n\na, b = map(int, input().split())\n\nx, y = a, b\n\ncount = 0\n\nwhile x!= y:\n    if x % 2 == 0:\n        x = x / 2\n        count += 1\n    else:\n        x = x + 1\n        count += 1\n\nprint(count)\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('a b') == 0\nassert solution('1 2') == 0\nassert solution('5 6') == 0\nassert solution('4 4') == 0\n",
        "num_ids_2": 17,
        "num_ids_4": 35
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('103 27') == '4'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('103 27') == '4'\n\nprint(solution('103 27'))\n\nimport os\nimport io\nimport unittest\nfrom unittest.mock import patch\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(103, 27) == 4\n\"\"\"\nimport math\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"103 27\") == 4\n'''",
        "num_ids_2": 9,
        "num_ids_4": 9
    }
]