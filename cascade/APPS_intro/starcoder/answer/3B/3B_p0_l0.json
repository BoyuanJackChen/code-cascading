[
    {
        "number": 4000,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.split()[1:]]\n    graph = [[] for _ in range(n + 1)]\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n\n    def dfs(u, visited):\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                dfs(v, visited)\n\n    max_edges = 0\n    max_path = []\n    for u in range(1, n + 1):\n        visited = [False] * (n + 1)\n        dfs(u, visited)\n        for v in range(1, n + 1):\n            if visited[v]:\n                max_edges = max(max_edges, len(graph[u]) + len(graph[v]) - 2)\n                max_path.append(u)\n                max_path.append(v)\n\n    return str(max_edges) + '\\n' +''.join(map(str, max_path))",
        "num_ids": 249
    },
    {
        "number": 4001,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *divisors = map(int, stdin.split())\n    divisors = set(divisors)\n    for divisor in divisors:\n        if divisor % 2 == 0:\n            return \"IMPOSSIBLE\"\n\n    x, y = 1, 1\n    while True:\n        if x in divisors and y in divisors:\n            return f\"{x} {y}\"\n        x += 1\n        y += 1",
        "num_ids": 100
    },
    {
        "number": 4002,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n\n    def max_sum(row):\n        return max(row)\n\n    def min_sum(row):\n        return min(row)\n\n    def sum_divisible_by_k(row):\n        return sum(x for x in row if x % k == 0)\n\n    def choose_elements(row, max_sum_divisible_by_k):\n        chosen_elements = []\n        for i in range(len(row)):\n            if sum_divisible_by_k(row[:i]) + sum_divisible_by_k(row[i:]) <= max_sum_divisible_by_k:\n                chosen_elements.append(row[i])\n        return chosen_elements\n\n    chosen_rows = []\n    max_sum_divisible_by_k = 0\n\n    for row in a:\n        chosen_elements = choose_elements(row, max_sum_divisible_by_k)\n        chosen_rows.append(chosen_elements)\n        max_sum_divisible_by_k = max(max_sum_divisible_by_k, sum_divisible_by_k(chosen_elements))\n\n    chosen_rows = [row for row in chosen_rows if row]\n    chosen_rows.sort(key=lambda x: sum_divisible_by_k(x), reverse=True)\n\n    return str(sum_divisible_by_k(chosen_rows[0]))",
        "num_ids": 346
    },
    {
        "number": 4003,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def is_increasing(seq):\n        return all(seq[i] <= seq[i + 1] for i in range(len(seq) - 1))\n\n    def longest_increasing_subsequence(seq):\n        increasing_subsequences = []\n        for i in range(len(seq)):\n            increasing_subsequences.append(seq[:i] + seq[i + 1:])\n        return max(increasing_subsequences, key=len)\n\n    def longest_increasing_subsequence_length(seq):\n        increasing_subsequences = []\n        for i in range(len(seq)):\n            increasing_subsequences.append(seq[:i] + seq[i + 1:])\n        return max(len(s) for s in increasing_subsequences)\n\n    increasing_subsequences = longest_increasing_subsequence(a)\n    longest_increasing_subsequence_length_k = longest_increasing_subsequence_length(increasing_subsequences)\n\n    if longest_increasing_subsequence_length_k == len(increasing_subsequences):\n        return str(longest_increasing_subsequence_length_k)\n\n    for i in range(len(increasing_subsequences)):\n        if len(increasing_subsequences[i]) == longest_increasing_subsequence_length_k:\n            return ''.join('L' if a[j] in increasing_subsequences[i] else 'R' for j in range(n))\n\n    return ''",
        "num_ids": 352
    },
    {
        "number": 4004,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def min_diff(a: list) -> int:\n        min_diff = float('inf')\n        for i in range(len(a)):\n            for j in range(i + 1, len(a)):\n                diff = abs(a[i] - a[j])\n                min_diff = min(min_diff, diff)\n        return min_diff\n\n    def min_diff_with_changes(a: list) -> int:\n        min_diff = float('inf')\n        for i in range(len(a)):\n            for j in range(i + 1, len(a)):\n                diff = abs(a[i] - a[j])\n                min_diff = min(min_diff, diff)\n                if diff == 0:\n                    min_diff = min(min_diff, abs(a[i] - a[j]))\n        return min_diff\n\n    min_diff_value = min_diff(a)\n    if min_diff_value == float('inf'):\n        return -1\n\n    min_diff_with_changes_value = min_diff_with_changes(a)\n    if min_diff_with_changes_value == float('inf'):\n        return -1\n\n    return str(min(min_diff_value, min_diff_with_changes_value))\n",
        "num_ids": 312
    },
    {
        "number": 4005,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n\n    def is_inside(x: float, y: float) -> bool:\n        return 0 <= x <= 1 and 0 <= y <= 1\n\n    def is_outside(x: float, y: float) -> bool:\n        return not is_inside(x, y)\n\n    def is_visible(x: float, y: float) -> bool:\n        return is_inside(x, y) and not (is_outside(x3, y3) or is_outside(x4, y4) or is_outside(x5, y5) or is_outside(x6, y6))\n\n    if is_visible(x1, y1) or is_visible(x2, y2):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "num_ids": 235
    },
    {
        "number": 4006,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if i == 1:\n            count += 1\n        else:\n            while i % 10 == 0:\n                i //= 10\n            count += 1\n    return str(count)",
        "num_ids": 69
    },
    {
        "number": 4007,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    friends = list(map(int, stdin.split()[1:]))\n\n    def dfs(node: int, visited: set) -> int:\n        if node in visited:\n            return 0\n        visited.add(node)\n\n        if node == 0:\n            return 1\n\n        return dfs(friends[node - 1], visited)\n\n    def bfs(node: int, visited: set) -> int:\n        if node in visited:\n            return 0\n        visited.add(node)\n\n        if node == 0:\n            return 1\n\n        for neighbor in range(1, n + 1):\n            if neighbor!= node and neighbor!= friends[node - 1]:\n                if dfs(neighbor, visited) == 1:\n                    return 1\n\n        return 0\n\n    def fill_in_unknowns(node: int, visited: set) -> int:\n        if node in visited:\n            return 0\n        visited.add(node)\n\n        if node == 0:\n            return 1\n\n        for neighbor in range(1, n + 1):\n            if neighbor!= node and neighbor!= friends[node - 1]:\n                if dfs(neighbor, visited) == 1:\n                    return 1\n\n        return 0\n\n    def fill_in_unknowns_bfs(node: int, visited: set) -> int:\n        if node in visited:\n            return 0\n        visited.add(node)\n\n        if node == 0:\n            return 1\n\n        for neighbor in range(1, n + 1):\n            if neighbor!= node and neighbor!= friends[node - 1]:\n                if bfs(neighbor, visited) == 1:\n                    return 1\n\n        return 0\n\n    def fill_in_unknowns_dfs(node: int, visited: set) -> int:\n        if node in visited:\n            return 0\n        visited.add(node)\n\n        if node == 0:\n            return 1\n\n        for neighbor in range(1, n + 1):\n            if neighbor!= node and neighbor!= friends[node - 1]:\n                if dfs(neighbor, visited) == 1:\n                    return 1\n\n        return 0\n\n    def fill_in_unknowns_dfs_bfs(node: int, visited: set) -> int:\n        if node in visited:\n            return 0\n        visited.add(node)\n\n        if node == 0:\n            return 1\n\n        for neighbor in range(1, n + 1):\n            if neighbor!= node and neighbor!= friends[node - 1]:\n                if bfs(neighbor, visited) == 1:\n                    return 1\n\n        return 0\n\n    def fill_in_unknowns_dfs_bfs_dfs(node: int, visited: set) -> int:\n        if node in visited:\n            return 0\n        visited.add(node)\n\n        if node == 0:\n            return 1\n\n        for neighbor in range(1, n + 1):\n            if neighbor!= node and neighbor!= friends[node - 1]:\n                if dfs_bfs_dfs(neighbor, visited) == 1:\n                    return 1\n\n        return 0\n\n    def dfs_bfs_dfs(node: int, visited: set) -> int:\n        if node in visited:\n            return 0\n        visited.add(node)\n\n        if node == 0:\n            return 1\n\n        for neighbor in range(1, n + 1):\n            if neighbor!= node and neighbor!= friends[node - 1]:\n                if dfs_bfs_dfs(neighbor, visited) == 1:\n                    return 1\n\n        return 0\n\n    def fill_in_unknowns_dfs_bfs_dfs(node: int, visited: set) -> int:\n        if node in visited:\n            return 0\n        visited.add(node)\n\n        if node == 0:\n            return 1\n\n        for neighbor in range(1, n + 1):\n            if neighbor!= node and neighbor!= friends[node - 1]:\n                if dfs_bfs_dfs(neighbor, visited) == 1:\n                    return 1\n\n        return 0\n\n    def fill_in_unknowns_dfs_bfs_dfs_bfs(node: int, visited: set) -> int:\n        if node in visited:\n            return 0\n        visited.add(node)\n\n        if node == 0:\n            return 1\n\n        for neighbor in range(1, n + 1):\n            if neighbor!= node and neighbor!= friends[node - 1]:\n                if dfs_bfs_dfs_bfs(neighbor, visited) == 1:\n                    return 1\n\n        return 0\n\n    def fill_in_unknowns_dfs_bfs_dfs_bfs_bfs(",
        "num_ids": 1025
    },
    {
        "number": 4008,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    colors = [0] * k\n    for i in range(n):\n        colors[a[i] - 1] += 1\n\n    for i in range(k):\n        if colors[i] == 0:\n            return \"NO\"\n\n    for i in range(k):\n        if colors[i] == 0:\n            continue\n        for j in range(i + 1, k):\n            if colors[j] == 0:\n                continue\n            if colors[i] == colors[j]:\n                return \"NO\"\n\n    return \"YES\"\n",
        "num_ids": 147
    },
    {
        "number": 4009,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    num = list(map(int, stdin.split()[1]))\n    mod = 10 ** x\n\n    def count_operations(num):\n        count = 0\n        for i in range(len(num)):\n            if num[i] == 0:\n                count += 1\n            else:\n                break\n        return count\n\n    def change_digit(num, index, digit):\n        num[index] = digit\n        return num\n\n    def is_valid(num):\n        return num % mod == 0\n\n    def is_valid_with_operations(num, operations):\n        for _ in range(operations):\n            num = change_digit(num, 0, 1 - num[0])\n        return is_valid(num)\n\n    def find_remainder(num):\n        return num % mod\n\n    def find_remainder_with_operations(num, operations):\n        for _ in range(operations):\n            num = change_digit(num, 0, 1 - num[0])\n        return find_remainder(num)\n\n    def find_min_operations(num):\n        min_operations = count_operations(num)\n        for i in range(1, n):\n            if num[i] == 0:\n                min_operations += 1\n            else:\n                break\n        return min_operations\n\n    def find_min_operations_with_operations(num, operations):\n        min_operations = count_operations(num)\n        for _ in range(operations):\n            num = change_digit(num, 0, 1 - num[0])\n            min_operations += count_operations(num)\n        return min_operations\n\n    def find_min_operations_with_operations_and_remainder(num, operations):\n        min_operations = find_min_operations_with_operations(num, operations)\n        remainder = find_remainder_with_operations(num, operations)\n        return min_operations, remainder\n\n    min_operations, remainder = find_min_operations_with_operations_and_remainder(num, 1)\n    if remainder == 0:\n        return str(min_operations)\n    else:\n        return str(min_operations + 1)",
        "num_ids": 478
    },
    {
        "number": 4010,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2:2+n]))\n        palindromes = []\n        for i in range(n):\n            for j in range(i+3, n+1):\n                subseq = a[i:j]\n                if subseq == subseq[::-1]:\n                    palindromes.append(subseq)\n        if palindromes:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
        "num_ids": 128
    },
    {
        "number": 4011,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, *f = map(int, stdin.split())\n    f = [f[i-1] for i in range(1, 10)]\n\n    def replace(x: int) -> int:\n        return f[x]\n\n    def replace_segment(start: int, end: int) -> str:\n        return ''.join(map(str, map(replace, range(start, end+1))))\n\n    max_num = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            segment = a[i:j+1]\n            if segment:\n                max_num = max(max_num, int(replace_segment(i, j)))\n\n    return str(max_num)",
        "num_ids": 164
    },
    {
        "number": 4012,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        a, b, c = map(int, stdin.split()[1:])\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:\n            a, b, c = a, b, c\n        if a > b > c:",
        "num_ids": 1025
    },
    {
        "number": 4013,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    min_instability = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            new_a = a[:i] + a[i+1:j] + a[j+1:] + a[i]\n            new_instability = max(new_a) - min(new_a)\n            if new_instability < min_instability:\n                min_instability = new_instability\n\n    return str(min_instability)",
        "num_ids": 138
    },
    {
        "number": 4014,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    exams = []\n    for _ in range(m):\n        s, d, c = map(int, stdin.split())\n        exams.append((s, d, c))\n\n    exams.sort(key=lambda x: (x[0], x[1]))\n\n    days = [0] * (n + 1)\n    for s, d, c in exams:\n        for i in range(s, d):\n            days[i] += 1\n\n    days_left = [0] * (n + 1)\n    for i in range(1, n + 1):\n        days_left[i] = days_left[i - 1] + days[i - 1]\n\n    days_taken = [0] * (n + 1)\n    days_taken[1] = 1\n\n    for i in range(2, n + 1):\n        if days_taken[i - 1] == 1:\n            days_taken[i] = 1\n        else:\n            days_taken[i] = 0\n\n    days_taken_exams = [0] * (n + 1)\n    days_taken_exams[1] = 1\n\n    for i in range(2, n + 1):\n        if days_taken_exams[i - 1] == 1:\n            days_taken_exams[i] = 1\n        else:\n            days_taken_exams[i] = 0\n\n    days_taken_exams_left = [0] * (n + 1)\n    days_taken_exams_left[1] = 1\n\n    for i in range(2, n + 1):\n        if days_taken_exams_left[i - 1] == 1:\n            days_taken_exams_left[i] = 1\n        else:\n            days_taken_exams_left[i] = 0\n\n    days_taken_exams_taken = [0] * (n + 1)\n    days_taken_exams_taken[1] = 1\n\n    for i in range(2, n + 1):\n        if days_taken_exams_taken[i - 1] == 1:\n            days_taken_exams_taken[i] = 1\n        else:\n            days_taken_exams_taken[i] = 0\n\n    days_taken_exams_taken_left = [0] * (n + 1)\n    days_taken_exams_taken_left[1] = 1\n\n    for i in range(2, n + 1):\n        if days_taken_exams_taken_left[i - 1] == 1:\n            days_taken_exams_taken_left[i] = 1\n        else:\n            days_taken_exams_taken_left[i] = 0\n\n    days_taken_exams_taken_taken = [0] * (n + 1)\n    days_taken_exams_taken_taken[1] = 1\n\n    for i in range(2, n + 1):\n        if days_taken_exams_taken_taken[i - 1] == 1:\n            days_taken_exams_taken_taken[i] = 1\n        else:\n            days_taken_exams_taken_taken[i] = 0\n\n    days_taken_exams_taken_taken_left = [0] * (n + 1)\n    days_taken_exams_taken_taken_left[1] = 1\n\n    for i in range(2, n + 1):\n        if days_taken_exams_taken_taken_left[i - 1] == 1:\n            days_taken_exams_taken_taken_left[i] = 1\n        else:\n            days_taken_exams_taken_taken_left[i] = 0\n\n    days_taken_exams_taken_taken_taken = [0] * (n + 1)\n    days_taken_exams_taken_taken_taken[1] = 1\n\n    for i in range(2, n + 1):\n        if days_taken_exams_taken_taken_taken[i - 1] == 1:\n            days_taken_exams_taken_taken_taken[i] = 1\n        else:\n            days_taken_exams_taken_taken_taken[i] = 0\n\n    days_taken_exams_taken_taken_taken_left = [0] * (n +",
        "num_ids": 1025
    },
    {
        "number": 4015,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    moves = 0\n    while n!= m:\n        if n % 2 == 0:\n            n *= 2\n        else:\n            n *= 3\n        moves += 1\n    if n == m:\n        return str(moves)\n    else:\n        return \"-1\"",
        "num_ids": 73
    },
    {
        "number": 4016,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.split()[1]\n\n    def find_substring(s: str, t: str) -> int:\n        count = 0\n        for i in range(len(s) - len(t) + 1):\n            if s[i:i + len(t)] == t:\n                count += 1\n        return count\n\n    def find_min_length(s: str, t: str) -> int:\n        min_length = float('inf')\n        for i in range(len(s) - len(t) + 1):\n            if s[i:i + len(t)] == t:\n                min_length = min(min_length, len(s[i:i + len(t)]))\n        return min_length\n\n    min_length = find_min_length(t, t)\n    for i in range(n):\n        min_length = min(min_length, find_min_length(t, t[:i] + t[i + 1:]))\n\n    result = \"\"\n    for i in range(len(t) - min_length + 1):\n        result += t[i:i + min_length]\n\n    return result\n",
        "num_ids": 271
    },
    {
        "number": 4017,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def is_good(arr):\n        return sum(arr) == sum(arr[1:])\n\n    def find_nice_indices(arr):\n        for i in range(len(arr)):\n            if is_good(arr[:i] + arr[i+1:]):\n                return i\n        return -1\n\n    nice_indices = find_nice_indices(a)\n    if nice_indices == -1:\n        print(0)\n        return \"\"\n\n    print(nice_indices + 1)\n    for i in range(nice_indices + 1):\n        print(nice_indices - i)",
        "num_ids": 156
    },
    {
        "number": 4018,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n\n    def backtrack(start: int, current: str, cost: int, set_size: int, result: int) -> int:\n        if set_size == k:\n            return cost\n\n        if current == \"\" and set_size == 0:\n            return cost\n\n        if current == \"\" and set_size > 0:\n            return -1\n\n        if current == \"\" and set_size < k:\n            return -1\n\n        if current == \"\" and set_size == k:\n            return 0\n\n        if current == \"\" and set_size > k:\n            return -1\n\n        if current[0] in s:\n            return backtrack(start + 1, current[1:], cost + 1, set_size + 1, result)\n\n        return backtrack(start + 1, current, cost, set_size, result)\n\n    result = backtrack(0, \"\", 0, 0, 0)\n\n    if result == -1:\n        print(-1)\n    else:\n        print(result)\n",
        "num_ids": 241
    },
    {
        "number": 4019,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    def find_spanning_tree(edges):\n        def dfs(parent, visited, stack):\n            if not stack:\n                return [parent]\n            node = stack.pop()\n            if visited[node]:\n                return []\n            visited[node] = True\n            children = [child for child, _ in edges if child == node]\n            for child in children:\n                if child == parent:\n                    continue\n                subtree = dfs(child, visited, stack + [child])\n                if subtree:\n                    return [parent] + subtree\n            return []\n\n        visited = [False] * (n + 1)\n        stack = [1]\n        spanning_tree = dfs(1, visited, stack)\n        if not spanning_tree:\n            return \"NO\"\n\n        def is_valid_spanning_tree(spanning_tree):\n            degree = [0] * (n + 1)\n            for edge in edges:\n                u, v = edge\n                degree[u] += 1\n                degree[v] += 1\n            for node in spanning_tree:\n                if degree[node]!= D:\n                    return False\n            return True\n\n        for _ in range(len(edges) - 1):\n            spanning_tree = dfs(spanning_tree[-1], visited, stack)\n            if not spanning_tree:\n                return \"NO\"\n            if is_valid_spanning_tree(spanning_tree):\n                return \"YES\\n\" + \" \".join(map(str, spanning_tree)) + \"\\n\"\n\n        return \"NO\"\n\n    return find_spanning_tree(edges)",
        "num_ids": 383
    },
    {
        "number": 4020,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split()[0].split(':'))\n    h2, m2 = map(int, stdin.split()[1].split(':'))\n\n    if m1 % 2 == m2 % 2:\n        mid_h = (h1 + h2) // 2\n        mid_m = (m1 + m2) // 2\n    else:\n        mid_h = (h1 + h2 - 1) // 2\n        mid_m = (m1 + m2 - 1) // 2\n\n    return f\"{mid_h:02}:{mid_m:02}\"",
        "num_ids": 142
    },
    {
        "number": 4021,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return \"1\"\n    elif a == 2:\n        return \"2\"\n    elif a == 3:\n        return \"3\"\n    elif a == 4:\n        return \"4\"\n    elif a == 5:\n        return \"5\"\n    elif a == 6:\n        return \"6\"\n    elif a == 7:\n        return \"7\"\n    elif a == 8:\n        return \"8\"\n    elif a == 9:\n        return \"9\"\n    elif a == 10:\n        return \"10\"\n    elif a == 11:\n        return \"11\"\n    elif a == 12:\n        return \"12\"\n    elif a == 13:\n        return \"13\"\n    elif a == 14:\n        return \"14\"\n    elif a == 15:\n        return \"15\"\n    elif a == 16:\n        return \"16\"\n    elif a == 17:\n        return \"17\"\n    elif a == 18:\n        return \"18\"\n    elif a == 19:\n        return \"19\"\n    elif a == 20:\n        return \"20\"\n    elif a == 21:\n        return \"21\"\n    elif a == 22:\n        return \"22\"\n    elif a == 23:\n        return \"23\"\n    elif a == 24:\n        return \"24\"\n    elif a == 25:\n        return \"25\"\n    elif a == 26:\n        return \"26\"\n    elif a == 27:\n        return \"27\"\n    elif a == 28:\n        return \"28\"\n    elif a == 29:\n        return \"29\"\n    elif a == 30:\n        return \"30\"\n    elif a == 31:\n        return \"31\"\n    elif a == 32:\n        return \"32\"\n    elif a == 33:\n        return \"33\"\n    elif a == 34:\n        return \"34\"\n    elif a == 35:\n        return \"35\"\n    elif a == 36:\n        return \"36\"\n    elif a == 37:\n        return \"37\"\n    elif a == 38:\n        return \"38\"\n    elif a == 39:\n        return \"39\"\n    elif a == 40:\n        return \"40\"\n    elif a == 41:\n        return \"41\"\n    elif a == 42:\n        return \"42\"\n    elif a == 43:\n        return \"43\"\n    elif a == 44:\n        return \"44\"\n    elif a == 45:\n        return \"45\"\n    elif a == 46:\n        return \"46\"\n    elif a == 47:\n        return \"47\"\n    elif a == 48:\n        return \"48\"\n    elif a == 49:\n        return \"49\"\n    elif a == 50:\n        return \"50\"\n    elif a == 51:\n        return \"51\"\n    elif a == 52:\n        return \"52\"\n    elif a == 53:\n        return \"53\"\n    elif a == 54:\n        return \"54\"\n    elif a == 55:\n        return \"55\"\n    elif a == 56:\n        return \"56\"\n    elif a == 57:\n        return \"57\"\n    elif a == 58:\n        return \"58\"\n    elif a == 59:\n        return \"59\"\n    elif a == 60:\n        return \"60\"\n    elif a == 61:\n        return \"61\"\n    elif a == 62:\n        return \"62\"\n    elif a == 63:\n        return \"63\"\n    elif a == 64:\n        return \"64\"\n    else:\n        return \"Invalid input\"",
        "num_ids": 895
    },
    {
        "number": 4022,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split()[i+1].split(' '))\n        segments.append((l, r))\n    segments.sort(key=lambda x: (x[0], x[1]))\n    max_length = 0\n    for i in range(n - 1):\n        if segments[i][1] < segments[i+1][0]:\n            max_length = max(max_length, segments[i+1][1] - segments[i][0])\n    return str(max_length)",
        "num_ids": 141
    },
    {
        "number": 4023,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def can_complete(a: list) -> bool:\n        heights = set(a)\n        if len(heights)!= 1:\n            return False\n\n        height = heights.pop()\n        for i in range(len(a) - 1):\n            if a[i] == height and a[i + 1] == height:\n                return False\n\n        return True\n\n    if can_complete(a):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n    return \"\"\n",
        "num_ids": 134
    },
    {
        "number": 4024,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n\n    def backtrack(start: int, current: str, cost: int, set_size: int, result: int) -> int:\n        if set_size == k:\n            return cost\n\n        if current == \"\":\n            return -1\n\n        if len(current) > 1 and current[0] == current[-1]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[1]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[2]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[3]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[4]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[5]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[6]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[7]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[8]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[9]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[10]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[11]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[12]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[13]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[14]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[15]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[16]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[17]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[18]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[19]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[20]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[21]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[22]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[23]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[24]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[25]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[26]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[27]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[28]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[29]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[30]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[31]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[32]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[33]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[34]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[35]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[36]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[37]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[38]:\n            return -1\n\n        if len(current) > 1 and current[0] == current[39]:\n            return -1\n\n        ",
        "num_ids": 1024
    },
    {
        "number": 4025,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    days = [0, 0, 0, 0, 0, 0, 0]\n    for i in range(7):\n        days[i] = a + b + c\n        a, b, c = b, c, a\n    return str(days.index(max(days)))",
        "num_ids": 83
    },
    {
        "number": 4026,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def read_input() -> tuple:\n        n, m = map(int, stdin.readline().split())\n        tiles = []\n        for _ in range(n):\n            top_left, bottom_right = map(int, stdin.readline().split())\n            tiles.append((top_left, bottom_right))\n        return n, m, tiles\n\n    def is_symmetric(matrix: list) -> bool:\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j]!= matrix[j][i]:\n                    return False\n        return True\n\n    def is_valid_square(tiles: list, n: int, m: int) -> bool:\n        for tile in tiles:\n            top_left, bottom_right = tile\n            if top_left[0] < 1 or top_left[1] < 1 or bottom_right[0] > m or bottom_right[1] > m:\n                return False\n        return True\n\n    def construct_square(tiles: list, n: int, m: int) -> list:\n        square = [[0] * m for _ in range(m)]\n        for tile in tiles:\n            top_left, bottom_right = tile\n            for i in range(top_left[0], bottom_right[0] + 1):\n                for j in range(top_left[1], bottom_right[1] + 1):\n                    square[i - 1][j - 1] = tile[0]\n        return square\n\n    def main() -> None:\n        t = int(stdin.readline())\n        for _ in range(t):\n            n, m, tiles = read_input()\n            if is_valid_square(tiles, n, m) and is_symmetric(construct_square(tiles, n, m)):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\n    main()\n",
        "num_ids": 416
    },
    {
        "number": 4027,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    A = set(map(int, stdin.split()[1:]))\n    B = set(map(int, stdin.split()[1:]))\n\n    while len(A) > 0 and len(B) > 0:\n        if len(A) > len(B):\n            A.remove(max(A, key=abs))\n        else:\n            B.remove(max(B, key=abs))\n\n    return str(abs(sum(A) - sum(B)))",
        "num_ids": 117
    },
    {
        "number": 4028,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+1\")\n    s =",
        "num_ids": 1025
    },
    {
        "number": 4029,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return str(n)\n    moves = 0\n    while n % 25!= 0:\n        n = str(int(n) // 10) + str(int(n) % 10)\n        moves += 1\n    return str(moves)",
        "num_ids": 78
    },
    {
        "number": 4030,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    colors = [0] * n\n    for i in range(n):\n        colors[i] = i + 1\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if colors[i]!= colors[j]:\n                s = swap_chars(s, i, j)\n                colors[i], colors[j] = colors[j], colors[i]\n\n    return str(colors)\n\n\ndef",
        "num_ids": 119
    },
    {
        "number": 4031,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    strings = stdin.split()[1:]\n\n    def is_substring(s1: str, s2: str) -> bool:\n        for i in range(len(s1)):\n            if s1[i]!= s2[i]:\n                return False\n        return True\n\n    def is_valid(s: str) -> bool:\n        for i in range(len(s) - 1):\n            if is_substring(s[i], s[i + 1]):\n                return False\n        return True\n\n    def is_valid_permutation(s: str) -> bool:\n        for i in range(len(s) - 1):\n            if s[i] > s[i + 1]:\n                return False\n        return True\n\n    def is_valid_permutation_with_substrings(s: str) -> bool:\n        for i in range(len(s) - 1):\n            if s[i] > s[i + 1] and is_substring(s[i], s[i + 1]):\n                return False\n        return True\n\n    def is_valid_permutation_with_substrings_and_substrings(s: str) -> bool:\n        for i in range(len(s) - 1):\n            if s[i] > s[i + 1] and is_substring(s[i], s[i + 1]) and is_substring(s[i + 1], s[i]):\n                return False\n        return True\n\n    def is_valid_permutation_with_substrings_and_substrings_and_substrings(s: str) -> bool:\n        for i in range(len(s) - 1):\n            if s[i] > s[i + 1] and is_substring(s[i], s[i + 1]) and is_substring(s[i + 1], s[i]) and is_substring(s[i], s[i + 1]):\n                return False\n        return True\n\n    def is_valid_permutation_with_substrings_and_substrings_and_substrings_and_substrings(s: str) -> bool:\n        for i in range(len(s) - 1):\n            if s[i] > s[i + 1] and is_substring(s[i], s[i + 1]) and is_substring(s[i + 1], s[i]) and is_substring(s[i], s[i + 1]) and is_substring(s[i + 1], s[i]):\n                return False\n        return True\n\n    def is_valid_permutation_with_substrings_and_substrings_and_substrings_and_substrings_and_substrings(s: str) -> bool:\n        for i in range(len(s) - 1):\n            if s[i] > s[i + 1] and is_substring(s[i], s[i + 1]) and is_substring(s[i + 1], s[i]) and is_substring(s[i], s[i + 1]) and is_substring(s[i + 1], s[i]) and is_substring(s[i], s[i + 1]) and is_substring(s[i + 1], s[i]):\n                return False\n        return True\n\n    def is_valid_permutation_with_substrings_and_substrings_and_substrings_and_substrings_and_substrings_and_substrings(s: str) -> bool:\n        for i in range(len(s) - 1):\n            if s[i] > s[i + 1] and is_substring(s[i], s[i + 1]) and is_substring(s[i + 1], s[i]) and is_substring(s[i], s[i + 1]) and is_substring(s[i + 1], s[i]) and is_substring(s[i], s[i + 1]) and is_substring(s[i + 1], s[i]) and is_substring(s[i], s[i + 1]) and is_substring(s[i + 1], s[i]):\n                return False\n        return True\n\n    def is_valid_permutation_with_substrings_and_substrings_and_substrings_and_substrings_and_substrings_and_substrings_and_substrings(s: str) -> bool:\n        for i in range(len(s) - 1):\n            if s[i] > s[",
        "num_ids": 1025
    },
    {
        "number": 4032,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    left = 0\n    right = n - 1\n    count = 0\n\n    while left <= right:\n        if a[left] <= k:\n            count += 1\n            left += 1\n        elif a[right] <= k:\n            count += 1\n            right -= 1\n        else:\n            break\n\n    return str(count)",
        "num_ids": 99
    },
    {
        "number": 4033,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    red_tiles = 0\n    blue_tiles = 0\n    perimeter = 0\n\n    for i in range(1, a + 1):\n        for j in range(1, b + 1):\n            if i + j == a + b:\n                red_tiles += 1\n            if i + j == a + b - 1:\n                blue_tiles += 1\n            perimeter += 1\n\n    return str(min(red_tiles, blue_tiles))",
        "num_ids": 117
    },
    {
        "number": 4034,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    colors = [0] * n\n    for i in range(n):\n        colors[i] = s[i]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if colors[i]!= colors[j]:\n                colors[i], colors[j] = colors[j], colors[i]\n                break\n\n    sorted_s = ''.join(sorted(s))\n    if sorted_s == s:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "num_ids": 132
    },
    {
        "number": 4035,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n\n    if a % 2 == 0:\n        a += 1\n\n    if b % 2 == 0:\n        b += 1\n\n    if a > b:\n        a, b = b, a\n\n    if a > b:\n        return -1\n\n    if a == b:\n        return a\n\n    if a < b:\n        return a\n\n    return -1",
        "num_ids": 104
    },
    {
        "number": 4036,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [0] * k\n    for i in range(k):\n        a[i] = int(stdin.split()[i + 1])\n    a.sort()\n    if a[k - 1] > 2 * n:\n        return \"NO\"\n    for i in range(k - 1):\n        if a[i] < a[i + 1] > 2 * a[i]:\n            return \"NO\"\n    return \"YES\" + \" \".join(map(str, a))",
        "num_ids": 126
    },
    {
        "number": 4037,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n\n    projects.sort(key=lambda x: (-x[0], x[1]))\n\n    max_size = 0\n    current_size = 0\n    current_rating = r\n\n    for a, b in projects:\n        if current_rating >= a:\n            current_rating += b\n            current_size += 1\n            max_size = max(max_size, current_size)\n        else:\n            break\n\n    return str(max_size)",
        "num_ids": 144
    },
    {
        "number": 4038,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    matrix = [list(map(int, stdin.split()[1:]))]\n    for i in range(1, n):\n        matrix.append(matrix[i-1][::-1])\n    for i in range(n):\n        matrix[i] = matrix[i][::-1]\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= matrix[j][i]:\n                return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(map(str, matrix[0]))",
        "num_ids": 132
    },
    {
        "number": 4039,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n\n    projects.sort(key=lambda x: x[0])\n\n    for i in range(n):\n        a, b = projects[i]\n        if r >= a:\n            r += b\n        else:\n            return \"NO\"\n\n    return \"YES\"",
        "num_ids": 102
    },
    {
        "number": 4040,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n\n    platforms = []\n    for i in range(1, m + 1):\n        platforms.append(c[i - 1])\n\n    platforms.sort()\n\n    def is_valid(i: int, j: int) -> bool:\n        if i == 0 or j == n + 1:\n            return False\n\n        for p in platforms:\n            if i + p > j:\n                return False\n\n        return True\n\n    def dfs(i: int, j: int, path: list) -> bool:\n        if i == j:\n            return True\n\n        if not is_valid(i, j):\n            return False\n\n        for p in platforms:\n            if i + p > j:\n                continue\n\n            if dfs(i + p, j, path + [p]):\n                return True\n\n        return False\n\n    path = []\n    if dfs(0, n + 1, path):\n        print(\"YES\")\n        print(\" \".join(map(str, path)))\n    else:\n        print(\"NO\")",
        "num_ids": 238
    },
    {
        "number": 4041,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s = list(s)\n    t = list(t)\n    l, r = 0, 0\n    max_len = 0\n\n    while r < len(s):\n        if s[r:r+len(t)] == t:\n            max_len = max(max_len, r - l + 1)\n            r += 1\n        else:\n            s[l], s[r] = s[r], s[l]\n            l += 1\n            r += 1\n\n    return str(max_len)",
        "num_ids": 126
    },
    {
        "number": 4042,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x < 0 or x > 5:\n        return \"Invalid input\"\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def find_primes(x: float) -> tuple[int, int]:\n        a = int(x)\n        b = int(x) + 1\n        while b <= 1000000:\n            if is_prime(b):\n                a = b\n            b += 1\n        return a, b\n\n    a, b = find_primes(x)\n    return f\"{a} {b}\"",
        "num_ids": 176
    },
    {
        "number": 4043,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n == 1:\n        return \"YES\"\n\n    def dfs(u, depth):\n        nonlocal max_depth\n        if depth > max_depth:\n            max_depth = depth\n        if depth == max_depth:\n            result.append((u, v))\n        for v in range(1, n + 1):\n            if u!= v and (u, v) not in edges and (v, u) not in edges:\n                edges.add((u, v))\n                edges.add((v, u))\n                dfs(v, depth + 1)\n                edges.remove((u, v))\n                edges.remove((v, u))\n\n    edges = set()\n    max_depth = 0\n    result = []\n    for u in range(1, n + 1):\n        dfs(u, 1)\n\n    if max_depth > d:\n        return \"NO\"\n\n    for u, v in result:\n        print(u, v)\n\n    return \"YES\"\n",
        "num_ids": 227
    },
    {
        "number": 4044,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = \"0\" * a + \"1\" * b\n    for i in range(a, a + b):\n        if s[i] == \"0\":\n            s = s[:i] + \"1\" + s[i + 1:]\n        else:\n            s = s[:i] + \"0\" + s[i + 1:]\n    return s",
        "num_ids": 96
    },
    {
        "number": 4045,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(str, stdin.split())\n    if n > 3:\n        return \"NO\"\n\n    s_count = s.count(\"a\") + s.count(\"b\") + s.count(\"c\")\n    t_count = t.count(\"a\") + t.count(\"b\") + t.count(\"c\")\n\n    if s_count!= t_count:\n        return \"NO\"\n\n    res = \"\"\n    for i in range(n):\n        res += \"a\" * s.count(\"a\") + \"b\" * s.count(\"b\") + \"c\" * s.count(\"c\")\n\n    if s in res or t in res:\n        return \"NO\"\n\n    return \"YES\", res\n\n\ndef",
        "num_ids": 164
    },
    {
        "number": 4046,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *q = map(int, stdin.split())\n    if n == 1:\n        return \"1\"\n\n    q.sort()\n    p = [i + q[i - 1] for i in range(n)]\n    if p == list(range(1, n + 1)):\n        return \" \".join(map(str, p))\n\n    return \"-1\"\n",
        "num_ids": 85
    },
    {
        "number": 4047,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *x = map(int, stdin.split())\n    x.sort()\n    if x[0] == x[1] == x[2]:\n        return \"0\"\n    elif x[0] == x[1] + 2:\n        return \"1\"\n    elif x[0] == x[1] - 2:\n        return \"1\"\n    elif x[0] == x[1] + 1:\n        return \"2\"\n    elif x[0] == x[1] - 1:\n        return \"2\"\n    else:\n        return \"0\"",
        "num_ids": 129
    },
    {
        "number": 4048,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    moves = 0\n    i, j = 1, 1\n    while True:\n        moves += 1\n        if i * j == N:\n            return str(moves)\n        if i * j < N:\n            i += 1\n        else:\n            j += 1",
        "num_ids": 67
    },
    {
        "number": 4049,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a1, a2, a3, b1, b2, b3 = map(int, stdin.split())\n    alice_wins = 0\n    bob_wins = 0\n    for i in range(n):\n        if a1 > 0 and a2 > 0 and a3 > 0:\n            if a1 == b1 and a2 == b2 and a3 == b3:\n                alice_wins += 1\n            elif a1 == b1 and a2 == b2:\n                alice_wins += 1\n            elif a1 == b1:\n                alice_wins += 1\n            elif a2 == b2:\n                alice_wins += 1\n            elif a3 == b3:\n                alice_wins += 1\n            else:\n                bob_wins += 1\n        else:\n            if b1 == a1 and b2 == a2 and b3 == a3:\n                bob_wins += 1\n            elif b1 == a1 and b2 == a2:\n                bob_wins += 1\n            elif b1 == a1:\n                bob_wins += 1\n            elif b2 == a2:\n                bob_wins += 1\n            elif b3 == a3:\n                bob_wins += 1\n            else:\n                alice_wins += 1\n    return f\"{alice_wins} {bob_wins}\"",
        "num_ids": 294
    },
    {
        "number": 4050,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def find_blocks(a: list, l: int, r: int) -> list:\n        blocks = []\n        while l < r:\n            if l == r - 1:\n                blocks.append((l, r))\n                break\n            if a[l] + a[l + 1] == a[r]:\n                blocks.append((l, r))\n                l += 2\n            else:\n                r -= 1\n        return blocks\n\n    def is_valid(blocks: list) -> bool:\n        for i in range(len(blocks)):\n            for j in range(i + 1, len(blocks)):\n                if blocks[i][1] < blocks[j][0] or blocks[j][1] < blocks[i][0]:\n                    return False\n        return True\n\n    def max_blocks(a: list) -> int:\n        max_blocks = 0\n        for i in range(len(a)):\n            for j in range(i + 1, len(a)):\n                if a[i] + a[j] == a[i] * 2:\n                    max_blocks += 1\n        return max_blocks\n\n    blocks = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] == a[i] * 2:\n                blocks.append((i, j))\n\n    max_blocks = max_blocks(a)\n    for i in range(max_blocks):\n        for j in range(i + 1, max_blocks):\n            if not is_valid(blocks[i:j + 1]):\n                break\n        else:\n            print(i + 1, j + 1)\n            break\n\n    return str(max_blocks)\n",
        "num_ids": 408
    },
    {
        "number": 4051,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def spaghetti_sort(a: list) -> list:\n        stack = []\n        result = []\n\n        for num in a:\n            while stack and stack[-1][0] > num:\n                result.append(stack.pop()[1])\n            stack.append((num, len(result)))\n\n        while stack:\n            result.append(stack.pop()[1])\n\n        return result\n\n    sorted_a = spaghetti_sort(a)\n\n    if sorted_a == a:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "num_ids": 146
    },
    {
        "number": 4052,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n\n    def swap(i, j):\n        s[i], s[j] = s[j], s[i]\n\n    def is_valid(i, j):\n        return 1 <= i <= n and 1 <= j <= n and i!= j\n\n    moves = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if is_valid(i, j):\n                swap(i, j)\n                moves += 1\n                if s == t:\n                    return moves, [i, j]\n\n    return -1, []\n\n\ndef",
        "num_ids": 160
    },
    {
        "number": 4053,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    prefixes = stdin.split()[1:]\n    suffixes = stdin.split()[1:]\n    prefixes.sort()\n    suffixes.sort()\n    result = \"\"\n    for i in range(2 * n - 2):\n        if i < len(prefixes) and i < len(suffixes):\n            result += \"P\"\n        elif i < len(prefixes):\n            result += \"S\"\n        else:\n            result += \"P\"\n    return result",
        "num_ids": 107
    },
    {
        "number": 4054,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(a[0])",
        "num_ids": 27
    },
    {
        "number": 4055,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def is_disturbed(i: int) -> bool:\n        return (i > 0 and a[i - 1] == 1 and a[i + 1] == 1) or (i < n - 1 and a[i - 1] == 1 and a[i + 1] == 1)\n\n    def count_disturbed(i: int) -> int:\n        count = 0\n        for j in range(i + 1, n):\n            if a[j] == 1 and not is_disturbed(j):\n                count += 1\n        return count\n\n    def min_k() -> int:\n        lo, hi = 0, n\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if count_disturbed(mid) >= mid:\n                lo = mid + 1\n            else:\n                hi = mid\n        return lo\n\n    return str(min_k())\n",
        "num_ids": 238
    },
    {
        "number": 4056,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    count = 0\n    for i in range(1, n + 1):\n        if all(i % j == 0 for j in a):\n            count += 1\n\n    return str(count)",
        "num_ids": 72
    },
    {
        "number": 4057,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    coins = list(map(int, stdin.split()[1:]))\n\n    pockets = [[] for _ in range(n + 1)]\n    for coin in coins:\n        pockets[coin].append(coin)\n\n    min_pockets = float('inf')\n    for pocket in pockets:\n        if len(pocket) > 1:\n            min_pockets = min(min_pockets, len(pocket))\n\n    return str(min_pockets)",
        "num_ids": 123
    },
    {
        "number": 4058,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    house = list(map(int, stdin.split()))\n\n    heaters = [0] * n\n    for i in range(n):\n        if house[i] == 1:\n            heaters[i] = r\n\n    for i in range(n - 1, -1, -1):\n        if heaters[i] == 0:\n            for j in range(i - r + 1, i + r):\n                if heaters[j] == 0:\n                    heaters[j] = r\n                    break\n\n    count = 0\n    for i in range(n):\n        if heaters[i] == 0:\n            count += 1\n            if count == n:\n                return -1\n\n    return count",
        "num_ids": 170
    },
    {
        "number": 4059,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            for k in range(1, N + 1):\n                if i * j + k == N:\n                    count += 1\n    return str(count)",
        "num_ids": 73
    },
    {
        "number": 4060,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    stack = []\n    count = 0\n\n    for i in range(n):\n        if s[i] == '(':\n            stack.append(i)\n        else:\n            stack.pop()\n            if not stack:\n                count += 1\n\n    return str(count)",
        "num_ids": 78
    },
    {
        "number": 4061,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s = list(s)\n    t = list(t)\n    l, r = 0, 0\n    max_len = 0\n\n    while r < len(s):\n        if s[r:r+len(t)] == t:\n            max_len = max(max_len, r - l + 1)\n            r += 1\n        else:\n            s[l], s[r] = s[r], s[l]\n            l += 1\n            r += 1\n\n    return str(max_len)",
        "num_ids": 126
    },
    {
        "number": 4062,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a <= 0 or b <= 0 or c <= 0 or d <= 0:\n        return \"Invalid input\"\n\n    max_value = 0\n    for x in range(a, b + 1):\n        for y in range(c, d + 1):\n            if x * y > max_value:\n                max_value = x * y\n\n    return str(max_value)",
        "num_ids": 105
    },
    {
        "number": 4063,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *d = map(int, stdin.split())\n    d = sorted(d)\n    count_arc = 0\n    count_abc = 0\n    for i in range(n):\n        if d[i] >= 5:\n            count_arc += 1\n        else:\n            count_abc += 1\n    return str(count_arc) + \" \" + str(count_abc)",
        "num_ids": 89
    },
    {
        "number": 4064,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def is_good(t: int) -> bool:\n        return l <= t <= r\n\n    def count_good_sleeping_times(t: int) -> int:\n        count = 0\n        for i in range(n):\n            if is_good(t + a[i]):\n                count += 1\n        return count\n\n    max_good_sleeping_times = 0\n    for t in range(h):\n        good_sleeping_times = count_good_sleeping_times(t)\n        if good_sleeping_times > max_good_sleeping_times:\n            max_good_sleeping_times = good_sleeping_times\n\n    return str(max_good_sleeping_times)",
        "num_ids": 188
    },
    {
        "number": 4065,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    max_problems = 0\n    for i in range(1, n):\n        if a[i] <= a[i - 1] * 2:\n            max_problems += 1\n        else:\n            break\n\n    return str(max_problems)",
        "num_ids": 83
    },
    {
        "number": 4066,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    lcm_dict = {}\n    for i in range(n):\n        for j in range(i+1, n):\n            lcm = lcm_of_two(a[i], a[j])\n            if lcm in lcm_dict:\n                lcm_dict[lcm].append((i, j))\n            else:\n                lcm_dict[lcm] = [(i, j)]\n\n    min_lcm = float('inf')\n    min_pair = None\n    for lcm, pairs in lcm_dict.items():\n        if lcm < min_lcm:\n            min_lcm = lcm\n            min_pair = pairs\n\n    if min_pair:\n        return''.join(map(str, min_pair[0]))\n    else:\n        return 'No solution'\n\ndef",
        "num_ids": 205
    },
    {
        "number": 4067,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    def count_chars(s: str, c: str) -> int:\n        return s.count(c)\n\n    def replace_chars(s: str, c1: str, c2: str, c3: str) -> str:\n        return s.replace(c1, c2).replace(c2, c3).replace(c3, c1)\n\n    def is_balanced(s: str) -> bool:\n        return count_chars(s, '0') == count_chars(s, '1') and count_chars(s, '1') == count_chars(s, '2')\n\n    def min_replacements(s: str) -> int:\n        min_count = min(count_chars(s, '0'), count_chars(s, '1'), count_chars(s, '2'))\n        return min_count * 3\n\n    def lexicographically_smallest(s: str) -> str:\n        return min(s, key=lambda x: (count_chars(x, '0'), count_chars(x, '1'), count_chars(x, '2')))\n\n    def is_valid(s: str) -> bool:\n        return is_balanced(s) and min_replacements(s) <= n\n\n    def find_balanced_ternary(s: str) -> str:\n        if is_valid(s):\n            return s\n        else:\n            return find_balanced_ternary(replace_chars(s, '0', '1', '2'))\n\n    return find_balanced_ternary(s)",
        "num_ids": 364
    },
    {
        "number": 4068,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.append(n)\n    a.sort()\n    count = 0\n    for i in range(1, n):\n        if a[i] - a[i - 1] > 1:\n            count += 1\n            if count % 1000000007 == 0:\n                return str(count)\n    return str(count)",
        "num_ids": 108
    },
    {
        "number": 4069,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    moves = []\n    for i in range(K):\n        if X + D > 10**15:\n            moves.append(X - D)\n        else:\n            moves.append(X + D)\n        X += D\n    moves.sort()\n    return str(abs(moves[-1]))",
        "num_ids": 81
    },
    {
        "number": 4070,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    elif n == 2:\n        return \"1\"\n    else:\n        return str(2 * n - 1)",
        "num_ids": 46
    },
    {
        "number": 4071,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = a * (a + 1) // 2\n    return str(result)",
        "num_ids": 28
    },
    {
        "number": 4072,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return \"1\"\n    else:\n        return \"0\"",
        "num_ids": 31
    },
    {
        "number": 4073,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    return str(a[n-1])",
        "num_ids": 43
    },
    {
        "number": 4074,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, k = map(int, stdin.split()[1:])\n        if n == k:\n            print(1)\n        else:\n            print(n // k + (n % k!= 0))",
        "num_ids": 64
    },
    {
        "number": 4075,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n    s = []\n    for i in range(1, n + 1):\n        s.append(list(map(int, stdin.split())))\n\n    p = list(map(int, stdin.split()))\n\n    def count_combinations(on: int, off: int) -> int:\n        if on == 0 and off == 0:\n            return 1\n        if on == 0:\n            return count_combinations(off, off + 1)\n        if off == 0:\n            return count_combinations(on, on + 1)\n\n        return count_combinations(on - 1, off) + count_combinations(on, off - 1)\n\n    def count_combinations_helper(on: int, off: int, index: int) -> int:\n        if index == m:\n            return 1 if on == 0 and off == 0 else 0\n\n        result = 0\n        for i in range(1, n + 1):\n            if s[index][i] == 1:\n                result += count_combinations_helper(on + 1, off, index + 1)\n                result += count_combinations_helper(on, off, index + 1)\n\n        return result\n\n    return str(count_combinations_helper(0, 0, 0))\n",
        "num_ids": 316
    },
    {
        "number": 4076,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    angle_per_hour = 360 / 12\n    angle_per_minute = 360 / 60\n    angle_per_second = 360 / 60 / 12\n\n    hour_angle = (H * angle_per_hour + M * angle_per_minute) % 360\n    minute_angle = (M * angle_per_minute) % 360\n\n    distance = A * math.sin(math.radians(hour_angle)) + B * math.sin(math.radians(minute_angle))\n\n    return f\"{distance:.9f}\"",
        "num_ids": 154
    },
    {
        "number": 4077,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    count = 0\n    for i in range(n - 1):\n        if a[i] + a[i + 1] == m:\n            count += 1\n    return str(count)",
        "num_ids": 79
    },
    {
        "number": 4078,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split())\n        segments.append([l, r])\n\n    def max_min_diff(a, segments):\n        max_val = float('-inf')\n        min_val = float('inf')\n        for segment in segments:\n            max_val = max(max_val, max(a[segment[0] - 1:segment[1]]))\n            min_val = min(min_val, min(a[segment[0] - 1:segment[1]]))\n        return max_val - min_val\n\n    def choose_segments(a, segments):\n        max_diff = float('-inf')\n        chosen_segments = []\n        for i in range(1, n + 1):\n            for j in range(len(segments)):\n                if i >= segments[j][0] and i <= segments[j][1]:\n                    a[i - 1] -= 1\n                    if max_diff < max_min_diff(a, segments[:j] + segments[j + 1:]):\n                        max_diff = max_min_diff(a, segments[:j] + segments[j + 1:])\n                        chosen_segments = [j]\n                    elif max_diff == max_min_diff(a, segments[:j] + segments[j + 1:]):\n                        chosen_segments.append(j)\n                    a[i - 1] += 1\n        return max_diff, chosen_segments\n\n    max_diff, chosen_segments = choose_segments(a, segments)\n    print(max_diff)\n    print(len(chosen_segments))\n    print(*chosen_segments)\n\n    return ''\n",
        "num_ids": 398
    },
    {
        "number": 4079,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    strings = stdin.split('\\n')[1:]\n\n    for string in strings:\n        if is_diverse(string):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n    return \"\"\n\n\ndef",
        "num_ids": 57
    },
    {
        "number": 4080,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split())\n        segments.append([l, r])\n\n    def max_min_diff(a: list, segments: list) -> int:\n        max_val = float('-inf')\n        min_val = float('inf')\n        for i in range(len(a)):\n            for segment in segments:\n                if i >= segment[0] and i <= segment[1]:\n                    a[i] -= 1\n            max_val = max(max_val, max(a))\n            min_val = min(min_val, min(a))\n            for segment in segments:\n                if i >= segment[0] and i <= segment[1]:\n                    a[i] += 1\n        return max_val - min_val\n\n    def choose_segments(a: list, segments: list) -> int:\n        max_diff = float('-inf')\n        for i in range(1, len(a) + 1):\n            diff = max_min_diff(a[:i], segments)\n            max_diff = max(max_diff, diff)\n        return max_diff\n\n    max_diff = choose_segments(a, segments)\n    q = len(segments)\n    chosen_segments = []\n    for i in range(q):\n        a_copy = a.copy()\n        diff = max_min_diff(a_copy, segments[:i] + segments[i + 1:])\n        if diff == max_diff:\n            chosen_segments.append(i + 1)\n\n    print(max_diff)\n    print(q)\n    print(*chosen_segments)\n\n    return ''\n",
        "num_ids": 391
    },
    {
        "number": 4081,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def is_increasing(seq):\n        for i in range(len(seq) - 1):\n            if seq[i] >= seq[i + 1]:\n                return False\n        return True\n\n    def longest_increasing_subsequence(seq):\n        increasing_subsequences = []\n        for i in range(len(seq)):\n            increasing_subsequences.append([])\n            for j in range(i + 1, len(seq)):\n                if seq[i] < seq[j]:\n                    increasing_subsequences[-1].append(seq[j])\n        return max(increasing_subsequences, key=len)\n\n    def longest_increasing_subsequence_length(seq):\n        increasing_subsequences = []\n        for i in range(len(seq)):\n            increasing_subsequences.append([])\n            for j in range(i + 1, len(seq)):\n                if seq[i] < seq[j]:\n                    increasing_subsequences[-1].append(seq[j])\n        return len(max(increasing_subsequences, key=len))\n\n    increasing_subsequences = longest_increasing_subsequence(a)\n    longest_increasing_subsequence_length_k = longest_increasing_subsequence_length(increasing_subsequences)\n\n    return str(longest_increasing_subsequence_length_k)",
        "num_ids": 318
    },
    {
        "number": 4082,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    max_length = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] < a[j]:\n                max_length = max(max_length, j - i + 1)\n\n    return str(max_length)",
        "num_ids": 93
    },
    {
        "number": 4083,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def count_equal_numbers(a):\n        count = 0\n        for i in range(n):\n            if a[i] == 0:\n                continue\n            count += 1\n            for j in range(i + 1, n):\n                if a[j] == 0:\n                    continue\n                if a[i] == a[j]:\n                    count -= 1\n                    break\n        return count\n\n    def count_operations(a):\n        count = 0\n        for i in range(n):\n            if a[i] == 0:\n                continue\n            count += 1\n            for j in range(i + 1, n):\n                if a[j] == 0:\n                    continue\n                if a[i] == a[j]:\n                    count -= 1\n                    break\n        return count\n\n    def min_operations(a, k):\n        count = count_equal_numbers(a)\n        if count >= k:\n            return 0\n        if count + 1 >= k:\n            return 1\n        return 2\n\n    return str(min_operations(a, k))",
        "num_ids": 303
    },
    {
        "number": 4084,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    blue_balls = 0\n    for i in range(n):\n        if i % 2 == 0:\n            blue_balls += a\n        else:\n            blue_balls += b\n    return str(blue_balls)",
        "num_ids": 68
    },
    {
        "number": 4085,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split()[0])\n    for _ in range(queries):\n        n = int(stdin.split()[1])\n        divisors = list(map(int, stdin.split()[2:2+n]))\n        if len(set(divisors))!= n:\n            return -1\n        if divisors[0] == 1 or divisors[-1] == x:\n            return -1\n        divisors.sort()\n        for i in range(len(divisors)-1):\n            if divisors[i] * divisors[i+1] == x:\n                return divisors[i]\n        return -1",
        "num_ids": 147
    },
    {
        "number": 4086,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    unique_elements = set(a)\n    unique_elements = sorted(unique_elements, reverse=True)\n\n    x = len(unique_elements)\n\n    print(x)\n    print(\" \".join(map(str, unique_elements)))\n\n    return \"\"",
        "num_ids": 83
    },
    {
        "number": 4087,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    digits = [int(digit) for digit in str(a)]\n    sum_of_digits = sum(digits)\n    if sum_of_digits % 4 == 0:\n        return str(a)\n    else:\n        for i in range(1000):\n            b = i * 10 ** len(str(i))\n            digits = [int(digit) for digit in str(b)]\n            sum_of_digits = sum(digits)\n            if sum_of_digits % 4 == 0:\n                return str(b)\n        return str(1000 * 10 ** len(str(1000)))",
        "num_ids": 151
    },
    {
        "number": 4088,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split('\\n')[0])\n    for _ in range(test_cases):\n        s, m, b = stdin.split('\\n')[1].split()\n        b = list(map(int, b.split()))\n        s = list(s)\n        t = []\n        for i in range(m):\n            if i == 0:\n                t.append(s[0])\n            else:\n                t.append(s[b[i-1]-1])\n        print(''.join(t))",
        "num_ids": 117
    },
    {
        "number": 4089,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    names = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'ag', 'ah', 'ai', 'aj', 'ak', 'al', 'am', 'an', 'ao', 'ap', 'aq', 'ar', 'as', 'at', 'au', 'av', 'aw', 'ax', 'ay', 'az', 'aaa', 'aab', 'aac', 'aad', 'aae', 'aaf', 'aga', 'ahb', 'aic', 'ajd', 'akl', 'amn', 'aoq', 'arp', 'asq', 'atr', 'auv', 'awx', 'ayz', 'aaaa', 'aaab', 'aaac', 'aaad', 'aaae', 'aaaf', 'aaag', 'aaah', 'aaai', 'aaaj', 'aaak', 'aala', 'aamn', 'aapq', 'aarv', 'aasw', 'aaty', 'aau', 'aav', 'aaw', 'aax', 'aay', 'aaz', 'aaaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa',",
        "num_ids": 1023
    },
    {
        "number": 4090,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    words = stdin.split()[1:]\n    words.sort()\n    min_length = float('inf')\n    for i in range(n - 1):\n        for j in range(i + 2, n):\n            if j - i == 1:\n                continue\n            segment = words[i:j]\n            if segment[0] == segment[-1]:\n                abbreviation = ''.join(word[0].upper() for word in segment)\n                min_length = min(min_length, len(words) + len(abbreviation))\n    return str(min_length)",
        "num_ids": 137
    },
    {
        "number": 4091,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def max_profit(start, end):\n        max_profit = 0\n        for i in range(start, end):\n            max_profit = max(max_profit, a[i])\n        return max_profit\n\n    max_profits = [max_profit(0, i) for i in range(1, n)]\n    max_profit = max(max_profits)\n\n    days = [0] * k\n    days[0] = n\n    for i in range(1, k):\n        days[i] = days[i - 1] + max_profits[i - 1]\n\n    return str(max_profit) + '\\n' +''.join(map(str, days))\n",
        "num_ids": 183
    },
    {
        "number": 4092,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def insert_integer(a: list, i: int, x: int) -> list:\n        a.insert(i, x)\n        return a\n\n    def check_sum(a: list) -> bool:\n        return sum(a) == 0\n\n    def find_subsegment(a: list) -> tuple:\n        for i in range(len(a) - 1):\n            if check_sum(a[i:i+2]):\n                return i, i+1\n        return None, None\n\n    def find_min_insertions(a: list) -> int:\n        min_insertions = 0\n        i = 0\n        while i < len(a):\n            if check_sum(a[i:]):\n                min_insertions += 1\n                i += 1\n            else:\n                i += 1\n        return min_insertions\n\n    min_insertions = find_min_insertions(a)\n    if min_insertions == 0:\n        return \"0\"\n\n    subsegment = find_subsegment(a)\n    if subsegment is None:\n        return str(min_insertions)\n\n    i, j = subsegment\n    if i == 0:\n        return str(min_insertions + 1)\n\n    min_insertions += 1\n    return str(min_insertions)",
        "num_ids": 312
    },
    {
        "number": 4093,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, m = map(int, stdin.split()[1:])\n        a = [i for i in range(1, n+1)]\n        a.sort()\n        max_diff = 0\n        for i in range(1, n):\n            max_diff = max(max_diff, abs(a[i] - a[i-1]))\n        print(max_diff)",
        "num_ids": 104
    },
    {
        "number": 4094,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    sequence = [7]\n    for i in range(7):\n        sequence.append(sequence[-1] * 10)\n    for i in range(1, 1000001):\n        if i % K == 0:\n            sequence.append(i)\n    for i in range(len(sequence)):\n        if sequence[i] % K == 0:\n            return str(i)\n    return -1",
        "num_ids": 101
    },
    {
        "number": 4095,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n\n    def find_median(p: list) -> int:\n        p.sort()\n        return p[len(p) // 2]\n\n    pairs = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if find_median(p[i:j + 1]) == m:\n                pairs.append((i, j))\n\n    return str(len(pairs))",
        "num_ids": 117
    },
    {
        "number": 4096,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def can_write(a: list, k: int) -> bool:\n        for i in range(k):\n            if a[i] > 0:\n                return True\n        return False\n\n    def min_days(a: list, k: int) -> int:\n        days = 0\n        for i in range(k):\n            if a[i] > 0:\n                days += 1\n        return days\n\n    if can_write(a, n):\n        return str(min_days(a, n))\n    else:\n        return \"-1\"",
        "num_ids": 146
    },
    {
        "number": 4097,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n\n    def is_arithmetic_progression(seq: list) -> bool:\n        for i in range(len(seq) - 1):\n            if seq[i + 1] - seq[i]!= seq[i + 2] - seq[i + 1]:\n                return False\n        return True\n\n    def change_one_element(seq: list) -> int:\n        min_changes = float('inf')\n        for i in range(len(seq)):\n            if seq[i] == 0:\n                continue\n            if seq[i] == 1:\n                seq[i] = 0\n                min_changes = min(min_changes, 1)\n            elif seq[i] == len(seq) - 1:\n                seq[i] = len(seq) - 2\n                min_changes = min(min_changes, 1)\n            else:\n                seq[i] += 1\n                min_changes = min(min_changes, 2)\n        return min_changes\n\n    min_changes = change_one_element(b)\n    if min_changes == float('inf'):\n        return -1\n    else:\n        return str(min_changes)",
        "num_ids": 283
    },
    {
        "number": 4098,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    a.sort()\n    a.reverse()\n\n    max_students = 0\n    max_teams = 0\n\n    for i in range(n):\n        if i == 0:\n            max_students += a[i]\n            max_teams += 1\n        else:\n            if a[i] - a[i - 1] <= 5:\n                max_students += a[i]\n            else:\n                max_students += 5\n                max_teams += 1\n\n    if max_teams > k:\n        max_teams = k\n\n    return str(max_students)",
        "num_ids": 151
    },
    {
        "number": 4099,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # Calculate the sum of the scores\n    score_sum = sum(a)\n\n    # Calculate the average score\n    average_score = score_sum / n\n\n    # Check if the average score is greater than or equal to the goal\n    if average_score >= m:\n        # Calculate the minimum number of points required\n        min_points = m - average_score\n\n        # Check if the minimum number of points is greater than or equal to 0\n        if min_points >= 0:\n            return str(min_points)\n        else:\n            return \"-1\"\n    else:\n        return \"-1\"",
        "num_ids": 154
    },
    {
        "number": 4100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    scores = [k] * n\n    for i in range(q):\n        scores[a[i] - 1] -= 1\n\n    for i in range(n):\n        if scores[i] > 0:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n    return \"\"\n",
        "num_ids": 94
    },
    {
        "number": 4101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0].split())\n    a = [[int(x) for x in stdin.split()[1].split()] for _ in range(n)]\n\n    def invert_row(row: list) -> list:\n        return [1 - x for x in row]\n\n    def invert_column(column: list) -> list:\n        return [1 - x for x in column]\n\n    def sort_matrix(a: list) -> list:\n        return sorted(a, key=lambda x: x[::-1])\n\n    def is_sorted(a: list) -> bool:\n        return all(a[i] <= a[i + 1] for i in range(len(a) - 1))\n\n    def find_inversion_points(a: list) -> list:\n        inversion_points = []\n        for i in range(len(a)):\n            for j in range(i + 1, len(a)):\n                if a[i] > a[j]:\n                    inversion_points.append((i, j))\n        return inversion_points\n\n    def find_inversion_count(a: list) -> int:\n        inversion_count = 0\n        for i in range(len(a)):\n            for j in range(i + 1, len(a)):\n                if a[i] > a[j]:\n                    inversion_count += 1\n        return inversion_count\n\n    def find_inversion_points_and_count(a: list) -> tuple:\n        inversion_points = find_inversion_points(a)\n        inversion_count = find_inversion_count(a)\n        return inversion_points, inversion_count\n\n    def find_inversion_points_and_count_with_sorting(a: list) -> tuple:\n        sorted_a = sort_matrix(a)\n        inversion_points, inversion_count = find_inversion_points_and_count(sorted_a)\n        return inversion_points, inversion_count\n\n    inversion_points, inversion_count = find_inversion_points_and_count_with_sorting(a)\n\n    if inversion_count == 0:\n        return \"YES\\n\" + \"\".join(\"0\" if row[i] == 0 else \"1\" for row in a) + \"\\n\" + \"\".join(\"0\" if col[i] == 0 else \"1\" for col in zip(*a))\n    else:\n        return \"NO\\n\"",
        "num_ids": 554
    },
    {
        "number": 4102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 1 or len(stdin) > 10:\n        return \"No\"\n    for digit in stdin:\n        if not digit.isdigit():\n            return \"No\"\n    return \"Yes\"",
        "num_ids": 48
    },
    {
        "number": 4103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n\n    def go(i, acc_charge, bat_charge):\n        if i == n:\n            return acc_charge, bat_charge\n\n        if s[i] == 1:\n            acc_charge += 1\n            bat_charge += 1\n\n        if acc_charge > a:\n            return go(i + 1, acc_charge, bat_charge)\n\n        if bat_charge > b:\n            return go(i + 1, acc_charge, bat_charge)\n\n        return go(i + 1, acc_charge - 1, bat_charge - 1)\n\n    acc_charge, bat_charge = go(0, a, b)\n    return str(acc_charge)",
        "num_ids": 180
    },
    {
        "number": 4104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into a list of operands and operators\n    operands = []\n    operators = []\n    for char in stdin:\n        if char.isdigit():\n            operands.append(int(char))\n        elif char in \"+-\":\n            operators.append(char)\n\n    # Evaluate the expression using the Shunting Yard algorithm\n    stack = []\n    output = []\n    for op in operators:\n        if op == \"+\":\n            b = stack.pop()\n            a = stack.pop()\n            stack.append(a + b)\n        elif op == \"-\":\n            b = stack.pop()\n            a = stack.pop()\n            stack.append(a - b)\n        else:\n            stack.append(op)\n\n    # Add the remaining operands to the output\n    for op in stack:\n        if op.isdigit():\n            output.append(op)\n\n    # Convert the output list to a string and return it\n    return \"\".join(output)",
        "num_ids": 198
    },
    {
        "number": 4105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n > 2 * 10**5 or k > 2 * 10**5:\n        return \"NO\"\n\n    colors = [0] * n\n    for i in range(n):\n        colors[i] = i + 1\n\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1]:\n            return \"NO\"\n        if colors[i] == colors[i + 2]:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1] and colors[i + 1] == colors[i + 2]:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1] or colors[i] == colors[i + 2]:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1] and colors[i + 1] == colors[i + 2]:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1] or colors[i] == colors[i + 2]:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1] and colors[i + 1] == colors[i + 2]:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1] or colors[i] == colors[i + 2]:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1] and colors[i + 1] == colors[i + 2]:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1] or colors[i] == colors[i + 2]:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1] and colors[i + 1] == colors[i + 2]:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1] or colors[i] == colors[i + 2]:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1] and colors[i + 1] == colors[i + 2]:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1] or colors[i] == colors[i + 2]:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1] and colors[i + 1] == colors[i + 2]:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1] or colors[i] == colors[i + 2]:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1] and colors[i + 1] == colors[i + 2]:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1] or colors[i] == colors[i + 2]:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1] and colors[i + 1] == colors[i + 2]:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1] or colors[i] == colors[i + 2]:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1] and colors[i + 1] == colors[i + 2]:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1] or colors[i] == colors[i + 2]:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if colors[i]",
        "num_ids": 1025
    },
    {
        "number": 4106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def can_repost(i, j):\n        return i + 1 >= k and j - i >= k\n\n    def max_sum(i, j):\n        if i == j:\n            return a[i]\n        if can_repost(i, j):\n            return max(a[i], a[j]) + max_sum(i + 1, j)\n        return max_sum(i + 1, j)\n\n    return str(max_sum(0, n - 1))",
        "num_ids": 139
    },
    {
        "number": 4107,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin.split()[1])\n    routers = [0] * n\n    for i in range(n):\n        if s[i] == '1':\n            routers[i] = k\n    total_cost = 0\n    for i in range(n):\n        if routers[i] > 0:\n            total_cost += routers[i]\n            for j in range(max(1, i - routers[i]), min(n, i + routers[i])):\n                if j!= i:\n                    total_cost += j\n    return str(total_cost)",
        "num_ids": 145
    },
    {
        "number": 4108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s = list(s)\n    t = list(t)\n\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            return \"No\"\n\n    for i in range(len(s)):\n        if s[i] == 'a':\n            s[i] = 'z'\n        elif s[i] == 'z':\n            s[i] = 'a'\n        elif s[i] == 'e':\n            s[i] = 'l'\n        elif s[i] == 'l':\n            s[i] = 'e'\n        elif s[i] == 'o':\n            s[i] = 'p'\n        elif s[i] == 'p':\n            s[i] = 'o'\n\n    for i in range(len(t)):\n        if t[i] == 'a':\n            t[i] = 'z'\n        elif t[i] == 'z':\n            t[i] = 'a'\n        elif t[i] == 'e':\n            t[i] = 'l'\n        elif t[i] == 'l':\n            t[i] = 'e'\n        elif t[i] == 'o':\n            t[i] = 'p'\n        elif t[i] == 'p':\n            t[i] = 'o'\n\n    if s == t:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 317
    },
    {
        "number": 4109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    C = list(map(int, stdin.split()))\n    A = []\n    for _ in range(m):\n        A.append(list(map(int, stdin.split())))\n\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = dp[i - 1][j]\n            for k in range(1, m + 1):\n                dp[i][j] = max(dp[i][j], dp[i - 1][k] + A[i - 1][j - 1] * C[k - 1])\n\n    if dp[n][m] == 0:\n        return \"No solution\"\n    else:\n        return dp[n][m]",
        "num_ids": 208
    },
    {
        "number": 4110,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    p_1, c_1 = map(int, input().split())\n    p_2, c_2 = map(int, input().split())\n    p_3, c_3 = map(int, input().split())\n    p_4, c_4 = map(int, input().split())\n\n    base_score = sum(c_i for i in range(1, D + 1) for _ in range(p_i))\n    perfect_bonuses = sum(c_i for i in range(1, D + 1) for _ in range(p_i) if i * 100 == 100 * p_i)\n\n    total_score = base_score + perfect_bonuses\n\n    if total_score >= G:\n        return \"0\"\n    else:\n        return str(D - total_score // 100)",
        "num_ids": 206
    },
    {
        "number": 4111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1:]))\n\n    good_indices = []\n    for i in range(n):\n        if i % 2 == 0:\n            if sum(weights[:i+1]) == sum(weights[i+1:]):\n                good_indices.append(i)\n        else:\n            if sum(weights[:i+1]) == sum(weights[i+1:]):\n                good_indices.append(i)\n\n    return str(len(good_indices))",
        "num_ids": 123
    },
    {
        "number": 4112,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def can_repost(i, j):\n        return i + 1 >= k and j - i >= k\n\n    def max_sum(i, j):\n        if i == j:\n            return a[i]\n        if can_repost(i, j):\n            return max(a[i], a[j]) + max_sum(i + 1, j)\n        return max_sum(i + 1, j)\n\n    return str(max_sum(0, n - 1))",
        "num_ids": 139
    },
    {
        "number": 4113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0 or n > 100:\n        return \"No\"\n\n    cakes = 0\n    doughnuts = 0\n\n    while cakes < n:\n        cakes += 4\n        doughnuts += 7\n\n    if cakes == n:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 82
    },
    {
        "number": 4114,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    coordinates = []\n    for i in range(n):\n        x, y, h = map(int, stdin.split()[1:4])\n        coordinates.append((x, y, h))\n    center_coordinates = max(coordinates, key=lambda x: (x[0] - center_coordinates[0], x[1] - center_coordinates[1]))\n    pyramid_height = max(coordinates, key=lambda x: abs(x[0] - center_coordinates[0]) + abs(x[1] - center_coordinates[1]))\n    return f\"{center_coordinates[0]} {center_coordinates[1]} {pyramid_height[2]}\"",
        "num_ids": 158
    },
    {
        "number": 4115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    min_hugs = n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if s[i:j] == s[i:j][::-1]:\n                min_hugs = min(min_hugs, j - i)\n    return str(min_hugs)",
        "num_ids": 94
    },
    {
        "number": 4116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 100:\n        return \"No\"\n\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == n:\n                return \"Yes\"\n\n    return \"No\"",
        "num_ids": 69
    },
    {
        "number": 4117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *lengths = map(int, stdin.split())\n    lengths = set(lengths)\n    if len(lengths)!= len(lengths.union(set(lengths))):\n        return \"No\"\n\n    def backtrack(i, j, k, count):\n        if count == 3:\n            return 1\n        if i > j or i > k or j > k:\n            return 0\n\n        return backtrack(i + 1, j, k, count) + backtrack(i, j + 1, k, count) + backtrack(i, j, k + 1, count)\n\n    return str(backtrack(1, 1, 1, 0))",
        "num_ids": 150
    },
    {
        "number": 4118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        A, B = map(int, stdin.split())\n        if 1 <= A <= 20 and 1 <= B <= 20:\n            result = A * B\n            print(result)\n        else:\n            print(-1)\n    except ValueError:\n        print(-1)",
        "num_ids": 65
    },
    {
        "number": 4119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x_list = list(map(int, stdin.split()))\n    x_list.sort()\n    visited = set(x_list)\n    moves = 0\n\n    for i in range(1, n + 1):\n        if i not in visited:\n            visited.add(i)\n            moves += 1\n            if moves == m:\n                break\n\n    return str(moves)",
        "num_ids": 96
    },
    {
        "number": 4120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    cities = list(map(int, stdin.split()))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.append(n)\n    cities.sort()\n    cities.append(1)\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities.",
        "num_ids": 1025
    },
    {
        "number": 4121,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def can_complete(a: list) -> bool:\n        height = a[0]\n        for i in range(1, n):\n            if a[i]!= height:\n                return False\n            height += 2\n        return True\n\n    if can_complete(a):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n    return \"\"\n",
        "num_ids": 103
    },
    {
        "number": 4122,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()[1:]))\n\n    def is_alive(hp: int) -> bool:\n        return 0 <= hp\n\n    def is_dead(hp: int) -> bool:\n        return not is_alive(hp)\n\n    def next_round(hp: int, d: List[int]) -> int:\n        return sum(d)\n\n    def battle(hp: int, d: List[int], rounds: int) -> int:\n        if rounds == 0:\n            return -1\n\n        next_hp = next_round(hp, d)\n        if is_dead(next_hp):\n            return rounds\n\n        return battle(next_hp, d, rounds - 1)\n\n    result = battle(H, d, n)\n    if result == -1:\n        print(-1)\n    else:\n        print(result)",
        "num_ids": 200
    },
    {
        "number": 4123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    two_grams = {}\n    for i in range(n - 1):\n        for j in range(i + 2, n):\n            two_gram = s[i:j + 1]\n            if two_gram in two_grams:\n                two_grams[two_gram] += 1\n            else:\n                two_grams[two_gram] = 1\n    max_count = 0\n    max_two_gram = \"\"\n    for two_gram, count in two_grams.items():\n        if count > max_count:\n            max_count = count\n            max_two_gram = two_gram\n    return max_two_gram",
        "num_ids": 162
    },
    {
        "number": 4124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s_len = len(s)\n    t_len = len(t)\n    moves = 0\n    while s_len > 0 and t_len > 0:\n        if s[0] == t[0]:\n            s = s[1:]\n            t = t[1:]\n            s_len -= 1\n            t_len -= 1\n        else:\n            s = s[1:]\n            s_len -= 1\n        moves += 1\n    return str(moves)",
        "num_ids": 116
    },
    {
        "number": 4125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    cities = list(map(int, stdin.split()))\n\n    def is_valid(city: int) -> bool:\n        return city!= X\n\n    valid_cities = list(filter(is_valid, cities))\n    if len(valid_cities) < N:\n        return \"IMPOSSIBLE\"\n\n    def dfs(start: int, depth: int) -> int:\n        if depth == D:\n            return start\n\n        if start == len(valid_cities):\n            return -1\n\n        result = dfs(start + 1, depth + 1)\n        if result!= -1:\n            return result\n\n        return dfs(start + 1, depth - 1)\n\n    D = 1\n    while dfs(0, D) == -1:\n        D += 1\n\n    return str(D)\n",
        "num_ids": 184
    },
    {
        "number": 4126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    N = len(S)\n    if N % 2 == 0 or N < 3 or N > 99:\n        return \"No\"\n\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    def is_strong_palindrome(S: str) -> bool:\n        for i in range(N // 2):\n            if not is_palindrome(S[i:i + 2]):\n                return False\n        for i in range(N // 2, N - 1):\n            if not is_palindrome(S[i:i + 2]):\n                return False\n        for i in range(N // 2 + 1, N):\n            if not is_palindrome(S[i:i + 2]):\n                return False\n        return True\n\n    if is_strong_palindrome(S):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 210
    },
    {
        "number": 4127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    result = a * b\n    return str(int(result))",
        "num_ids": 28
    },
    {
        "number": 4128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        if n == 1:\n            print(1)\n        elif n == 2:\n            print(2)\n        else:\n            a, b = 0, 0\n            for i in range(1, n // 2 + 1):\n                a += i\n                b += n - i\n            print(a + b)",
        "num_ids": 101
    },
    {
        "number": 4129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    cities = list(map(int, stdin.split()))\n    cities.remove(s)\n    cities.sort()\n    cities.append(n)\n\n    def bfs(city):\n        queue = [city]\n        visited = set()\n        visited.add(city)\n        while queue:\n            current = queue.pop(0)\n            for neighbor in cities[cities.index(current) + 1:]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append(neighbor)\n        return visited\n\n    def min_extra_roads(city):\n        visited = bfs(city)\n        return len(cities) - len(visited)\n\n    return str(min_extra_roads(s))",
        "num_ids": 170
    },
    {
        "number": 4130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def is_unique(weights: list) -> bool:\n        return len(weights) == len(set(weights))\n\n    def max_team_size(weights: list) -> int:\n        if len(weights) == 1:\n            return 1\n\n        max_size = 1\n        for i in range(1, len(weights)):\n            if weights[i] - weights[i - 1] > 1:\n                max_size += 1\n\n        return max_size\n\n    max_size = 0\n    for i in range(n):\n        if a[i] == 150001:\n            continue\n\n        weights = a[:i] + [a[i] + 1] + a[i + 1:]\n        if is_unique(weights) and max_team_size(weights) > max_size:\n            max_size = max_team_size(weights)\n\n    return str(max_size)",
        "num_ids": 232
    },
    {
        "number": 4131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prefectures = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        p, y = map(int, stdin.split())\n        prefectures[p].append(y)\n\n    id_numbers = []\n    for p in range(1, n + 1):\n        for y in sorted(prefectures[p]):\n            id_numbers.append(f\"{p:06d}{y:06d}\")\n\n    return \"\\n\".join(id_numbers)",
        "num_ids": 126
    },
    {
        "number": 4132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = list(a)\n    min_health = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > 0 and a[j] > 0:\n                a[i] -= min(a[i], a[j])\n                a[j] = 0\n                if a[i] < min_health:\n                    min_health = a[i]\n    return str(min_health)",
        "num_ids": 122
    },
    {
        "number": 4133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    golorp_name = stdin.strip()\n    if len(golorp_name) < 3 or len(golorp_name) > 10:\n        return \"false\"\n\n    jaws_shapes = {\n        \"0\": \"0\",\n        \"1\": \"01\",\n        \"2\": \"012\",\n        \"3\": \"0123\",\n        \"4\": \"01234\",\n        \"5\": \"012345\",\n        \"6\": \"0123456\",\n        \"7\": \"01234567\",\n        \"8\": \"012345678\",\n        \"9\": \"0123456789\",\n    }\n\n    def is_golorp_impossible(jaws_shape: str) -> bool:\n        return jaws_shape == \"0\"\n\n    def is_golorp_picky(jaws_shape: str) -> bool:\n        return jaws_shape == \"0123456789\"\n\n    def is_golorp_health_conscious(jaws_shape: str) -> bool:\n        return jaws_shape == \"0123456789\"\n\n    def is_golorp_silent(jaws_shape: str) -> bool:\n        return jaws_shape == \"0123456789\"\n\n    def is_golorp_feedable(jaws_shape: str) -> bool:\n        return jaws_shape!= \"0\"\n\n    def is_golorp_feedable_and_health_conscious(jaws_shape: str) -> bool:\n        return jaws_shape!= \"0\" and is_golorp_health_conscious(jaws_shape)\n\n    def is_golorp_feedable_and_silent(jaws_shape: str) -> bool:\n        return jaws_shape!= \"0\" and is_golorp_silent(jaws_shape)\n\n    def is_golorp_feedable_and_not_picky(jaws_shape: str) -> bool:\n        return jaws_shape!= \"0\" and not is_golorp_picky(jaws_shape)\n\n    def is_golorp_feedable_and_not_health_conscious(jaws_shape: str) -> bool:\n        return jaws_shape!= \"0\" and not is_golorp_health_conscious(jaws_shape)\n\n    def is_golorp_feedable_and_not_silent(jaws_shape: str) -> bool:\n        return jaws_shape!= \"0\" and not is_golorp_silent(jaws_shape)\n\n    def is_golorp_feedable_and_not_impossible(jaws_shape: str) -> bool:\n        return jaws_shape!= \"0\" and not is_golorp_impossible(jaws_shape)\n\n    def is_golorp_feedable_and_not_impossible_and_not_picky(jaws_shape: str) -> bool:\n        return jaws_shape!= \"0\" and not is_golorp_impossible(jaws_shape) and not is_golorp_picky(jaws_shape)\n\n    def is_golorp_feedable_and_not_impossible_and_not_health_conscious(jaws_shape: str) -> bool:\n        return jaws_shape!= \"0\" and not is_golorp_impossible(jaws_shape) and not is_golorp_health_conscious(jaws_shape)\n\n    def is_golorp_feedable_and_not_impossible_and_not_silent(jaws_shape: str) -> bool:\n        return jaws_shape!= \"0\" and not is_golorp_impossible(jaws_shape) and not is_golorp_silent(jaws_shape)\n\n    def is_golorp_feedable_and_not_impossible_and_not_picky_and_not_health_conscious(jaws_shape: str) -> bool:\n        return jaws_shape!= \"0\" and not is_golorp_impossible(jaws_shape) and not is_golorp_picky(jaws_shape) and not is_golorp_health_conscious(jaws_shape)\n\n    def is_golorp_feedable_and_not_impossible_and_not_picky_and_not_silent(jaws_shape: str) ->",
        "num_ids": 1025
    },
    {
        "number": 4134,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    grid = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    def dfs(i, j, path, xor_sum):\n        if i == n and j == m:\n            if xor_sum == k:\n                return 1\n            return 0\n\n        if i > n or j > m:\n            return 0\n\n        if i == 1 and j == 1:\n            return dfs(i + 1, j, path + [(i, j)], xor_sum)\n\n        if i == n and j == m:\n            return dfs(i, j + 1, path + [(i, j)], xor_sum)\n\n        if i == 1 and j == m:\n            return dfs(i + 1, j, path + [(i, j)], xor_sum)\n\n        if i == n and j == 1:\n            return dfs(i, j - 1, path + [(i, j)], xor_sum)\n\n        if i == 1 and j == 2:\n            return dfs(i + 1, j, path + [(i, j)], xor_sum)\n\n        if i == n and j == 2:\n            return dfs(i, j - 1, path + [(i, j)], xor_sum)\n\n        if i == 2 and j == 1:\n            return dfs(i - 1, j, path + [(i, j)], xor_sum)\n\n        if i == 2 and j == m:\n            return dfs(i - 1, j, path + [(i, j)], xor_sum)\n\n        if i == 2 and j == 2:\n            return dfs(i - 1, j, path + [(i, j)], xor_sum)\n\n        if i == 2 and j == 3:\n            return dfs(i - 1, j, path + [(i, j)], xor_sum)\n\n        if i == 3 and j == 2:\n            return dfs(i - 1, j, path + [(i, j)], xor_sum)\n\n        if i == 3 and j == 3:\n            return dfs(i - 1, j, path + [(i, j)], xor_sum)\n\n        if i == 3 and j == 4:\n            return dfs(i - 1, j, path + [(i, j)], xor_sum)\n\n        return dfs(i + 1, j, path + [(i, j)], xor_sum) + dfs(i, j + 1, path + [(i, j)], xor_sum) + dfs(i + 1, j, path + [(i, j)], xor_sum) + dfs(i, j - 1, path + [(i, j)], xor_sum) + dfs(i - 1, j, path + [(i, j)], xor_sum) + dfs(i - 1, j, path + [(i, j)], xor_sum) + dfs(i - 1, j, path + [(i, j)], xor_sum) + dfs(i - 1, j, path + [(i, j)], xor_sum) + dfs(i - 1, j, path + [(i, j)], xor_sum)\n\n    return str(dfs(1, 1, [], 0))\n",
        "num_ids": 737
    },
    {
        "number": 4135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = stdin.split()[1]\n    s = t\n    for d in range(n, 0, -1):\n        s = s[1:d] + s[:d][::-1]\n    return s",
        "num_ids": 59
    },
    {
        "number": 4136,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)",
        "num_ids": 22
    },
    {
        "number": 4137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def interpret(program: str) -> str:\n        memory = [0] * 30000\n        pointer = 0\n        for instruction in program:\n            if instruction.isalpha():\n                if instruction == '>':\n                    pointer += 1\n                elif instruction == '<':\n                    pointer -= 1\n                elif instruction == '+':\n                    memory[pointer] += 1\n                elif instruction == '-':\n                    memory[pointer] -= 1\n                elif instruction == '.':\n                    print(chr(memory[pointer]), end='')\n                elif instruction == ',':\n                    memory[pointer] = ord(stdin.read(1))\n            else:\n                memory[pointer] += int(instruction)\n        return ''.join(chr(x) for x in memory)\n\n    def generate_program(expression: str) -> str:\n        program = []\n        for i, char in enumerate(expression):\n            if char.isdigit():\n                program.append(char)\n            elif char in '+-':\n                program.append(char)\n                program.append(expression[i + 1])\n        return program\n\n    expression = stdin.readline().strip()\n    program = generate_program(expression)\n    return interpret(program)",
        "num_ids": 250
    },
    {
        "number": 4138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    queries = [int(x) for x in stdin.split()[1:]]\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    result = []\n\n    for query in queries:\n        result.append(sequence[query - 1])\n\n    return \" \".join(map(str, result))\n",
        "num_ids": 125
    },
    {
        "number": 4139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N + 1):\n        if i % 7 == 0 and i % 5 == 0 and i % 3 == 0:\n            count += 1\n    print(count)\n    return \"\"",
        "num_ids": 65
    },
    {
        "number": 4140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    N = len(S)\n    black_tiles = 0\n    white_tiles = 0\n\n    for i in range(N):\n        if S[i] == '0':\n            black_tiles += 1\n        else:\n            white_tiles += 1\n\n    if black_tiles == 0 or white_tiles == 0:\n        return '0'\n\n    if black_tiles == 1 and white_tiles == 1:\n        return '0'\n\n    if black_tiles == 1 and white_tiles == 2:\n        return '1'\n\n    if black_tiles == 2 and white_tiles == 1:\n        return '1'\n\n    if black_tiles == 2 and white_tiles == 2:\n        return '2'\n\n    if black_tiles == 3 and white_tiles == 1:\n        return '2'\n\n    if black_tiles == 3 and white_tiles == 2:\n        return '3'\n\n    if black_tiles == 4 and white_tiles == 1:\n        return '3'\n\n    if black_tiles == 4 and white_tiles == 2:\n        return '4'\n\n    if black_tiles == 5 and white_tiles == 1:\n        return '4'\n\n    if black_tiles == 5 and white_tiles == 2:\n        return '5'\n\n    if black_tiles == 6 and white_tiles == 1:\n        return '5'\n\n    if black_tiles == 6 and white_tiles == 2:\n        return '6'\n\n    if black_tiles == 7 and white_tiles == 1:\n        return '6'\n\n    if black_tiles == 7 and white_tiles == 2:\n        return '7'\n\n    if black_tiles == 8 and white_tiles == 1:\n        return '7'\n\n    if black_tiles == 8 and white_tiles == 2:\n        return '8'\n\n    if black_tiles == 9 and white_tiles == 1:\n        return '8'\n\n    if black_tiles == 9 and white_tiles == 2:\n        return '9'\n\n    return '0'",
        "num_ids": 468
    },
    {
        "number": 4141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    nums = list(map(int, stdin.split()[1:]))\n\n    even_divisible_by_3_or_5 = all(num % 2 == 0 and (num % 3 == 0 or num % 5 == 0) for num in nums)\n\n    if even_divisible_by_3_or_5:\n        return \"APPROVED\"\n    else:\n        return \"DENIED\"",
        "num_ids": 104
    },
    {
        "number": 4142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    n = len(S)\n\n    # Check if every character in an odd position is R, U, or D\n    for i in range(1, n, 2):\n        if S[i] not in ['R', 'U', 'D']:\n            return \"No\"\n\n    # Check if every character in an even position is L, U, or D\n    for i in range(0, n, 2):\n        if S[i] not in ['L', 'U', 'D']:\n            return \"No\"\n\n    return \"Yes\"",
        "num_ids": 124
    },
    {
        "number": 4143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n    train_time = 1\n    bus_time = 1\n    taxi_time = 1\n    airplane_time = 1\n    ship_time = 1\n\n    time_taken = 0\n    while True:\n        time_taken += 1\n        if time_taken % train_time == 0:\n            train_time += 1\n            if train_time > A:\n                train_time = 1\n        if time_taken % bus_time == 0:\n            bus_time += 1\n            if bus_time > B:\n                bus_time = 1\n        if time_taken % taxi_time == 0:\n            taxi_time += 1\n            if taxi_time > C:\n                taxi_time = 1\n        if time_taken % airplane_time == 0:\n            airplane_time += 1\n            if airplane_time > D:\n                airplane_time = 1\n        if time_taken % ship_time == 0:\n            ship_time += 1\n            if ship_time > E:\n                ship_time = 1\n\n        if time_taken == 7:\n            break\n\n    return str(time_taken)",
        "num_ids": 279
    },
    {
        "number": 4144,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    MOD = 10**9 + 7\n\n    def is_valid(seq: list) -> bool:\n        for i in range(len(seq)):\n            if seq[i] < 0 or seq[i] > 9:\n                return False\n            if seq[i] == 0 and i > 0:\n                return False\n            if seq[i] == 9 and i < len(seq) - 1:\n                return False\n        return True\n\n    def count_sequences(seq: list) -> int:\n        count = 0\n        for i in range(len(seq)):\n            for j in range(i + 1, len(seq)):\n                if seq[i] + seq[j] == 10:\n                    count += 1\n        return count\n\n    def count_valid_sequences(seq: list) -> int:\n        count = 0\n        for i in range(len(seq)):\n            for j in range(i + 1, len(seq)):\n                if seq[i] + seq[j] == 10:\n                    count += 1\n                    if is_valid([seq[i], seq[j]]):\n                        count += count_sequences([seq[i], seq[j]])\n        return count\n\n    def count_sequences_with_0(seq: list) -> int:\n        count = 0\n        for i in range(len(seq)):\n            if seq[i] == 0:\n                count += 1\n        return count\n\n    def count_sequences_with_9(seq: list) -> int:\n        count = 0\n        for i in range(len(seq)):\n            if seq[i] == 9:\n                count += 1\n        return count\n\n    def count_sequences_with_0_and_9(seq: list) -> int:\n        count = 0\n        for i in range(len(seq)):\n            if seq[i] == 0 or seq[i] == 9:\n                count += 1\n        return count\n\n    def count_sequences_with_0_9_and_10(seq: list) -> int:\n        count = 0\n        for i in range(len(seq)):\n            if seq[i] == 0 or seq[i] == 9 or seq[i] == 10:\n                count += 1\n        return count\n\n    def count_sequences_with_0_9_10_and_11(seq: list) -> int:\n        count = 0\n        for i in range(len(seq)):\n            if seq[i] == 0 or seq[i] == 9 or seq[i] == 10 or seq[i] == 11:\n                count += 1\n        return count\n\n    def count_sequences_with_0_9_10_11_and_12(seq: list) -> int:\n        count = 0\n        for i in range(len(seq)):\n            if seq[i] == 0 or seq[i] == 9 or seq[i] == 10 or seq[i] == 11 or seq[i] == 12:\n                count += 1\n        return count\n\n    def count_sequences_with_0_9_10_11_12_and_13(seq: list) -> int:\n        count = 0\n        for i in range(len(seq)):\n            if seq[i] == 0 or seq[i] == 9 or seq[i] == 10 or seq[i] == 11 or seq[i] == 12 or seq[i] == 13:\n                count += 1\n        return count\n\n    def count_sequences_with_0_9_10_11_12_13_and_14(seq: list) -> int:\n        count = 0\n        for i in range(len(seq)):\n            if seq[i] == 0 or seq[i] == 9 or seq[i] == 10 or seq[i] == 11 or seq[i] == 12 or seq[i] == 13 or seq[i] == 14:\n                count += 1\n        return count\n\n    def count_sequences_with_0_9_10_11_12_13_14_and_15(seq: list) -> int:\n        count = 0\n        for i in range(len(seq)):\n            if seq[i] == 0 or seq[i] == 9 or seq[i] == 10 or seq[i] == 11 or seq[i] == 12 or seq[",
        "num_ids": 1025
    },
    {
        "number": 4145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    min_prime = 2\n    while True:\n        if is_prime(min_prime):\n            return str(min_prime)\n        min_prime += 1\n\ndef",
        "num_ids": 47
    },
    {
        "number": 4146,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *v = map(int, stdin.split())\n    count = 0\n    for i in range(n - 2):\n        if v[i] == v[i + 2]:\n            count += 1\n    return str(count)",
        "num_ids": 56
    },
    {
        "number": 4147,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    l = list(map(int, stdin.split()[1:]))\n\n    def extension_magic(bamboo: int) -> int:\n        return 1\n\n    def shortening_magic(bamboo: int) -> int:\n        return 1\n\n    def composition_magic(bamboo1: int, bamboo2: int) -> int:\n        return 10\n\n    mp_needed = 0\n    for i in range(n):\n        mp_needed += extension_magic(l[i])\n        mp_needed += shortening_magic(l[i])\n        mp_needed += composition_magic(l[i], l[i])\n\n    mp_needed += extension_magic(a)\n    mp_needed += extension_magic(b)\n    mp_needed += extension_magic(c)\n\n    return str(mp_needed)\n",
        "num_ids": 198
    },
    {
        "number": 4148,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    s = ''.join(sorted(s))\n    result = ''\n    for i in range(len(s)):\n        if i == 0:\n            result += chr((ord(s[i]) - n) % 26 + ord('A'))\n        else:\n            result += chr((ord(s[i]) - n) % 26 + ord('A') - 1)\n    return result",
        "num_ids": 101
    },
    {
        "number": 4149,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    def prime_divisor(num: int) -> int:\n        for i in range(2, num):\n            if num % i == 0 and is_prime(i):\n                return i\n        return num\n\n    def shuffle_array(arr: list) -> list:\n        for i in range(len(arr)):\n            j = i + randint(0, len(arr) - 1 - i)\n            arr[i], arr[j] = arr[j], arr[i]\n        return arr\n\n    def append_prime(arr: list, prime: int) -> list:\n        arr.append(prime)\n        return arr\n\n    def append_divisor(arr: list, num: int) -> list:\n        divisor = prime_divisor(num)\n        if divisor == num:\n            arr.append(divisor)\n        else:\n            arr.append(divisor)\n            arr.append(num)\n        return arr\n\n    def append_prime_divisor(arr: list, num: int) -> list:\n        if is_prime(num):\n            arr = append_prime(arr, num)\n        else:\n            arr = append_divisor(arr, num)\n        return arr\n\n    def append_b(arr: list, b: list) -> list:\n        for i in range(len(b)):\n            if b[i] == 1:\n                arr = append_prime(arr, 2)\n            elif b[i] == 2:\n                arr = append_prime(arr, 3)\n            elif b[i] == 3:\n                arr = append_prime(arr, 5)\n            elif b[i] == 4:\n                arr = append_prime(arr, 7)\n            elif b[i] == 5:\n                arr = append_prime(arr, 11)\n            elif b[i] == 6:\n                arr = append_prime(arr, 13)\n            elif b[i] == 7:\n                arr = append_prime(arr, 17)\n            elif b[i] == 8:\n                arr = append_prime(arr, 19)\n            elif b[i] == 9:\n                arr = append_prime(arr, 23)\n            elif b[i] == 10:\n                arr = append_prime(arr, 29)\n            elif b[i] == 11:\n                arr = append_prime(arr, 31)\n            elif b[i] == 12:\n                arr = append_prime(arr, 37)\n            elif b[i] == 13:\n                arr = append_prime(arr, 41)\n            elif b[i] == 14:\n                arr = append_prime(arr, 43)\n            elif b[i] == 15:\n                arr = append_prime(arr, 47)\n            elif b[i] == 16:\n                arr = append_prime(arr, 53)\n            elif b[i] == 17:\n                arr = append_prime(arr, 59)\n            elif b[i] == 18:\n                arr = append_prime(arr, 61)\n            elif b[i] == 19:\n                arr = append_prime(arr, 67)\n            elif b[i] == 20:\n                arr = append_prime(arr, 71)\n            elif b[i] == 21:\n                arr = append_prime(arr, 73)\n            elif b[i] == 22:\n                arr = append_prime(arr, 79)\n            elif b[i] == 23:\n                arr = append_prime(arr, 83)\n            elif b[i] == 24:\n                arr = append_prime(arr, 89)\n            elif b[i] == 25:\n                arr = append_prime(arr, 97)\n            elif b[i] == 26:\n                arr = append_prime(arr, 101)\n            elif b[i] == 27:",
        "num_ids": 1025
    },
    {
        "number": 4150,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    first_team = []\n    second_team = []\n\n    for i in range(n):\n        if i not in first_team and i not in second_team:\n            first_team.append(i)\n        elif i not in first_team:\n            second_team.append(i)\n\n    while first_team or second_team:\n        if first_team:\n            max_skill = max(first_team, key=lambda x: a[x])\n            first_team.remove(max_skill)\n            first_team.extend(sorted(first_team, key=lambda x: a[x]))\n            first_team = first_team[:k]\n        if second_team:\n            max_skill = max(second_team, key=lambda x: a[x])\n            second_team.remove(max_skill)\n            second_team.extend(sorted(second_team, key=lambda x: a[x]))\n            second_team = second_team[:k]\n\n    return ''.join(str(1) if i in first_team else str(2) for i in range(n))",
        "num_ids": 267
    },
    {
        "number": 4151,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def is_monotonic(a: list) -> bool:\n        for i in range(1, len(a)):\n            if a[i] < a[i - 1]:\n                return False\n        return True\n\n    def monotonic_renumeration(a: list) -> list:\n        b = [0] * len(a)\n        for i in range(1, len(a)):\n            if a[i] == a[i - 1]:\n                b[i] = b[i - 1]\n            elif a[i] < a[i - 1]:\n                b[i] = b[i - 1] + 1\n            else:\n                b[i] = b[i - 1] + 1\n        return b\n\n    def count_monotonic_renumerations(a: list) -> int:\n        renumerations = set()\n        for i in range(len(a)):\n            renumerations.add(tuple(a[:i + 1]))\n        return len(renumerations)\n\n    monotonic_renumerations_count = count_monotonic_renumerations(a)\n    print(monotonic_renumerations_count % 998244353)\n\n    return \"\"\n",
        "num_ids": 306
    },
    {
        "number": 4152,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n\n    def is_good(a):\n        for i in range(len(a)):\n            for j in range(i + 1, len(a)):\n                if a[i] + a[j] == 2 ** len(bin(a[i] + a[j])[2:]):\n                    return True\n        return False\n\n    def min_elements_to_remove(a):\n        count = 0\n        for i in range(len(a)):\n            for j in range(i + 1, len(a)):\n                if a[i] + a[j] == 2 ** len(bin(a[i] + a[j])[2:]):\n                    count += 1\n                    break\n        return count\n\n    if is_good(a):\n        return str(min_elements_to_remove(a))\n    else:\n        return str(n)",
        "num_ids": 213
    },
    {
        "number": 4153,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    cubes = [0] * n\n    for i in range(n):\n        if stdin[i] == '0':\n            cubes[i] = 1\n        else:\n            cubes[i] = 0\n\n    max_removals = 0\n    for i in range(n - 1):\n        if cubes[i] == 1 and cubes[i + 1] == 0:\n            max_removals += 1\n            cubes[i] = 0\n            cubes[i + 1] = 0\n\n    return str(max_removals)",
        "num_ids": 136
    },
    {
        "number": 4154,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l, r = map(int, stdin.split())\n    l -= 1\n    r -= 1\n    count = 0\n    for i in range(n):\n        if i in l:\n            count += 1\n        if i in r:\n            count += 1\n    return str(count)",
        "num_ids": 78
    },
    {
        "number": 4155,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *h = map(int, stdin.split())\n    h = [0] * n + h\n    h.sort()\n    min_watering = 0\n    for i in range(1, n):\n        if h[i] - h[i - 1] > 1:\n            min_watering += 1\n    return str(min_watering)",
        "num_ids": 83
    },
    {
        "number": 4156,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def dfs(start: int, count: int) -> int:\n        if count == 0:\n            return 1\n        if count > w:\n            return 0\n\n        res = 0\n        for i in range(start, n):\n            res += dfs(i + 1, count + a[i])\n        return res\n\n    return str(dfs(0, 0))",
        "num_ids": 108
    },
    {
        "number": 4157,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sequence = list(map(int, stdin.split()[1:]))\n\n    for i in range(n - 1):\n        if sequence[i] % 3 == 0:\n            sequence[i] //= 3\n        else:\n            sequence[i] *= 2\n\n    return \" \".join(map(str, sequence))",
        "num_ids": 84
    },
    {
        "number": 4158,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = list(map(int, stdin.split()[1:]))\n\n    def is_power_of_two(x: int) -> bool:\n        return x!= 0 and (x & (x - 1)) == 0\n\n    def max_subset_size(points: List[int]) -> int:\n        max_size = 0\n        for i in range(1, len(points)):\n            for j in range(i):\n                if abs(points[i] - points[j]) == 2 ** max_size:\n                    max_size += 1\n        return max_size\n\n    max_size = max_subset_size(points)\n    subset = []\n    for i in range(max_size):\n        subset.append(points[i])\n\n    return str(max_size) + \" \" + \" \".join(map(str, subset))\n",
        "num_ids": 200
    },
    {
        "number": 4159,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    takahashi_cookies = 0\n    aoki_cookies = 0\n\n    for _ in range(k):\n        if takahashi_cookies < a:\n            takahashi_cookies += 1\n        elif aoki_cookies < b:\n            aoki_cookies += 1\n        else:\n            break\n\n    print(takahashi_cookies, aoki_cookies)\n    return \"\"",
        "num_ids": 99
    },
    {
        "number": 4160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    balance = 100\n    years = 0\n\n    while balance < x:\n        balance *= 1 + 0.01\n        years += 1\n\n    return str(years)",
        "num_ids": 48
    },
    {
        "number": 4161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    if K < 1 or K > 200:\n        return \"Invalid input\"\n\n    def gcd(a: int, b: int, c: int) -> int:\n        return max(a, b, c)\n\n    def sum_of_gcd(a: int, b: int, c: int) -> int:\n        return a + b + c\n\n    return str(sum_of_gcd(1, 1, 1) + sum_of_gcd(1, 1, 2) + sum_of_gcd(1, 2, 1) + sum_of_gcd(1, 2, 2) + sum_of_gcd(2, 1, 1) + sum_of_gcd(2, 1, 2) + sum_of_gcd(2, 2, 1) + sum_of_gcd(2, 2, 2))",
        "num_ids": 210
    },
    {
        "number": 4162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def f(m: int) -> int:\n        return sum(m % ai for ai in a)\n\n    max_f = max(f(i) for i in range(1, 10**6 + 1))\n    return str(max_f)",
        "num_ids": 86
    },
    {
        "number": 4163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    dice = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    doublets = 0\n    for i in range(n - 2):\n        if dice[i][0] == dice[i + 1][0] == dice[i + 2][0]:\n            doublets += 1\n\n    if doublets >= 3:\n        return 'Yes'\n    else:\n        return 'No'",
        "num_ids": 109
    },
    {
        "number": 4164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    if r < 1 or r > 100:\n        return \"Invalid input\"\n\n    area_of_circle_r = 3.14 * r ** 2\n    area_of_circle_1 = 3.14 * 1 ** 2\n\n    result = area_of_circle_r / area_of_circle_1\n    return str(int(result))",
        "num_ids": 93
    },
    {
        "number": 4165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *lengths = map(int, stdin.split())\n    if n < 3 or n > 10:\n        return \"No\"\n\n    longest_side = max(lengths)\n    if longest_side > sum(lengths[:-1]):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 67
    },
    {
        "number": 4166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n\n    def is_valid(num: int) -> bool:\n        for i in range(n):\n            if s[i]!= num % 10:\n                return False\n        return True\n\n    def find_smallest(start: int) -> int:\n        for num in range(start, 10 ** n):\n            if is_valid(num):\n                return num\n        return -1\n\n    for i in range(m):\n        if c[i] == 0:\n            return str(find_smallest(10 ** (n - 1)))\n        elif c[i] == 1:\n            return str(find_smallest(10 ** (n - 2)))\n        elif c[i] == 2:\n            return str(find_smallest(10 ** (n - 3)))\n        elif c[i] == 3:\n            return str(find_smallest(10 ** (n - 4)))\n        elif c[i] == 4:\n            return str(find_smallest(10 ** (n - 5)))\n        elif c[i] == 5:\n            return str(find_smallest(10 ** (n - 6)))\n        elif c[i] == 6:\n            return str(find_smallest(10 ** (n - 7)))\n        elif c[i] == 7:\n            return str(find_smallest(10 ** (n - 8)))\n        elif c[i] == 8:\n            return str(find_smallest(10 ** (n - 9)))\n        elif c[i] == 9:\n            return str(find_smallest(10 ** (n - 10)))\n\n    return \"-1\"\n",
        "num_ids": 418
    },
    {
        "number": 4167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            for c in range(1, n+1):\n                if a + b + c > n:\n                    break\n                if a % k == 0 and b % k == 0 and c % k == 0:\n                    count += 1\n    return str(count)",
        "num_ids": 101
    },
    {
        "number": 4168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = \"\"\n    while N > 0:\n        S = str(N % 2) + S\n        N //= 2\n    return S",
        "num_ids": 40
    },
    {
        "number": 4169,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    a_list = list(map(int, stdin.split()))\n    b_list = list(map(int, stdin.split()))\n\n    def buy_drinks(store_index: int, drinks_to_buy: int) -> int:\n        if drinks_to_buy == 0:\n            return 0\n        if store_index == n:\n            return float('inf')\n\n        if drinks_to_buy <= b_list[store_index]:\n            return min(buy_drinks(store_index + 1, drinks_to_buy - b_list[store_index]) + a_list[store_index],\n                       buy_drinks(store_index + 1, drinks_to_buy))\n        else:\n            return buy_drinks(store_index + 1, drinks_to_buy)\n\n    return str(buy_drinks(0, m))",
        "num_ids": 226
    },
    {
        "number": 4170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *heights = map(int, stdin.split())\n    max_moves = 0\n    current_height = heights[0]\n    for i in range(1, n):\n        if heights[i] > current_height:\n            max_moves += 1\n            current_height = heights[i]\n    return str(max_moves)",
        "num_ids": 80
    },
    {
        "number": 4171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def count_equal_numbers(a):\n        count = 0\n        for i in range(n):\n            if a[i] == 0:\n                continue\n            count += 1\n            for j in range(i + 1, n):\n                if a[j] == 0:\n                    continue\n                if a[i] == a[j]:\n                    count -= 1\n                    break\n        return count\n\n    def count_operations(a):\n        count = 0\n        for i in range(n):\n            if a[i] == 0:\n                continue\n            count += 1\n            for j in range(i + 1, n):\n                if a[j] == 0:\n                    continue\n                if a[i] == a[j]:\n                    count -= 1\n                    break\n        return count\n\n    def min_operations(a, k):\n        count = count_equal_numbers(a)\n        if count >= k:\n            return 0\n        if count + 1 >= k:\n            return 1\n        return 2\n\n    return str(min_operations(a, k))",
        "num_ids": 303
    },
    {
        "number": 4172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    moves = 0\n    equal_count = 0\n    min_val = min(a)\n    max_val = max(a)\n\n    while equal_count < k:\n        if equal_count == 0:\n            if min_val == max_val:\n                equal_count += 1\n            else:\n                if min_val < max_val:\n                    min_val += 1\n                else:\n                    max_val -= 1\n                moves += 1\n        else:\n            if min_val == max_val:\n                equal_count += 1\n            else:\n                if min_val < max_val:\n                    min_val += 1\n                else:\n                    max_val -= 1\n                moves += 1\n\n    return str(moves)",
        "num_ids": 187
    },
    {
        "number": 4173,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    queries = []\n    for _ in range(n):\n        queries.append(list(map(int, stdin.split())))\n    queries.sort(key=lambda x: x[0])\n    dp = [0] * (1001)\n    dp[0] = 0\n    for i in range(1, 1001):\n        dp[i] = dp[i - 1] + a * i + b * (i - 1)\n    result = []\n    for query in queries:\n        result.append(dp[query[0]] + query[1] * query[0] + query[2] * (query[0] - 1))\n    return \" \".join(map(str, result))",
        "num_ids": 176
    },
    {
        "number": 4174,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    l = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(n + 1):\n        if l[i] <= x:\n            count += 1\n    return str(count)",
        "num_ids": 66
    },
    {
        "number": 4175,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split('\\n')\n    n = int(words[0])\n    words = words[1:]\n    for i in range(n):\n        if len(words[i]) < 1 or len(words[i]) > 10:\n            return 'No'\n        if i > 0 and words[i][0]!= words[i-1][-1]:\n            return 'No'\n    return 'Yes'",
        "num_ids": 95
    },
    {
        "number": 4176,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return \"Invalid input\"\n\n    min_pieces = 0\n    for i in range(1, a + 1):\n        min_pieces += i\n\n    for i in range(1, b + 1):\n        min_pieces += i\n\n    return str(min_pieces)",
        "num_ids": 79
    },
    {
        "number": 4177,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    result = \"\"\n    for char in s:\n        result += \"x\"\n    print(result)\n    return result",
        "num_ids": 32
    },
    {
        "number": 4178,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *heights = map(int, stdin.split())\n    heights.sort()\n    for i in range(1, n):\n        if heights[i] <= heights[i - 1]:\n            return \"No\"\n    return \"Yes\"",
        "num_ids": 58
    },
    {
        "number": 4179,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = map(int, stdin.split())\n    b = list(map(int, stdin.split()[1:]))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split()[1+i*m:1+(i+1)*m])))\n    count = 0\n    for i in range(n):\n        if sum(a[i][j] * b[j] for j in range(m)) + c > 0:\n            count += 1\n    return str(count)",
        "num_ids": 125
    },
    {
        "number": 4180,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 10000:\n        return \"Invalid input\"\n\n    change = 0\n    for i in range(1, n + 1):\n        change += n // i\n\n    return str(change)",
        "num_ids": 60
    },
    {
        "number": 4181,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a, *b = map(int, stdin.split())\n    a = list(zip(a, b))\n    a.sort(key=lambda x: x[0])\n    max_monsters = 0\n    for i in range(n):\n        max_monsters += a[i][0]\n        if i < n - 1:\n            max_monsters += a[i + 1][0]\n    return str(max_monsters)",
        "num_ids": 104
    },
    {
        "number": 4182,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.split())\n    x_list = list(map(int, stdin.split()))\n    y_list = list(map(int, stdin.split()))\n\n    x_set = set(x_list)\n    y_set = set(y_list)\n\n    if len(x_set)!= len(x_list) or len(y_set)!= len(y_list):\n        return \"No War\"\n\n    if x < 100 and y > 100:\n        return \"No War\"\n\n    if x_list[0] < x < y or y_list[0] > y > x_list[-1]:\n        return \"War\"\n\n    return \"No War\"",
        "num_ids": 164
    },
    {
        "number": 4183,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *t = map(int, stdin.split())\n    t = [t[i] for i in range(n)]\n    t.sort()\n    t.append(360)\n    t.sort()\n    return str(t[n])",
        "num_ids": 57
    },
    {
        "number": 4184,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *weights = map(int, stdin.split())\n    weights.sort()\n    t = 1\n    s1 = 0\n    s2 = 0\n    for i in range(n):\n        if i <= t:\n            s1 += weights[i]\n        else:\n            s2 += weights[i]\n        if i == t:\n            t += 1\n    return str(abs(s1 - s2))",
        "num_ids": 93
    },
    {
        "number": 4185,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n\n    def cyclic_shift(column: int) -> None:\n        for i in range(n):\n            matrix[i][column], matrix[i][column + 1] = matrix[i][column + 1], matrix[i][column]\n\n    moves = 0\n    for column in range(m):\n        cyclic_shift(column)\n        moves += 1\n\n    return str(moves)",
        "num_ids": 122
    },
    {
        "number": 4186,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a = a[1:-1]\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a = a[1:-1]\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a = a[1:-1]\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a = a[1:-1]\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a = a[1:-1]\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a = a[1:-1]\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a = a[1:-1]\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a = a[1:-1]\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a = a[1:-1]\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a = a[1:-1]\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a = a[1:-1]\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a = a[1:-1]\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a = a[1:-1]\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a = a[1:-1]\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a = a[1:-1]\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a = a[1:-1]\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a = a[1:-1]\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a = a[1:-1]\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a = a[1:-1]\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a = a[1:-1]\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a = a[1:-1]\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a = a[1:-1]\n    a.sort()\n    a.append(a[-1] + 1)\n    a",
        "num_ids": 1025
    },
    {
        "number": 4187,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    rest_count = 0\n    working_count = 0\n    for i in range(n):\n        if a[i] == 1:\n            rest_count += 1\n        else:\n            working_count += 1\n\n        if rest_count > 0 and working_count > 0:\n            break\n\n    return str(max(rest_count, working_count))",
        "num_ids": 109
    },
    {
        "number": 4188,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    facts = stdin.split()\n    if len(facts) > 16:\n        return \"0\"\n    else:\n        return \"1\"",
        "num_ids": 32
    },
    {
        "number": 4189,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = []\n    for line in stdin.split('\\n'):\n        name, type_ = line.strip().split()\n        cheeses.append((name, type_))\n\n    soft_cheeses = [cheese for cheese in cheeses if cheese[1] =='soft']\n    hard_cheeses = [cheese for cheese in cheeses if cheese[1] == 'hard']\n\n    return str(len(soft_cheeses) + len(hard_cheeses))",
        "num_ids": 115
    },
    {
        "number": 4190,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:n+1]))\n    b = list(map(int, stdin.split()[n+1:]))\n    \n    # Reorder elements of b to obtain the lexicographically minimum possible array c\n    b.sort()\n    \n    # Calculate the lexicographically minimum possible array c\n    c = [0] * n\n    for i in range(n):\n        c[i] = (a[i] + b[i]) % n\n    \n    return''.join(map(str, c))",
        "num_ids": 130
    },
    {
        "number": 4191,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string to a list of digits\n    digits = [int(digit) for digit in stdin.split()]\n    \n    # Calculate the XOR of all the digits\n    xor = sum(digits) ^ len(digits)\n    \n    # Return the XOR as a string\n    return str(xor)",
        "num_ids": 62
    },
    {
        "number": 4192,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n\n    if T <= D:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 35
    },
    {
        "number": 4193,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_input(A: List[List[int]], N: int, b: List[int]) -> bool:\n        for i in range(len(A)):\n            for j in range(len(A[0])):\n                if A[i][j] not in b:\n                    return False\n        for i in range(len(A)):\n            for j in range(len(A[0])):\n                if A[i][j] == A[i][j + 1] or A[i][j] == A[i + 1][j]:\n                    return False\n        return True\n\n    def has_bingo(A: List[List[int]], N: int, b: List[int]) -> bool:\n        for i in range(len(A) - N + 1):\n            for j in range(len(A[0]) - N + 1):\n                if all(A[i + k][j + l] in b for k in range(N) for l in range(N)):\n                    return True\n        return False\n\n    A = [[int(x) for x in row.split()] for row in stdin.split('\\n')[:3]]\n    N = int(stdin.split('\\n')[3])\n    b = [int(x) for x in stdin.split('\\n')[4].split()]\n\n    if not is_valid_input(A, N, b):\n        return \"No\"\n    if has_bingo(A, N, b):\n        return \"Yes\"\n    return \"No\"",
        "num_ids": 334
    },
    {
        "number": 4194,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    days = 0\n    for i in range(m):\n        days += a[i]\n\n    if days > n:\n        return -1\n    else:\n        return days",
        "num_ids": 63
    },
    {
        "number": 4195,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0:\n        return str(1)\n    elif D == 1:\n        return str(100)\n    elif D == 2:\n        return str(1000)\n    else:\n        return \"Invalid input\"",
        "num_ids": 67
    },
    {
        "number": 4196,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    gcd = a[0]\n    for i in range(1, n):\n        gcd = max(gcd, a[i] % gcd)\n    return str(gcd)",
        "num_ids": 52
    },
    {
        "number": 4197,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = map(int, stdin.split())\n    A = set(A)\n    visited = set()\n    order = []\n\n    def dfs(node: int) -> None:\n        if node in visited:\n            return\n        visited.add(node)\n        order.append(node)\n        for neighbor in A - {node}:\n            dfs(neighbor)\n\n    for node in A:\n        dfs(node)\n\n    return \" \".join(map(str, order))",
        "num_ids": 101
    },
    {
        "number": 4198,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len(str(A * X + B * len",
        "num_ids": 1025
    },
    {
        "number": 4199,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    heights = list(map(int, stdin.split()))\n\n    ride_count = 0\n    for i in range(N):\n        if heights[i] >= K:\n            ride_count += 1\n\n    return str(ride_count)",
        "num_ids": 70
    },
    {
        "number": 4200,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    votes = list(map(int, stdin.split()))\n\n    total_votes = sum(votes)\n    popular_votes = sum(votes[:m])\n\n    if popular_votes >= total_votes // 4:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 73
    },
    {
        "number": 4201,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    grid = [list(row) for row in stdin.splitlines()]\n\n    def count_black_squares(rows, cols):\n        black_squares = 0\n        for i in range(H):\n            for j in range(W):\n                if (i in rows or j in cols) and grid[i][j] == '#':\n                    black_squares += 1\n        return black_squares\n\n    def count_choices(rows, cols):\n        choices = 0\n        for i in range(1, H + 1):\n            for j in range(1, W + 1):\n                if count_black_squares(rows | {i}, cols | {j}) == K:\n                    choices += 1\n        return choices\n\n    rows = set()\n    cols = set()\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                rows.add(i)\n                cols.add(j)\n\n    choices = 0\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if count_black_squares(rows | {i}, cols | {j}) == K:\n                choices += 1\n\n    return str(choices)",
        "num_ids": 284
    },
    {
        "number": 4202,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    i, j = 0, 1\n    while i < R:\n        if (i * j) % 2019 == 0:\n            return str(i)\n        i += 1\n        j += 1\n    return \"IMPOSSIBLE\"",
        "num_ids": 70
    },
    {
        "number": 4203,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S[0]!= 'A':\n        return 'WA'\n    if 'C' not in S[2:]:\n        return 'WA'\n    for i in range(3, len(S)-1):\n        if S[i].isupper():\n            return 'WA'\n    return 'AC'",
        "num_ids": 73
    },
    {
        "number": 4204,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, K = map(int, stdin.split())\n    S = str(S)\n    result = \"\"\n    for i in range(K):\n        S = S.replace(\"2\", \"22\")\n        S = S.replace(\"3\", \"333\")\n        S = S.replace(\"4\", \"4444\")\n        S = S.replace(\"5\", \"55555\")\n        S = S.replace(\"6\", \"666666\")\n        S = S.replace(\"7\", \"7777777\")\n        S = S.replace(\"8\", \"88888888\")\n        S = S.replace(\"9\", \"999999999\")\n        result += S[0]\n    return result",
        "num_ids": 175
    },
    {
        "number": 4205,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1:]))\n\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n\n    if p == list(range(1, N + 1)):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "num_ids": 109
    },
    {
        "number": 4206,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    max_divisible_by_3 = 0\n    current_divisible_by_3 = 0\n\n    for i in range(len(str(s))):\n        for j in range(i + 1, len(str(s)) + 1):\n            if str(s)[i] % 3 == 0 and str(s)[j] % 3 == 0:\n                current_divisible_by_3 += 1\n                if current_divisible_by_3 > max_divisible_by_3:\n                    max_divisible_by_3 = current_divisible_by_3\n                current_divisible_by_3 = 0\n\n    return str(max_divisible_by_3)\n",
        "num_ids": 170
    },
    {
        "number": 4207,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a, *b = map(int, stdin.split())\n    c = [a[i] * d + b[i] for i, d in enumerate(a)]\n    return str(max(0, c.count(0)))",
        "num_ids": 56
    },
    {
        "number": 4208,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = map(int, stdin.split())\n    l = list(l)\n    r = list(r)\n\n    def is_compatible(a: str, b: str) -> bool:\n        if a == b:\n            return True\n        if a == '?' or b == '?':\n            return True\n        return a == b[::-1]\n\n    def find_compatible_pairs(left_boots: list, right_boots: list) -> int:\n        pairs = []\n        for i in range(len(left_boots)):\n            for j in range(len(right_boots)):\n                if is_compatible(left_boots[i], right_boots[j]):\n                    pairs.append((i, j))\n        return len(pairs)\n\n    left_boots = [l[i] for i in range(n) if l[i]!= '?']\n    right_boots = [r[i] for i in range(n) if r[i]!= '?']\n\n    max_pairs = find_compatible_pairs(left_boots, right_boots)\n    pairs = []\n    for i in range(len(left_boots)):\n        for j in range(len(right_boots)):\n            if is_compatible(left_boots[i], right_boots[j]):\n                pairs.append((i, j))\n\n    for pair in pairs:\n        left_index, right_index = pair\n        left_boots[left_index], right_boots[right_index] = right_boots[right_index], left_boots[left_index]\n\n    for pair in pairs:\n        left_index, right_index = pair\n        left_boots[left_index], right_boots[right_index] = right_boots[right_index], left_boots[left_index]\n\n    for pair in pairs:\n        left_index, right_index = pair\n        left_boots[left_index], right_boots[right_index] = right_boots[right_index], left_boots[left_index]\n\n    for pair in pairs:\n        left_index, right_index = pair\n        left_boots[left_index], right_boots[right_index] = right_boots[right_index], left_boots[left_index]\n\n    for pair in pairs:\n        left_index, right_index = pair\n        left_boots[left_index], right_boots[right_index] = right_boots[right_index], left_boots[left_index]\n\n    for pair in pairs:\n        left_index, right_index = pair\n        left_boots[left_index], right_boots[right_index] = right_boots[right_index], left_boots[left_index]\n\n    for pair in pairs:\n        left_index, right_index = pair\n        left_boots[left_index], right_boots[right_index] = right_boots[right_index], left_boots[left_index]\n\n    for pair in pairs:\n        left_index, right_index = pair\n        left_boots[left_index], right_boots[right_index] = right_boots[right_index], left_boots[left_index]\n\n    for pair in pairs:\n        left_index, right_index = pair\n        left_boots[left_index], right_boots[right_index] = right_boots[right_index], left_boots[left_index]\n\n    for pair in pairs:\n        left_index, right_index = pair\n        left_boots[left_index], right_boots[right_index] = right_boots[right_index], left_boots[left_index]\n\n    for pair in pairs:\n        left_index, right_index = pair\n        left_boots[left_index], right_boots[right_index] = right_boots[right_index], left_boots[left_index]\n\n    for pair in pairs:\n        left_index, right_index = pair\n        left_boots[left_index], right_boots[right_index] = right_boots[right_index], left_boots[left_index]\n\n    for pair in pairs:\n        left_index, right_index = pair\n        left_boots[left_index], right_boots[right_index] = right_boots[right_index], left_boots[left_index]\n\n    for pair in pairs:\n        left_index, right_index = pair\n        left_boots[",
        "num_ids": 1025
    },
    {
        "number": 4209,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def find_blocks(a: list, l: int, r: int) -> list:\n        blocks = []\n        while l < r:\n            if l == r - 1:\n                blocks.append((l, r))\n                break\n            if a[l] + a[l + 1] == a[r]:\n                blocks.append((l, r))\n                l += 2\n            else:\n                r -= 1\n        return blocks\n\n    def find_max_blocks(a: list) -> int:\n        max_blocks = 0\n        for i in range(len(a)):\n            for j in range(i + 1, len(a)):\n                if i!= j and a[i] + a[i + 1] == a[j] + a[j + 1]:\n                    max_blocks = max(max_blocks, 1 + find_max_blocks(a[:i] + a[j + 1:] + a[i + 1:j]))\n        return max_blocks\n\n    blocks = find_blocks(a, 0, n - 1)\n    max_blocks = find_max_blocks(a)\n\n    if max_blocks > len(blocks):\n        return str(len(blocks))\n\n    for i in range(len(blocks)):\n        if i == max_blocks - 1:\n            print(f\"{blocks[i][0]} {blocks[i][1]}\")\n        else:\n            print(f\"{blocks[i][0]} {blocks[i][1]}\")\n\n    return \"\"\n",
        "num_ids": 362
    },
    {
        "number": 4210,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] % k == 0:\n                count += 1\n\n    return str(count)",
        "num_ids": 81
    },
    {
        "number": 4211,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    B = list(map(int, stdin.split()[1:]))\n\n    A = [0] * N\n    A[0] = B[0]\n    A[1] = max(B[0], B[1])\n\n    for i in range(2, N):\n        A[i] = max(A[i-1], A[i-2] + B[i-1])\n\n    return str(max(A))",
        "num_ids": 107
    },
    {
        "number": 4212,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    quadruples = []\n    for _ in range(q):\n        a, b, c, d = map(int, stdin.split())\n        quadruples.append((a, b, c, d))\n\n    def is_valid(a, b, c, d):\n        for i in range(q):\n            if (a, b, c) == quadruples[i]:\n                return False\n            if (a, b, d) == quadruples[i]:\n                return False\n            if (a, d, c) == quadruples[i]:\n                return False\n            if (b, a, c) == quadruples[i]:\n                return False\n            if (b, d, c) == quadruples[i]:\n                return False\n            if (d, a, c) == quadruples[i]:\n                return False\n        return True\n\n    def max_score(a):\n        max_score = 0\n        for i in range(n):\n            if a[i] - a[quadruples[i][1]] == quadruples[i][2]:\n                max_score += quadruples[i][3]\n        return max_score\n\n    max_score_a = max_score([1] * n)\n    max_score_b = max_score([m] * n)\n\n    return str(max(max_score_a, max_score_b))",
        "num_ids": 307
    },
    {
        "number": 4213,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n\n    max_diff = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            diff = abs(A[i] - A[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return str(max_diff)",
        "num_ids": 91
    },
    {
        "number": 4214,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    towns = []\n    for i in range(N):\n        x, y = map(int, stdin.split()[1:3])\n        towns.append((x, y))\n    towns.sort(key=lambda x: (x[0], x[1]))\n\n    def distance(town1: tuple, town2: tuple) -> float:\n        return ((town1[0] - town2[0]) ** 2 + (town1[1] - town2[1]) ** 2) ** 0.5\n\n    def paths(towns: list, visited: set) -> int:\n        if len(visited) == len(towns):\n            return 1\n        paths_count = 0\n        for i in range(len(towns)):\n            if i not in visited:\n                visited.add(i)\n                paths_count += paths(towns, visited)\n                visited.remove(i)\n        return paths_count\n\n    paths_count = paths(towns, set())\n    total_distance = sum(distance(towns[0], town) for town in towns[1:])\n    return str(total_distance / paths_count)",
        "num_ids": 268
    },
    {
        "number": 4215,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    total_horizontal_length = 0\n    for i in range(A // B):\n        total_horizontal_length += A - i * B\n    return str(total_horizontal_length)",
        "num_ids": 55
    },
    {
        "number": 4216,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    min_value = float('inf')\n\n    for a in range(1, N + 1):\n        for b in range(1, N + 1):\n            if a * b == N:\n                f = max(len(str(a)), len(str(b)))\n                min_value = min(min_value, f)\n\n    return str(min_value)",
        "num_ids": 89
    },
    {
        "number": 4217,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    likes = [list(map(int, stdin.split())) for _ in range(n)]\n    likes = [sorted(set(likes[i][:k])) for i, k in enumerate(likes)]\n    return str(len(set.intersection(*likes)))",
        "num_ids": 70
    },
    {
        "number": 4218,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    odd_count = 0\n    for i in range(1, N+1, 2):\n        odd_count += 1\n    probability = odd_count / N\n    return f\"{probability:.6f}\"",
        "num_ids": 54
    },
    {
        "number": 4219,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *testimonies = map(int, stdin.split())\n    honest_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if testimonies[i][j] == 1 and testimonies[j][i] == 1:\n                honest_count += 1\n                break\n    return str(honest_count)",
        "num_ids": 89
    },
    {
        "number": 4220,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.split())\n    s = s.lower()\n    if len(s) <= k:\n        return s\n    else:\n        return s[:k] + \"...\"",
        "num_ids": 45
    },
    {
        "number": 4221,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S[-1] == 'e':\n        plural_form = S +'s'\n    else:\n        plural_form = S + 'es'\n    return plural_form",
        "num_ids": 46
    },
    {
        "number": 4222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    a = [list(map(int, stdin.split())) for _ in range(k)]\n\n    snakes = [0] * n\n    for i in range(k):\n        for j in range(d[i]):\n            snakes[a[i][j] - 1] += 1\n\n    victims = 0\n    for snake in snakes:\n        if snake == 0:\n            victims += 1\n\n    return str(victims)",
        "num_ids": 128
    },
    {
        "number": 4223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    slimes = [s[i] for i in range(n)]\n    count = 1\n    for i in range(1, n):\n        if slimes[i] == slimes[i - 1]:\n            count += 1\n        else:\n            count = 1\n    return str(count)",
        "num_ids": 83
    },
    {
        "number": 4224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    max_operations = 0\n    for i in range(1, n + 1):\n        if a[i - 1] % 2 == 0:\n            a[i - 1] //= 2\n            max_operations += 1\n        else:\n            a[i - 1] *= 3\n            max_operations += 1\n    return str(max_operations)",
        "num_ids": 99
    },
    {
        "number": 4225,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n\n    # Calculate the maximum possible sum of the numbers written on the cards chosen\n    max_sum = max(A * 1, B * 0, C * -1)\n\n    # Calculate the maximum possible sum of the numbers written on the remaining cards\n    remaining_sum = max(A * 1, B * 0, C * -1) - K\n\n    # Calculate the maximum possible sum of the numbers written on the remaining cards\n    max_remaining_sum = max(remaining_sum, 0)\n\n    return str(max_sum) if max_remaining_sum == 0 else str(max_remaining_sum)",
        "num_ids": 151
    },
    {
        "number": 4226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if X <= 2 * Y:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 36
    },
    {
        "number": 4227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    visited = [False] * (n + 1)\n    paths = 0\n    def dfs(vertex):\n        nonlocal paths\n        if visited[vertex]:\n            return\n        visited[vertex] = True\n        for neighbor in graph[vertex]:\n            if not visited[neighbor]:\n                dfs(neighbor)\n        paths += 1\n    dfs(1)\n    return str(paths)",
        "num_ids": 147
    },
    {
        "number": 4228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    apples = [L + i - 1 for i in range(1, N + 1)]\n    min_diff = float('inf')\n    for i in range(N - 1):\n        diff = abs(apples[i] - apples[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n    return str(min_diff)",
        "num_ids": 98
    },
    {
        "number": 4229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a_1 = 1\n    a_2 = 2\n    fizz_count = 0\n    buzz_count = 0\n    fizz_buzz_count = 0\n\n    while a_2 <= N:\n        if a_2 % 3 == 0 and a_2 % 5 == 0:\n            print(\"FizzBuzz\")\n            fizz_buzz_count += 1\n        elif a_2 % 3 == 0:\n            print(\"Fizz\")\n            fizz_count += 1\n        elif a_2 % 5 == 0:\n            print(\"Buzz\")\n            buzz_count += 1\n        else:\n            print(a_2)\n\n        a_1, a_2 = a_2, a_1 + a_2\n\n    return str(fizz_count + buzz_count + fizz_buzz_count)",
        "num_ids": 199
    },
    {
        "number": 4230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split())\n    p = list(map(int, stdin.split()[1:]))\n\n    p.sort()\n    p.append(X)\n\n    min_diff = float('inf')\n    nearest = None\n\n    for i in range(len(p) - 1):\n        diff = abs(p[i] - X)\n        if diff < min_diff:\n            min_diff = diff\n            nearest = p[i]\n\n    return str(nearest)",
        "num_ids": 108
    },
    {
        "number": 4231,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    h, w = map(int, stdin.split())\n\n    white_cells = H * W\n    black_cells = (H - h) * (W - w)\n\n    return str(white_cells - black_cells)",
        "num_ids": 63
    },
    {
        "number": 4232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    for i in range(1, 10**9):\n        if sum(1 for x in a if x <= i) >= k:\n            return str(i)\n    return \"-1\"",
        "num_ids": 77
    },
    {
        "number": 4233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0].split())\n    grid = [list(row) for row in stdin.split()[1:]]\n\n    def is_valid(x, y, s):\n        return 0 < s <= n and 0 < x <= n and 0 < y <= m\n\n    def draw_star(x, y, s):\n        for i in range(s):\n            for j in range(s):\n                if i == 0 or i == s - 1 or j == 0 or j == s - 1:\n                    grid[x + i][y + j] = '*'\n\n    def draw_grid():\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    draw_star(i, j, 1)\n                elif grid[i][j] == '.':\n                    pass\n                else:\n                    return False\n        return True\n\n    def count_stars():\n        count = 0\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    count += 1\n        return count\n\n    if not draw_grid():\n        return \"-1\"\n\n    k = count_stars()\n    if k > n * m:\n        return \"-1\"\n\n    result = []\n    for i in range(k):\n        x, y, s = map(int, input().split())\n        if is_valid(x, y, s):\n            draw_star(x - 1, y - 1, s)\n            result.append(f\"{x - 1} {y - 1} {s}\")\n\n    return \"\\n\".join(result)\n",
        "num_ids": 368
    },
    {
        "number": 4234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    good = True\n    for i in range(1, n, 2):\n        if s[i] == s[i - 1]:\n            good = False\n            break\n\n    if good:\n        return \"0\" + s\n    else:\n        k = 0\n        for i in range(1, n, 2):\n            if s[i] == s[i - 1]:\n                k += 1\n                if k == 2:\n                    break\n        return str(k) + s",
        "num_ids": 126
    },
    {
        "number": 4235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, stdin.split())) for _ in range(m)]\n    graph = [[] for _ in range(n + 1)]\n\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    visited = [False] * (n + 1)\n    visited[1] = True\n\n    def dfs(u):\n        nonlocal visited\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                dfs(v)\n\n    for u in range(2, n + 1):\n        if not visited[u]:\n            dfs(u)\n\n    for u in range(2, n + 1):\n        if not visited[u]:\n            return \"NO\"\n\n    for u in range(2, n + 1):\n        for v in graph[u]:\n            if not visited[v]:\n                return \"NO\"\n\n    result = []\n    for u in range(2, n + 1):\n        for v in graph[u]:\n            if visited[v]:\n                result.append(str(u - 1) + str(v - 1))\n\n    return \"YES\" + \"\".join(result)\n",
        "num_ids": 279
    },
    {
        "number": 4236,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    points = list(range(1, m+1))\n    result = []\n    for point in points:\n        if not any(point in segment for segment in segments):\n            result.append(point)\n    result.sort()\n    return f\"{len(result)}\\n{' '.join(map(str, result))}\"",
        "num_ids": 116
    },
    {
        "number": 4237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % c!= 0 and i % d!= 0:\n            count += 1\n    return str(count)",
        "num_ids": 62
    },
    {
        "number": 4238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 31
    },
    {
        "number": 4239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"0\"\n\n    yen_count = 0\n    yen_amount = 1\n    while yen_amount <= N:\n        yen_count += 1\n        yen_amount *= 10\n\n    return str(yen_count)",
        "num_ids": 70
    },
    {
        "number": 4240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if s == t:\n        return \"Yes\"\n    else:\n        n = len(s)\n        for i in range(n):\n            s = s[-i:] + s[:-i]\n            if s == t:\n                return \"Yes\"\n        return \"No\"",
        "num_ids": 67
    },
    {
        "number": 4241,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    min_changes = float('inf')\n    for i in range(len(S)):\n        if S[i:i+len(T)] == T:\n            min_changes = min(min_changes, i+1)\n    return str(min_changes)",
        "num_ids": 67
    },
    {
        "number": 4242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    count = 0\n    largest = 0\n\n    for i in range(A, B + 1):\n        if i % A == 0 and i % B == 0:\n            count += 1\n            if count == K:\n                largest = i\n\n    return str(largest)",
        "num_ids": 76
    },
    {
        "number": 4243,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    coins = [500, 100, 50, 10, 5, 1]\n    happiness_points = [0, 1000, 500, 100, 50, 10]\n\n    max_happiness_points = 0\n    for coin in coins:\n        if X >= coin:\n            X -= coin\n            max_happiness_points += happiness_points[coins.index(coin)]\n\n    return str(max_happiness_points)",
        "num_ids": 124
    },
    {
        "number": 4244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *x = map(int, stdin.split())\n    x = sorted(x)\n    total_stamina = 0\n    for i in range(n):\n        total_stamina += (x[i] - x[0]) ** 2\n    return str(total_stamina)",
        "num_ids": 69
    },
    {
        "number": 4245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    min_strips = 0\n    current_strip = 0\n    current_sockets = 0\n\n    while current_sockets < a:\n        current_sockets += 1\n        current_strip += 1\n        if current_strip == b:\n            min_strips += 1\n            current_strip = 0\n            current_sockets = 0\n\n    return str(min_strips)",
        "num_ids": 97
    },
    {
        "number": 4246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    count = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            count += 1\n    return str(count)",
        "num_ids": 45
    },
    {
        "number": 4247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *p = map(int, stdin.split())\n    count = 0\n    for i in range(1, n - 1):\n        if p[i] < min(p[i - 1], p[i + 1]) and p[i] < p[i - 1] and p[i] < p[i + 1]:\n            count += 1\n    return str(count)",
        "num_ids": 93
    },
    {
        "number": 4248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = []\n    for _ in range(n):\n        x, y = map(float, stdin.split()[1:])\n        points.append((x, y))\n    points.sort(key=lambda x: x[0])\n    x_min, x_max = points[0][0], points[-1][0]\n    y_min, y_max = points[0][1], points[-1][1]\n    x_range = x_max - x_min\n    y_range = y_max - y_min\n    if x_range == 0 or y_range == 0:\n        return \"0.00\"\n    x_center = (x_min + x_max) / 2\n    y_center = (y_min + y_max) / 2\n    theta = 0\n    for i in range(n):\n        x, y = points[i]\n        dx = x - x_center\n        dy = y - y_center\n        theta += math.atan2(dy, dx)\n    theta = theta / n\n    return f\"{theta:.2f}\"",
        "num_ids": 251
    },
    {
        "number": 4249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def can_write(a: list, k: int) -> bool:\n        for i in range(k):\n            if a[i] > 0:\n                return True\n        return False\n\n    def min_days(a: list, k: int) -> int:\n        days = 0\n        for i in range(k):\n            if a[i] > 0:\n                days += 1\n            else:\n                break\n        return days\n\n    if can_write(a, m):\n        return str(min_days(a, m))\n    else:\n        return \"-1\"",
        "num_ids": 151
    },
    {
        "number": 4250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    t = []\n    for i in range(k):\n        t.append(s.pop(0))\n    return \" \".join(map(str, t))",
        "num_ids": 62
    },
    {
        "number": 4251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n\n    def dfs(i, j, k, s):\n        if i == n - 1:\n            return k\n\n        if a[i][j] == 0:\n            return dfs(i + 1, j, k, s)\n\n        if a[i][j] == a[i + 1][j]:\n            return dfs(i + 1, j, k, s)\n\n        if a[i][j] == a[i][j + 1]:\n            return dfs(i + 1, j + 1, k, s)\n\n        if a[i][j] == a[i + 1][j + 1]:\n            return dfs(i + 1, j + 1, k, s)\n\n        return dfs(i + 1, j, k + 1, s + [a[i][j]])\n\n    max_k = 0\n    for i in range(n):\n        for j in range(m):\n            max_k = max(max_k, dfs(0, j, 0, []))\n\n    return str(max_k)\n",
        "num_ids": 273
    },
    {
        "number": 4252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    file_name = stdin.split()[1]\n\n    forbidden_substring = \"xxx\"\n    if forbidden_substring in file_name:\n        return \"0\"\n\n    min_removal = 0\n    for i in range(n):\n        if file_name[i:i+3] == forbidden_substring:\n            min_removal = i + 1\n            break\n\n    return str(min_removal)",
        "num_ids": 100
    },
    {
        "number": 4253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r ** 2\n    return str(area)",
        "num_ids": 24
    },
    {
        "number": 4254,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    sheep, wolves = map(int, stdin.split())\n    if wolves >= sheep:\n        return \"unsafe\"\n    else:\n        return \"safe\"",
        "num_ids": 37
    },
    {
        "number": 4255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    sides = list(map(int, stdin.split()))\n    a, b, c = sides\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return str(int(area))",
        "num_ids": 71
    },
    {
        "number": 4256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    if a > c:\n        a, c = c, a\n    if b > c:\n        b, c = c, b\n    return str(a // b)",
        "num_ids": 66
    },
    {
        "number": 4257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = A * B\n    return str(result)",
        "num_ids": 26
    },
    {
        "number": 4258,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = map(int, stdin.split())\n    total_biscuits = 0\n    current_time = 0\n\n    while current_time <= t + 0.5:\n        total_biscuits += b\n        current_time += a\n\n    return str(total_biscuits)",
        "num_ids": 69
    },
    {
        "number": 4259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    if a % k == 0 and b % k == 0:\n        return \"OK\"\n    else:\n        return \"NG\"",
        "num_ids": 45
    },
    {
        "number": 4260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    t = T // X\n    return str(t)",
        "num_ids": 26
    },
    {
        "number": 4261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if B > A:\n        return \"0\"\n    elif B == A:\n        return \"1\"\n    else:\n        return str(max(0, C - B))",
        "num_ids": 53
    },
    {
        "number": 4262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1].split()))\n    q = list(map(int, stdin.split()[2].split()))\n\n    def is_lexicographically_smaller(a: list, b: list) -> bool:\n        for i in range(len(a)):\n            if a[i] > b[i]:\n                return True\n            elif a[i] < b[i]:\n                return False\n        return len(a) < len(b)\n\n    count = 0\n    for i in range(n):\n        if is_lexicographically_smaller(p, q):\n            count += 1\n\n    return str(count)",
        "num_ids": 156
    },
    {
        "number": 4263,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    n = len(S)\n    max_len = 0\n    max_substring = \"\"\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = S[i:j]\n            if all(c in \"ACGT\" for c in substring):\n                if len(substring) > max_len:\n                    max_len = len(substring)\n                    max_substring = substring\n\n    return str(max_len)",
        "num_ids": 110
    },
    {
        "number": 4264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N+1):\n        if len(str(i)) % 2!= 0:\n            count += 1\n    return str(count)",
        "num_ids": 51
    },
    {
        "number": 4265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s_len = len(s)\n    t_len = len(t)\n    min_operations = float('inf')\n\n    for i in range(s_len):\n        if s[i]!= t[i]:\n            min_operations = min(min_operations, s_len - i)\n\n    for i in range(t_len):\n        if s[i]!= t[i]:\n            min_operations = min(min_operations, t_len - i)\n\n    return str(min_operations)",
        "num_ids": 121
    },
    {
        "number": 4266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    black_stones = set()\n    white_stones = set()\n\n    for i in range(-1000000, 1000001):\n        if i == x:\n            black_stones.add(i)\n        else:\n            white_stones.add(i)\n\n    black_stones = sorted(list(black_stones))\n    white_stones = sorted(list(white_stones))\n\n    result = []\n    for i in range(len(black_stones)):\n        for j in range(i + 1, len(black_stones) + 1):\n            for k in range(j + 1, len(black_stones) + 1):\n                if k - j >= k - i:\n                    result.append(black_stones[i])\n                    result.append(black_stones[j - 1])\n                    result.append(black_stones[k - 2])\n\n    return \" \".join(map(str, result))",
        "num_ids": 223
    },
    {
        "number": 4267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 29
    },
    {
        "number": 4268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    points = []\n    for _ in range(n):\n        point = list(map(int, stdin.split()))\n        points.append(point)\n    pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance = sum((points[i][k] - points[j][k]) ** 2 for k in range(d)) ** 0.5\n            if distance.is_integer():\n                pairs += 1\n    return str(pairs)",
        "num_ids": 124
    },
    {
        "number": 4269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if len(S)!= 4:\n        return \"Bad\"\n\n    for i in range(len(S) - 1):\n        if S[i] == S[i + 1]:\n            return \"Bad\"\n\n    return \"Good\"",
        "num_ids": 60
    },
    {
        "number": 4270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    values = list(map(int, stdin.split()[1:]))\n\n    max_value = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            value = (values[i] + values[j]) / 2\n            if value > max_value:\n                max_value = value\n\n    return str(max_value)",
        "num_ids": 94
    },
    {
        "number": 4271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a, *b, *c = map(int, stdin.split())\n    a = set(a)\n    b = set(b)\n    c = set(c)\n\n    satisfaction_points = 0\n    for i in range(n):\n        if i + 1 < n:\n            satisfaction_points += b.pop()\n            satisfaction_points += c.pop()\n        satisfaction_points += a.pop()\n\n    return str(satisfaction_points)",
        "num_ids": 106
    },
    {
        "number": 4272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    S = S.upper()\n    count = 0\n    for i in range(N - 2):\n        if S[i:i + 3] == 'ABC':\n            count += 1\n    return str(count)",
        "num_ids": 63
    },
    {
        "number": 4273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    people = stdin.split()[1:]\n    people.sort()\n    count = 0\n    for i in range(n - 2):\n        if people[i][0] == people[i + 1][0] or people[i][0] == people[i + 2][0]:\n            continue\n        for j in range(i + 3, n):\n            if people[i][0] == people[j][0]:\n                break\n            if people[i][0] in \"MARCH\" and people[j][0] in \"MARCH\":\n                count += 1\n            elif people[i][0] in \"MARR\" and people[j][0] in \"MARR\":\n                count += 1\n            elif people[i][0] in \"MARR\" and people[j][0] in \"MARR\":\n                count += 1\n            elif people[i][0] in \"MARR\" and people[j][0] in \"MARR\":\n                count += 1\n            elif people[i][0] in \"MARR\" and people[j][0] in \"MARR\":\n                count += 1\n    return str(count)",
        "num_ids": 265
    },
    {
        "number": 4274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m >= n:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 33
    },
    {
        "number": 4275,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 42
    },
    {
        "number": 4276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    costs = []\n    times = []\n    for _ in range(n):\n        cost, time = map(int, stdin.split())\n        costs.append(cost)\n        times.append(time)\n\n    costs.sort()\n    times.sort()\n\n    for i in range(n):\n        if times[i] <= t:\n            return str(costs[i])\n\n    return \"TLE\"\n",
        "num_ids": 98
    },
    {
        "number": 4277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    train_cost = n * a\n    taxi_cost = b\n    min_cost = min(train_cost, taxi_cost)\n    return str(min_cost)",
        "num_ids": 55
    },
    {
        "number": 4278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    strings = stdin.split()[1:]\n    pairs = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_anagram(strings[i], strings[j]):\n                pairs += 1\n\n    return str(pairs)\n\n\ndef",
        "num_ids": 76
    },
    {
        "number": 4279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    queries = [int(x) for x in stdin.split()[1:]]\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    result = []\n\n    for query in queries:\n        result.append(sequence[query - 1])\n\n    return \" \".join(map(str, result))\n",
        "num_ids": 125
    },
    {
        "number": 4280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    roads = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    graph = [[] for _ in range(n + 1)]\n    for x, y in roads:\n        graph[x].append(y)\n        graph[y].append(x)\n\n    def dfs(u, visited):\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                dfs(v, visited)\n\n    def bfs(u, visited):\n        queue = [u]\n        visited[u] = True\n        while queue:\n            v = queue.pop(0)\n            for w in graph[v]:\n                if not visited[w]:\n                    visited[w] = True\n                    queue.append(w)\n\n    def count_good_cities(visited):\n        count = 0\n        for i in range(1, n + 1):\n            if not visited[i]:\n                count += 1\n        return count\n\n    def is_good(visited):\n        for i in range(1, n + 1):\n            if not visited[i]:\n                return False\n        return True\n\n    def min_r(visited):\n        for i in range(1, n + 1):\n            if not visited[i]:\n                return i\n        return n\n\n    visited = [False] * (n + 1)\n    for i in range(1, n + 1):\n        if not visited[i]:\n            dfs(i, visited)\n\n    visited = [False] * (n + 1)\n    for i in range(1, n + 1):\n        if not visited[i]:\n            bfs(i, visited)\n\n    good_cities = count_good_cities(visited)\n    if good_cities > k:\n        return \"IMPOSSIBLE\"\n\n    min_r_visited = [False] * (n + 1)\n    for i in range(1, n + 1):\n        if not min_r_visited[i]:\n            min_r_visited[i] = visited[i]\n\n    min_r_good_cities = count_good_cities(min_r_visited)\n    if min_r_good_cities > k:\n        return \"IMPOSSIBLE\"\n\n    min_r_visited[1] = True\n    min_r_visited[2] = True\n    min_r_visited[3] = True\n\n    min_r_good_cities = count_good_cities(min_r_visited)\n    if min_r_good_cities > k:\n        return \"IMPOSSIBLE\"\n\n    min_r_visited[4] = True\n    min_r_visited[5] = True\n    min_r_visited[6] = True\n    min_r_visited[7] = True\n    min_r_visited[8] = True\n    min_r_visited[9] = True\n\n    min_r_good_cities = count_good_cities(min_r_visited)\n    if min_r_good_cities > k:\n        return \"IMPOSSIBLE\"\n\n    min_r_visited[10] = True\n\n    min_r_good_cities = count_good_cities(min_r_visited)\n    if min_r_good_cities > k:\n        return \"IMPOSSIBLE\"\n\n    min_r_visited[11] = True\n    min_r_visited[12] = True\n    min_r_visited[13] = True\n    min_r_visited[14] = True\n    min_r_visited[15] = True\n    min_r_visited[16] = True\n    min_r_visited[17] = True\n    min_r_visited[18] = True\n    min_r_visited[19] = True\n    min_r_visited[20] = True\n    min_r_visited[21] = True\n    min_r_visited[22] = True\n    min_r_visited[23] = True\n    min_r_visited[24] = True\n    min_r_visited[25] = True\n    min_r_visited[26] = True\n    min_r_visited[27] = True\n    min_r_visited[28] = True\n    min_r_visited[29] = True\n    min_r_visited[30] = True\n    min_r_visited[31] = True\n    min_r_visited[32] = True\n    min_r_visited[33] = True\n    min_r_visited[34] = True\n    min_r_visited[3",
        "num_ids": 1025
    },
    {
        "number": 4281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n\n    x.sort()\n    x.append(n + 1)\n\n    occupied_houses = 1\n    min_occupied_houses = 1\n    max_occupied_houses = 1\n\n    for i in range(1, n):\n        if x[i] - x[i - 1] == 1:\n            occupied_houses += 1\n            min_occupied_houses = min(min_occupied_houses, occupied_houses)\n            max_occupied_houses = max(max_occupied_houses, occupied_houses)\n        else:\n            occupied_houses = 1\n\n    return f\"{min_occupied_houses} {max_occupied_houses}\"\n",
        "num_ids": 190
    },
    {
        "number": 4282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [list(map(int, stdin.split()[1:])) for _ in range(n)]\n    p = [i for i in range(1, n + 1)]\n    x = p[0]\n    for i in range(n):\n        a[i][0], a[i][1] = a[i][1], a[i][0]\n        p[i] = p[i + 1]\n        if i < n - 1:\n            x = p[i + 1]\n        else:\n            x = p[0]\n    return \" \".join(map(str, p))",
        "num_ids": 148
    },
    {
        "number": 4283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    a.sort()\n    left, right = 0, n - 1\n    max_students = 0\n\n    while left < right:\n        if a[left] - a[right] <= 5:\n            max_students += 2\n            left += 1\n            right -= 1\n        elif a[left] - a[right] > 5:\n            max_students += 1\n            left += 1\n        else:\n            right -= 1\n\n    return str(max_students)",
        "num_ids": 133
    },
    {
        "number": 4284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split()[0])\n    for _ in range(queries):\n        k, n, a, b = map(int, stdin.split()[1:])\n        if k >= a and k >= b:\n            print(-1)\n        else:\n            turns = 0\n            while k > 0:\n                turns += 1\n                if k >= a:\n                    k -= a\n                elif k >= b:\n                    k -= b\n                else:\n                    break\n            print(turns)",
        "num_ids": 105
    },
    {
        "number": 4285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    MOD = 10**9 + 7\n\n    def count_subsequences(s: str) -> int:\n        dp = [[0] * 3 for _ in range(len(s) + 1)]\n        for i in range(len(s) + 1):\n            dp[i][0] = 1\n            dp[i][1] = 1\n            dp[i][2] = 1\n        for i in range(1, len(s) + 1):\n            for j in range(3):\n                if s[i - 1] == 'a':\n                    dp[i][j] = dp[i - 1][j]\n                elif s[i - 1] == 'b':\n                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j + 1]\n                else:\n                    dp[i][j] = dp[i - 1][j + 1] + dp[i - 1][j]\n        return dp[len(s)][0] * dp[len(s)][1] * dp[len(s)][2]\n\n    return str(count_subsequences(s) % MOD)",
        "num_ids": 284
    },
    {
        "number": 4286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    graph = [[] for _ in range(n + 1)]\n    for i in range(m):\n        x, y, w = map(int, stdin.split())\n        graph[x].append((y, w))\n        graph[y].append((x, w))\n\n    def bellman_ford(graph, n):\n        dist = [float('inf')] * (n + 1)\n        dist[1] = 0\n        for _ in range(n - 1):\n            for u in range(1, n + 1):\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n        return dist\n\n    def min_coins(graph, n):\n        dist = bellman_ford(graph, n)\n        min_cost = float('inf')\n        for u in range(1, n + 1):\n            for v, w in graph[u]:\n                if dist[u] + w < dist[v]:\n                    min_cost = min(min_cost, dist[u] + w)\n        return min_cost\n\n    return str(min_coins(graph, n))\n",
        "num_ids": 288
    },
    {
        "number": 4287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n\n    umbrellas = []\n    for _ in range(m):\n        x, p = map(int, stdin.split())\n        umbrellas.append((x, p))\n\n    def is_rain(x: int) -> bool:\n        for l, r in segments:\n            if l <= x < r:\n                return True\n        return False\n\n    def min_total_fatigue(x: int) -> int:\n        fatigue = 0\n        for l, r in segments:\n            if l <= x < r:\n                fatigue += 1\n        return fatigue\n\n    def min_total_fatigue_with_umbrellas(x: int) -> int:\n        fatigue = 0\n        for l, r in segments:\n            if l <= x < r:\n                fatigue += 1\n        for x, p in umbrellas:\n            if x <= x < x + 1:\n                fatigue += p\n        return fatigue\n\n    if is_rain(0):\n        return str(min_total_fatigue(a))\n    else:\n        return str(min_total_fatigue_with_umbrellas(a))",
        "num_ids": 313
    },
    {
        "number": 4288,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return \"Yes\"\n    elif a == b or a == c or b == c:\n        return \"No\"\n    else:\n        return \"Yes\"",
        "num_ids": 56
    },
    {
        "number": 4289,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, a = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n\n    def distance(t1: int, t2: int) -> int:\n        return abs(t1 - t2)\n\n    def closest_place(t: int) -> int:\n        min_distance = float('inf')\n        min_index = -1\n        for i in range(n):\n            distance_to_t = distance(h[i], t)\n            if distance_to_t < min_distance:\n                min_distance = distance_to_t\n                min_index = i\n        return min_index\n\n    closest_place_index = closest_place(a)\n    return str(closest_place_index)",
        "num_ids": 164
    },
    {
        "number": 4290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    count = 0\n    for i in range(n + m):\n        for j in range(i + 1, n + m):\n            if (i + j) % 2 == 0:\n                count += 1\n    return str(count)",
        "num_ids": 69
    },
    {
        "number": 4291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    S = stdin.split()[1]\n    queries = []\n    for _ in range(Q):\n        l, r = map(int, stdin.split()[1:3])\n        queries.append((l, r))\n\n    result = []\n    for l, r in queries:\n        count = 0\n        for i in range(l, r + 1):\n            if S[i:i + 2] == \"AC\":\n                count += 1\n        result.append(str(count))\n\n    return \"\\n\".join(result)\n",
        "num_ids": 130
    },
    {
        "number": 4292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n\n    min_price = float('inf')\n    chosen_fruits = []\n\n    for i in range(1, N + 1):\n        if i in chosen_fruits:\n            continue\n\n        for j in range(1, K + 1):\n            if j == 1:\n                chosen_fruits.append(i)\n                total_price = prices[i - 1]\n                break\n\n            if i not in chosen_fruits:\n                chosen_fruits.append(i)\n                total_price = prices[i - 1] + total_price\n                break\n\n        if total_price < min_price:\n            min_price = total_price\n\n    return str(min_price)",
        "num_ids": 175
    },
    {
        "number": 4293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, q, r = map(int, stdin.split())\n    min_sum = float('inf')\n    for i in range(p):\n        for j in range(q):\n            for k in range(r):\n                if i + j + k < min_sum:\n                    min_sum = i + j + k\n    return str(min_sum)",
        "num_ids": 79
    },
    {
        "number": 4294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    if x < a:\n        return \"0\"\n    else:\n        return \"10\"",
        "num_ids": 34
    },
    {
        "number": 4295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    min_value = n\n    for i in range(1, 1000000000):\n        if abs(n - k) < abs(min_value - k):\n            min_value = abs(n - k)\n        n = abs(n - k)\n    return str(min_value)",
        "num_ids": 85
    },
    {
        "number": 4296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3 = map(int, stdin.split())\n    if a1 + a2 + a3 >= 22:\n        return \"bust\"\n    else:\n        return \"win\"",
        "num_ids": 48
    },
    {
        "number": 4297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    min_divisible_by_2_and_N = 10**9 + 1\n\n    for i in range(2, N + 1):\n        if i % 2 == 0 and i % N == 0:\n            min_divisible_by_2_and_N = min(min_divisible_by_2_and_N, i)\n\n    return str(min_divisible_by_2_and_N)",
        "num_ids": 108
    },
    {
        "number": 4298,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    min_inspectors = 0\n    for i in range(1, N + 1):\n        min_inspectors += (i - 1) // D\n    return str(min_inspectors)",
        "num_ids": 58
    },
    {
        "number": 4299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 0 or n > 999:\n        return \"Invalid input\"\n\n    if n < 10:\n        return \"hon\"\n    elif n < 20:\n        return \"pon\"\n    else:\n        return \"bon\"",
        "num_ids": 62
    },
    {
        "number": 4300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *d = map(int, stdin.split())\n    d = list(d)\n    d.sort()\n    dp = [0] * (n * (n - 1) // 2)\n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[i * (n - 1) // 2 + j - 1] = d[i] * d[j]\n    return str(sum(dp))",
        "num_ids": 106
    },
    {
        "number": 4301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    max_values = [0] * n\n    max_values[0] = a[0]\n\n    for i in range(1, n):\n        max_values[i] = max(max_values[i - 1], a[i])\n\n    for i in range(n - 1, -1, -1):\n        print(max_values[i])\n\n    return \"\"\n",
        "num_ids": 113
    },
    {
        "number": 4302,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    coins = 0\n    size = A\n    while size >= B:\n        coins += size\n        size -= 1\n    return str(coins)",
        "num_ids": 44
    },
    {
        "number": 4303,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n\n    def find_min_time(x: list, K: int) -> int:\n        left, right = 0, len(x) - 1\n        time = 0\n\n        while left <= right:\n            mid = (left + right) // 2\n\n            if mid == 0 or x[mid - 1] < x[mid]:\n                if mid + K <= len(x) - 1 and x[mid + K] == x[mid]:\n                    time += x[mid + K] - x[mid]\n                else:\n                    time += x[mid] - x[mid - 1]\n            else:\n                if mid - K >= 0 and x[mid - K] == x[mid]:\n                    time += x[mid] - x[mid - K]\n                else:\n                    time += x[mid] - x[mid + 1]\n\n            if time <= K:\n                left = mid + 1\n            else:\n                right = mid - 1\n\n        return time\n\n    return str(find_min_time(x, K))\n",
        "num_ids": 255
    },
    {
        "number": 4304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n\n    total_length = a + b\n    snow_cover_length = 0\n\n    for i in range(1, total_length + 1):\n        snow_cover_length += i\n\n    return str(snow_cover_length)",
        "num_ids": 78
    },
    {
        "number": 4305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    count = 0\n    while H > 0:\n        H -= A\n        count += 1\n    return str(count)",
        "num_ids": 41
    },
    {
        "number": 4306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(a, b) + max(c, d))",
        "num_ids": 35
    },
    {
        "number": 4307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1, 2):\n        divisors = 0\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                divisors += 1\n                if divisors == 8:\n                    count += 1\n                    break\n    print(count)\n    return \"\"",
        "num_ids": 97
    },
    {
        "number": 4308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    crackers = [0] * N\n    for _ in range(K):\n        crackers[int(stdin.split()[0]) - 1] += 1\n    max_crackers = max(crackers)\n    min_crackers = min(crackers)\n    return str(abs(max_crackers - min_crackers))",
        "num_ids": 96
    },
    {
        "number": 4309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10 or n > 999:\n        return \"Invalid input\"\n\n    for i in range(1, 1000):\n        if i % 10 == 0:\n            continue\n        if i % 10 == n % 10:\n            return str(i)\n\n    return \"Invalid input\"",
        "num_ids": 82
    },
    {
        "number": 4310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    n = len(A)\n    A.sort()\n    total_cost = 0\n    for i in range(n):\n        total_cost += A[i]\n        for j in range(i + 1, n):\n            total_cost += abs(A[j] - A[i])\n    return str(total_cost)",
        "num_ids": 87
    },
    {
        "number": 4311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    for i in range(1, 1000001):\n        a.append(i % 2 == 0 and i // 2 or 3 * i + 1)\n    a.append(s)\n    a.sort()\n    for i in range(1, len(a)):\n        if a[i] == a[i - 1]:\n            return str(i)\n    return str(len(a))",
        "num_ids": 109
    },
    {
        "number": 4312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a > b and a > c and a > d:\n        winner = \"Takahashi\"\n    elif b > a and b > c and b > d:\n        winner = \"Aoki\"\n    elif c > a and c > b and c > d:\n        winner = \"Takahashi\"\n    elif d > a and d > b and d > c:\n        winner = \"Aoki\"\n    else:\n        return \"No\"\n    return f\"{winner} will win\"",
        "num_ids": 123
    },
    {
        "number": 4313,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *values, *costs = map(int, stdin.split())\n    values = sorted(values)\n    costs = sorted(costs)\n    max_value = 0\n    for i in range(n):\n        max_value = max(max_value, values[i] + costs[i])\n    return str(max_value)",
        "num_ids": 75
    },
    {
        "number": 4314,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    a = [list(row) for row in stdin.splitlines()]\n\n    def remove_row(i: int) -> None:\n        nonlocal a\n        a[i] = ['.'] * W\n\n    def remove_col(j: int) -> None:\n        nonlocal a\n        for i in range(H):\n            a[i][j] = '.'\n\n    def compress_grid() -> None:\n        nonlocal a\n        for i in range(H):\n            if all(a[i][j] == '#' for j in range(W)):\n                remove_row(i)\n        for j in range(W):\n            if all(a[i][j] == '#' for i in range(H)):\n                remove_col(j)\n\n    compress_grid()\n\n    def print_grid() -> None:\n        for row in a:\n            print(''.join(row))\n\n    print_grid()\n    return ''",
        "num_ids": 209
    },
    {
        "number": 4315,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    circumference = 2 * 3.14159 * R\n    return str(circumference)",
        "num_ids": 33
    },
    {
        "number": 4316,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s)!= 4:\n        return \"No\"\n\n    count_a = 0\n    count_s = 0\n\n    for char in s:\n        if char == \"A\":\n            count_a += 1\n        elif char == \"S\":\n            count_s += 1\n\n    if count_a == 2 and count_s == 2:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 99
    },
    {
        "number": 4317,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return max(a + b, a - b, a * b)",
        "num_ids": 30
    },
    {
        "number": 4318,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *heights = map(int, stdin.split())\n    inns_seen = 0\n    for i in range(n):\n        if heights[i] <= heights[0]:\n            inns_seen += 1\n        elif heights[i] <= heights[1]:\n            inns_seen += 2\n        elif heights[i] <= heights[2]:\n            inns_seen += 3\n        else:\n            inns_seen += 4\n    return str(inns_seen)",
        "num_ids": 115
    },
    {
        "number": 4319,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    t = 0\n    steps = []\n    for i in range(n):\n        steps.append(a[i])\n        if i > 0 and a[i] == a[i - 1] + 1:\n            t += 1\n    return f\"{t}\\n{t}\\n{' '.join(map(str, steps))}\"",
        "num_ids": 91
    },
    {
        "number": 4320,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        x = 1\n        k = 1\n        while x + 2 * x + 4 * x + 8 * x + 16 * x + 32 * x + 64 * x + 128 * x + 256 * x + 512 * x + 1024 * x + 2048 * x + 4096 * x + 8192 * x + 16384 * x + 32768 * x + 65536 * x + 131072 * x + 262144 * x + 524288 * x + 1048576 * x + 2097152 * x + 4194304 * x + 8388608 * x + 16777216 * x + 33554432 * x + 67108864 * x + 134217728 * x + 268435456 * x + 536870912 * x + 1073741824 * x + 2147483648 = n:\n            x += 1\n            k += 1\n        print(x)",
        "num_ids": 350
    },
    {
        "number": 4321,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    result = n\n    for _ in range(k):\n        if result % 10 == 0:\n            result //= 10\n        else:\n            result -= 1\n    return str(result)",
        "num_ids": 58
    },
    {
        "number": 4322,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def is_balanced(a: list) -> bool:\n        for i in range(len(a) - 1):\n            if abs(a[i] - a[i + 1]) > 1:\n                return False\n        return abs(a[0] - a[-1]) <= 1\n\n    def max_balanced_circle(a: list) -> int:\n        max_size = 1\n        max_index = 0\n        for i in range(1, len(a)):\n            if is_balanced(a[:i] + a[i + 1:]):\n                max_size = i + 1\n                max_index = i\n        return max_size\n\n    max_size = max_balanced_circle(a)\n    max_circle = a[:max_size]\n    return f\"{max_size}\\n{max_circle[0]} {max_circle[-1]}\"",
        "num_ids": 221
    },
    {
        "number": 4323,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    songs = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        songs.append((a, b))\n\n    songs.sort(key=lambda x: x[1])\n\n    compressed_songs = []\n    total_size = 0\n    for a, b in songs:\n        total_size += a\n        compressed_songs.append((a, b))\n        if total_size > m:\n            break\n\n    if total_size > m:\n        return \"-1\"\n    else:\n        return str(len(compressed_songs))",
        "num_ids": 136
    },
    {
        "number": 4324,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, a, b = map(int, stdin.split()[1:])\n        if a > n or b > min(26, a):\n            print(\"Invalid input\")\n            continue\n        s = \"\"\n        for i in range(n):\n            s += chr(ord('a') + i % 26)\n        for i in range(n - a + 1):\n            sub = s[i:i + a]\n            if len(set(sub)) == b:\n                print(sub)\n                break",
        "num_ids": 130
    },
    {
        "number": 4325,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = map(int, stdin.split())\n    minutes = 0\n    pieces = 0\n    while pieces < n:\n        minutes += t\n        pieces += x\n    return str(minutes)",
        "num_ids": 46
    },
    {
        "number": 4326,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    groups = []\n    for i in range(n):\n        students = list(map(int, stdin.split()))\n        groups.append(students)\n\n    groups.sort(key=lambda x: len(x), reverse=True)\n    count = 0\n    for group in groups:\n        if len(group) >= 3:\n            count += 1\n            if count == 2:\n                break\n\n    return str(count)",
        "num_ids": 99
    },
    {
        "number": 4327,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    max_pies = 0\n    for i in range(1, A + 1):\n        if i % 3 == 0:\n            max_pies += 1\n    return str(max_pies)",
        "num_ids": 62
    },
    {
        "number": 4328,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % b == 0:\n        return str(a + b)\n    else:\n        return str(b - a)",
        "num_ids": 42
    },
    {
        "number": 4329,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if len(s) == len(t) + 1 and s.islower() and t.islower():\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 49
    },
    {
        "number": 4330,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return \"IMPOSSIBLE\"\n    k = a + b\n    if k % 2 == 0:\n        k -= 1\n    return str(k)",
        "num_ids": 54
    },
    {
        "number": 4331,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 10 == 7:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 32
    },
    {
        "number": 4332,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"Yes\"\n    digits = [int(digit) for digit in str(n)]\n    sum_digits = sum(digits)\n    if sum_digits == n:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 65
    },
    {
        "number": 4333,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3 = x1 + (x2 - x1) // 2, y1 + (y2 - y1) // 2\n    x4, y4 = x1 + (x2 - x1) // 2, y1 - (y2 - y1) // 2\n    return f\"{x3} {y3} {x4} {y4}\"",
        "num_ids": 109
    },
    {
        "number": 4334,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    a, b = map(int, stdin.split())\n    u = input()\n\n    if s == u or t == u:\n        return \"0 0\"\n\n    s_count = 0\n    t_count = 0\n\n    for i in range(a):\n        if s in stdin:\n            s_count += 1\n            stdin = stdin.replace(s, \"\", 1)\n        if t in stdin:\n            t_count += 1\n            stdin = stdin.replace(t, \"\", 1)\n\n    return f\"{s_count} {t_count}\"",
        "num_ids": 132
    },
    {
        "number": 4335,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    s = s.lower()\n    for i in range(n):\n        if s[i]!= s[n + i]:\n            return \"No\"\n    return \"Yes\"",
        "num_ids": 52
    },
    {
        "number": 4336,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n    area1 = abs(x * H - y * W)\n    area2 = abs(W - x) * abs(H - y)\n    if area1 > area2:\n        print(area1, 0)\n    else:\n        print(area2, 1)\n    return \"\"",
        "num_ids": 81
    },
    {
        "number": 4337,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    colors = stdin.split()[1:]\n    pink_count = colors.count('P')\n    white_count = colors.count('W')\n    green_count = colors.count('G')\n    yellow_count = colors.count('Y')\n\n    if pink_count == white_count == green_count:\n        return 'Three'\n    elif pink_count == white_count == green_count + yellow_count:\n        return 'Four'\n    else:\n        return 'Invalid'",
        "num_ids": 118
    },
    {
        "number": 4338,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def break_or_not(i, b):\n        return max(0, b - x)\n\n    def repair_or_not(i, b):\n        return b + y\n\n    def break_or_not_slavik(i, b):\n        return b + y\n\n    def repair_or_not_slavik(i, b):\n        return max(0, b - x)\n\n    def break_or_not_slavik_or_not(i, b):\n        return max(0, b - x)\n\n    def repair_or_not_slavik_or_not(i, b):\n        return b + y\n\n    def break_or_not_slavik_or_not_or_not(i, b):\n        return b + y\n\n    def repair_or_not_slavik_or_not_or_not(i, b):\n        return max(0, b - x)\n\n    def break_or_not_slavik_or_not_or_not_or_not(i, b):\n        return max(0, b - x)\n\n    def repair_or_not_slavik_or_not_or_not_or_not(i, b):\n        return b + y\n\n    def break_or_not_slavik_or_not_or_not_or_not_or_not(i, b):\n        return b + y\n\n    def repair_or_not_slavik_or_not_or_not_or_not_or_not(i, b):\n        return max(0, b - x)\n\n    def break_or_not_slavik_or_not_or_not_or_not_or_not_or_not(i, b):\n        return max(0, b - x)\n\n    def repair_or_not_slavik_or_not_or_not_or_not_or_not_or_not(i, b):\n        return b + y\n\n    def break_or_not_slavik_or_not_or_not_or_not_or_not_or_not_or_not(i, b):\n        return b + y\n\n    def repair_or_not_slavik_or_not_or_not_or_not_or_not_or_not_or_not(i, b):\n        return max(0, b - x)\n\n    def break_or_not_slavik_or_not_or_not_or_not_or_not_or_not_or_not_or_not(i, b):\n        return max(0, b - x)\n\n    def repair_or_not_slavik_or_not_or_not_or_not_or_not_or_not_or_not_or_not(i, b):\n        return b + y\n\n    def break_or_not_slavik_or_not_or_not_or_not_or_not_or_not_or_not_or_not_or_not(i, b):\n        return b + y\n\n    def repair_or_not_slavik_or_not_or_not_or_not_or_not_or_not_or_not_or_not_or_not(i, b):\n        return max(0, b - x)\n\n    def break_or_not_slavik_or_not_or_not_or_not_or_not_or_not_or_not_or_not_or_not_or_not(i, b):\n        return max(0, b - x)\n\n    def repair_or_not_slavik_or_not_or_not_or_not_or_not_or_not_or_not_or_not_or_not_or_not(i, b):\n        return b + y\n\n    def break_or_not_slavik_or_not_or_not_or_not_or_not_or_not_or_not_or_not_or_not_or_not_or_not(i, b):\n        return b + y\n\n    def repair_or_not_slavik_or_not_or_not_or_not_or_not_or_not_or_not_or_not_or_not_or_not_or_not(i, b):\n        return max(0, b - x)",
        "num_ids": 1025
    },
    {
        "number": 4339,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    b = list(map(int, stdin.split()[2].split()))\n\n    good_pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                good_pairs += 1\n\n    return str(good_pairs)",
        "num_ids": 109
    },
    {
        "number": 4340,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    for i in range(1, 500001):\n        a = [2 if x == 1 else x for x in a]\n        a = [1 if x == 2 else x for x in a]\n        a = [4 if x == 3 else x for x in a]\n        a = [3 if x == 4 else x for x in a]\n        a = [6 if x == 5 else x for x in a]\n        a = [5 if x == 6 else x for x in a]\n\n    return \" \".join(map(str, a))",
        "num_ids": 158
    },
    {
        "number": 4341,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, stdin.split())) for _ in range(m)]\n\n    def dfs(u, visited):\n        visited[u] = True\n        for v in range(n):\n            if not visited[v] and edges[u][v] == 1:\n                dfs(v, visited)\n\n    def is_cycle(u, visited):\n        visited[u] = True\n        for v in range(n):\n            if not visited[v] and edges[u][v] == 1:\n                if is_cycle(v, visited):\n                    return True\n        return False\n\n    visited = [False] * n\n    cycles = 0\n\n    for u in range(n):\n        if not visited[u]:\n            dfs(u, visited)\n            if is_cycle(u, visited):\n                cycles += 1\n\n    return str(cycles)",
        "num_ids": 198
    },
    {
        "number": 4342,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    colors = list(map(int, stdin.split()[1:]))\n    edges = []\n    for i in range(n - 1):\n        edges.append(list(map(int, stdin.split()[n - 1 + i].split())))\n\n    def dfs(u: int, color: int, visited: set) -> int:\n        visited.add(u)\n        for v, c in edges[u]:\n            if c == color and v not in visited:\n                return dfs(v, color, visited)\n        return 1\n\n    red_count = 0\n    blue_count = 0\n    for color in colors:\n        if color == 1:\n            red_count += 1\n        elif color == 2:\n            blue_count += 1\n\n    nice_edges = 0\n    for u, v in edges:\n        if colors[u] == colors[v]:\n            nice_edges += dfs(u, colors[u], set()) * dfs(v, colors[v], set())\n\n    return str(nice_edges)",
        "num_ids": 236
    },
    {
        "number": 4343,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = map(str, stdin.split())\n    s, t = s.lower(), t.lower()\n    s_list = sorted([s + t[i:i+k] for i in range(len(t)-k+1)])\n    return s_list[len(s_list)//2]",
        "num_ids": 73
    },
    {
        "number": 4344,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    a.sort()\n    a.reverse()\n\n    for i in range(n - k + 1):\n        if a[i]!= a[i + k - 1]:\n            print(\"YES\")\n            print(\" \".join(map(str, range(i + 1, i + k))))\n            return \"YES\"\n\n    print(\"NO\")\n    return \"NO\"",
        "num_ids": 107
    },
    {
        "number": 4345,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, n):\n        if a[i] < a[i - 1]:\n            increasing = False\n        elif a[i] > a[i - 1]:\n            decreasing = False\n        else:\n            increasing = decreasing = False\n            break\n\n    if increasing and decreasing:\n        print(\"YES\")\n        for i in range(n):\n            if a[i] == 0:\n                print(\"0\", end=\" \")\n            else:\n                print(\"1\", end=\" \")\n    else:\n        print(\"NO\")\n\n    return \"\"\n",
        "num_ids": 157
    },
    {
        "number": 4346,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    queries = []\n    for _ in range(t):\n        L, v, l, r = map(int, stdin.split()[1:])\n        queries.append((L, v, l, r))\n    return \"\\n\".join(map(str, [count_lanterns(L, v, l, r) for L, v, l, r in queries]))\n\ndef",
        "num_ids": 96
    },
    {
        "number": 4347,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"Invalid input\"\n\n    def count_ways(dance: list) -> int:\n        if len(dance) == 1:\n            return 1\n        else:\n            return count_ways(dance[1:]) + count_ways(dance[:-1])\n\n    ways = 0\n    for i in range(1, n + 1, 2):\n        ways += count_ways([i, n - i])\n\n    return str(ways)",
        "num_ids": 117
    },
    {
        "number": 4348,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    for i in range(k):\n        if 'a' in s:\n            s = s[1:]\n        elif 'b' in s:\n            s = s[1:]\n        else:\n            s = s[1:]\n    return s",
        "num_ids": 74
    },
    {
        "number": 4349,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n    offers = []\n    for _ in range(m):\n        d, t = map(int, stdin.split())\n        offers.append((d, t))\n\n    def can_buy(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return True\n        return False\n\n    def min_day(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return d\n        return 0\n\n    def min_day_with_special_offers(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return d\n        return min_day(k, offers)\n\n    def min_day_with_special_offers_and_buying(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return d\n        return min_day(k, offers)\n\n    def min_day_with_special_offers_and_buying_and_selling(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return d\n        return min_day(k, offers)\n\n    def min_day_with_special_offers_and_buying_and_selling_and_special_offers(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return d\n        return min_day(k, offers)\n\n    def min_day_with_special_offers_and_buying_and_selling_and_special_offers_and_buying(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return d\n        return min_day(k, offers)\n\n    def min_day_with_special_offers_and_buying_and_selling_and_special_offers_and_buying_and_selling(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return d\n        return min_day(k, offers)\n\n    def min_day_with_special_offers_and_buying_and_selling_and_special_offers_and_buying_and_selling_and_special_offers(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return d\n        return min_day(k, offers)\n\n    def min_day_with_special_offers_and_buying_and_selling_and_special_offers_and_buying_and_selling_and_special_offers_and_buying(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return d\n        return min_day(k, offers)\n\n    def min_day_with_special_offers_and_buying_and_selling_and_special_offers_and_buying_and_selling_and_special_offers_and_buying_and_selling(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return d\n        return min_day(k, offers)\n\n    def min_day_with_special_offers_and_buying_and_selling_and_special_offers_and_buying_and_selling_and_special_offers_and_buying_and_selling_and_special_offers(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return d\n        return min_day(k, offers)\n\n    def min_day_with_special_offers_and_buying_and_selling_and_special_offers_and_buying_and_selling_and_special_offers_and_buying_and_selling_and_special_offers_and_buying(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return d\n        return min_day(k",
        "num_ids": 1025
    },
    {
        "number": 4350,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0].split())\n    grid = [list(row) for row in stdin.split()[1:]]\n\n    def is_valid(x, y, s):\n        return 0 < s <= n and 0 < x <= n and 0 < y <= m\n\n    def draw_star(x, y, s):\n        for i in range(s):\n            for j in range(s):\n                if i == 0 or i == s - 1 or j == 0 or j == s - 1:\n                    grid[x + i][y + j] = '*'\n\n    def draw_stars(x, y, s):\n        if not is_valid(x, y, s):\n            return\n        draw_star(x, y, s)\n        draw_stars(x - 1, y, s)\n        draw_stars(x + 1, y, s)\n        draw_stars(x, y - 1, s)\n        draw_stars(x, y + 1, s)\n\n    def count_stars(x, y, s):\n        if not is_valid(x, y, s):\n            return 0\n        count = 1\n        count += count_stars(x - 1, y, s)\n        count += count_stars(x + 1, y, s)\n        count += count_stars(x, y - 1, s)\n        count += count_stars(x, y + 1, s)\n        return count\n\n    def find_star(x, y, s):\n        if not is_valid(x, y, s):\n            return None\n        if grid[x][y] == '*':\n            return (x, y, s)\n        return find_star(x - 1, y, s) or find_star(x + 1, y, s) or find_star(x, y - 1, s) or find_star(x, y + 1, s)\n\n    def find_stars(x, y, s):\n        if not is_valid(x, y, s):\n            return []\n        if grid[x][y] == '*':\n            return [(x, y, s)]\n        return find_stars(x - 1, y, s) + find_stars(x + 1, y, s) + find_stars(x, y - 1, s) + find_stars(x, y + 1, s)\n\n    def draw_grid():\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    draw_star(i, j, 1)\n                elif grid[i][j] == '.':\n                    pass\n                else:\n                    return \"IMPOSSIBLE\"\n\n    def find_max_stars():\n        max_stars = 0\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    max_stars = max(max_stars, count_stars(i, j, 1))\n        return max_stars\n\n    def find_min_stars():\n        min_stars = 0\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    min_stars = min(min_stars, count_stars(i, j, 1))\n        return min_stars\n\n    def find_max_size():\n        max_size = 0\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    max_size = max(max_size, count_stars(i, j, 1))\n        return max_size\n\n    def find_min_size():\n        min_size = 0\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    min_size = min(min_size, count_stars(i, j, 1))\n        return min_size\n\n    def find_max_size_star():\n        max_size_star = None\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    size = count_stars(i, j, 1)\n                    if size > max_size_star[1]:\n                        max_size_star = (i, j, size)\n        return max_size_star\n\n    def find_min_size_star():\n        min_size_star = None\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    size =",
        "num_ids": 1025
    },
    {
        "number": 4351,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 100 or N > 999:\n        return \"No\"\n\n    num_str = str(N)\n    reversed_num_str = num_str[::-1]\n\n    if num_str == reversed_num_str:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 77
    },
    {
        "number": 4352,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return \"Alice\"\n    elif a < b:\n        return \"Bob\"\n    else:\n        return \"Draw\"",
        "num_ids": 44
    },
    {
        "number": 4353,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    s = s.replace(\",\", \" \")\n    return s",
        "num_ids": 20
    },
    {
        "number": 4354,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    students = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        students.append((a, b))\n\n    checkpoints = []\n    for i in range(m):\n        c, d = map(int, input().split())\n        checkpoints.append((c, d))\n\n    distances = []\n    for student in students:\n        min_distance = float('inf')\n        min_checkpoint = None\n        for checkpoint in checkpoints:\n            distance = abs(student[0] - checkpoint[0]) + abs(student[1] - checkpoint[1])\n            if distance < min_distance:\n                min_distance = distance\n                min_checkpoint = checkpoint\n        distances.append(min_checkpoint)\n\n    return '\\n'.join(map(str, distances))",
        "num_ids": 184
    },
    {
        "number": 4355,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = a + a ** 2 + a ** 3\n    return str(result)",
        "num_ids": 28
    },
    {
        "number": 4356,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(row) for row in stdin.splitlines()]\n    b = [list(row) for row in stdin.splitlines()]\n\n    def shift(image, shift_x, shift_y):\n        result = []\n        for i in range(len(image)):\n            row = []\n            for j in range(len(image[0])):\n                row.append(image[i][j])\n                if j + shift_x >= len(image[0]) or j + shift_x < 0 or i + shift_y >= len(image) or i + shift_y < 0:\n                    row.append(image[i][j])\n                else:\n                    row.append(image[i + shift_y][j + shift_x])\n            result.append(row)\n        return result\n\n    def is_contained(image, template):\n        for i in range(len(image) - len(template) + 1):\n            for j in range(len(image[0]) - len(template[0]) + 1):\n                if all(image[i + k][j + l] == template[k][l] for k in range(len(template)) for l in range(len(template[0]))):\n                    return True\n        return False\n\n    for shift_x in range(-len(b), len(a) - len(b) + 1):\n        for shift_y in range(-len(b[0]), len(a) - len(b) + 1):\n            if is_contained(shift(a, shift_x, shift_y), shift(b, shift_x, shift_y)):\n                return \"Yes\"\n\n    return \"No\"",
        "num_ids": 381
    },
    {
        "number": 4357,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    max_allowance = 0\n\n    for i in range(1, 10):\n        for j in range(1, 10):\n            for k in range(1, 10):\n                for l in range(1, 10):\n                    for m in range(1, 10):\n                        for n in range(1, 10):\n                            for o in range(1, 10):\n                                for p in range(1, 10):\n                                    for q in range(1, 10):\n                                        for r in range(1, 10):\n                                            for s in range(1, 10):\n                                                for t in range(1, 10):\n                                                    for u in range(1, 10):\n                                                        for v in range(1, 10):\n                                                            for w in range(1, 10):\n                                                                for x in range(1, 10):\n                                                                    for y in range(1, 10):\n                                                                        for z in range(1, 10):\n                                                                            if a + b == i + j and c + d == k + l and e + f == m + n and g + h == o + p and i + j + k == q + r and j + k + l == s + t and k + l + m == u + v and l + m + n == w + x and m + n + o == y + z:\n                                                                                max_allowance = max(max_allowance, i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z)\n\n    return str(max_allowance)",
        "num_ids": 382
    },
    {
        "number": 4358,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    prices = list(map(int, stdin.split()[1:]))\n\n    total = 0\n    for i in range(N):\n        if prices[i] % 2 == 0:\n            total += prices[i]\n        else:\n            total += prices[i] / 2\n\n    return str(total)",
        "num_ids": 80
    },
    {
        "number": 4359,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    dishes = [int(x) for x in stdin.split()]\n    dishes.sort()\n    time = 0\n    for dish in dishes:\n        time += dish\n        if time % 10 == 0:\n            return str(time)\n    return str(time)",
        "num_ids": 64
    },
    {
        "number": 4360,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n\n    # Calculate the sum of the inverses of the numbers\n    sum_inverses = 1\n    for a in A:\n        sum_inverses *= 1 / a\n\n    # Calculate the multiplicative inverse of the sum\n    multiplicative_inverse = 1 / sum_inverses\n\n    # Print the result\n    return str(multiplicative_inverse)",
        "num_ids": 108
    },
    {
        "number": 4361,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n\n    h.sort()\n    h_max = h[-1]\n    h_min = h[0]\n\n    for i in range(k - 1):\n        h_max = min(h_max, h[i + 1])\n        h_min = max(h_min, h[i + 1])\n\n    return str(h_max - h_min)",
        "num_ids": 109
    },
    {
        "number": 4362,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin.upper()\n    if alpha == 'A':\n        return 'A'\n    elif alpha == 'B':\n        return 'a'\n    else:\n        return 'Invalid input'",
        "num_ids": 41
    },
    {
        "number": 4363,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.split())\n    count = 0\n    for x in range(k + 1):\n        for y in range(k + 1):\n            for z in range(k + 1):\n                if x + y + z == s:\n                    count += 1\n    return str(count)",
        "num_ids": 73
    },
    {
        "number": 4364,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if len(S)!= 4:\n        return \"NA\"\n\n    year = int(S[-2:])\n    month = int(S[:-2])\n\n    if 1000 <= year <= 9999 and 1 <= month <= 12:\n        return f\"{S[-2:]}{S[:-2]}\"\n    elif 1 <= month <= 12 and 1000 <= year <= 9999:\n        return f\"{S[:-2]}{S[-2:]}\"\n    else:\n        return \"NA\"",
        "num_ids": 125
    },
    {
        "number": 4365,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    count = 0\n    for i in range(1, K+1, 2):\n        for j in range(3, K+1, 2):\n            count += 1\n    return str(count)",
        "num_ids": 54
    },
    {
        "number": 4366,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    hour = A + B\n    return str(hour % 24)",
        "num_ids": 30
    },
    {
        "number": 4367,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    inner_rating = r\n    for i in range(n):\n        k = i + 1\n        if k >= 10:\n            inner_rating += r\n        else:\n            inner_rating += r - 100 * (10 - k)\n    return str(inner_rating)",
        "num_ids": 78
    },
    {
        "number": 4368,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    while n > 0:\n        count += 1\n        n //= k\n    return str(count)",
        "num_ids": 42
    },
    {
        "number": 4369,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sheets = 1\n    for i in range(2, N + 1, 2):\n        sheets += 1\n    print(sheets)\n    return \"\"",
        "num_ids": 42
    },
    {
        "number": 4370,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a + b <= 16:\n        return \"Yay!\"\n    else:\n        return \":\"",
        "num_ids": 36
    },
    {
        "number": 4371,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if len(S) < 4 or len(S) > 10:\n        return \"Invalid input\"\n\n    X = 0\n    for i in range(len(S) - 2):\n        X = X * 10 + int(S[i])\n\n    X = X * 10 + int(S[-1])\n    X = X * 10 + int(S[-2])\n\n    return str(abs(X - 753))",
        "num_ids": 110
    },
    {
        "number": 4372,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(map(int, a.split()))\n\n    x = 0\n    y = 0\n    z = 0\n\n    for i in range(n):\n        x += a[i]\n\n    for i in range(n):\n        if a[i] > 0:\n            y += 1\n            z += a[i]\n\n    return f\"{y} {z}\"",
        "num_ids": 96
    },
    {
        "number": 4373,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    days = 0\n    i = 0\n    while i < n:\n        if a[i] <= days:\n            days += 1\n        else:\n            break\n        i += 1\n    return str(days)",
        "num_ids": 66
    },
    {
        "number": 4374,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, stdin.split())) for _ in range(m)]\n\n    def dfs(u, visited, depth):\n        visited[u] = True\n        for v in range(n):\n            if not visited[v] and g[u][v]:\n                dfs(v, visited, depth + 1)\n\n    def bfs(u, visited, depth):\n        queue = [(u, depth)]\n        while queue:\n            v, d = queue.pop(0)\n            visited[v] = True\n            for w in range(n):\n                if not visited[w] and g[v][w]:\n                    queue.append((w, d + 1))\n\n    g = [[0] * n for _ in range(n)]\n    for u, v in edges:\n        g[u - 1][v - 1] = 1\n        g[v - 1][u - 1] = 1\n\n    visited = [False] * n\n    diameter = 0\n\n    for u in range(n):\n        if not visited[u]:\n            dfs(u, visited, 0)\n            diameter = max(diameter, depth)\n\n    visited = [False] * n\n    diameter = 0\n\n    for u in range(n):\n        if not visited[u]:\n            bfs(u, visited, 0)\n            diameter = max(diameter, depth)\n\n    return str(diameter)",
        "num_ids": 317
    },
    {
        "number": 4375,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    edges = []\n    for i in range(n - 1):\n        u, v = map(int, stdin.split())\n        edges.append((u - 1, v - 1))\n\n    def dfs(u, visited, distance, total_weight):\n        visited[u] = True\n        for v, w in edges:\n            if not visited[v]:\n                if w > k:\n                    continue\n                distance[v] = distance[u] + 1\n                total_weight[v] = total_weight[u] + a[v]\n                dfs(v, visited, distance, total_weight)\n\n    visited = [False] * n\n    distance = [0] * n\n    total_weight = [0] * n\n\n    max_weight = 0\n    for u in range(n):\n        if not visited[u]:\n            distance[u] = 1\n            total_weight[u] = a[u]\n            dfs(u, visited, distance, total_weight)\n            max_weight = max(max_weight, total_weight[u])\n\n    return str(max_weight)\n",
        "num_ids": 266
    },
    {
        "number": 4376,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    result = []\n    for i in range(m):\n        f = b[i] - 1\n        k = b[i] - a[f]\n        result.append(f + 1)\n        result.append(k)\n\n    return '\\n'.join(map(str, result))",
        "num_ids": 104
    },
    {
        "number": 4377,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3, x4 = map(int, stdin.split())\n    a, b, c = sorted([x1, x2, x3, x4])\n    return str(a) +'' + str(b) +'' + str(c)",
        "num_ids": 63
    },
    {
        "number": 4378,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = list(stdin.split()[1])\n\n    def is_diverse(t: list) -> bool:\n        for i in range(1, n - 1):\n            if t[i] == t[i + 1]:\n                return False\n        return True\n\n    def min_recolors(t: list) -> int:\n        colors = set(t)\n        return len(colors)\n\n    def min_recolors_helper(t: list, i: int, j: int, min_recolors: int) -> int:\n        if i == j:\n            return min_recolors\n\n        if t[i] == t[j]:\n            return min_recolors_helper(t, i + 1, j - 1, min_recolors)\n\n        if t[i] == 'R':\n            return min_recolors_helper(t, i + 1, j, min_recolors + 1)\n        elif t[i] == 'G':\n            return min_recolors_helper(t, i, j - 1, min_recolors + 1)\n        else:\n            return min_recolors_helper(t, i, j, min_recolors + 1)\n\n    t = s.copy()\n    min_recolors_t = min_recolors(t)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if t[i] == t[j]:\n                t[i], t[j] = t[j], t[i]\n                min_recolors_t = min(min_recolors_t, min_recolors_helper(t, i, j, min_recolors_t))\n                t[i], t[j] = t[j], t[i]\n\n    if is_diverse(t):\n        return str(min_recolors_t) + '\\n' + ''.join(t)\n    else:\n        return 'IMPOSSIBLE\\n'",
        "num_ids": 444
    },
    {
        "number": 4379,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    k = 1\n    for i in range(1, n):\n        if a[i]!= a[i - 1] + 1:\n            k = i\n            break\n    return str(k) + \" \" + \" \".join(map(str, range(1, k + 1)))",
        "num_ids": 86
    },
    {
        "number": 4380,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < 1 or a > 3 or b < 1 or b > 3:\n        return \"No\"\n\n    for c in range(1, 4):\n        if a * b * c % 2!= 0:\n            return \"Yes\"\n\n    return \"No\"",
        "num_ids": 76
    },
    {
        "number": 4381,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if y % 2!= 0:\n        return \"Invalid input\"\n\n    if x <= 0 or y <= 0:\n        return \"Invalid input\"\n\n    if x > 100 or y > 100:\n        return \"Invalid input\"\n\n    if x + y > 100:\n        return \"Invalid input\"\n\n    if x + y == 100:\n        return str(x)\n\n    if x + y == 50:\n        return str(x)\n\n    if x + y == 29:\n        return str(x)\n\n    return \"Invalid input\"",
        "num_ids": 142
    },
    {
        "number": 4382,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1 or N > 9:\n        return \"Invalid input\"\n\n    digits = [str(i) for i in range(1, N + 1)]\n    passwords = []\n\n    for i in range(len(digits)):\n        for j in range(len(digits)):\n            for k in range(len(digits)):\n                passwords.append(digits[i] + digits[j] + digits[k])\n\n    return str(len(passwords))",
        "num_ids": 107
    },
    {
        "number": 4383,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X >= 1 and X <= 9:\n        if X >= 7 and X <= 9:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"INVALID INPUT\"",
        "num_ids": 54
    },
    {
        "number": 4384,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 1998:\n        raise ValueError(\"N should be between 1 and 1998 (inclusive)\")\n\n    if n <= 999:\n        return \"ABC\" + str(n)\n    else:\n        return \"ABD\" + str(n - 1000)",
        "num_ids": 81
    },
    {
        "number": 4385,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n\n    if a < b < c < d < e:\n        if k <= 1:\n            return \"Yay!\"\n        else:\n            return \":(\\n\"\n    else:\n        return \":(\\n\"",
        "num_ids": 67
    },
    {
        "number": 4386,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, s = map(int, stdin.split())\n    if a < 3200:\n        print(s)\n    else:\n        print(\"red\")\n    return \"\"",
        "num_ids": 40
    },
    {
        "number": 4387,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if R < 1200:\n        return \"ABC\"\n    elif R < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\"",
        "num_ids": 47
    },
    {
        "number": 4388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = str(n)\n    n = n.replace('1', '9')\n    n = n.replace('9', '1')\n    return n",
        "num_ids": 42
    },
    {
        "number": 4389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for _ in range(t):\n        b = stdin.split('\\n')[1]\n        a = ''.join(sorted(set(b)))\n        print(a)",
        "num_ids": 50
    },
    {
        "number": 4390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        a, b = map(int, stdin.split()[1:])\n        moves = 0\n        while a % b!= 0:\n            a += 1\n            moves += 1\n        print(moves)",
        "num_ids": 64
    },
    {
        "number": 4391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def max_average(start: int, end: int) -> float:\n        if end - start + 1 < k:\n            return float('-inf')\n\n        total_sum = 0\n        for i in range(start, end + 1):\n            total_sum += a[i]\n\n        return total_sum / (end - start + 1)\n\n    res = max_average(0, n - 1)\n    for i in range(n - 1, 0, -1):\n        if max_average(i - k, i) > res:\n            res = max_average(i - k, i)\n\n    return str(res)",
        "num_ids": 169
    },
    {
        "number": 4392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, m = map(int, stdin.split()[1:])\n        a = list(map(int, stdin.split()[2:2+n]))\n        p = list(map(int, stdin.split()[2+n:2+n+m]))\n        if not can_sort(a, p):\n            print(\"NO\")\n        else:\n            print(\"YES\")\n\ndef",
        "num_ids": 104
    },
    {
        "number": 4393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = stdin.split()[1]\n    s = \"\"\n    for i in range(n):\n        s += t[i] * (i + 1)\n    return s",
        "num_ids": 50
    },
    {
        "number": 4394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, stdin.split())) for _ in range(m)]\n    edges.sort(key=lambda x: (x[2], x[0], x[1]))\n\n    def find(parent, x):\n        if parent[x] == x:\n            return x\n        parent[x] = find(parent, parent[x])\n        return parent[x]\n\n    def union(parent, rank, x, y):\n        x_root = find(parent, x)\n        y_root = find(parent, y)\n        if x_root == y_root:\n            return False\n        if rank[x_root] < rank[y_root]:\n            parent[x_root] = y_root\n        elif rank[x_root] > rank[y_root]:\n            parent[y_root] = x_root\n        else:\n            parent[y_root] = x_root\n            rank[x_root] += 1\n        return True\n\n    def kruskal(edges):\n        parent = [i for i in range(n)]\n        rank = [0] * n\n        edges.sort(key=lambda x: x[2])\n        mst = []\n        for edge in edges:\n            u, v, w = edge\n            if not union(parent, rank, u - 1, v - 1):\n                mst.append(edge)\n        return mst\n\n    mst = kruskal(edges)\n    k = sum(edge[2] for edge in mst)\n    mst_cost = sum(edge[2] for edge in mst)\n\n    def increase_weight(mst, k, mst_cost):\n        def increase_edge(mst, k, mst_cost):\n            for edge in mst:\n                if edge[2] == 1:\n                    return edge\n            return None\n\n        def increase_edge_by_one(mst, k, mst_cost):\n            for edge in mst:\n                if edge[2] == 2:\n                    return edge\n            return None\n\n        def increase_edge_by_two(mst, k, mst_cost):\n            for edge in mst:\n                if edge[2] == 3:\n                    return edge\n            return None\n\n        def increase_edge_by_three(mst, k, mst_cost):\n            for edge in mst:\n                if edge[2] == 4:\n                    return edge\n            return None\n\n        def increase_edge_by_four(mst, k, mst_cost):\n            for edge in mst:\n                if edge[2] == 5:\n                    return edge\n            return None\n\n        def increase_edge_by_five(mst, k, mst_cost):\n            for edge in mst:\n                if edge[2] == 6:\n                    return edge\n            return None\n\n        def increase_edge_by_six(mst, k, mst_cost):\n            for edge in mst:\n                if edge[2] == 7:\n                    return edge\n            return None\n\n        def increase_edge_by_seven(mst, k, mst_cost):\n            for edge in mst:\n                if edge[2] == 8:\n                    return edge\n            return None\n\n        def increase_edge_by_eight(mst, k, mst_cost):\n            for edge in mst:\n                if edge[2] == 9:\n                    return edge\n            return None\n\n        def increase_edge_by_nine(mst, k, mst_cost):\n            for edge in mst:\n                if edge[2] == 10:\n                    return edge\n            return None\n\n        def increase_edge_by_ten(mst, k, mst_cost):\n            for edge in mst:\n                if edge[2] == 11:\n                    return edge\n            return None\n\n        def increase_edge_by_eleven(mst, k, mst_cost):\n            for edge in mst:\n                if edge[2] == 12:\n                    return edge\n            return None\n\n        def increase_edge_by_twelve(mst, k, mst_cost):\n            for edge in mst:\n                if edge[2] == 13:\n                    return edge\n            return None\n\n        def increase_edge_by_thirteen(mst, k, mst_cost):\n            for edge in mst:\n                if edge[2] == 14:\n                    return edge\n            return None\n\n        def increase_edge_by_fourteen(mst, k, mst_cost):\n            for edge in mst:\n                if edge[2] == 15:\n                    return edge\n            return None\n\n        def increase_edge_by_fifteen(",
        "num_ids": 1025
    },
    {
        "number": 4395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = list(stdin.split()[1])\n\n    def is_nice(t: list) -> bool:\n        for i in range(n):\n            for j in range(i + 1, n):\n                if t[i] == t[j] and abs(i - j) % 3!= 0:\n                    return False\n        return True\n\n    def min_recolors(t: list) -> int:\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if t[i] == t[j] and abs(i - j) % 3 == 0:\n                    count += 1\n        return count\n\n    def min_recolor(t: list) -> str:\n        min_count = float('inf')\n        min_t = ''\n        for i in range(n):\n            for j in range(i + 1, n):\n                if t[i] == t[j] and abs(i - j) % 3 == 0:\n                    count = min_recolors(t[:i] + t[i + 1:] + t[j + 1:] + t[i:j] + t[j:])\n                    if count < min_count:\n                        min_count = count\n                        min_t = ''.join(t[:i] + t[i + 1:] + t[j + 1:] + t[i:j] + t[j:])\n        return min_t\n\n    t = list(s)\n    t = min_recolor(t)\n    return str(min_recolors(t)) + '\\n' + ''.join(t)\n\n\ndef",
        "num_ids": 376
    },
    {
        "number": 4396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = [float(x) for x in stdin.split()[1:]]\n    u = [x.split()[1] for x in stdin.split()[1:]]\n\n    total = 0\n    for i in range(n):\n        if u[i] == 'JPY':\n            total += x[i]\n        elif u[i] == 'BTC':\n            total += x[i] * 380000.0\n\n    return str(total)",
        "num_ids": 112
    },
    {
        "number": 4397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    j = N - i\n    return str(j)",
        "num_ids": 26
    },
    {
        "number": 4398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S, T = map(str, stdin.split())\n    result = \"\"\n    for i in range(N):\n        result += S[i] + T[i]\n    return result",
        "num_ids": 43
    },
    {
        "number": 4399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    if S[0] == S[1] == S[2]:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 37
    },
    {
        "number": 4400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    count = 0\n    max_count = 0\n    for i in range(len(S) - 2):\n        if S[i] == 'R' and S[i + 1] == 'R' and S[i + 2] == 'S':\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return str(max_count)",
        "num_ids": 103
    },
    {
        "number": 4401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    a, b, c = x, y, z\n\n    a, b = b, a\n    a, c = c, a\n\n    return f\"{a} {b} {c}\"",
        "num_ids": 56
    },
    {
        "number": 4402,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if A >= 13:\n        cost = B\n    elif A >= 6 and A <= 12:\n        cost = B / 2\n    else:\n        cost = 0\n\n    print(cost)\n    return str(cost)",
        "num_ids": 65
    },
    {
        "number": 4403,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    n = len(S)\n    if n!= 4:\n        raise ValueError(\"S should have length 4\")\n\n    integer = 0\n    for symbol in S:\n        if symbol == \"+\":\n            integer += 1\n        elif symbol == \"-\":\n            integer -= 1\n        else:\n            raise ValueError(\"S should only contain + and -\")\n\n    return str(integer)",
        "num_ids": 87
    },
    {
        "number": 4404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    year, month, day = map(int, stdin.split('/'))\n    if month > 4 or (month == 4 and day >= 30):\n        return 'Heisei'\n    else:\n        return 'TBD'",
        "num_ids": 52
    },
    {
        "number": 4405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = set(a)\n    a = sorted(a)\n    max_problems = 0\n    for i in range(len(a)):\n        if i == 0:\n            max_problems += 2 * len(a)\n        else:\n            max_problems += 2 * (len(a) - i)\n    return str(max_problems)",
        "num_ids": 92
    },
    {
        "number": 4406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ids = list(map(int, stdin.split()[1:]))\n\n    # Remove the last conversation if the number of conversations is greater than k\n    if len(ids) > k:\n        ids = ids[:-1]\n\n    # Display the conversations\n    for i, id in enumerate(ids):\n        print(i + 1, end=\" \")\n\n    # Print the number of conversations shown\n    print(f\"\\n{len(ids)}\")\n\n    return \"\"",
        "num_ids": 110
    },
    {
        "number": 4407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    coins = list(map(int, stdin.split()))\n    queries = list(map(int, stdin.split()))\n\n    dp = [0] * (1 << n)\n    dp[1] = 1\n\n    for i in range(1, (1 << n)):\n        for j in range(n):\n            if i & (1 << j):\n                dp[i] = min(dp[i], dp[i ^ (1 << j)] + coins[j])\n\n    result = []\n    for query in queries:\n        if query in dp:\n            result.append(dp[query])\n        else:\n            result.append(-1)\n\n    return \" \".join(map(str, result))\n",
        "num_ids": 164
    },
    {
        "number": 4408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0].split())\n    cards = list(map(int, stdin.split()[1].split()))\n    favorite_numbers = list(map(int, stdin.split()[2].split()))\n    h = list(map(int, stdin.split()[3].split()))\n\n    def distribute_cards(cards: List[int], favorite_numbers: List[int]) -> List[List[int]]:\n        card_counts = [0] * len(favorite_numbers)\n        for card in cards:\n            for i, favorite_number in enumerate(favorite_numbers):\n                if card == favorite_number:\n                    card_counts[i] += 1\n        return [cards[i:i + k] for i in range(0, len(cards), k)]\n\n    def count_cards(cards: List[int], favorite_numbers: List[int]) -> int:\n        count = 0\n        for card in cards:\n            for i, favorite_number in enumerate(favorite_numbers):\n                if card == favorite_number:\n                    count += 1\n        return count\n\n    def max_total_joy_levels(cards: List[int], favorite_numbers: List[int]) -> int:\n        distributions = distribute_cards(cards, favorite_numbers)\n        max_total_joy_level = 0\n        for distribution in distributions:\n            total_joy_level = sum(h[t - 1] for t in range(1, k + 1) if count_cards(distribution, favorite_numbers) >= t)\n            max_total_joy_level = max(max_total_joy_level, total_joy_level)\n        return max_total_joy_level\n\n    return str(max_total_joy_levels(cards, favorite_numbers))",
        "num_ids": 390
    },
    {
        "number": 4409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def find_min_operations(a: list) -> int:\n        min_operations = 0\n        for i in range(len(a) - 1):\n            if abs(a[i] - a[i + 1]) > 10**18:\n                return -1\n            if abs(a[i] - a[i + 1]) == 1:\n                min_operations += 1\n        return min_operations\n\n    min_operations = find_min_operations(a)\n    if min_operations == -1:\n        return \"Impossible\"\n\n    operations = []\n    for i in range(len(a) - 1):\n        if abs(a[i] - a[i + 1]) == 1:\n            operations.append((1, i, i + 1))\n        elif abs(a[i] - a[i + 1]) > 10**18:\n            return \"Impossible\"\n\n    operations.sort(key=lambda x: (x[0], x[1], x[2]))\n    for operation in operations:\n        print(operation)\n\n    return str(min_operations)\n",
        "num_ids": 277
    },
    {
        "number": 4410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    count = 0\n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n            if count > k:\n                return '0'\n    return str(count)",
        "num_ids": 68
    },
    {
        "number": 4411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n\n    segments.sort(key=lambda x: x[0])\n    bad_points = set()\n    for i in range(n):\n        if i > 0 and segments[i][0] <= segments[i - 1][1]:\n            bad_points.add(i)\n        if len(bad_points) > k:\n            break\n\n    return str(len(bad_points)) + '\\n' +''.join(map(str, bad_points))",
        "num_ids": 149
    },
    {
        "number": 4412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split()[0])\n    n = int(stdin.split()[1])\n    a = list(map(int, stdin.split()[2:]))\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def is_divisible(a, b):\n        return a % b == 0\n\n    def max_prettiness(a, b, c):\n        return max(a, b, c)\n\n    def max_total_prettiness(a, b, c):\n        return max(a + b + c, a + b, a + c, b + c, a, b, c)\n\n    def max_contest_prettiness(a, b, c):\n        return max(a, b, c)\n\n    def max_contest_total_prettiness(a, b, c):\n        return max(a + b + c, a + b, a + c, b + c, a, b, c)\n\n    def max_contest_total_prettiness_from_pool(a, b, c):\n        return max(a + b + c, a + b, a + c, b + c, a, b, c)\n\n    def max_contest_total_prettiness_from_pool_with_superstitions(a, b, c):\n        return max(a + b + c, a + b, a + c, b + c, a, b, c)\n\n    def max_contest_total_prettiness_from_pool_without_superstitions(a, b, c):\n        return max(a + b + c, a + b, a + c, b + c, a, b, c)\n\n    def max_contest_total_prettiness_from_pool_with_superstitions_and_divisibility(a, b, c):\n        return max(a + b + c, a + b, a + c, b + c, a, b, c)\n\n    def max_contest_total_prettiness_from_pool_without_superstitions_and_divisibility(a, b, c):\n        return max(a + b + c, a + b, a + c, b + c, a, b, c)\n\n    def max_contest_total_prettiness_from_pool_with_superstitions_and_divisibility_without_superstitions(a, b, c):\n        return max(a + b + c, a + b, a + c, b + c, a, b, c)\n\n    def max_contest_total_prettiness_from_pool_without_superstitions_and_divisibility_without_superstitions(a, b, c):\n        return max(a + b + c, a + b, a + c, b + c, a, b, c)\n\n    def max_contest_total_prettiness_from_pool_with_superstitions_and_divisibility_without_superstitions_and_divisibility(a, b, c):\n        return max(a + b + c, a + b, a + c, b + c, a, b, c)\n\n    def max_contest_total_prettiness_from_pool_without_superstitions_and_divisibility_without_superstitions_and_divisibility(a, b, c):\n        return max(a + b + c, a + b, a + c, b + c, a, b, c)\n\n    def max_contest_total_prettiness_from_pool_with_superstitions_and_divisibility_without_superstitions_and_divisibility_without_superstitions(a, b, c):\n        return max(a + b + c, a + b, a + c, b + c, a, b, c)\n\n    def max_contest_total_prettiness_from_pool_without_superstitions_and_divisibility_without_superstitions_and_divisibility_without_superstitions(a, b, c):\n        return max(a + b + c, a + b, a + c, b + c, a, b, c)\n\n    def max_contest_total_prettiness_from_pool_with_superstitions_and_divisibility_without_superstitions_and_divisibility_without_superstitions_and_divisibility(a, b, c):\n        return max(a + b + c",
        "num_ids": 1025
    },
    {
        "number": 4413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split()[0])\n    for _ in range(queries):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2:]))\n        teams = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if abs(a[i] - a[j]) > 1:\n                    teams += 1\n        print(teams)",
        "num_ids": 99
    },
    {
        "number": 4414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    def count_coins(coins: List[int], value: int) -> int:\n        count = 0\n        for coin in coins:\n            if coin <= value:\n                count += 1\n                value -= coin\n        return count\n\n    def is_possible(coins: List[int], value: int) -> bool:\n        return count_coins(coins, value) >= 1\n\n    def solve(a: int, b: int, n: int, S: int) -> str:\n        coins = [n] * a + [1] * b\n        coins.sort(reverse=True)\n\n        for i in range(len(coins)):\n            for j in range(i + 1, len(coins)):\n                if is_possible(coins[:i] + coins[j:], S - coins[i] - coins[j]):\n                    return \"YES\"\n\n        return \"NO\"\n\n    q = int(stdin.split()[0])\n    for _ in range(q):\n        a, b, n, S = map(int, stdin.split()[1:])\n        print(solve(a, b, n, S))",
        "num_ids": 302
    },
    {
        "number": 4415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    increasing = []\n    decreasing = []\n\n    for i in range(n):\n        if a[i] > a[i + 1]:\n            increasing.append(a[i])\n        elif a[i] < a[i + 1]:\n            decreasing.append(a[i])\n        else:\n            increasing.append(a[i])\n            decreasing.append(a[i])\n\n    if len(increasing) == 0 or len(decreasing) == 0:\n        return \"NO\"\n\n    increasing.sort()\n    decreasing.sort(reverse=True)\n\n    return \"YES\\n\" + str(len(increasing)) + \"\\n\" + \" \".join(map(str, increasing)) + \"\\n\" + str(len(decreasing)) + \"\\n\" + \" \".join(map(str, decreasing)) + \"\\n\" + str(len(increasing) + len(decreasing)) + \"\\n\" + \" \".join(map(str, increasing + decreasing))",
        "num_ids": 248
    },
    {
        "number": 4416,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    books = []\n    for _ in range(n):\n        t, a, b = map(int, stdin.split())\n        books.append((t, a, b))\n\n    books.sort(key=lambda x: x[0])\n\n    alice_likes = 0\n    bob_likes = 0\n    total_time = 0\n\n    for t, a, b in books:\n        if a:\n            alice_likes += 1\n        if b:\n            bob_likes += 1\n        total_time += t\n\n    if alice_likes >= k and bob_likes >= k:\n        return str(total_time)\n    else:\n        return \"-1\"\n",
        "num_ids": 156
    },
    {
        "number": 4417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split()[0])\n    stdin = stdin.split('\\n')[1:]\n\n    for query in stdin:\n        n, k = map(int, query.split())\n        a = list(map(int, stdin.readline().split()))\n\n        def solve(prices: list, target: int) -> int:\n            prices.sort()\n            left, right = 0, len(prices) - 1\n            while left < right:\n                mid = (left + right) // 2\n                if prices[mid] - target <= k:\n                    left = mid + 1\n                else:\n                    right = mid\n            return prices[left]\n\n        max_price = solve(a, k)\n        if max_price == k:\n            print(-1)\n        else:\n            print(max_price)",
        "num_ids": 174
    },
    {
        "number": 4418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def is_good(a: list) -> bool:\n        return len(a) % 6 == 0 and all(x in [4, 8, 15, 16, 23, 42] for x in a)\n\n    def remove_min(a: list) -> int:\n        min_index = a.index(min(a))\n        return a[:min_index] + a[min_index + 1:]\n\n    def remove_max(a: list) -> int:\n        max_index = a.index(max(a))\n        return a[:max_index] + a[max_index + 1:]\n\n    def remove_min_max(a: list) -> int:\n        min_index = a.index(min(a))\n        max_index = a.index(max(a))\n        return a[:min_index] + a[max_index + 1:]\n\n    def remove_min_max_min(a: list) -> int:\n        min_index = a.index(min(a))\n        max_index = a.index(max(a))\n        min_max_index = a.index(min(a[min_index + 1:max_index]))\n        return a[:min_index] + a[min_max_index + 1:]\n\n    def remove_min_max_min_max(a: list) -> int:\n        min_index = a.index(min(a))\n        max_index = a.index(max(a))\n        min_max_index = a.index(min(a[min_index + 1:max_index]))\n        max_min_index = a.index(max(a[max_index + 1:min_index]))\n        return a[:min_index] + a[max_min_index + 1:]\n\n    def remove_min_max_min_max_min(a: list) -> int:\n        min_index = a.index(min(a))\n        max_index = a.index(max(a))\n        min_max_index = a.index(min(a[min_index + 1:max_index]))\n        max_min_index = a.index(max(a[max_index + 1:min_index]))\n        min_max_min_index = a.index(min(a[min_max_index + 1:max_min_index]))\n        return a[:min_index] + a[min_max_min_index + 1:]\n\n    def remove_min_max_min_max_min_max(a: list) -> int:\n        min_index = a.index(min(a))\n        max_index = a.index(max(a))\n        min_max_index = a.index(min(a[min_index + 1:max_index]))\n        max_min_index = a.index(max(a[max_index + 1:min_index]))\n        min_max_min_index = a.index(min(a[min_max_index + 1:max_min_index]))\n        max_min_max_index = a.index(max(a[max_min_index + 1:min_max_index]))\n        return a[:min_index] + a[max_min_max_index + 1:]\n\n    def remove_min_max_min_max_min_max_min(a: list) -> int:\n        min_index = a.index(min(a))\n        max_index = a.index(max(a))\n        min_max_index = a.index(min(a[min_index + 1:max_index]))\n        max_min_index = a.index(max(a[max_index + 1:min_index]))\n        min_max_min_index = a.index(min(a[min_max_index + 1:max_min_index]))\n        max_min_max_index = a.index(max(a[max_min_index + 1:min_max_index]))\n        min_max_min_max_index = a.index(min(a[min_max_min_index + 1:max_min_max_index]))\n        return a[:min_index] + a[min_max_min_max_index + 1:]\n\n    def remove_min_max_min_max_min_max_min_",
        "num_ids": 1025
    },
    {
        "number": 4419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        a, b = map(int, stdin.split()[1:])\n        moves = 0\n        while a!= b:\n            k = random.randint(1, 10)\n            if a < b:\n                a += k\n            else:\n                a -= k\n            moves += 1\n        print(moves)",
        "num_ids": 86
    },
    {
        "number": 4420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        x, y, n = map(int, stdin.split()[1:])\n        k = 0\n        while k <= n and k % x!= y:\n            k += 1\n        print(k)",
        "num_ids": 64
    },
    {
        "number": 4421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def can_give(boxes, candies):\n        total_candies = sum(candies)\n        for i in range(len(boxes) - 1):\n            for j in range(i + 1, len(boxes)):\n                if candies[i] + candies[j] == total_candies:\n                    return True\n        return False\n\n    boxes = []\n    for i in range(n):\n        boxes.append(i)\n\n    max_boxes = 0\n    while boxes:\n        candies = [d[boxes.pop(0)]]\n        while boxes and can_give(boxes, candies):\n            candies.append(d[boxes.pop(0)])\n\n        if len(candies) % k == 0:\n            max_boxes = max(max_boxes, len(boxes))\n\n    return str(max_boxes)",
        "num_ids": 262
    },
    {
        "number": 4422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    S = stdin.split()[1]\n    return S[:K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S[K-1].upper() + S[K-1].lower() + S",
        "num_ids": 1025
    },
    {
        "number": 4423,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *restaurants = map(int, stdin.split())\n    restaurants.sort(key=lambda x: (x[0], -x[1]))\n    return '\\n'.join(str(i) for i in range(1, n+1))",
        "num_ids": 59
    },
    {
        "number": 4424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    if k * 500 + k * 250 + k * 100 + k * 50 + k * 20 + k * 10 + k * 5 + k * 1 + k * 0.5 == x:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 87
    },
    {
        "number": 4425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N < 1 or N > 10**5 or K < 1 or K > 10**5:\n        return \"Invalid input\"\n\n    def probability(score: int) -> float:\n        if score == 0:\n            return 1\n        elif score == K:\n            return 0\n        else:\n            return 1 / (4 * (score - 1) + 1)\n\n    total_probability = 0\n    for i in range(1, N + 1):\n        total_probability += probability(i)\n\n    return f\"{total_probability:.9f}\"",
        "num_ids": 141
    },
    {
        "number": 4426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT']\n    today = stdin.upper()\n    next_sunday = days.index(today) + 7\n    return str(next_sunday)",
        "num_ids": 60
    },
    {
        "number": 4427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = map(int, stdin.split())\n    x_2001 = r * x_2000 - D\n    x_2002 = r * x_2001 - D\n    x_2003 = r * x_2002 - D\n    x_2004 = r * x_2003 - D\n    x_2005 = r * x_2004 - D\n    x_2006 = r * x_2005 - D\n    x_2007 = r * x_2006 - D\n    x_2008 = r * x_2007 - D\n    x_2009 = r * x_2008 - D\n    x_2010 = r * x_2009 - D\n\n    return f\"{x_2001}\\n{x_2002}\\n{x_2003}\\n{x_2004}\\n{x_2005}\\n{x_2006}\\n{x_2007}\\n{x_2008}\\n{x_2009}\\n{x_2010}\"",
        "num_ids": 293
    },
    {
        "number": 4428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = list(map(int, stdin.split()[1:]))\n\n    def split(d: list, a: int, b: int, c: int) -> int:\n        if a == 0 and b == 0 and c == 0:\n            return 0\n\n        if a == 0:\n            return split(d[b:], b, b + c, c)\n\n        if b == 0:\n            return split(d[a:], a, a + c, c)\n\n        if c == 0:\n            return split(d[a:a + b], a, a + b, b)\n\n        if a + b + c == n:\n            return 0\n\n        if a + b + c == n - 1:\n            return d[a]\n\n        if d[a] + d[a + b + 1] <= d[a + 1]:\n            return split(d, a + 1, b, c)\n\n        return split(d, a, b + 1, c)\n\n    return str(split(d, 0, 0, 0))",
        "num_ids": 249
    },
    {
        "number": 4429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        x, y, z = map(int, stdin.split()[1:])\n        if x == max(x, y) and y == max(x, z) and z == max(y, z):\n            print(\"YES\")\n            print(x, y, z)\n        else:\n            print(\"NO\")",
        "num_ids": 87
    },
    {
        "number": 4430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def pack(boxes, objects):\n        if not objects:\n            return 0, boxes\n\n        box, objects = boxes[0], objects[1:]\n        if box[1] >= objects[0]:\n            box[1] -= objects[0]\n            return objects[0], boxes\n        else:\n            return pack(boxes[1:], objects)\n\n    boxes = [(k, a[0])]\n    max_objects = 0\n\n    while boxes:\n        objects = [a.pop(0) for _ in range(n)]\n        objects.sort(reverse=True)\n        objects = objects[:m]\n        objects.sort(reverse=True)\n        objects = objects[:n]\n        objects.sort(reverse=True)\n\n        objects_count, boxes = pack(boxes, objects)\n        max_objects = max(max_objects, objects_count)\n\n    return str(max_objects)",
        "num_ids": 217
    },
    {
        "number": 4431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[2]\n    c = stdin.split()[3]\n\n    def count_substrings(s: str, c: str) -> int:\n        count = 0\n        for i in range(len(s)):\n            for j in range(i + 1, len(s) + 1):\n                if all(c in s[i:j]):\n                    count += 1\n        return count\n\n    return str(count_substrings(s, c))",
        "num_ids": 117
    },
    {
        "number": 4432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def max_sum(a: list, k: int) -> int:\n        n = len(a)\n        dp = [[0] * (n + 1) for _ in range(k + 1)]\n        for i in range(1, k + 1):\n            for j in range(1, n + 1):\n                if a[j - 1] > 0:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + a[j - 1]\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[k][n]\n\n    def max_alternating_subsequence(a: list) -> int:\n        n = len(a)\n        dp = [[0] * (n + 1) for _ in range(2)]\n        for i in range(1, n + 1):\n            if a[i - 1] > 0:\n                dp[0][i] = dp[0][i - 1] + a[i - 1]\n            else:\n                dp[1][i] = dp[1][i - 1] + a[i - 1]\n        return max(dp[0][n], dp[1][n])\n\n    def max_by_size(a: list, k: int) -> int:\n        return max(max_sum(a, k), max_alternating_subsequence(a))\n\n    def max_by_size_test(a: list, k: int) -> int:\n        return max_by_size(a, k)\n\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2:2 + n]))\n        print(max_by_size_test(a, n))",
        "num_ids": 439
    },
    {
        "number": 4433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, stdin.split())) for _ in range(m)]\n\n    def find_spanning_tree(edges):\n        def dfs(parent, depth):\n            nonlocal max_degree\n            if depth == n:\n                nonlocal max_spanning_tree\n                if max_degree < degree:\n                    max_degree = degree\n                    max_spanning_tree = [vertex]\n                return\n            for vertex in range(n):\n                if vertex == parent:\n                    continue\n                if depth % 2 == 0:\n                    if vertex in visited:\n                        continue\n                else:\n                    if vertex not in visited:\n                        continue\n                visited.add(vertex)\n                degree = 0\n                for neighbor in edges[vertex]:\n                    if neighbor == parent:\n                        continue\n                    degree += 1\n                dfs(vertex, depth + 1)\n                visited.remove(vertex)\n\n        max_degree = 0\n        max_spanning_tree = []\n        visited = set()\n        for vertex in range(n):\n            degree = 0\n            for neighbor in edges[vertex]:\n                if neighbor == vertex:\n                    continue\n                degree += 1\n            dfs(vertex, 0)\n        return max_spanning_tree\n\n    spanning_tree = find_spanning_tree(edges)\n    return \"\\n\".join(map(str, spanning_tree))\n",
        "num_ids": 301
    },
    {
        "number": 4434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        board = [[0] * n for _ in range(n)]\n        moves = 0\n        for i in range(n):\n            for j in range(n):\n                if board[i][j] == 0:\n                    moves += 1\n                    for k in range(8):\n                        ni, nj = i + di[k], j + dj[k]\n                        if 0 <= ni < n and 0 <= nj < n and board[ni][nj] == 0:\n                            board[ni][nj] = board[i][j]\n                            moves += 1\n                            break\n                    else:\n                        board[i][j] = 0\n                        moves -= 1\n        print(moves)\n\ndi = [0, 0, 1, -1]\ndj = [1, -1, 0, 0]\n\nstdin = \"\"\"\n3\n1\n5\n499993\n\"\"\"\n\nsolution(stdin)",
        "num_ids": 238
    },
    {
        "number": 4435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    dp = [float('inf')] * n\n    dp[0] = 0\n\n    for i in range(1, n):\n        if a[i] % 2 == 0:\n            dp[i] = dp[i - 1] + 1\n        else:\n            dp[i] = min(dp[i - 1] + 1, dp[i + a[i]] + 1)\n\n    return''.join(map(str, dp))",
        "num_ids": 131
    },
    {
        "number": 4436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        if n == 2:\n            print(\"YES\")\n            print(\"2 2 2\")\n        elif n == 3:\n            print(\"YES\")\n            print(\"2 3 4\")\n        elif n == 4:\n            print(\"YES\")\n            print(\"2 4 6\")\n        elif n == 6:\n            print(\"YES\")\n            print(\"2 6 12\")\n        elif n == 8:\n            print(\"YES\")\n            print(\"2 8 24\")\n        elif n == 12:\n            print(\"YES\")\n            print(\"2 12 36\")\n        elif n == 24:\n            print(\"YES\")\n            print(\"2 24 72\")\n        elif n == 36:\n            print(\"YES\")\n            print(\"2 36 108\")\n        elif n == 72:\n            print(\"YES\")\n            print(\"2 72 216\")\n        elif n == 108:\n            print(\"YES\")\n            print(\"2 108 324\")\n        elif n == 216:\n            print(\"YES\")\n            print(\"2 216 648\")\n        elif n == 324:\n            print(\"YES\")\n            print(\"2 324 972\")\n        elif n == 648:\n            print(\"YES\")\n            print(\"2 648 1944\")\n        elif n == 972:\n            print(\"YES\")\n            print(\"2 972 3916\")\n        elif n == 1944:\n            print(\"YES\")\n            print(\"2 1944 7832\")\n        elif n == 3916:\n            print(\"YES\")\n            print(\"2 3916 15664\")\n        elif n == 7832:\n            print(\"YES\")\n            print(\"2 7832 31328\")\n        elif n == 15664:\n            print(\"YES\")\n            print(\"2 15664 62656\")\n        elif n == 31328:\n            print(\"YES\")\n            print(\"2 31328 125312\")\n        elif n == 62656:\n            print(\"YES\")\n            print(\"2 62656 250624\")\n        elif n == 125312:\n            print(\"YES\")\n            print(\"2 125312 501248\")\n        elif n == 250624:\n            print(\"YES\")\n            print(\"2 250624 1002496\")\n        elif n == 501248:\n            print(\"YES\")\n            print(\"2 501248 2004992\")\n        elif n == 1002496:\n            print(\"YES\")\n            print(\"2 1002496 4009984\")\n        elif n == 2004992:\n            print(\"YES\")\n            print(\"2 2004992 8019968\")\n        elif n == 4009984:\n            print(\"YES\")\n            print(\"2 4009984 16039936\")\n        elif n == 8019968:\n            print(\"YES\")\n            print(\"2 8019968 32079872\")\n        elif n == 16039936:\n            print(\"YES\")\n            print(\"2 16039936 64159744\")\n        elif n == 32079872:\n            print(\"YES\")\n            print(\"2 32079872 128319488\")\n        elif n == 64159744:\n            print(\"YES\")\n            print(\"2 64159744 256638976\")\n        elif n == 128319488:\n            print(\"YES\")\n            print(\"2 128319488 513277952\")\n        elif n == 256638976:\n            print(\"",
        "num_ids": 1025
    },
    {
        "number": 4437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    operations = 0\n    result = \"\"\n    for i in range(1, n, 2):\n        if s[i] == 'a':\n            operations += 1\n            result += 'b'\n        else:\n            operations += 1\n            result += 'a'\n    return str(operations) + \"\\n\" + result",
        "num_ids": 90
    },
    {
        "number": 4438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.split()[1:])\n        points.append((x, y))\n    points.sort(key=lambda x: (x[0], x[1]))\n    min_level = min(p[0] for p in points)\n    max_level = max(p[0] for p in points)\n    min_x = min(p[1] for p in points if p[0] == min_level)\n    max_x = max(p[1] for p in points if p[0] == max_level)\n    min_y = min(p[1] for p in points if p[0] == min_level and p[1] == min_x)\n    max_y = max(p[1] for p in points if p[0] == max_level and p[1] == max_x)\n    min_points = [(x, y) for x in range(min_x, max_x + 1) for y in range(min_y, max_y + 1) if (x, y) not in points]\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))\n    min_points.sort(key=lambda x: (x[0], x[1]))",
        "num_ids": 1025
    },
    {
        "number": 4439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return \"1\"\n    elif a == 1 and b == 2:\n        return \"2\"\n    elif a == 2 and b == 3:\n        return \"3\"\n    else:\n        return \"1\"",
        "num_ids": 67
    },
    {
        "number": 4440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    max_volume = 0\n    for i in range(1, L + 1):\n        for j in range(1, L + 1):\n            for k in range(1, L + 1):\n                volume = i * j * k\n                if volume > max_volume:\n                    max_volume = volume\n    return str(max_volume)",
        "num_ids": 84
    },
    {
        "number": 4441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n == 1:\n        print(\"Hello World\")\n    else:\n        print(a + b)\n    return \"\"",
        "num_ids": 42
    },
    {
        "number": 4442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a_str = str(a) * b\n    b_str = str(b) * a\n    return a_str if a_str < b_str else b_str",
        "num_ids": 53
    },
    {
        "number": 4443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.lower()\n    if c == 'z':\n        return 'z'\n    else:\n        return chr(ord(c) + 1)",
        "num_ids": 35
    },
    {
        "number": 4444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return t + s",
        "num_ids": 15
    },
    {
        "number": 4445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def parity(x: int) -> int:\n        return 1 if x % 2 == 0 else 0\n\n    def min_sum(a: list) -> int:\n        return min(sum(a[i] for i in range(len(a)) if i!= j) for j in range(len(a)))\n\n    def min_sum_after_move(a: list, i: int) -> int:\n        if i == 0:\n            return min_sum(a)\n        if a[i - 1] % 2 == 0:\n            return min_sum_after_move(a, i - 1)\n        return min_sum_after_move(a, i - 1) + a[i - 1]\n\n    def min_sum_after_moves(a: list) -> int:\n        return min_sum_after_move(a, len(a) - 1)\n\n    return str(min_sum_after_moves(a))\n",
        "num_ids": 246
    },
    {
        "number": 4446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n\n    def fight(i, turn):\n        if i == n:\n            return 0, 0\n\n        if turn == 1:\n            if h[i] <= a:\n                return 0, 0\n            h[i] -= a\n            return 1, 0\n\n        if turn == k:\n            return 0, 0\n\n        if h[i] <= b:\n            return 0, 0\n        h[i] -= b\n        return 0, 1\n\n    points = 0\n    for i in range(n):\n        points += fight(i, 1)[0]\n        points += fight(i, k)[0]\n\n    return str(points)",
        "num_ids": 174
    },
    {
        "number": 4447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    c = [0] * m\n    for i in range(n):\n        c[a[i] % m] += 1\n\n    moves = 0\n    for i in range(m):\n        if c[i] == 0:\n            moves += 1\n        else:\n            break\n\n    if moves == 0:\n        return \"0\\n\"\n\n    result = [0] * n\n    for i in range(n):\n        result[i] = a[i]\n\n    for i in range(m):\n        if c[i] == 0:\n            continue\n        j = 0\n        while j < n and result[j] % m!= i:\n            j += 1\n        if j == n:\n            return \"Impossible\\n\"\n        result[j] += 1\n\n    return f\"{moves}\\n{result}\\n\"",
        "num_ids": 208
    },
    {
        "number": 4448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n    offers = []\n    for _ in range(m):\n        d, t = map(int, stdin.split())\n        offers.append((d, t))\n\n    def can_buy(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return True\n        return False\n\n    def min_day(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return d\n        return 0\n\n    def min_day_with_special_offers(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return d\n        return min_day(k, offers)\n\n    def min_day_with_special_offers_and_buying(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return d\n        return min_day(k, offers)\n\n    def min_day_with_special_offers_and_buying_and_selling(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return d\n        return min_day(k, offers)\n\n    def min_day_with_special_offers_and_buying_and_selling_and_special_offers(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return d\n        return min_day(k, offers)\n\n    def min_day_with_special_offers_and_buying_and_selling_and_special_offers_and_buying(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return d\n        return min_day(k, offers)\n\n    def min_day_with_special_offers_and_buying_and_selling_and_special_offers_and_buying_and_selling(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return d\n        return min_day(k, offers)\n\n    def min_day_with_special_offers_and_buying_and_selling_and_special_offers_and_buying_and_selling_and_special_offers(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return d\n        return min_day(k, offers)\n\n    def min_day_with_special_offers_and_buying_and_selling_and_special_offers_and_buying_and_selling_and_special_offers_and_buying(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return d\n        return min_day(k, offers)\n\n    def min_day_with_special_offers_and_buying_and_selling_and_special_offers_and_buying_and_selling_and_special_offers_and_buying_and_selling(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return d\n        return min_day(k, offers)\n\n    def min_day_with_special_offers_and_buying_and_selling_and_special_offers_and_buying_and_selling_and_special_offers_and_buying_and_selling_and_special_offers(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return d\n        return min_day(k, offers)\n\n    def min_day_with_special_offers_and_buying_and_selling_and_special_offers_and_buying_and_selling_and_special_offers_and_buying_and_selling_and_special_offers_and_buying(k, offers):\n        for d, t in offers:\n            if k >= d:\n                k -= d\n                if k >= 1:\n                    return d\n        return min_day(k",
        "num_ids": 1025
    },
    {
        "number": 4449,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split()[0])\n    for _ in range(queries):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2:]))\n        if is_possible(a, n):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\ndef",
        "num_ids": 73
    },
    {
        "number": 4450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        x, y, w = map(int, stdin.split())\n        graph[x].append((y, w))\n        graph[y].append((x, w))\n\n    def dijkstra(start: int) -> list:\n        dist = [float('inf')] * (n + 1)\n        dist[start] = 0\n        pq = [(0, start)]\n        while pq:\n            d, u = heappop(pq)\n            if d > dist[u]:\n                continue\n            for v, w in graph[u]:\n                if dist[u] + w < dist[v]:\n                    dist[v] = dist[u] + w\n                    heappush(pq, (dist[v], v))\n        return dist\n\n    def kth_smallest(dist: list, k: int) -> int:\n        return sorted(dist, reverse=True)[k - 1]\n\n    dist = dijkstra(1)\n    return str(kth_smallest(dist, k))",
        "num_ids": 254
    },
    {
        "number": 4451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    max_div = max(a) - min(a)\n    teams = [[] for _ in range(n)]\n    for i in range(n):\n        j = bisect_left(a, a[i])\n        teams[j].append(i)\n    res = max_div\n    for team in teams:\n        if len(team) < 3:\n            continue\n        team.sort()\n        min_div = max(team) - min(team)\n        res = min(res, min_div)\n    return f\"{res} {len(teams)}\"\n\ndef",
        "num_ids": 145
    },
    {
        "number": 4452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        if n == 1:\n            print(1)\n        else:\n            count = 0\n            num = n\n            while num > 0:\n                if num % 10 == 0:\n                    count += 1\n                num //= 10\n            print(count)\n            for i in range(count):\n                print(n)\n                n -= 1",
        "num_ids": 108
    },
    {
        "number": 4453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split()[0])\n    for _ in range(queries):\n        n, *p = map(int, stdin.split()[1:])\n        p = list(p)\n        p.sort()\n        dp = [0] * n\n        for i in range(n):\n            dp[i] = p.index(i + 1) + 1\n        print(\" \".join(map(str, dp)))",
        "num_ids": 94
    },
    {
        "number": 4454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split()[0])\n    for _ in range(queries):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2:]))\n        a.sort()\n        print(a[0])",
        "num_ids": 59
    },
    {
        "number": 4455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = list(map(int, stdin.split()))\n    pairs = []\n    for _ in range(k):\n        x, y = map(int, stdin.split())\n        pairs.append((x - 1, y - 1))\n\n    mentors = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if skills[i] > skills[j] and (i, j) not in pairs and (j, i) not in pairs:\n                mentors[i].append(j)\n                mentors[j].append(i)\n\n    result = []\n    for i in range(n):\n        result.append(len(mentors[i]))\n\n    return \" \".join(map(str, result))\n",
        "num_ids": 188
    },
    {
        "number": 4456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    q = list(map(int, stdin.split()))\n\n    def is_valid(s: str) -> bool:\n        return len(set(s)) >= k\n\n    def restore_string(p: List[int], q: List[int]) -> str:\n        s = [chr(ord('a') + i) for i in range(n)]\n        for i in range(n):\n            s[p[i] - 1], s[q[i] - 1] = s[q[i] - 1], s[p[i] - 1]\n        return ''.join(s)\n\n    if is_valid(restore_string(p, q)):\n        return \"YES\\n\" + restore_string(p, q)\n    else:\n        return \"NO\\n\"",
        "num_ids": 201
    },
    {
        "number": 4457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort(reverse=True)\n    shots = 0\n    for i in range(n):\n        shots += a[i]\n    return str(shots)",
        "num_ids": 52
    },
    {
        "number": 4458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *p = map(int, stdin.split())\n    p = sorted(p)\n    count = 0\n    for i in range(n):\n        if p[i] <= p[i + 1]:\n            count += 1\n    return str(count)",
        "num_ids": 60
    },
    {
        "number": 4459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # Count the occurrences of each element in a\n    count = {}\n    for num in a:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    # Find the elements that need to be removed\n    min_count = min(count.values())\n    elements_to_remove = [num for num, count in count.items() if count == min_count]\n\n    # Remove the elements that need to be removed\n    for num in elements_to_remove:\n        a.remove(num)\n\n    # Check if a is a good sequence\n    count = {}\n    for num in a:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    for num, count in count.items():\n        if count!= min_count:\n            return str(len(elements_to_remove))\n\n    return str(len(elements_to_remove))",
        "num_ids": 232
    },
    {
        "number": 4460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n    snuke_choice = x_1 if x_1!= 0 else x_2 if x_2!= 0 else x_3 if x_3!= 0 else x_4 if x_4!= 0 else x_5\n    return str(snuke_choice)",
        "num_ids": 92
    },
    {
        "number": 4461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    S_max = H * W\n    S_min = 0\n\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            S = i * j\n            if S > S_max:\n                S_max = S\n            if S < S_min:\n                S_min = S\n\n    return str(S_max - S_min)",
        "num_ids": 101
    },
    {
        "number": 4462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def is_valid(a: list) -> bool:\n        for i in range(N - 1):\n            if a[i] * a[i + 1] % 4!= 0:\n                return False\n        return True\n\n    if is_valid(a):\n        print(\"Yes\")\n    else:\n        print(\"No\")",
        "num_ids": 100
    },
    {
        "number": 4463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s = list(s)\n    t = list(t)\n\n    def is_lexicographically_smaller(s: list, t: list) -> bool:\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] < t[j]:\n                return True\n            elif s[i] > t[j]:\n                return False\n            i += 1\n            j += 1\n        return i < len(s)\n\n    return \"Yes\" if is_lexicographically_smaller(s, t) else \"No\"",
        "num_ids": 140
    },
    {
        "number": 4464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    if a % b!= 0:\n        return \"NO\"\n\n    if a == 1:\n        return \"YES\"\n\n    if b % a!= 0:\n        return \"NO\"\n\n    if b == 1:\n        return \"YES\"\n\n    if c % b!= 0:\n        return \"NO\"\n\n    if c == 0:\n        return \"YES\"\n\n    if c % a!= 0:\n        return \"NO\"\n\n    if c == 1:\n        return \"YES\"\n\n    if c % (a * b)!= 0:\n        return \"NO\"\n\n    return \"YES\"\n",
        "num_ids": 143
    },
    {
        "number": 4465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    area = a * b\n    print(area)\n    return \"\"",
        "num_ids": 28
    },
    {
        "number": 4466,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    if Y + 2 * Z > X:\n        return \"Not enough room\"\n    else:\n        return (X - Y - 2 * Z) // (Y + 2 * Z)",
        "num_ids": 58
    },
    {
        "number": 4467,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    red_points = []\n    blue_points = []\n\n    for i in range(n):\n        a, b = map(int, stdin.split()[i + 1].split())\n        red_points.append((a, b))\n\n    for i in range(n):\n        c, d = map(int, stdin.split()[i + 1].split())\n        blue_points.append((c, d))\n\n    red_points.sort(key=lambda x: (x[0], x[1]))\n    blue_points.sort(key=lambda x: (x[0], x[1]))\n\n    count = 0\n    i = 0\n    j = 0\n\n    while i < n and j < n:\n        if red_points[i][0] < blue_points[j][0] and red_points[i][1] < blue_points[j][1]:\n            count += 1\n            i += 1\n            j += 1\n        elif red_points[i][0] < blue_points[j][0]:\n            i += 1\n        else:\n            j += 1\n\n    return str(count)\n",
        "num_ids": 260
    },
    {
        "number": 4468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    t_list = list(map(int, stdin.split()))\n\n    total_time = 0\n    for i in range(n):\n        total_time += t_list[i]\n\n    return str(total_time)",
        "num_ids": 63
    },
    {
        "number": 4469,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    shelf = [1]\n\n    for query_type, id in queries:\n        if query_type == 1:\n            shelf.append(shelf.pop(0))\n        elif query_type == 2:\n            shelf.insert(0, shelf.pop())\n        elif query_type == 3:\n            left_books = [shelf[i] for i in range(len(shelf)) if i < id]\n            right_books = [shelf[i] for i in range(len(shelf)) if i > id]\n            min_books = min(len(left_books), len(right_books))\n            print(min_books)\n\n    return '\\n'.join(map(str, shelf))",
        "num_ids": 183
    },
    {
        "number": 4470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    q = int(stdin.split()[1])\n    moves = []\n\n    for _ in range(q):\n        n = int(stdin.split()[1])\n        if n == 1:\n            moves.append(0)\n        elif n % 2 == 0 and n % 3 == 0 and n % 5 == 0:\n            moves.append(6)\n        elif n % 2 == 0 and n % 3 == 0:\n            moves.append(4)\n        elif n % 2 == 0 and n % 5 == 0:\n            moves.append(5)\n        elif n % 3 == 0 and n % 5 == 0:\n            moves.append(4)\n        elif n % 2 == 0:\n            moves.append(3)\n        else:\n            moves.append(2)\n\n    return \"\\n\".join(map(str, moves))",
        "num_ids": 208
    },
    {
        "number": 4471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2:]))\n        a.reverse()\n        for i in range(n):\n            if a[i] > 0:\n                a[i] -= 2\n                if a[i] == 0:\n                    a[i] = 1\n        if all(a[i] > 0 for i in range(n)):\n            print(\"YES\")\n        else:\n            print(\"NO\")",
        "num_ids": 127
    },
    {
        "number": 4472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1]\n    b = stdin.split()[2]\n\n    def preprocess_move(i: int, c: str) -> str:\n        return a[:i] + c + a[i:]\n\n    def swap(i: int, j: int) -> str:\n        return a[:i] + b[j] + a[i+1:]\n\n    def preprocess_moves(i: int, j: int) -> int:\n        if i == j:\n            return 0\n        elif i < j:\n            return preprocess_moves(i+1, j)\n        else:\n            return preprocess_moves(i, j-1)\n\n    def preprocess_moves_to_equal(i: int, j: int) -> int:\n        if i == j:\n            return 0\n        elif i < j:\n            return preprocess_moves_to_equal(i+1, j)\n        else:\n            return preprocess_moves_to_equal(i, j-1)\n\n    def preprocess_moves_to_equal_with_swap(i: int, j: int) -> int:\n        if i == j:\n            return 0\n        elif i < j:\n            return preprocess_moves_to_equal_with_swap(i+1, j)\n        else:\n            return preprocess_moves_to_equal_with_swap(i, j-1)\n\n    def preprocess_moves_to_equal_with_swap_and_preprocess_move(i: int, j: int) -> int:\n        if i == j:\n            return 0\n        elif i < j:\n            return preprocess_moves_to_equal_with_swap_and_preprocess_move(i+1, j)\n        else:\n            return preprocess_moves_to_equal_with_swap_and_preprocess_move(i, j-1)\n\n    def preprocess_moves_to_equal_with_preprocess_move(i: int, j: int) -> int:\n        if i == j:\n            return 0\n        elif i < j:\n            return preprocess_moves_to_equal_with_preprocess_move(i+1, j)\n        else:\n            return preprocess_moves_to_equal_with_preprocess_move(i, j-1)\n\n    def preprocess_moves_to_equal_with_preprocess_move_and_swap(i: int, j: int) -> int:\n        if i == j:\n            return 0\n        elif i < j:\n            return preprocess_moves_to_equal_with_preprocess_move_and_swap(i+1, j)\n        else:\n            return preprocess_moves_to_equal_with_preprocess_move_and_swap(i, j-1)\n\n    def preprocess_moves_to_equal_with_preprocess_move_and_swap_and_preprocess_move(i: int, j: int) -> int:\n        if i == j:\n            return 0\n        elif i < j:\n            return preprocess_moves_to_equal_with_preprocess_move_and_swap_and_preprocess_move(i+1, j)\n        else:\n            return preprocess_moves_to_equal_with_preprocess_move_and_swap_and_preprocess_move(i, j-1)\n\n    def preprocess_moves_to_equal_with_preprocess_move_and_swap_and_preprocess_move_and_swap(i: int, j: int) -> int:\n        if i == j:\n            return 0\n        elif i < j:\n            return preprocess_moves_to_equal_with_preprocess_move_and_swap_and_preprocess_move_and_swap(i+1, j)\n        else:\n            return preprocess_moves_to_equal_with_preprocess_move_and_swap_and_preprocess_move_and_swap(i, j-1)\n\n    def preprocess_moves_to_equal_with_preprocess_move_and_swap_and_preprocess_move_and_swap_and_preprocess_move(i: int, j: int) -> int:\n        if i == j:\n            return 0\n        elif i < j:\n            return preprocess_moves_to_equal_with_preprocess_move_and_swap_and_preprocess_move_and_swap_and_preprocess_move(i+1, j)\n        else:\n            return preprocess_moves_to_equal_with_preprocess_move_and_swap_and_preprocess_move_and_swap_and_preprocess_move(i, j-1)\n\n    def preprocess_moves_to_equal_with_preprocess_move_and_swap_",
        "num_ids": 1025
    },
    {
        "number": 4473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    result = []\n\n    for query in queries:\n        a, b, k = query\n        frog_position = 0\n        jumps = 0\n\n        while jumps < k:\n            if jumps % 2 == 0:\n                frog_position += a\n            else:\n                frog_position -= b\n            jumps += 1\n\n        result.append(frog_position)\n\n    return '\\n'.join(map(str, result))",
        "num_ids": 118
    },
    {
        "number": 4474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[1])\n    q = int(stdin.split()[0])\n    good_numbers = set()\n    for i in range(1, n + 1):\n        if i % 3 == 0:\n            good_numbers.add(i)\n    for i in range(1, n + 1):\n        if i % 3 == 0:\n            for j in range(i + 1, n + 1):\n                if j % 3 == 0:\n                    if i + j not in good_numbers:\n                        good_numbers.add(i + j)\n    return \" \".join(map(str, good_numbers))",
        "num_ids": 147
    },
    {
        "number": 4475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        a, b, x, y, n = map(int, stdin.split()[1:])\n        a, b, x, y = max(x, a), max(y, b), min(x, a), min(y, b)\n        if a >= x and b >= y:\n            print(a * b)\n        else:\n            print(-1)",
        "num_ids": 99
    },
    {
        "number": 4476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        a, b = map(int, stdin.split()[1:])\n        moves = 0\n        while a!= b:\n            if a % 2 == 1:\n                a += 1\n            else:\n                a -= 1\n            moves += 1\n        print(moves)",
        "num_ids": 79
    },
    {
        "number": 4477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        x = int(stdin.split()[1])\n        count = 0\n        for i in range(1, 10):\n            if x // 10 ** i == x % 10:\n                count += i\n        print(count)",
        "num_ids": 73
    },
    {
        "number": 4478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    sequences = []\n    for _ in range(k):\n        n_i = int(stdin.split()[0])\n        sequence = list(map(int, stdin.split()[1:]))\n        sequences.append((n_i, sequence))\n\n    def is_valid(i, j, x, y):\n        return x < n_i and y < n_j and x!= y\n\n    for i in range(k):\n        for j in range(i + 1, k):\n            n_j = sequences[j][0]\n            for x in range(n_i):\n                for y in range(n_j):\n                    if is_valid(i, j, x, y):\n                        return \"YES\", i + 1, j + 1, x + 1, y + 1\n\n    return \"NO\"",
        "num_ids": 192
    },
    {
        "number": 4479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    max_sum = float('-inf')\n    for i in range(len(A)):\n        for j in range(K):\n            if i == j:\n                continue\n            A[i] = -A[i]\n            max_sum = max(max_sum, sum(A))\n            A[i] = -A[i]\n    return str(max_sum)",
        "num_ids": 107
    },
    {
        "number": 4480,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    n = len(A)\n    if n < 3:\n        return \"false\"\n\n    A.sort()\n    A.append(0)\n\n    for i in range(n - 2):\n        if A[i] + A[i + 1] + A[i + 2] == A[i + 3] + A[i + 4] + A[i + 5]:\n            return \"true\"\n\n    return \"false\"\n",
        "num_ids": 113
    },
    {
        "number": 4481,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    votes = stdin.split()[1:]\n    votes.sort()\n    result = []\n    for vote in votes:\n        if vote not in result:\n            result.append(vote)\n    return \" \".join(result)",
        "num_ids": 58
    },
    {
        "number": 4482,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    a.sort()\n    total_cost = 0\n\n    for i in range(N):\n        if i == 0 or a[i]!= a[i - 1]:\n            total_cost += (a[i] - a[i - 1]) ** 2\n\n    return str(total_cost)",
        "num_ids": 96
    },
    {
        "number": 4483,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    cake_cost = a * 1000\n    donut_cost = b * 500\n    total_cost = cake_cost + donut_cost\n    left_amount = x - total_cost\n    return str(left_amount)",
        "num_ids": 73
    },
    {
        "number": 4484,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    MOD = 10**9 + 7\n\n    def dfs(start, end, used_dogs, used_monkeys):\n        if start == end:\n            return 1\n\n        if (start, end) in used_dogs or (start, end) in used_monkeys:\n            return 0\n\n        if start % 2 == 0:\n            used_dogs.add((start, end))\n            result = dfs(start + 1, end, used_dogs, used_monkeys)\n            used_dogs.remove((start, end))\n            return result\n\n        used_monkeys.add((start, end))\n        result = dfs(start + 1, end, used_dogs, used_monkeys)\n        used_monkeys.remove((start, end))\n        return result\n\n    return str(dfs(0, N + M - 1, set(), set()))",
        "num_ids": 208
    },
    {
        "number": 4485,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    islands = list(map(int, stdin.split()))\n    islands.sort()\n    islands = [1] + islands + [n]\n\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            if (i, j)!= (1, n) and (j, i)!= (1, n):\n                if islands[i] == islands[j]:\n                    return \"IMPOSSIBLE\"\n\n    return \"POSSIBLE\"\n",
        "num_ids": 122
    },
    {
        "number": 4486,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    result = \"\"\n    for i in range(1, len(s), 2):\n        result += s[i]\n    return result",
        "num_ids": 37
    },
    {
        "number": 4487,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    if A[-1] == B[0] and B[-1] == C[0]:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "num_ids": 46
    },
    {
        "number": 4488,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return \"GREATER\"\n    elif a < b:\n        return \"LESS\"\n    else:\n        return \"EQUAL\"",
        "num_ids": 45
    },
    {
        "number": 4489,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *s = map(str, stdin.split())\n    m, *t = map(str, stdin.split())\n\n    s_set = set(s)\n    t_set = set(t)\n\n    earn = 0\n    lose = 0\n\n    for i in range(n):\n        if s[i] in s_set and t[i] in t_set:\n            earn += 1\n        else:\n            lose += 1\n\n    return str(max(0, earn - lose))",
        "num_ids": 113
    },
    {
        "number": 4490,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin.strip()\n    if b == 'A':\n        return 'T'\n    elif b == 'C':\n        return 'G'\n    elif b == 'G':\n        return 'C'\n    else:\n        return 'A'",
        "num_ids": 52
    },
    {
        "number": 4491,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *grid = map(int, stdin.split())\n    candies = [0] * (n * n)\n    candies[0] = grid[0][0]\n    candies[n * n - 1] = grid[1][n - 1]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            candies[i * n + j] = grid[i][j]\n\n    def dfs(i, j, count):\n        if i == 2 and j == n:\n            return count\n\n        if i == 2:\n            return dfs(i, j + 1, count + candies[i * n + j])\n        if j == n:\n            return dfs(i + 1, j, count + candies[i * n + j])\n\n        return max(dfs(i, j + 1, count + candies[i * n + j]), dfs(i + 1, j, count + candies[i * n + j]))\n\n    return str(dfs(1, 1, 0))",
        "num_ids": 246
    },
    {
        "number": 4492,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    x = sum(a) // 2\n    a.sort()\n    count = 0\n    for i in range(n):\n        if a[i] >= x:\n            count += 1\n            a[i] -= x\n        else:\n            a[i] = 0\n    return str(count)",
        "num_ids": 81
    },
    {
        "number": 4493,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c = [[int(x) for x in row.split()] for row in stdin.split('\\n')]\n    a, b = 0, 0\n    for i in range(3):\n        for j in range(3):\n            if c[i][j] == 1:\n                a += i\n                b += j\n    if a == 0 and b == 0:\n        return 'Yes'\n    else:\n        return 'No'",
        "num_ids": 96
    },
    {
        "number": 4494,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"ABC\":\n        return \"ARC\"\n    else:\n        return \"ABC\"",
        "num_ids": 21
    },
    {
        "number": 4495,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    return str(count)",
        "num_ids": 53
    },
    {
        "number": 4496,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin)\n    if d == 25:\n        return \"Christmas\"\n    elif d == 24:\n        return \"Christmas Eve\"\n    elif d == 23:\n        return \"Christmas Eve Eve\"\n    else:\n        return \"Christmas Eve Eve Eve\"",
        "num_ids": 71
    },
    {
        "number": 4497,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_count = 0\n    max_num = 0\n    for i in range(1, n + 1):\n        count = 0\n        num = i\n        while num % 2 == 0:\n            count += 1\n            num //= 2\n        if count > max_count:\n            max_count = count\n            max_num = i\n    return str(max_num)",
        "num_ids": 93
    },
    {
        "number": 4498,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n\n    if a + b <= d or a + c <= d or b + c <= d:\n        return \"No\"\n    else:\n        return \"Yes\"",
        "num_ids": 51
    },
    {
        "number": 4499,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3 = stdin.split()\n    acronym = s1[0].upper() + s2[0].upper() + s3[0].upper()\n    return acronym",
        "num_ids": 46
    },
    {
        "number": 4500,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b >= c:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 37
    },
    {
        "number": 4501,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n\n    def count_ways(selected: list[int]) -> int:\n        total = sum(selected)\n        if total == a:\n            return 1\n        if total < a:\n            return 0\n\n        count = 0\n        for i in range(n):\n            if i not in selected:\n                count += count_ways(selected + [i])\n\n        return count\n\n    return str(count_ways([]))",
        "num_ids": 113
    },
    {
        "number": 4502,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    b = []\n    for i in range(n):\n        b.append(a[i])\n        b.reverse()\n\n    return \" \".join(map(str, b))",
        "num_ids": 66
    },
    {
        "number": 4503,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    def can_win(A: List[int]) -> bool:\n        A.sort(reverse=True)\n        for i in range(N):\n            if A[i] > H:\n                return False\n        return True\n\n    if can_win(A):\n        print(\"Yes\")\n    else:\n        print(\"No\")",
        "num_ids": 95
    },
    {
        "number": 4504,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    even_strings = []\n\n    for i in range(len(S) - 1, -1, -1):\n        if S[i:i+2] == S[i:i+2][::-1]:\n            even_strings.append(S[i:i+2])\n\n    return str(max(even_strings, key=len))",
        "num_ids": 85
    },
    {
        "number": 4505,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if len(S)!= 3 or not S.isalpha():\n        return \"No\"\n\n    a, b, c = S\n    if a == b == c:\n        return \"Yes\"\n\n    if a == b or a == c or b == c:\n        return \"No\"\n\n    return \"Yes\"",
        "num_ids": 73
    },
    {
        "number": 4506,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    b = list(map(int, stdin.split()[2].split()))\n\n    def f(l, r):\n        return sum(a[i] * b[i] for i in range(l, r + 1))\n\n    def min_sum(l, r):\n        return f(l, r) % 998244353\n\n    def min_sum_with_rearrange(l, r):\n        min_sum_without_rearrange = min_sum(l, r)\n        min_sum_with_rearrange = min_sum(r, l)\n        return min(min_sum_without_rearrange, min_sum_with_rearrange)\n\n    def min_sum_with_rearrange_and_swap(l, r):\n        min_sum_without_rearrange = min_sum(l, r)\n        min_sum_with_rearrange = min_sum(r, l)\n        min_sum_with_swap = min_sum(l, r)\n        return min(min_sum_without_rearrange, min_sum_with_rearrange, min_sum_with_swap)\n\n    def min_sum_with_rearrange_and_swap_and_reverse(l, r):\n        min_sum_without_rearrange = min_sum(l, r)\n        min_sum_with_rearrange = min_sum(r, l)\n        min_sum_with_swap = min_sum(l, r)\n        min_sum_with_reverse = min_sum(r, l)\n        return min(min_sum_without_rearrange, min_sum_with_rearrange, min_sum_with_swap, min_sum_with_reverse)\n\n    min_sum_without_rearrange = min_sum(1, n)\n    min_sum_with_rearrange = min_sum_with_rearrange(1, n)\n    min_sum_with_rearrange_and_swap = min_sum_with_rearrange_and_swap(1, n)\n    min_sum_with_rearrange_and_swap_and_reverse = min_sum_with_rearrange_and_swap_and_reverse(1, n)\n\n    min_sum_without_rearrange = min_sum_without_rearrange % 998244353\n    min_sum_with_rearrange = min_sum_with_rearrange % 998244353\n    min_sum_with_rearrange_and_swap = min_sum_with_rearrange_and_swap % 998244353\n    min_sum_with_rearrange_and_swap_and_reverse = min_sum_with_rearrange_and_swap_and_reverse % 998244353\n\n    result = min(min_sum_without_rearrange, min_sum_with_rearrange, min_sum_with_rearrange_and_swap, min_sum_with_rearrange_and_swap_and_reverse)\n\n    return str(result)",
        "num_ids": 724
    },
    {
        "number": 4507,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = []\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        b.append((x, y))\n\n    def buy(a, b):\n        for x, y in b:\n            a = [a[i] - x for i in range(len(a)) if i not in b]\n            if not a:\n                return 0\n        return min(a)\n\n    return str(buy(a, b))",
        "num_ids": 129
    },
    {
        "number": 4508,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    edges = []\n    for i in range(n - 1):\n        u, v = map(int, stdin.split()[1:3])\n        edges.append((u, v))\n    edges.append((1, 1))\n    edges.append((1, n))\n    edges.sort(key=lambda x: (x[0], x[1]))\n    count = 0\n    for i in range(len(edges) - 1):\n        if edges[i][0]!= edges[i + 1][0] and edges[i][1]!= edges[i + 1][1]:\n            count += 1\n            if count > 2:\n                return \"0\"\n    return str(count)",
        "num_ids": 168
    },
    {
        "number": 4509,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for _ in range(t):\n        n, k = map(int, stdin.split('\\n')[1].split())\n        count = 0\n        num = 1\n        while count < k:\n            if num % n!= 0:\n                count += 1\n            num += 1\n        print(num)",
        "num_ids": 81
    },
    {
        "number": 4510,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ids = list(map(int, stdin.split()[1:]))\n\n    # Remove the last conversation if the number of conversations is greater than k\n    if len(ids) > k:\n        ids = ids[:-1]\n\n    # Display the conversations\n    for i, id in enumerate(ids):\n        print(i + 1, end=\" \")\n\n    # Print the number of conversations shown\n    print(f\"\\n{len(ids)}\")\n\n    return \"\"",
        "num_ids": 110
    },
    {
        "number": 4511,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    cards = []\n    for i in range(n):\n        k = int(stdin.split('\\n')[i+1])\n        for j in range(k):\n            c, d = map(int, stdin.split('\\n')[i+1+j].split())\n            cards.append((c, d))\n    cards.sort(key=lambda x: x[0])\n    max_damage = 0\n    for i in range(len(cards)):\n        if i % 10 == 0:\n            max_damage += 2 * cards[i][1]\n        else:\n            max_damage += cards[i][1]\n        if max_damage > 3:\n            break\n    return str(max_damage)",
        "num_ids": 170
    },
    {
        "number": 4512,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, q = stdin.split('\\n')[0].split()\n    s = list(s)\n    queries = []\n    for _ in range(int(q)):\n        queries.append(stdin.split('\\n')[1].split())\n    result = []\n    for query in queries:\n        if query[0] == '1':\n            pos, c = int(query[1]), query[2]\n            s[pos] = c\n        elif query[0] == '2':\n            l, r = int(query[1]), int(query[2])\n            result.append(len(set(s[l-1:r])))\n    return '\\n'.join(map(str, result))",
        "num_ids": 151
    },
    {
        "number": 4513,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(field: List[List[int]]) -> bool:\n        for i in range(9):\n            row_set = set()\n            col_set = set()\n            block_set = set()\n            for j in range(9):\n                if field[i][j] in row_set or field[j][i] in col_set or field[i // 3 * 3 + j // 3][j // 3 * 3 + i % 3] in block_set:\n                    return False\n                row_set.add(field[i][j])\n                col_set.add(field[j][i])\n                block_set.add(field[i // 3 * 3 + j // 3][j // 3 * 3 + i % 3])\n        return True\n\n    def is_anti_sudoku(field: List[List[int]]) -> bool:\n        for i in range(9):\n            row_set = set()\n            col_set = set()\n            for j in range(9):\n                if field[i][j] in row_set or field[j][i] in col_set:\n                    return False\n                row_set.add(field[i][j])\n                col_set.add(field[j][i])\n        for i in range(9):\n            for j in range(9):\n                if field[i][j] in [1, 2, 3, 4, 5, 6, 7, 8, 9]:\n                    row_set = set()\n                    col_set = set()\n                    for k in range(9):\n                        if field[i][k] in row_set or field[k][j] in col_set:\n                            return False\n                        row_set.add(field[i][k])\n                        col_set.add(field[k][j])\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                block_set = set()\n                for k in range(3):\n                    for l in range(3):\n                        if field[i + k][j + l] in block_set:\n                            return False\n                        block_set.add(field[i + k][j + l])\n        return True\n\n    def change_element(field: List[List[int]], i: int, j: int, new_num: int) -> List[List[int]]:\n        field[i][j] = new_num\n        return field\n\n    def change_elements(field: List[List[int]], i: int, j: int, new_num: int) -> List[List[int]]:\n        if is_valid(field):\n            return field\n        if field[i][j] == new_num:\n            return change_elements(field, i, j + 1, new_num)\n        return change_elements(field, i + 1, j, new_num)\n\n    def find_solution(field: List[List[int]]) -> List[List[int]]:\n        if is_valid(field):\n            return [field]\n        if is_anti_sudoku(field):\n            return []\n        result = []\n        for i in range(9):\n            for j in range(9):\n                if field[i][j] == 0:\n                    for new_num in range(1, 10):\n                        if new_num not in [x for x in field[i] if x!= 0] and new_num not in [x for x in field[j] if x!= 0]:\n                            new_field = change_elements(field, i, j, new_num)\n                            solution_list = find_solution(new_field)\n                            for solution in solution_list:\n                                result.append(solution)\n                    break\n        return result\n\n    def print_solution(solution: List[List[int]]) -> None:\n        for i in range(9):\n            for j in range(9):\n                print(solution[i][j], end=\" \")\n            print()\n\n    test_cases = int(stdin.split('\\n')[0])\n    for _ in range(test_cases):\n        field = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n        solution_list = find_solution(field)\n        if not solution_list:\n            print(\"No solution found\")\n        else:\n            print_solution(solution_list[0])",
        "num_ids": 972
    },
    {
        "number": 4514,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p[0] = 1\n    p.append(n)\n    p.sort()\n    p.pop()\n    p.pop()\n\n    def dfs(u: int, k: int, visited: set) -> int:\n        if u == k:\n            return 0\n        visited.add(u)\n        for v in range(1, n + 1):\n            if p[v] == u and v not in visited:\n                return dfs(v, k, visited)\n        return -1\n\n    for i in range(q):\n        u, k = map(int, stdin.split())\n        if k <= n:\n            print(dfs(u, k, set()))\n        else:\n            print(\"-1\")",
        "num_ids": 180
    },
    {
        "number": 4515,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        a, b, c, n = map(int, stdin.split()[1:])\n        if a + b + c == n:\n            return \"YES\"\n        elif a + b + c < n:\n            return \"NO\"\n    return \"YES\"",
        "num_ids": 74
    },
    {
        "number": 4516,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n\n    def pos(p, val):\n        return p.index(val)\n\n    def f(p):\n        return sum(abs(pos(p, x[i]) - pos(p, x[i + 1])) for i in range(m - 1))\n\n    return '\\n'.join(map(str, [f(p) for p in permutations(x)]))",
        "num_ids": 109
    },
    {
        "number": 4517,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:n]]\n    queries = [tuple(map(int, line.split())) for line in stdin.split('\\n')[n:n+m]]\n\n    def bfs(start: int, visited: set) -> list:\n        queue = [(start, [start])]\n        while queue:\n            vertex, path = queue.pop(0)\n            if vertex not in visited:\n                visited.add(vertex)\n                for neighbor in edges[vertex - 1]:\n                    if neighbor not in visited:\n                        queue.append((neighbor, path + [neighbor]))\n        return visited\n\n    def dfs(start: int, visited: set) -> list:\n        visited.add(start)\n        for neighbor in edges[start - 1]:\n            if neighbor not in visited:\n                dfs(neighbor, visited)\n\n    def has_path(start: int, end: int, visited: set) -> bool:\n        visited.add(start)\n        for neighbor in edges[start - 1]:\n            if neighbor not in visited:\n                if neighbor == end:\n                    return True\n                if has_path(neighbor, end, visited):\n                    return True\n        return False\n\n    def has_distance_one(start: int, end: int, visited: set) -> bool:\n        visited.add(start)\n        for neighbor in edges[start - 1]:\n            if neighbor not in visited:\n                if neighbor == end:\n                    return True\n                if has_distance_one(neighbor, end, visited):\n                    return True\n        return False\n\n    def has_path_or_distance_one(start: int, end: int, visited: set) -> bool:\n        visited.add(start)\n        for neighbor in edges[start - 1]:\n            if neighbor not in visited:\n                if neighbor == end:\n                    return True\n                if has_path_or_distance_one(neighbor, end, visited):\n                    return True\n        return False\n\n    def check_query(query: tuple) -> str:\n        start, end, k = query\n        visited = set()\n        if has_path(1, end, visited):\n            return \"YES\"\n        if has_distance_one(1, end, visited):\n            return \"YES\"\n        if has_path_or_distance_one(1, end, visited):\n            return \"YES\"\n        return \"NO\"\n\n    result = []\n    for query in queries:\n        result.append(check_query(query))\n\n    return '\\n'.join(result)",
        "num_ids": 559
    },
    {
        "number": 4518,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(start: int, visited: set) -> int:\n        if start in visited:\n            return 0\n        visited.add(start)\n        count = 1\n        for neighbor in graph[start]:\n            count += dfs(neighbor, visited)\n        return count\n\n    def bfs(start: int, visited: set) -> int:\n        queue = deque([start])\n        visited.add(start)\n        count = 1\n        while queue:\n            size = len(queue)\n            for _ in range(size):\n                current = queue.popleft()\n                for neighbor in graph[current]:\n                    if neighbor not in visited:\n                        visited.add(neighbor)\n                        queue.append(neighbor)\n                        count += 1\n        return count\n\n    def is_connected(a: int, b: int) -> bool:\n        return a!= b and a in graph[b]\n\n    def is_connected_directly(a: int, b: int) -> bool:\n        return a!= b and a in graph[a] and b in graph[b]\n\n    def is_connected_through_intermediate(a: int, b: int) -> bool:\n        return a!= b and a in graph[a] and b in graph[b] and a!= b\n\n    def is_connected_through_intermediate_and_directly(a: int, b: int) -> bool:\n        return a!= b and a in graph[a] and b in graph[b] and a!= b and b in graph[a]\n\n    def is_connected_through_intermediate_and_directly_and_connected(a: int, b: int) -> bool:\n        return a!= b and a in graph[a] and b in graph[b] and a!= b and b in graph[a] and is_connected(a, b)\n\n    def is_connected_through_intermediate_and_directly_and_connected_and_connected(a: int, b: int) -> bool:\n        return a!= b and a in graph[a] and b in graph[b] and a!= b and b in graph[a] and is_connected(a, b) and is_connected(b, a)\n\n    def is_connected_through_intermediate_and_directly_and_connected_and_connected_and_connected(a: int, b: int) -> bool:\n        return a!= b and a in graph[a] and b in graph[b] and a!= b and b in graph[a] and is_connected(a, b) and is_connected(b, a) and is_connected(a, b) and is_connected(b, a)\n\n    def is_connected_through_intermediate_and_directly_and_connected_and_connected_and_connected_and_connected(a: int, b: int) -> bool:\n        return a!= b and a in graph[a] and b in graph[b] and a!= b and b in graph[a] and is_connected(a, b) and is_connected(b, a) and is_connected(a, b) and is_connected(b, a) and is_connected(a, b) and is_connected(b, a)\n\n    def is_connected_through_intermediate_and_directly_and_connected_and_connected_and_connected_and_connected_and_connected(a: int, b: int) -> bool:\n        return a!= b and a in graph[a] and b in graph[b] and a!= b and b in graph[a] and is_connected(a, b) and is_connected(b, a) and is_connected(a, b) and is_connected(b, a) and is_connected(a, b) and is_connected(b, a) and is_connected(a, b) and is_connected(b, a)\n\n    def is_connected_through_intermediate_and_directly_and_connected_and_connected_and_connected_and_connected_and_connected_and_connected(a: int, b: int) -> bool:\n        return a!= b and a in graph[a] and b in graph[b] and a!= b and b in graph[a] and is_connected(a, b) and is_connected(b, a) and is_connected(a, b) and is_connected(b, a) and is_connected(a, b) and is_connected(b, a) and is_connected(a, b) and is_connected(b, a) and is_connected(a, b) and is_connected(b, a)\n\n   ",
        "num_ids": 1025
    },
    {
        "number": 4519,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin.split()[1])\n    s.sort()\n    return ''.join(s)\n\ndef",
        "num_ids": 40
    },
    {
        "number": 4520,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n\n    segments.sort(key=lambda x: x[0])\n    bad_points = set()\n    for i in range(n):\n        if i > 0 and segments[i][0] <= segments[i - 1][1]:\n            bad_points.add(i)\n        if len(bad_points) > k:\n            break\n\n    return str(len(bad_points)) +'' +''.join(map(str, bad_points))",
        "num_ids": 147
    },
    {
        "number": 4521,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1].split()))\n    v = list(map(int, stdin.split()[2].split()))\n\n    def distance(i: int, j: int) -> int:\n        return abs(x[i] - x[j])\n\n    def min_distance(i: int, j: int) -> int:\n        if i == j:\n            return 0\n        return min(distance(i, k) + distance(k, j) for k in range(n) if k!= i and k!= j)\n\n    return str(sum(min_distance(i, j) for i in range(n) for j in range(i + 1, n)))\n",
        "num_ids": 168
    },
    {
        "number": 4522,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, stdin.split())) for _ in range(n - 1)]\n    queries = list(map(int, stdin.split()))\n\n    def dfs(u, visited):\n        visited[u] = True\n        for v, w in edges:\n            if not visited[v]:\n                if w > queries[u - 1]:\n                    return dfs(v, visited)\n        return u\n\n    def bfs(u, visited):\n        visited[u] = True\n        queue = [u]\n        while queue:\n            v = queue.pop(0)\n            for w in edges:\n                if not visited[w[0]] and w[1] > queries[u - 1]:\n                    visited[w[0]] = True\n                    queue.append(w[0])\n        return u\n\n    visited = [False] * (n + 1)\n    for u in range(1, n + 1):\n        if not visited[u]:\n            dfs(u, visited)\n\n    for u in range(1, n + 1):\n        if not visited[u]:\n            bfs(u, visited)\n\n    return \" \".join(map(str, [dfs(u, visited) for u in range(1, n + 1)]))",
        "num_ids": 284
    },
    {
        "number": 4523,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2:]))\n        if len(a) == 1:\n            print(\"YES\")\n        else:\n            for i in range(len(a)):\n                for j in range(i+1, len(a)):\n                    if abs(a[i] - a[j]) <= 1:\n                        a.pop(i)\n                        a.pop(j)\n                        if len(a) == 1:\n                            print(\"YES\")\n                            break\n                        else:\n                            continue\n                    else:\n                        continue\n            if len(a) == 1:\n                print(\"YES\")\n            else:\n                print(\"NO\")",
        "num_ids": 170
    },
    {
        "number": 4524,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = int(stdin.split()[1])\n    b = int(stdin.split()[2])\n\n    def add_and_divide(a: int, b: int) -> int:\n        while b > 0:\n            carry = a & b\n            a = a ^ b\n            b = carry << 1\n        return a\n\n    def decimal_to_binary(decimal: int) -> str:\n        binary = \"\"\n        while decimal > 0:\n            binary = str(decimal % 2) + binary\n            decimal //= 2\n        return binary\n\n    def binary_to_decimal(binary: str) -> int:\n        decimal = 0\n        for digit in binary:\n            decimal = decimal * 2 + int(digit)\n        return decimal\n\n    def modulo_998244353(a: int) -> int:\n        return (a % 998244353 + 998244353) % 998244353\n\n    def process(a: int, b: int) -> int:\n        while b > 0:\n            a = add_and_divide(a, b)\n        return a\n\n    answer = process(a, b)\n    binary_answer = decimal_to_binary(answer)\n    decimal_answer = binary_to_decimal(binary_answer)\n    return str(decimal_answer % 998244353)",
        "num_ids": 325
    },
    {
        "number": 4525,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        a = [2 * i + 1 for i in range(n // 2)] + [2 * i + 2 for i in range(n // 2)]\n        a.sort()\n        a.append(2 * n)\n        a.append(2 * n + 1)\n        a.sort()\n        a.append(2 * n + 2)\n        a.append(2 * n + 3)\n        a.sort()\n        a.append(2 * n + 4)\n        a.append(2 * n + 5)\n        a.sort()\n        a.append(2 * n + 6)\n        a.append(2 * n + 7)\n        a.sort()\n        a.append(2 * n + 8)\n        a.append(2 * n + 9)\n        a.sort()\n        a.append(2 * n + 10)\n        a.append(2 * n + 11)\n        a.sort()\n        a.append(2 * n + 12)\n        a.append(2 * n + 13)\n        a.sort()\n        a.append(2 * n + 14)\n        a.append(2 * n + 15)\n        a.sort()\n        a.append(2 * n + 16)\n        a.append(2 * n + 17)\n        a.sort()\n        a.append(2 * n + 18)\n        a.append(2 * n + 19)\n        a.sort()\n        a.append(2 * n + 20)\n        a.append(2 * n + 21)\n        a.sort()\n        a.append(2 * n + 22)\n        a.append(2 * n + 23)\n        a.sort()\n        a.append(2 * n + 24)\n        a.append(2 * n + 25)\n        a.sort()\n        a.append(2 * n + 26)\n        a.append(2 * n + 27)\n        a.sort()\n        a.append(2 * n + 28)\n        a.append(2 * n + 29)\n        a.sort()\n        a.append(2 * n + 30)\n        a.append(2 * n + 31)\n        a.sort()\n        a.append(2 * n + 32)\n        a.append(2 * n + 33)\n        a.sort()\n        a.append(2 * n + 34)\n        a.append(2 * n + 35)\n        a.sort()\n        a.append(2 * n + 36)\n        a.append(2 * n + 37)\n        a.sort()\n        a.append(2 * n + 38)\n        a.append(2 * n + 39)\n        a.sort()\n        a.append(2 * n + 40)\n        a.append(2 * n + 41)\n        a.sort()\n        a.append(2 * n + 42)\n        a.append(2 * n + 43)\n        a.sort()\n        a.append(2 * n + 44)\n        a.append(2 * n + 45)\n        a.sort()\n        a.append(2 * n + 46)\n        a.append(2 * n + 47)\n        a.sort()\n        a.append(2 * n + 48)\n        a.append(2 * n + 49)\n        a.sort()\n        a.append(2 * n + 50)\n        a.append(2 * n + 51)\n        a.sort()\n        a.append(2 * n + 52)\n        a.append(2 * n + 53)\n        a.sort()\n        a.append(2 * n + 54)\n        a.append(2 * n + 55)\n        a.sort()\n        a.append(2 * n + 56)\n        a.append(2 * n + 57)\n        a.sort()\n        a.append(2 * n + 58)\n        a.append(2 * n + 59)\n        a.sort()\n        a.append(2 * n + 60)\n        a.append(2 * n + 61)\n        a.sort()\n        a.",
        "num_ids": 1025
    },
    {
        "number": 4526,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2:]))\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if a[i] + a[j] == a[i] + a[j+1] + a[j+2] + a[j+3]:\n                    count += 1\n        print(count)",
        "num_ids": 119
    },
    {
        "number": 4527,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i][0] < right[j][0]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result.extend(left[i:])\n        result.extend(right[j:])\n        return result\n\n    def non_intersecting_segments(segments):\n        result = []\n        for i in range(len(segments)):\n            for j in range(i + 1, len(segments)):\n                if segments[i][1] < segments[j][0]:\n                    result.append((segments[i], segments[j]))\n        return result\n\n    def inside_segments(segments, x):\n        for i in range(len(segments)):\n            if segments[i][0] <= x <= segments[i][1]:\n                return True\n        return False\n\n    def max_subset_size(segments):\n        segments.sort(key=lambda x: x[1])\n        non_intersecting = non_intersecting_segments(segments)\n        inside = []\n        for i in range(len(non_intersecting)):\n            for j in range(i + 1, len(non_intersecting)):\n                if non_intersecting[i][0][1] < non_intersecting[j][0][0]:\n                    inside.append((non_intersecting[i], non_intersecting[j]))\n        inside.sort(key=lambda x: x[0][0][0])\n        result = 1\n        for i in range(len(inside)):\n            if not inside_segments(segments, inside[i][0][0][0]):\n                result += 1\n        return result\n\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        segments = []\n        for _ in range(n):\n            l, r = map(int, stdin.split()[1:])\n            segments.append((l, r))\n        segments.sort(key=lambda x: x[0])\n        print(max_subset_size(segments))",
        "num_ids": 546
    },
    {
        "number": 4528,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        h, m = map(int, stdin.split()[1].split())\n        if h == 0 and m == 0:\n            print(1439)\n        else:\n            minutes_before_new_year = (24 - h) * 60 + m\n            print(minutes_before_new_year)",
        "num_ids": 92
    },
    {
        "number": 4529,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        s = stdin.split()[2]\n        l, r = 0, 0\n        for i in range(1, n):\n            if s[i]!= s[i - 1]:\n                l = i\n                break\n        for i in range(n - 2, -1, -1):\n            if s[i]!= s[i + 1]:\n                r = i\n                break\n        if r - l + 1 < r - l:\n            print(-1)\n        else:\n            print(l, r)",
        "num_ids": 145
    },
    {
        "number": 4530,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        skills = list(map(int, stdin.split()[2:]))\n        skills.sort()\n        distinct_skills = set(skills)\n        if len(distinct_skills) < len(skills):\n            return \"0\"\n        first_team_skills = skills[:len(distinct_skills)]\n        second_team_skills = skills[len(distinct_skills):]\n        if first_team_skills!= second_team_skills:\n            return \"0\"\n        for i in range(len(first_team_skills)):\n            if first_team_skills[i]!= second_team_skills[i]:\n                return \"0\"\n        return \"1\"",
        "num_ids": 172
    },
    {
        "number": 4531,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    adj = [[] for _ in range(n + 1)]\n    for u, v in map(lambda x: map(int, x.split()), stdin.split()[1:].split('\\n')):\n        adj[u].append(v)\n        adj[v].append(u)\n\n    def dfs(v, parent, depth):\n        nonlocal max_cost\n        if v == root:\n            return depth\n        for child in adj[v]:\n            if child!= parent:\n                depth = dfs(child, v, depth + 1)\n        return depth\n\n    max_cost = 0\n    root = 1\n    dfs(root, 0, 0)\n    return str(max_cost)",
        "num_ids": 165
    },
    {
        "number": 4532,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, k = map(int, stdin.split()[1:])\n        a = list(map(int, stdin.split()[2:]))\n        x = 0\n        moves = 0\n        for i in range(1, n + 1):\n            if a[i - 1] % k == 0:\n                moves += 1\n            else:\n                moves += 2\n                a[i - 1] += x\n                x = 1\n        if x > 0:\n            moves += 1\n        print(moves)",
        "num_ids": 134
    },
    {
        "number": 4533,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    children, cookies = map(int, stdin.split())\n    cookies = sorted(cookies, reverse=True)\n    max_content = 0\n    for i in range(children):\n        greed_factor = cookies[i]\n        if greed_factor >= cookies[i+1]:\n            max_content += 1\n            cookies.pop(i+1)\n        else:\n            break\n    return str(max_content)",
        "num_ids": 92
    },
    {
        "number": 4534,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = [1]\n    for i in range(1, n):\n        result.append(result[i-1] + result[i-2])\n    return str(result)",
        "num_ids": 48
    },
    {
        "number": 4535,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin, 2)\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return str(count)",
        "num_ids": 38
    },
    {
        "number": 4536,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    digits = list(map(int, stdin.split(',')))\n    carry = 1\n    for i in range(len(digits) - 1, -1, -1):\n        digits[i] += carry\n        carry = digits[i] // 10\n        digits[i] %= 10\n    if carry:\n        digits.insert(0, carry)\n    return ','.join(map(str, digits))",
        "num_ids": 93
    },
    {
        "number": 4537,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    largest = max(a + b, a - b, a * b)\n    return str(largest)",
        "num_ids": 37
    },
    {
        "number": 4538,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    points.sort(key=lambda x: (x[0], x[1]))\n    count = 0\n    for i in range(n):\n        if points[i][0]**2 + points[i][1]**2 <= d**2:\n            count += 1\n    return str(count)",
        "num_ids": 113
    },
    {
        "number": 4539,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1 or N > 10**8:\n        return \"Invalid input\"\n\n    def sum_of_digits(n: int) -> int:\n        return sum(int(digit) for digit in str(n))\n\n    def f(n: int) -> int:\n        return sum_of_digits(n)\n\n    if f(N) == N:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 102
    },
    {
        "number": 4540,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *coordinates = map(int, stdin.split())\n    coordinates = [tuple(coordinates[i:i+2]) for i in range(0, len(coordinates), 2)]\n    total_cost = 0\n    for i in range(1, n+1):\n        if i!= n:\n            total_cost += abs(coordinates[i][0] - coordinates[i+1][0]) + abs(coordinates[i][1] - coordinates[i+1][1])\n        else:\n            total_cost += abs(coordinates[0][0] - coordinates[n][0]) + abs(coordinates[0][1] - coordinates[n][1])\n    return str(total_cost)",
        "num_ids": 155
    },
    {
        "number": 4541,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.lower()\n    if c in ['a', 'e', 'i', 'o', 'u']:\n        return 'vowel'\n    else:\n        return 'consonant'",
        "num_ids": 43
    },
    {
        "number": 4542,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = [0] * 1000001\n    for i, c in enumerate(stdin):\n        if c == 'B':\n            board[i] = 1\n        elif c == 'W':\n            board[i] = -1\n    black_stones = sum(board)\n    white_stones = sum(board)\n    for i in range(1, 1000001):\n        if board[i] == 0:\n            continue\n        if board[i] == -1:\n            white_stones -= 1\n        else:\n            black_stones -= 1\n        if black_stones == 0:\n            return i\n        elif white_stones == 0:\n            return i - 1\n    return 0",
        "num_ids": 161
    },
    {
        "number": 4543,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a**2 + b**2 == a + b:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 41
    },
    {
        "number": 4544,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def count_elements(x: int) -> int:\n        count = 0\n        for i in range(N):\n            if a[i] == x:\n                count += 1\n        return count\n\n    def max_count() -> int:\n        max_count = 0\n        for x in range(1, 10):\n            count = count_elements(x)\n            if count > max_count:\n                max_count = count\n        return max_count\n\n    return str(max_count())",
        "num_ids": 135
    },
    {
        "number": 4545,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    white_squares = n * n - a\n    black_squares = a - white_squares\n    return str(black_squares)",
        "num_ids": 42
    },
    {
        "number": 4546,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b - a == c - b:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "num_ids": 39
    },
    {
        "number": 4547,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if 10 <= N <= 99:\n        if N % 10 == 9:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"Invalid input\"",
        "num_ids": 53
    },
    {
        "number": 4548,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def min_cost(i: int) -> int:\n        if i == 0:\n            return 0\n        if i == x:\n            return 0\n        if i == n:\n            return 0\n\n        cost = 1\n        if i in a:\n            cost += 1\n\n        return min(cost, min_cost(i + 1), min_cost(i - 1))\n\n    return str(min_cost(0))\n",
        "num_ids": 124
    },
    {
        "number": 4549,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    s = [list(map(str, stdin.split())) for _ in range(H)]\n\n    def is_valid(i, j):\n        return 1 <= i <= H and 1 <= j <= W\n\n    def is_black(i, j):\n        return s[i - 1][j - 1] == \"#\"\n\n    def is_white(i, j):\n        return s[i - 1][j - 1] == \"..\"\n\n    def paint(i, j, times):\n        if is_black(i, j):\n            return\n        if times == 0:\n            s[i - 1][j - 1] = \"#\"\n            return\n        if is_valid(i - 1, j) and is_white(i - 1, j):\n            paint(i - 1, j, times - 1)\n        if is_valid(i, j - 1) and is_white(i, j - 1):\n            paint(i, j - 1, times - 1)\n        if is_valid(i + 1, j) and is_white(i + 1, j):\n            paint(i + 1, j, times - 1)\n        if is_valid(i, j + 1) and is_white(i, j + 1):\n            paint(i, j + 1, times - 1)\n\n    paint(1, 1, 2)\n\n    for row in s:\n        print(\"\".join(row))\n\n    return \"Yes\" if all(all(is_black(i, j) or is_white(i, j) for j in range(1, W + 1)) for i in range(1, H + 1)) else \"No\"",
        "num_ids": 399
    },
    {
        "number": 4550,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b + c == 60:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 41
    },
    {
        "number": 4551,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A > B + C + D:\n        return \"Left\"\n    elif A == B + C + D:\n        return \"Balanced\"\n    else:\n        return \"Right\"",
        "num_ids": 57
    },
    {
        "number": 4552,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *F, *P = map(int, stdin.split())\n    F = [list(map(int, row.split())) for row in stdin.split()[1:]]\n    P = [list(map(int, row.split())) for row in stdin.split()[1:]]\n\n    def is_open(i: int, j: int, k: int) -> bool:\n        return any(F[i][j][k] == 1)\n\n    def max_profit(i: int, j: int, k: int) -> int:\n        if is_open(i, j, k):\n            return P[i][k]\n        else:\n            return 0\n\n    def max_profit_joisino(i: int, j: int, k: int) -> int:\n        if is_open(i, j, k):\n            return max(max_profit(i, j, k), max_profit_joisino(i, j, k + 1))\n        else:\n            return 0\n\n    c_1 = sum(1 for k in range(1, 11) if is_open(1, 1, k))\n    c_2 = sum(1 for k in range(1, 11) if is_open(1, 2, k))\n    c_3 = sum(1 for k in range(1, 11) if is_open(1, 3, k))\n    c_4 = sum(1 for k in range(1, 11) if is_open(1, 4, k))\n    c_5 = sum(1 for k in range(1, 11) if is_open(1, 5, k))\n    c_6 = sum(1 for k in range(1, 11) if is_open(2, 1, k))\n    c_7 = sum(1 for k in range(1, 11) if is_open(2, 2, k))\n    c_8 = sum(1 for k in range(1, 11) if is_open(2, 3, k))\n    c_9 = sum(1 for k in range(1, 11) if is_open(2, 4, k))\n    c_10 = sum(1 for k in range(1, 11) if is_open(2, 5, k))\n\n    return str(max(max_profit_joisino(1, 1, 1), max_profit_joisino(1, 2, 1), max_profit_joisino(1, 3, 1), max_profit_joisino(1, 4, 1), max_profit_joisino(1, 5, 1), max_profit_joisino(2, 1, 1), max_profit_joisino(2, 2, 1), max_profit_joisino(2, 3, 1), max_profit_joisino(2, 4, 1), max_profit_joisino(2, 5, 1), max_profit_joisino(3, 1, 1), max_profit_joisino(3, 2, 1), max_profit_joisino(3, 3, 1), max_profit_joisino(3, 4, 1), max_profit_joisino(3, 5, 1), max_profit_joisino(4, 1, 1), max_profit_joisino(4, 2, 1), max_profit_joisino(4, 3, 1), max_profit_joisino(4, 4, 1), max_profit_joisino(4, 5, 1), max_profit_joisino(5, 1, 1), max_profit_joisino(5, 2, 1), max_profit_joisino(5, 3, 1), max_profit_joisino(5, 4, 1), max_profit_joisino(5, 5, 1)))",
        "num_ids": 941
    },
    {
        "number": 4553,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    s = stdin.split()[1]\n    if len(s)!= a + b + 1:\n        return \"No\"\n    if s[a]!= \"-\" or not s[a + 1:].isdigit():\n        return \"No\"\n    return \"Yes\"",
        "num_ids": 71
    },
    {
        "number": 4554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split())\n    min_distance = abs(a - b)\n    return str(min_distance)",
        "num_ids": 35
    },
    {
        "number": 4555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    smallest = []\n    largest = []\n    for i in range(A, B + 1):\n        if i in smallest:\n            smallest.remove(i)\n        if i in largest:\n            largest.remove(i)\n        if len(smallest) < K:\n            smallest.append(i)\n        if len(largest) < K:\n            largest.append(i)\n    return \"\\n\".join(map(str, smallest + largest))",
        "num_ids": 111
    },
    {
        "number": 4556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    contest_name = stdin.strip()\n    x = contest_name[0]\n    s = contest_name[1:].lower()\n    abbreviation = x + s\n    return abbreviation",
        "num_ids": 42
    },
    {
        "number": 4557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n\n    if a + b < x:\n        return \"NO\"\n\n    if a + b == x:\n        return \"YES\"\n\n    if a + b > x:\n        return \"NO\"",
        "num_ids": 55
    },
    {
        "number": 4558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    sand = X\n    time = 0\n    while time < t:\n        sand += 1\n        time += 1\n    return str(sand)",
        "num_ids": 47
    },
    {
        "number": 4559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    result = 1\n    for num in a:\n        result *= num\n        if result > 10**18:\n            return -1\n    return result",
        "num_ids": 61
    },
    {
        "number": 4560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if a > 1000:\n        return \"No\"\n\n    if n > 10000:\n        return \"No\"\n\n    if a * 1000 >= n:\n        return \"Yes\"\n\n    return \"No\"",
        "num_ids": 67
    },
    {
        "number": 4561,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n\n    if A - X <= 0:\n        return \"safe\"\n    elif A - X <= 1:\n        return \"dangerous\"\n    else:\n        return \"delicious\"",
        "num_ids": 55
    },
    {
        "number": 4562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    largest_square = 0\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            square = i * i + j * j\n            if square > largest_square:\n                largest_square = square\n    return str(largest_square)",
        "num_ids": 73
    },
    {
        "number": 4563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    votes = [tuple(map(int, line.split())) for line in stdin.split()[1:]]\n    total_votes = sum(votes[i][0] * votes[i][1] for i in range(n))\n    return str(total_votes)",
        "num_ids": 70
    },
    {
        "number": 4564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s)!= 26:\n        return \"no\"\n    for c in s:\n        if s.count(c)!= 1:\n            return \"no\"\n    return \"yes\"",
        "num_ids": 50
    },
    {
        "number": 4565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    leader_index = s.index('W')\n    leader_direction = s[leader_index]\n    leader_index = (leader_index + 1) % n\n\n    leader_count = 0\n    for i in range(n):\n        if i == leader_index:\n            leader_count += 1\n        if s[i]!= leader_direction:\n            leader_count += 1\n\n    return str(leader_count)",
        "num_ids": 107
    },
    {
        "number": 4566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cities = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        cities[a].append(b)\n        cities[b].append(a)\n    roads = [len(city) for city in cities]\n    return '\\n'.join(map(str, roads))",
        "num_ids": 96
    },
    {
        "number": 4567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    scores = list(map(int, stdin.split()[1:]))\n    max_score = max(scores)\n    if max_score % 10 == 0:\n        max_score = 0\n    return str(max_score)",
        "num_ids": 65
    },
    {
        "number": 4568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    X = S[:N//2]\n    Y = S[N//2:]\n    X_set = set(X)\n    Y_set = set(Y)\n    return str(max(len(X_set), len(Y_set)))",
        "num_ids": 68
    },
    {
        "number": 4569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    weather = stdin.strip()\n    if weather == \"Sunny\":\n        return \"Cloudy\"\n    elif weather == \"Cloudy\":\n        return \"Rainy\"\n    else:\n        return \"Sunny\"",
        "num_ids": 45
    },
    {
        "number": 4570,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n <= 20 and 1 <= a <= 100 and 1 <= b <= 2000:\n        if a <= b:\n            return str(a * n)\n        else:\n            return str(b)\n    else:\n        return \"Invalid input\"",
        "num_ids": 77
    },
    {
        "number": 4571,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    expected_time = 0\n    for i in range(1, n + 1):\n        expected_time += 1900 * i\n    return str(expected_time)",
        "num_ids": 54
    },
    {
        "number": 4572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].islower():\n            s[i] = chr(ord('a') + (ord('z') - ord('a') + 1) % (i + 1))\n            break\n    else:\n        return None\n    return ''.join(s)",
        "num_ids": 83
    },
    {
        "number": 4573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *x = map(int, stdin.split())\n    x.sort()\n    l = len(x)\n    if l % 2 == 1:\n        return str(x[l // 2])\n    else:\n        return \" \".join(map(str, [x[l // 2 - 1], x[l // 2], x[l // 2 + 1]]))",
        "num_ids": 89
    },
    {
        "number": 4574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    max_area = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                for l in range(k + 1, n + 1):\n                    area = (a[i] + a[j] + a[k] + a[l]) / 2\n                    if area > max_area:\n                        max_area = area\n\n    if max_area == 0:\n        return \"0\"\n    else:\n        return str(max_area)",
        "num_ids": 156
    },
    {
        "number": 4575,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D, X = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    def count_chocolate(A, X, D):\n        count = 0\n        for i in range(1, D + 1):\n            count += A[i - 1]\n            if count > X:\n                return i - 1\n        return D\n\n    return str(count_chocolate(A, X, D))",
        "num_ids": 100
    },
    {
        "number": 4576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x = map(int, stdin.split())\n\n    def count_ways(a: int, b: int, c: int, x: int) -> int:\n        if a == 0 and b == 0 and c == 0:\n            return 1\n        if a == 0 and b == 0:\n            return count_ways(c, x - 50, b, x)\n        if a == 0 and c == 0:\n            return count_ways(a, b, x - 50, c)\n        if b == 0 and c == 0:\n            return count_ways(a, x - 100, c, x)\n        if a == 0:\n            return count_ways(c, x - 50, b, x)\n        if b == 0:\n            return count_ways(a, x - 100, c, x)\n        if c == 0:\n            return count_ways(a, b, x - 50, c)\n        if a == 1 and b == 1 and c == 1:\n            return count_ways(a - 1, b - 1, c - 1, x)\n        if a == 1 and b == 1:\n            return count_ways(a - 1, c - 1, b, x)\n        if a == 1 and c == 1:\n            return count_ways(a - 1, b - 1, c, x)\n        if b == 1 and c == 1:\n            return count_ways(a, c - 1, b, x)\n        if a == 1:\n            return count_ways(c - 1, b, a, x)\n        if b == 1:\n            return count_ways(a, c - 1, b, x)\n        if c == 1:\n            return count_ways(a, b, c - 1, x)\n        if a == 2 and b == 2 and c == 2:\n            return count_ways(a - 2, b - 2, c - 2, x)\n        if a == 2 and b == 2:\n            return count_ways(a - 2, c - 2, b, x)\n        if a == 2 and c == 2:\n            return count_ways(a - 2, b - 2, c, x)\n        if b == 2 and c == 2:\n            return count_ways(a, c - 2, b, x)\n        if a == 2:\n            return count_ways(c - 2, b, a, x)\n        if b == 2:\n            return count_ways(a, c - 2, b, x)\n        if c == 2:\n            return count_ways(a, b, c - 2, x)\n        if a == 3 and b == 3 and c == 3:\n            return count_ways(a - 3, b - 3, c - 3, x)\n        if a == 3 and b == 3:\n            return count_ways(a - 3, c - 3, b, x)\n        if a == 3 and c == 3:\n            return count_ways(a - 3, b - 3, c, x)\n        if b == 3 and c == 3:\n            return count_ways(a, c - 3, b, x)\n        if a == 3:\n            return count_ways(c - 3, b, a, x)\n        if b == 3:\n            return count_ways(a, c - 3, b, x)\n        if c == 3:\n            return count_ways(a, b, c - 3, x)\n        if a == 4 and b == 4 and c == 4:\n            return count_ways(a - 4, b - 4, c - 4, x)\n        if a == 4 and b == 4:\n            return count_ways(a - 4, c - 4, b, x)\n        if a == 4 and c == 4:\n            return count_ways(a - 4, b - 4, c, x)\n        if b == 4 and c == 4:\n            return count_ways(a, c - 4, b, x)\n        if a == 4:\n            return count_ways(c - 4, b, a, x)\n        if b == 4:\n            return count_ways(a, c - 4, b,",
        "num_ids": 1025
    },
    {
        "number": 4577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if c >= a and c <= b:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 39
    },
    {
        "number": 4578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    m = list(map(int, stdin.split()))\n    m.sort()\n    m_sum = sum(m)\n    if m_sum > x:\n        return \"0\"\n\n    def dfs(i, cur_sum, res):\n        if cur_sum > x:\n            return\n        if cur_sum == x:\n            res.append(i)\n            return\n        for j in range(i, n):\n            dfs(j + 1, cur_sum + m[j], res)\n\n    res = []\n    dfs(0, 0, res)\n    return str(len(res))",
        "num_ids": 143
    },
    {
        "number": 4579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    items = stdin.split()[1:]\n    kinds = set()\n    for item in items:\n        kinds.add(item[0])\n    return str(len(kinds))",
        "num_ids": 50
    },
    {
        "number": 4580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    colors = set()\n    for rating in a:\n        if rating < 3200:\n            colors.add(\"gray\")\n        elif rating < 4000:\n            colors.add(\"brown\")\n        elif rating < 4800:\n            colors.add(\"green\")\n        elif rating < 5600:\n            colors.add(\"cyan\")\n        elif rating < 6400:\n            colors.add(\"blue\")\n        elif rating < 7200:\n            colors.add(\"yellow\")\n        elif rating < 8000:\n            colors.add(\"orange\")\n        else:\n            colors.add(\"red\")\n\n    min_colors = len(colors)\n    max_colors = len(colors)\n\n    for rating in a:\n        if rating < 3200:\n            max_colors -= 1\n        elif rating < 4000:\n            max_colors -= 1\n        elif rating < 4800:\n            max_colors -= 1\n        elif rating < 5600:\n            max_colors -= 1\n        elif rating < 6400:\n            max_colors -= 1\n        elif rating < 7200:\n            max_colors -= 1\n        else:\n            max_colors -= 1\n\n    return f\"{min_colors} {max_colors}\"",
        "num_ids": 317
    },
    {
        "number": 4581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s)!= 3:\n        return \"Invalid input\"\n\n    egg = s[0] == \"o\"\n    pork = s[1] == \"o\"\n    onion = s[2] == \"o\"\n\n    if egg and pork and onion:\n        return \"Invalid input\"\n\n    if egg:\n        price = 700\n    else:\n        price = 700 - 100\n\n    if pork:\n        price += 100\n    if onion:\n        price += 100\n\n    return str(price)",
        "num_ids": 130
    },
    {
        "number": 4582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == 'H' and b == 'H':\n        return 'H'\n    elif a == 'D' and b == 'D':\n        return 'D'\n    else:\n        return 'D'",
        "num_ids": 54
    },
    {
        "number": 4583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    formula = f\"{a}+{b}+{c}+{d}={7}\"\n    return formula",
        "num_ids": 43
    },
    {
        "number": 4584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    bosses = [a[i - 1] - 1 for i in range(1, n + 1)]\n    subordinates = [0] * n\n\n    for i in range(1, n):\n        subordinates[bosses[i]] += 1\n\n    return \"\\n\".join(map(str, subordinates))",
        "num_ids": 91
    },
    {
        "number": 4585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    time = 0\n    left_x = 0\n    right_x = X\n\n    while left_x <= right_x:\n        time += 1\n        left_x += time\n        right_x -= time\n\n    return str(time)",
        "num_ids": 59
    },
    {
        "number": 4586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1000 or N > 9999:\n        return \"No\"\n\n    count = 0\n    for i in range(len(str(N))):\n        if str(N)[i] == str(N)[i + 1]:\n            count += 1\n            if count >= 3:\n                return \"Yes\"\n\n    return \"No\"",
        "num_ids": 89
    },
    {
        "number": 4587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:n+1]))\n    b = list(map(int, stdin.split()[n+1:2*n+1]))\n    c = list(map(int, stdin.split()[2*n+1:]))\n\n    def is_valid(a, b, c):\n        return a <= b <= c\n\n    def count_altars(a, b, c):\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if is_valid(a[i], b[j], c[k]):\n                        count += 1\n        return count\n\n    return str(count_altars(a, b, c))",
        "num_ids": 184
    },
    {
        "number": 4588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x = int(x, 16)\n    y = int(y, 16)\n    if x < y:\n        return \"<\"\n    elif x > y:\n        return \">\"\n    else:\n        return \"=\"",
        "num_ids": 58
    },
    {
        "number": 4589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    grid = []\n    for _ in range(h):\n        row = input()\n        grid.append(row)\n\n    def count_bomb_squares(row: int, col: int) -> int:\n        count = 0\n        for i in range(row - 1, -1, -1):\n            for j in range(col - 1, -1, -1):\n                if grid[i][j] == '#':\n                    count += 1\n        return count\n\n    def replace_bomb_squares(row: int, col: int) -> str:\n        bomb_count = count_bomb_squares(row, col)\n        return str(bomb_count)\n\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == '.':\n                grid[i][j] = replace_bomb_squares(i, j)\n\n    result = '\\n'.join(''.join(row) for row in grid)\n    return result\n",
        "num_ids": 230
    },
    {
        "number": 4590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    def read_books(desk, books):\n        total_time = 0\n        for i in range(len(books)):\n            if desk:\n                total_time += a[books[i] - 1]\n            else:\n                total_time += b[books[i] - 1]\n            desk = not desk\n        return total_time\n\n    max_books = 0\n    for i in range(1, n + 1):\n        if read_books(True, [i]) <= k:\n            max_books = max(max_books, i)\n\n    for i in range(1, m + 1):\n        if read_books(False, [i]) <= k:\n            max_books = max(max_books, i)\n\n    return str(max_books)",
        "num_ids": 214
    },
    {
        "number": 4591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x, y = map(int, stdin.split())\n    a_pizzas = x // 3\n    b_pizzas = y // 2\n    ab_pizzas = (x + y) // 2 - a_pizzas - b_pizzas\n    total_pizzas = a_pizzas + b_pizzas + ab_pizzas\n    total_money = a * a_pizzas + b * b_pizzas + c * ab_pizzas\n    return str(total_money)",
        "num_ids": 129
    },
    {
        "number": 4592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    MOD = 10**9 + 7\n    count = 0\n    for i in range(1, N+1):\n        if N % i == 0:\n            count += 1\n    return str(count % MOD)",
        "num_ids": 58
    },
    {
        "number": 4593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    max_power = 0\n    for i in range(2, X + 1):\n        if X % i == 0:\n            power = 0\n            while X % i == 0:\n                power += 1\n                X //= i\n            if power > max_power:\n                max_power = power\n    return str(max_power)",
        "num_ids": 83
    },
    {
        "number": 4594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    diameters = list(map(int, stdin.split()[1:]))\n\n    max_layers = 0\n    for i in range(N):\n        if i == 0:\n            max_layers += 1\n        else:\n            if diameters[i] > diameters[i - 1]:\n                max_layers += 1\n\n    return str(max_layers)",
        "num_ids": 92
    },
    {
        "number": 4595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    max_length = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if substring[0] == 'A' and substring[-1] == 'Z':\n                max_length = max(max_length, j - i)\n    return str(max_length)",
        "num_ids": 97
    },
    {
        "number": 4596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    nums = list(map(int, stdin.split()[1:]))\n\n    even_count = 0\n    max_count = 0\n\n    for num in nums:\n        if num % 2 == 0:\n            even_count += 1\n            max_count = max(max_count, even_count)\n\n    return str(max_count)",
        "num_ids": 88
    },
    {
        "number": 4597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    power = 1\n    result = 0\n    MOD = 10**9 + 7\n\n    for i in range(1, N+1):\n        power *= i\n        result = (result + power) % MOD\n\n    return str(result)",
        "num_ids": 61
    },
    {
        "number": 4598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    candies = [1] * N\n    for i in range(1, N):\n        candies[i] = 2 * candies[i - 1]\n    return str(sum(candies))",
        "num_ids": 57
    },
    {
        "number": 4599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    alice_score = sum(a)\n    bob_score = 0\n    for i in range(n):\n        if a[i] > alice_score:\n            alice_score -= a[i]\n            bob_score += a[i]\n        elif a[i] < alice_score:\n            bob_score -= a[i]\n            alice_score += a[i]\n    return str(alice_score - bob_score)",
        "num_ids": 109
    },
    {
        "number": 4600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    s = list(stdin.split())\n\n    correct_answers = 0\n    penalties = 0\n\n    for i in range(n):\n        if s[i] == \"AC\":\n            correct_answers += 1\n        else:\n            penalties += p[i]\n\n    return f\"{correct_answers} {penalties}\"",
        "num_ids": 100
    },
    {
        "number": 4601,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n\n    def attack(i: int) -> int:\n        nonlocal h\n        h[i] -= 1\n        return h[i]\n\n    def special_move(i: int) -> int:\n        nonlocal h\n        h[i] = 0\n        return h[i]\n\n    def min_attacks() -> int:\n        nonlocal h\n        min_h = min(h)\n        count = 0\n        for i in range(n):\n            if h[i] == min_h:\n                count += 1\n                if count == k:\n                    return count\n                if attack(i) == 0:\n                    return count\n        return count\n\n    return str(min_attacks())",
        "num_ids": 173
    },
    {
        "number": 4602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n\n    def distance(x1: int, y1: int, x2: int, y2: int) -> int:\n        return abs(x1 - x2) + abs(y1 - y2)\n\n    def min_distance(x1: int, y1: int, x2: int, y2: int) -> int:\n        return min(distance(x1, y1, x2, y2), distance(x1, y1, x2, y2 + 1))\n\n    def min_total_distance(x1: int, y1: int, x2: int, y2: int) -> int:\n        return min(min_distance(x1, y1, x2, y2), min_distance(x1, y1, x2, y2 + 1))\n\n    min_distance_a = min_total_distance(0, 1, K, N)\n    min_distance_b = min_total_distance(K, 1, 0, N)\n\n    return str(min(min_distance_a, min_distance_b))\n",
        "num_ids": 271
    },
    {
        "number": 4603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    min_train_fare = min(a, b)\n    min_bus_fare = min(c, d)\n    min_total_fare = min_train_fare + min_bus_fare\n    return str(min_total_fare)",
        "num_ids": 78
    },
    {
        "number": 4604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n\n    MOD = 10**9 + 7\n\n    def dfs(start: int, end: int, count: int) -> int:\n        if start > end:\n            return 1\n\n        if count == 0:\n            return dfs(start + 1, end, 1)\n\n        left_count = dfs(start + 1, end, count - 1)\n        right_count = dfs(start, end - 1, count - 1)\n\n        return (left_count + right_count) % MOD\n\n    return str(dfs(0, N - 1, 0))",
        "num_ids": 156
    },
    {
        "number": 4605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    sum_digits = 0\n    for i in range(1, n+1):\n        digits = sum(int(digit) for digit in str(i))\n        if a <= digits <= b:\n            sum_digits += i\n    return str(sum_digits)",
        "num_ids": 73
    },
    {
        "number": 4606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 100 or N > 999:\n        return \"Invalid input\"\n    return f\"ABC{N}\"",
        "num_ids": 38
    },
    {
        "number": 4607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    days = []\n    for i in range(1, 32):\n        if i % a == 0 and i % b == 0:\n            days.append(f\"{i // a}-{i // b}\")\n    return str(len(days))",
        "num_ids": 69
    },
    {
        "number": 4608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # Check if it is possible to lighten up Button 2\n    for i in range(1, N):\n        if a[i] == i:\n            return -1\n\n    # Find the minimum number of times we need to press buttons\n    min_times = float('inf')\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            if j == a[i]:\n                min_times = min(min_times, j - i)\n\n    return str(min_times)",
        "num_ids": 144
    },
    {
        "number": 4609,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n\n    count = 0\n    for a in A:\n        if a not in count_dict:\n            count_dict[a] = 0\n        count_dict[a] += 1\n\n    return str(count)\n\ncount_dict = {}",
        "num_ids": 81
    },
    {
        "number": 4610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def count_distinct_integers(a: list) -> int:\n        distinct_integers = set()\n        for num in a:\n            distinct_integers.add(num)\n        return len(distinct_integers)\n\n    min_balls = n\n    for i in range(n):\n        if count_distinct_integers(a[:i] + a[i+1:]) <= k:\n            min_balls = min(min_balls, i+1)\n\n    return str(min_balls)",
        "num_ids": 140
    },
    {
        "number": 4611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    points = []\n    for i in range(N):\n        x, y, t = map(int, stdin.split()[1:])\n        points.append((x, y, t))\n    points.sort(key=lambda x: x[2])\n\n    x, y, t = points[0]\n    if t == 0:\n        return \"Yes\"\n\n    for i in range(1, N):\n        x_i, y_i, t_i = points[i]\n        if t_i > t:\n            break\n        if t_i == t:\n            if x == x_i and y == y_i:\n                return \"Yes\"\n            else:\n                return \"No\"\n        if t_i < t:\n            if x == x_i and y == y_i:\n                return \"Yes\"\n            elif x == x_i + 1 and y == y_i:\n                return \"Yes\"\n            elif x == x_i - 1 and y == y_i:\n                return \"Yes\"\n            elif x == x_i and y == y_i + 1:\n                return \"Yes\"\n            elif x == x_i and y == y_i - 1:\n                return \"Yes\"\n            else:\n                return \"No\"\n\n    return \"No\"",
        "num_ids": 289
    },
    {
        "number": 4612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = (a + b) / 2\n    return str(int(x) + 1)",
        "num_ids": 37
    },
    {
        "number": 4613,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        edges.append((a, b))\n\n    def is_connected(graph: list, visited: set) -> bool:\n        for i in range(n):\n            if i not in visited and not dfs(graph, visited, i):\n                return False\n        return True\n\n    def dfs(graph: list, visited: set, vertex: int) -> bool:\n        visited.add(vertex)\n        for neighbor in graph[vertex]:\n            if neighbor not in visited and dfs(graph, visited, neighbor):\n                return True\n        return False\n\n    bridges = 0\n    for edge in edges:\n        a, b = edge\n        if a!= b:\n            if is_connected(edges, {a, b}):\n                bridges += 1\n\n    return str(bridges)",
        "num_ids": 202
    },
    {
        "number": 4614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b:\n        return str(c)\n    elif a == c:\n        return str(b)\n    elif b == c:\n        return str(a)\n    else:\n        return \"None\"",
        "num_ids": 60
    },
    {
        "number": 4615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = map(int, stdin.split())\n\n    # Check constraints\n    if A < 1 or A > 30 or B < 1 or B > 30 or C < 1 or C > 30 or D < 1 or D > 30 or E < 1 or E > 100 or F < 100 or F > 3000:\n        return \"Invalid input\"\n\n    # Calculate the mass of sugar water\n    water_mass = 100 * B / (A + B)\n    sugar_mass = C + D\n\n    # Check if the beaker can hold the sugar\n    if water_mass + sugar_mass > F:\n        return \"Invalid input\"\n\n    # Calculate the mass of sugar dissolved in the water\n    dissolved_mass = water_mass * (100 * B / (A + B))\n\n    return f\"{water_mass} {dissolved_mass}\"",
        "num_ids": 220
    },
    {
        "number": 4616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) < 3:\n        return \"Invalid input\"\n    return s[:2] + \"n\"",
        "num_ids": 34
    },
    {
        "number": 4617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    grid = [list(row) for row in stdin.split('\\n')]\n    n = len(grid)\n    m = len(grid[0])\n\n    # Check if the grid remains the same when rotated 180 degrees\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]!= grid[n-i-1][m-j-1]:\n                return \"NO\"\n\n    return \"YES\"",
        "num_ids": 99
    },
    {
        "number": 4618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split()\n    s = list(s)\n    s.sort()\n    return ''.join(s[k-1])",
        "num_ids": 33
    },
    {
        "number": 4619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, H, N = map(int, stdin.split())\n    points = []\n    for _ in range(N):\n        x, y, a = map(int, stdin.split())\n        points.append((x, y, a))\n\n    white_area = 0\n    for x, y, a in points:\n        if a == 1:\n            white_area += max(0, x) * max(0, y)\n        elif a == 2:\n            white_area += max(0, W - x) * max(0, y)\n        elif a == 3:\n            white_area += max(0, x) * max(0, H - y)\n        elif a == 4:\n            white_area += max(0, W - x) * max(0, H - y)\n\n    return str(white_area)",
        "num_ids": 187
    },
    {
        "number": 4620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    trains = []\n    for i in range(n):\n        c, s, f = map(int, stdin.split()[1:4])\n        trains.append((i, c, s, f))\n    trains.sort(key=lambda x: (x[1], x[2]))\n    result = []\n    for i in range(n):\n        if i == 0:\n            result.append(0)\n        else:\n            result.append(result[i-1] + trains[i][2])\n    return '\\n'.join(map(str, result))",
        "num_ids": 139
    },
    {
        "number": 4621,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    image = [list(row) for row in stdin.splitlines()]\n\n    extended_image = []\n    for i in range(h):\n        row = []\n        for j in range(w):\n            if image[i][j] == '.':\n                row.append('.')\n            else:\n                row.append(image[i][j])\n        extended_image.append(row)\n\n    for i in range(h, 2 * h):\n        row = []\n        for j in range(w):\n            if image[i - h][j] == '.':\n                row.append('.')\n            else:\n                row.append(image[i - h][j])\n        extended_image.append(row)\n\n    for row in extended_image:\n        print(''.join(row))\n\n    return ''",
        "num_ids": 182
    },
    {
        "number": 4622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n\n    if len(set(A)) == len(A):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "num_ids": 54
    },
    {
        "number": 4623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for _ in range(t):\n        n, s = map(int, stdin.split('\\n')[1].split())\n        w = list(map(int, stdin.split('\\n')[2].split()))\n        w.sort()\n        k = 0\n        for i in range(len(w) - 1):\n            if w[i] + w[i + 1] == s:\n                k += 1\n        print(k)",
        "num_ids": 111
    },
    {
        "number": 4624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, x = map(int, stdin.split()[1:])\n        if n <= x:\n            print(1)\n        else:\n            print(n // x + 1)",
        "num_ids": 59
    },
    {
        "number": 4625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, m = map(int, stdin.split()[1:])\n        s = stdin.split()[2]\n        p = list(map(int, stdin.split()[3:]))\n\n        def count_buttons(s: str, p: list) -> str:\n            count = [0] * 26\n            for i in range(len(s)):\n                if s[i] in p:\n                    count[ord(s[i]) - ord('a')] += 1\n            return ''.join(map(str, count))\n\n        print(count_buttons(s, p))",
        "num_ids": 145
    },
    {
        "number": 4626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split('\\n')[0])\n    for _ in range(test_cases):\n        a, b, c = map(int, stdin.split('\\n')[1].split())\n        a, b, c = a - 1, b - 1, c - 1\n        min_distance = float('inf')\n        for i in range(a, b + 1):\n            for j in range(i, c + 1):\n                for k in range(j, b + 1):\n                    distance = abs(i - j) + abs(i - k) + abs(j - k)\n                    min_distance = min(min_distance, distance)\n        print(min_distance)",
        "num_ids": 159
    },
    {
        "number": 4627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for _ in range(t):\n        n = int(stdin.split('\\n')[1])\n        a = list(map(int, stdin.split('\\n')[2].split()))\n        a.sort()\n        for i in range(len(a) - 1):\n            if a[i] % 2 == a[i + 1] % 2:\n                continue\n            if abs(a[i] - a[i + 1]) == 1:\n                continue\n            return 'NO'\n        return 'YES'",
        "num_ids": 128
    },
    {
        "number": 4628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = [tuple(map(int, stdin.split())) for _ in range(m)]\n    routes = [tuple(map(int, stdin.split())) for _ in range(k)]\n\n    def dijkstra(start: int) -> list[int]:\n        dist = [float('inf')] * (n + 1)\n        dist[start] = 0\n        pq = [(0, start)]\n        while pq:\n            cost, u = heappop(pq)\n            if dist[u] < cost:\n                continue\n            for v, w in roads:\n                if dist[u] + w < dist[v]:\n                    dist[v] = dist[u] + w\n                    heappush(pq, (dist[v], v))\n        return dist\n\n    def min_cost(start: int, end: int) -> int:\n        dist = dijkstra(start)\n        return dist[end]\n\n    def min_cost_with_road(start: int, end: int) -> int:\n        dist = dijkstra(start)\n        for i, (x, y, w) in enumerate(roads):\n            if x == start and y == end:\n                return dist[end]\n            if y == start and x == end:\n                return dist[end]\n        return float('inf')\n\n    def min_total_cost(start: int, end: int) -> int:\n        min_cost_start = min_cost(start, end)\n        min_cost_end = min_cost(end, start)\n        min_cost_with_road_start = min_cost_with_road(start, end)\n        min_cost_with_road_end = min_cost_with_road(end, start)\n        return min(min_cost_start, min_cost_end, min_cost_with_road_start, min_cost_with_road_end)\n\n    min_total_cost_with_road = float('inf')\n    for i, (a, b) in enumerate(routes):\n        min_total_cost_with_road = min(min_total_cost_with_road, min_total_cost(a, b))\n\n    return str(min_total_cost_with_road)\n",
        "num_ids": 507
    },
    {
        "number": 4629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[1])\n    q = int(stdin.split()[0])\n    good_numbers = set()\n    for i in range(1, n + 1):\n        if i % 3 == 0:\n            good_numbers.add(i)\n    for i in range(1, n + 1):\n        if i % 3 == 0:\n            for j in range(i + 1, n + 1):\n                if j % 3 == 0:\n                    if i + j not in good_numbers:\n                        good_numbers.add(i + j)\n    return \" \".join(map(str, good_numbers))",
        "num_ids": 147
    },
    {
        "number": 4630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split()[0])\n    for _ in range(queries):\n        n, *p = map(int, stdin.split()[1:])\n        p = list(p)\n        p.sort()\n        dp = [0] * n\n        for i in range(n):\n            dp[i] = p.index(i + 1) + 1\n        print(\" \".join(map(str, dp)))",
        "num_ids": 94
    },
    {
        "number": 4631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.sort()\n    y = [0] * m\n    min_sum = float('inf')\n    for i in range(n):\n        for j in range(m):\n            if abs(x[i] - y[j]) < abs(x[i] - y[j + 1]):\n                y[j] = x[i]\n                min_sum = min(min_sum, abs(x[i] - y[j]))\n            else:\n                y[j + 1] = x[i]\n                min_sum = min(min_sum, abs(x[i] - y[j + 1]))\n    return str(min_sum) + '\\n' +''.join(map(str, y))",
        "num_ids": 189
    },
    {
        "number": 4632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split('\\n')[0])\n    for _ in range(test_cases):\n        n = int(stdin.split('\\n')[1])\n        packages = []\n        for _ in range(n):\n            x, y = map(int, stdin.split('\\n')[2].split())\n            packages.append((x, y))\n        if not packages:\n            return \"NO\"\n        visited = set()\n        queue = [(0, 0, \"U\")]\n        while queue:\n            x, y, direction = queue.pop(0)\n            if (x, y) in visited:\n                continue\n            visited.add((x, y))\n            if len(visited) == n:\n                return \"YES\"\n            if direction == \"U\":\n                queue.append((x, y + 1, \"R\"))\n            elif direction == \"R\":\n                queue.append((x + 1, y, \"U\"))\n            else:\n                queue.append((x, y - 1, \"R\"))\n        return \"NO\"",
        "num_ids": 225
    },
    {
        "number": 4633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, s = map(int, stdin.split()[1:])\n        moves = 0\n        while n > 0:\n            n = n // 10\n            moves += 1\n        if moves > s:\n            moves = s\n        print(moves)",
        "num_ids": 75
    },
    {
        "number": 4634,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2:]))\n        moves = 0\n        for i in range(1, n):\n            if a[i] == 1 and a[i-1] == 0:\n                moves += 1\n                a[i-1], a[i] = a[i], a[i-1]\n            elif a[i] == 0 and a[i-1] == 1:\n                moves += 1\n                a[i-1], a[i] = a[i], a[i-1]\n        print(moves)",
        "num_ids": 161
    },
    {
        "number": 4635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split()[0])\n    for _ in range(queries):\n        n, k = map(int, stdin.split()[1:])\n        s = \"\"\n        for i in range(k):\n            s += chr(ord('a') + i)\n        print(s)",
        "num_ids": 64
    },
    {
        "number": 4636,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split('\\n')[0])\n    for _ in range(test_cases):\n        n, *a = map(int, stdin.split('\\n')[1].split())\n        a = list(map(int, a))\n        alice_moves = 0\n        bob_moves = 0\n        alice_size = 0\n        bob_size = 0\n        while alice_size < bob_size:\n            if alice_size < a[0]:\n                alice_size += a[0]\n                alice_moves += 1\n            else:\n                alice_size += a[0]\n                bob_size += a[0]\n                alice_moves += 1\n                bob_moves += 1\n            a = a[1:]\n        print(alice_moves, bob_moves)",
        "num_ids": 174
    },
    {
        "number": 4637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, k = map(int, stdin.split()[1:])\n        a = list(map(int, stdin.split()[2:2+n]))\n        b = list(map(int, stdin.split()[2+n:]))\n        max_sum = float('-inf')\n        for i in range(n):\n            for j in range(i+1, n):\n                if i!= j:\n                    a[i], a[j] = a[j], a[i]\n                    b[i], b[j] = b[j], b[i]\n                    sum_a = sum(a)\n                    sum_b = sum(b)\n                    if sum_a > max_sum:\n                        max_sum = sum_a\n                    if sum_b > max_sum:\n                        max_sum = sum_b\n                    a[i], a[j] = a[j], a[i]\n                    b[i], b[j] = b[j], b[i]\n        print(max_sum)",
        "num_ids": 240
    },
    {
        "number": 4638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    t = [0] * n\n    t[0] = a[0]\n\n    for i in range(1, n):\n        t[i] = min(t[i - 1] + a[i], t[i - 1] + b[i] + c)\n\n    return \" \".join(map(str, t))\n",
        "num_ids": 116
    },
    {
        "number": 4639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split('\\n')[0])\n    for _ in range(test_cases):\n        n, k = map(int, stdin.split('\\n')[1].split())\n        if k > n * (n - 1) // 2:\n            print(\"Invalid input\")\n            continue\n        strings = []\n        for i in range(1, n + 1):\n            for j in range(1, i):\n                strings.append('a' * (i - 1) + 'b' * (j - 1))\n        strings.sort()\n        print(strings[k - 1])",
        "num_ids": 136
    },
    {
        "number": 4640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, k = map(int, stdin.split()[1:])\n        x = list(map(int, stdin.split()[2:2+n]))\n        y = list(map(int, stdin.split()[2+n:]))\n\n        platforms = []\n        for i in range(n):\n            platforms.append((x[i], y[i], k))\n\n        platforms.sort(key=lambda p: (p[1], p[0]))\n\n        max_points = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if platforms[i][0] < platforms[j][0] + k:\n                    max_points += platforms[j][1] - platforms[i][1]\n\n        print(max_points)",
        "num_ids": 188
    },
    {
        "number": 4641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = []\n    q = int(stdin.split()[0])\n    for _ in range(q):\n        y = int(stdin.split()[1])\n        a.append(y)\n    a.sort()\n    m = 0\n    for i in range(len(a)):\n        if a[i] < 0:\n            m = max(m, i)\n        else:\n            break\n    return str(m)",
        "num_ids": 105
    },
    {
        "number": 4642,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, x, y = map(int, stdin.split()[1:])\n        a = [x] + list(range(x+1, y+1)) + [y]\n        a.sort()\n        print(\" \".join(map(str, a)))",
        "num_ids": 77
    },
    {
        "number": 4643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    arr.sort(reverse=True)\n    return \" \".join(map(str, arr))",
        "num_ids": 49
    },
    {
        "number": 4644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2:2+n]))\n        odd_sum = sum(a) % 2\n        if odd_sum == 1:\n            return \"YES\"\n        else:\n            return \"NO\"",
        "num_ids": 84
    },
    {
        "number": 4645,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        if n == 1:\n            print(1)\n        else:\n            p = [i for i in range(1, n+1)]\n            for i in range(n-1):\n                if abs(p[i] - p[i+1]) not in range(2, 5):\n                    p.remove(p[i])\n            if p:\n                print(*p)\n            else:\n                print(-1)",
        "num_ids": 122
    },
    {
        "number": 4646,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for _ in range(t):\n        n = int(stdin.split('\\n')[1])\n        a = list(map(int, stdin.split('\\n')[2].split()))\n        moves = 0\n        for i in range(n):\n            if i % 2 == a[i] % 2:\n                moves += 1\n            else:\n                break\n        if moves == n:\n            print(-1)\n        else:\n            print(moves)",
        "num_ids": 111
    },
    {
        "number": 4647,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    edges = []\n    for i in range(n - 1):\n        u, v = map(int, stdin.split()[1:3])\n        edges.append((u - 1, v - 1))\n\n    def dfs(u, color, cnt_w, cnt_b):\n        nonlocal max_diff\n        if u == n:\n            return cnt_w - cnt_b\n\n        max_diff = max(max_diff, cnt_w - cnt_b)\n\n        for v, w in edges:\n            if v == u:\n                continue\n            if a[v - 1] == color:\n                dfs(v, 1 - color, cnt_w + 1, cnt_b)\n            else:\n                dfs(v, color, cnt_w, cnt_b + 1)\n\n    max_diff = -1\n    dfs(0, a[0], 0, 0)\n    return \" \".join(map(str, max_diff))\n",
        "num_ids": 238
    },
    {
        "number": 4648,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        moves = 0\n        while n!= 1:\n            if n % 6 == 0:\n                n //= 6\n                moves += 1\n            else:\n                n *= 2\n                moves += 1\n        print(moves)",
        "num_ids": 82
    },
    {
        "number": 4649,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split()[0])\n    for _ in range(queries):\n        n, k = map(int, stdin.split()[1:])\n        s = stdin.split()[2]\n        min_changes = 0\n        for i in range(n):\n            if s[i] == 'R':\n                min_changes += 1\n            elif s[i] == 'G':\n                min_changes += 2\n            else:\n                min_changes += 3\n        print(min_changes)",
        "num_ids": 110
    },
    {
        "number": 4650,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split()[0])\n    for _ in range(queries):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2:]))\n        max_count = 0\n        for i in range(len(a)):\n            for j in range(i+1, len(a)):\n                if a[i] + a[j] % 3 == 0:\n                    max_count = max(max_count, 1 + max_count)\n        print(max_count)",
        "num_ids": 121
    },
    {
        "number": 4651,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    perm = list(map(int, stdin.split()))\n\n    for _ in range(q):\n        op, i, j = map(int, stdin.split())\n        if op == 1:\n            perm[i - 1], perm[j - 1] = perm[j - 1], perm[i - 1]\n        elif op == 2:\n            perm[i - 1], perm[i - 1] = perm[i - 1], perm[j - 1]\n        elif op == 3:\n            perm[i - 1], perm[j - 1] = perm[j - 1], perm[i - 1]\n\n    return \" \".join(map(str, perm))\n\n\ndef",
        "num_ids": 176
    },
    {
        "number": 4652,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split()[0])\n    for _ in range(queries):\n        n = int(stdin.split()[1])\n        p = list(map(int, stdin.split()[2].split()))\n        p.sort()\n        if p[0] == 1 and p[-1] == n:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
        "num_ids": 83
    },
    {
        "number": 4653,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, k = map(int, stdin.split()[1:])\n        a = min(n, k)\n        b = max(n, k)\n        if b - a <= 1 and k - (a + 1) <= (k // 2):\n            print(a)\n        else:\n            print(max(a, b - (k - (a + 1)) // 2))",
        "num_ids": 107
    },
    {
        "number": 4654,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for _ in range(t):\n        n, k = map(int, stdin.split('\\n')[1].split())\n        if n % 2 == 0:\n            a = [2 * i + 1 for i in range(k)]\n        else:\n            a = [2 * i for i in range(k)]\n        a.sort()\n        if a == list(range(1, n + 1, 2)) or a == list(range(2, n + 1, 2)):\n            print('YES')\n            print(' '.join(map(str, a)))\n        else:\n            print('NO')\n    return ''",
        "num_ids": 153
    },
    {
        "number": 4655,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split()[0])\n    for _ in range(queries):\n        a, b, c = map(int, stdin.split()[1:])\n        alice_candies = a\n        bob_candies = b\n        alice_piles = [alice_candies]\n        bob_piles = [bob_candies]\n        while alice_candies > 0 and bob_candies > 0:\n            if alice_candies > bob_candies:\n                alice_piles.append(alice_candies)\n                alice_candies = 0\n            else:\n                bob_piles.append(bob_candies)\n                bob_candies = 0\n            if alice_candies == 0:\n                alice_piles.append(alice_candies)\n            if bob_candies == 0:\n                bob_piles.append(bob_candies)\n        alice_piles.append(alice_candies)\n        bob_piles.append(bob_candies)\n        alice_piles.sort(reverse=True)\n        bob_piles.sort(reverse=True)\n        alice_piles = alice_piles[:alice_piles.index(0)]\n        bob_piles = bob_piles[:bob_piles.index(0)]\n        alice_piles.sort()\n        bob_piles.sort()\n        alice_piles = sum(alice_piles)\n        bob_piles = sum(bob_piles)\n        print(max(alice_piles, bob_piles))",
        "num_ids": 343
    },
    {
        "number": 4656,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_beautiful(necklace: str, k: int) -> bool:\n        n = len(necklace)\n        for i in range(n - k + 1):\n            if necklace[i:i + k]!= necklace[i + k - 1:i + k]:\n                return False\n        return True\n\n    def max_length(necklace: str, k: int) -> int:\n        n = len(necklace)\n        for i in range(n - k + 1):\n            if is_beautiful(necklace[:i] + necklace[i + k - 1:] + necklace[i:i + k], k):\n                return i + 1\n        return 0\n\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, k = map(int, stdin.split()[1:])\n        s = stdin.split()[2]\n        print(max_length(s, k))",
        "num_ids": 220
    },
    {
        "number": 4657,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split()[0])\n    for _ in range(queries):\n        n, k = map(int, stdin.split()[1:])\n        a = list(map(int, stdin.split()[2:]))\n        if sum(a) % 2 == 0:\n            print(\"NO\")\n        else:\n            a.sort()\n            left = 0\n            right = sum(a) // 2\n            res = []\n            while left < right:\n                mid = (left + right) // 2\n                if sum(a[left:mid]) % 2 == 0 and sum(a[mid:]) % 2 == 0:\n                    res.append(mid)\n                    left = mid\n                else:\n                    right = mid\n            if len(res) == k:\n                print(\"YES\")\n                print(\" \".join(map(str, res)))\n            else:\n                print(\"NO\")\n    return \"\"",
        "num_ids": 198
    },
    {
        "number": 4658,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin, 2)\n    n = ((n & 0x55555555) << 1) | ((n & 0xaaaaaaaa) >> 1)\n    n = ((n & 0x33333333) << 2) | ((n & 0xcccccccc) >> 2)\n    n = ((n & 0x0f0f0f0f) << 4) | ((n & 0xf0f0f0f0) >> 4)\n    n = ((n & 0x00ff00ff) << 8) | ((n & 0xff00ff00) >> 8)\n    n = ((n & 0x0000ffff) << 16) | ((n & 0xffff0000) >> 16)\n    return hex(n)[2:].zfill(32)",
        "num_ids": 209
    },
    {
        "number": 4659,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    numRows = int(stdin)\n    result = []\n    for i in range(numRows):\n        row = [1]\n        for j in range(1, i):\n            row.append(result[i-1][j-1] + result[i-1][j])\n        row.append(1)\n        result.append(row)\n    return str(result)",
        "num_ids": 82
    },
    {
        "number": 4660,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    email_list = []\n    for i in range(N):\n        email = stdin.split()[i+1]\n        if \"@\" in email and \".\" in email:\n            username, website_name, extension = email.split(\"@\")\n            if username.isalnum() and website_name.isalnum() and len(extension) <= 3:\n                email_list.append(email)\n    return sorted(email_list)",
        "num_ids": 105
    },
    {
        "number": 4661,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    fibonacci_numbers = [0, 1]\n    for i in range(2, N):\n        fibonacci_numbers.append(fibonacci_numbers[i-1] + fibonacci_numbers[i-2])\n    cubes = list(map(lambda x: x**3, fibonacci_numbers))\n    return str(cubes)",
        "num_ids": 84
    },
    {
        "number": 4662,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import xml.etree.ElementTree as ET\n\n    root = ET.fromstring(stdin)\n    max_level = 0\n\n    def traverse(elem, level):\n        nonlocal max_level\n        if level > max_level:\n            max_level = level\n        for child in elem:\n            traverse(child, level + 1)\n\n    traverse(root, 0)\n    return str(max_level)",
        "num_ids": 88
    },
    {
        "number": 4663,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import re\n\n    pattern = r'^(7|8|9)\\d{9}$'\n    for line in stdin.split('\\n'):\n        if re.match(pattern, line):\n            print(\"YES\")\n        else:\n            print(\"NO\")",
        "num_ids": 54
    },
    {
        "number": 4664,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, *m_list = stdin.split()\n    n, *n_list = stdin.split()\n\n    m_set = set(map(int, m_list))\n    n_set = set(map(int, n_list))\n\n    symmetric_diff = m_set.symmetric_difference(n_set)\n    symmetric_diff = sorted(symmetric_diff)\n\n    return \"\\n\".join(map(str, symmetric_diff))",
        "num_ids": 98
    },
    {
        "number": 4665,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    from collections import namedtuple\n    n = int(stdin.split()[0])\n    columns = stdin.split()[1:]\n    Student = namedtuple('Student', columns)\n    students = []\n    for _ in range(n):\n        line = stdin.split()\n        students.append(Student(*line))\n    total_marks = sum(student.MARKS for student in students)\n    total_students = len(students)\n    average_marks = round(total_marks / total_students, 2)\n    return str(average_marks)",
        "num_ids": 116
    },
    {
        "number": 4666,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 1:\n        return \"Weird\"\n    elif n % 2 == 0 and 2 <= n <= 5:\n        return \"Not Weird\"\n    elif n % 2 == 0 and 6 <= n <= 20:\n        return \"Weird\"\n    else:\n        return \"Not Weird\"",
        "num_ids": 84
    },
    {
        "number": 4667,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    score = 0\n    for line in stdin.splitlines():\n        if line.startswith(\"<\"):\n            tag, attributes = line.split(\" \", 1)\n            attributes = attributes.strip()[1:-1].split(\", \")\n            score += len(attributes)\n    return str(score)",
        "num_ids": 62
    },
    {
        "number": 4668,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(float, stdin.split())\n    ab = [b - a, c - b, d - c]\n    bc = [c - b, d - c, a - c]\n    cd = [a - c, b - d, c - d]\n    cross_product = [ab[1] * cd[2] - ab[2] * cd[1],\n                     ab[2] * cd[0] - ab[0] * cd[2],\n                     ab[0] * cd[1] - ab[1] * cd[0]]\n    dot_product = ab[0] * cross_product[0] + ab[1] * cross_product[1] + ab[2] * cross_product[2]\n    angle = round(180 * dot_product / (ab[0] ** 2 + ab[1] ** 2 + ab[2] ** 2), 2)\n    return str(angle)",
        "num_ids": 218
    },
    {
        "number": 4669,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    words = stdin.split()[1:]\n    score = 0\n    for word in words:\n        vowels = 0\n        for char in word:\n            if char in 'aeiouy':\n                vowels += 1\n        if vowels % 2 == 0:\n            score += 2\n        else:\n            score += 1\n    return str(score)",
        "num_ids": 92
    },
    {
        "number": 4670,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    roman_numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n\n    def is_valid_roman_numeral(roman_numeral: str) -> bool:\n        for i in range(len(roman_numeral)):\n            if i + 1 < len(roman_numeral) and roman_numerals[roman_numeral[i]] < roman_numerals[roman_numeral[i + 1]]:\n                return False\n        return True\n\n    if is_valid_roman_numeral(stdin):\n        return 'True'\n    else:\n        return 'False'",
        "num_ids": 182
    },
    {
        "number": 4671,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    mobile_numbers = stdin.split('\\n')\n    mobile_numbers = [mobile_numbers[i].strip() for i in range(len(mobile_numbers)) if mobile_numbers[i].strip()]\n    mobile_numbers = sorted(mobile_numbers)\n    output = []\n    for mobile_number in mobile_numbers:\n        if mobile_number.startswith('+91') or mobile_number.startswith('91') or mobile_number.startswith('0'):\n            output.append(mobile_number)\n    return '\\n'.join(output)",
        "num_ids": 119
    },
    {
        "number": 4672,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    students = {}\n    for _ in range(n):\n        name, *marks = stdin.split()\n        marks = list(map(int, marks))\n        students[name] = marks\n    query_name = stdin.split()[-1]\n    if query_name in students:\n        marks = students[query_name]\n        total = sum(marks)\n        average = total / len(marks)\n        return f\"{average:.2f}\"\n    else:\n        return \"Student not found\"",
        "num_ids": 116
    },
    {
        "number": 4673,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def person_decorator(func):\n        def wrapper(*args, **kwargs):\n            person = func(*args, **kwargs)\n            return f\"{person.sex} {person.first_name} {person.last_name}\"\n\n        return wrapper\n\n    @person_decorator\n    class Person:\n        def __init__(self, first_name: str, last_name: str, age: int, sex: str):\n            self.first_name = first_name\n            self.last_name = last_name\n            self.age = age\n            self.sex = sex\n\n    def sort_people(people: list[Person]) -> list[Person]:\n        return sorted(people, key=lambda p: (p.age, p.first_name))\n\n    def print_names(people: list[Person]) -> None:\n        for person in sort_people(people):\n            print(person)\n\n    n = int(stdin.split()[0])\n    people = [\n        Person(first_name, last_name, age, sex)\n        for first_name, last_name, age, sex in stdin.split()[1:].splitlines()\n    ]\n\n    print_names(people)\n\n    return \"\"\n",
        "num_ids": 257
    },
    {
        "number": 4674,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, n = map(int, stdin.split())\n    result = []\n    for i in range(x+1):\n        for j in range(y+1):\n            for k in range(z+1):\n                if i+j+k!= n:\n                    result.append([i, j, k])\n    result.sort()\n    return str(result)",
        "num_ids": 84
    },
    {
        "number": 4675,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into real and imaginary parts\n    real, imaginary = stdin.split()\n    \n    # Convert the real and imaginary parts to float\n    real = float(real)\n    imaginary = float(imaginary)\n    \n    # Create a complex number from the input\n    C = complex(real, imaginary)\n    \n    # Addition\n    D = complex(1, 2)\n    C_plus_D = C + D\n    print(f\"{C_plus_D.real:.2f}+{C_plus_D.imag:.2fi}\")\n    \n    # Subtraction\n    D = complex(3, 4)\n    C_minus_D = C - D\n    print(f\"{C_minus_D.real:.2f}-{C_minus_D.imag:.2fi}\")\n    \n    # Multiplication\n    D = complex(5, 6)\n    C_times_D = C * D\n    print(f\"{C_times_D.real:.2f}*{C_times_D.imag:.2fi}\")\n    \n    # Division\n    D = complex(7, 8)\n    C_divided_by_D = C / D\n    print(f\"{C_divided_by_D.real:.2f}/{C_divided_by_D.imag:.2fi}\")\n    \n    # Modulus\n    mod_C = abs(C)\n    mod_D = abs(D)\n    print(f\"mod({C.real:.2f}+{C.imag:.2fi}) = {mod_C:.2f}\")\n    print(f\"mod({D.real:.2f}+{D.imag:.2fi}) = {mod_D:.2f}\")\n    \n    return \"\"",
        "num_ids": 374
    },
    {
        "number": 4676,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    o, e = stdin.split()\n    odd_positions = [ord(c) - ord('a') for c in o]\n    even_positions = [ord(c) - ord('a') for c in e]\n\n    password = ''\n    for i in range(len(odd_positions)):\n        password += chr(odd_positions[i] + ord('a'))\n\n    for i in range(len(even_positions)):\n        password += chr(even_positions[i] + ord('a'))\n\n    return password",
        "num_ids": 113
    },
    {
        "number": 4677,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    result = \"\"\n    for key in s:\n        if key == \"0\":\n            result += \"0\"\n        elif key == \"1\":\n            result += \"1\"\n        elif key == \"B\":\n            if result:\n                result = result[:-1]\n    return result",
        "num_ids": 65
    },
    {
        "number": 4678,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = sorted(a)\n    total_height = sum(a)\n    stools_needed = 0\n    for i in range(n):\n        if i == 0:\n            stools_needed += a[i]\n        else:\n            stools_needed += a[i] - a[i - 1]\n    return str(stools_needed)",
        "num_ids": 94
    },
    {
        "number": 4679,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    decks = [list(map(str.lower, list(deck))) for deck in stdin.split()]\n    alice_deck, bob_deck, charlie_deck = decks\n\n    while alice_deck and bob_deck and charlie_deck:\n        if alice_deck[0] in alice_deck[1:]:\n            alice_deck.pop(0)\n        else:\n            bob_deck.pop(0)\n        if bob_deck[0] in bob_deck[1:]:\n            bob_deck.pop(0)\n        else:\n            charlie_deck.pop(0)\n        if charlie_deck[0] in charlie_deck[1:]:\n            charlie_deck.pop(0)\n        else:\n            alice_deck.pop(0)\n\n    if alice_deck:\n        return \"A\"\n    elif bob_deck:\n        return \"B\"\n    else:\n        return \"C\"",
        "num_ids": 201
    },
    {
        "number": 4680,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b + c!= 10:\n        return \"NO\"\n\n    if a + b + c == 10:\n        if a == 5 and b == 5 and c == 7:\n            return \"YES\"\n        elif a == 5 and b == 7 and c == 5:\n            return \"YES\"\n        elif a == 7 and b == 5 and c == 5:\n            return \"YES\"\n        else:\n            return \"NO\"",
        "num_ids": 119
    },
    {
        "number": 4681,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1 or N > 86:\n        raise ValueError(\"N must be between 1 and 86\")\n\n    L = [2, 1]\n    for i in range(2, N):\n        L.append(L[i - 1] + L[i - 2])\n\n    return str(L[N - 1])",
        "num_ids": 86
    },
    {
        "number": 4682,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    area = (a + b) * h / 2\n    return str(area)",
        "num_ids": 35
    },
    {
        "number": 4683,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n    MOD = 10**9 + 7\n    result = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            result = (result + A[i] * A[j]) % MOD\n    return str(result)",
        "num_ids": 87
    },
    {
        "number": 4684,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    if r % 4 == 0 and g % 4 == 0 and b % 4 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "num_ids": 55
    },
    {
        "number": 4685,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    k = int(stdin.split()[1])\n\n    def double_integer(n: int) -> int:\n        return 2 * n\n\n    def largest_sum(numbers: list[int]) -> int:\n        return max(numbers)\n\n    def choose_integer(numbers: list[int]) -> int:\n        return max(numbers)\n\n    def replace_integer(numbers: list[int], chosen_integer: int) -> list[int]:\n        return [n if n!= chosen_integer else double_integer(n) for n in numbers]\n\n    def perform_operation(numbers: list[int]) -> list[int]:\n        chosen_integer = choose_integer(numbers)\n        return replace_integer(numbers, chosen_integer)\n\n    def sum_of_integers(numbers: list[int]) -> int:\n        return sum(numbers)\n\n    def main() -> int:\n        numbers = [a, b, c]\n        for _ in range(k - 1):\n            numbers = perform_operation(numbers)\n        return sum_of_integers(numbers)\n\n    return str(main())",
        "num_ids": 251
    },
    {
        "number": 4686,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w = stdin.strip()\n    count = [0] * 26\n    for letter in w:\n        count[ord(letter) - ord('a')] += 1\n\n    for i in range(26):\n        if count[i] % 2!= 0:\n            return \"No\"\n\n    return \"Yes\"",
        "num_ids": 71
    },
    {
        "number": 4687,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    return str(arr[k-1])",
        "num_ids": 42
    },
    {
        "number": 4688,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return \"1\"\n\n    def count_ways(left: int, right: int) -> int:\n        if left == 0 and right == 1:\n            return 1\n        if left == 1 and right == 0:\n            return 1\n        return count_ways(left - 1, right) + count_ways(left, right - 1)\n\n    return str(count_ways(n - 1, k - 1))",
        "num_ids": 118
    },
    {
        "number": 4689,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, N = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    def distance(a: int, b: int) -> int:\n        return (a - b) % K\n\n    def min_distance(house: int) -> int:\n        visited = set()\n        visited.add(house)\n        min_distance = distance(A[house], 0)\n\n        for i in range(house + 1, N):\n            if i in visited:\n                continue\n\n            visited.add(i)\n            min_distance = min(min_distance, distance(A[i], A[house]))\n\n        return min_distance\n\n    return str(min_distance(0))",
        "num_ids": 154
    },
    {
        "number": 4690,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    area1 = a * b\n    area2 = c * d\n\n    if area1 > area2:\n        print(area1)\n    elif area2 > area1:\n        print(area2)\n    else:\n        print(\"Equal areas\")\n\n    return \"\"",
        "num_ids": 72
    },
    {
        "number": 4691,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    verdicts = stdin.split()[1:]\n    ac = 0\n    wa = 0\n    tle = 0\n    re = 0\n\n    for verdict in verdicts:\n        if verdict == \"AC\":\n            ac += 1\n        elif verdict == \"WA\":\n            wa += 1\n        elif verdict == \"TLE\":\n            tle += 1\n        else:\n            re += 1\n\n    print(f\"AC x {ac}\")\n    print(f\"WA x {wa}\")\n    print(f\"TLE x {tle}\")\n    print(f\"RE x {re}\")\n\n    return \"\"",
        "num_ids": 142
    },
    {
        "number": 4692,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if m == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        days_in_month[1] = 29\n    hours_until_new_year = 24 - m\n    for i in range(1, m):\n        hours_until_new_year += days_in_month[i - 1]\n    return str(hours_until_new_year)\n\nyear = 2022\nstdin = input()\nprint(solution(stdin))",
        "num_ids": 190
    },
    {
        "number": 4693,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        a, b = map(int, stdin.split())\n        if a + b >= 10:\n            return \"error\"\n        else:\n            return str(a + b)\n    except ValueError:\n        return \"error\"",
        "num_ids": 52
    },
    {
        "number": 4694,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    houses = list(map(int, stdin.split()[1:]))\n\n    houses.sort()\n    min_distance = houses[0]\n\n    for i in range(1, N):\n        min_distance = min(min_distance, houses[i] - houses[i - 1])\n\n    return str(min_distance)",
        "num_ids": 88
    },
    {
        "number": 4695,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x in [1, 4, 7] and y in [2, 5, 8]:\n        return \"Yes\"\n    elif x in [3, 6, 9] and y in [1, 4, 7]:\n        return \"Yes\"\n    elif x in [2, 5, 8] and y in [3, 6, 9]:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 112
    },
    {
        "number": 4696,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    product = a * b\n    if product % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "num_ids": 43
    },
    {
        "number": 4697,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    scc_groups = 0\n    for i in range(n):\n        scc_groups += 1\n        scc_groups += 1\n    return str(scc_groups)",
        "num_ids": 54
    },
    {
        "number": 4698,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *t = map(int, stdin.split())\n    m, *p, *x = map(int, stdin.split())\n\n    def solve(t: list[int], p: list[int], x: list[int]) -> int:\n        total_time = sum(t)\n        for i in range(len(t)):\n            total_time += t[i] * p[i]\n        return total_time\n\n    def solve_drink(t: list[int], p: list[int], x: list[int], i: int) -> int:\n        total_time = sum(t)\n        for j in range(len(t)):\n            if j!= i:\n                total_time += t[j] * p[j]\n        return total_time + x[i - 1]\n\n    result = []\n    for i in range(1, m + 1):\n        result.append(solve_drink(t, p, x, i))\n\n    return \"\\n\".join(map(str, result))\n",
        "num_ids": 228
    },
    {
        "number": 4699,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    dislikes = list(map(int, stdin.split()))\n    dislikes.sort()\n    for i in range(k):\n        if dislikes[i] in [0, 2]:\n            dislikes.pop(i)\n            k -= 1\n            break\n    if k == 0:\n        return \"0\"\n    min_amount = n // 10 ** k\n    for i in range(1, 10 ** k):\n        if i % 10 not in dislikes:\n            min_amount = min(min_amount, i)\n    return str(min_amount)",
        "num_ids": 142
    },
    {
        "number": 4700,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    elevations = list(map(int, stdin.split()))\n    roads = []\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        roads.append((a - 1, b - 1))\n\n    good_obs = 0\n    for i in range(n):\n        if elevations[i] > max(elevations[j] for j in range(n) if j!= i):\n            good_obs += 1\n\n    return str(good_obs)",
        "num_ids": 127
    },
    {
        "number": 4701,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    value = 1\n    for _ in range(n):\n        value *= 2\n        value += k\n    return str(value)",
        "num_ids": 42
    },
    {
        "number": 4702,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 0:\n        return \"0\"\n    else:\n        return \"1\"",
        "num_ids": 28
    },
    {
        "number": 4703,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    formulas = []\n    for i in range(len(S) - 1):\n        for j in range(i + 2, len(S) + 1):\n            formula = S[i:j]\n            if formula.count('+') == 1:\n                formulas.append(formula)\n    formulas.sort()\n    result = 0\n    for formula in formulas:\n        result += int(formula)\n    return str(result)",
        "num_ids": 105
    },
    {
        "number": 4704,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def min_diff(a: list) -> int:\n        a.sort()\n        return a[len(a) // 2]\n\n    snuke_cards = a[:N // 2]\n    raccoon_cards = a[N // 2:]\n\n    snuke_min_diff = min_diff(snuke_cards)\n    raccoon_min_diff = min_diff(raccoon_cards)\n\n    return str(min(snuke_min_diff, raccoon_min_diff))",
        "num_ids": 142
    },
    {
        "number": 4705,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x = 16000\n    y = 200\n    result = x - y\n    print(result)\n    return str(result)",
        "num_ids": 41
    },
    {
        "number": 4706,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rows = 3\n    cols = 3\n    grid = [list(row) for row in stdin.split('\\n')]\n\n    diagonal = []\n    for i in range(rows):\n        diagonal.append(grid[i][i])\n        diagonal.append(grid[i][2 - i])\n\n    return ''.join(diagonal)",
        "num_ids": 71
    },
    {
        "number": 4707,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3 = map(int, stdin.split())\n    if s1 == 1 and s2 == 1 and s3 == 1:\n        return \"2\"\n    else:\n        return \"0\"",
        "num_ids": 52
    },
    {
        "number": 4708,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x, y = map(int, stdin.split())\n    total_fee = x * k + y * (n - k)\n    return str(total_fee)",
        "num_ids": 42
    },
    {
        "number": 4709,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into A and B\n    A, op, B = stdin.split()\n    # Convert A and B to integers\n    A = int(A)\n    B = int(B)\n    # Evaluate the formula\n    if op == \"+\":\n        result = A + B\n    else:\n        result = A - B\n    # Print the result\n    print(result)\n    return \"\"",
        "num_ids": 83
    },
    {
        "number": 4710,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 1200:\n        return \"ABC\"\n    else:\n        return \"ARC\"",
        "num_ids": 31
    },
    {
        "number": 4711,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    min_price = float('inf')\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if i + j <= c:\n                min_price = min(min_price, i * a + j * b + c * c)\n    return str(min_price)",
        "num_ids": 90
    },
    {
        "number": 4712,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    a = [list(stdin.split()[i]) for i in range(1, H + 1)]\n\n    for i in range(H):\n        a[i].insert(0, '#')\n        a[i].append('#')\n\n    for j in range(W):\n        a[0].insert(j, '#')\n        a[0].append('#')\n\n    for i in range(1, H):\n        a[i].insert(0, '#')\n        a[i].append('#')\n\n    for i in range(H):\n        a[i].insert(W, '#')\n        a[i].append('#')\n\n    result = '\\n'.join([''.join(row) for row in a])\n    return result",
        "num_ids": 169
    },
    {
        "number": 4713,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    x = 0\n    max_x = 0\n\n    for i in range(N):\n        if S[i] == 'I':\n            x += 1\n        elif S[i] == 'D':\n            x -= 1\n        max_x = max(max_x, x)\n\n    return str(max_x)",
        "num_ids": 85
    },
    {
        "number": 4714,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    count = 0\n    for i in range(A, B + 1):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return str(count)",
        "num_ids": 57
    },
    {
        "number": 4715,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    colors = list(map(int, stdin.split()))\n    colors.sort()\n    unique_colors = set(colors)\n    return str(len(unique_colors))",
        "num_ids": 38
    },
    {
        "number": 4716,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    sticks = list(map(int, stdin.split()))\n\n    def max_length(sticks, k):\n        if k == 1:\n            return max(sticks)\n        else:\n            return max(sticks[k - 1] + max_length(sticks[:k - 1], k - 1), max_length(sticks, k - 1))\n\n    return str(max_length(sticks, k))",
        "num_ids": 111
    },
    {
        "number": 4717,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    if a == b:\n        return \"A\" if x < a else \"B\"\n    return \"A\" if abs(x - a) < abs(x - b) else \"B\"",
        "num_ids": 58
    },
    {
        "number": 4718,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s)!= 10:\n        return \"Invalid input\"\n\n    year = int(s[:4])\n    month = int(s[5:7])\n    day = int(s[8:])\n\n    if year < 2017 or month < 1 or month > 12 or day < 1 or day > 31:\n        return \"Invalid input\"\n\n    new_date = f\"{year:04d}/{month:02d}/{day:02d}\"\n    return new_date",
        "num_ids": 121
    },
    {
        "number": 4719,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    strings = stdin.split()[1:]\n    max_length = 0\n    result = \"\"\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                current_length = len(strings[i]) + len(strings[j]) + len(strings[k])\n                if current_length > max_length:\n                    max_length = current_length\n                    result = strings[i] + strings[j] + strings[k]\n\n    return result",
        "num_ids": 135
    },
    {
        "number": 4720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    seats = []\n    for i in range(n):\n        l, r = map(int, stdin.split()[1].split())\n        seats.append((l, r))\n    occupied_seats = set()\n    for l, r in seats:\n        for seat in range(l, r + 1):\n            occupied_seats.add(seat)\n    return str(len(occupied_seats))",
        "num_ids": 101
    },
    {
        "number": 4721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    blocks = 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0 or i == n - 1 or j == 0 or j == m - 1:\n                blocks += 1\n    return str(blocks)",
        "num_ids": 72
    },
    {
        "number": 4722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a + b <= 100:\n        return \"Possible\"\n    else:\n        return \"Impossible\"",
        "num_ids": 39
    },
    {
        "number": 4723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s = list(s)\n    t = list(t)\n\n    # Check if the string T is a contiguous substring of S\n    for i in range(len(s) - len(t) + 1):\n        if s[i:i + len(t)] == t:\n            break\n    else:\n        return \"UNRESTORABLE\"\n\n    # Replace some letters with?\n    for i in range(len(s)):\n        if s[i] == t[0]:\n            s[i] = \"?\"\n\n    # Check if the string S is the lexicographically smallest among the ones that satisfy Condition 1\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] > s[j]:\n                break\n        else:\n            return s\n\n    return \"UNRESTORABLE\"\n",
        "num_ids": 195
    },
    {
        "number": 4724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, G = map(int, stdin.split())\n    performance = (G - R) / 2\n    return str(performance)",
        "num_ids": 31
    },
    {
        "number": 4725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip().lower()\n    simplicity = len(set(string))\n    if simplicity <= 2:\n        return \"0\"\n    elif simplicity == 3:\n        return \"1\"\n    elif simplicity == 4:\n        return \"2\"\n    else:\n        return str(len(string) - 1)",
        "num_ids": 70
    },
    {
        "number": 4726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n, t = map(int, stdin.split())\n    if t == 1:\n        return \"AC\" if n**4 <= m else \"TLE\"\n    elif t == 2:\n        return \"AC\" if n**2 <= m else \"TLE\"\n    elif t == 3:\n        return \"AC\" if n**4 <= m else \"TLE\"\n    elif t == 4:\n        return \"AC\" if n**3 <= m else \"TLE\"\n    elif t == 5:\n        return \"AC\" if n**2 <= m else \"TLE\"\n    elif t == 6:\n        return \"AC\" if n**2 <= m else \"TLE\"\n    elif t == 7:\n        return \"AC\" if n <= m else \"TLE\"\n    else:\n        return \"TLE\"",
        "num_ids": 176
    },
    {
        "number": 4727,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    grid = []\n    for line in stdin.split('\\n'):\n        row = []\n        for num in line.split():\n            row.append(int(num))\n        grid.append(row)\n\n    move = int(stdin.split('\\n')[4])\n\n    if move == 0:\n        pass\n    elif move == 1:\n        for i in range(4):\n            for j in range(4):\n                if grid[i][j] == 0:\n                    grid[i][j] = 2\n                    break\n                elif grid[i][j] == 2:\n                    grid[i][j] = 4\n                    break\n                elif grid[i][j] == 4:\n                    grid[i][j] = 8\n                    break\n                elif grid[i][j] == 8:\n                    grid[i][j] = 16\n                    break\n                elif grid[i][j] == 16:\n                    grid[i][j] = 32\n                    break\n                elif grid[i][j] == 32:\n                    grid[i][j] = 64\n                    break\n                elif grid[i][j] == 64:\n                    grid[i][j] = 128\n                    break\n                elif grid[i][j] == 128:\n                    grid[i][j] = 256\n                    break\n                elif grid[i][j] == 256:\n                    grid[i][j] = 512\n                    break\n                elif grid[i][j] == 512:\n                    grid[i][j] = 1024\n                    break\n    elif move == 2:\n        for i in range(4):\n            for j in range(4):\n                if grid[i][j] == 0:\n                    grid[i][j] = 2\n                    break\n                elif grid[i][j] == 2:\n                    grid[i][j] = 4\n                    break\n                elif grid[i][j] == 4:\n                    grid[i][j] = 8\n                    break\n                elif grid[i][j] == 8:\n                    grid[i][j] = 16\n                    break\n                elif grid[i][j] == 16:\n                    grid[i][j] = 32\n                    break\n                elif grid[i][j] == 32:\n                    grid[i][j] = 64\n                    break\n                elif grid[i][j] == 64:\n                    grid[i][j] = 128\n                    break\n                elif grid[i][j] == 128:\n                    grid[i][j] = 256\n                    break\n                elif grid[i][j] == 256:\n                    grid[i][j] = 512\n                    break\n                elif grid[i][j] == 512:\n                    grid[i][j] = 1024\n                    break\n    elif move == 3:\n        for i in range(4):\n            for j in range(4):\n                if grid[i][j] == 0:\n                    grid[i][j] = 2\n                    break\n                elif grid[i][j] == 2:\n                    grid[i][j] = 4\n                    break\n                elif grid[i][j] == 4:\n                    grid[i][j] = 8\n                    break\n                elif grid[i][j] == 8:\n                    grid[i][j] = 16\n                    break\n                elif grid[i][j] == 16:\n                    grid[i][j] = 32\n                    break\n                elif grid[i][j] == 32:\n                    grid[i][j] = 64\n                    break\n                elif grid[i][j] == 64:\n                    grid[i][j] = 128\n                    break\n                elif grid[i][j] == 128:\n                    grid[i][j] = 256\n                    break\n                elif grid[i][j] == 256:\n                    grid[i][j] = 512\n                    break\n                elif grid[i][j] == 512:\n                    grid[i][j] = 1024\n                    break\n\n    for i in range(4):\n        for j in range(4):\n            if grid[i][j] == 0:\n                grid[i][j] = 0\n            elif grid[i][j] == 2:\n                grid[i][j] = 2\n            elif grid[i][j] == 4:\n                grid[i][j] = 4\n            elif grid[i][j] == 8:\n                grid[i][j] = 8\n            elif grid[",
        "num_ids": 1025
    },
    {
        "number": 4728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_molecule, k = stdin.split()\n    input_molecule = input_molecule.upper()\n    desired_output = input().upper()\n\n    def count_atoms(molecule: str) -> int:\n        count = 0\n        for atom in molecule:\n            if atom.isalpha():\n                count += int(atom)\n            else:\n                count += 1\n        return count\n\n    def count_output_atoms(input_molecule: str, desired_output: str) -> int:\n        input_count = count_atoms(input_molecule)\n        desired_output_count = count_atoms(desired_output)\n\n        if input_count < desired_output_count:\n            return 0\n\n        output_count = 0\n        for i in range(desired_output_count):\n            output_count += count_atoms(input_molecule[:input_count - desired_output_count + i])\n\n        return output_count\n\n    output_count = count_output_atoms(input_molecule, desired_output)\n    return str(output_count)",
        "num_ids": 224
    },
    {
        "number": 4729,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    password, message = stdin.split()\n    if len(password) < 3 or len(password) > 8:\n        return \"FAIL\"\n\n    if len(message) < 10 or len(message) > 40:\n        return \"FAIL\"\n\n    for i in range(len(message)):\n        if message[i] not in password:\n            return \"FAIL\"\n\n    return \"PASS\"",
        "num_ids": 88
    },
    {
        "number": 4730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for i, c in enumerate(stdin):\n        if c in \"()[]{}\":\n            stack.append(c)\n        elif c == \")\":\n            if not stack or stack.pop()!= \"(\":\n                return f\"] {i}\"\n        elif c == \"]\":\n            if not stack or stack.pop()!= \"[\":\n                return f\"] {i}\"\n        elif c == \"}\":\n            if not stack or stack.pop()!= \"{\":\n                return f\"] {i}\"\n        elif c == \")\":\n            if not stack or stack.pop()!= \"(\":\n                return f\"] {i}\"\n        elif c == \"]\":\n            if not stack or stack.pop()!= \"[\":\n                return f\"] {i}\"\n        elif c == \"}\":\n            if not stack or stack.pop()!= \"{\":\n                return f\"] {i}\"\n\n    if stack:\n        return \"ok so far\"\n    else:\n        return \"ok\"",
        "num_ids": 194
    },
    {
        "number": 4731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    history = set()\n    players = [0] * 2\n    for i in range(N):\n        word = stdin.split()[i + 1]\n        if word in history:\n            return f\"Player {players[word.count('e')]} lost\"\n        history.add(word)\n        players[word.count('e')] += 1\n    return \"Fair Game\"",
        "num_ids": 95
    },
    {
        "number": 4732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into lines\n    lines = stdin.split('\\n')\n\n    # Parse the first line\n    first_line = lines[0].split()\n    first_operand = int(first_line[0])\n\n    # Parse the second line\n    second_line = lines[1].split()\n    operation = second_line[0]\n    second_operand = int(second_line[1])\n\n    # Calculate the result\n    if operation == '+':\n        result = first_operand + second_operand\n    elif operation == '*':\n        result = first_operand * second_operand\n    else:\n        raise ValueError('Invalid operation')\n\n    # Return the result as a string\n    return str(result)",
        "num_ids": 147
    },
    {
        "number": 4733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, action = map(int, stdin.split())\n    deck = list(range(1, n+1))\n    shuffles = 0\n\n    while deck!= sorted(deck):\n        if action == 1:\n            deck = deck[1:] + [deck[0]]\n        else:\n            deck = [deck[-1]] + deck[:-1]\n        shuffles += 1\n\n    return f\"{shuffles}\\n\"",
        "num_ids": 95
    },
    {
        "number": 4734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y, p = stdin.split()\n    y = y.lower()\n    p = p.lower()\n\n    if y.endswith('e'):\n        extended_name = y + 'x' + p\n    elif y[-1] in ['a', 'i', 'o', 'u']:\n        extended_name = y[:-1] + 'ex' + p\n    elif y.endswith('ex'):\n        extended_name = y + p\n    else:\n        extended_name = y + 'ex' + p\n\n    return extended_name",
        "num_ids": 114
    },
    {
        "number": 4735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    if year % 26 == 0:\n        return \"yes\"\n    else:\n        return \"no\"",
        "num_ids": 32
    },
    {
        "number": 4736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = list(map(int, stdin.split()))\n    K = int(stdin.split()[1])\n\n    def count_ways(cards: list) -> int:\n        if len(cards) == 1:\n            return 1\n\n        ways = 0\n        for i in range(len(cards)):\n            for j in range(i + 1, len(cards)):\n                if cards[i] + cards[j] == cards[j] + cards[i]:\n                    ways += count_ways(cards[:i] + cards[i + 1:] + cards[j + 1:])\n\n        return ways\n\n    ways = count_ways(n)\n    return str(ways)",
        "num_ids": 148
    },
    {
        "number": 4737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    problem_estimates = list(map(int, stdin.split()[1:]))\n\n    def is_valid_problem(problem_id: int, problem_estimate: int) -> bool:\n        return problem_estimate <= 300\n\n    valid_problems = [i for i in range(n) if is_valid_problem(i, problem_estimates[i])]\n    valid_problems.remove(p)\n\n    if not valid_problems:\n        return \"0 0\"\n\n    valid_problems.sort(key=lambda x: problem_estimates[x])\n    num_ac = len(valid_problems)\n    penalty_time = problem_estimates[valid_problems[-1]]\n\n    return f\"{num_ac} {penalty_time}\"",
        "num_ids": 178
    },
    {
        "number": 4738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    k = 1\n    while n % k!= 0:\n        k += 1\n    return str(k)",
        "num_ids": 40
    },
    {
        "number": 4739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.split())\n    T = list(map(int, stdin.split()))\n    X = list(map(int, stdin.split()))\n\n    T.sort()\n    X.sort()\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def count_speeds(T, X):\n        speeds = set()\n        for i in range(len(T) - 1):\n            speed = lcm(T[i + 1] - T[i], X[i + 1] - X[i])\n            speeds.add(speed)\n        return speeds\n\n    def find_distances(T, X):\n        distances = set()\n        for i in range(len(T) - 1):\n            distance = X[i + 1] - X[i]\n            distances.add(distance)\n        return distances\n\n    speeds = count_speeds(T, X)\n    distances = find_distances(T, X)\n\n    return f\"{len(speeds)}\\n{' '.join(map(str, sorted(distances)))}\"",
        "num_ids": 270
    },
    {
        "number": 4740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string to a list of digits\n    digits = list(map(int, stdin))\n\n    # Check if the first three digits are 555\n    if digits[0] == 555:\n        # Check if the last four digits are 1212, 9876, 5000, or 7777\n        if digits[1] in [1212, 9876, 5000, 7777]:\n            return \"1\"\n        else:\n            return \"0\"\n    else:\n        return \"0\"",
        "num_ids": 133
    },
    {
        "number": 4741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    fahrenheit, = map(int, stdin.split())\n    celsius = (fahrenheit - 32) * 5 / 9\n    return f\"{int(celsius * 10**9)}/{int(10**9)}\"",
        "num_ids": 58
    },
    {
        "number": 4742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    melody1, melody2 = stdin.split('\\n')\n    melody1 = [note.strip() for note in melody1.split()]\n    melody2 = [note.strip() for note in melody2.split()]\n\n    def is_transposition(melody1, melody2):\n        return melody1 == melody2\n\n    def is_retrograde(melody1, melody2):\n        return melody1[::-1] == melody2\n\n    def is_inversion(melody1, melody2):\n        return melody1[::-1] == melody2[::-1]\n\n    relations = [is_transposition, is_retrograde, is_inversion]\n    valid_relations = [relation for relation in relations if relation(melody1, melody2)]\n\n    if not valid_relations:\n        return \"Nonsense\"\n\n    return \" \".join([str(valid_relations.index(relation)) for relation in valid_relations])",
        "num_ids": 238
    },
    {
        "number": 4743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    nimionese_words = []\n\n    for word in words:\n        nimionese_word = \"\"\n        for i, letter in enumerate(word):\n            if i == 0:\n                nimionese_word += \"hard\" + letter.upper()\n            elif i == 1:\n                nimionese_word += \"Dach\"\n            elif i == 2:\n                nimionese_word += \"Gip\"\n            elif i == 3:\n                nimionese_word += \"Gip\"\n            elif i == 4:\n                nimionese_word += \"Gip\"\n            elif i == 5:\n                nimionese_word += \"Gip\"\n            elif i == 6:\n                nimionese_word += \"Gip\"\n            elif i == 7:\n                nimionese_word += \"Gip\"\n            elif i == 8:\n                nimionese_word += \"Gip\"\n            elif i == 9:\n                nimionese_word += \"Gip\"\n            elif i == 10:\n                nimionese_word += \"Gip\"\n            elif i == 11:\n                nimionese_word += \"Gip\"\n            elif i == 12:\n                nimionese_word += \"Gip\"\n            elif i == 13:\n                nimionese_word += \"Gip\"\n            elif i == 14:\n                nimionese_word += \"Gip\"\n            elif i == 15:\n                nimionese_word += \"Gip\"\n            elif i == 16:\n                nimionese_word += \"Gip\"\n            elif i == 17:\n                nimionese_word += \"Gip\"\n            elif i == 18:\n                nimionese_word += \"Gip\"\n            elif i == 19:\n                nimionese_word += \"Gip\"\n            elif i == 20:\n                nimionese_word += \"Gip\"\n            elif i == 21:\n                nimionese_word += \"Gip\"\n            elif i == 22:\n                nimionese_word += \"Gip\"\n            elif i == 23:\n                nimionese_word += \"Gip\"\n            elif i == 24:\n                nimionese_word += \"Gip\"\n            elif i == 25:\n                nimionese_word += \"Gip\"\n            elif i == 26:\n                nimionese_word += \"Gip\"\n            elif i == 27:\n                nimionese_word += \"Gip\"\n            elif i == 28:\n                nimionese_word += \"Gip\"\n            elif i == 29:\n                nimionese_word += \"Gip\"\n            elif i == 30:\n                nimionese_word += \"Gip\"\n            elif i == 31:\n                nimionese_word += \"Gip\"\n            elif i == 32:\n                nimionese_word += \"Gip\"\n            elif i == 33:\n                nimionese_word += \"Gip\"\n            elif i == 34:\n                nimionese_word += \"Gip\"\n            elif i == 35:\n                nimionese_word += \"Gip\"\n            elif i == 36:\n                nimionese_word += \"Gip\"\n            elif i == 37:\n                nimionese_word += \"Gip\"\n            elif i == 38:\n                nimionese_word += \"Gip\"\n            elif i == 39:\n                nimionese_word += \"Gip\"\n            elif i == 40:\n                nimionese_word += \"Gip\"\n            elif i == 41:\n                nimionese_word += \"Gip\"\n            elif i == 42:\n                nimionese_word += \"Gip\"\n            elif i == 43:\n                nimionese_word += \"Gip\"\n            elif i == 44:\n                nimionese_word += \"Gip\"\n            elif i == 45:\n                nimionese_word += \"Gip\"\n            elif i == 46:\n                nimionese_word += \"Gip\"\n            elif i == 47:\n                nimionese_word += \"Gip\"\n            elif i == 48:\n                nimionese_word += \"Gip\"\n            elif i == 49:\n               ",
        "num_ids": 1025
    },
    {
        "number": 4744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    V = int(stdin)\n    if V == 1:\n        return \"6\"\n    elif V == 2:\n        return \"16\"\n    else:\n        return \"14\"",
        "num_ids": 42
    },
    {
        "number": 4745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, X = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n\n    participating_items = []\n    for i in range(n):\n        if prices[i] > X:\n            participating_items.append(i)\n\n    max_participating_items = len(participating_items)\n    for i in range(len(participating_items)):\n        for j in range(i + 1, len(participating_items)):\n            if prices[participating_items[i]] + prices[participating_items[j]] > X:\n                max_participating_items = max(max_participating_items, j - i + 1)\n\n    return str(max_participating_items)",
        "num_ids": 175
    },
    {
        "number": 4746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0].split()[1])\n    capacity = int(lines[0].split()[0])\n    people_left = [int(x) for x in lines[1].split()]\n    people_entered = [int(x) for x in lines[2].split()]\n    people_waited = [int(x) for x in lines[3].split()]\n\n    if not all(0 <= x <= capacity for x in people_left + people_entered + people_waited):\n        return 'impossible'\n\n    if not all(0 <= x <= capacity for x in people_left) and not all(0 <= x <= capacity for x in people_entered) and not all(0 <= x <= capacity for x in people_waited):\n        return 'impossible'\n\n    if not all(x <= capacity for x in people_left + people_entered + people_waited):\n        return 'impossible'\n\n    if not all(x <= capacity for x in people_left) and not all(x <= capacity for x in people_entered) and not all(x <= capacity for x in people_waited):\n        return 'impossible'\n\n    if not all(x == 0 for x in people_left + people_entered + people_waited):\n        return 'impossible'\n\n    if not all(x == 0 for x in people_left) and not all(x == 0 for x in people_entered) and not all(x == 0 for x in people_waited):\n        return 'impossible'\n\n    if not all(x == 0 for x in people_left + people_entered + people_waited) and not all(x == 0 for x in people_left) and not all(x == 0 for x in people_entered) and not all(x == 0 for x in people_waited):\n        return 'impossible'\n\n    if not all(x == 0 for x in people_left + people_entered + people_waited) and not all(x == 0 for x in people_left) and not all(x == 0 for x in people_entered) and not all(x == 0 for x in people_waited) and not all(x == 0 for x in people_left + people_entered + people_waited):\n        return 'impossible'\n\n    if not all(x == 0 for x in people_left + people_entered + people_waited) and not all(x == 0 for x in people_left) and not all(x == 0 for x in people_entered) and not all(x == 0 for x in people_waited) and not all(x == 0 for x in people_left + people_entered + people_waited) and not all(x == 0 for x in people_left + people_entered + people_waited) and not all(x == 0 for x in people_left + people_entered + people_waited) and not all(x == 0 for x in people_left + people_entered + people_waited) and not all(x == 0 for x in people_left + people_entered + people_waited) and not all(x == 0 for x in people_left + people_entered + people_waited) and not all(x == 0 for x in people_left + people_entered + people_waited) and not all(x == 0 for x in people_left + people_entered + people_waited) and not all(x == 0 for x in people_left + people_entered + people_waited) and not all(x == 0 for x in people_left + people_entered + people_waited) and not all(x == 0 for x in people_left + people_entered + people_waited) and not all(x == 0 for x in people_left + people_entered + people_waited) and not all(x == 0 for x in people_left + people_entered + people_waited) and not all(x == 0 for x in people_left + people_entered + people_waited) and not all(x == 0 for x in people_left + people_entered + people_waited) and not all(x == 0 for x in people_left + people_entered + people_waited) and not all(x == 0 for x in people_left + people",
        "num_ids": 1025
    },
    {
        "number": 4747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    expected_score = 1.0 / n\n    return str(expected_score)",
        "num_ids": 33
    },
    {
        "number": 4748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, N, M = map(int, stdin.split())\n    if H == 1:\n        return \"0 0\"\n\n    def count_bricks(h, n, m):\n        if h == 1:\n            return n + m\n        else:\n            return count_bricks(h - 1, n + 2 * 2 * h, m + 4 * 2 * h)\n\n    A, B = count_bricks(H, N, M)\n    return f\"{A} {B}\"\n",
        "num_ids": 116
    },
    {
        "number": 4749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    grid = [list(line.strip()) for line in stdin.split()[1:]]\n\n    # Check if all rows have the same number of black squares as white squares\n    for row in grid:\n        if len(set(row))!= 2:\n            return \"0\"\n\n    # Check if all columns have the same number of black squares as white squares\n    for col in zip(*grid):\n        if len(set(col))!= 2:\n            return \"0\"\n\n    # Check if no row or column has 3 or more consecutive squares of the same color\n    for row in grid:\n        for i in range(len(row) - 2):\n            if row[i] == row[i + 1] == row[i + 2] == row[i + 3] == row[i + 4]:\n                return \"0\"\n\n    return \"1\"",
        "num_ids": 198
    },
    {
        "number": 4750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split()[0])\n    for _ in range(queries):\n        l1, r1, l2, r2 = map(int, stdin.split()[1:])\n        if l1 < r1 and l2 < r2:\n            a = l1\n            b = r1\n        else:\n            a = l2\n            b = r2\n        if a!= b:\n            print(a, b)\n        else:\n            print(a, a)\n    return \"\"",
        "num_ids": 106
    },
    {
        "number": 4751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def has_cycle(head: ListNode) -> bool:\n        slow = head\n        fast = head\n\n        while fast is not None and fast.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n\n            if slow == fast:\n                return True\n\n        return False\n\n    class ListNode:\n        def __init__(self, val=0, next=None):\n            self.val = val\n            self.next = next\n\n    def string_to_list(s: str) -> ListNode:\n        if not s:\n            return None\n\n        head = ListNode(int(s[0]))\n        current = head\n        for i in range(1, len(s)):\n            current.next = ListNode(int(s[i]))\n            current = current.next\n\n        return head\n\n    def list_to_string(head: ListNode) -> str:\n        if not head:\n            return \"\"\n\n        result = str(head.val)\n        current = head.next\n\n        while current:\n            result += \" \" + str(current.val)\n            current = current.next\n\n        return result\n\n    head = string_to_list(stdin)\n    pos = int(stdin.split()[1])\n\n    if pos == -1:\n        return \"false\" if not has_cycle(head) else \"true\"\n    else:\n        return \"false\" if pos == 0 or not has_cycle(head) else \"true\"",
        "num_ids": 299
    },
    {
        "number": 4752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    target = int(stdin.split()[1])\n    result = []\n\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                result.append(i)\n                result.append(j)\n                break\n\n    return str(result)",
        "num_ids": 90
    },
    {
        "number": 4753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    if N < 3 or N > 100:\n        return \"Invalid input\"\n\n    intersections = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if i!= j:\n                if (i + j) % 2 == 0:\n                    intersections += 1\n\n    return str(intersections)",
        "num_ids": 92
    },
    {
        "number": 4754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    socks = list(map(int, stdin.split()[1:]))\n    socks.sort()\n    if socks[0] == 1:\n        return \"impossible\"\n    moves = 0\n    for i in range(1, n):\n        if socks[i] == socks[i - 1]:\n            moves += 1\n        else:\n            moves += 2\n    return str(moves)",
        "num_ids": 102
    },
    {
        "number": 4755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    candy_price, zeros = map(int, stdin.split())\n    candy_price = candy_price * 10 ** zeros\n    return str(candy_price)",
        "num_ids": 42
    },
    {
        "number": 4756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    citizens = []\n    for _ in range(n):\n        x, y = map(int, stdin.split()[1:])\n        citizens.append((x, y))\n    x_min, y_min = min(citizens, key=lambda x: x[0])\n    x_max, y_max = max(citizens, key=lambda x: x[0])\n    a = (y_max - y_min) / (x_max - x_min)\n    total_unusefulness = sum(sum((x - x_min) ** 2 + (y - y_min) ** 2) for x, y in citizens)\n    return f\"{a:.3f}\"",
        "num_ids": 172
    },
    {
        "number": 4757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, e = map(int, stdin.split())\n    bard = 1\n    bard_songs = set()\n    villagers = [set() for _ in range(n + 1)]\n\n    for _ in range(e):\n        k = int(stdin.split()[1])\n        for v in stdin.split()[2:2 + k]:\n            villagers[int(v)].add(bard)\n            bard_songs.add(int(v))\n\n    for i in range(1, n + 1):\n        if i not in bard_songs:\n            for j in villagers[i]:\n                if j not in bard_songs:\n                    print(j)\n                    break",
        "num_ids": 152
    },
    {
        "number": 4758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T, M = map(int, stdin.split())\n    eye_designs = ['blue', 'green','red', 'yellow']\n    nose_designs = ['brown', 'black', 'white', 'gray']\n    mouth_designs = ['happy','sad', 'angry','scared']\n    \n    eye_combinations = [eye_designs[i] + eye_designs[j] for i in range(N) for j in range(i+1, N)]\n    nose_combinations = [nose_designs[i] + nose_designs[j] for i in range(T) for j in range(i+1, T)]\n    mouth_combinations = [mouth_designs[i] + mouth_designs[j] for i in range(M) for j in range(i+1, M)]\n    \n    all_combinations = eye_combinations + nose_combinations + mouth_combinations\n    unique_combinations = list(set(all_combinations))\n    \n    return str(len(unique_combinations))",
        "num_ids": 240
    },
    {
        "number": 4759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    at_bats = list(map(int, stdin.split()[1:]))\n\n    slugging_percentage = 0\n    total_bases = 0\n    total_time_at_bat = 0\n\n    for at_bat in at_bats:\n        if at_bat == 0:\n            total_bases += 1\n        elif at_bat == 1:\n            total_bases += 1\n            total_time_at_bat += 1\n        elif at_bat == 2:\n            total_bases += 2\n        elif at_bat == 3:\n            total_bases += 3\n        elif at_bat == 4:\n            total_bases += 4\n        else:\n            total_bases += 1\n\n    slugging_percentage = total_bases / total_time_at_bat\n\n    return str(slugging_percentage)",
        "num_ids": 195
    },
    {
        "number": 4760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, n + 1, i):\n                primes[j] = False\n\n    crossed_out = 0\n    for i in range(2, n + 1):\n        if primes[i]:\n            crossed_out += 1\n            if crossed_out == k:\n                return str(i)",
        "num_ids": 145
    },
    {
        "number": 4761,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, H = map(int, stdin.split())\n    if L > H:\n        L, H = H, L\n\n    def is_valid(c: int) -> bool:\n        digits = [int(d) for d in str(c)]\n        return all(digits[i]!= digits[i + 1] for i in range(len(digits) - 1)) and all(digits[i] % digits[i + 1] == 0 for i in range(len(digits) - 1))\n\n    def count_combinations(start: int) -> int:\n        count = 0\n        for c in range(start, H + 1):\n            if is_valid(c):\n                count += 1\n        return count\n\n    return str(count_combinations(L))",
        "num_ids": 175
    },
    {
        "number": 4762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    num_givens = 0\n    for i in range(N):\n        hat_name = input()\n        if hat_name == hat_name.lower():\n            num_givens += 1\n    return str(num_givens / N)",
        "num_ids": 69
    },
    {
        "number": 4763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n > 180:\n        return \"impossible\"\n\n    def throw_dart(section: int) -> int:\n        if section % 3 == 0:\n            return 3 * section\n        elif section % 2 == 0:\n            return 2 * section\n        else:\n            return section\n\n    def is_valid_throw(throw: int) -> bool:\n        return throw <= 20 and throw >= 1\n\n    def is_valid_throw_sum(throw1: int, throw2: int, throw3: int) -> bool:\n        return throw1 + throw2 + throw3 <= n\n\n    def is_valid_throw_sum_for_section(section: int) -> bool:\n        return is_valid_throw_sum(throw_dart(section), throw_dart(section + 1), throw_dart(section + 2))\n\n    def find_valid_throws(section: int) -> list[str]:\n        throws = []\n        for i in range(1, 21):\n            if is_valid_throw(i) and is_valid_throw_sum_for_section(i):\n                throws.append(f\"single {i}\")\n        for i in range(1, 21, 2):\n            if is_valid_throw(i) and is_valid_throw_sum_for_section(i):\n                throws.append(f\"double {i}\")\n        for i in range(2, 21, 3):\n            if is_valid_throw(i) and is_valid_throw_sum_for_section(i):\n                throws.append(f\"triple {i}\")\n        return throws\n\n    valid_throws = find_valid_throws(1)\n    if len(valid_throws) == 0:\n        return \"impossible\"\n    elif len(valid_throws) == 1:\n        return valid_throws[0]\n    else:\n        return \"\\n\".join(valid_throws)",
        "num_ids": 435
    },
    {
        "number": 4764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, v = map(int, stdin.split())\n    cake_volume = n * n * 4\n    horizontal_cut_volume = h * h * 4\n    vertical_cut_volume = v * v * 4\n    biggest_cake_volume = max(cake_volume, horizontal_cut_volume, vertical_cut_volume)\n    return str(biggest_cake_volume)",
        "num_ids": 90
    },
    {
        "number": 4765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    ingredients = []\n    for _ in range(n):\n        sourness, bitterness = map(int, stdin.split()[1:])\n        ingredients.append((sourness, bitterness))\n    ingredients.sort(key=lambda x: abs(x[0] - x[1]))\n    return str(ingredients[0][0] - ingredients[0][1])",
        "num_ids": 94
    },
    {
        "number": 4766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    commands = stdin.split('\\n')\n    result = []\n\n    for command in commands:\n        if command.startswith('Simon says'):\n            words = command.split()\n            if len(words) > 1:\n                result.append(' '.join(words[1:]))\n        else:\n            pass\n\n    return '\\n'.join(result)",
        "num_ids": 74
    },
    {
        "number": 4767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    registers = list(map(int, stdin.split()))\n    p = registers.pop()\n    count = 0\n    while registers:\n        register = registers.pop()\n        if register == p:\n            count += 1\n            p = registers.pop()\n        else:\n            p = (p + 1) % p\n    return str(count)",
        "num_ids": 75
    },
    {
        "number": 4768,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    samples = [list(sample) for sample in stdin.split('\\n')[1:]]\n\n    def get_unlikeliness(tree: str) -> int:\n        unlikeliness = 0\n        for i in range(len(tree) - 1):\n            if tree[i]!= tree[i + 1]:\n                unlikeliness += 1\n        return unlikeliness\n\n    def get_minimal_unlikeliness(trees: List[str]) -> int:\n        return min(get_unlikeliness(tree) for tree in trees)\n\n    def get_evolutionary_tree(samples: List[List[str]]) -> str:\n        def get_tree_weight(tree: str) -> int:\n            weights = [0] * len(tree)\n            for i in range(len(tree) - 1):\n                if tree[i]!= tree[i + 1]:\n                    weights[i] += 1\n            return sum(weights)\n\n        def get_trees(samples: List[List[str]]) -> List[str]:\n            trees = []\n            for i in range(len(samples)):\n                for j in range(i + 1, len(samples)):\n                    tree = ''.join(sorted(samples[i] + samples[j]))\n                    trees.append(tree)\n            return trees\n\n        trees = get_trees(samples)\n        min_unlikeliness = get_minimal_unlikeliness(trees)\n        return min_unlikeliness\n\n    tree_weight = get_tree_weight(get_evolutionary_tree(samples))\n    print(tree_weight)\n\n    for i in range(len(samples) - 1):\n        for j in range(i + 1, len(samples)):\n            print(i, j)\n\n    return ''\n",
        "num_ids": 405
    },
    {
        "number": 4769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.strip().lower()\n    if len(word) < 3:\n        return -1\n\n    # Check if the word is a multigram\n    for i in range(len(word)):\n        for j in range(i + 1, len(word)):\n            if sorted(word[i:j + 1]) == sorted(word[j:i - 1][::-1]):\n                return word[i:j + 1]\n\n    # If the word is not a multigram, return -1\n    return -1",
        "num_ids": 118
    },
    {
        "number": 4770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"Dr. Chaz will have {} pieces of chicken left over!\".format(m - 1)\n    else:\n        return \"Dr. Chaz needs {} more piece[s] of chicken!\".format(m - n)",
        "num_ids": 73
    },
    {
        "number": 4771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, V = map(int, stdin.split())\n    boxes = []\n    for _ in range(n):\n        l, w, h = map(int, stdin.split())\n        boxes.append((l, w, h))\n    boxes.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    for box in boxes:\n        l, w, h = box\n        if l * w * h >= V:\n            return 0\n    return -1",
        "num_ids": 112
    },
    {
        "number": 4772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split()[0].split())\n    grid = []\n    for _ in range(R):\n        row = list(stdin.split()[1])\n        grid.append(row)\n\n    def is_valid(word: str) -> bool:\n        for i in range(len(word) - 1):\n            if grid[i][0] == '#' or grid[i + 1][0] == '#':\n                return False\n        return True\n\n    def lexicographically_smallest_word(grid: List[List[str]]) -> str:\n        def backtrack(i: int, j: int, word: str, words: List[str]) -> None:\n            if i == len(grid) - 1:\n                if is_valid(word):\n                    words.append(word)\n                return\n            for k in range(j, len(grid[i])):\n                if grid[i][k] == '#' or (i > 0 and grid[i - 1][k] == '#'):\n                    continue\n                backtrack(i + 1, k + 1, word + grid[i][k], words)\n\n        words = []\n        backtrack(0, 0, '', words)\n        return min(words, key=len)\n\n    return lexicographically_smallest_word(grid)",
        "num_ids": 292
    },
    {
        "number": 4773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    route = stdin.upper()\n    macro = \"NSEW\"\n    encoded_route = \"\"\n    for move in route:\n        if move in macro:\n            encoded_route += move\n        else:\n            encoded_route += move * 2\n    return len(encoded_route)",
        "num_ids": 60
    },
    {
        "number": 4774,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n\n    def is_valid(expr: str) -> bool:\n        try:\n            result = eval(expr)\n            return True\n        except ZeroDivisionError:\n            return False\n\n    valid_expressions = []\n    for expr in [\"a + b - c\", \"a - b + c\", \"a * b / c\", \"a / b * c\"]:\n        if is_valid(expr):\n            valid_expressions.append(expr)\n\n    if not valid_expressions:\n        return \"problems ahead\"\n\n    valid_expressions.sort()\n    return \"\\n\".join(valid_expressions)\n",
        "num_ids": 140
    },
    {
        "number": 4775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    N = len(A)\n    M = len(B)\n    grid = [['.' for _ in range(N)] for _ in range(M)]\n\n    for i in range(M):\n        for j in range(N):\n            if A[j] == B[i]:\n                grid[i][j] = A[j]\n                break\n\n    for i in range(M):\n        for j in range(N):\n            if grid[i][j] == '.':\n                grid[i][j] = '.'\n            else:\n                grid[i][j] = '.'\n\n    for i in range(M):\n        print(''.join(grid[i]))\n\n    return '\\n'.join([''.join(row) for row in grid])",
        "num_ids": 167
    },
    {
        "number": 4776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    events = [list(map(int, line.split())) for line in stdin.split('\\n')[:-1]]\n    days = set()\n    for start, end in events:\n        for day in range(start, end + 1):\n            days.add(day)\n    return str(len(days))",
        "num_ids": 68
    },
    {
        "number": 4777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.split()[0])\n    A_count = 0\n    B_count = 0\n    for i in range(K):\n        if i % 2 == 0:\n            A_count += 1\n        else:\n            B_count += 1\n    return f\"{A_count} {B_count}\"",
        "num_ids": 74
    },
    {
        "number": 4778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    precincts = []\n    for _ in range(n):\n        d, a, b = map(int, stdin.split())\n        precincts.append((d, a, b))\n\n    parties = ['A', 'B']\n    results = []\n    for d in range(1, m + 1):\n        district_votes = [0, 0]\n        for i, (precinct_d, precinct_a, precinct_b) in enumerate(precincts):\n            if precinct_d == d:\n                district_votes[0] += precinct_a\n                district_votes[1] += precinct_b\n\n        winner = parties[district_votes.index(max(district_votes))]\n        wasted_votes = [0, 0]\n        for i, (precinct_d, precinct_a, precinct_b) in enumerate(precincts):\n            if precinct_d == d:\n                if precinct_a > precinct_b:\n                    wasted_votes[0] += precinct_a - precinct_b\n                else:\n                    wasted_votes[1] += precinct_b - precinct_a\n\n        results.append((winner, wasted_votes[0], wasted_votes[1]))\n\n    efficiency_gap = 0\n    for winner, wasted_a, wasted_b in results:\n        efficiency_gap += abs(wasted_a - wasted_b) / (max(wasted_a, wasted_b) + 1e-6)\n\n    return '\\n'.join(f'{winner} {wasted_a} {wasted_b}' for winner, wasted_a, wasted_b in results) + f'\\n{efficiency_gap:.6f}'",
        "num_ids": 406
    },
    {
        "number": 4779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    max_value = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_value = max(max_value, a[i]**2 + a[j]**2)\n    return str(max_value)",
        "num_ids": 86
    },
    {
        "number": 4780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2 = map(int, stdin.split()[0].split())\n    row1, row2 = stdin.split()[1].split(), stdin.split()[2].split()\n    t = int(stdin.split()[3])\n\n    row1_dict = {row1[i]: i for i in range(len(row1))}\n    row2_dict = {row2[i]: i for i in range(len(row2))}\n\n    def jump(row, ant, direction):\n        if direction == row1_dict[row]:\n            return row2_dict[row]\n        else:\n            return row1_dict[row]\n\n    def swap_rows(row1, row2):\n        row1_dict = {row1[i]: i for i in range(len(row1))}\n        row2_dict = {row2[i]: i for i in range(len(row2))}\n\n        for i in range(len(row1)):\n            if row1_dict[row1[i]] < row2_dict[row2[i]]:\n                row1[i], row2[i] = row2[i], row1[i]\n\n    def ant_jump(row, ant, direction, t):\n        if direction == row1_dict[row]:\n            return jump(row, ant, direction)\n        else:\n            return jump(row, ant, direction)\n\n    def ant_order(row, ant, direction, t):\n        if direction == row1_dict[row]:\n            return row2_dict[row]\n        else:\n            return row1_dict[row]\n\n    def ant_swap(row1, row2, ant1, ant2, direction):\n        if direction == row1_dict[row1]:\n            row1[ant1], row2[ant2] = row2[ant2], row1[ant1]\n        else:\n            row1[ant1], row2[ant2] = row1[ant2], row1[ant1]\n\n    def ant_jump_swap(row, ant, direction, t):\n        if direction == row1_dict[row]:\n            return ant_jump(row, ant, direction, t), ant_swap(row, row2, ant, ant_jump(row, ant, direction, t), direction)\n        else:\n            return ant_jump(row, ant, direction, t), ant_swap(row, row1, ant, ant_jump(row, ant, direction, t), direction)\n\n    def ant_order_swap(row, ant, direction, t):\n        if direction == row1_dict[row]:\n            return ant_order(row, ant, direction, t), ant_swap(row, row2, ant, ant_order(row, ant, direction, t), direction)\n        else:\n            return ant_order(row, ant, direction, t), ant_swap(row, row1, ant, ant_order(row, ant, direction, t), direction)\n\n    def ant_jump_order_swap(row, ant, direction, t):\n        if direction == row1_dict[row]:\n            return ant_jump_swap(row, ant, direction, t), ant_order_swap(row, ant, direction, t)\n        else:\n            return ant_jump_swap(row, ant, direction, t), ant_order_swap(row, ant, direction, t)\n\n    def ant_jump_order_swap_order(row, ant, direction, t):\n        if direction == row1_dict[row]:\n            return ant_jump_order_swap(row, ant, direction, t)[0], ant_order_swap(row, ant, direction, t)[0]\n        else:\n            return ant_jump_order_swap(row, ant, direction, t)[0], ant_order_swap(row, ant, direction, t)[0]\n\n    def ant_jump_order_swap_order_jump(row, ant, direction, t):\n        if direction == row1_dict[row]:\n            return ant_jump_order_swap(row, ant, direction, t)[1], ant_jump_swap(row, ant, direction, t)[0]\n        else:\n            return ant_jump_order_swap(row, ant, direction, t)[1], ant_jump_swap(row, ant, direction, t)[0]\n\n    def ant_jump_order_swap_order_jump_order(row, ant, direction, t):\n        if direction == row1_dict[row]:\n            return ant_jump_order_swap_order(row, ant, direction, t)[0], ant_order_swap(row, ant",
        "num_ids": 1025
    },
    {
        "number": 4781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    K, N = map(int, stdin.split())\n    Q = []\n    for _ in range(N):\n        T, Z = map(int, stdin.split())\n        Q.append((T, Z))\n\n    # simulate game\n    box_pos = K - 1\n    exploded = False\n    for T, Z in Q:\n        if T <= 30 and T + 30 > 0:\n            exploded = True\n            break\n        if Z == 'T':\n            box_pos = (box_pos + 1) % 8\n        elif Z == 'N':\n            box_pos = (box_pos - 1) % 8\n\n    # output\n    return str(box_pos + 1) if exploded else \"IMPOSSIBLE\"",
        "num_ids": 171
    },
    {
        "number": 4782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        roads[a - 1].append(b - 1)\n        roads[b - 1].append(a - 1)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for road in roads[i - 1]:\n                dp[i][j] = max(dp[i][j], dp[i][road] + dp[road][j] + 1)\n    return str(dp[n][n])",
        "num_ids": 184
    },
    {
        "number": 4783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.split())\n    coins = []\n    for i in range(M):\n        coins.append(list(map(int, stdin.split())))\n\n    def bfs(start, end):\n        queue = [(start, 0)]\n        visited = set()\n        while queue:\n            pos, height = queue.pop(0)\n            if pos == end:\n                return height\n            if pos not in visited:\n                visited.add(pos)\n                for neighbor in [(pos[0] - 1, pos[1]), (pos[0], pos[1] - 1), (pos[0], pos[1] + 1), (pos[0] + 1, pos[1])]:\n                    if 0 <= neighbor[0] < M and 0 <= neighbor[1] < N and coins[neighbor[0]][neighbor[1]] > height:\n                        queue.append((neighbor, height + 1))\n        return -1\n\n    start = (0, 0)\n    end = (M - 1, N - 1)\n    shortest_ladder = bfs(start, end)\n    if shortest_ladder == -1:\n        return \"0\"\n    return str(shortest_ladder)",
        "num_ids": 271
    },
    {
        "number": 4784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split())\n    P = list(map(int, stdin.split()))\n\n    total_spent = sum(P)\n    available_mb = X\n\n    for i in range(N):\n        available_mb -= P[i]\n        if available_mb < 0:\n            available_mb = 0\n\n    return str(available_mb)",
        "num_ids": 83
    },
    {
        "number": 4785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if's' in stdin and's' in stdin[::-1]:\n        return 'hiss'\n    else:\n        return 'no hiss'",
        "num_ids": 32
    },
    {
        "number": 4786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    keywords = [line.strip() for line in stdin.split('\\n')[1:]]\n    similar_keywords = set()\n\n    for i in range(len(keywords)):\n        for j in range(i + 1, len(keywords)):\n            if keywords[i] == keywords[j]:\n                similar_keywords.add(keywords[i])\n\n    return str(len(similar_keywords))",
        "num_ids": 84
    },
    {
        "number": 4787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    tablets = 0\n    compasses = 0\n    gears = 0\n\n    for card in stdin:\n        if card == 'T':\n            tablets += 1\n        elif card == 'C':\n            compasses += 1\n        elif card == 'G':\n            gears += 1\n\n    points = tablets ** 2 + compasses ** 2 + gears ** 2 + 7 * (tablets * compasses * gears)\n\n    return str(points)",
        "num_ids": 104
    },
    {
        "number": 4788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2 = map(int, stdin.split())\n    if n1 == n2:\n        return \"0\"\n\n    if n1 < n2:\n        n1, n2 = n2, n1\n\n    if n1 > 180:\n        n1 -= 360\n\n    if n2 > 180:\n        n2 -= 360\n\n    if n1 == 0:\n        return \"180\"\n\n    if n2 == 0:\n        return \"-180\"\n\n    if n1 == 180:\n        return \"0\"\n\n    if n2 == 180:\n        return \"0\"\n\n    if n1 == 90:\n        return \"180\"\n\n    if n2 == 90:\n        return \"-180\"\n\n    if n1 == 270:\n        return \"0\"\n\n    if n2 == 270:\n        return \"0\"\n\n    if n1 == 315:\n        return \"180\"\n\n    if n2 == 315:\n        return \"-180\"\n\n    if n1 == 359:\n        return \"0\"\n\n    if n2 == 359:\n        return \"0\"\n\n    if n1 == 45:\n        return \"90\"\n\n    if n2 == 45:\n        return \"-90\"\n\n    if n1 == 135:\n        return \"90\"\n\n    if n2 == 135:\n        return \"-90\"\n\n    if n1 == 225:\n        return \"90\"\n\n    if n2 == 225:\n        return \"-90\"\n\n    if n1 == 315:\n        return \"90\"\n\n    if n2 == 315:\n        return \"-90\"\n\n    if n1 == 359:\n        return \"90\"\n\n    if n2 == 359:\n        return \"-90\"\n\n    if n1 == 45:\n        return \"180\"\n\n    if n2 == 45:\n        return \"-180\"\n\n    if n1 == 135:\n        return \"180\"\n\n    if n2 == 135:\n        return \"-180\"\n\n    if n1 == 225:\n        return \"180\"\n\n    if n2 == 225:\n        return \"-180\"\n\n    if n1 == 315:\n        return \"180\"\n\n    if n2 == 315:\n        return \"-180\"\n\n    if n1 == 359:\n        return \"180\"\n\n    if n2 == 359:\n        return \"-180\"\n\n    if n1 == 45:\n        return \"270\"\n\n    if n2 == 45:\n        return \"-270\"\n\n    if n1 == 135:\n        return \"270\"\n\n    if n2 == 135:\n        return \"-270\"\n\n    if n1 == 225:\n        return \"270\"\n\n    if n2 == 225:\n        return \"-270\"\n\n    if n1 == 315:\n        return \"270\"\n\n    if n2 == 315:\n        return \"-270\"\n\n    if n1 == 359:\n        return \"270\"\n\n    if n2 == 359:\n        return \"-270\"\n\n    if n1 == 45:\n        return \"315\"\n\n    if n2 == 45:\n        return \"-315\"\n\n    if n1 == 135:\n        return \"315\"\n\n    if n2 == 135:\n        return \"-315\"\n\n    if n1 == 225:\n        return \"315\"\n\n    if n2 == 225:\n        return \"-315\"\n\n    if n1 == 315:\n        return \"315\"\n\n    if n2 == 315:\n        return \"-315\"\n\n    if n1 == 359:\n        return \"315\"\n\n    if n2 == 359:\n        return \"-315\"\n\n    if n1 == 45:\n        return \"359\"\n\n    if n2 == 45:\n        return \"-359\"\n\n    if n1 == 135:\n        return \"359\"\n\n    if n2 == 135:\n        return \"-359\"\n\n    if n1 == 225:\n        return \"359\"\n\n    if n2 == 225",
        "num_ids": 1025
    },
    {
        "number": 4789,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, *desk_numbers = map(int, stdin.split())\n    desk_numbers = sorted(set(desk_numbers))\n    desk_numbers.sort()\n    count = 0\n    for i in range(len(desk_numbers)):\n        if desk_numbers[i] == i + 1:\n            count += 1\n        else:\n            break\n    return str(count)",
        "num_ids": 87
    },
    {
        "number": 4790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    black_stones = 0\n    white_stones = 0\n    for i in range(n):\n        if stdin[i] == 'B':\n            black_stones += 1\n        else:\n            white_stones += 1\n    if black_stones == 1 and white_stones == 1:\n        return '1'\n    elif black_stones == 0 and white_stones == 1:\n        return '0'\n    else:\n        return '1'",
        "num_ids": 107
    },
    {
        "number": 4791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3, s4 = map(int, stdin.split())\n    area = max(s1 * s2, s2 * s3, s3 * s4, s4 * s1)\n    return str(area)",
        "num_ids": 57
    },
    {
        "number": 4792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin.strip().lower()\n    compact_name = \"\"\n    for i in range(len(name)):\n        if i == 0 or name[i]!= name[i - 1]:\n            compact_name += name[i]\n    return compact_name",
        "num_ids": 59
    },
    {
        "number": 4793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, v1, v2 = map(int, stdin.split())\n    if v1 > v2:\n        v1, v2 = v2, v1\n\n    if s % (v1 + v2)!= 0:\n        return \"Impossible\"\n\n    n1 = s // v1\n    n2 = s // v2\n\n    if n1 * v1 + n2 * v2!= s:\n        return \"Impossible\"\n\n    return f\"{n1} {n2}\"",
        "num_ids": 107
    },
    {
        "number": 4794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split()[0].split())\n    map_ = [list(row) for row in stdin.split()[1:]]\n\n    def count_cars(row: int, col: int, cars: int) -> int:\n        if row < 0 or row >= R or col < 0 or col >= C:\n            return 0\n        if map_[row][col] == '#':\n            return 0\n        if map_[row][col] == 'X':\n            return 1\n        return count_cars(row + 1, col, cars) + count_cars(row - 1, col, cars) + count_cars(row, col + 1, cars) + count_cars(row, col - 1, cars)\n\n    def count_spaces(row: int, col: int, cars: int) -> int:\n        if row < 0 or row >= R or col < 0 or col >= C:\n            return 0\n        if map_[row][col] == '#':\n            return 0\n        if map_[row][col] == 'X':\n            return 1\n        return count_spaces(row + 1, col, cars) + count_spaces(row - 1, col, cars) + count_spaces(row, col + 1, cars) + count_spaces(row, col - 1, cars)\n\n    def count_groups(row: int, col: int, cars: int) -> int:\n        if row < 0 or row >= R or col < 0 or col >= C:\n            return 0\n        if map_[row][col] == '#':\n            return 0\n        if map_[row][col] == 'X':\n            return 1\n        return count_groups(row + 1, col, cars) + count_groups(row - 1, col, cars) + count_groups(row, col + 1, cars) + count_groups(row, col - 1, cars)\n\n    def count_groups_with_cars(row: int, col: int, cars: int) -> int:\n        if row < 0 or row >= R or col < 0 or col >= C:\n            return 0\n        if map_[row][col] == '#':\n            return 0\n        if map_[row][col] == 'X':\n            return 1\n        return count_groups_with_cars(row + 1, col, cars) + count_groups_with_cars(row - 1, col, cars) + count_groups_with_cars(row, col + 1, cars) + count_groups_with_cars(row, col - 1, cars)\n\n    def count_groups_without_cars(row: int, col: int, cars: int) -> int:\n        if row < 0 or row >= R or col < 0 or col >= C:\n            return 0\n        if map_[row][col] == '#':\n            return 0\n        if map_[row][col] == 'X':\n            return 1\n        return count_groups_without_cars(row + 1, col, cars) + count_groups_without_cars(row - 1, col, cars) + count_groups_without_cars(row, col + 1, cars) + count_groups_without_cars(row, col - 1, cars)\n\n    def count_groups_with_truck(row: int, col: int, cars: int) -> int:\n        if row < 0 or row >= R or col < 0 or col >= C:\n            return 0\n        if map_[row][col] == '#':\n            return 0\n        if map_[row][col] == 'X':\n            return 1\n        return count_groups_with_truck(row + 1, col, cars) + count_groups_with_truck(row - 1, col, cars) + count_groups_with_truck(row, col + 1, cars) + count_groups_with_truck(row, col - 1, cars)\n\n    def count_groups_without_truck(row: int, col: int, cars: int) -> int:\n        if row < 0 or row >= R or col < 0 or col >= C:\n            return 0\n        if map_[row][col] == '#':\n            return 0\n        if map_[row][col] == 'X':\n            return 1\n        return count_groups_without_truck(row + 1, col, cars) + count_groups_without_truck(row - 1, col, cars) + count_groups_without",
        "num_ids": 1025
    },
    {
        "number": 4795,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    numbers = [int(x) for x in stdin.split()[1:]]\n    pows = [int(x) for x in stdin.split()[1:N+1]]\n    result = 0\n    for i in range(N):\n        result += numbers[i] ** pows[i]\n    return str(result)",
        "num_ids": 83
    },
    {
        "number": 4796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    orange, apple, pineapple = map(int, stdin.split())\n    ratio = map(int, stdin.split())\n\n    orange_amount = orange * ratio[0]\n    apple_amount = apple * ratio[1]\n    pineapple_amount = pineapple * ratio[2]\n\n    leftover_orange = orange - orange_amount\n    leftover_apple = apple - apple_amount\n    leftover_pineapple = pineapple - pineapple_amount\n\n    return f\"{leftover_orange:.4f} {leftover_apple:.4f} {leftover_pineapple:.4f}\"",
        "num_ids": 144
    },
    {
        "number": 4797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    output = \"\"\n    for char in stdin:\n        if char == \"<\":\n            output += char\n        else:\n            output += char[:-1]\n    return output",
        "num_ids": 34
    },
    {
        "number": 4798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into a list of words\n    words = stdin.split()\n\n    # Initialize an empty list to store the short variations\n    short_variations = []\n\n    # Iterate over the words\n    for word in words:\n        # Split the word into a list of letters\n        letters = list(word)\n\n        # Initialize a boolean flag to keep track of whether the word is complete\n        is_complete = True\n\n        # Iterate over the letters in the word\n        for i in range(len(letters)):\n            # If the letter is a hyphen, set the flag to False\n            if letters[i] == '-':\n                is_complete = False\n                break\n\n            # If the letter is not a hyphen, convert it to uppercase\n            letters[i] = letters[i].upper()\n\n        # If the word is complete, add it to the list of short variations\n        if is_complete:\n            short_variations.append(''.join(letters))\n\n    # Join the short variations into a single string and return it\n    return '-'.join(short_variations)",
        "num_ids": 224
    },
    {
        "number": 4799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    G, S, C = map(int, stdin.split())\n    if G + S + C > 5:\n        return \"Invalid input\"\n\n    if G >= 3:\n        return \"Province or Gold\"\n    elif S >= 2:\n        return \"Silver or Gold\"\n    elif C >= 1:\n        return \"Copper or Gold\"\n    else:\n        return \"Invalid input\"",
        "num_ids": 85
    },
    {
        "number": 4800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d, s = map(int, stdin.split())\n\n    if k == 0:\n        return \"impossible\"\n\n    if k == n:\n        return str(d)\n\n    if k == 1:\n        return str(max(d, s))\n\n    if k > 1:\n        return str(max(d, s) * (n - k + 1) + (d + s) * k / 2)",
        "num_ids": 107
    },
    {
        "number": 4801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    gis = []\n    for i in range(1, n):\n        left = 0\n        right = i\n        while left < right:\n            mid = (left + right) // 2\n            if a[mid] > a[i]:\n                left = mid + 1\n            else:\n                right = mid\n        gis.append(a[left])\n    return str(len(gis)) +'' +''.join(map(str, gis))",
        "num_ids": 126
    },
    {
        "number": 4802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    if h == 0 and m < 30:\n        h = 23\n        m = 45 - m\n    else:\n        h = (h + 45) % 24\n        m = (m - 30) % 60\n    return f\"{h:02d} {m:02d}\"",
        "num_ids": 89
    },
    {
        "number": 4803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = float(stdin)\n    if N < 0.36788 or N > 2.718281:\n        return \"Invalid input\"\n\n    a = 1\n    for i in range(1, int(N)):\n        a += 1\n\n    return str(a)",
        "num_ids": 67
    },
    {
        "number": 4804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = int(stdin)\n    if S == 1:\n        return \"1:\"\n    elif S == 2:\n        return \"2:1,1\"\n    elif S == 3:\n        return \"3:1,1,1\"\n    elif S == 4:\n        return \"4:1,1,1,1\"\n    elif S == 5:\n        return \"5:1,1,1,1,1\"\n    elif S == 6:\n        return \"6:1,1,1,1,1,1\"\n    elif S == 7:\n        return \"7:1,1,1,1,1,1,1\"\n    elif S == 8:\n        return \"8:1,1,1,1,1,1,1,1\"\n    elif S == 9:\n        return \"9:1,1,1,1,1,1,1,1,1\"\n    elif S == 10:\n        return \"10:1,1,1,1,1,1,1,1,1,1\"\n    elif S == 11:\n        return \"11:1,1,1,1,1,1,1,1,1,1,1\"\n    elif S == 12:\n        return \"12:1,1,1,1,1,1,1,1,1,1,1,1\"\n    elif S == 13:\n        return \"13:1,1,1,1,1,1,1,1,1,1,1,1,1\"\n    elif S == 14:\n        return \"14:1,1,1,1,1,1,1,1,1,1,1,1,1,1\"\n    elif S == 15:\n        return \"15:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1\"\n    elif S == 16:\n        return \"16:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1\"\n    elif S == 17:\n        return \"17:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1\"\n    elif S == 18:\n        return \"18:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1\"\n    elif S == 19:\n        return \"19:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1\"\n    elif S == 20:\n        return \"20:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1\"\n    elif S == 21:\n        return \"21:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1\"\n    elif S == 22:\n        return \"22:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1\"\n    elif S == 23:\n        return \"23:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1\"\n    elif S == 24:\n        return \"24:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1\"\n    elif S == 25:\n        return \"25:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1\"\n    elif S == 26:\n        return \"26:1,1,1,1,1,1,1,1,1,1,1,1",
        "num_ids": 1025
    },
    {
        "number": 4805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            return \"no\"\n        seen.add(word)\n    return \"yes\"",
        "num_ids": 42
    },
    {
        "number": 4806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    moves = list(stdin)\n    result = []\n    current_move = ''\n    current_combination = ''\n\n    for move in moves:\n        if move == 'R':\n            current_move = 'R'\n        elif move == 'B':\n            current_move = 'B'\n        elif move == 'L':\n            current_move = 'L'\n        elif move == 'S':\n            current_combination += 'S'\n        elif move == 'K':\n            current_combination += 'K'\n        elif move == 'H':\n            current_combination += 'H'\n        elif move == 'C':\n            current_combination += 'C'\n\n        if current_combination:\n            result.append(current_combination)\n            current_combination = ''\n\n        if current_move:\n            result.append(current_move)\n            current_move = ''\n\n    return ''.join(result)",
        "num_ids": 192
    },
    {
        "number": 4807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.split())\n    result = []\n    for i in range(1, n+1):\n        if i % x == 0 and i % y == 0:\n            result.append(\"FizzBuzz\")\n        elif i % x == 0:\n            result.append(\"Fizz\")\n        elif i % y == 0:\n            result.append(\"Buzz\")\n        else:\n            result.append(str(i))\n    return \"\\n\".join(result)",
        "num_ids": 113
    },
    {
        "number": 4808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    days = list(map(int, stdin.split()))\n\n    for i in range(1, n):\n        days[i] += days[i - 1]\n\n    for i in range(n - 1, -1, -1):\n        if days[i] > m:\n            return f\"It hadn't snowed this early in {i + 1} years!\"\n\n    return \"It had never snowed this early!\"",
        "num_ids": 108
    },
    {
        "number": 4809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, n = map(int, stdin.split())\n    if s == 10:\n        return str(n)\n    else:\n        return str(n - 1)",
        "num_ids": 40
    },
    {
        "number": 4810,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    message = stdin.lower()\n    rows = 1\n    cols = 1\n    while rows * cols < len(message):\n        rows += 1\n        cols = 1\n    matrix = [[0] * cols for _ in range(rows)]\n    for i, c in enumerate(message):\n        matrix[i // cols][i % cols] = ord(c) - ord('a')\n    encrypted_message = \"\"\n    for row in matrix:\n        for col in row:\n            encrypted_message += chr(col + ord('a'))\n    return encrypted_message",
        "num_ids": 120
    },
    {
        "number": 4811,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    if K == 1:\n        return \"1 1\"\n\n    def is_power_of_two(n: int) -> bool:\n        return n > 0 and (n & (n - 1)) == 0\n\n    def next_power_of_two(n: int) -> int:\n        return 1 << (n.bit_length() - 1)\n\n    def count_breaks(n: int) -> int:\n        if n == 1:\n            return 0\n        return 1 + count_breaks(n >> 1)\n\n    def min_bar_size(n: int) -> int:\n        if n == 1:\n            return 1\n        return min_bar_size(n >> 1)\n\n    def min_breaks(n: int) -> int:\n        if n == 1:\n            return 0\n        return 1 + min_breaks(n >> 1)\n\n    def min_bar_size_with_k(n: int) -> int:\n        if n == 1:\n            return 1\n        if n == K:\n            return 1\n        return min_bar_size_with_k(n >> 1)\n\n    def min_breaks_with_k(n: int) -> int:\n        if n == 1:\n            return 0\n        if n == K:\n            return 0\n        return 1 + min_breaks_with_k(n >> 1)\n\n    def min_bar_size_with_k_and_breaks(n: int) -> int:\n        if n == 1:\n            return 1\n        if n == K:\n            return 1\n        return min_bar_size_with_k_and_breaks(n >> 1)\n\n    def min_breaks_with_k_and_breaks(n: int) -> int:\n        if n == 1:\n            return 0\n        if n == K:\n            return 0\n        return 1 + min_breaks_with_k_and_breaks(n >> 1)\n\n    def min_bar_size_with_k_and_breaks_and_min_bar_size(n: int) -> int:\n        if n == 1:\n            return 1\n        if n == K:\n            return 1\n        return min_bar_size_with_k_and_breaks_and_min_bar_size(n >> 1)\n\n    def min_breaks_with_k_and_breaks_and_min_bar_size(n: int) -> int:\n        if n == 1:\n            return 0\n        if n == K:\n            return 0\n        return 1 + min_breaks_with_k_and_breaks_and_min_bar_size(n >> 1)\n\n    def min_bar_size_with_k_and_breaks_and_min_bar_size_and_min_breaks(n: int) -> int:\n        if n == 1:\n            return 1\n        if n == K:\n            return 1\n        return min_bar_size_with_k_and_breaks_and_min_bar_size_and_min_breaks(n >> 1)\n\n    def min_breaks_with_k_and_breaks_and_min_bar_size_and_min_breaks(n: int) -> int:\n        if n == 1:\n            return 0\n        if n == K:\n            return 0\n        return 1 + min_breaks_with_k_and_breaks_and_min_bar_size_and_min_breaks(n >> 1)\n\n    def min_bar_size_with_k_and_breaks_and_min_bar_size_and_min_breaks_and_min_bar_size_with_k(n: int) -> int:\n        if n == 1:\n            return 1\n        if n == K:\n            return 1\n        return min_bar_size_with_k_and_breaks_and_min_bar_size_and_min_breaks_and_min_bar_size_with_k(n >> 1)\n\n    def min_breaks_with_k_and_breaks_and_min_bar_size_and_min_breaks_and_min_bar_size_with_k(n: int) -> int:\n        if n == 1:\n            return 0\n        if n == K:\n            return 0\n        return 1 + min_breaks_with",
        "num_ids": 1025
    },
    {
        "number": 4812,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    common_word, num_lists, *list_of_lists = stdin.split('\\n')\n    num_lists = int(num_lists)\n    list_of_lists = [list(map(str.lower, line.split())) for line in list_of_lists]\n\n    num_phrases, *phrases = stdin.split('\\n')\n    num_phrases = int(num_phrases)\n    phrases = [line.split() for line in phrases]\n\n    rhyming_phrases = []\n    for phrase in phrases:\n        if all(word in list_of_lists[i] for i, word in enumerate(phrase[:-1])):\n            rhyming_phrases.append(' '.join(phrase))\n\n    for i, phrase in enumerate(rhyming_phrases):\n        if all(word in list_of_lists[i] for i, word in enumerate(phrase.split()[:-1])):\n            rhyming_phrases[i] = 'YES'\n        else:\n            rhyming_phrases[i] = 'NO'\n\n    return '\\n'.join(rhyming_phrases)\n",
        "num_ids": 251
    },
    {
        "number": 4813,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    word, permutation = stdin.split('\\n')\n    word = word.upper()\n    permutation = permutation.upper()\n\n    def draw_stick_figure(stick_figure: str) -> str:\n        return '-' * len(stick_figure)\n\n    def draw_hangman(stick_figure: str) -> str:\n        return '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick_figure) + '\\n' + '-' * len(stick",
        "num_ids": 1025
    },
    {
        "number": 4814,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    names = stdin.split('\\n')\n    names.pop(0)\n    names.sort()\n    if names == sorted(names, reverse=True):\n        return 'DECREASING'\n    elif names == sorted(names):\n        return 'INCREASING'\n    else:\n        return 'NEITHER'",
        "num_ids": 66
    },
    {
        "number": 4815,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, m = map(int, stdin.split())\n    players = {}\n    for i in range(n):\n        name = stdin.split()[i]\n        players[name] = 0\n\n    for i in range(m):\n        name, points = stdin.split()[i].split()\n        players[name] += int(points)\n\n    min_score = min(players.values())\n    winners = [name for name, score in players.items() if score == min_score]\n\n    if not winners:\n        return \"No winner!\"\n    else:\n        return \"\\n\".join(winners) + \"\\n\" + \" \".join([f\"{name} wins!\" for name in winners])",
        "num_ids": 155
    },
    {
        "number": 4816,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, x1, y1, x2, y2 = map(int, stdin.split())\n    if x1 > x2 or y1 > y2:\n        return \"Invalid input\"\n\n    dx = x2 - x1\n    dy = y2 - y1\n    if dx == 0 or dy == 0:\n        return \"Invalid input\"\n\n    min_distance = abs(x - x1) + abs(y - y1)\n    if min_distance > abs(x - x2) + abs(y - y2):\n        min_distance = abs(x - x2) + abs(y - y2)\n\n    return f\"{min_distance:.4f}\"",
        "num_ids": 152
    },
    {
        "number": 4817,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 0:\n        return \"0\"\n\n    digits = [int(digit) for digit in str(x)]\n    max_digit = max(digits)\n\n    for i in range(max_digit, 0, -1):\n        if digits.count(i) == len(digits):\n            return str(x + i)\n\n    return \"0\"",
        "num_ids": 86
    },
    {
        "number": 4818,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tasks = list(map(int, stdin.split()))\n    quiet_intervals = list(map(int, stdin.split()))\n\n    tasks.sort()\n    quiet_intervals.sort()\n\n    count = 0\n    current_interval = 0\n    current_task = 0\n\n    while current_task < n and current_interval < m:\n        if tasks[current_task] <= quiet_intervals[current_interval]:\n            count += 1\n            current_task += 1\n        else:\n            current_interval += 1\n\n    return str(count)",
        "num_ids": 132
    },
    {
        "number": 4819,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(x) % 42 for x in stdin.split()]\n    distinct_numbers = set(numbers)\n    return str(len(distinct_numbers))",
        "num_ids": 39
    },
    {
        "number": 4820,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, b = map(int, stdin.split())\n    if N > 10**15 or b > 50:\n        return \"no\"\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def compress(n: int) -> int:\n        if n == 1:\n            return 1\n        if is_prime(n):\n            return 2\n        return 3\n\n    compressed_files = [compress(i) for i in range(1, N + 1)]\n    compressed_sum = sum(compressed_files)\n\n    if compressed_sum <= b:\n        return \"yes\"\n    else:\n        return \"no\"",
        "num_ids": 186
    },
    {
        "number": 4821,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into a list of card labels\n    card_labels = stdin.split()\n\n    # Create a dictionary to store the count of each suit\n    suit_counts = {suit: 0 for suit in 'PKHT'}\n\n    # Iterate through the card labels and update the suit counts\n    for card_label in card_labels:\n        suit, number = card_label[0], int(card_label[1:])\n        suit_counts[suit] += 1 - number\n\n    # Check if there are two exact same cards in the deck\n    if suit_counts['P'] == 2 and suit_counts['K'] == 2 and suit_counts['H'] == 2 and suit_counts['T'] == 2:\n        return 'GRESKA'\n\n    # Output the missing card counts\n    return''.join(str(count) for count in suit_counts.values())",
        "num_ids": 191
    },
    {
        "number": 4822,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, S, K = map(int, stdin.split())\n    picture = [list(line.strip()) for line in stdin.splitlines()[1:]]\n    flies = [(i, j) for i in range(R) for j in range(S) if picture[i][j] == '*']\n    flies.sort(key=lambda x: (x[1], x[0]))\n\n    def is_inside_racket(x: int, y: int) -> bool:\n        return 0 <= x < R and 0 <= y < S\n\n    def is_inside_window(x: int, y: int) -> bool:\n        return 0 <= x < R and 0 <= y < S and picture[x][y] == '.'\n\n    def is_inside_racket_and_window(x: int, y: int) -> bool:\n        return is_inside_racket(x, y) and is_inside_window(x, y)\n\n    def is_inside_racket_and_window_and_not_fly(x: int, y: int) -> bool:\n        return is_inside_racket_and_window(x, y) and picture[x][y]!= '*'\n\n    def is_inside_racket_and_window_and_not_fly_and_not_flying_away(x: int, y: int) -> bool:\n        return is_inside_racket_and_window_and_not_fly(x, y) and not is_flying_away(x, y)\n\n    def is_flying_away(x: int, y: int) -> bool:\n        return picture[x][y] == '-'\n\n    def is_flying_away_and_not_flying_away_to_the_right(x: int, y: int) -> bool:\n        return is_flying_away(x, y) and not is_flying_away_to_the_right(x, y)\n\n    def is_flying_away_and_not_flying_away_to_the_right_and_not_flying_away_to_the_bottom(x: int, y: int) -> bool:\n        return is_flying_away_and_not_flying_away_to_the_right(x, y) and not is_flying_away_to_the_bottom(x, y)\n\n    def is_flying_away_to_the_right(x: int, y: int) -> bool:\n        return picture[x][y] == '+'\n\n    def is_flying_away_to_the_right_and_not_flying_away_to_the_bottom(x: int, y: int) -> bool:\n        return is_flying_away_to_the_right(x, y) and not is_flying_away_to_the_bottom(x, y)\n\n    def is_flying_away_to_the_bottom(x: int, y: int) -> bool:\n        return picture[x][y] == '|'\n\n    def is_flying_away_to_the_bottom_and_not_flying_away_to_the_right(x: int, y: int) -> bool:\n        return is_flying_away_to_the_bottom(x, y) and not is_flying_away_to_the_right(x, y)\n\n    def is_flying_away_to_the_bottom_and_not_flying_away_to_the_right_and_not_flying_away_to_the_top(x: int, y: int) -> bool:\n        return is_flying_away_to_the_bottom_and_not_flying_away_to_the_right(x, y) and not is_flying_away_to_the_top(x, y)\n\n    def is_flying_away_to_the_top(x: int, y: int) -> bool:\n        return picture[x][y] == '+'\n\n    def is_flying_away_to_the_top_and_not_flying_away_to_the_right(x: int, y: int) -> bool:\n        return is_flying_away_to_the_top(x, y) and not is_flying_away_to_the_right(x, y)\n\n    def is_flying_away_to_the_top_and_not_flying_away_to_the_right_",
        "num_ids": 1025
    },
    {
        "number": 4823,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cards = stdin.split()\n    card_ranks = [card[0] for card in cards]\n    card_suits = [card[1] for card in cards]\n\n    card_ranks.sort()\n    card_suits.sort()\n\n    strength = 0\n    for i in range(len(card_ranks)):\n        if card_ranks[i] == card_ranks[i + 1]:\n            strength += 1\n\n    return str(strength)",
        "num_ids": 100
    },
    {
        "number": 4824,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    C, P = map(int, stdin.split())\n    heights = list(map(int, stdin.split()))\n\n    def count_ways(heights, col, row, piece):\n        if col == C:\n            return 1\n\n        if heights[col] == 0:\n            return count_ways(heights, col + 1, row, piece)\n\n        if piece == 1:\n            return count_ways(heights, col + 1, row, piece) + count_ways(heights, col, row, piece + 1)\n        elif piece == 2:\n            return count_ways(heights, col + 1, row, piece) + count_ways(heights, col, row, piece - 1)\n        elif piece == 3:\n            return count_ways(heights, col + 1, row, piece) + count_ways(heights, col, row, piece)\n        elif piece == 4:\n            return count_ways(heights, col + 1, row, piece) + count_ways(heights, col, row, piece + 1)\n        elif piece == 5:\n            return count_ways(heights, col + 1, row, piece) + count_ways(heights, col, row, piece - 1)\n        elif piece == 6:\n            return count_ways(heights, col + 1, row, piece) + count_ways(heights, col, row, piece + 1)\n        elif piece == 7:\n            return count_ways(heights, col + 1, row, piece) + count_ways(heights, col, row, piece - 1)\n\n    return str(count_ways(heights, 0, 0, P))",
        "num_ids": 392
    },
    {
        "number": 4825,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    new_alphabet = '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.'\n    result = ''\n    for char in stdin:\n        if char.isalpha():\n            result += new_alphabet[ord(char.lower()) - ord('a')]\n        else:\n            result += char\n    return result",
        "num_ids": 85
    },
    {
        "number": 4826,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2 == 0:\n        return \"Alice\"\n    else:\n        return \"Bob\"",
        "num_ids": 31
    },
    {
        "number": 4827,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    sentence = \"\"\n    for word in words:\n        if word == \"$\":\n            break\n        if word.isdigit():\n            if len(word) == 1:\n                sentence += word\n            elif len(word) == 2:\n                if word[0] == \"1\":\n                    sentence += \"ten\"\n                elif word[0] == \"2\":\n                    sentence += \"twenty\"\n                elif word[0] == \"3\":\n                    sentence += \"thirty\"\n                elif word[0] == \"4\":\n                    sentence += \"forty\"\n                elif word[0] == \"5\":\n                    sentence += \"fifty\"\n                elif word[0] == \"6\":\n                    sentence += \"sixty\"\n                elif word[0] == \"7\":\n                    sentence += \"seventy\"\n                elif word[0] == \"8\":\n                    sentence += \"eighty\"\n                elif word[0] == \"9\":\n                    sentence += \"ninety\"\n            else:\n                sentence += word\n        else:\n            sentence += word\n    return sentence",
        "num_ids": 226
    },
    {
        "number": 4828,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    instructions = stdin.split()\n    n_instructions = len(instructions)\n    n_nop_instructions = 0\n\n    for i in range(n_instructions):\n        instruction = instructions[i]\n        if instruction[0].isupper():\n            n_nop_instructions += 1\n\n    return str(n_nop_instructions)",
        "num_ids": 71
    },
    {
        "number": 4829,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    if l == 0 and r == 0:\n        return \"Not a moose\"\n    elif l == r:\n        return f\"Even {2 * l}\"\n    else:\n        return f\"Odd {2 * max(l, r) + 1}\"",
        "num_ids": 71
    },
    {
        "number": 4830,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    words = stdin.split()[1:]\n    S = stdin.split()[2]\n\n    def count_words(word: str, key_presses: str) -> int:\n        count = 0\n        for i, key in enumerate(key_presses):\n            if key == word[i]:\n                count += 1\n        return count\n\n    words_count = 0\n    for word in words:\n        words_count += count_words(word, S)\n\n    return str(words_count)\n",
        "num_ids": 119
    },
    {
        "number": 4831,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Initialize the output string\n    output = \"\"\n    \n    # Iterate through each character in the input string\n    for char in stdin:\n        # If the current character is a letter, frame it using a Wendy frame\n        if char.isalpha():\n            output += \"..*..\"\n            output += \".*.*.\"\n            output += \"*.\" + char + \".\"\n            output += \"*.*.\"\n            output += \"..*..\"\n        # If the current character is not a letter, just add it to the output string\n        else:\n            output += char\n    \n    # Add a newline character to the end of the output string\n    output += \"\\n\"\n    \n    # Return the output string\n    return output",
        "num_ids": 139
    },
    {
        "number": 4832,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    area_normal = 3.141593 * R * R\n    area_taxicab = 2 * 3.141593 * R * R\n    return f\"{area_normal:.6f}\\n{area_taxicab:.6f}\"",
        "num_ids": 71
    },
    {
        "number": 4833,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    expenses = list(map(int, stdin.split()))\n    expenses.sort()\n    total_expenses = 0\n    for i in range(len(expenses)):\n        if expenses[i] > 0:\n            total_expenses += expenses[i]\n        else:\n            break\n    return str(total_expenses)",
        "num_ids": 76
    },
    {
        "number": 4834,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    times = list(map(int, stdin.split()[1:]))\n\n    # Sort the times in ascending order\n    times.sort()\n\n    # Initialize the variables for the optimal schedule\n    min_time = float('inf')\n    current_time = 0\n\n    # Iterate through the sorted times\n    for time in times:\n        # Update the current time\n        current_time += time\n\n        # Check if the current time is less than the minimum time\n        if current_time < min_time:\n            min_time = current_time\n\n    return str(min_time)",
        "num_ids": 130
    },
    {
        "number": 4835,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, N, M = map(int, stdin.split())\n    grid = [list(row) for row in stdin.split('\\n')[1:]]\n    S = (N - 1) // 2, (M - 1) // 2\n    visited = set()\n    visited.add(S)\n    queue = [(S, 0)]\n    while queue:\n        pos, time = queue.pop(0)\n        if pos == (N - 1, M - 1):\n            return str(time)\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            new_pos = pos[0] + dx, pos[1] + dy\n            if 0 <= new_pos[0] < N and 0 <= new_pos[1] < M and grid[new_pos[0]][new_pos[1]] == '1' and (new_pos, time) not in visited:\n                visited.add((new_pos, time))\n                queue.append((new_pos, time + 1))\n    return \"NOT POSSIBLE\"",
        "num_ids": 251
    },
    {
        "number": 4836,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    weights = list(map(int, stdin.split()))\n\n    def dfs(start, visited, current_weight):\n        if current_weight > c:\n            return 0\n\n        if start == n:\n            return 1\n\n        visited[start] = True\n        result = 0\n\n        for i in range(n):\n            if not visited[i] and weights[i] > weights[start]:\n                result += dfs(i, visited, current_weight + weights[i])\n\n        visited[start] = False\n        return result\n\n    return str(dfs(0, [False] * n, 0))",
        "num_ids": 142
    },
    {
        "number": 4837,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rounds, symbols = map(int, stdin.split())\n    scores = []\n    for i in range(rounds):\n        round_scores = []\n        for j in range(symbols):\n            round_scores.append(symbols.count(symbols[j]) - symbols.count(symbols[(j + 1) % symbols]))\n        scores.append(round_scores)\n    total_score = sum(sum(row) for row in scores)\n    max_score = max(sum(row) for row in scores)\n    return str(total_score) + '\\n' + str(max_score)",
        "num_ids": 130
    },
    {
        "number": 4838,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    times = list(map(int, stdin.split()))\n    total_time = 0\n    is_running = True\n\n    for time in times:\n        total_time += time\n        if time == 0:\n            is_running = False\n\n    if is_running:\n        return \"still running\"\n    else:\n        return str(total_time)",
        "num_ids": 75
    },
    {
        "number": 4839,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *c = map(int, stdin.split())\n    c = [c[i] for i in range(n) if c[i] > 0]\n    if len(c) < n:\n        return \"impossible\"\n\n    def find_min_fraction(c: List[int]) -> float:\n        min_fraction = 1\n        for i in range(n):\n            if c[i] == 0:\n                continue\n            min_fraction = min(min_fraction, c[i] / i)\n        return min_fraction\n\n    min_fraction = find_min_fraction(c)\n    if min_fraction == 1:\n        return \"1.0\"\n\n    return f\"{min_fraction:.6f}\"\n",
        "num_ids": 162
    },
    {
        "number": 4840,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_dice_sides(dice_description: str) -> tuple:\n        a, b = map(int, dice_description.split())\n        return a, b\n\n    def get_dice_numbers(dice_description: str) -> list:\n        a, b = get_dice_sides(dice_description)\n        return list(range(a, b + 1))\n\n    def get_dice_combinations(dice_numbers: list) -> list:\n        return [tuple(sorted(dice_numbers[i:i + 3])) for i in range(len(dice_numbers) - 2)]\n\n    def get_dice_combinations_count(dice_combinations: list) -> int:\n        return len(set(dice_combinations))\n\n    def get_dice_combinations_probability(dice_combinations: list) -> float:\n        return get_dice_combinations_count(dice_combinations) / len(dice_combinations)\n\n    def get_player_name(dice_combinations_probability: float) -> str:\n        return \"Emma\" if dice_combinations_probability > 0.5 else \"Gunnar\"\n\n    def get_winning_combinations(dice_combinations: list) -> list:\n        return [dice_combination for dice_combination in dice_combinations if dice_combination[0] > dice_combination[1]]\n\n    def get_winning_combinations_probability(winning_combinations: list) -> float:\n        return len(winning_combinations) / len(dice_combinations)\n\n    def get_winning_combinations_count(winning_combinations: list) -> int:\n        return len(winning_combinations)\n\n    dice_description_gunnar = stdin.split('\\n')[0]\n    dice_description_emma = stdin.split('\\n')[1]\n\n    dice_numbers_gunnar = get_dice_numbers(dice_description_gunnar)\n    dice_numbers_emma = get_dice_numbers(dice_description_emma)\n\n    dice_combinations_gunnar = get_dice_combinations(dice_numbers_gunnar)\n    dice_combinations_emma = get_dice_combinations(dice_numbers_emma)\n\n    dice_combinations_count_gunnar = get_dice_combinations_count(dice_combinations_gunnar)\n    dice_combinations_count_emma = get_dice_combinations_count(dice_combinations_emma)\n\n    dice_combinations_probability_gunnar = get_dice_combinations_probability(dice_combinations_gunnar)\n    dice_combinations_probability_emma = get_dice_combinations_probability(dice_combinations_emma)\n\n    winning_combinations_gunnar = get_winning_combinations(dice_combinations_gunnar)\n    winning_combinations_emma = get_winning_combinations(dice_combinations_emma)\n\n    winning_combinations_count_gunnar = get_winning_combinations_count(winning_combinations_gunnar)\n    winning_combinations_count_emma = get_winning_combinations_count(winning_combinations_emma)\n\n    winning_combinations_probability_gunnar = get_winning_combinations_probability(winning_combinations_gunnar)\n    winning_combinations_probability_emma = get_winning_combinations_probability(winning_combinations_emma)\n\n    return get_player_name(winning_combinations_probability_emma)",
        "num_ids": 808
    },
    {
        "number": 4841,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    words = stdin.split()[1:]\n    count = 0\n    for word in words:\n        if word.isdigit():\n            count += int(word)\n        elif word == \"mumble\":\n            count += 1\n    if count == n:\n        return \"makes sense\"\n    else:\n        return \"something is fishy\"",
        "num_ids": 82
    },
    {
        "number": 4842,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *v = map(int, stdin.split())\n    v = [v[i] - v[i - 1] for i in range(1, n + 1)]\n    d = 1\n    while v[d] == 0:\n        d += 1\n    v_n = v[d]\n    return f\"{d} {v_n}\"",
        "num_ids": 83
    },
    {
        "number": 4843,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    queens = []\n    for _ in range(N):\n        row, col = map(int, stdin.split()[1:])\n        queens.append((row, col))\n\n    def is_valid(board, row, col):\n        for i in range(len(board)):\n            if board[i][0] == row or board[i][1] == col or abs(board[i][0] - row) == abs(board[i][1] - col):\n                return False\n        return True\n\n    def backtrack(board, row):\n        if row == N:\n            return True\n\n        for col in range(N):\n            if is_valid(board, row, col):\n                board[row] = (row, col)\n                if backtrack(board, row + 1):\n                    return True\n                board[row] = (0, 0)\n\n        return False\n\n    board = [[0, 0] for _ in range(N)]\n    if backtrack(board, 0):\n        return \"CORRECT\"\n    else:\n        return \"INCORRECT\"",
        "num_ids": 240
    },
    {
        "number": 4844,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    matrix = []\n    for _ in range(N):\n        row = list(map(int, stdin.split()[1:]))\n        matrix.append(row)\n    result = []\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                result.append(matrix[i][j] & 1)\n            else:\n                result.append(matrix[i][j])\n    return \" \".join(map(str, result))",
        "num_ids": 114
    },
    {
        "number": 4845,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    day, month = map(int, stdin.split())\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if month == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            days_in_month[1] = 29\n        else:\n            days_in_month[1] = 28\n    if day > days_in_month[month - 1]:\n        return \"Invalid date\"\n    days_of_week = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n    return days_of_week[day % 7]",
        "num_ids": 201
    },
    {
        "number": 4846,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, d, x = map(int, stdin.split())\n    n = l\n    m = d\n    while n <= m:\n        sum_digits = sum(int(digit) for digit in str(n))\n        if sum_digits == x:\n            break\n        n += 1\n    while n >= m:\n        sum_digits = sum(int(digit) for digit in str(n))\n        if sum_digits == x:\n            break\n        n -= 1\n    return str(n) + \"\\n\" + str(m)",
        "num_ids": 117
    },
    {
        "number": 4847,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def triangle_area(x1: int, y1: int, x2: int, y2: int, x3: int, y3: int) -> float:\n        return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n\n    def is_on_border(x: int, y: int, x1: int, y1: int, x2: int, y2: int) -> bool:\n        return x1 == x or x2 == x or x1 == x2\n\n    def is_on_triangle(x: int, y: int, x1: int, y1: int, x2: int, y2: int, x3: int, y3: int) -> bool:\n        return (x1 <= x <= x2) and (y1 <= y <= y2) or (x1 <= x <= x3) and (y1 <= y <= y3) or (x2 <= x <= x3) and (y2 <= y <= y3)\n\n    def count_trees(trees: List[Tuple[int, int]]) -> int:\n        return len([tree for tree in trees if is_on_border(tree[0], tree[1], 1, 1, 3, 3)])\n\n    def count_trees_on_border(trees: List[Tuple[int, int]]) -> int:\n        return len([tree for tree in trees if is_on_border(tree[0], tree[1], 1, 1, 3, 3)])\n\n    def count_trees_on_triangle(trees: List[Tuple[int, int]], x1: int, y1: int, x2: int, y2: int, x3: int, y3: int) -> int:\n        return len([tree for tree in trees if is_on_triangle(tree[0], tree[1], x1, y1, x2, y2, x3, y3)])\n\n    def count_trees_on_border_and_triangle(trees: List[Tuple[int, int]], x1: int, y1: int, x2: int, y2: int, x3: int, y3: int) -> int:\n        return count_trees_on_border(trees) + count_trees_on_triangle(trees, x1, y1, x2, y2, x3, y3)\n\n    def count_trees_on_border_or_triangle(trees: List[Tuple[int, int]], x1: int, y1: int, x2: int, y2: int, x3: int, y3: int) -> int:\n        return count_trees_on_border(trees) + count_trees_on_triangle(trees, x1, y1, x2, y2, x3, y3)\n\n    def count_trees_on_border_and_triangle_or_border(trees: List[Tuple[int, int]], x1: int, y1: int, x2: int, y2: int, x3: int, y3: int) -> int:\n        return count_trees_on_border(trees) + count_trees_on_triangle(trees, x1, y1, x2, y2, x3, y3) + count_trees_on_border(trees)\n\n    def count_trees_on_border_or_triangle_or_border(trees: List[Tuple[int, int]], x1: int, y1: int, x2: int, y2: int, x3: int, y3: int) -> int:\n        return count_trees_on_border(trees) + count_trees_on_triangle(trees, x1, y1, x2, y2, x3, y3) + count_trees_on_border(trees)\n\n    def count_trees_on_border_and_triangle_or_border_or_triangle(trees: List[Tuple[int, int]], x1: int, y1: int, x2: int, y2: int, x3: int, y3: int) -> int:\n        return count_trees_on_border(trees) + count_trees_on_triangle(trees, x1, y1, x2, y2, x3, y3) + count_trees_on_border(trees) + count_trees_on_triangle(trees, x1, y1, x2, y2, x3, y3)\n\n    def",
        "num_ids": 1025
    },
    {
        "number": 4848,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3 or n > 10**5:\n        return \"Invalid input\"\n\n    for m in range(2, n):\n        if m * n == 210:\n            return str(m)\n\n    return \"Invalid input\"",
        "num_ids": 62
    },
    {
        "number": 4849,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    blimps = set()\n    for row in stdin.split('\\n'):\n        if 'FBI' in row:\n            blimps.add(row)\n    if not blimps:\n        return 'HE GOT AWAY!'\n    return''.join(map(str, sorted(blimps)))",
        "num_ids": 68
    },
    {
        "number": 4850,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    triangles = []\n    for _ in range(n):\n        a, b, c = map(int, stdin.split()[1:])\n        triangles.append((a, b, c))\n    min_length = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if triangles[i][0] + triangles[j][0] > triangles[k][0]:\n                    continue\n                length = triangles[i][0] + triangles[j][0] + triangles[k][0]\n                if length < min_length:\n                    min_length = length\n    return str(min_length)",
        "num_ids": 164
    },
    {
        "number": 4851,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    harshad_numbers = []\n    for i in range(1, n+1):\n        if sum(int(digit) for digit in str(i)) % i == 0:\n            harshad_numbers.append(i)\n    return str(min(harshad_numbers))",
        "num_ids": 72
    },
    {
        "number": 4852,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def evaluate(expression: str) -> int:\n        stack = []\n        for token in expression.split():\n            if token.isdigit():\n                stack.append(int(token))\n            else:\n                b = stack.pop()\n                a = stack.pop()\n                if token == '+':\n                    stack.append(a + b)\n                else:\n                    stack.append(a + str(b))\n        return stack[0]\n\n    expression = stdin.strip()\n    distinct_values = set()\n    while True:\n        value = evaluate(expression)\n        if value not in distinct_values:\n            distinct_values.add(value)\n        else:\n            break\n\n    return str(len(distinct_values))",
        "num_ids": 149
    },
    {
        "number": 4853,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = [0] + a\n    C = [0] * (n + 1)\n    C[0] = a[0]\n    for i in range(1, n + 1):\n        C[i] = C[i - 1] + a[i]\n    return \" \".join(map(str, C))\n",
        "num_ids": 90
    },
    {
        "number": 4854,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    message = list(map(int, stdin.split()))\n\n    def frequency_sort(message: list) -> list:\n        freq = {}\n        for num in message:\n            freq[num] = freq.get(num, 0) + 1\n\n        sorted_freq = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n        sorted_message = [num for num, _ in sorted_freq]\n\n        return sorted_message\n\n    sorted_message = frequency_sort(message)\n    return \" \".join(map(str, sorted_message))",
        "num_ids": 139
    },
    {
        "number": 4855,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, I = map(int, stdin.split())\n    total_citations = A * I\n    total_articles = A\n    impact_factor = total_citations / total_articles\n    bribe_needed = impact_factor - I\n    return str(bribe_needed)",
        "num_ids": 64
    },
    {
        "number": 4856,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return str(b) + str(a)\n    else:\n        return str(a) + str(b)",
        "num_ids": 45
    },
    {
        "number": 4857,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, w = map(int, stdin.split())\n    if l > 40 or w > 1000:\n        return \"impossible\"\n\n    def backtrack(start, current_weight, current_word):\n        if current_weight == w and len(current_word) == l:\n            return current_word\n        if current_weight > w:\n            return \"\"\n\n        for i in range(start, 27):\n            if i == start:\n                backtrack(i + 1, current_weight + i, current_word + chr(i + ord('a')))\n            else:\n                backtrack(i, current_weight, current_word)\n\n    return backtrack(0, 0, \"\")",
        "num_ids": 157
    },
    {
        "number": 4858,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, N, C = map(int, stdin.split())\n    frame1 = [list(line.strip()) for line in stdin.split('\\n')[1:M+1]]\n    frame2 = [list(line.strip()) for line in stdin.split('\\n')[M+2:2*M+2]]\n\n    def shift_silhouette(frame: List[List[str]], shift: Tuple[int, int]) -> List[List[str]]:\n        for row in frame:\n            for col, pixel in enumerate(row):\n                if pixel == C:\n                    row[col] = C if col + shift[0] >= 0 and col + shift[0] < N and row[col + shift[0]] == C else''\n\n    shift = (0, 0)\n    for i in range(M):\n        shift_silhouette(frame1, shift)\n        shift_silhouette(frame2, shift)\n        shift = (shift[0] + 1, shift[1])\n\n    result = []\n    for row in frame1:\n        result.append(''.join(row))\n    result.append('')\n    for row in frame2:\n        result.append(''.join(row))\n    result.append('')\n\n    return '\\n'.join(result)",
        "num_ids": 281
    },
    {
        "number": 4859,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, d, c, l = map(int, stdin.split())\n\n    def dfs(i, j, k):\n        if i == 4:\n            return [f\"{i} {j} {k}\"]\n        if i > 0 and j > 0 and k > 0:\n            return dfs(i - 1, j - 1, k - 1) + dfs(i - 1, j, k - 1) + dfs(i - 1, j - 1, k)\n        return []\n\n    def backtrack(i, j, k):\n        if i == 4:\n            return [f\"{i} {j} {k}\"]\n        if i > 0 and j > 0 and k > 0:\n            return backtrack(i - 1, j - 1, k - 1) + backtrack(i - 1, j, k - 1) + backtrack(i - 1, j - 1, k)\n        return []\n\n    def backtrack_double(i, j, k):\n        if i == 4:\n            return [f\"{i} {j} {k}\"]\n        if i > 0 and j > 0 and k > 0:\n            return backtrack_double(i - 1, j - 1, k - 1) + backtrack_double(i - 1, j, k - 1) + backtrack_double(i - 1, j - 1, k) + backtrack_double(i - 1, j, k) + backtrack_double(i - 1, j - 1, k - 1)\n        return []\n\n    def backtrack_triple(i, j, k):\n        if i == 4:\n            return [f\"{i} {j} {k}\"]\n        if i > 0 and j > 0 and k > 0:\n            return backtrack_triple(i - 1, j - 1, k - 1) + backtrack_triple(i - 1, j, k - 1) + backtrack_triple(i - 1, j - 1, k) + backtrack_triple(i - 1, j, k) + backtrack_triple(i - 1, j - 1, k - 1) + backtrack_triple(i - 1, j, k - 1) + backtrack_triple(i - 1, j - 1, k)\n        return []\n\n    def backtrack_quadruple(i, j, k):\n        if i == 4:\n            return [f\"{i} {j} {k}\"]\n        if i > 0 and j > 0 and k > 0:\n            return backtrack_quadruple(i - 1, j - 1, k - 1) + backtrack_quadruple(i - 1, j, k - 1) + backtrack_quadruple(i - 1, j - 1, k) + backtrack_quadruple(i - 1, j, k) + backtrack_quadruple(i - 1, j - 1, k - 1) + backtrack_quadruple(i - 1, j, k - 1) + backtrack_quadruple(i - 1, j - 1, k) + backtrack_quadruple(i - 1, j, k)\n        return []\n\n    def backtrack_quintuple(i, j, k):\n        if i == 4:\n            return [f\"{i} {j} {k}\"]\n        if i > 0 and j > 0 and k > 0:\n            return backtrack_quintuple(i - 1, j - 1, k - 1) + backtrack_quintuple(i - 1, j, k - 1) + backtrack_quintuple(i - 1, j - 1, k) + backtrack_quintuple(i - 1, j, k) + backtrack_quintuple(i - 1, j - 1, k - 1) + backtrack_quintuple(i - 1, j, k - 1) + backtrack_quintuple(i - 1, j - 1, k) + backtrack_quintuple(i - 1, j, k) + backtrack_quintuple(i - 1, j - 1, k - 1)\n        return []\n\n    def backtrack_sextuple(i, j, k):\n        if i == 4:\n           ",
        "num_ids": 1025
    },
    {
        "number": 4860,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    recited_numbers = list(map(int, stdin.split()[1:]))\n    missing_numbers = []\n\n    for i in range(1, max(recited_numbers) + 1):\n        if i not in recited_numbers:\n            missing_numbers.append(i)\n\n    if missing_numbers:\n        return \"\\n\".join(map(str, missing_numbers))\n    else:\n        return \"good job\"",
        "num_ids": 105
    },
    {
        "number": 4861,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, s, v = map(int, stdin.split())\n    c = 1\n    while True:\n        t = (n * (math.log2(n) ** c) / (p * 10**9)) * (1 + 1 / c) / v\n        if t > 10**-6:\n            return f\"{t:.10f} {c:.10f}\"\n        c += 1",
        "num_ids": 98
    },
    {
        "number": 4862,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"0\"\n    elif N == 2:\n        return \"1\"\n    else:\n        return \"4\"",
        "num_ids": 40
    },
    {
        "number": 4863,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    answers = stdin.split()[1:]\n    correct_answers = ['A', 'B', 'C', 'D']\n    score = 0\n\n    for i, answer in enumerate(answers):\n        if answer == correct_answers[i]:\n            score += 1\n\n    return str(score)",
        "num_ids": 74
    },
    {
        "number": 4864,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C, Z_R, Z_C = map(int, stdin.split())\n    article = stdin.split('\\n')[1:]\n    enlarged_article = []\n\n    for row in range(R):\n        enlarged_row = []\n        for col in range(C):\n            enlarged_row.append(article[row][col])\n        enlarged_article.append(''.join(enlarged_row))\n\n    for i in range(Z_R):\n        for j in range(Z_C):\n            enlarged_article.append(''.join(['.' for _ in range(Z_R * Z_C)]))\n\n    return '\\n'.join([''.join(row) for row in enlarged_article])",
        "num_ids": 165
    },
    {
        "number": 4865,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.strip())\n    for _ in range(test_cases):\n        clock_direction, minutes_change, current_hour, current_minutes = map(int, stdin.strip().split())\n        new_hour = (current_hour + minutes_change // 60 + (minutes_change % 60!= 0)) % 24\n        new_minutes = (current_minutes + minutes_change) % 60\n        new_time = f\"{new_hour:02d} {new_minutes:02d}\"\n        print(new_time)",
        "num_ids": 132
    },
    {
        "number": 4866,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    date_str = stdin.strip()\n    month, day = date_str.split()\n    month = month.upper()\n    day = int(day)\n\n    if month == 'OCT' and day == 31:\n        return 'yup'\n    elif month == 'DEC' and day == 25:\n        return 'yup'\n    else:\n        return 'nope'",
        "num_ids": 84
    },
    {
        "number": 4867,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.split()[0].split())\n    U, L, R, D = map(int, stdin.split()[1].split())\n\n    frame = \"#\" * U + \".\" * L + \"#\" * R + \".\" * D\n    crossword = []\n\n    for i in range(M):\n        row = []\n        for j in range(N):\n            row.append(stdin.split()[i + 2][j])\n        crossword.append(\"\".join(row))\n\n    framed_crossword = []\n    for i in range(M + U + D):\n        row = []\n        for j in range(N + L + R):\n            if i < U:\n                row.append(frame[i])\n            elif i < U + L:\n                row.append(crossword[i - U][j])\n            elif i < U + L + R:\n                row.append(frame[i - U - L])\n            else:\n                row.append(frame[i - U - L - R])\n        framed_crossword.append(\"\".join(row))\n\n    return \"\\n\".join(framed_crossword)",
        "num_ids": 250
    },
    {
        "number": 4868,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into rows and columns\n    rows = stdin.split('\\n')\n    columns = rows[0].split(':')\n    rows = rows[1:]\n\n    # Reverse the rows and columns\n    rows = rows[::-1]\n    columns = columns[::-1]\n\n    # Join the rows and columns back together\n    output = '\\n'.join(rows) + '\\n' + ':'.join(columns)\n\n    return output",
        "num_ids": 92
    },
    {
        "number": 4869,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, N = map(float, stdin.split())\n    if A > 100 or A <= 0 or N > 1000 or N <= 0:\n        return \"Need more materials!\"\n    elif A <= 100:\n        return \"Diablo is happy!\"\n    else:\n        return \"Need more materials!\"",
        "num_ids": 75
    },
    {
        "number": 4870,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    f, s, g, u, d = map(int, stdin.split())\n    if s > g:\n        return \"use the stairs\"\n    if s == g:\n        return 0\n\n    up_count = 0\n    down_count = 0\n    current_floor = s\n\n    while current_floor < g:\n        if current_floor + u <= g:\n            up_count += 1\n            current_floor += u\n        else:\n            break\n\n    while current_floor > s:\n        if current_floor - d >= s:\n            down_count += 1\n            current_floor -= d\n        else:\n            break\n\n    return min(up_count, down_count)",
        "num_ids": 148
    },
    {
        "number": 4871,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    scores = list(map(int, stdin.split()[1:]))\n    scores.sort()\n    group_score = sum(scores) / len(scores)\n    new_scores = scores[1:]\n    new_scores.sort()\n    new_group_score = sum(new_scores) / len(new_scores)\n    return f\"{group_score:.6f}\\n{new_group_score:.6f}\"",
        "num_ids": 105
    },
    {
        "number": 4872,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *days = map(int, stdin.split())\n    days = [0] + days\n    dirtiness = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if days[i] < days[j]:\n                dirtiness[i] += days[j] - days[i]\n            else:\n                dirtiness[j] += days[i] - days[j]\n    max_dirtiness = max(dirtiness)\n    cleanup_phases = 0\n    for i in range(n):\n        if dirtiness[i] >= 20:\n            cleanup_phases += 1\n            dirtiness[i] = 0\n    return str(cleanup_phases)",
        "num_ids": 171
    },
    {
        "number": 4873,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, H = map(int, stdin.split()[0].split())\n    map_ = [list(row) for row in stdin.split()[1:]]\n    player_pos = (0, 0)\n    gold_count = 0\n    traps = []\n\n    def is_safe(x, y):\n        return 0 <= x < W and 0 <= y < H and map_[x][y]!= '#'\n\n    def move(dx, dy):\n        nonlocal player_pos, gold_count, traps\n        x, y = player_pos\n        if is_safe(x + dx, y + dy):\n            player_pos = (x + dx, y + dy)\n            if map_[x + dx][y + dy] == 'G':\n                gold_count += 1\n            elif map_[x + dx][y + dy] == 'T':\n                traps.append((x + dx, y + dy))\n        else:\n            player_pos = (x, y)\n\n    def sense_draft():\n        nonlocal player_pos, gold_count, traps\n        x, y = player_pos\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            if is_safe(x + dx, y + dy):\n                if map_[x + dx][y + dy] == 'T':\n                    return (x + dx, y + dy)\n        return None\n\n    while True:\n        move(0, 1)\n        if sense_draft() is not None:\n            move(*sense_draft())\n        else:\n            break\n\n    return str(gold_count)",
        "num_ids": 360
    },
    {
        "number": 4874,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(row) for row in stdin.splitlines()]\n\n    def count_moves(row: int, col: int) -> int:\n        moves = 0\n        while row >= 0 and col >= 0 and grid[row][col] == '$':\n            moves += 1\n            row -= 1\n            col -= 1\n        while row < n and col >= 0 and grid[row][col] == '$':\n            moves += 1\n            row += 1\n            col -= 1\n        while row >= 0 and col < m and grid[row][col] == '$':\n            moves += 1\n            row -= 1\n            col += 1\n        while row < n and col < m and grid[row][col] == '$':\n            moves += 1\n            row += 1\n            col += 1\n        return moves\n\n    rating = 0\n    for row in range(n):\n        for col in range(m):\n            if grid[row][col] == '$':\n                rating += count_moves(row, col)\n\n    return str(rating)",
        "num_ids": 244
    },
    {
        "number": 4875,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    result = []\n\n    for word in words:\n        if word[0].lower() in ['a', 'e', 'i', 'o', 'u', 'y']:\n            result.append(word + 'yay')\n        else:\n            vowels = 'aeiou'\n            first_vowel = False\n            for i, letter in enumerate(word):\n                if letter.lower() in vowels:\n                    first_vowel = True\n                    break\n            if first_vowel:\n                result.append(word[first_vowel:] + word[:first_vowel] + 'ay')\n            else:\n                result.append(word + 'yay')\n\n    return''.join(result)",
        "num_ids": 158
    },
    {
        "number": 4876,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    menus = []\n    for i in range(n):\n        k = int(stdin.split()[i+1])\n        menu = []\n        for j in range(k):\n            menu.append(stdin.split()[i+2+j])\n        menus.append(menu)\n    for menu in menus:\n        if \"pea soup\" in menu and \"pancakes\" in menu:\n            return menu[0]\n    return \"Anywhere is fine I guess\"",
        "num_ids": 111
    },
    {
        "number": 4877,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    count = 0\n    while h > 0:\n        count += 1\n        h -= a - b\n    return str(count)",
        "num_ids": 45
    },
    {
        "number": 4878,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r1, s = map(int, stdin.split())\n    r2 = s - r1\n    return str(r2)",
        "num_ids": 30
    },
    {
        "number": 4879,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    if a == b:\n        return \"No\"\n    elif a == c:\n        return \"No\"\n    elif b == c:\n        return \"No\"\n    else:\n        return \"Yes\"",
        "num_ids": 53
    },
    {
        "number": 4880,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    plaintext = stdin.split()[2]\n    ciphertext = stdin.split()[3]\n\n    key = ciphertext[:n]\n    plaintext = plaintext.lower()\n    ciphertext = ciphertext.lower()\n\n    for i in range(n, m):\n        key += plaintext[i - n]\n\n    result = \"\"\n    for i in range(m):\n        result += chr((ord(ciphertext[i]) - ord(key[i % n]) + 26) % 26 + ord('a'))\n\n    return result",
        "num_ids": 121
    },
    {
        "number": 4881,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1 or N > 10:\n        return \"Invalid input\"\n\n    sum_even = 0\n    sum_odd = 0\n    for i in range(1, N+1):\n        if i % 2 == 0:\n            sum_even += i\n        else:\n            sum_odd += i\n\n    if sum_even == sum_odd:\n        return \"Even\" if sum_even % 2 == 0 else \"Odd\"\n    elif sum_even > sum_odd:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "num_ids": 130
    },
    {
        "number": 4882,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    costs = [int(x) for x in stdin.split()[1:]]\n    digits = [len(str(cost)) for cost in costs]\n    return \" \".join(map(str, digits))",
        "num_ids": 56
    },
    {
        "number": 4883,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    translations = set()\n    for line in stdin.split('\\n')[1:]:\n        a, b = line.split()\n        translations.add((a, b))\n\n    n = int(stdin.split('\\n')[0].split()[1])\n    words = []\n    for _ in range(n):\n        words.append(stdin.split('\\n')[2 + i].split())\n\n    def is_match(word1: str, word2: str) -> bool:\n        if len(word1)!= len(word2):\n            return False\n\n        for i in range(len(word1)):\n            if word1[i] in translations:\n                if word2[i] not in translations[word1[i]]:\n                    return False\n            elif word2[i] in translations:\n                return False\n            elif word1[i]!= word2[i]:\n                return False\n\n        return True\n\n    result = 'yes'\n    for word1, word2 in itertools.combinations(words, 2):\n        if is_match(word1, word2):\n            result = 'no'\n            break\n\n    return result",
        "num_ids": 236
    },
    {
        "number": 4884,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    contestants = stdin.split('\\n')[1:]\n\n    carrots = 0\n    for i, contestant in enumerate(contestants):\n        if i % 2 == 0:\n            carrots += 1\n\n    return str(carrots)",
        "num_ids": 70
    },
    {
        "number": 4885,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rows = []\n    for row in stdin.split('\\n'):\n        if row.startswith('+') or row.startswith('-') or row.startswith('|'):\n            rows.append(row)\n        else:\n            break\n    white_pieces = []\n    black_pieces = []\n    for row in rows:\n        if row.startswith('+'):\n            row = row.replace('+', '')\n        elif row.startswith('-'):\n            row = row.replace('-', '')\n        elif row.startswith('|'):\n            row = row.replace('|', '')\n        else:\n            break\n        for i, piece in enumerate(row):\n            if piece.isupper():\n                if i % 2 == 0:\n                    white_pieces.append(piece + str(i // 2 + 1))\n                else:\n                    black_pieces.append(piece + str(i // 2 + 1))\n            elif piece.islower():\n                if i % 2 == 0:\n                    black_pieces.append(piece + str(i // 2 + 1))\n                else:\n                    white_pieces.append(piece + str(i // 2 + 1))\n    white_pieces.sort()\n    black_pieces.sort()\n    return f\"White: {', '.join(white_pieces)}\\nBlack: {', '.join(black_pieces)}\"",
        "num_ids": 284
    },
    {
        "number": 4886,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > n:\n        return \"You will become a flying monkey!\"\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_between(num: int, low: int, high: int) -> bool:\n        return low <= num <= high\n\n    def is_even(num: int) -> bool:\n        return num % 2 == 0\n\n    def is_17_or_22(num: int) -> bool:\n        return num == 17 or num == 22\n\n    def is_question_true(question: str, num: int) -> bool:\n        if question == \"Is the number even?\":\n            return is_even(num)\n        elif question == \"Is the number between $7$ and $10$?\":\n            return is_between(num, 7, 10)\n        elif question == \"Is the number $17$ or $22$?\":\n            return is_17_or_22(num)\n        elif question == \"Is the number prime?\":\n            return is_prime(num)\n        else:\n            raise ValueError(\"Invalid question\")\n\n    def is_wizard_winning(secret_num: int) -> bool:\n        for i in range(k):\n            question = input(f\"Question {i + 1}: \")\n            if not is_question_true(question, secret_num):\n                return False\n        return True\n\n    secret_num = 1 + (n - 1) * (1 + 4 * (n - 1) // 3)\n    if is_wizard_winning(secret_num):\n        return \"Your wish is granted!\"\n    else:\n        return \"You will become a flying monkey!\"",
        "num_ids": 434
    },
    {
        "number": 4887,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    fence_length = 2 * a\n    return str(fence_length)",
        "num_ids": 26
    },
    {
        "number": 4888,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    tasks = list(map(int, stdin.split()))\n    tasks.sort()\n    count = 0\n    for task in tasks:\n        if count * task <= T:\n            count += 1\n        else:\n            break\n    return str(count)",
        "num_ids": 67
    },
    {
        "number": 4889,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    rods = [int(x) for x in stdin.split()[1:]]\n    jumbo_rod = max(rods) + 1\n    return str(jumbo_rod * n)",
        "num_ids": 55
    },
    {
        "number": 4890,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n\n    # Sort the sodas by their capacity\n    c.sort(reverse=True)\n\n    # Initialize the fridge with the cold sodas\n    fridge = [0] * s\n\n    # Initialize the refill scheme\n    refill_scheme = [0] * s\n\n    # Initialize the number of sodas in each slot\n    slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are cold\n    cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot_count = [0] * s\n\n    # Initialize the number of sodas in each slot that are not cold\n    not_cold_slot",
        "num_ids": 1025
    },
    {
        "number": 4891,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    kings, queens, rooks, bishops, knights, pawns = map(int, stdin.split())\n\n    # Calculate the number of pieces each type should add or remove\n    king_add = queen_add = rook_add = bishop_add = knight_add = pawn_add = 0\n    king_remove = queen_remove = rook_remove = bishop_remove = knight_remove = pawn_remove = 0\n\n    # Add kings\n    king_add = kings - 1\n\n    # Add queens\n    queen_add = queens - 1\n\n    # Add rooks\n    rook_add = rooks - 2\n\n    # Add bishops\n    bishop_add = bishops - 2\n\n    # Add knights\n    knight_add = knights - 2\n\n    # Add pawns\n    pawn_add = pawns - 8\n\n    # Remove kings\n    king_remove = kings - 1\n\n    # Remove queens\n    queen_remove = queens - 1\n\n    # Remove rooks\n    rook_remove = rooks - 2\n\n    # Remove bishops\n    bishop_remove = bishops - 2\n\n    # Remove knights\n    knight_remove = knights - 2\n\n    # Remove pawns\n    pawn_remove = pawns - 8\n\n    # Calculate the total number of pieces each type should add or remove\n    total_add = king_add + queen_add + rook_add + bishop_add + knight_add + pawn_add\n    total_remove = king_remove + queen_remove + rook_remove + bishop_remove + knight_remove + pawn_remove\n\n    # Return the total number of pieces each type should add or remove\n    return str(total_add) + \" \" + str(total_remove) + \" \" + str(total_add - total_remove)",
        "num_ids": 437
    },
    {
        "number": 4892,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    passwords = []\n    for _ in range(n):\n        password, probability = stdin.split()\n        password, probability = float(probability), float(password)\n        passwords.append((password, probability))\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    attempts = 0\n    for password, probability in passwords:\n        attempts += 1\n        if password == \"123456\":\n            break\n    return str(attempts)",
        "num_ids": 111
    },
    {
        "number": 4893,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    distances = list(map(int, stdin.split()))\n\n    def min_distance(distances: List[int], p: int) -> int:\n        min_distance = float('inf')\n        for i in range(1, len(distances)):\n            min_distance = min(min_distance, distances[i] + p * (len(distances) - i))\n        return min_distance\n\n    return str(min_distance(distances, p))",
        "num_ids": 110
    },
    {
        "number": 4894,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    notes = stdin.split()[1:]\n\n    staff = [\n        \"G: \",\n        \"F: \",\n        \"E: \",\n        \"D: \",\n        \"C: \",\n        \"B: \",\n        \"A: \",\n        \"g: \",\n        \"f: \",\n        \"e: \",\n        \"d: \",\n        \"c: \",\n        \"b: \",\n        \"a: \",\n    ]\n\n    for note in notes:\n        pitch, duration = note.split()\n        duration = int(duration)\n\n        if duration == 1:\n            print(staff[pitch.upper() - ord(\"A\")], end=\"\")\n        elif duration == 2:\n            print(staff[pitch.upper() - ord(\"A\")], end=\"*\")\n        elif duration == 3:\n            print(staff[pitch.upper() - ord(\"A\")], end=\"**\")\n        else:\n            print(staff[pitch.upper() - ord(\"A\")], end=\" \" * (duration - 1))\n\n        print(\"*\" * (duration + 1))\n\n    return \"\\n\".join(staff)\n",
        "num_ids": 244
    },
    {
        "number": 4895,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    sticks = list(map(int, stdin.split()))\n    n = len(sticks)\n    if n < 3:\n        return \"impossible\"\n\n    def is_triangle(a, b, c):\n        return a + b > c and a + c > b and b + c > a\n\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if is_triangle(sticks[i], sticks[j], sticks[k]):\n                    return \"possible\"\n\n    return \"impossible\"",
        "num_ids": 139
    },
    {
        "number": 4896,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    brick_widths = list(map(int, stdin.split()[1:]))\n\n    towers = 0\n    current_tower = []\n    for brick_width in brick_widths:\n        if not current_tower or brick_width > current_tower[-1]:\n            current_tower.append(brick_width)\n        else:\n            towers += 1\n            current_tower = [brick_width]\n\n    return str(towers)",
        "num_ids": 110
    },
    {
        "number": 4897,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    runners = []\n    for i in range(n):\n        name, a1, b1 = stdin.split()\n        a1, b1 = float(a1), float(b1)\n        runners.append((name, a1, b1))\n    runners.sort(key=lambda x: x[1])\n    best_time = runners[0][1]\n    team = [runners[0][0]]\n    for i in range(1, n):\n        if runners[i][1] > best_time:\n            best_time = runners[i][1]\n            team = [runners[i][0]]\n        elif runners[i][1] == best_time:\n            team.append(runners[i][0])\n    return f\"{best_time:.9f}\\n{team[0]}\\n{team[1]}\\n{team[2]}\\n{team[3]}\"",
        "num_ids": 215
    },
    {
        "number": 4898,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    preferences = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    min_rooms = 0\n    rooms = []\n    for i in range(n):\n        min_temp, max_temp = preferences[i]\n        if min_temp not in rooms:\n            rooms.append(min_temp)\n            min_rooms += 1\n        if max_temp not in rooms:\n            rooms.append(max_temp)\n            min_rooms += 1\n    return str(min_rooms)",
        "num_ids": 127
    },
    {
        "number": 4899,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) < 3 or len(s) > 1000:\n        return \"Invalid input\"\n\n    if s[0] == 'h' and s[1] == 'e':\n        return s + 'ey'\n    else:\n        return s + 'e' * 2",
        "num_ids": 74
    },
    {
        "number": 4900,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    distances = [list(map(int, stdin.split()[1:])) for _ in range(n)]\n    graph = [[] for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            graph[i].append(j)\n            graph[j].append(i)\n\n    def bfs(start: int) -> List[int]:\n        queue = deque([start])\n        visited = set()\n        visited.add(start)\n        distance = {start: 0}\n\n        while queue:\n            current = queue.popleft()\n            for neighbor in graph[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    distance[neighbor] = distance[current] + 1\n                    queue.append(neighbor)\n\n        return distance\n\n    distances_by_village = [bfs(i) for i in range(n)]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if distances_by_village[i][j] == distances_by_village[j][i]:\n                print(f\"{i+1} {j+1}\")\n                break",
        "num_ids": 269
    },
    {
        "number": 4901,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Divide the message in half\n    half_length = len(stdin) // 2\n    first_half = stdin[:half_length]\n    second_half = stdin[half_length:]\n\n    # Rotate each half\n    first_half_rotated = first_half[::-1]\n    second_half_rotated = second_half[::-1]\n\n    # Merge the two halves\n    merged_rotated = \"\"\n    for i in range(len(first_half_rotated)):\n        merged_rotated += chr((ord(first_half_rotated[i]) - ord('A') + ord(second_half_rotated[i]) - ord('A')) % 26 + ord('A'))\n\n    # Decrypt the merged string\n    decrypted_message = \"\"\n    for i in range(len(merged_rotated)):\n        decrypted_message += chr((ord(merged_rotated[i]) - ord('A') + 26) % 26 + ord('A'))\n\n    return decrypted_message",
        "num_ids": 222
    },
    {
        "number": 4902,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string to lowercase and remove spaces\n    input_string = stdin.lower().replace(\" \", \"\")\n\n    # Initialize a dictionary to store the frequency of each letter in the input string\n    letter_frequency = {}\n\n    # Iterate through the input string and update the frequency of each letter\n    for letter in input_string:\n        if letter in letter_frequency:\n            letter_frequency[letter] += 1\n        else:\n            letter_frequency[letter] = 1\n\n    # Initialize a list to store the letters of the input string in the order they appear\n    input_string_letters = list(input_string)\n\n    # Sort the letters of the input string in alphabetical order\n    input_string_letters.sort()\n\n    # Initialize a variable to store the minimum number of characters that have to be removed\n    min_chars_to_remove = 0\n\n    # Iterate through the sorted letters of the input string\n    for i in range(len(input_string_letters)):\n        # If the current letter is already a palindrome, skip it\n        if input_string_letters[i] == input_string_letters[::-1]:\n            continue\n\n        # If the current letter is not a palindrome, check if it can be removed from the input string\n        for j in range(i + 1, len(input_string_letters)):\n            # If the current letter and the next letter form a palindrome, remove the current letter\n            if input_string_letters[i] + input_string_letters[j] == input_string_letters[::-1]:\n                min_chars_to_remove += 1\n                break\n\n        # If the current letter and the next letter do not form a palindrome, break out of the inner loop\n        if min_chars_to_remove > 0:\n            break\n\n    return str(min_chars_to_remove)",
        "num_ids": 394
    },
    {
        "number": 4903,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    aah = int(stdin.split()[0])\n    doctor_aah = int(stdin.split()[1])\n\n    if aah >= doctor_aah:\n        return \"go\"\n    else:\n        return \"no\"",
        "num_ids": 50
    },
    {
        "number": 4904,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    alice_scores = []\n    barbara_scores = []\n\n    for score in stdin.split():\n        if score[0] == 'A':\n            alice_scores.append(int(score[1:]))\n        else:\n            barbara_scores.append(int(score[1:]))\n\n    alice_scores.sort()\n    barbara_scores.sort()\n\n    if alice_scores == barbara_scores:\n        if alice_scores[0] - barbara_scores[0] >= 2:\n            return 'A'\n        else:\n            return 'B'\n    elif alice_scores > barbara_scores:\n        return 'A'\n    else:\n        return 'B'",
        "num_ids": 147
    },
    {
        "number": 4905,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a, b, k, g = map(int, stdin.split())\n    visited = set()\n    for i in range(g):\n        a, b, l = map(int, stdin.split())\n        visited.add((a, b))\n\n    visited.add((a, b))\n    visited.add((b, a))\n\n    visited = sorted(visited)\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[1] <= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0] <= k]\n\n    visited = [x for x in visited if x[1] >= k]\n\n    visited = [x for x in visited if x[0]",
        "num_ids": 1025
    },
    {
        "number": 4906,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[0] == 'E':\n        message = stdin[2:]\n        encoded = ''\n        for char in message:\n            if char in encoded:\n                encoded += str(encoded.count(char)) + char\n            else:\n                encoded += char\n        return encoded\n    elif stdin[0] == 'D':\n        encoded = stdin[2:]\n        decoded = ''\n        for char in encoded:\n            if char.isdigit():\n                decoded += char\n            else:\n                decoded += char * int(char)\n        return decoded\n    else:\n        return 'Invalid input'",
        "num_ids": 118
    },
    {
        "number": 4907,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 0:\n        return \"Alice\"\n    else:\n        return \"Bob\"",
        "num_ids": 33
    },
    {
        "number": 4908,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    operations = [\"+\", \"-\", \"*\", \"/\"]\n    for op in operations:\n        if op in stdin:\n            return f\"{a}{op}{b}\"\n    return \"Invalid input\"",
        "num_ids": 53
    },
    {
        "number": 4909,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *d = map(int, stdin.split())\n    if n < 2 or n > 1000:\n        return \"NO\"\n\n    for i in range(1, n):\n        if d[i] < 1 or d[i] > n - 1:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if d[i] > d[i + 1]:\n            return \"NO\"\n\n    return \"YES\"",
        "num_ids": 105
    },
    {
        "number": 4910,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    colleagues = [stdin.split()[i] for i in range(1, n+1)]\n    categories = set()\n    for colleague in colleagues:\n        categories.add(colleague)\n    max_category = max(categories, key=lambda x: colleagues.count(x))\n    return max_category",
        "num_ids": 87
    },
    {
        "number": 4911,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    attributes, m, n = stdin.split()\n    attributes = attributes.split()\n    songs = []\n    for _ in range(m):\n        song = stdin.split()\n        songs.append(song)\n\n    for _ in range(n):\n        sort_by = stdin.split()[0]\n        songs.sort(key=lambda x: x[attributes.index(sort_by)], reverse=True)\n\n    result = []\n    for song in songs:\n        result.append(\" \".join(song))\n        result.append(\"\\n\")\n\n    return \"\".join(result)",
        "num_ids": 122
    },
    {
        "number": 4912,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w, n = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.sort()\n    total_length = sum(x)\n    if total_length > w:\n        return \"NO\"\n    for i in range(n):\n        if x[i] > w:\n            return \"NO\"\n    return \"YES\"",
        "num_ids": 83
    },
    {
        "number": 4913,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    participants = [list(map(str, line.split())) for line in stdin.split('\\n')[1:]]\n\n    vaccinated_count = 0\n    control_count = 0\n    strain_a_count = 0\n    strain_b_count = 0\n    strain_c_count = 0\n\n    for participant in participants:\n        if participant[0] == 'Y':\n            vaccinated_count += 1\n            if participant[1] == 'A':\n                strain_a_count += 1\n            elif participant[1] == 'B':\n                strain_b_count += 1\n            elif participant[1] == 'C':\n                strain_c_count += 1\n        else:\n            control_count += 1\n            if participant[1] == 'A':\n                strain_a_count += 1\n            elif participant[1] == 'B':\n                strain_b_count += 1\n            elif participant[1] == 'C':\n                strain_c_count += 1\n\n    if vaccinated_count == 0:\n        return 'Not Effective'\n\n    strain_a_efficacy = 100 * (strain_a_count / vaccinated_count)\n    strain_b_efficacy = 100 * (strain_b_count / vaccinated_count)\n    strain_c_efficacy = 100 * (strain_c_count / vaccinated_count)\n\n    return f'{strain_a_efficacy:.2f}\\n{strain_b_efficacy:.2f}\\n{strain_c_efficacy:.2f}'",
        "num_ids": 387
    },
    {
        "number": 4914,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    correct_answers = list(stdin.split()[1])\n    max_count = 0\n    winner = \"\"\n\n    for i in range(1, 1 << N):\n        count = 0\n        sequence = []\n        for j in range(N):\n            if (i >> j) & 1 == 1:\n                sequence.append(correct_answers[j])\n                count += 1\n\n        if count > max_count:\n            max_count = count\n            winner = \"\".join(sequence)\n\n    return str(max_count) + \"\\n\" + winner",
        "num_ids": 132
    },
    {
        "number": 4915,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    logs = []\n    while True:\n        line = stdin.readline().strip()\n        if line == '-1':\n            break\n        parts = line.split()\n        minutes, problem, result = int(parts[0]), parts[1], parts[2]\n        logs.append((minutes, problem, result))\n\n    solved_problems = set()\n    total_time = 0\n    for minutes, problem, result in logs:\n        if problem not in solved_problems:\n            solved_problems.add(problem)\n            total_time += minutes\n\n    return f\"{len(solved_problems)} {total_time}\"",
        "num_ids": 129
    },
    {
        "number": 4916,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tiles = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    visited = [False] * (n * n + 1)\n    visited[1] = True\n    visited[k] = True\n    visited_numbers = set()\n    visited_numbers.add(1)\n    visited_numbers.add(k)\n    visited_distances = {1: 0}\n    min_distance = float('inf')\n\n    def manhattan_distance(x1, y1, x2, y2):\n        return abs(x1 - x2) + abs(y1 - y2)\n\n    while visited_numbers:\n        current_number = min(visited_numbers, key=lambda x: visited_distances[x])\n        current_distance = visited_distances[current_number]\n        visited_numbers.remove(current_number)\n        visited_distances.pop(current_number)\n\n        for neighbor_number in range(1, n * n + 1):\n            if neighbor_number == current_number:\n                continue\n            if neighbor_number in visited_numbers:\n                continue\n            if neighbor_number in visited_distances:\n                continue\n            if neighbor_number not in tiles[neighbor_number - 1]:\n                continue\n\n            neighbor_x, neighbor_y = divmod(neighbor_number - 1, n)\n            neighbor_distance = current_distance + manhattan_distance(neighbor_x, neighbor_y, current_x, current_y)\n            if neighbor_distance < min_distance:\n                min_distance = neighbor_distance\n                min_path = [current_number]\n\n            visited[neighbor_number] = True\n            visited_numbers.add(neighbor_number)\n            visited_distances[neighbor_number] = neighbor_distance\n            current_x, current_y = divmod(neighbor_number - 1, n)\n\n    if min_distance == float('inf'):\n        return -1\n    return str(min_distance)",
        "num_ids": 444
    },
    {
        "number": 4917,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    intervals = []\n    for _ in range(n):\n        a, b = map(int, stdin.split()[1:])\n        intervals.append((a, b))\n    intervals.sort()\n    for i in range(1, len(intervals)):\n        if intervals[i][0] - intervals[i - 1][1] > 1:\n            return \"gunilla has a point\"\n    return \"edward is right\"",
        "num_ids": 104
    },
    {
        "number": 4918,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    queries = []\n    for _ in range(q):\n        query = stdin.split()\n        if query[0] == 't':\n            a, b = map(int, query[1:])\n            queries.append(('t', a, b))\n        else:\n            a = int(query[1])\n            queries.append(('s', a))\n\n    def merge_groups(a, b):\n        if a > b:\n            a, b = b, a\n        return a\n\n    def size_of_group(a):\n        return a\n\n    groups = [[] for _ in range(n + 1)]\n    for query in queries:\n        if query[0] == 't':\n            a, b = query[1:]\n            groups[a].append(b)\n            groups[b].append(a)\n        else:\n            a = query[1]\n            groups[a] = [size_of_group(x) for x in groups[a]]\n\n    result = []\n    for query in queries:\n        if query[0] =='s':\n            a = query[1]\n            result.append(groups[a][0])\n        else:\n            a, b = query[1:]\n            result.append(merge_groups(groups[a][0], groups[b][0]))\n\n    return '\\n'.join(map(str, result))",
        "num_ids": 302
    },
    {
        "number": 4919,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, queries = map(int, stdin.split())\n    trips = {}\n    for i in range(n):\n        country, year = stdin.split()\n        trips[country] = trips.get(country, []) + [int(year)]\n\n    for query in queries:\n        country, k = query.split()\n        k = int(k)\n        if k > len(trips[country]):\n            print(-1)\n        else:\n            print(trips[country][k - 1])",
        "num_ids": 111
    },
    {
        "number": 4920,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    events = list(stdin)\n    n = len(events)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if events[i]!= events[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = dp[i + 1][j] + dp[i][j - 1]\n\n    return str(dp[0][n - 1])\n\n\ndef",
        "num_ids": 128
    },
    {
        "number": 4921,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = set()\n    for line in stdin.split('\\n'):\n        for word in line.split():\n            words.add(word)\n    result = []\n    for word in words:\n        if word not in result:\n            result.append(word)\n    return''.join(result)",
        "num_ids": 63
    },
    {
        "number": 4922,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    clauses = []\n    for line in stdin.split('\\n'):\n        clause = [int(x) for x in line.split()]\n        if len(clause) == 3:\n            clauses.append(clause)\n    if len(clauses) < 8:\n        return \"unsatisfactory\"\n    return \"satisfactory\"",
        "num_ids": 71
    },
    {
        "number": 4923,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = set(a)\n    if len(a) == 1:\n        return \"none\"\n    else:\n        return str(a.pop())",
        "num_ids": 48
    },
    {
        "number": 4924,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    current_time, explosion_time = stdin.split('\\n')\n    current_time = [int(x) for x in current_time.split(':')]\n    explosion_time = [int(x) for x in explosion_time.split(':')]\n\n    time_to_explosion = explosion_time - current_time\n\n    if time_to_explosion[0] < 0:\n        time_to_explosion[0] += 24\n    if time_to_explosion[1] < 0:\n        time_to_explosion[1] += 60\n    if time_to_explosion[2] < 0:\n        time_to_explosion[2] += 60\n\n    return f\"{time_to_explosion[0]:02d}:{time_to_explosion[1]:02d}:{time_to_explosion[2]:02d}\"",
        "num_ids": 205
    },
    {
        "number": 4925,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, n = map(int, stdin.split())\n    k = 1\n    while True:\n        if n <= l:\n            return str(k)\n        n -= l\n        k += 1",
        "num_ids": 44
    },
    {
        "number": 4926,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    e = 0\n    for i in range(n):\n        e += 1 / i\n    return str(e)",
        "num_ids": 34
    },
    {
        "number": 4927,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    if p > q:\n        return \"paul\"\n    elif p < q:\n        return \"opponent\"\n    else:\n        return \"tie\"",
        "num_ids": 47
    },
    {
        "number": 4928,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    board = [[\".\" for _ in range(8)] for _ in range(8)]\n    pieces = []\n\n    for _ in range(N):\n        x, y = map(int, stdin.split()[1:3])\n        direction = stdin.split()[3]\n        if direction == \"h\":\n            board[x][y] = \"b\"\n        elif direction == \"v\":\n            board[y][x] = \"b\"\n        else:\n            pieces.append((x, y, direction))\n\n    for piece in pieces:\n        x, y, direction = piece\n        if direction == \"h\":\n            for i in range(x, 8):\n                if board[i][y] == \"b\":\n                    board[i][y] = \".\"\n        elif direction == \"v\":\n            for i in range(y, 8):\n                if board[y][i] == \"b\":\n                    board[y][i] = \".\"\n\n    return str(len([piece for piece in pieces if board[piece[0]][piece[1]] == \"b\"]))",
        "num_ids": 238
    },
    {
        "number": 4929,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, P = stdin.split()\n    S = S.lower()\n    P = P.lower()\n\n    def is_valid(P: str) -> bool:\n        S_rev = S[::-1]\n        S_rev_case = S_rev.swapcase()\n        S_rev_case_digit = S_rev_case.isdigit()\n        S_rev_case_digit_digit = S_rev_case_digit.isdigit()\n\n        return (\n            P == S\n            or P == S_rev\n            or P == S_rev_case\n            or P == S_rev_case_digit\n            or P == S_rev_case_digit_digit\n        )\n\n    return \"Yes\" if is_valid(P) else \"No\"",
        "num_ids": 164
    },
    {
        "number": 4930,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    sentence = stdin.strip().lower()\n    decoded_sentence = \"\"\n    for word in sentence.split():\n        decoded_word = \"\"\n        for letter in word:\n            if letter in \"aeiou\":\n                decoded_letter = letter + \"p\" + letter\n            else:\n                decoded_letter = letter\n            decoded_word += decoded_letter\n        decoded_sentence += decoded_word + \" \"\n    return decoded_sentence.strip()",
        "num_ids": 92
    },
    {
        "number": 4931,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if X == 0:\n        return str(-X)\n    if Y == 0:\n        return \"IMPOSSIBLE\"\n\n    def find_temperature(A, B):\n        return A + Y * (B - A)\n\n    A = 0\n    B = 1\n    while True:\n        A = find_temperature(A, B)\n        B += 1\n        if A == 0:\n            return str(-A)\n        if abs(A - find_temperature(A, B)) < 1e-6:\n            return str(A)\n\n    return \"ALL GOOD\"",
        "num_ids": 139
    },
    {
        "number": 4932,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    P, M, G = map(int, stdin.split())\n\n    postman_attack = 0\n    milkman_attack = 0\n    garbage_attack = 0\n\n    if P <= M <= G:\n        postman_attack = 1\n    if M <= P <= G:\n        milkman_attack = 1\n    if G <= P <= M:\n        garbage_attack = 1\n\n    if postman_attack == 1 and milkman_attack == 1 and garbage_attack == 1:\n        return \"both\"\n    elif postman_attack == 1 or milkman_attack == 1 or garbage_attack == 1:\n        return \"one\"\n    else:\n        return \"none\"",
        "num_ids": 175
    },
    {
        "number": 4933,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    numbers.sort()\n    return str(numbers[3])",
        "num_ids": 27
    },
    {
        "number": 4934,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, v = map(int, stdin.split())\n    if h > 10000 or v > 89:\n        return \"Invalid input\"\n\n    angle = v * 0.017453292519943295\n    ladder_length = h / (1 + angle)\n    return str(int(ladder_length + 0.5))",
        "num_ids": 92
    },
    {
        "number": 4935,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, g = map(int, stdin.split())\n    segments = []\n    for _ in range(N):\n        D, theta = map(int, stdin.split())\n        segments.append((D, theta))\n    segments.sort(key=lambda x: x[0])\n\n    result = []\n    for i in range(N):\n        D, theta = segments[i]\n        v = g * D / (2 * math.sin(math.radians(theta)))\n        result.append(v)\n\n    return '\\n'.join(map(str, result))",
        "num_ids": 123
    },
    {
        "number": 4936,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    temps = list(map(int, stdin.split()[1:]))\n\n    def min_temp(start_day, end_day):\n        min_temp = float('inf')\n        for i in range(start_day, end_day):\n            min_temp = min(min_temp, temps[i])\n        return min_temp\n\n    def min_temp_days(start_day, end_day):\n        min_temp = min_temp(start_day, end_day)\n        days = []\n        for i in range(start_day, end_day):\n            if temps[i] == min_temp:\n                days.append(i)\n        return days\n\n    start_days = min_temp_days(0, 2)\n    end_days = min_temp_days(2, 4)\n\n    if len(start_days) == 0 or len(end_days) == 0:\n        return \"IMPOSSIBLE\"\n\n    start_day = min(start_days)\n    end_day = max(end_days)\n\n    return f\"{start_day} {end_day}\"",
        "num_ids": 253
    },
    {
        "number": 4937,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    e = list(map(int, stdin.split()))\n\n    def dfs(system, ships, fights):\n        if ships == 0:\n            return 1\n\n        if system == n:\n            return 0\n\n        wins = 0\n        for i in range(n):\n            if i!= system:\n                wins += dfs(i, ships - e[i], fights + 1)\n\n        return wins\n\n    return str(dfs(0, a, 0))",
        "num_ids": 116
    },
    {
        "number": 4938,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.split()[0])\n    genders = stdin.split()[1]\n    women_count = 0\n    men_count = 0\n    max_count = 0\n\n    for gender in genders:\n        if gender == 'W':\n            women_count += 1\n        else:\n            men_count += 1\n\n        if abs(women_count - men_count) > X:\n            max_count = max(max_count, women_count)\n            women_count = 0\n            men_count = 0\n\n    max_count = max(max_count, women_count)\n    return str(max_count)",
        "num_ids": 142
    },
    {
        "number": 4939,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    commands = stdin.split()[1:]\n    positions = [0] * n\n    current_position = 0\n    for command in commands:\n        if command.startswith(\"undo\"):\n            m = int(command.split()[1])\n            for _ in range(m):\n                positions[current_position] = positions[current_position - m]\n                current_position = (current_position - m) % n\n        else:\n            p = int(command)\n            positions[current_position] = positions[current_position + p]\n            current_position = (current_position + p) % n\n    return str(positions.index(0))",
        "num_ids": 151
    },
    {
        "number": 4940,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    stages = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    times = [0] * m\n    for i in range(n):\n        for j in range(m):\n            times[j] += stages[i][j]\n    return''.join(map(str, times))",
        "num_ids": 87
    },
    {
        "number": 4941,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    m, *words = stdin.split('\\n')\n    words = [word.split() for word in words]\n    dutch_dict = {word[0]: word[1] for word in words}\n    english_dict = {word[2]: word[1] for word in words}\n\n    def find_translation(word: str) -> str:\n        if word in dutch_dict:\n            return dutch_dict[word]\n        if word in english_dict:\n            return english_dict[word]\n        return word\n\n    def count_translations(word: str) -> int:\n        if word in dutch_dict:\n            return 1\n        if word in english_dict:\n            return 1\n        return 0\n\n    def is_correct(word: str) -> bool:\n        return word in english_dict\n\n    correct_translations = [find_translation(word) for word in s.split()]\n    correct_count = sum(1 for word in correct_translations if is_correct(word))\n    incorrect_translations = [find_translation(word) for word in s.split() if not is_correct(word)]\n    incorrect_count = sum(1 for word in incorrect_translations)\n\n    if correct_count == 1:\n        return f\"{correct_translations[0]} correct\"\n    if incorrect_count == 1:\n        return f\"{incorrect_translations[0]} incorrect\"\n    return f\"{correct_count} correct\\n{incorrect_count} incorrect\"",
        "num_ids": 332
    },
    {
        "number": 4942,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *t = map(int, stdin.split())\n    t = sorted(t)\n    days = 1\n    for i in range(n):\n        days += t[i]\n        if days == 1:\n            return str(days)\n    return str(days)",
        "num_ids": 61
    },
    {
        "number": 4943,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, a = map(int, stdin.split())\n    points = []\n    for _ in range(n):\n        x, y = map(float, stdin.split())\n        points.append((x, y))\n\n    # Calculate area\n    area = 0\n    for i in range(n):\n        j = (i + 1) % n\n        area += points[i][0] * points[j][1]\n        area -= points[j][0] * points[i][1]\n    area = abs(area) / 2\n\n    # Calculate new area\n    new_area = a * area\n\n    # Calculate new coordinates\n    x_min = min(p[0] for p in points)\n    y_min = min(p[1] for p in points)\n    x_max = max(p[0] for p in points)\n    y_max = max(p[1] for p in points)\n\n    if x_min < 0:\n        x_min = 0\n    if y_min < 0:\n        y_min = 0\n    if x_max > 0:\n        x_max = 0\n    if y_max > 0:\n        y_max = 0\n\n    x_diff = x_max - x_min\n    y_diff = y_max - y_min\n\n    if x_diff > y_diff:\n        x_diff = y_diff\n    elif x_diff < y_diff:\n        y_diff = x_diff\n\n    x_diff *= 1.1\n    y_diff *= 1.1\n\n    x_min -= x_diff\n    x_max += x_diff\n    y_min -= y_diff\n    y_max += y_diff\n\n    # Calculate new points\n    new_points = []\n    for x in range(int(x_min), int(x_max) + 1):\n        for y in range(int(y_min), int(y_max) + 1):\n            new_points.append((x, y))\n\n    # Print output\n    for p in new_points:\n        print(f\"{p[0]:.6f} {p[1]:.6f}\")\n\n    return \"\"",
        "num_ids": 481
    },
    {
        "number": 4944,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    days = 0\n    printers = 0\n    while n > 0:\n        if n % 2 == 0:\n            printers += 1\n            n -= 1\n        else:\n            days += 1\n            n -= 1\n    return str(days)",
        "num_ids": 66
    },
    {
        "number": 4945,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, m, sigma = map(int, stdin.split())\n    x = a * m + b * sigma\n    y = m + sigma\n    if x < 1 or y < 1 or x + y > m:\n        return \"IMPOSSIBLE\"\n    return str(x)",
        "num_ids": 65
    },
    {
        "number": 4946,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    languages = list(map(int, stdin.split()[1:]))\n\n    def find_awkwardness(languages: List[int]) -> int:\n        awkwardness = n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if languages[i] == languages[j]:\n                    awkwardness = min(awkwardness, abs(i - j))\n        return awkwardness\n\n    return str(find_awkwardness(languages))",
        "num_ids": 117
    },
    {
        "number": 4947,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x < 0 or x > 1000:\n        return \"Invalid input\"\n\n    english_miles = 5280\n    roman_paces = 1000\n\n    result = int(x * english_miles / roman_paces)\n    return str(result)",
        "num_ids": 76
    },
    {
        "number": 4948,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    holes = []\n    for _ in range(n):\n        r, x, y, z = map(int, stdin.split())\n        holes.append((r, (x, y, z)))\n    holes.sort(key=lambda x: x[1][2])\n\n    thickness = 0\n    for i in range(s):\n        if i < len(holes):\n            r, (x, y, z) = holes[i]\n            thickness += r\n        else:\n            thickness += 100000\n\n    return f\"{thickness:.6f}\"",
        "num_ids": 136
    },
    {
        "number": 4949,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, W, H = map(int, stdin.split())\n    matches = list(map(int, stdin.split()))\n\n    for match in matches:\n        if match <= W:\n            print(\"DA\")\n        else:\n            print(\"NE\")\n\n    return \"\"",
        "num_ids": 57
    },
    {
        "number": 4950,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    times = []\n    distances = []\n    for _ in range(n):\n        time, distance = map(int, stdin.split()[1:])\n        times.append(time)\n        distances.append(distance)\n    times.sort()\n    distances.sort()\n    max_speed = 0\n    for i in range(1, len(times)):\n        if times[i] - times[i - 1] > 1:\n            max_speed = max(max_speed, distances[i] / (times[i] - times[i - 1]))\n    return str(max_speed)",
        "num_ids": 141
    },
    {
        "number": 4951,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    errors = []\n\n    for i in range(1, n + 1):\n        assumptions, arrow, conclusion = lines[i].split()\n        assumptions = [assumption.upper() for assumption in assumptions.split()]\n        conclusion = conclusion.upper()\n\n        if not all(assumption in assumptions for assumption in assumptions):\n            errors.append(i)\n        elif conclusion not in assumptions:\n            errors.append(i)\n\n    if errors:\n        return str(errors[0])\n    else:\n        return 'correct'",
        "num_ids": 131
    },
    {
        "number": 4952,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    votes = {}\n    for line in stdin.split('\\n'):\n        if line == '***':\n            break\n        name = line.strip()\n        if name not in votes:\n            votes[name] = 1\n        else:\n            votes[name] += 1\n\n    simple_majority = False\n    for name, count in votes.items():\n        if count > len(votes) / 2:\n            simple_majority = True\n            break\n\n    if simple_majority:\n        winner = max(votes, key=votes.get)\n        return winner\n    else:\n        return \"Runoff!\"",
        "num_ids": 127
    },
    {
        "number": 4953,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    characters = []\n    for i in range(n):\n        name, language, additional_languages = stdin.split()\n        characters.append((name, language, additional_languages))\n    languages = set()\n    for name, language, _ in characters:\n        languages.add(language)\n    languages = sorted(list(languages))\n    for i in range(len(characters)):\n        for j in range(i + 1, len(characters)):\n            if can_converse(characters[i][1], characters[j][1]):\n                return \"2\"\n    return \"1\"\n\n\ndef",
        "num_ids": 138
    },
    {
        "number": 4954,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b, h, w = map(int, stdin.split())\n    hotels = []\n    for _ in range(h):\n        p, *a = map(int, stdin.split())\n        hotels.append((p, a))\n\n    def min_cost(hotel_idx: int, weekend_idx: int) -> int:\n        hotel_price, hotel_beds = hotels[hotel_idx]\n        total_cost = hotel_price\n        for beds in hotel_beds:\n            if beds > 0:\n                total_cost += beds * weekend_idx\n        return total_cost\n\n    min_cost_hotel = min(range(h), key=lambda i: min_cost(i, 0))\n    min_cost_weekend = min(range(w), key=lambda i: min_cost(min_cost_hotel, i))\n\n    return str(min_cost(min_cost_hotel, min_cost_weekend))",
        "num_ids": 214
    },
    {
        "number": 4955,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    notes = stdin.split()[1:]\n    scales = []\n\n    for i in range(len(notes)):\n        for j in range(i + 1, len(notes)):\n            scale = notes[i] + notes[j]\n            if scale not in scales:\n                scales.append(scale)\n\n    if not scales:\n        return \"none\"\n\n    return \" \".join(sorted(scales))",
        "num_ids": 96
    },
    {
        "number": 4956,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    ae_count = 0\n    for word in words:\n        if '\u00e4' in word:\n            ae_count += word.count('\u00e4')\n    if ae_count / len(words) >= 0.4:\n        return \"dae ae ju traeligt va\"\n    else:\n        return \"haer talar vi rikssvenska\"",
        "num_ids": 84
    },
    {
        "number": 4957,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(row) for row in stdin.splitlines()]\n\n    def is_adjacent(i, j, n, m):\n        return (i - 1 >= 0 and grid[i - 1][j] == '.') or (i + 1 < n and grid[i + 1][j] == '.') or (j - 1 >= 0 and grid[i][j - 1] == '.') or (j + 1 < m and grid[i][j + 1] == '.')\n\n    def place_coffee_shop(i, j, n, m):\n        if not is_adjacent(i, j, n, m):\n            return False\n\n        for x in range(i - 1, i + 2):\n            for y in range(j - 1, j + 2):\n                if x == i and y == j:\n                    continue\n                if grid[x][y] == '#':\n                    return False\n\n        grid[i][j] = 'E'\n        return True\n\n    def dfs(i, j, n, m):\n        if i == n or j == m:\n            return True\n\n        if grid[i][j] == '.':\n            if place_coffee_shop(i, j, n, m):\n                return dfs(i + 1, j, n, m) or dfs(i, j + 1, n, m) or dfs(i, j - 1, n, m) or dfs(i - 1, j, n, m)\n\n        return dfs(i + 1, j, n, m) or dfs(i, j + 1, n, m) or dfs(i, j - 1, n, m) or dfs(i - 1, j, n, m)\n\n    dfs(0, 0, n, m)\n\n    return '\\n'.join(''.join(row) for row in grid)",
        "num_ids": 428
    },
    {
        "number": 4958,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    heights = list(map(int, stdin.split()))\n    tower_height = heights.pop()\n    first_tower_boxes = heights[:3]\n    second_tower_boxes = heights[3:]\n\n    first_tower_boxes.sort(reverse=True)\n    second_tower_boxes.sort(reverse=True)\n\n    return f\"{first_tower_boxes[0]} {first_tower_boxes[1]} {first_tower_boxes[2]} {second_tower_boxes[0]} {second_tower_boxes[1]} {second_tower_boxes[2]}\"",
        "num_ids": 133
    },
    {
        "number": 4959,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    e, f, c = map(int, stdin.split())\n    if e + f >= c:\n        return \"0\"\n    else:\n        return str(e + f)",
        "num_ids": 40
    },
    {
        "number": 4960,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    binary = stdin.strip()\n    binary = binary.zfill(len(binary) + (3 - len(binary) % 3))\n    octal = \"\"\n    for i in range(0, len(binary), 3):\n        octal += str(int(binary[i:i+3], 2))\n    return octal",
        "num_ids": 75
    },
    {
        "number": 4961,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, S = map(int, stdin.split())\n    seating_order = [list(row) for row in stdin.splitlines()]\n\n    def count_handshakes(row: int, col: int) -> int:\n        count = 0\n        for i in range(row - 1, -1, -1):\n            if seating_order[i][col] == \"o\":\n                count += 1\n                break\n        for i in range(row + 1, R):\n            if seating_order[i][col] == \"o\":\n                count += 1\n                break\n        for j in range(col - 1, -1, -1):\n            if seating_order[row][j] == \"o\":\n                count += 1\n                break\n        for j in range(col + 1, S):\n            if seating_order[row][j] == \"o\":\n                count += 1\n                break\n        return count\n\n    total_handshakes = 0\n    for row in range(R):\n        for col in range(S):\n            if seating_order[row][col] == \".\":\n                total_handshakes += count_handshakes(row, col)\n\n    return str(total_handshakes)",
        "num_ids": 274
    },
    {
        "number": 4962,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    drawers = [[] for _ in range(l + 1)]\n    items = [0] * (n + 1)\n\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        drawers[a].append(i)\n        drawers[b].append(i)\n        items[i] = 1\n\n    for i in range(1, n + 1):\n        if items[i] == 0:\n            continue\n\n        for j in range(l + 1):\n            if drawers[j]:\n                for k in range(len(drawers[j])):\n                    if drawers[j][k]!= i:\n                        if items[drawers[j][k]] == 0:\n                            items[drawers[j][k]] = 1\n                            break\n                        else:\n                            drawers[j].pop(k)\n                            break\n                else:\n                    items[i] = 0\n                    break\n\n    result = []\n    for i in range(1, n + 1):\n        if items[i] == 1:\n            result.append(\"LADICA\")\n        else:\n            result.append(\"SMECE\")\n\n    return \" \".join(result)",
        "num_ids": 275
    },
    {
        "number": 4963,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = list(map(int, stdin.split()[1:]))\n    d.append(0)\n    d.sort()\n    result = []\n    for i in range(n):\n        result.append(i + 1)\n    for i in range(n - 1):\n        result[i] += d[i]\n    return \" \".join(map(str, result))",
        "num_ids": 95
    },
    {
        "number": 4964,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l = map(int, stdin.split())\n    horror_list = list(map(int, stdin.split()))\n    similarities = []\n    for _ in range(l):\n        a, b = map(int, stdin.split())\n        similarities.append((a, b))\n\n    def horror_index(movie_id: int) -> int:\n        if movie_id in horror_list:\n            return 0\n        worst_similar = max(similarities, key=lambda x: horror_index(x[1]))\n        return worst_similar[0] + 1 if worst_similar[0] < horror_index(worst_similar[1]) else float('inf')\n\n    max_horror_index = max(horror_index(i) for i in range(n))\n    max_movie_id = max(i for i in range(n) if horror_index(i) == max_horror_index)\n    return str(max_movie_id)",
        "num_ids": 226
    },
    {
        "number": 4965,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = list(map(int, stdin.split()[1:]))\n\n    t.sort()\n    t.reverse()\n\n    for i in range(1, n - 1):\n        if abs(t[i - 1] - t[i]) > abs(t[i] - t[i + 1]):\n            t[i], t[i + 1] = t[i + 1], t[i]\n\n    if t[0] > t[1]:\n        t[0], t[1] = t[1], t[0]\n\n    if t[n - 2] < t[n - 1]:\n        t[n - 2], t[n - 1] = t[n - 1], t[n - 2]\n\n    return \" \".join(map(str, t))",
        "num_ids": 194
    },
    {
        "number": 4966,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, k = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n\n    # Compute the speedup for each segment\n    speedup = [100 + p * (i + 1) / n for i in range(n)]\n\n    # Compute the total speedup\n    total_speedup = sum(speedup)\n\n    # Compute the original length\n    original_length = k * total_speedup / 100\n\n    return str(original_length)",
        "num_ids": 112
    },
    {
        "number": 4967,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    grid = [list(row) for row in stdin.split()[1:]]\n\n    def manhattan_distance(x1: int, y1: int, x2: int, y2: int) -> int:\n        return abs(x1 - x2) + abs(y1 - y2)\n\n    def find_nearest_safe_house(spy_x: int, spy_y: int) -> int:\n        min_distance = float('inf')\n        nearest_safe_house = None\n\n        for y in range(N):\n            for x in range(N):\n                if grid[y][x] == 'H':\n                    distance = manhattan_distance(spy_x, spy_y, x, y)\n                    if distance < min_distance:\n                        min_distance = distance\n                        nearest_safe_house = (x, y)\n\n        return nearest_safe_house\n\n    max_distance = 0\n    for y in range(N):\n        for x in range(N):\n            if grid[y][x] == 'S':\n                nearest_safe_house = find_nearest_safe_house(x, y)\n                if nearest_safe_house:\n                    max_distance = max(max_distance, manhattan_distance(x, y, nearest_safe_house[0], nearest_safe_house[1]))\n\n    return str(max_distance)",
        "num_ids": 313
    },
    {
        "number": 4968,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, r = map(int, stdin.split())\n    damaged_kayaks = set(map(int, stdin.split()[1:s+1]))\n    reserve_kayaks = set(map(int, stdin.split()[s+1:s+r+1]))\n\n    def can_start(team: int) -> bool:\n        return team not in damaged_kayaks and team not in reserve_kayaks\n\n    def count_teams(start: int) -> int:\n        count = 0\n        for team in range(start, n):\n            if can_start(team):\n                count += 1\n        return count\n\n    min_teams = n\n    for start in range(1, n):\n        if count_teams(start) < min_teams:\n            min_teams = count_teams(start)\n\n    return str(min_teams)",
        "num_ids": 192
    },
    {
        "number": 4969,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    if C > R:\n        return \"0.000000000\"\n    else:\n        return f\"{(C / R) * 100:.6f}\"",
        "num_ids": 56
    },
    {
        "number": 4970,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    courses = []\n    for _ in range(n):\n        course = list(map(int, stdin.split()[1:]))\n        courses.append(course)\n    courses.sort(key=lambda x: (-sum(x), x))\n    return str(len(courses))",
        "num_ids": 72
    },
    {
        "number": 4971,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    bus_numbers = []\n    for i in range(1, m + 1):\n        bus_numbers.append(i * i * i)\n    bus_numbers.sort()\n    for i in range(len(bus_numbers) - 1, -1, -1):\n        if bus_numbers[i] > m:\n            return str(bus_numbers[i])\n    return None",
        "num_ids": 93
    },
    {
        "number": 4972,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    k = 1\n    while True:\n        Y = [X - i * (i + 1) for i in range(k)]\n        if sum(Y) == X:\n            break\n        k += 1\n    return str(k)",
        "num_ids": 60
    },
    {
        "number": 4973,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    board = [list(row) for row in stdin.split()[1:]]\n    knight_pos = [(1, 1)]\n    visited = set()\n    steps = 0\n\n    while knight_pos:\n        steps += 1\n        new_knight_pos = []\n        for pos in knight_pos:\n            for move in [(0, 2), (1, 1), (1, -1), (2, 0), (2, 1), (2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]:\n                r, c = pos[0] + move[0], pos[1] + move[1]\n                if 1 <= r <= n and 1 <= c <= n and (r, c) not in visited and board[r-1][c-1]!= '#':\n                    new_knight_pos.append((r, c))\n                    visited.add((r, c))\n        knight_pos = new_knight_pos\n\n    if knight_pos:\n        return str(steps)\n    else:\n        return '-1'",
        "num_ids": 263
    },
    {
        "number": 4974,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, n = map(int, stdin.split())\n    booked = set(map(int, stdin.split()))\n    available = set(range(1, r + 1)) - booked\n\n    if not available:\n        return \"too late\"\n    else:\n        return next(iter(available))",
        "num_ids": 67
    },
    {
        "number": 4975,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    key_phrase = stdin.split()[0]\n    plaintext = stdin.split()[1]\n\n    # Generate the encryption key\n    key = [key_phrase[i] for i in range(len(key_phrase))]\n    key.extend([key_phrase[i] for i in range(len(key_phrase), 26)])\n    key.extend([key_phrase[i] for i in range(len(key_phrase), 52)])\n\n    # Encrypt the plaintext\n    encrypted = \"\"\n    for i in range(len(plaintext) - 1):\n        if plaintext[i] == plaintext[i + 1]:\n            encrypted += \"X\" + plaintext[i]\n        elif key[i] == key[i + 1]:\n            encrypted += key[i] + \"X\" + key[i + 1]\n        elif key.index(key[i]) == key.index(key[i + 1]):\n            encrypted += key[i] + key[i + 1]\n        else:\n            encrypted += key[i] + key[key.index(key[i]) + 1]\n\n    # Remove the last 'x'\n    encrypted = encrypted[:-1]\n\n    return encrypted.upper()",
        "num_ids": 264
    },
    {
        "number": 4976,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    gopher_coords = list(map(float, stdin.split()))\n    dog_coords = gopher_coords[2:]\n    gopher_holes = stdin.split(\"\\n\")[2:]\n\n    gopher_speed = 1.0\n    gopher_x, gopher_y = gopher_coords[:2]\n    dog_x, dog_y = dog_coords\n\n    gopher_holes = [(float(x), float(y)) for x, y in gopher_holes]\n\n    for hole in gopher_holes:\n        if abs(hole[0] - gopher_x) <= 1 and abs(hole[1] - gopher_y) <= 1:\n            if abs(hole[0] - dog_x) <= 1 and abs(hole[1] - dog_y) <= 1:\n                return f\"The gopher can escape through the hole at ({hole[0]:.3f},{hole[1]:.3f}).\"\n            else:\n                gopher_speed *= 2\n\n    return \"The gopher cannot escape.\"",
        "num_ids": 253
    },
    {
        "number": 4977,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split()[0].split())\n    c, d = map(int, stdin.split()[1].split())\n    t = int(stdin.split()[2])\n\n    def is_valid(x: int, y: int) -> bool:\n        return 0 <= x <= 1000 and 0 <= y <= 1000\n\n    def is_valid_intersection(x: int, y: int) -> bool:\n        return is_valid(x, y) and (x, y)!= (a, b) and (x, y)!= (c, d)\n\n    def is_valid_turn(x: int, y: int, direction: str) -> bool:\n        if direction == \"L\":\n            return x > 0\n        elif direction == \"R\":\n            return x < 1000\n        elif direction == \"U\":\n            return y > 0\n        elif direction == \"D\":\n            return y < 1000\n        else:\n            return False\n\n    def is_valid_move(x: int, y: int, direction: str) -> bool:\n        if direction == \"S\":\n            return y < 1000\n        elif direction == \"N\":\n            return y > 0\n        elif direction == \"E\":\n            return x < 1000\n        elif direction == \"W\":\n            return x > 0\n        else:\n            return False\n\n    def is_valid_move_to_intersection(x: int, y: int, direction: str) -> bool:\n        if direction == \"S\":\n            return y == 1000\n        elif direction == \"N\":\n            return y == 0\n        elif direction == \"E\":\n            return x == 1000\n        elif direction == \"W\":\n            return x == 0\n        else:\n            return False\n\n    def is_valid_move_to_street(x: int, y: int, direction: str) -> bool:\n        if direction == \"S\":\n            return y == 1000\n        elif direction == \"N\":\n            return y == 0\n        else:\n            return False\n\n    def is_valid_move_to_avenue(x: int, y: int, direction: str) -> bool:\n        if direction == \"E\":\n            return x == 1000\n        elif direction == \"W\":\n            return x == 0\n        else:\n            return False\n\n    def is_valid_move_to_corner(x: int, y: int, direction: str) -> bool:\n        if direction == \"S\":\n            return y == 0\n        elif direction == \"N\":\n            return y == 1000\n        elif direction == \"E\":\n            return x == 0\n        elif direction == \"W\":\n            return x == 1000\n        else:\n            return False\n\n    def is_valid_move_to_corner_with_turn(x: int, y: int, direction: str) -> bool:\n        if direction == \"S\":\n            return y == 0\n        elif direction == \"N\":\n            return y == 1000\n        elif direction == \"E\":\n            return x == 0\n        elif direction == \"W\":\n            return x == 1000\n        else:\n            return False\n\n    def is_valid_move_to_corner_with_turn_to_street(x: int, y: int, direction: str) -> bool:\n        if direction == \"S\":\n            return y == 0\n        elif direction == \"N\":\n            return y == 1000\n        else:\n            return False\n\n    def is_valid_move_to_corner_with_turn_to_avenue(x: int, y: int, direction: str) -> bool:\n        if direction == \"E\":\n            return x == 0\n        elif direction == \"W\":\n            return x == 1000\n        else:\n            return False\n\n    def is_valid_move_to_corner_with_turn_to_corner(x: int, y: int, direction: str) -> bool:\n        if direction == \"S\":\n            return y == 0\n        elif direction == \"N\":\n            return y == 1000\n        elif direction == \"E\":\n            return x == 0\n        elif direction == \"W\":\n            return x == 1000\n        else:\n            return False\n\n    def is_valid_move_to_corner_with_turn_to_corner_with_turn(x: int, y: int, direction: str) -> bool:\n        if direction == \"S\":\n            return y == 0\n        elif direction == \"N\":\n            return y == 1000\n        el",
        "num_ids": 1023
    },
    {
        "number": 4978,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(row) for row in stdin.splitlines()]\n\n    for _ in range(1000000):\n        for i in range(1, n - 1):\n            for j in range(1, m - 1):\n                if grid[i][j] == 'V':\n                    if grid[i - 1][j] == 'A':\n                        grid[i][j] = 'W'\n                    elif grid[i - 1][j] == 'S':\n                        grid[i][j] = 'W'\n                        for k in range(j - 1, -1, -1):\n                            if grid[i - 1][k] == 'A':\n                                grid[i][k] = 'W'\n                                break\n                            elif grid[i - 1][k] == 'S':\n                                break\n                    elif grid[i - 1][j] == 'W':\n                        grid[i][j] = 'W'\n                    elif grid[i - 1][j] == '.':\n                        grid[i][j] = 'W'\n\n    result = []\n    for row in grid:\n        result.append(''.join(row))\n\n    return '\\n'.join(result)",
        "num_ids": 276
    },
    {
        "number": 4979,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    binary_representation = bin(n)[2:]\n    reversed_binary_representation = binary_representation[::-1]\n    reversed_number = int(reversed_binary_representation, 2)\n    return str(reversed_number)",
        "num_ids": 57
    },
    {
        "number": 4980,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    buttons = []\n    for _ in range(n):\n        buttons.append(stdin.split()[1].lower())\n    pink_buttons = [button for button in buttons if \"pink\" in button]\n    rose_buttons = [button for button in buttons if \"rose\" in button]\n    if not pink_buttons:\n        return \"I must watch Star Wars with my daughter\"\n    return len(pink_buttons) + len(rose_buttons)",
        "num_ids": 112
    },
    {
        "number": 4981,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    desired_order = stdin.split()[1]\n    if desired_order == 'ABC':\n        return f\"{a} {b} {c}\"\n    elif desired_order == 'ACB':\n        return f\"{a} {c} {b}\"\n    elif desired_order == 'BAC':\n        return f\"{b} {a} {c}\"\n    elif desired_order == 'BCA':\n        return f\"{b} {c} {a}\"\n    elif desired_order == 'CAB':\n        return f\"{c} {a} {b}\"\n    elif desired_order == 'CBA':\n        return f\"{c} {b} {a}\"\n    else:\n        return \"Invalid input\"",
        "num_ids": 166
    },
    {
        "number": 4982,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    events = []\n    for line in stdin.split('\\n'):\n        if line.startswith('buy'):\n            shares, price = line.split()\n            shares, price = int(shares), int(price)\n            events.append(('buy', shares, price))\n        elif line.startswith('sell'):\n            shares, price = line.split()\n            shares, price = int(shares), int(price)\n            events.append(('sell', shares, price))\n        elif line.startswith('split'):\n            shares = int(line.split()[1])\n            events.append(('split', shares))\n        elif line.startswith('merge'):\n            shares = int(line.split()[1])\n            events.append(('merge', shares))\n        elif line.startswith('die'):\n            price = int(line.split()[1])\n            events.append(('die', price))\n\n    total_shares = 0\n    total_price = 0\n    total_profit = 0\n    for event in events:\n        if event[0] == 'buy':\n            total_shares += event[1]\n            total_price += event[1] * event[2]\n        elif event[0] =='sell':\n            total_shares -= event[1]\n            total_price -= event[1] * event[2]\n            total_profit += event[1] * event[2]\n        elif event[0] =='split':\n            total_shares += event[1]\n            total_price += event[1] * (total_price / total_shares)\n        elif event[0] =='merge':\n            total_shares -= event[1]\n            total_price -= event[1] * (total_price / total_shares)\n        elif event[0] == 'die':\n            total_price -= event[1]\n            total_profit += event[1]\n\n    tax_rate = 0.3\n    tax_amount = total_profit * tax_rate\n    final_price = total_price + tax_amount\n    return f'{final_price:.2f}'",
        "num_ids": 436
    },
    {
        "number": 4983,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    y = 0\n    while x > 0:\n        y = y * 10 + x % 10\n        x //= 10\n    return str(y)",
        "num_ids": 47
    },
    {
        "number": 4984,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split()[0].split())\n    grid = [list(row) for row in stdin.split()[1:]]\n\n    def dfs(i, j, visited):\n        if (i, j) in visited:\n            return 0\n        visited.add((i, j))\n\n        if grid[i][j] == 'L':\n            return 1\n\n        up = dfs(i - 1, j, visited)\n        down = dfs(i + 1, j, visited)\n        left = dfs(i, j - 1, visited)\n        right = dfs(i, j + 1, visited)\n\n        return min(up, down, left, right)\n\n    islands = 0\n    visited = set()\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 'L':\n                islands += dfs(i, j, visited)\n\n    return str(islands)",
        "num_ids": 210
    },
    {
        "number": 4985,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, B = map(int, stdin.split())\n    hands = []\n    for _ in range(N):\n        cards = input().split()\n        hand = []\n        for card in cards:\n            number, suit = card\n            if suit == B:\n                value = 11\n            else:\n                value = {\n                    'A': 11,\n                    'K': 4,\n                    'Q': 3,\n                    'J': 20,\n                    'T': 10,\n                    '9': 14,\n                    '8': 0,\n                    '7': 0\n                }[number]\n            hand.append((number, value))\n        hands.append(hand)\n    points = sum(sum(hand) for hand in hands)\n    return str(points)",
        "num_ids": 168
    },
    {
        "number": 4986,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s = s.lower()\n    t = t.lower()\n    sticky_keys = set()\n\n    for i, (key, char) in enumerate(zip(s, t)):\n        if key!= char:\n            sticky_keys.add(key)\n\n    return ''.join(sticky_keys)",
        "num_ids": 75
    },
    {
        "number": 4987,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, C, K = map(int, stdin.split())\n    D = list(map(int, stdin.split()[1:]))\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def color_difference(a, b):\n        return abs(a - b)\n\n    def count_machines(D, C, K):\n        machines = []\n        for i in range(len(D)):\n            for j in range(i + 1, len(D)):\n                if color_difference(D[i], D[j]) <= K:\n                    machines.append((i, j))\n                    break\n        return len(machines)\n\n    def wash_machine(D, C, K):\n        machines = count_machines(D, C, K)\n        if machines == 0:\n            return 0\n        else:\n            return lcm(C, machines)\n\n    return str(wash_machine(D, C, K))",
        "num_ids": 235
    },
    {
        "number": 4988,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.split()[0])\n    for _ in range(T):\n        N = int(stdin.split()[1])\n        result = 0\n        while N > 0:\n            result += N % 10\n            N //= 10\n        print(result)",
        "num_ids": 63
    },
    {
        "number": 4989,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *pieces = map(int, stdin.split())\n    alice_pieces = []\n    bob_pieces = []\n    for piece in pieces:\n        if piece % 2 == 0:\n            alice_pieces.append(piece)\n        else:\n            bob_pieces.append(piece)\n    alice_sum = sum(alice_pieces)\n    bob_sum = sum(bob_pieces)\n    return f\"{alice_sum} {bob_sum}\"",
        "num_ids": 99
    },
    {
        "number": 4990,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, k, g = map(int, stdin.split())\n    days = 0\n    while True:\n        days += 1\n        if days % 2 == 0:\n            b -= 1\n            if b == 0:\n                break\n        else:\n            k -= 1\n            if k == 0:\n                break\n    return str(days)",
        "num_ids": 77
    },
    {
        "number": 4991,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    elif n % 2 == 0:\n        return str(n) + solution(n // 2)\n    else:\n        return str(n) + solution(3 * n + 1)",
        "num_ids": 63
    },
    {
        "number": 4992,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *s = map(int, stdin.split())\n    if n < 2 or n > 30:\n        return \"impossible\"\n\n    students_per_room = [0] * n\n    for i in range(n):\n        students_per_room[i] = s[i]\n\n    visited_rooms = set()\n    visited_rooms.add(0)\n    rooms_to_visit = [0] * n\n    rooms_to_visit[0] = 1\n\n    while rooms_to_visit:\n        room = rooms_to_visit.pop(0)\n        if room not in visited_rooms:\n            visited_rooms.add(room)\n            students_in_room = students_per_room[room]\n            if students_in_room > 0:\n                students_per_room[room] = 0\n                for i in range(n):\n                    if students_per_room[i] > 0:\n                        if i == room:\n                            students_per_room[i] -= 1\n                        else:\n                            rooms_to_visit.append(i)\n                            students_per_room[i] -= 1\n\n    if any(students_per_room):\n        return \"impossible\"\n\n    return \" \".join(map(str, visited_rooms))\n",
        "num_ids": 282
    },
    {
        "number": 4993,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    parts, days = map(int, stdin.split())\n    parts_dict = {}\n    for i in range(parts):\n        parts_dict[stdin.split()[i]] = i + 1\n\n    for i in range(days):\n        if parts_dict[stdin.split()[i]] == parts:\n            return str(i + 1)\n\n    return \"paradox avoided\"",
        "num_ids": 86
    },
    {
        "number": 4994,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    points = [tuple(map(int, line.split())) for line in stdin.split('\\n')[:-1]]\n    x1, y1 = points[0]\n    x2, y2 = points[1]\n    x3, y3 = points[2]\n    x4 = (x1 + x2 + x3) / 2\n    y4 = (y1 + y2 + y3) / 2\n    return f\"{x4} {y4}\"",
        "num_ids": 105
    },
    {
        "number": 4995,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    observations = []\n    for _ in range(n):\n        minutes, seconds = map(int, stdin.split()[1].split())\n        observations.append((minutes, seconds))\n    total_minutes = sum(minutes for minutes, _ in observations)\n    total_seconds = sum(seconds for _, seconds in observations)\n    average_length = total_seconds / total_minutes\n    if average_length <= 1:\n        return \"measurement error\"\n    return f\"{average_length:.7f}\"",
        "num_ids": 117
    },
    {
        "number": 4996,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    encrypted_message, key = stdin.split()\n    encrypted_message = encrypted_message.upper()\n    key = key.upper()\n\n    decrypted_message = \"\"\n    for i in range(len(encrypted_message)):\n        if i % 2 == 0:\n            decrypted_message += chr((ord(encrypted_message[i]) - ord('A') + ord(key[i % len(key)])) % 26 + ord('A'))\n        else:\n            decrypted_message += chr((ord(encrypted_message[i]) - ord('A') - ord(key[i % len(key)])) % 26 + ord('A'))\n\n    return decrypted_message",
        "num_ids": 146
    },
    {
        "number": 4997,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    moves = list(stdin)\n    ball_index = moves.index('B')\n    ball_index = (ball_index + 1) % 3\n    return str(ball_index)",
        "num_ids": 43
    },
    {
        "number": 4998,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    a, b, c, d = map(int, stdin.split())\n\n    # calculate the largest area\n    area = max(a * b, c * d, a * d, b * c)\n\n    return str(area)",
        "num_ids": 55
    },
    {
        "number": 4999,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    count = 0\n    while a!= b:\n        if a % 2 == 0:\n            a //= 2\n        else:\n            a += 1\n        count += 1\n    return str(count)",
        "num_ids": 60
    }
]