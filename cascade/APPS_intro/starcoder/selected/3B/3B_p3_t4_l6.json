[
    {
        "number": 4000,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    graph = []\n    for i in range(1, n):\n        a, b = map(int, stdin.split()[i].split(','))\n        graph.append((a - 1, b - 1))\n\n    def dfs(node, visited):\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                dfs(neighbor, visited)\n\n    max_edges = 0\n    max_path = []\n    for node in range(n):\n        if node not in visited:\n            dfs(node, visited)\n            if len(visited) == n - 1:\n                max_edges = max(max_edges, len(max_path))\n                max_path.append(node)\n\n    a, b, c = max_path\n    return f\"{max_edges}\\n{a + 1} {b + 1} {c + 1}\"\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 1224,
        "indeed": false
    },
    {
        "number": 4001,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = sorted(list(map(int, stdin.split()[1].split())))\n    x, y = divisors(d, n)\n    return f\"{x} {y}\"\n\n\ndef",
        "test": "assert solution(input()) == \"20 8\"",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 4002,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    matrix = []\n    \n    for i in range(n):\n        row = list(map(int, stdin.split()))\n        matrix.append(row)\n    \n    def max_sum(row):\n        sums = [0] * m\n        for j in range(m):\n            if j <= len(row) // 2:\n                sums[j] = row[j]\n            else:\n                sums[j] = row[j] - matrix[i][j]\n        return sum(sums) % k\n    \n    max_sum_row = max(max_sum(row) for row in matrix)\n    result = max_sum_row\n    \n    return str(result)",
        "test": "assert solution(\"\"\"",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 4003,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    max_length = 1\n    longest_sequence = [a[0]]\n    \n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            max_length += 1\n            longest_sequence.append(a[i])\n        else:\n            max_length = 1\n            longest_sequence = [a[i]]\n    \n    return str(max_length) + ''.join(['L' if a[0] <= i <= a[-1] else 'R' for i in range(max_length)])",
        "test": "assert solution(\"4\\n1 2 4 3\") == \"4\\nLLRR\"",
        "num_ids": 887,
        "indeed": false
    },
    {
        "number": 4004,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    result = 0\n\n    for i in range(n):\n        diff = a[i] - i + 1\n        if diff > result:\n            result = diff\n\n    return str(result) if result >= 0 else -1\n",
        "test": "assert solution(input(\"Input\\n\")) == \"Output\\n\", \"Invalid test format\"",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 4005,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n\n    is_visible = False\n\n    for x in range(x1, x2):\n        for y in range(y1, y2):\n            if is_visible:\n                break\n            for x3, y3, x4, y4, x5, y5, x6, y6 in [(x3, y3, x4, y4, x5, y5, x6, y6), (x5, y5, x6, y6, x3, y3, x4, y4)]:\n                if 0 <= x3 <= x4 <= x6 <= 1000000 and 0 <= y3 <= y4 <= y6 <= 1000000:\n                    is_visible = True\n                    break\n\n    if is_visible:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(input()) == \"YES\"",
        "num_ids": 1126,
        "indeed": false
    },
    {
        "number": 4006,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    seen = set()\n\n    def is_reachable(x):\n        nonlocal count\n        nonlocal seen\n        if x in seen:\n            return False\n        seen.add(x)\n        y = f(x)\n        if y == x:\n            return True\n        count += 1\n        return is_reachable(y)\n\n    def f(x):\n        while x % 10 == 0:\n            x = x // 10\n        return x + 1\n\n    is_reachable(n)\n    return str(count)\n",
        "test": "assert solution(\"10\") == \"19\"",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 4007,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, *friends = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        f = friends[i - 1]\n        if f!= 0:\n            graph[f].append(i)\n            graph[i].append(f)\n\n    queue = [(1, 0)]\n    visited = set()\n    result = []\n\n    while queue:\n        node, depth = queue.pop(0)\n        if node in visited:\n            continue\n        visited.add(node)\n\n        if node == n:\n            if len(result) == len(friends) - 1:\n                return \" \".join(map(str, result))\n            continue\n\n        for friend in graph[node]:\n            if friend not in visited:\n                queue.append((friend, depth + 1))\n\n        result.append(depth)\n\n    return \" \".join(map(str, result))",
        "test": "assert solution(\"5\\n2 1 0 0 0\\n\") == \"2 1 4 5 3\"",
        "num_ids": 935,
        "indeed": false
    },
    {
        "number": 4008,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    colors = set()\n    for num in a:\n        if num not in colors:\n            colors.add(num)\n\n    if len(colors) < k:\n        return \"NO\"\n\n    counts = [0] * k\n    for num in a:\n        counts[colors.index(num)] += 1\n\n    for i in range(k):\n        if counts[i] < 1:\n            return \"NO\"\n        for j in range(i + 1, k):\n            if counts[j] > 0:\n                return \"NO\"\n\n    result = [0] * k\n    colors = list(colors)\n    for num in a:\n        result[colors.index(num)] = num\n        colors.remove(num)\n\n    return \"YES\" + \" \".join(map(str, result))\n\ndef",
        "test": "assert solution(\"5 2\\n2 1 1 2 1\\n\") == \"NO\\n\"",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 4009,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    decimal_number = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(n):\n        if decimal_number[i] == 1:\n            decimal_number[i] = 0\n            count += 1\n            break\n    for i in range(n-1, -1, -1):\n        if decimal_number[i] == 0:\n            decimal_number[i] = 1\n            count += 1\n            break\n    for i in range(n):\n        decimal_number[i] *= 2\n    if decimal_number[-1] == 0:\n        decimal_number.pop()\n    decimal_number.reverse()\n    decimal_number = int(''.join(map(str, decimal_number)))\n    result = 0\n    while decimal_number % 10 == 0:\n        decimal_number //= 10\n        result += 1\n    decimal_number = (decimal_number * x) % (10 ** y)\n    result += decimal_number // (10 ** y)\n    return str(result)",
        "test": "assert solution(\"\"\"11 5 1",
        "num_ids": 1103,
        "indeed": false
    },
    {
        "number": 4010,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2:2+n]))\n        result = \"NO\"\n        for i in range(len(a) - 2):\n            if a[i] == a[-i-1]:\n                for j in range(i+1, len(a) - 1):\n                    if a[j] == a[-j-1]:\n                        for k in range(j+1, len(a)):\n                            if a[k] == a[-k-1]:\n                                result = \"YES\"\n                                break\n                        if result == \"YES\":\n                            break\n                    if result == \"YES\":\n                        break\n                if result == \"YES\":\n                    break\n            if result == \"YES\":\n                break\n        if result == \"YES\":\n            print(\"YES\")\n        else:\n            print(\"NO\")",
        "test": "assert solution(input()) == \"NO\"",
        "num_ids": 721,
        "indeed": false
    },
    {
        "number": 4011,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = int(stdin.split()[1])\n    f = stdin.split()[2:]\n    f = [int(x) for x in f]\n\n    def map_digit(digit: int) -> int:\n        if digit == 0:\n            return f[0]\n        else:\n            return f[digit - 1]\n\n    def replace_digits(a: int, f: List[int]) -> int:\n        max_digit = 9\n        while max_digit > 0:\n            index = 0\n            while a >= 10 ** index:\n                index += 1\n            max_digit = index\n            a %= 10 ** index\n\n        result = 0\n        for i in range(n - 1, -1, -1):\n            digit = a // 10 ** i\n            result += f[digit - 1] * (10 ** i)\n            a %= 10 ** i\n        return result\n\n    result = replace_digits(a, f)\n    return str(result)\n\ndef",
        "test": "assert solution(\"\"\"4",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 4012,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    res = []\n\n    for _ in range(t):\n        a, b, c = map(int, stdin.split('\\n')[1].split())\n        A = min(a, b, c)\n        B = max(a, b, c)\n        C = (A * B // C) % B\n        count = 0\n\n        while B % A!= 0:\n            if B % A == 1:\n                B += 1\n            else:\n                B -= 1\n            count += 1\n\n        if count < res or (count == res and (C < A or A < C)):\n            res = count\n            print(A, B, C)\n        elif count == res and (C == A or A == C):\n            print(A, B, C)\n        else:\n            continue\n\n    return''.join(map(str, res))",
        "test": "assert solution(open('input.txt').read()) == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48'",
        "num_ids": 1002,
        "indeed": false
    },
    {
        "number": 4013,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    min_instability = float('inf')\n\n    for i in range(n):\n        min_instability = min(min_instability, a[i] - min(a))\n        min_instability = min(min_instability, max(a) - a[i])\n\n    return str(min_instability)",
        "test": "assert solution(\"2\\n1 100000\\n\") == \"0\"",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 4014,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    exams = []\n\n    for _ in range(m):\n        s, d, c = map(int, stdin.split())\n        exams.append((s, d, c))\n\n    exams.sort(key=lambda x: (x[0], x[1]))\n\n    activities = [0] * (n + 1)\n    available_days = [0] * n\n\n    for i, exam in enumerate(exams):\n        s, d, c = exam\n        for j in range(s, d):\n            activities[j] += 1\n            available_days[j] += c\n\n    has_exam_days = False\n    for day in activities:\n        if day > 0:\n            has_exam_days = True\n            break\n\n    if not has_exam_days:\n        return -1\n\n    activities.append(0)\n\n    for i in range(n, 0, -1):\n        if activities[i] > 0:\n            break\n\n    for day in range(n, 0, -1):\n        if activities[day] > 0:\n            break\n\n    for i in range(n, 0, -1):\n        if activities[i] > 0:\n            break\n\n    schedule = [0] * (m + 1)\n    current_exam = 0\n\n    for day in range(n, 0, -1):\n        if activities[day] == 0:\n            activities[day] = 1\n            schedule[current_exam] = day\n            current_exam = 0\n            break\n\n        if current_exam == 0:\n            current_exam = 1\n            activities[day] -= 1\n            available_days[day] -= 1\n\n    if current_exam > 0:\n        return -1\n\n    for i in range(m):\n        for day in range(exams[i][0], exams[i][1]):\n            if activities[day] > 0:\n                activities[day] -= 1\n                available_days[day] -= 1\n\n    return [schedule[i] for i in range(m + 1)]\n\n\ndef",
        "test": "assert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\\n\") == \"2 2 2 1 1 0 4 3 4 4\"",
        "num_ids": 1464,
        "indeed": false
    },
    {
        "number": 4015,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    moves = 0\n    while n!= m:\n        if n % 2 == 0:\n            n *= 2\n        else:\n            n *= 3\n        moves += 1\n    if n == m:\n        return str(moves)\n    return \"-1\"",
        "test": "assert solution(\"42 42\") == \"0\"",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 4016,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.split()[1]\n    \n    def construct_substring(start: int) -> str:\n        result = \"\"\n        for i in range(start, len(t), n):\n            if t[i:i + n] == t:\n                result += t[i:i + n]\n        return result\n    \n    def construct_substrings() -> str:\n        result = \"\"\n        for i in range(len(t) - n + 1):\n            result += construct_substring(i)\n        return result\n    \n    return construct_substrings()",
        "test": "assert solution(\"3 2\\ncat\\n\") == \"catcat\"",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 4017,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:n+1]))\n    \n    k = 0\n    for i in range(n):\n        sum_elements = sum(a)\n        if a[i] == sum_elements:\n            a.pop(i)\n            k += 1\n        else:\n            a.pop(i)\n    \n    if k == 0:\n        print(0)\n    else:\n        print(k)\n        for j in range(n-k):\n            print(n-j-1)",
        "test": "assert solution(input()) == \"0\\n\"",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 4018,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n\n    if k > len(set(s)):\n        return -1\n\n    def backtrack(index, subsequence, cost, current_set):\n        if current_set.size() == k:\n            return cost\n\n        for i in range(index, n):\n            if i!= index and s[i] == s[index]:\n                continue\n            subsequence += s[i]\n            current_set.add(subsequence)\n            if current_set.size() > k:\n                current_set.remove(subsequence)\n            cost += n - len(subsequence)\n            backtrack(i + 1, subsequence, cost, current_set)\n            subsequence = current_set.pop()\n\n    current_set = set()\n    backtrack(0, \"\", 0, current_set)\n\n    if len(current_set)!= k:\n        return -1\n\n    return min(cost for subsequence, cost in current_set)",
        "test": "assert solution(\"10 100\\najihiushda\") == \"233\"",
        "num_ids": 914,
        "indeed": false
    },
    {
        "number": 4019,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        edges.append((v, u))\n\n    graph = [[0] * (n + 1) for _ in range(n + 1)]\n    for v, u in edges:\n        graph[v][u] = graph[u][v] = 1\n\n    colors = [0] * (n + 1)\n    def dfs(u):\n        colors[u] = 1\n        for v in range(1, n + 1):\n            if graph[u][v] and colors[v] == 0:\n                dfs(v)\n\n    def find(u):\n        if u == par[u]:\n            return u\n        return find(par[u])\n\n    def union(u, v):\n        u = find(u)\n        v = find(v)\n        if u!= v:\n            par[u] = v\n\n    def is_connected(u):\n        return find(u) == find(root)\n\n    def build_spanning_tree():\n        global root\n        for u in range(1, n + 1):\n            for v in range(1, n + 1):\n                if graph[u][v]:\n                    union(u, v)\n        root = find(1)\n\n    build_spanning_tree()\n    for u in range(1, n + 1):\n        if colors[u] == 0 and graph[u][root]:\n            return \"NO\"\n\n    if is_connected(1):\n        print(\"YES\")\n        for u in range(1, n + 1):\n            if colors[u] == 0:\n                for v in range(1, n + 1):\n                    if graph[u][v] and colors[v] == 0:\n                        print(f\"{u} {v}\")\n                        break\n                break\n    else:\n        print(\"NO\")\n\n    return \"\"\n\n\ntest_cases = [\n    \"4 5 1\",\n    \"1 2\",\n    \"1 3\",\n    \"1 4\",\n    \"2 3\",\n    \"3 4\",\n    \"4 4 3\",\n    \"1 2\",\n    \"1 4\",\n    \"2 3\",\n    \"3 4\",\n    \"4 3 2\",\n    \"1 2\",\n    \"1 3\",\n    \"2 3\",\n    \"3 4\",\n]\n\nfor test_case in test_cases:\n    print(solution(test_case))",
        "test": "assert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\\n\") == \"NO\\n\"",
        "num_ids": 1307,
        "indeed": false
    },
    {
        "number": 4020,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split()[0].split(':'))\n    h2, m2 = map(int, stdin.split()[1].split(':'))\n    if m1 % 2 == 0 and m2 % 2 == 0 and m2 - m1 >= 2:\n        h3 = (h1 + h2) // 2\n        m3 = (m1 + m2) // 2\n        return f\"{h3:02}:{m3:02}\"\n    else:\n        return \"INVALID\"",
        "test": "assert solution('11:10\\n11:12') == '11:11'",
        "num_ids": 694,
        "indeed": false
    },
    {
        "number": 4021,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a <= 64:\n        return str(a * 2)\n    else:\n        return str(a * 3)",
        "test": "assert solution(\"42\") == \"6\"",
        "num_ids": 1107,
        "indeed": false
    },
    {
        "number": 4022,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    segments = []\n    for i in range(n):\n        line = stdin.split()\n        segments.append((int(line[0]), int(line[1])))\n    segments.sort(key=lambda x: x[0])\n\n    def merge_intervals(intervals: list):\n        result = [intervals[0]]\n        for interval in intervals[1:]:\n            if interval[0] > result[-1][1]:\n                result.append(interval)\n            else:\n                result[-1] = (result[-1][0], max(result[-1][1], interval[1]))\n        return result\n\n    def find_max_length(intervals: list):\n        max_length = 0\n        for interval in intervals:\n            max_length = max(max_length, interval[1] - interval[0] + 1)\n        return max_length\n\n    def remove_segment(intervals: list, i: int):\n        intervals[i] = (intervals[i][1], intervals[i][1])\n        return merge_intervals(intervals)\n\n    def intersect(intervals: list):\n        return merge_intervals(intervals)\n\n    intervals = [(0, 10**9)]\n    for i in range(n):\n        intervals = remove_segment(intervals, i)\n        if len(intervals) == 1:\n            return str(intervals[0][1] - intervals[0][0] + 1)\n        if len(intervals) == 0:\n            return \"0\"\n\n    max_length = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            intervals = intersect(intervals)\n            max_length = max(max_length, find_max_length(intervals))\n            intervals = remove_segment(intervals, i)\n            intervals = remove_segment(intervals, j)\n\n    return str(max_length)",
        "test": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\\n\") == \"1\"",
        "num_ids": 2043,
        "indeed": false
    },
    {
        "number": 4023,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    stack = []\n    current_height = 1\n    \n    for i in range(1, n):\n        if current_height == a[i]:\n            stack.append(i)\n        elif current_height == a[i - 1]:\n            if len(stack) > 0:\n                stack.pop()\n            current_height += 1\n            i -= 1\n        else:\n            break\n    \n    if len(stack) > 0:\n        return \"NO\"\n    else:\n        return \"YES\"",
        "test": "assert solution(\"2\\n10 10\\n\") == \"YES\"",
        "num_ids": 564,
        "indeed": false
    },
    {
        "number": 4024,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n\n    def subsequences(s: str, k: int, result: set[str]) -> None:\n        if len(result) == k:\n            return\n        if len(s) == 0:\n            return\n        for i in range(1, len(s) + 1):\n            subsequences(s[i:], k, result)\n\n    def subsequence_cost(t: str, s: str) -> int:\n        if not t:\n            return 0\n        i = 0\n        for c in t:\n            if c == s[i]:\n                i += 1\n            if i == len(t):\n                return 0\n        return len(t) - i\n\n    S = set()\n    subsequences(s, k, S)\n\n    if not S:\n        return -1\n\n    total_cost = sum(subsequence_cost(t, s) for t in S)\n    return str(total_cost)\n",
        "test": "assert solution(\"aaaaa\") == \"-1\"",
        "num_ids": 802,
        "indeed": false
    },
    {
        "number": 4025,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == 0:\n        return \"1\"\n    elif a + b + c == 100:\n        return \"7\"\n    else:\n        days = [0, 0, 0, 0, 0]\n        for i in range(5):\n            if i == 0:\n                days[i] = max(days[i], 1)\n            else:\n                days[i] = max(days[i - 1], days[i - 2] + 1)\n            if days[i] > 3:\n                break\n        return str(days[i])",
        "test": "assert solution(\"1 100 1\\n\") == \"3\"",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 4026,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0].split())\n    tiles = []\n    for i in range(n):\n        tile = list(map(int, stdin.split()[1 + 2 * i].split()))\n        tiles.append(tile)\n\n    for i in range(n):\n        for j in range(m):\n            if i > j:\n                tiles[i][j], tiles[j][i] = tiles[j][i], tiles[i][j]\n\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                tiles[i][j] = 0\n\n    return \"YES\" if all(len(row) == m for row in tiles) else \"NO\"\n\n\ndef",
        "test": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 1\") == \"YES\\nNO\\nYES\\nNO\\nYES\\nYES\"",
        "num_ids": 1737,
        "indeed": false
    },
    {
        "number": 4027,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    i = 0\n    j = 0\n    min_diff = float('inf')\n    for num in a:\n        if i == 0:\n            diff = 0\n        else:\n            diff = abs(a[i] - a[j])\n        min_diff = min(min_diff, diff)\n        if i == j:\n            if i == 0:\n                i += 1\n            else:\n                j += 1\n        elif i < j:\n            i += 1\n        else:\n            j += 1\n    return str(min_diff)",
        "test": "assert solution('3') == '0'",
        "num_ids": 546,
        "indeed": false
    },
    {
        "number": 4028,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    MOD = 10**9 + 7\n    MOD_INV = pow(MOD, MOD - 2, MOD)\n    MOD_INV_2 = pow(MOD_INV, 2, MOD)\n\n    def get_pattern(s: str, pattern_length: int) -> int:\n        total = 1\n        for i in range(len(s) - pattern_length + 1):\n            pattern = s[i:i + pattern_length]\n            if pattern == '(((' or pattern == '(()' or pattern == '(())' or pattern == '())':\n                total = (total * (i + 1)) % MOD\n        return total\n\n    def get_count(pattern_length: int) -> int:\n        count = 0\n        for i in range(n + 1):\n            count = (count + get_pattern(s, pattern_length)) % MOD\n        return count\n\n    return str((get_count(2) * get_count(2)) % MOD)",
        "test": "assert solution(\"((((\") == \"0\"",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 4029,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25!= 0:\n        return str(n)\n\n    moves = 0\n    while True:\n        if n % 10!= 0:\n            n *= 10\n            moves += 1\n            if n % 10 == 0:\n                n //= 10\n        else:\n            n //= 10\n            moves += 1\n\n        if n % 25 == 0:\n            return str(moves)\n\n    return -1",
        "test": "assert solution(\"1241367\") == \"-1\"",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 4030,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    \n    # initialize the array of colors\n    colors = [0] * n\n    \n    # use the same color for adjacent characters with different colors\n    for i in range(1, n):\n        if s[i]!= s[i - 1]:\n            colors[i] = colors[i - 1] + 1\n    \n    # use the same color for adjacent characters with the same color\n    for i in range(1, n - 1):\n        if colors[i] == colors[i - 1] and colors[i] == colors[i + 1]:\n            colors[i] = colors[i - 1]\n    \n    # find the minimum number of colors required to sort the string\n    min_colors = n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if colors[i] == colors[j]:\n                min_colors = min(min_colors, colors[i] + 1)\n    \n    # print the minimum number of colors\n    print(min_colors)\n    \n    # print the coloring\n    coloring = [0] * n\n    for i in range(n - 1, -1, -1):\n        if colors[i] == min_colors:\n            coloring[i] = min_colors\n            min_colors -= 1\n        else:\n            coloring[i] = colors[i]\n    \n    # print the coloring\n    print(' '.join(map(str, coloring)))\n    \n    return''.join(map(str, coloring))",
        "test": "assert solution(\"abcde\") == \"1\\n1 1 1 1 1\"",
        "num_ids": 1051,
        "indeed": false
    },
    {
        "number": 4031,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def is_substring(s1: str, s2: str) -> bool:\n        if len(s2) > len(s1):\n            return False\n        return s2 in s1\n\n    def find_substrings(s: str) -> List[str]:\n        result = []\n        for i in range(len(s)):\n            for j in range(i + 1, len(s) + 1):\n                result.append(s[i:j])\n        return result\n\n    n = int(stdin.split('\\n')[0])\n    strings = stdin.split('\\n')[1:]\n\n    substrings = [find_substrings(s) for s in strings]\n    substrings = list(set(substrings))\n\n    for i in range(len(substrings)):\n        for j in range(i + 1, len(substrings)):\n            if is_substring(substrings[i], substrings[j]):\n                substrings[j] = substrings[i] + substrings[j]\n\n    if substrings:\n        return 'YES\\n' + '\\n'.join(substrings)\n    else:\n        return 'NO\\n'\n",
        "test": "assert solution(\"3\\nq\\nq\\nq\\n\") == \"YES\\nq\\nq\\nq\\n\"",
        "num_ids": 974,
        "indeed": false
    },
    {
        "number": 4032,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    left_end = 0\n    right_end = n - 1\n    count = 0\n    \n    while left_end <= right_end and count < n:\n        if a[left_end] <= k:\n            count += 1\n            left_end += 1\n        else:\n            left_end += 1\n    \n    while left_end <= right_end and count < n:\n        if a[right_end] <= k:\n            count += 1\n            right_end -= 1\n        else:\n            right_end -= 1\n    \n    return str(count)\n\nstdin = \"\"\"\n8 4\n4 2 3 1 5 1 6 4\n\"\"\"\n\nprint(solution(stdin))  # Output: 5\n\nstdin = \"\"\"\n5 2\n3 1 2 1 3\n\"\"\"\n\nprint(solution(stdin))  # Output: 0\n\nstdin = \"\"\"\n5 100\n12 34 55 43 21\n\"\"\"\n\nprint(solution(stdin))  # Output: 5",
        "test": "assert solution(\"\"\"",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 4033,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    a, b = map(int, stdin.split())\n    \n    # generate all possible colorings\n    colorings = [[0] * (a + b + 1) for _ in range(a + b + 1)]\n    \n    # fill in the colorings\n    for i in range(1, a + b + 1):\n        colorings[0][i] = 1\n    \n    for i in range(1, a + 1):\n        for j in range(1, b + 1):\n            for k in range(i + j, a + b + 1):\n                colorings[i][k] = colorings[i][k - i] + colorings[j][k - j]\n    \n    # find the minimal perimeter\n    min_perimeter = float('inf')\n    for i in range(1, a + b + 1):\n        for j in range(1, a + b + 1):\n            if j - i >= a:\n                perimeter = (j - i) * (colorings[i][j] * colorings[i][j] + colorings[i][j - 1] * colorings[i][j - 1])\n                if perimeter < min_perimeter:\n                    min_perimeter = perimeter\n    \n    return str(min_perimeter)",
        "test": "assert solution(\"3 6\") == \"12\", \"Test failed\"",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 4034,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    \n    first_color = 0\n    second_color = 1\n    \n    # Find the first and second color\n    for char in s:\n        if char == '0':\n            first_color += 1\n        else:\n            second_color += 1\n    \n    # Check if it is impossible to color the string\n    if first_color == n or second_color == n:\n        return \"NO\"\n    \n    # Find the first and second swaps\n    swaps = 0\n    for i in range(n-1):\n        if s[i] == '0' and s[i+1] == '1':\n            s = s[:i] + '0' + s[i+2:]\n            swaps += 1\n        elif s[i] == '1' and s[i+1] == '0':\n            s = s[:i] + '1' + s[i+2:]\n            swaps += 1\n        else:\n            continue\n    \n    return \"YES\", ''.join(str(first_color) if char == '0' else str(second_color) for char in s)",
        "test": "assert solution('5\\abcde') == 'YES\\n00000\\ndef solution(stdin: str) -> str: pass'",
        "num_ids": 875,
        "indeed": false
    },
    {
        "number": 4035,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c_tax_rates = [0.08, 0.1]\n    min_price = float('inf')\n    for rate in c_tax_rates:\n        price = a * (1 + rate) - b\n        if price > 0:\n            min_price = min(min_price, price)\n    if min_price == float('inf'):\n        return -1\n    return min_price",
        "test": "assert solution(\"2 2\") == \"25\"",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 4036,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [1] * k\n    for i in range(k - 1):\n        a[i + 1] = min(2 * a[i], a[i] + 1)\n    if sum(a)!= n:\n        return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, a))",
        "test": "assert solution(\"1 1\") == \"YES\\n1\"",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 4037,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a, b = map(int, input().split())\n    max_size = 0\n    best_order = []\n    for i in range(n):\n        ai, bi = map(int, input().split())\n        if ai <= r:\n            max_size = max(max_size, ai)\n            best_order.append(i)\n    max_size += b * max_size\n    return str(max_size)",
        "test": "assert solution(\"3 2\\n300 -300\\n1 299\\n1 123\\n\") == \"3\"",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 4038,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    numbers = [int(x) for x in stdin.split()[1:]]\n    rows = len(numbers)\n    cols = len(numbers) ** 0.5\n\n    # Check if the matrix is palindromic\n    def check_palindromic(matrix, i, j):\n        for x, y in [(i, j), (i, -j), (-i, j), (-i, -j)]:\n            if 0 <= x < rows and 0 <= y < cols and matrix[x][y]!= matrix[i][j]:\n                return False\n        return True\n\n    # Check if the matrix has all numbers\n    def check_used_numbers(matrix, used):\n        for row in matrix:\n            if sum(row)!= len(row):\n                return False\n        for col in range(cols):\n            used_numbers = [0] * len(matrix)\n            for row in matrix:\n                used_numbers[row.index(used[col])] += 1\n            if used_numbers!= [1] * len(matrix):\n                return False\n        return True\n\n    used_numbers = [0] * len(numbers)\n    for i in range(rows):\n        for j in range(cols):\n            if not used_numbers[numbers.index(numbers[i * cols + j])]:\n                if check_palindromic(numbers, i, j):\n                    if check_used_numbers(numbers, used_numbers):\n                        return \"YES\"\n                used_numbers[numbers.index(numbers[i * cols + j])] = 1\n\n    return \"NO\"\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 1415,
        "indeed": false
    },
    {
        "number": 4039,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n\n    projects.sort(key=lambda x: x[1])\n    prev_change = 0\n\n    for a, b in projects:\n        if r + prev_change < a:\n            return \"NO\"\n        r += b - prev_change\n        prev_change = b\n\n    return \"YES\"",
        "test": "assert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"",
        "num_ids": 795,
        "indeed": false
    },
    {
        "number": 4040,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    def is_platform(x, c):\n        left, right = 0, 0\n        for i in range(1, m + 1):\n            if i == x:\n                right = c[i - 1]\n            elif c[i - 1] + right > left:\n                return False\n            left += c[i - 1]\n        return True\n\n    def platform_index(x, c):\n        left, right = 0, 0\n        for i in range(1, m + 1):\n            if i == x:\n                right = c[i - 1]\n            elif c[i - 1] + right > left:\n                return i\n            left += c[i - 1]\n        return None\n\n    n, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n\n    platforms = []\n    for i in range(1, m + 1):\n        platforms.append(platform_index(i, c))\n\n    if d == 1:\n        start = 1\n        end = n + 1\n    else:\n        start = 0\n        end = n + 2\n\n    positions = []\n    visited = set()\n\n    def bfs(start, end):\n        queue = deque([start])\n        while queue:\n            pos = queue.popleft()\n            if pos not in visited:\n                visited.add(pos)\n                if pos == end:\n                    return True\n                for i in range(d + 1):\n                    if i == d and (pos == n or pos == 0):\n                        continue\n                    new_pos = pos + i\n                    if new_pos not in visited:\n                        visited.add(new_pos)\n                        queue.append(new_pos)\n        return False\n\n    for i in range(start, end):\n        if i in visited:\n            continue\n        if is_platform(i, c):\n            positions.append(i)\n            visited.add(i)\n        if bfs(i, end):\n            positions.append(i)\n            visited.add(i)\n            break\n\n    if len(positions)!= end - start:\n        return \"NO\"\n\n    a = []\n    for i in range(end):\n        if i in positions:\n            a.append(positions.index(i) + 1)\n        else:\n            a.append(0)\n\n    return \"YES\\n\" + \" \".join(map(str, a))\n\n\ndef",
        "test": "assert solution(\"10 1 5\\n2\\n\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\\n\"",
        "num_ids": 1467,
        "indeed": false
    },
    {
        "number": 4041,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    t_set = set(t)\n\n    s_len = len(s)\n    for l in range(1, s_len + 1):\n        for r in range(l, s_len + 1):\n            if s[l:r] == t:\n                if t_set.issubset(s[l:r]):\n                    return l",
        "test": "assert solution(stdin=\"\\n\".join([",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 4042,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = int(x * 100000)\n    b = a // 100000\n    c = a % 100000\n    return f\"{b} {c}\"\n\ndef",
        "test": "assert solution(\"4.024922\") == \"9 9\"",
        "num_ids": 959,
        "indeed": false
    },
    {
        "number": 4043,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    \n    if d > n * (n - 1):\n        return \"NO\"\n    \n    edges = set()\n    visited = set()\n    queue = []\n    queue.append((0, 1))\n    \n    while queue:\n        u, degree = queue.pop(0)\n        \n        if u not in visited:\n            visited.add(u)\n            \n            for v in range(u + 1, n + 1):\n                if (v - 1, u) not in edges and (u, v - 1) not in edges:\n                    degree += 1\n                    \n                    if degree > k:\n                        return \"NO\"\n                    \n                    edges.add((u, v))\n                    \n                    if u!= v - 1:\n                        queue.append((v, degree))\n    \n    return \"YES\"\n\nprint(solution(\"6 3 3\\n\")) # YES\nprint(solution(\"6 2 3\\n\")) # NO\nprint(solution(\"10 4 3\\n\")) # YES\nprint(solution(\"8 5 3\\n\")) # YES",
        "test": "assert solution(\"6 2 3\") == \"NO\"",
        "num_ids": 1343,
        "indeed": false
    },
    {
        "number": 4044,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n\n    # check if there exists a string s with exactly a zeroes, b ones and x indices\n    for i in range(n):\n        if (n - i) % 2 == 0 and (n - i) // 2 == x:\n            continue\n        s = \"0\" * (a + b - i - 1) + \"1\" * i + \"0\" * (x - (n - i))\n        for j in range(i + 1, n):\n            if s[j]!= s[j + 1]:\n                return s\n\n    # if no such string exists, return an empty string\n    return \"\"",
        "test": "assert solution(\"5 3 6\") == \"01010100\"",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 4045,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(int, stdin.split())\n    res = ''\n    for _ in range(3):\n        if not s in res and not t in res:\n            res += s[0]\n            s = s[1:]\n        if not s in res and not t in res:\n            res += t[0]\n            t = t[1:]\n        if not s in res and not t in res:\n            res += 'a'\n            n -= 1\n            if n == 0:\n                break\n    if n > 0:\n        return 'NO'\n    else:\n        return 'YES\\n' + res",
        "test": "assert solution(2, \"ab\", \"ca\")!= \"acbbac\"",
        "num_ids": 570,
        "indeed": false
    },
    {
        "number": 4046,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    q = [q] + [q[i] - q[i - 1] for i in range(1, len(q))]\n    def backtrack(start, path):\n        if start == len(q):\n            if len(set(path)) == n:\n                return path\n            return None\n        res = backtrack(start + 1, path + [start])\n        if res is not None:\n            return res\n        return backtrack(start + 1, path)\n    path = backtrack(0, [])\n    if path is None:\n        return -1\n    return''.join(map(str, path))",
        "test": "assert solution(\"4 -1 2 2\") == \"-1\\n\"",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 4047,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1].split()))\n\n    x.sort()\n    x_diff = x[1] - x[0] if x[1]!= x[0] else 0\n\n    if x_diff!= 1:\n        return str(x_diff)\n\n    min_coins = float('inf')\n\n    for i in range(n-1):\n        if x[i] + 1 == x[i+1]:\n            min_coins = min(min_coins, 1 + min_coins)\n        elif x[i] - 1 == x[i+1]:\n            min_coins = min(min_coins, 1 + min_coins)\n\n    return str(min_coins)",
        "test": "assert solution(",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 4048,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rows, cols = 0, 0\n    for i in range(1, n+1):\n        rows, cols = i, i\n    return str(rows * cols)",
        "test": "assert solution(\"10\") == \"5\"",
        "num_ids": 364,
        "indeed": false
    },
    {
        "number": 4049,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a1, a2, a3 = map(int, stdin.split()[1:])\n    b1, b2, b3 = map(int, stdin.split()[1:])\n\n    alice_wins = 0\n    bob_wins = 0\n    for i in range(1, n + 1):\n        rock_count = a1\n        scissors_count = a2\n        paper_count = a3\n        round_winner = 'rock'\n\n        if rock_count >= scissors_count and rock_count >= paper_count:\n            round_winner = 'Alice'\n            if rock_count == scissors_count:\n                alice_wins += 1\n            elif rock_count == paper_count:\n                bob_wins += 1\n        elif scissors_count >= rock_count and scissors_count >= paper_count:\n            round_winner = 'Bob'\n            if scissors_count == rock_count:\n                alice_wins += 1\n            elif scissors_count == paper_count:\n                bob_wins += 1\n        elif paper_count >= rock_count and paper_count >= scissors_count:\n            round_winner = 'Alice'\n            if paper_count == rock_count:\n                alice_wins += 1\n            elif paper_count == scissors_count:\n                bob_wins += 1\n\n        if round_winner == 'Alice':\n            a1 += 1\n            a2 -= 1\n            a3 -= 1\n            if a1 == 0:\n                alice_wins += 1\n        elif round_winner == 'Bob':\n            b1 -= 1\n            b2 += 1\n            b3 += 1\n            if b1 == 0:\n                bob_wins += 1\n\n    print(alice_wins, bob_wins)\n\n    return ''\n",
        "test": "assert solution(input()) == '0 1\\n1 1 0\\n'",
        "num_ids": 1693,
        "indeed": false
    },
    {
        "number": 4050,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, arr = map(int, stdin.strip().split())\n    arr.sort()\n    \n    left = 0\n    right = 0\n    k = 0\n    blocks = set()\n    \n    while right < n:\n        while right < n and arr[right] == arr[left] + k * (arr[right] - arr[left]):\n            right += 1\n        if right - left > 1:\n            blocks.add((left, right))\n        left = right\n        k += 1\n    \n    return str(k) + '\\n' + '\\n'.join(f'{l} {r}' for l, r in sorted(blocks))\n\ninput_data = '''\n7\n4 1 2 2 1 5 3\n11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n4\n1 1 1 1\n'''\n\noutput_data = solution(input_data)\nprint(output_data.strip())",
        "test": "assert solution(\"\"\"",
        "num_ids": 712,
        "indeed": false
    },
    {
        "number": 4051,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # Initialize the stack\n    stack = [(-1, -1)] * n\n    stack[0] = (0, -1)\n\n    # Iterate over the array and build the stack\n    for i in range(n):\n        while stack and stack[-1][1] >= i:\n            # Check if the current number can be pushed to the stack\n            if stack[-1][0] < a[i]:\n                stack.append((a[i], i))\n                break\n            # If not, pop the stack and check if the current number can be added\n            else:\n                height, index = stack.pop()\n                if height + 2 <= i:\n                    stack.append((height + 2, index))\n                    break\n                else:\n                    a[index] = a[i]\n                    a[i] = height + 2\n\n    # Build the output array\n    output = []\n    while stack:\n        height, index = stack.pop()\n        output.append(a[index])\n\n    # Check if the output array is sorted correctly\n    for i in range(n - 1):\n        if output[i] > output[i + 1]:\n            return \"NO\"\n\n    return \"YES\"\n",
        "test": "assert solution(\"3\\n1 2 3\") == \"YES\"",
        "num_ids": 1054,
        "indeed": false
    },
    {
        "number": 4052,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n\n    moves = []\n    index = 0\n\n    while index < n - 1:\n        if s[index] == t[index]:\n            index += 1\n        elif s[index] < t[index]:\n            moves.append(1)\n            index += 1\n        else:\n            moves.append(-1)\n            index += 1\n\n    if index == n - 1:\n        if s == t:\n            return \"0\"\n        else:\n            return \"-1\"\n\n    if len(moves) <= 10**4:\n        return str(len(moves)) + \" \" + \" \".join(map(str, moves))\n    else:\n        return \"-1\"\n",
        "test": "assert solution(\"4\\nabcd\\naccd\\n\") == \"-1\"",
        "num_ids": 769,
        "indeed": false
    },
    {
        "number": 4053,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    prefixes, suffixes = stdin.split('\\n')[1:-1]\n    prefixes = sorted(set(prefixes))\n    suffixes = sorted(set(suffixes))\n    \n    for i in range(n):\n        if not prefixes:\n            continue\n        if prefixes[0][i] == 'a':\n            prefixes.remove(prefixes[0])\n        else:\n            break\n    else:\n        prefixes = []\n    \n    for i in range(n, 2*n-1):\n        if not suffixes:\n            continue\n        if suffixes[-1][i-n] == 'a':\n            suffixes.remove(suffixes[-1])\n        else:\n            break\n    else:\n        suffixes = []\n    \n    return 'P' * len(prefixes) + 'S' * len(suffixes)",
        "test": "assert solution(\"2\\na\\nc\\n\") == \"PS\"",
        "num_ids": 734,
        "indeed": false
    },
    {
        "number": 4054,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def max_profit(prices: List[int]) -> int:\n        min_price = float('inf')\n        max_profit = 0\n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif price - min_price > max_profit:\n                max_profit = price - min_price\n        return max_profit\n\n    input_list = [int(x) for x in stdin.split()]\n    result = max_profit(input_list)\n    return str(result)",
        "test": "assert solution(\"2 4 6 8 10\") == \"1\"",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 4055,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    a.append(0)  # add a 0 at the end\n    count = 0\n    ans = 0\n    for i in range(n):\n        if i > 0 and a[i - 1] == 1 and a[i + 1] == 1 and a[i] == 0:\n            count += 1\n        if count > 0:\n            ans = max(ans, count)\n        count = 0\n    return str(ans)",
        "test": "assert solution(\"5\\n1 1 0 0 0\") == \"0\", \"Example 2\"",
        "num_ids": 607,
        "indeed": false
    },
    {
        "number": 4056,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n\n    count = 0\n    for x in a:\n        if all(x % i == 0 for i in a):\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"5\\n1 2 3 4 5\\n\") == \"1\"",
        "num_ids": 345,
        "indeed": false
    },
    {
        "number": 4057,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    coins = list(map(int, stdin.split()))\n    \n    pockets = []\n    for coin in coins:\n        if not pockets or pockets[-1]!= coin:\n            pockets.append(coin)\n    \n    min_pockets = len(pockets)\n    pockets.sort()\n    \n    for i in range(len(pockets) - 1):\n        if pockets[i] + 1 == pockets[i + 1]:\n            min_pockets = min(min_pockets, len(pockets) - i)\n    \n    return str(min_pockets)",
        "test": "assert solution(\"1\\n100\\n\") == \"1\", \"Solution failed for input 2\"",
        "num_ids": 561,
        "indeed": false
    },
    {
        "number": 4058,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    house = list(map(int, stdin.split()))\n    \n    heaters = [False] * n\n    \n    for i, element in enumerate(house):\n        if element == 1 and not any(heaters[j] for j in range(max(0, i - r + 1), min(i + r - 1, n - 1))):\n            heaters[i] = True\n            break\n    \n    if all(heaters[i] for i in range(n)):\n        return str(-1)\n    else:\n        return str(sum(heaters))",
        "test": "assert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\\n\") == \"3\\n\"",
        "num_ids": 749,
        "indeed": false
    },
    {
        "number": 4059,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for a in range(1, N+1):\n        for b in range(1, a):\n            if a * b == N:\n                count += 1\n    print(count)\n    return str(count)",
        "test": "assert solution(\"3\") == \"3\"",
        "num_ids": 249,
        "indeed": false
    },
    {
        "number": 4060,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    def count_regular_brackets(s: str) -> int:\n        stack = []\n        count = 0\n        for i, c in enumerate(s):\n            if c == '(':\n                stack.append(i)\n            elif c == ')':\n                if not stack:\n                    return -1\n                index = stack.pop()\n                if index == 0 or (i - index) % 2 == 0:\n                    count += 1\n        return count\n\n    return str(count_regular_brackets(s))",
        "test": "assert solution(stdin) == expected",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 4061,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s = sorted(s)\n    t = sorted(t)\n    i, j = 0, 0\n\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            i += 1\n            j += 1\n        elif s[i] < t[j]:\n            i += 1\n        else:\n            j += 1\n\n    return len(s) - i",
        "test": "assert solution(\"\"\"",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 4062,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if 1 <= a <= b <= d <= 10**9 and 1 <= c <= d <= 10**9:\n        return str(max(a * b, a * c, b * c))\n    else:\n        return \"Invalid input\"",
        "test": "assert solution(\"1 2 3 4\") == \"6\"",
        "num_ids": 345,
        "indeed": false
    },
    {
        "number": 4063,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, *difficulty = list(map(int, stdin.split()))\n    difficulty_sorted = sorted(difficulty)\n    count_arc = count_abc = 0\n\n    for i in range(N):\n        if difficulty_sorted[i] == difficulty_sorted[i] - 1:\n            count_arc += 1\n        else:\n            count_abc += 1\n\n    return str(min(count_arc, count_abc))",
        "test": "assert solution(\"2\\n1 10\") == \"0\"",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 4064,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    \n    def good_times(i: int) -> int:\n        if i == 0:\n            return 0\n        \n        current_time = a[i]\n        good_times_after_one_day = 0\n        good_times_after_two_days = 0\n        \n        for j in range(i):\n            if a[j] <= current_time:\n                good_times_after_one_day += 1\n            else:\n                break\n                \n        for j in range(i, n):\n            if a[j] <= current_time + 23:\n                good_times_after_two_days += 1\n            else:\n                break\n                \n        return min(good_times_after_one_day, good_times_after_two_days)\n    \n    return str(max(good_times(i) for i in range(n)))",
        "test": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\\n\") == \"3\"",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 4065,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    max_diff = a[-1]\n    count = 1\n    for i in range(len(a) - 1):\n        if a[i + 1] - 2 * a[i] > max_diff:\n            count += 1\n            max_diff = a[i + 1]\n    return str(count)\n",
        "test": "assert solution('5\\n2 10 50 110 250') == '1'",
        "num_ids": 704,
        "indeed": false
    },
    {
        "number": 4066,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    lcm_dict = {}\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            lcm = a[i] * a[j]\n            if lcm in lcm_dict:\n                lcm_dict[lcm].append((i, j))\n            else:\n                lcm_dict[lcm] = [(i, j)]\n    \n    min_lcm = float('inf')\n    ans = []\n    for lcm in sorted(lcm_dict.keys()):\n        if lcm == min_lcm:\n            continue\n        indices = lcm_dict[lcm]\n        for i, j in indices:\n            min_lcm = min(min_lcm, lcm)\n            if min_lcm in lcm_dict:\n                lcm_dict[min_lcm].remove((i, j))\n            else:\n                continue\n        if len(lcm_dict[lcm]) == 0:\n            del lcm_dict[lcm]\n    \n    for lcm in sorted(lcm_dict.keys()):\n        indices = lcm_dict[lcm]\n        for i, j in indices:\n            min_lcm = min(min_lcm, lcm)\n            if min_lcm in lcm_dict:\n                lcm_dict[min_lcm].remove((i, j))\n            else:\n                continue\n        if len(lcm_dict[lcm]) == 0:\n            del lcm_dict[lcm]\n    \n    for lcm in sorted(lcm_dict.keys()):\n        indices = lcm_dict[lcm]\n        for i, j in indices:\n            min_lcm = min(min_lcm, lcm)\n            if min_lcm in lcm_dict:\n                lcm_dict[min_lcm].remove((i, j))\n            else:\n                continue\n        if len(lcm_dict[lcm]) == 0:\n            del lcm_dict[lcm]\n    \n    for lcm in sorted(lcm_dict.keys()):\n        indices = lcm_dict[lcm]\n        for i, j in indices:\n            min_lcm = min(min_lcm, lcm)\n            if min_lcm in lcm_dict:\n                lcm_dict[min_lcm].remove((i, j))\n            else:\n                continue\n        if len(lcm_dict[lcm]) == 0:\n            del lcm_dict[lcm]\n    \n    for lcm in sorted(lcm_dict.keys()):\n        indices = lcm_dict[lcm]\n        for i, j in indices:\n            min_lcm = min(min_lcm, lcm)\n            if min_lcm in lcm_dict:\n                lcm_dict[min_lcm].remove((i, j))\n            else:\n                continue\n        if len(lcm_dict[lcm]) == 0:\n            del lcm_dict[lcm]\n    \n    for lcm in sorted(lcm_dict.keys()):\n        indices = lcm_dict[lcm]\n        for i, j in indices:\n            min_lcm = min(min_lcm, lcm)\n            if min_lcm in lcm_dict:\n                lcm_dict[min_lcm].remove((i, j))\n            else:\n                continue\n        if len(lcm_dict[lcm]) == 0:\n            del lcm_dict[lcm]\n    \n    for lcm in sorted(lcm_dict.keys()):\n        indices = lcm_dict[lcm]\n        for i, j in indices:\n            min_lcm = min(min_lcm, lcm)\n            if min_lcm in lcm_dict:\n                lcm_dict[min_lcm].remove((i, j))\n            else:\n                continue\n        if len(lcm_dict[lcm]) == 0:\n            del lcm_dict[lcm]\n    \n    for lcm in sorted(lcm_dict.keys()):\n        indices = lcm_dict[lcm]\n        for i, j in indices:\n            min_lcm = min(min_lcm, lcm)\n            if min_lcm in lcm_dict:\n                lcm_dict[min_lcm].remove((i, j))\n            else:\n                continue\n        if len(lcm_dict[lcm]) == 0:\n            del lcm_dict[lcm]\n    \n    for lcm in sorted(lcm_dict.",
        "test": "assert solution(\"\"\"",
        "num_ids": 1583,
        "indeed": false
    },
    {
        "number": 4067,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count_0 = 0\n    count_1 = 0\n    count_2 = 0\n    for c in s:\n        if c == '0':\n            count_0 += 1\n        elif c == '1':\n            count_1 += 1\n        else:\n            count_2 += 1\n\n    if count_0 == count_1 and count_1 == count_2:\n        return s\n\n    min_count = min(count_0, count_1, count_2)\n\n    if min_count == count_0:\n        return '0' + s\n    elif min_count == count_1:\n        return '1' + s\n    else:\n        return '2' + s",
        "test": "assert solution(\"6\\n211200\") == \"211200\"",
        "num_ids": 965,
        "indeed": false
    },
    {
        "number": 4068,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(i: int) -> int:\n        if i == n:\n            return 1\n\n        ans = 0\n        for j in range(i, n + 1):\n            if j not in visited:\n                visited.add(j)\n                ans += dfs(j + 1)\n                visited.remove(j)\n\n        return ans % 1000000007\n\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    visited = set()\n    return str(dfs(0))\n\n\ndef",
        "test": "assert solution(\"6 1\\n3\\n\") == \"4\"",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 4069,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    abs_X = abs(X)\n    step = 1 if D > 0 else -1\n    abs_X += D * K\n    return str(abs_X)",
        "test": "assert solution(\"1 5 3\") == \"10\"",
        "num_ids": 245,
        "indeed": false
    },
    {
        "number": 4070,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = (3 * n) + 1\n        count += 1\n    return str(count)\n\nprint(solution(\"11\")) # Output: 2\nprint(solution(\"14\")) # Output: 0\nprint(solution(\"61441\")) # Output: 2\nprint(solution(\"571576\")) # Output: 10\nprint(solution(\"2128506\")) # Output: 3",
        "test": "assert solution(\"571576\") == \"10\"",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 4071,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = (a * 2) + 3\n    return str(b)",
        "test": "assert solution(\"3\") == \"27\", \"Test failed\"",
        "num_ids": 142,
        "indeed": false
    },
    {
        "number": 4072,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 11 == 0:\n        return '1'\n    else:\n        return '0'",
        "test": "assert solution(\"48\") == \"0\", \"Input: '48', Expected Output: '0'\"",
        "num_ids": 236,
        "indeed": false
    },
    {
        "number": 4073,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    arr.sort()\n\n    max_sum = 0\n    temp_sum = 0\n    for i in range(n-1):\n        temp_sum += abs(arr[i] - arr[i+1])\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n\n    return str(max_sum)\n\nstdin = \"\"\"4 2 5 3 1\"\"\"\nprint(solution(stdin))",
        "test": "assert solution(\"4 2 5 3 1\") == \"4\"",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 4074,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, k = map(int, stdin.split()[1:3])\n        # Sort shovel sizes in ascending order\n        shovels = sorted(range(1, k+1))\n        # Calculate the minimum number of packages\n        min_packages = 0\n        for shovel_size in shovels:\n            min_packages += n // shovel_size\n        print(min_packages)\n\ndef",
        "test": "assert solution(\"5\\n8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733\\n\") == \"2\\n8\\n1\\n999999733\\n1\\n\"",
        "num_ids": 886,
        "indeed": false
    },
    {
        "number": 4075,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k_list = [int(x) for x in stdin.split()]\n    p_list = [int(x) for x in stdin.split()]\n\n    bulbs_on = 0\n    for i in range(m):\n        on_switches = 0\n        for j in range(k_list[i]):\n            on_switches += 1 if j + 1 == p_list[i] % (n + 1) else 0\n        bulbs_on += on_switches\n\n    print(bulbs_on)\n    return \"\"\n\n\ninput_data = \"\"\"2 2\n2 1 2\n1 2\n0 1\"\"\"\n\nprint(solution(input_data))\n",
        "test": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\\n\") == \"1\"",
        "num_ids": 542,
        "indeed": false
    },
    {
        "number": 4076,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split())\n    distance = a * 3600 + b * 60 * 3600\n    distance += h * 3600 + m * 60 * 3600\n    return f\"{distance / 100:.9f}\"",
        "test": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\", \"Test Case 1 failed\"",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 4077,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    count = 0\n    for i in range(n - 1):\n        left, right = i, i + 1\n        while left < right:\n            mid = (left + right) // 2\n            if a[mid] == m:\n                count += right - left + 1\n                break\n            elif a[mid] < m:\n                left = mid + 1\n            else:\n                right = mid\n    return str(count)\n\ntest_cases = [\n    (\"5 4\\n1 4 5 60 4\", \"8\"),\n    (\"3 1\\n1 1 1\", \"6\"),\n    (\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\", \"97\"),\n]\n\nfor stdin, expected_output in test_cases:\n    output = solution(stdin)\n    assert output == expected_output, f\"Test case failed: {stdin}\\nExpected output: {expected_output}\\nOutput: {output}\"\n\nprint(\"All test cases passed!\")",
        "test": "assert solution(\"\"\"\\",
        "num_ids": 596,
        "indeed": false
    },
    {
        "number": 4078,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n\n    def max_sum(a, segments):\n        max_sum = 0\n        max_start = 0\n        for i, segment in enumerate(segments):\n            if segment[0] < a[max_start]:\n                max_sum += a[max_start] - segment[0]\n            max_start = i\n            if segment[1] > a[max_start]:\n                max_sum += segment[1] - a[max_start]\n        return max_sum\n\n    max_sum_a = max_sum(a, segments)\n    max_sum_b = max_sum(a, segments)\n    max_diff = 0\n    max_diff_index = 0\n    max_diff_choices = []\n\n    for i in range(m):\n        for j in range(i + 1, m):\n            max_sum_a = max_sum(a, [segments[i], segments[j]])\n            max_sum_b = max_sum(a, [segments[j], segments[i]])\n            diff = max_sum_a - max_sum_b\n            if diff > max_diff:\n                max_diff = diff\n                max_diff_index = i\n                max_diff_choices = [j]\n            elif diff == max_diff:\n                max_diff_choices.append(j)\n\n    if max_diff == 0:\n        return f\"{max_diff} 0\"\n    else:\n        return f\"{max_diff} {max_diff_index} {max_diff_choices}\"\n",
        "test": "assert solution(\"\"\"5 4",
        "num_ids": 1285,
        "indeed": false
    },
    {
        "number": 4079,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    strings = []\n\n    for i in range(n):\n        strings.append(stdin.split()[i + 1])\n\n    diverse_count = 0\n    not_diverse_count = 0\n\n    for string in strings:\n        first_letter = string[0]\n        last_letter = string[-1]\n\n        if first_letter.lower() == last_letter.lower() and len(set(string)) == len(string) and len(string) == len(set(string)):\n            diverse_count += 1\n        else:\n            not_diverse_count += 1\n\n    if diverse_count == n:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\ndef",
        "test": "assert solution(\"a\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\ni\\nj\\nk\\nl\\nm\\nn\\no\\np\\nq\\rr\\ns\\nt\\nu\\nv\\nw\\nx\\ny\\nz\\n\") == \"Yes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\",
        "num_ids": 1641,
        "indeed": false
    },
    {
        "number": 4080,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = []\n\n    for i in range(m):\n        start, end = map(int, stdin.split())\n        segments.append((start, end))\n\n    def is_subset(arr, subset):\n        return all(x in subset for x in arr)\n\n    def update_array(arr, segments):\n        b = arr.copy()\n        for start, end in segments:\n            for i in range(start, end):\n                b[i] += 1\n        return b\n\n    def max_difference(a, b):\n        return max(a) - min(b)\n\n    for i in range(1, len(a)):\n        a[i] -= a[i - 1]\n\n    a = update_array(a, segments)\n\n    max_diff = max_difference(a, a.copy())\n\n    return str(max_diff) + \"\\n\" + str(len(segments)) + \"\\n\" + \" \".join(map(str, segments[0]))\n\ndef",
        "test": "assert solution(\"1 0\\n1000000\") == \"0\\n0\"",
        "num_ids": 1103,
        "indeed": false
    },
    {
        "number": 4081,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    i = j = 0\n    max_len = 1\n    max_seq = [a[i]]\n    while i < n - 1:\n        if a[i] == a[i + 1] + 1:\n            j = i + 1\n            while j < n - 1 and a[j] == a[j + 1] + 1:\n                j += 1\n            if j - i > max_len:\n                max_len = j - i\n                max_seq = a[i:j]\n        i += 1\n    return str(max_len) + ''.join('L' if a[0] <= x <= a[-1] else 'R' for x in max_seq)\n\ntest_cases = [\n    '5\\n2 1 5 4 3',\n    '7\\n1 3 5 6 7 4 2',\n    '3\\n1 2 3',\n    '4\\n1 2 4 3'\n]\n\nfor test in test_cases:\n    print(solution(test))",
        "test": "assert solution(\"4\\n1 2 4 3\\n\") == \"4\\nLLRL\"",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 4082,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    max_length = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            max_length += 1\n    \n    return str(max_length)",
        "test": "assert solution(\"2\\n1 2\") == \"2\"",
        "num_ids": 503,
        "indeed": true
    },
    {
        "number": 4083,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    def divide_and_conquer(left: int, right: int) -> int:\n        if left == right:\n            return 0\n        mid = left + (right - left) // 2\n        left_count = divide_and_conquer(left, mid)\n        right_count = divide_and_conquer(mid + 1, right)\n        count = 0\n        for i in range(left, right + 1):\n            if a[i] == 0:\n                continue\n            if i > mid:\n                count += divide_and_conquer(mid + 1, i)\n            elif i < mid + 1:\n                count += divide_and_conquer(left, mid)\n            if a[i] == 1:\n                count += left_count + right_count\n        return count\n\n    return str(divide_and_conquer(0, n - 1))",
        "test": "assert solution('''",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 4084,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    \n    blue_balls = 0\n    red_balls = 0\n    row = []\n    \n    for _ in range(n):\n        blue_balls += a\n        red_balls += b\n        row.append(\"b\" * blue_balls + \"r\" * red_balls)\n        blue_balls = 0\n        red_balls = 0\n    \n    print(blue_balls)\n    \n    return \" \".join(row)",
        "test": "assert solution(\"8 3 4\") == \"4\"",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 4085,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split()[0])\n    for _ in range(queries):\n        n, x = map(int, stdin.split()[1:])\n        divisors = list(map(int, stdin.split()[2:]))\n\n        if any(x == i for i in divisors) or any(x % i == 0 for i in divisors):\n            return -1\n\n        for i in range(1, n + 1):\n            if x % i == 0 and not any(x % j == 0 for j in divisors):\n                x = x // i\n                divisors.append(i)\n                break\n\n        for i in range(1, x + 1):\n            if i in divisors and any(x % j == 0 for j in divisors):\n                x = i\n                break\n\n        print(x)\n\nsolution(stdin=\"2\\n8\\n8 2 12 6 4 24 16 3\\n1\\n2\") # Output: 48\nsolution(stdin=\"2\\n8\\n8 2 12 6 4 24 16 3\\n1\\n2\") # Output: 4\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 1288,
        "indeed": false
    },
    {
        "number": 4086,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort(reverse=True)\n    b = [a[0]]\n    c = 0\n    for i in range(1, n):\n        if a[i]!= a[i - 1]:\n            b.append(a[i])\n            if a[i]!= a[n - c - 1]:\n                c += 1\n    return f\"{len(b)} {len(b) + c} {b[::-1]} {a}\"\n",
        "test": "assert solution(\"5\\n6 6 6 6 6\\n\") == \"1\\n6\\n\"",
        "num_ids": 542,
        "indeed": false
    },
    {
        "number": 4087,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    def is_interesting(n: int) -> bool:\n        return sum(int(digit) for digit in str(n)) % 4 == 0\n\n    interesting = min(filter(is_interesting, range(1, 1001)), key=lambda x: abs(x - a))\n    return str(interesting)",
        "test": "assert solution(\"237\") == \"237\"",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 4088,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split('\\n\\n')[:-1]\n    for test_case in test_cases:\n        n, m = map(int, test_case.split('\\n')[0].split())\n        b = list(map(int, test_case.split('\\n')[2].split()))\n\n        s = \"abac\"\n        b_sum = sum(abs(i - j) for i, j in zip(range(m), b))\n        if b_sum == sum(abs(i - j) for i, j in zip(range(m), b)):\n            print(\"aac\")\n        else:\n            print(\"b\")\n\n        s = \"abc\"\n        b_sum = sum(abs(i - j) for i, j in zip(range(m), b))\n        if b_sum == sum(abs(i - j) for i, j in zip(range(m), b)):\n            print(\"a\")\n        else:\n            print(\"b\")\n\n        s = \"abba\"\n        b_sum = sum(abs(i - j) for i, j in zip(range(m), b))\n        if b_sum == sum(abs(i - j) for i, j in zip(range(m), b)):\n            print(\"aba\")\n        else:\n            print(\"c\")\n\n        s = \"ecoosdcefr\"\n        b_sum = sum(abs(i - j) for i, j in zip(range(m), b))\n        if b_sum == sum(abs(i - j) for i, j in zip(range(m), b)):\n            print(\"codeforces\")\n        else:\n            print(\"b\")\n\n    return \"\"\n\n\ndef",
        "test": "assert solution(r\"\"\"",
        "num_ids": 698,
        "indeed": false
    },
    {
        "number": 4089,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"a\"\n    elif n < 27:\n        return chr(ord(\"a\") + n - 1)\n    elif n < 704:\n        return chr(ord(\"z\") + n - 26)\n    elif n < 18278:\n        return chr(ord(\"y\") + n - 703)\n    elif n < 475256:\n        return chr(ord(\"z\") + n - 18278)\n    else:\n        return chr(ord(\"z\") + n - 475255)",
        "test": "assert solution(\"1\") == \"a\"",
        "num_ids": 1313,
        "indeed": false
    },
    {
        "number": 4090,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    words = stdin.split()[1:]\n    words.sort(key=lambda x: x.lower())\n\n    result = [\"\"] * n\n    abbrev_len = 0\n    cur_word = \"\"\n\n    for word in words:\n        if word.lower() == cur_word.lower():\n            cur_word = word\n            continue\n\n        if cur_word:\n            if cur_word.lower() in word.lower():\n                abbrev_len += 1\n\n        result[words.index(word)] = cur_word\n        cur_word = word\n\n    if cur_word:\n        if cur_word.lower() in words[-1].lower():\n            abbrev_len += 1\n\n        result[-1] = cur_word\n\n    return str(abbrev_len)",
        "test": "assert solution(\"aa bb aa aa bb bb\") == \"11\", \"Incorrect output\"",
        "num_ids": 695,
        "indeed": false
    },
    {
        "number": 4091,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # sort the list of difficulties in non-decreasing order\n    a.sort()\n\n    # the maximum profit we can get during a day\n    profit = 0\n\n    # the number of days we can use\n    days = 0\n\n    # the current position in the list of difficulties\n    i = 0\n\n    # the total profit we can get\n    max_profit = 0\n\n    while i < n:\n        # the maximum profit we can get during the current day\n        current_profit = 0\n\n        # the number of problems we can solve during the current day\n        current_count = 0\n\n        # the maximum profit we can get so far during the current day\n        max_profit_so_far = 0\n\n        # the number of days we can use so far\n        current_days = 0\n\n        while i < n and current_days < k:\n            if a[i] > max_profit_so_far + a[i]:\n                current_profit = max_profit_so_far + a[i]\n                current_days = current_days + 1\n                current_count = current_count + 1\n            else:\n                current_profit = max_profit_so_far\n                current_days = current_days + 1\n                current_count = current_count + 1\n\n            max_profit_so_far = max(max_profit_so_far, current_profit)\n\n        # update the total profit\n        profit = profit + current_profit\n\n        # update the maximum profit we can get\n        max_profit = max(max_profit, profit)\n\n        # move to the next day\n        i = i + current_count\n\n    return str(max_profit) + '\\n' +''.join(map(str, days))\n",
        "test": "assert solution(\"4 2\\n1 2000 2000 2\\n\") == \"4000\\n2 2\\n\"",
        "num_ids": 1017,
        "indeed": false
    },
    {
        "number": 4092,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n    count = 0\n    for i in range(len(a) - 1):\n        if a[i] + a[i + 1] == 0:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"5\\n4 -2 3 -9 2\") == \"0\"",
        "num_ids": 719,
        "indeed": false
    },
    {
        "number": 4093,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, m = map(int, stdin.split()[1:])\n        a = [i for i in range(1, n+1)]\n        while a[-1] > m:\n            a.pop()\n        a = [i for i in range(1, n+1) if a[i-1] + a[i] <= m]\n        a.pop()\n        print(max(abs(a[i] - a[i+1]) for i in range(len(a)-1)))",
        "test": "assert solution(\"5\\n1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\\n\") == \"0\\n2\\n10\\n1000000000\\n2000000000\"",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 4094,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    sequence = [7]\n    i = 1\n    while sequence[-1] * 10 <= k:\n        sequence.append(sequence[-1] * 10)\n        i += 1\n\n    if k in sequence:\n        index = sequence.index(k)\n        return str(index + 1)\n    else:\n        return \"-1\"\n",
        "test": "assert solution(\"3\") == \"-1\"",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 4095,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n\n    def find_median(p: List[int]) -> int:\n        p.sort()\n        return p[len(p) // 2]\n\n    def is_valid(l: int, r: int) -> bool:\n        return find_median(p[l - 1:r + 1]) == m\n\n    valid_pairs = []\n    for l in range(1, n + 1):\n        for r in range(l, n + 1):\n            if is_valid(l, r):\n                valid_pairs.append((l, r))\n\n    print(len(valid_pairs))\n    return \"\"\n\n\ndef",
        "test": "assert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"",
        "num_ids": 572,
        "indeed": false
    },
    {
        "number": 4096,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    min_day = float('inf')\n    for i in range(n):\n        if a[i] <= m:\n            min_day = min(min_day, a[i] // m)\n\n    if min_day == float('inf'):\n        return -1\n    else:\n        return str(min_day)",
        "test": "assert solution(\"5 16\\n5 5 5 5 5\\n\") == \"2\\n\"",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 4097,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    b_length = len(b)\n    \n    if n == b_length:\n        return str(b_length)\n    \n    for i in range(b_length):\n        if b[i] == 0:\n            return -1\n    \n    for i in range(b_length - 2):\n        if abs(b[i + 1] - b[i])!= 1:\n            return -1\n    \n    return str(b_length)",
        "test": "assert solution(\"5\\n1 3 6 9 12\\n\") == \"1\"",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 4098,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    students_skills = list(map(int, stdin.split()))\n    \n    # sort students by skills\n    students_skills.sort()\n    \n    # compute total students for each team\n    total_students = sum(students_skills) // k\n    \n    # compute number of teams required\n    teams_needed = total_students // 5\n    teams_needed += 1 if total_students % 5!= 0 else 0\n    \n    return str(teams_needed)\n",
        "test": "assert solution(input()) == '4'",
        "num_ids": 640,
        "indeed": false
    },
    {
        "number": 4099,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def is_valid(total_points: int) -> bool:\n        return total_points >= m\n\n    total_points = sum(a)\n    min_points = total_points\n\n    for i in range(n - 1):\n        total_points -= a[i]\n        min_points = min(min_points, total_points)\n        total_points += a[i + 1]\n        if is_valid(total_points):\n            return min_points\n\n    if is_valid(total_points):\n        return min_points\n    else:\n        return -1\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 4100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    \n    def game(scores: list[int], answers: list[int]) -> list[int]:\n        for i in range(Q):\n            correct_answers = sum(scores) + A[i]\n            if correct_answers == N:\n                scores[A[i] - 1] += 1\n                for j in range(N):\n                    scores[j] -= 1\n            else:\n                scores[A[i] - 1] -= 1\n                for j in range(N):\n                    scores[j] -= 1\n        return scores\n    \n    scores = [K] * N\n    for i in range(N - 1):\n        scores = game(scores, A)\n        if all(scores) or K == 0:\n            break\n    \n    return \"Yes\" if K == 0 else \"No\"",
        "test": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\\n\"",
        "num_ids": 700,
        "indeed": false
    },
    {
        "number": 4101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[1:])\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    def is_sorted(arr: list) -> bool:\n        return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\n\n    def sort_matrix(a: List[List[int]]) -> str:\n        r = [0] * n\n        c = [0] * m\n\n        for i in range(n):\n            r[i] = 1 if is_sorted(a[i]) else 0\n\n        for j in range(m):\n            c[j] = 1 if is_sorted(a[j]) else 0\n\n        for i in range(n):\n            for j in range(m):\n                if r[i] and c[j]:\n                    if a[i][j] == 1:\n                        a[i][j] = 0\n                    else:\n                        a[i][j] = 1\n\n        return 'YES', ''.join(str(r[i]) for i in range(n)) + '\\n', ''.join(str(c[j]) for j in range(m))\n\n    res = sort_matrix(a)\n    return res[0] + '\\n' + res[1] + res[2]",
        "test": "assert solution('''2 2",
        "num_ids": 946,
        "indeed": false
    },
    {
        "number": 4102,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 1 or len(stdin) > 10:\n        return \"No\"\n    digits = [int(digit) for digit in stdin]\n    if len(set(digits)) == 1:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"121\") == \"No\"",
        "num_ids": 293,
        "indeed": false
    },
    {
        "number": 4103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    max_segments = 0\n    total_distance = 0\n    current_distance = 0\n    current_charge = 0\n    current_type = \"\"\n\n    for i in range(n):\n        if s[i] == 1:\n            current_distance += 1\n            if current_distance == current_distance - 1:\n                max_segments += 1\n                current_distance = 0\n            if current_distance > 1:\n                if current_type == \"battery\" and current_charge > 0:\n                    current_charge -= 1\n                elif current_type == \"accumulator\" and current_charge > 0:\n                    current_charge -= 1\n                    current_charge -= 1\n        else:\n            current_distance = 0\n\n        if current_charge < 0:\n            current_charge = 0\n\n        if i < n - 1 and current_type == \"battery\":\n            current_charge -= 1\n\n        if current_distance == 0 and s[i] == 1:\n            current_type = \"accumulator\"\n            current_charge -= 1\n\n        if i == n - 1 and current_type == \"battery\":\n            current_charge -= 1\n\n        total_distance += current_distance\n\n    return str(max_segments)",
        "test": "assert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"",
        "num_ids": 1133,
        "indeed": false
    },
    {
        "number": 4104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def evaluate(expression: str) -> str:\n        stack = []\n        index = 0\n\n        while index < len(expression):\n            if expression[index] =='':\n                index += 1\n                continue\n\n            if expression[index].isdigit():\n                operand = int(expression[index])\n                index += 1\n            else:\n                operator = expression[index]\n                index += 1\n\n                if operator == '+':\n                    right = stack.pop()\n                    left = stack.pop()\n                    stack.append(left + right)\n                elif operator == '-':\n                    right = stack.pop()\n                    left = stack.pop()\n                    stack.append(left - right)\n                else:\n                    raise ValueError(f'Invalid operator: {operator}')\n\n        return stack[0]\n\n    return evaluate(stdin)",
        "test": "assert solution(\"112-37\") == \"375\"",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 4105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n > 2 * 10**5:\n        return \"NO\"\n\n    colors = set()\n    pairs = []\n\n    for i in range(n):\n        pair = []\n        for j in range(2):\n            b, g = map(int, input().split())\n            while b == g:\n                b, g = map(int, input().split())\n            pair.append((b, g))\n        pairs.append(tuple(pair))\n\n        for pair1 in pairs:\n            if pair1[0][1] == pair1[1][1]:\n                return \"NO\"\n            if pair1[0][0] == pair1[1][0]:\n                return \"NO\"\n            if pair1[0][0] == pair1[1][1]:\n                return \"NO\"\n            if pair1[1][0] == pair1[0][1]:\n                return \"NO\"\n\n        colors.add(pair[0][0])\n        colors.add(pair[1][0])\n        colors.add(pair[0][1])\n        colors.add(pair[1][1])\n\n    for color in colors:\n        if k < len(colors) - colors.count(color):\n            return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join(map(str, sorted(colors)))",
        "test": "assert solution(\"13 4\\n\") == \"NO\\n\"",
        "num_ids": 1085,
        "indeed": false
    },
    {
        "number": 4106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    beauties = [0] * (n + 1)\n    reposted = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        beauties[i] = beauties[i - 1] + a[i - 1]\n\n    for i in range(x + 1):\n        reposted[i] = max(reposted[i - 1], beauties[i])\n\n    if reposted[x] == beauties[x]:\n        return str(reposted[x])\n    else:\n        return \"-1\"\n",
        "test": "assert solution(",
        "num_ids": 849,
        "indeed": false
    },
    {
        "number": 4107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    routers_in_rooms = []\n    cost = 0\n\n    for i, c in enumerate(s):\n        if c == '1':\n            routers_in_rooms.append(i)\n\n    for room in range(n):\n        if room not in routers_in_rooms:\n            cost += room + 1\n\n    k_range = range(k)\n    for room in range(n):\n        for router_in_room in range(max(1, room - k), min(n, room + k) + 1):\n            if router_in_room == room:\n                continue\n            cost += room + 1\n\n    return str(cost)\n\n\ndef",
        "test": "assert solution(",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 4108,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.strip().split()\n    n = len(S)\n    S = ''.join(S)\n    T = ''.join(T)\n    change_count = 0\n    result = True\n\n    for i in range(n):\n        if S[i:i+2] == T[i:i+2]:\n            if S[i] == T[i]:\n                continue\n            else:\n                change_count += 1\n                S = S.replace(S[i], T[i])\n                T = T.replace(T[i], S[i])\n\n    if change_count == 0:\n        result = False\n\n    return 'Yes' if result else 'No'",
        "test": "assert solution(\"aazzzel\\napplle\") == \"No\", \"Test Case 3 Failed\"",
        "num_ids": 745,
        "indeed": false
    },
    {
        "number": 4109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin[0])\n    M = int(stdin[1])\n    A = []\n    for i in range(M):\n        A.append(list(map(int, stdin[i+2].split())))\n    C = list(map(int, stdin[M+2].split()))\n\n    dp = [[0]*(M+1) for _ in range(N+1)]\n    for i in range(N, 0, -1):\n        for j in range(M+1):\n            dp[i][j] = float('inf')\n            for k in range(M):\n                if A[j][k] > 0 and C[i] * A[j][k] <= dp[i+1][j+k+1]:\n                    dp[i][j] = min(dp[i][j], dp[i+1][j+k+1] - C[i] * A[j][k])\n\n    min_amount = float('inf')\n    for i in range(1, N+1):\n        for j in range(M+1):\n            min_amount = min(min_amount, dp[i][j])\n\n    return f'{min_amount}'",
        "test": "assert solution(Takahashi, 2, 3, [0, 0, 0, 0], [[0, 1], [0, 2], [0, 2], [0, 2]]) == \"Yes\"",
        "num_ids": 1128,
        "indeed": false
    },
    {
        "number": 4110,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # read input values\n    D, G = map(int, stdin.split())\n\n    # read problem values\n    p = list(map(int, stdin.split()))\n    c = [p[i] for i in range(1, len(p), D)]\n\n    # find perfect bonuses\n    perfect_bonuses = [sum(p[:i]) for i in range(1, len(p) + 1)]\n\n    # calculate base score\n    base_score = sum(perfect_bonuses)\n\n    # find minimum number of problems\n    min_problems = 0\n    for i in range(D + 1):\n        if base_score + i * 100 <= G:\n            min_problems = max(min_problems, i)\n\n    return str(min_problems)",
        "test": "assert solution(\"2 700\\n3 500\\n5 800\\n\") == \"3\"",
        "num_ids": 710,
        "indeed": false
    },
    {
        "number": 4111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1:n+1]))\n\n    candies = [0] * n\n    for i in range(1, n+1):\n        candies[i-1] = i\n\n    even_days = []\n    odd_days = []\n    for i in range(n):\n        if i % 2 == 0:\n            even_days.append(weights[i])\n        else:\n            odd_days.append(weights[i])\n\n    good_candies = []\n    for i in range(n-1):\n        if sum(even_days) == sum(odd_days):\n            good_candies.append(i+1)\n\n    return str(len(good_candies))\n\nstdin = \"\"\"7\n5 5 4 5 5 5 6\"\"\"\nprint(solution(stdin))  # Output: 2\n\nstdin = \"\"\"8\n4 8 8 7 8 4 4 5\"\"\"\nprint(solution(stdin))  # Output: 2\n\nstdin = \"\"\"9\n2 3 4 2 2 3 2 2 4\"\"\"\nprint(solution(stdin))  # Output: 3",
        "test": "assert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\", \"Test 3 failed\"",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 4112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    max_sum = float('-inf')\n    \n    for i in range(1, n):\n        for j in range(i+1, min(i+k, n)):\n            if a[i] > a[j]:\n                max_sum = max(max_sum, a[i] + a[j] + sum(a[i:j]))\n    \n    if max_sum == float('-inf'):\n        return -1\n    else:\n        return str(max_sum)",
        "test": "assert solution(\"4 3 1\\n1 100 1 1\") == \"100\\n\"",
        "num_ids": 810,
        "indeed": false
    },
    {
        "number": 4113,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n <= 0 or n > 100:\n        return \"No\"\n\n    cakes = 0\n    doughnuts = 0\n\n    for i in range(n // 4):\n        cakes += 2\n        doughnuts += 2\n\n    if n - cakes * 4 - doughnuts * 7 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"3\") == \"No\"",
        "num_ids": 1330,
        "indeed": false
    },
    {
        "number": 4114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *coordinates = map(int, stdin.split())\n    hypotheses = []\n\n    for x, y, h in coordinates:\n        hypotheses.append((x, y, h))\n\n    center_x = max(hypotheses, key=lambda x: x[0])[0]\n    center_y = max(hypotheses, key=lambda x: x[1])[1]\n    pyramid_height = max(hypotheses, key=lambda x: x[2])[2]\n\n    return f\"{center_x} {center_y} {pyramid_height}\"",
        "test": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n\") == \"2 2 6\"",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 4115,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n\n    # Check if the string is already palindrome\n    if s == s[::-1]:\n        return \"0\"\n\n    # Find the minimum number of hugs needed to make the string palindrome\n    for i in range(n - 1):\n        if s[i]!= s[n - i - 1]:\n            return \"1\"\n\n    return \"2\"\n",
        "test": "assert solution(\"redcoder\") == \"1\"",
        "num_ids": 585,
        "indeed": false
    },
    {
        "number": 4116,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if 100 < n or n < 1:\n        return \"No\"\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if n == i * j:\n                return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"1\") == \"Yes\"",
        "num_ids": 348,
        "indeed": true
    },
    {
        "number": 4117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, *lengths = map(int, stdin.split())\n    triangles = []\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if len(set(lengths[i - 1], lengths[j - 1], lengths[k - 1])) == 1:\n                    triangles.append((i, j, k))\n\n    return str(len(triangles))\n\ndef",
        "test": "assert solution(\"7\\n4 5 12 3 6 8 10\") == \"15\"",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 4118,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        a, b = map(int, stdin.split())\n        if 1 <= a <= 20 and 1 <= b <= 20:\n            result = a * b\n            if result!= 0:\n                return str(result)\n            else:\n                return -1\n        else:\n            return \"Invalid input\"\n    except ValueError:\n        return \"Invalid input\"",
        "test": "assert solution(\"2 5\") == \"10\"",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 4119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x_list = list(map(int, stdin.split()))\n\n    visited = set(x_list)\n    x_list = list(set(x_list) - visited)\n\n    moves = 0\n    visited_x = []\n    x_list.sort()\n\n    while x_list and visited_x!= x_list:\n        x = x_list.pop(0)\n\n        if x in visited:\n            continue\n\n        visited.add(x)\n        visited_x.append(x)\n        moves += 1\n\n        if moves == m:\n            break\n\n    return str(moves)\n",
        "test": "assert solution(\"\"\"3 6",
        "num_ids": 448,
        "indeed": false
    },
    {
        "number": 4120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = [list(map(int, line.split())) for line in stdin.split('\\n')[1:][:m]]\n    visited = [False] * (n + 1)\n    visited[1] = True\n\n    def bfs(city):\n        queue = [(city, 0)]\n        while queue:\n            city, distance = queue.pop(0)\n            for next_city, cost in roads:\n                if not visited[next_city]:\n                    visited[next_city] = True\n                    queue.append((next_city, distance + cost))\n\n    def dfs(city):\n        for next_city, cost in roads:\n            if not visited[next_city]:\n                visited[next_city] = True\n                dfs(next_city)\n                visited[next_city] = False\n\n    ways = 0\n    for _ in range(k):\n        bfs(1)\n        ways += 1\n        dfs(1)\n        ways += 1\n\n    return str(ways)",
        "test": "assert solution(",
        "num_ids": 760,
        "indeed": false
    },
    {
        "number": 4121,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(cur_height: int, start: int, max_height: int, result: List[int]):\n        if cur_height == max_height:\n            result.append(start)\n        for i in range(start, n):\n            if a[i] == cur_height:\n                dfs(cur_height + 1, i + 1, max_height, result)\n            elif a[i] == cur_height - 1:\n                dfs(cur_height, i, max_height, result)\n            elif a[i] == cur_height - 2:\n                dfs(cur_height - 1, i, max_height, result)\n\n    n, *a = list(map(int, stdin.split()))\n    max_height = max(a)\n    result = []\n    dfs(0, 0, max_height, result)\n    if not result:\n        return \"NO\"\n    return \"YES\"\n",
        "test": "assert solution(stdin=\"3\\n1 2 3\") == \"NO\"",
        "num_ids": 1115,
        "indeed": false
    },
    {
        "number": 4122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    h, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()[1:]))\n    i = 0\n    while i < n and d[i]!= 0:\n        i += 1\n    if i == n:\n        return -1\n    k = i * 6\n    return str(k)\n\ninput_example = '1000 6\\n-100 -200 -300 125 77 -4'\noutput_example = solution(input_example)\nprint(output_example)\n\ninput_example_2 = '1000000000000 5\\n-1 0 0 0 0'\noutput_example_2 = solution(input_example_2)\nprint(output_example_2)\n\ninput_example_3 = '10 4\\n-3 -6 5 4'\noutput_example_3 = solution(input_example_3)\nprint(output_example_3)",
        "test": "assert solution(\"10 4\\n-3 -6 5 4\\n\") == \"-1\"",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 4123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    two_gram_count = {}\n\n    for i in range(n - 1):\n        for j in range(i + 2, n):\n            two_gram = s[i:j + 1]\n            if two_gram in two_gram_count:\n                two_gram_count[two_gram] += 1\n            else:\n                two_gram_count[two_gram] = 1\n\n    max_count = 0\n    max_two_gram = \"\"\n\n    for two_gram, count in two_gram_count.items():\n        if count > max_count:\n            max_count = count\n            max_two_gram = two_gram\n\n    return max_two_gram",
        "test": "assert solution(\"ZZZAA\") == \"ZZ\"",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 4124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s = list(s)\n    t = list(t)\n    \n    moves = 0\n    count = 0\n    \n    while s!= t and count < len(s) * len(t):\n        if s[0] == t[0]:\n            s.pop(0)\n            t.pop(0)\n            count += 1\n            moves += 1\n        elif s[0] < t[0]:\n            s.pop(0)\n            count += 1\n            moves += 1\n        else:\n            t.pop(0)\n            count += 1\n            moves += 1\n    \n    return str(moves) if moves < len(s) * len(t) else str(len(s) + len(t))",
        "test": "assert solution(\"b\\nab\") == \"1\"",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 4125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.pop(x.index(X))\n    \n    x_set = set(x)\n    y_set = set(range(1, X+1))\n    \n    for i in range(N):\n        if x[i] not in x_set:\n            return \"Impossible\"\n    \n    def move(start, end):\n        return abs(end - start)\n    \n    moves = [move(x[i], X+D) for i in range(N) for D in range(2)]\n    moves.extend([move(x[i], X-D) for i in range(N) for D in range(2)])\n    \n    return str(max(moves))",
        "test": "assert solution(\"3 3\\n1 7 11\") == \"2\"",
        "num_ids": 592,
        "indeed": false
    },
    {
        "number": 4126,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n\n    if n % 2 == 0:\n        return \"No\"\n\n    left, right = 0, n - 1\n    while left < right:\n        if s[left]!= s[right]:\n            return \"No\"\n        left += 1\n        right -= 1\n\n    # Check if the first half is a palindrome\n    first_half = s[0:int((n - 1) / 2)]\n    if first_half == first_half[::-1]:\n        # Check if the second half is a palindrome\n        second_half = s[int((n - 1) / 2) + 1:]\n        if second_half == second_half[::-1]:\n            return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"akasaka\") == \"Yes\"",
        "num_ids": 549,
        "indeed": true
    },
    {
        "number": 4127,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    result = int(A * B)\n    return str(result)",
        "test": "assert solution(\"198 1.10\") == \"217\"",
        "num_ids": 202,
        "indeed": false
    },
    {
        "number": 4128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.strip())\n    for i in range(test_cases):\n        n = int(stdin.strip())\n        a, b = 0, 0\n        ways = 0\n        for _ in range(n//2):\n            a += 1\n            b += 1\n            if a+b == n:\n                ways += 1\n            a -= 1\n            b -= 1\n        if a+b == n:\n            ways += 1\n        print(ways)\n\ndef",
        "test": "assert solution(\"6\\n7\\n1\\n2\\n3\\n2000000000\\n763243547\\n\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"",
        "num_ids": 530,
        "indeed": false
    },
    {
        "number": 4129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def bellman_ford(cities, roads, start):\n        n = len(cities)\n        distances = [float('inf')] * (n + 1)\n        distances[start] = 0\n\n        for _ in range(n - 1):\n            for u, v, w in roads:\n                if distances[u]!= float('inf') and distances[u] + w < distances[v]:\n                    distances[v] = distances[u] + w\n\n        for u, v, w in roads:\n            if distances[u]!= float('inf') and distances[u] + w < distances[v]:\n                print(-1)\n                return\n\n        print(min(distances[i] for i in range(1, n + 1)))\n\n    n, m, s = map(int, stdin.split())\n    cities = list(map(int, stdin.split()))\n\n    roads = []\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        roads.append((u, v, 1))\n        roads.append((v, u, 1))\n\n    bellman_ford(cities, roads, s)\n",
        "test": "assert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"1\"",
        "num_ids": 1013,
        "indeed": false
    },
    {
        "number": 4130,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    count = 1\n    max_weight = a[0]\n    for i in range(1, n):\n        if a[i] - max_weight >= 1:\n            count += 1\n            max_weight = a[i]\n    return str(count)",
        "test": "assert solution(\"4\\n3 2 4 1\") == \"4\"",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 4131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prefectures = {}\n    for i in range(1, n + 1):\n        prefectures[i] = []\n    for i in range(m):\n        city, prefecture, year = map(int, stdin.split())\n        prefectures[prefecture].append((city, year))\n    for p, cities in prefectures.items():\n        cities.sort(key=lambda x: x[1])\n        for i, (city, year) in enumerate(cities):\n            print(\"{:06d}\".format(p * 1000000 + i + 1), end=\"\")\n        print()\n\nstdin = '''\n2 3\n1 32\n2 63\n1 12\n'''\n\nsolution(stdin)",
        "test": "assert solution(",
        "num_ids": 635,
        "indeed": false
    },
    {
        "number": 4132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = sorted(a)\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                a[i], a[j] = a[j], a[i]\n\n    return str(a[-1])",
        "test": "assert solution(\"4\\n2 10 8 40\\n\") == \"2\", \"Sample Input: 4\\n2 10 8 40\\nOutput: 2\\nExpected Output: 2\"",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 4133,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    jaws_shape = stdin.split(\":\")[0]\n    if jaws_shape!= \"?\" and not set(jaws_shape).issubset(set(\"0123456789\")):\n        return \"false\"\n\n    jaws_shape_dict = {\"0\": 0, \"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9}\n    variables = list(jaws_shape)\n    variables = [jaws_shape_dict[i] for i in variables]\n\n    def get_sequence(variables: List[int]) -> str:\n        sequence = \"\"\n        for variable in variables:\n            sequence += str(variable)\n        return sequence\n\n    def feed_golorp(golorp_name: str, variables: List[int]) -> str:\n        for i in range(len(variables)):\n            if variables[i] == 0:\n                return \"false\"\n        if not set(variables).issubset(set(\"0123456789\")):\n            return \"false\"\n        for i in range(len(variables)):\n            variables[i] += 1\n            if variables[i] > 9:\n                variables[i] = 0\n        return get_sequence(variables)\n\n    golorp_name = stdin.split(\":\")[1].strip()\n    sequence = feed_golorp(golorp_name, variables)\n    return sequence\n",
        "test": "assert solution('?(__-_+_/_____)') == 'false'",
        "num_ids": 1243,
        "indeed": false
    },
    {
        "number": 4134,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n    xor_sum = sum(a[0][j] ^ a[i][0] for i in range(1, n) for j in range(1, m))\n    \n    if k == xor_sum:\n        print(1)\n    else:\n        ans = 0\n        visited = set()\n        stack = [(0, 0)]\n        while stack:\n            i, j = stack.pop()\n            if (i, j) == (n - 1, m - 1) and k == sum(a[i][j] ^ a[i][j + 1] ^ a[i + 1][j] ^ a[i + 1][j + 1] for i in range(n) for j in range(m - 1)):\n                ans += 1\n                break\n            if (i, j) in visited:\n                continue\n            visited.add((i, j))\n            if i < n - 1:\n                stack.append((i + 1, j))\n            if j < m - 1:\n                stack.append((i, j + 1))\n        print(ans)",
        "test": "assert solution(\"3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n\") == \"0\\n\"",
        "num_ids": 1114,
        "indeed": false
    },
    {
        "number": 4135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = stdin.split()[1]\n    \n    def reverse_substring(substring: str, start: int, end: int) -> str:\n        return substring[:end][::-1] + substring[end:][::-1]\n    \n    for d in range(n, 0, -1):\n        t = reverse_substring(t, 1, d)\n    \n    return t",
        "test": "assert solution(\"z\") == \"z\"",
        "num_ids": 341,
        "indeed": false
    },
    {
        "number": 4136,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)",
        "test": "assert solution(\"5 14\") == \"19\"",
        "num_ids": 166,
        "indeed": true
    },
    {
        "number": 4137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    bf_code = []\n    for char in stdin:\n        bf_code.append(char)\n        if char in \"+-<>\":\n            bf_code.append(char)\n            bf_code.append(char)\n    bf_code = \"\".join(bf_code)\n    return bf_code",
        "test": "assert solution(\"9-7\") == \"+++++++++>\\\\n+++++++>\\\\n<[<->-]<\\\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\\\n\"",
        "num_ids": 1829,
        "indeed": false
    },
    {
        "number": 4138,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    q, = map(int, stdin.split())\n    sequence = list(map(int, stdin.split()))\n    sequence.insert(0, 1)\n    for i in range(1, len(sequence)):\n        sequence.insert(i + 1, sequence[i] + sequence[i - 1])\n\n    def digit_at_position(k: int) -> int:\n        return str(sequence[k])[k - 1]\n\n    return \"\\n\".join(str(digit_at_position(k)) for k in range(1, len(sequence) + 1))\n\n\ndef",
        "test": "assert solution(\"4\\n2132\\n506\\n999999999999999999\\n1000000000000000000\\n\") == \"8\\n2\\n4\\n1\\n\"",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 4139,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n\n    def check_seven_five_three(num: int) -> bool:\n        num_str = str(num)\n        for digit in num_str:\n            if digit == '7' or digit == '5' or digit == '3':\n                if digit not in num_str[1:]:\n                    return False\n        return True\n\n    for num in range(1, N + 1):\n        if check_seven_five_three(num):\n            count += 1\n            if count == 4:\n                break\n\n    return str(count)",
        "test": "assert solution(\"575\") == \"4\", \"The output of the sample input is incorrect.\"",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 4140,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    S = stdin\n\n    # Initialize the color of each tile\n    color = [0] * n\n\n    # Iterate over the tiles from left to right\n    for i in range(n):\n        # If the character is 0, paint the tile black\n        if S[i] == '0':\n            color[i] = 0\n        # If the character is 1, paint the tile white\n        elif S[i] == '1':\n            color[i] = 1\n\n    # Initialize the number of repainted tiles\n    repainted = 0\n\n    # Iterate over all possible pairs of tiles\n    for i in range(n):\n        for j in range(i + 1, n):\n            # Check if the colors are different\n            if color[i]!= color[j]:\n                # If the condition is satisfied, increment the number of repainted tiles\n                repainted += 1\n\n    return str(repainted)",
        "test": "assert solution(\"101\") == \"2\"",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 4141,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:n+1]))\n    \n    even_numbers = [x for x in arr if x % 2 == 0]\n    even_divisible_by_3_or_5 = [x for x in even_numbers if x % 3 == 0 or x % 5 == 0]\n    \n    if even_divisible_by_3_or_5:\n        return 'APPROVED'\n    else:\n        return 'DENIED'",
        "test": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\", \"Test failed for sample input 1\"",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 4142,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    odd_positions = ['R', 'U', 'D']\n    even_positions = ['L', 'U', 'D']\n\n    if len(S) < 2:\n        return \"No\"\n\n    for i in range(len(S)):\n        if i % 2 == 0:\n            if S[i] not in even_positions:\n                return \"No\"\n        else:\n            if S[i] not in odd_positions:\n                return \"No\"\n\n    return \"Yes\"",
        "test": "assert solution('RRDURU') == 'No'",
        "num_ids": 502,
        "indeed": false
    },
    {
        "number": 4143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d, e = map(int, stdin.split())\n    train_count, bus_count, taxi_count = 0, 0, 0\n    for i in range(1, 7):\n        train_count += (i * a) // 60\n        bus_count += ((i - 1) * b) // 60\n        taxi_count += ((i - 2) * c) // 60\n    airplane_count = n - train_count - bus_count - taxi_count\n    ship_count = n - airplane_count - train_count - bus_count\n    time_needed = 1 + min(train_count, bus_count, taxi_count, airplane_count, ship_count)\n    return str(time_needed)\n\ndef",
        "test": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\\n\") == \"7\"",
        "num_ids": 1574,
        "indeed": false
    },
    {
        "number": 4144,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    mod = 10**9 + 7\n\n    def is_valid_sequence(sequence: list[int]) -> bool:\n        i = 0\n        while i < len(sequence) - 1:\n            if sequence[i] == 0 and sequence[i + 1] == 9:\n                return False\n            elif sequence[i] == 9 and sequence[i + 1] == 0:\n                return False\n            i += 1\n        return True\n\n    count = 0\n    for i in range(1, 10):\n        sequence_1 = [i, 9]\n        sequence_2 = [9, i]\n        if is_valid_sequence(sequence_1) and is_valid_sequence(sequence_2):\n            count += 1\n\n    return str(count % mod)\n\ndef",
        "test": "assert solution(\"2\\n\") == \"2\"",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 4145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    is_prime = [True] * (x + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    \n    for i in range(2, int(x ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i ** 2, x + 1, i):\n                is_prime[j] = False\n                \n    min_prime = None\n    \n    for i in range(x, 1, -1):\n        if is_prime[i]:\n            min_prime = i\n            break\n                \n    return str(min_prime)\n\ndef",
        "test": "assert solution('20') == '23'",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 4146,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *v = map(int, stdin.split())\n    pairs = set(zip(v[::2], v[1::2]))\n    if len(pairs) < 2:\n        return \"1\"\n\n    i = 0\n    while i < n - 2:\n        if v[i] == v[i + 2]:\n            return str(i + 1)\n        i += 1\n\n    return \"1\"\n",
        "test": "assert solution(\"4\\n3 1 3 2\") == \"1\"",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 4147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    mp_needed = 0\n    N, A, B, C = map(int, stdin.strip().split())\n    bamboos = [int(stdin.strip()) for _ in range(N)]\n    bamboos.sort()\n    bamboos.append(C)\n\n    for i in range(N - 1):\n        mp_needed += abs(bamboos[i] - bamboos[i + 1])\n\n    mp_needed += abs(bamboos[-1] - bamboos[N - 2])\n\n    return str(mp_needed)",
        "test": "assert solution(",
        "num_ids": 965,
        "indeed": false
    },
    {
        "number": 4148,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    S = stdin.split()[1]\n    alphabet = list(range(ord('A'), ord('Z') + 1))\n    s = ''.join([chr((ord(c) - ord('A') + N) % 26 + ord('A')) for c in S])\n    return s",
        "test": "assert solution('2\\nABCXYZ') == 'CDEZAB'",
        "num_ids": 377,
        "indeed": true
    },
    {
        "number": 4149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, *b = map(int, stdin.split())\n    b.sort()\n    a = b.copy()\n    p = 3\n    while p * p <= n:\n        if n % p == 0:\n            a.append(p)\n            n //= p\n        else:\n            p += 2\n    a.extend(p for p in range(5, n+1) if is_prime(p))\n    a.sort()\n    return''.join(str(i) for i in a)\n\n\ndef",
        "test": "assert solution(\"1\\n3 6\") == \"6 \"",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 4150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    students = list(map(int, stdin.split()[1:]))\n    \n    for _ in range(n // 2):\n        team = students.index(max(students))\n        if len(team) > k:\n            students.pop(team - k)\n        students.pop(team)\n        students.append(students.pop(team))\n    \n    return ''.join(str(1) if i in students[:n // 2] else str(2) for i in range(n))",
        "test": "assert solution('5 1\\n2 4 5 3 1') == '21112'",
        "num_ids": 910,
        "indeed": false
    },
    {
        "number": 4151,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    b = monotonic_renumeration(a)\n\n    mod = 998244353\n\n    b = [x % mod for x in b]\n\n    b = list(set(b))\n\n    return str(len(b))\n\ndef",
        "test": "assert solution(\"4\\n1 3 3 7\\n\") == \"4\"",
        "num_ids": 963,
        "indeed": false
    },
    {
        "number": 4152,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    good = True\n    for i in range(1, len(a)):\n        if a[i] == a[i-1]:\n            good = False\n            break\n        if a[i] == 0 or a[i] & (a[i] - 1):\n            good = False\n            break\n        if a[i] & (a[i] + 1):\n            good = False\n            break\n    \n    if good:\n        return \"0\"\n    \n    min_count = n\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i] + a[j]) & (a[i] + a[j] - 1):\n                min_count = min(min_count, j - i)\n    \n    return str(min_count)\n\ninput = '''6\n4 7 1 5 4 9\n5\n1 2 3 4 5\n1\n16\n4\n1 1 1 1023'''\n\nprint(solution(input))",
        "test": "assert solution(\"6\\n4 7 1 5 4 9\") == \"1\"",
        "num_ids": 688,
        "indeed": false
    },
    {
        "number": 4153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    cubes = [[0, 0] for _ in range(n)]\n    count = 0\n\n    for i in range(n):\n        if stdin[i] == '0':\n            cubes[i][0] = 1\n        else:\n            cubes[i][1] = 1\n\n    for _ in range(n - 1):\n        removed = 0\n        for i in range(n):\n            if cubes[i][0] == 1 and cubes[i][1] == 1:\n                if i == 0:\n                    cubes[0][0] = 0\n                    cubes[0][1] = 0\n                elif i == n - 1:\n                    cubes[i - 1][0] = 0\n                    cubes[i - 1][1] = 0\n                else:\n                    cubes[i - 1][0] = 0\n                    cubes[i - 1][1] = 0\n                    cubes[i + 1][0] = 0\n                    cubes[i + 1][1] = 0\n                    removed += 2\n        count += removed\n\n    return str(count)",
        "test": "assert solution(\"0011\") == \"4\"",
        "num_ids": 761,
        "indeed": false
    },
    {
        "number": 4154,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    L = list(map(int, stdin.split()))\n    R = list(map(int, stdin.split()))\n\n    count = 0\n\n    for i in range(N):\n        for j in range(i, N):\n            for k in range(j, N):\n                if L[i] < L[j] < R[k] < R[i]:\n                    count += 1\n\n    return str(count)\n\nsample_input = \"\"\"\n4 2\n1 3\n2 4\n\"\"\"\nprint(solution(sample_input))",
        "test": "assert solution(\"2 2\\n1 1\\n1 1\") == \"1\\n\"",
        "num_ids": 544,
        "indeed": false
    },
    {
        "number": 4155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input values\n    N = int(stdin.split()[0])\n    h = list(map(int, stdin.split()[1:]))\n\n    # Sort the heights in ascending order\n    h.sort()\n\n    # Initialize the minimum watering operations\n    min_watering_operations = 0\n\n    # Iterate through the flowers\n    for i in range(N - 1):\n        # If the height of the next flower is less than the current flower\n        if h[i + 1] < h[i]:\n            # Increment the minimum watering operations\n            min_watering_operations += 1\n\n    # Return the minimum watering operations\n    return str(min_watering_operations)\n",
        "test": "assert solution(\"4\\n1 2 2 1\\n\") == \"2\"",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 4156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.append(a[0] - 1)\n    a.sort()\n    mod = 10 ** 9 + 7\n    dp = [[0] * (w + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(w, -1, -1):\n            dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - a[i - 1]] + mod) % mod\n\n    return str(dp[n][w])",
        "test": "assert solution('10 3\\n-1 -1 -1 -1 -1 -1 -1 -1 -1\\n') == '10'",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 4157,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    \n    for i in range(1, n):\n        a[i] *= 2 if i % 2 == 0 else 1\n    \n    for i in range(n - 2, -1, -1):\n        a[i] //= 3 if i % 3 == 0 else 1\n    \n    return''.join(map(str, a))",
        "test": "assert solution(input()) == '3000000000000000000 1000000000000000000'",
        "num_ids": 761,
        "indeed": false
    },
    {
        "number": 4158,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *points = map(int, stdin.split())\n    points.sort()\n    max_size = 0\n    max_subset = []\n    for i in range(len(points) - 1):\n        if abs(points[i] - points[i + 1]) == 2 ** i:\n            max_subset.append(points[i])\n            max_size += 1\n    max_subset.sort()\n    print(max_size)\n    print(*max_subset)\n    return ''",
        "test": "assert solution(\"5\\n-1 2 5 8 11\") == \"1\\n8\"",
        "num_ids": 772,
        "indeed": false
    },
    {
        "number": 4159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    cookies = [A, B]\n    for _ in range(K):\n        if A > 0:\n            cookies[0] -= 1\n            A -= 1\n        if B > 0:\n            cookies[1] -= 1\n            B -= 1\n        if cookies[0] == 0 and cookies[1] == 0:\n            break\n    print(cookies[0], cookies[1])\n    return \"\"",
        "test": "assert solution('2 3 3') == '0 2'",
        "num_ids": 366,
        "indeed": false
    },
    {
        "number": 4160,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    initial_balance = 100\n    interest_rate = 0.01\n    num_years = 0\n\n    while initial_balance < X:\n        initial_balance *= 1 + interest_rate\n        num_years += 1\n\n    return str(num_years)",
        "test": "assert solution(\"103\") == \"3\"",
        "num_ids": 223,
        "indeed": false
    },
    {
        "number": 4161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    if 1 <= K <= 200:\n        sum_gcd = 0\n        for i in range(1, K + 1):\n            for j in range(1, K + 1):\n                for k in range(1, K + 1):\n                    sum_gcd += gcd(i, j, k)\n        return str(sum_gcd)\n    else:\n        return \"\"\n\ndef",
        "test": "assert solution(\"2\") == \"9\", \"Test Case 1: Sample Output\"",
        "num_ids": 245,
        "indeed": false
    },
    {
        "number": 4162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    input_values = list(map(int, stdin.split()))\n    a = input_values[1:]\n    return str(max(sum(a[i] * (m % a[i]) for i in range(len(a))) for m in range(1, 2**15 + 1)))",
        "test": "assert solution(\"10000\\n1 2 3 4 5 6 7 8 9 10\\n\") == \"140840\\n\"",
        "num_ids": 575,
        "indeed": false
    },
    {
        "number": 4163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    dice = [list(map(int, stdin.split()[i:i+2])) for i in range(0, n*2, 2)]\n    \n    doublets = 0\n    for i in range(n-2):\n        if dice[i+1][1] == dice[i][1] == dice[i+2][1]:\n            doublets += 1\n    \n    if doublets >= 3:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2') == 'Yes'",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 4164,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    if r < 1 or r > 100:\n        raise ValueError(\"r must be between 1 and 100\")\n\n    result = (r * r) / (1 * 1)\n    print(int(result))\n    return str(int(result))",
        "test": "assert solution(\"2\") == \"4\"",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 4165,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    N, *lengths = map(int, stdin.split())\n    longest_side = max(lengths)\n    if longest_side > sum(lengths[:-1]):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"6\\n1 2 3 4 5 6\") == \"No\"",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 4166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n\n    def gcd(a: int, b: int) -> int:\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    s = [i * 10 ** (m - 1) + j for i, j in zip(s, c)]\n    s.sort()\n\n    def helper(start: int, end: int, cur_sum: int) -> int:\n        nonlocal s, n, m, c\n\n        if start >= end:\n            return cur_sum\n\n        i = start\n        while s[i] >= cur_sum * 10 ** (m - 1):\n            i += 1\n\n        if i == end:\n            return -1\n\n        j = i\n        while s[j] <= cur_sum * 10 ** (m - 1):\n            j += 1\n\n        if j == end:\n            return -1\n\n        lcm_val = lcm(s[i] - cur_sum * 10 ** (m - 1), s[j] - cur_sum * 10 ** (m - 1))\n\n        if lcm_val * 10 ** (m - 1) == s[i] - cur_sum * 10 ** (m - 1):\n            if s[i] - cur_sum * 10 ** (m - 1) == s[j] - cur_sum * 10 ** (m - 1):\n                return helper(i + 1, j, cur_sum)\n            return helper(i + 1, j, cur_sum + 1)\n\n        if lcm_val * 10 ** (m - 1) == s[j] - cur_sum * 10 ** (m - 1):\n            return helper(i, j - 1, cur_sum)\n        return helper(i, j - 1, cur_sum + 1)\n\n    result = helper(0, len(s) - 1, 0)\n\n    if result == -1:\n        print(-1)\n    else:\n        print(result // 10 ** (m - 1))",
        "test": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\", \"The output is incorrect.\"",
        "num_ids": 883,
        "indeed": false
    },
    {
        "number": 4167,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            for c in range(1, n+1):\n                if a % k == 0 and b % k == 0 and c % k == 0:\n                    count += 1\n    return str(count)\n\nprint(solution(input()))",
        "test": "assert solution(\"3 2\") == \"9\", \"Sample Input and Output does not match\"",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 4168,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # Base -2 representation of N\n    S = ''\n    for i in range(N.bit_length()):\n        if N & (1 << i):\n            S += '1'\n        else:\n            S += '0'\n    return S",
        "test": "assert solution(\"0\") == \"0\"",
        "num_ids": 360,
        "indeed": false
    },
    {
        "number": 4169,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    drinks = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        drinks.append((a, b))\n    drinks.sort(key=lambda x: (-x[0], x[1]))\n    total_cost = 0\n    buy_count = 0\n    for i in range(n):\n        while buy_count < m:\n            if buy_count == 0 or total_cost + drinks[i][0] <= m:\n                buy_count += 1\n                total_cost += drinks[i][0]\n        if total_cost >= m:\n            break\n        buy_count = 0\n        total_cost = 0\n    return str(total_cost)\n\nwith open('input.txt', 'r') as f:\n    stdin = f.read().strip()\nprint(solution(stdin))",
        "test": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"",
        "num_ids": 490,
        "indeed": false
    },
    {
        "number": 4170,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, *heights = map(int, stdin.split())\n    heights = sorted(heights)\n    left, right = 0, n - 1\n    max_moves = 0\n    while left <= right:\n        current_height = heights[left]\n        if current_height == heights[right]:\n            left += 1\n            right -= 1\n        else:\n            max_moves += 1\n            left += 1\n            right -= 1\n    return str(max_moves)\n\nwith open(\"input.txt\") as f:\n    input_data = f.read()\n\noutput_data = solution(input_data)\n\nwith open(\"output.txt\", \"w\") as f:\n    f.write(output_data)",
        "test": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 4171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    moves = 0\n    i = 0\n    equal_numbers = 0\n\n    while equal_numbers < k:\n        if a[i] % 2 == 0:\n            equal_numbers += 1\n        else:\n            a[i] //= 2\n            moves += 1\n\n        i = (i + 1) % n\n\n    return str(moves)",
        "test": "assert solution(input(\"\"\"\\",
        "num_ids": 769,
        "indeed": false
    },
    {
        "number": 4172,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    moves = 0\n    count = 0\n\n    for i in range(n):\n        if a[i] == a[i - 1]:\n            count += 1\n            if count >= k:\n                return str(moves)\n        elif a[i] < a[i - 1]:\n            count = 1\n            moves += 1\n        else:\n            count = 1\n            moves += 1\n\n    if count >= k:\n        return str(moves)\n    else:\n        return str(moves + 1)\n",
        "test": "assert solution('''6 5",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 4173,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    queries = [tuple(map(int, stdin.readline().split())) for _ in range(int(stdin.readline()))]\n    queries.sort(key=lambda x: x[0])\n    \n    dp = [0] * (1001)\n    dp[1] = 1\n    \n    for num_liters, a, b in queries:\n        dp[a] = min(dp[a], dp[b] + num_liters)\n        dp[a+1] = min(dp[a+1], dp[b] + num_liters)\n        \n    return''.join(str(dp[a]) for a in range(1, 1001))\n\nwith open('input.txt', 'r') as file:\n    input_data = file.read()\n\noutput = solution(input_data)\n\nwith open('output.txt', 'w') as file:\n    file.write(output)",
        "test": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 4174,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    d = [0] + [l[i - 1] + d[i - 1] for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        if d[i] <= x:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"3 6\\n3 4 5\") == \"2\"",
        "num_ids": 315,
        "indeed": false
    },
    {
        "number": 4175,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    words = stdin.split('\\n')[1:]\n\n    valid_words = set()\n    for word in words:\n        if len(word) <= 1 or len(word) >= 11:\n            return 'No'\n        if word[0]!= word[-1]:\n            return 'No'\n        if word in valid_words:\n            return 'No'\n        valid_words.add(word)\n\n    return 'Yes'",
        "test": "assert solution(\"4\\nhoge\\nenigma\\nhoge\\n\") == \"No\"",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 4176,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return \"No solution\"\n    total_pieces = a + b\n    min_pieces = min(a, b)\n    max_pieces = max(a, b)\n\n    for i in range(1, min_pieces + 1):\n        if (total_pieces % i) == 0:\n            for j in range(1, max_pieces + 1):\n                if (total_pieces // i) % j == 0:\n                    return i * j\n    return \"No solution\"",
        "test": "assert solution(\"1 1\") == \"1\"",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 4177,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(['x' if char.islower() else char for char in stdin])",
        "test": "assert solution(\"sardine\") == \"xxxxxxx\"",
        "num_ids": 115,
        "indeed": true
    },
    {
        "number": 4178,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = map(int, stdin.split())\n\n    def can_perform_operations(H):\n        for i in range(1, len(H)):\n            if H[i - 1] > H[i]:\n                return False\n        return True\n\n    if can_perform_operations(H):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n",
        "test": "assert solution(\"5\\n1 2 1 1 3\\n\")!= \"No\"",
        "num_ids": 271,
        "indeed": false
    },
    {
        "number": 4179,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = map(int, stdin.split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    A_set = set(A)\n    B_set = set(B)\n\n    count = 0\n    for i in range(n):\n        if A_set.issubset(A) and B_set.issubset(B):\n            if sum(A) + c > 0:\n                count += 1\n\n    print(count)\n    return \"\"\n",
        "test": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"",
        "num_ids": 539,
        "indeed": false
    },
    {
        "number": 4180,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    bills = [1000] * 2\n\n    while N > 0:\n        if N >= bills[0]:\n            N -= bills[0]\n        else:\n            change = 1000 - N\n            N = 0\n            bills[1] = change\n\n    return str(change)",
        "test": "assert solution(\"1900\") == \"100\"",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 4181,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:N+1]))\n    B = list(map(int, stdin.split()[N+1:]))\n    max_monsters = 0\n\n    for i in range(N):\n        max_monsters += max(A[i], A[i+1])\n\n    for i in range(N):\n        max_monsters += max(A[i], B[i])\n\n    for i in range(N-1):\n        max_monsters += max(B[i], B[i+1])\n\n    return str(max_monsters)\n\nwith open(\"input.txt\", \"r\") as file:\n    input_data = file.read()\n\nprint(solution(input_data))",
        "test": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\"",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 4182,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split())\n    x_list = list(map(int, input().split()))\n    y_list = list(map(int, input().split()))\n\n    if X < Z <= Y and all(x < Z for x in x_list) and all(y >= Z for y in y_list):\n        return \"War\"\n    else:\n        return \"No War\"",
        "test": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\\n\"",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 4183,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, *T = map(int, stdin.split())\n    T = [T[i] % (2 * 360) for i in range(N)]\n    T.sort()\n    time = 0\n    count = 0\n    for i in range(N):\n        time += T[i]\n        count += 1\n        if time >= 360:\n            time -= 360\n            count += 1\n            time %= 360\n    return str(count)",
        "test": "assert solution(\"5\\n1\\n5\\n10\\n15\\n\") == \"460\"",
        "num_ids": 377,
        "indeed": false
    },
    {
        "number": 4184,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1:]))\n    T = 2\n\n    # Find the sum of the weights in each group\n    S1 = sum(weights[:T])\n    S2 = sum(weights[T:])\n\n    # Find the minimum possible absolute difference\n    min_diff = abs(S1 - S2)\n\n    for t in range(1, n):\n        # Update the group masses\n        S1 += weights[t]\n        S2 -= weights[t]\n\n        # Update the minimum possible absolute difference\n        curr_diff = abs(S1 - S2)\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n\n    return str(min_diff)\n",
        "test": "assert solution(\"1\\n1 2\\n\") == \"3\"",
        "num_ids": 469,
        "indeed": false
    },
    {
        "number": 4185,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0].split())\n    matrix = [list(map(int, stdin.split()[1:n+1])) for _ in range(n)]\n    \n    moves = 0\n    for i in range(m):\n        column = []\n        for j in range(n):\n            if i < n:\n                column.append(matrix[j][i])\n            else:\n                column.append(matrix[j][i - n])\n                \n        max_num = max(column)\n        min_num = min(column)\n        \n        if max_num == min_num:\n            return str(moves)\n        elif max_num < min_num:\n            for j in range(n):\n                if column[j] < min_num:\n                    matrix[j][i] += min_num - column[j]\n                    moves += min_num - column[j]\n                    break\n            for j in range(n):\n                if matrix[j][i] > max_num:\n                    matrix[j][i] = max_num\n                    moves += matrix[j][i] - max_num\n                    break\n        else:\n            for j in range(n):\n                if column[j] > max_num:\n                    matrix[j][i] -= column[j] - max_num\n                    moves += column[j] - max_num\n                    break\n            for j in range(n):\n                if matrix[j][i] < min_num:\n                    matrix[j][i] = min_num\n                    moves += min_num - matrix[j][i]\n                    break\n                \n    return str(moves)",
        "test": "assert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == \"2\"",
        "num_ids": 1100,
        "indeed": false
    },
    {
        "number": 4186,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n\n    a.sort()\n\n    min_problems = 0\n    for i in range(0, n, 2):\n        if a[i]!= a[i+1]:\n            min_problems += a[i]\n\n    return str(min_problems)",
        "test": "assert solution(\"2\\n1 100\\n\") == \"99\", \"Invalid output for example 2\"",
        "num_ids": 406,
        "indeed": false
    },
    {
        "number": 4187,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split()[1:]]\n    max_rest = 0\n    count = 0\n\n    for i in range(n):\n        if a[i] == 0:\n            count += 1\n        else:\n            if count > max_rest:\n                max_rest = count\n            count = 0\n\n    return str(max_rest)",
        "test": "assert solution(\"3\\n0 0 0\\n\") == \"0\"",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 4188,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    facts = [\n        \"The highest mountain above sea level in the world is Mount Everest. Its peak rises to 8848 m.\",\n        \"The largest board game tournament consisted of 958 participants playing chapaev.\",\n        \"The largest online maths competition consisted of 12766 participants.\",\n        \"The Nile is credited as the longest river in the world.\",\n        \"From its farthest stream in Burundi, it extends 6695 km in length.\",\n        \"While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\",\n        \"Angel Falls is the highest waterfall. Its greatest single drop measures 807 m.\",\n        \"Hotel Everest View above Namche, Nepal \u2014 the village closest to Everest base camp \u2013 is at a record height of 31962 m Uranium is the heaviest of all the naturally occurring elements.\",\n        \"Its most common isotope has a nucleus containing 146 neutrons.\",\n        \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\",\n        \"The longest snake held in captivity is over 25 feet long. Its name is Medusa.\",\n        \"Col<NAME> holds the world record for longest fur on a cat \u2014 almost 134 centimeters.\",\n        \"Sea otters can have up to 10000 hairs per square inch. This is the most dense fur in the animal kingdom.\",\n        \"The largest state of USA is Alaska; its area is 663268 square miles Alaska has a longer coastline than all of the other 49 U.S. States put together: it is 154103 miles long.\",\n        \"Lake Baikal is the largest freshwater lake in the world. It reaches 1642 meters in depth and contains around one-fifth of the world\u2019s unfrozen fresh water.\",\n        \"The most colorful national flag is the one of Turkmenistan, with 106 colors.\"\n    ]\n    \n    facts_num = int(stdin)\n    if facts_num > 0 and facts_num <= 16:\n        return str(facts_num)\n    else:\n        return \"0\"",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 1331,
        "indeed": false
    },
    {
        "number": 4189,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = []\n    for line in stdin.splitlines():\n        name, cheese_type = line.strip().split()\n        cheeses.append((name, cheese_type))\n    cheeses.sort(key=lambda x: (-len(x[0]), x[0]))\n    result = len(cheeses)\n    return str(result)",
        "test": "assert solution(\"\"\"",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 4190,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *a, *b = map(int, stdin.split())\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    b = sorted(b)\n    c = sorted(c)\n    return''.join(map(str, b))",
        "test": "assert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\\n\") == \"0 0 0 1 0 2 4\"",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 4191,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    # convert the input to a list of digits\n    digits = list(map(int, stdin.split()))\n    \n    # count the number of 1's in the list\n    ones = digits.count(1)\n    \n    # output 0 if there are an odd number of 1's, otherwise output 1\n    if ones % 2!= 0:\n        return \"0\"\n    else:\n        return \"1\"",
        "test": "assert solution(\"1\\n0\\n0\\n1\") == \"1\"",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 4192,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    if d + t + s <= 10000:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"1000 15 80\") == \"Yes\"",
        "num_ids": 216,
        "indeed": false
    },
    {
        "number": 4193,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def print_board(grid: list[list[int]]) -> None:\n        for row in grid:\n            print(\" \".join(str(cell) for cell in row))\n\n    def mark_numbers(numbers: list[int], grid: list[list[int]]) -> None:\n        for i, row in enumerate(grid):\n            for j, num in enumerate(numbers):\n                row[j] = num\n\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == 0:\n                    grid[i][j] = -1\n\n    def check_bingo(grid: list[list[int]]) -> bool:\n        bingo_rows = [\n            [grid[i][j] for j in range(len(grid[i])) if grid[i][j]!= 0]\n            for i in range(len(grid))\n        ]\n        bingo_cols = [\n            [grid[j][i] for j in range(len(grid)) if grid[j][i]!= 0]\n            for i in range(len(grid[0]))\n        ]\n        bingo_diag1 = [\n            [grid[i][i] for i in range(len(grid))]\n            for i in range(len(grid))\n        ]\n        bingo_diag2 = [\n            [grid[i][-i-1] for i in range(len(grid))]\n            for i in range(len(grid))\n        ]\n\n        return (\n            all(any(i == num for num in row) for row in bingo_rows)\n            or all(any(i == num for num in col) for col in bingo_cols)\n            or any(any(i == num for num in diag) for diag in bingo_diag1)\n            or any(any(i == num for num in diag) for diag in bingo_diag2)\n        )\n\n    def main() -> None:\n        grid = []\n        for line in stdin.split(\"\\n\"):\n            row = [int(cell) for cell in line.split()]\n            grid.append(row)\n\n        N = int(stdin.split(\"\\n\")[1].split()[0])\n        numbers = [int(num) for num in stdin.split(\"\\n\")[2].split()[1:]]\n\n        mark_numbers(numbers, grid)\n        print_board(grid)\n\n        if check_bingo(grid):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n    main()\n",
        "test": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"",
        "num_ids": 1603,
        "indeed": false
    },
    {
        "number": 4194,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    days = 0\n    i = 0\n    while i < m:\n        days += A[i]\n        i += 1\n        if i < m and A[i] == A[i - 1]:\n            return -1\n    return days",
        "test": "assert solution(\"41 2\\n5 6\") == \"30\"",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 4195,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    \n    # find the smallest integer that can be divided by 100 exactly D times\n    num = 1\n    count = 0\n    for i in range(10):\n        if num % 100 == 0:\n            count += 1\n            if count == D:\n                break\n        num += 1\n    \n    # find the N-th smallest integer\n    if count < D:\n        return str(-1)\n    else:\n        num = 1\n        for i in range(N - 1):\n            if num % 100 == 0:\n                count += 1\n                if count == D:\n                    return str(num)\n            num += 1\n        return str(num)",
        "test": "assert solution(\"0 5\") == \"5\"",
        "num_ids": 516,
        "indeed": false
    },
    {
        "number": 4196,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, *A = map(int, stdin.split())\n    \n    # Calculate gcd\n    def gcd(a, b):\n        return gcd(b, a % b) if b else a\n\n    gcd_value = max(gcd(a, b) for a, b in zip(A, A[1:]))\n    \n    # Print output\n    return str(gcd_value)",
        "test": "assert solution(\"3\\n7 6 8\\n\") == \"2\"",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 4197,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = map(int, stdin.split())\n    A = [0] * n + A\n    students_entered = [False] * (n + 1)\n    \n    for a in A:\n        students_entered[a] = True\n    \n    result = []\n    for i in range(n + 1):\n        if students_entered[i]:\n            result.append(i)\n    \n    return \" \".join(map(str, result))",
        "test": "assert solution(input()) == \"3 1 2\"",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 4198,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def digits_count(n: int) -> int:\n        return len(str(n))\n\n    a, b, x = map(int, stdin.split())\n\n    # Find the largest integer that can be bought with the given currency\n    max_integer = 10 ** 9\n    for i in range(1, max_integer + 1):\n        current_integer = i * a + b * digits_count(i)\n        if current_integer <= x:\n            max_integer = i\n            break\n\n    return str(max_integer)",
        "test": "assert solution(\"10 7 100\") == \"9\"",
        "num_ids": 324,
        "indeed": false
    },
    {
        "number": 4199,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N, K = int(input_list[0]), int(input_list[1])\n    heights = list(map(int, input_list[2:N+2]))\n\n    valid_friends = 0\n    for i in range(N):\n        if heights[i] >= K:\n            valid_friends += 1\n\n    return str(valid_friends)",
        "test": "assert solution(\"4 150\\n150 140 100 200\\n\") == \"2\"",
        "num_ids": 346,
        "indeed": true
    },
    {
        "number": 4200,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    total_votes = sum(a)\n    popular_votes = sum(a[:m])\n\n    if popular_votes >= total_votes // 4:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"10 3\\n5 5 5 5 5 5 5 5 5 5\") == \"No\"",
        "num_ids": 757,
        "indeed": false
    },
    {
        "number": 4201,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    grid = [list(row) for row in stdin.split()[1:H+1]]\n\n    def paint(row, col):\n        if 1 <= row <= H and 1 <= col <= W:\n            grid[row-1][col-1] = '#'\n\n    def count_black_squares(row, col):\n        count = 0\n        if 1 <= row <= H:\n            for i in range(1, min(K, W+1)+1):\n                count += grid[row-1][col-i].count('#')\n        if 1 <= col <= W:\n            for i in range(1, min(K, H+1)+1):\n                count += grid[row-i][col-1].count('#')\n        return count\n\n    def count_choices():\n        count = 0\n        for row in range(1, H+1):\n            for col in range(1, W+1):\n                if grid[row-1][col-1] == '.':\n                    if count_black_squares(row, col) == K:\n                        count += 1\n        return count\n\n    return str(count_choices())\n\ndef",
        "test": "assert solution(\"6 4 3\\n.##.\\n#..#\\n...\") == \"6\"",
        "num_ids": 873,
        "indeed": false
    },
    {
        "number": 4202,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    mod = 2019\n    count = 0\n    while L <= R:\n        i = (L + R) // 2\n        if (i * i) % mod == 0:\n            count += (R - L + 1) // 2\n            L = i + 1\n        else:\n            R = i - 1\n    return str(count)",
        "test": "assert solution(\"2020 2040\") == \"2\\n\", \"Sample Input: 2020 2040, Expected Output: 2\\n\"",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 4203,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if not S or S[0]!= 'A' or S.count('C')!= 1:\n        return 'WA'\n    for i in range(2, len(S) - 1):\n        if S[i] == 'A':\n            return 'WA'\n    for c in S[3:-1]:\n        if c.isupper():\n            return 'WA'\n    return 'AC'",
        "test": "assert solution(\"Abc\") == \"WA\"",
        "num_ids": 353,
        "indeed": false
    },
    {
        "number": 4204,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, K = map(int, stdin.split())\n    result = ''\n    for _ in range(K):\n        result += str(2 * S + (S // 2) * (S % 2) * 10)\n        S = (S // 10) * 10 + 1\n    return result",
        "test": "assert solution(\"1214\\n4\") == \"2\"",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 4205,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1:]))\n    p.sort()\n\n    if p == list(range(1, N+1)):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"1\\n1\") == \"YES\"",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 4206,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(s: int, cuts: int, depth: int, result: List[int]) -> None:\n        if s == 0:\n            return\n        elif s % 3 == 0:\n            result.append(s)\n        elif depth == cuts:\n            return\n        else:\n            if s < 10:\n                dfs(s * 10 + 0, cuts, depth + 1, result)\n            if s < 100:\n                dfs(s * 10 + 1, cuts, depth + 1, result)\n            if s < 1000:\n                dfs(s * 10 + 2, cuts, depth + 1, result)\n\n    def count_divisible_by_3(s: int) -> int:\n        result = []\n        dfs(s, 10, 0, result)\n        return len(result)\n\n    s = int(stdin)\n    max_count = count_divisible_by_3(s)\n    print(max_count)",
        "test": "assert solution(\"201920181\") == \"4\"",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 4207,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *a, *b = map(int, stdin.split())\n    d_max = max(a) - min(a)\n    c = [d * ai + bi for ai, bi in zip(a, b)]\n    c.sort(reverse=True)\n    zero_count = 0\n    for i in range(n):\n        if c[i] == 0:\n            zero_count += 1\n        else:\n            break\n    return str(zero_count)",
        "test": "assert solution(",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 4208,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    l, r = map(str, stdin.split()[1:]).split()\n\n    def is_compatible(a, b):\n        if l[a] == r[b] or l[a] == '?' or r[b] == '?':\n            return True\n        if l[a] == '?' or r[b] == '?':\n            return True\n        return l[a] == l[b] or r[a] == r[b]\n\n    def max_compatible_pairs(n, l, r, start=0, end=1):\n        if start == end:\n            return 0 if l[start] == r[end] or l[start] == '?' or r[end] == '?' else 1\n        max_left, max_right = 0, 0\n        for i in range(start, end):\n            if l[i] == r[end]:\n                continue\n            if l[i] == '?' or r[end] == '?':\n                max_left, max_right = max(max_left, max_right), max(max_left, max_right)\n            else:\n                max_left, max_right = max(max_left, max_right), max(max_left + 1, max_right)\n        for i in range(end, n):\n            if l[start] == r[i]:\n                continue\n            if l[start] == '?' or r[i] == '?':\n                max_left, max_right = max(max_left, max_right), max(max_left, max_right)\n            else:\n                max_left, max_right = max(max_left, max_right), max(max_left + 1, max_right)\n        return max(max_left, max_right)\n\n    max_pairs = 0\n    pairs = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_compatible(i, j):\n                pairs.append((i, j))\n                max_pairs = max(max_pairs, max_compatible_pairs(n, l, r))\n            if is_compatible(j, i):\n                pairs.append((j, i))\n                max_pairs = max(max_pairs, max_compatible_pairs(n, l, r))\n\n    pairs.sort()\n    pairs_str = '\\n'.join(map(lambda x:''.join(map(str, x)), pairs))\n\n    return f'{max_pairs}\\n{pairs_str}'\n\n\ndef",
        "test": "assert solution(\"10\\ncode??????\\n??????test\\n\") == \"10\\n6 2\\n1 6\\n7 3\\n3 5\\n4 8\\n9 7\\n5 1\\n2 4\\n10 9\\n8 10\\ndef solution(stdin: str) -> str:\\n\\tpass\\n\"",
        "num_ids": 1728,
        "indeed": false
    },
    {
        "number": 4209,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    k = 0\n    i = 0\n    j = 0\n    while i < n - 1 and j < n:\n        if a[i] + a[i + 1] == a[j] + a[j + 1]:\n            k += 1\n            i += 1\n            j += 1\n        elif a[i] + a[i + 1] < a[j] + a[j + 1]:\n            i += 1\n        else:\n            j += 1\n    print(k)\n    for _ in range(k):\n        print(f\"{i} {j}\")\n        i += 1\n        j += 1\n    for _ in range(k):\n        print(f\"{i} {j}\")\n        i += 1\n        j += 1",
        "test": "assert solution('''7",
        "num_ids": 860,
        "indeed": false
    },
    {
        "number": 4210,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] % k == 0:\n                count += 1\n                \n    return str(count)",
        "test": "assert solution(\"5 2\\n3 7 19 3 3\\n\") == \"0\"",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 4211,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, *B = map(int, stdin.split())\n    A = [0] * N\n    A[0] = B[0]\n    A[1] = max(B[0], B[1])\n    for i in range(2, N):\n        A[i] = max(A[i-1], A[i-2]) + B[i]\n    return str(max(A))\n\nstdin = \"3\\n2 5\\n\"\nprint(solution(stdin))  # Output: 9",
        "test": "assert solution(input()) == '9'",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 4212,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    \n    def find_score(a, b, c, d):\n        score = 0\n        for i in range(Q):\n            if A[b[i] - 1] - A[a[i] - 1] == c[i]:\n                score += d[i]\n        return score\n    \n    max_score = 0\n    for i in range(1, N + 1):\n        for j in range(i + 1, N + 1):\n            current_score = find_score(A, [i, j], A[::-1] - (A[i] + A[j]), A[::-1] + (A[i] + A[j]))\n            if current_score > max_score:\n                max_score = current_score\n    \n    return str(max_score)",
        "test": "assert solution(",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 4213,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:n+1]))\n    \n    max_diff = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(A[j] - A[i])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return str(max_diff)",
        "test": "assert solution(\"4\\n1 4 6 3\\n\") == \"5\"",
        "num_ids": 374,
        "indeed": true
    },
    {
        "number": 4214,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *coordinates = map(int, stdin.split())\n    coordinates = list(zip(*coordinates))\n\n    def distance(town1, town2):\n        x1, y1 = coordinates[town1]\n        x2, y2 = coordinates[town2]\n        return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n    paths = [\n        [towns[0], towns[1]],\n        [towns[1], towns[2]],\n        [towns[2], towns[0]],\n    ]\n\n    for i in range(3, N):\n        towns = []\n        for path in paths:\n            if len(path) < i:\n                towns.append(path[-1])\n        paths.extend(\n            [(path[0], towns[0]), (towns[-1], path[-1])] for _ in range(i - 1)\n        )\n\n    total_length = sum(distance(path[0], path[-1]) for path in paths)\n    average_length = total_length / len(paths)\n\n    return f\"{average_length:.6f}\"\n\n\ndef",
        "test": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"",
        "num_ids": 818,
        "indeed": false
    },
    {
        "number": 4215,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    # check if the constraints are met\n    if not 1 <= A <= 100:\n        return \"A is out of range\"\n    if not 1 <= B <= 100:\n        return \"B is out of range\"\n    \n    # calculate the required horizontal length\n    required_length = 2 * A + 4 * B\n    \n    # calculate the uncovered horizontal length\n    uncovered_length = 2 * A + 2 * B\n    \n    # print the result\n    return str(required_length - uncovered_length)",
        "test": "assert solution(\"12 4\") == \"4\"",
        "num_ids": 305,
        "indeed": false
    },
    {
        "number": 4216,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    min_value = float('inf')\n    for a in range(1, N+1):\n        for b in range(1, N+1):\n            if a * b == N:\n                f = max(len(str(a)), len(str(b)))\n                if f < min_value:\n                    min_value = f\n    return str(min_value)",
        "test": "assert solution(\"10000\") == \"3\"",
        "num_ids": 379,
        "indeed": false
    },
    {
        "number": 4217,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = []\n    a = []\n    for i in range(n):\n        k.append(list(map(int, stdin.split())))\n        a.append(list(map(int, stdin.split())))\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if sum(a[i][j:j+k[i][j]]) == m:\n                ans += 1\n    print(ans)\n    return \"\"\n\ninput_str = \"3 4\\n2 1 3\\n3 1 2 3\\n2 3 2\"\nprint(solution(input_str))\n",
        "test": "assert solution(stdin) == expected_output",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 4218,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    odd_numbers = [i for i in range(1, N + 1, 2)]\n    odd_prob = len(odd_numbers) / N\n    return f'{odd_prob:.6f}'",
        "test": "assert solution(\"4\") == \"0.500000\"",
        "num_ids": 255,
        "indeed": false
    },
    {
        "number": 4219,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = map(int, stdin.split())\n    A = [list(map(int, x.split())) for x in stdin.split(':')]\n    A = [(i, A[i]) for i in range(n)]\n    A = {i: (x, y) for i, (x, y) in A}\n    testimonies = {i: [] for i in range(n)}\n\n    for i in range(n):\n        for j, x in A[i]:\n            if x!= i and (y := A[x][1])!= 1:\n                continue\n            testimonies[i].append((j, y))\n\n    honest_persons = 0\n    for i, t in testimonies.items():\n        if all(y == 1 for j, y in t):\n            honest_persons += 1\n            break\n\n    return str(honest_persons)",
        "test": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"",
        "num_ids": 566,
        "indeed": false
    },
    {
        "number": 4220,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.split())\n    s = s.lower()\n    if len(s) <= k:\n        return s\n    else:\n        return s[:k] + \"...\"",
        "test": "assert solution(\"7\\nnikoandsolstice\") == \"nikoand...\"\\",
        "num_ids": 188,
        "indeed": false
    },
    {
        "number": 4221,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s.endswith('s'):\n        plural = s + 'es'\n    else:\n        plural = s +'s'\n    return plural",
        "test": "assert solution(\"apple\") == \"apples\"",
        "num_ids": 203,
        "indeed": true
    },
    {
        "number": 4222,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    snakes = []\n    for i in range(1, N + 1):\n        snakes.append(list(map(int, stdin.split())))\n\n    snack_count = [0] * (K + 1)\n    for snake in snakes:\n        for snack in snake:\n            snack_count[snack] += 1\n\n    takahashi_count = 0\n    for i in range(1, N + 1):\n        if snack_count[i] == 0:\n            takahashi_count += 1\n\n    return str(takahashi_count)\n",
        "test": "assert solution(input()) == '1'",
        "num_ids": 548,
        "indeed": false
    },
    {
        "number": 4223,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    S = list(S)\n    slimes = [S[i] for i in range(N)]\n    colors = set(S)\n    max_slime = 0\n    max_color = None\n\n    while colors:\n        for color in colors:\n            color_count = S.count(color)\n            if color_count > max_slime:\n                max_slime = color_count\n                max_color = color\n        colors.remove(max_color)\n\n    return str(max_slime)\n",
        "test": "assert solution(\"10\\naabbbaaca\\n\") == \"5\"",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 4224,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    max_operations = 0\n    for i in range(1, n + 1):\n        if a[i - 1] % 2 == 0:\n            a[i - 1] *= 3\n            max_operations += 1\n        else:\n            a[i - 1] /= 2\n            max_operations += 1\n    return str(max_operations)",
        "test": "assert solution(\"3\\n5 2 4\") == \"3\"",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 4225,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    possible_sums = []\n    \n    def dfs(index, sum_so_far, current_sum):\n        if index == A:\n            if sum_so_far + current_sum > 0:\n                possible_sums.append(sum_so_far + current_sum)\n        elif index == A + B:\n            if sum_so_far + current_sum > 0:\n                possible_sums.append(sum_so_far + current_sum)\n        elif index == A + B + C:\n            if sum_so_far + current_sum > 0:\n                possible_sums.append(sum_so_far + current_sum)\n        elif index == A + B + C + 1:\n            if sum_so_far + current_sum >= 0:\n                possible_sums.append(sum_so_far + current_sum)\n        elif index == A + B + C + 2:\n            if sum_so_far + current_sum >= 0:\n                possible_sums.append(sum_so_far + current_sum)\n    \n    dfs(A, 0, 0)\n    dfs(A + B, 0, 1)\n    dfs(A + B + C, 0, 2)\n    dfs(A + B + C + 1, 1, 0)\n    dfs(A + B + C + 2, 1, 1)\n    \n    possible_sums.sort()\n    return str(possible_sums[-1])",
        "test": "assert solution(\"2 1 1 3\") == \"2\"",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 4226,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n\n    if x * 2 + y <= 8 and x * 2 + y >= 2:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"5 3\") == \"No\"",
        "num_ids": 199,
        "indeed": false
    },
    {
        "number": 4227,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        edges.append((a, b))\n\n    def dfs(start, visited, path):\n        if start in visited:\n            return 0\n\n        visited.add(start)\n        path.append(start)\n\n        if start == n:\n            return 1\n\n        count = 0\n        for end in range(1, n + 1):\n            if (end, start) not in edges and (start, end) not in edges:\n                count += dfs(end, visited, path)\n\n        path.pop()\n        return count\n\n    return str(dfs(1, set(), []))",
        "test": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\\n\") == \"2\"",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 4228,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n\n    apples = [L + i for i in range(N)]\n    flavors = sorted([sum(apples[:i+1]) for i in range(N)])\n\n    return str(abs(flavors[1] - flavors[0]))",
        "test": "assert solution(\"5 2\") == \"18\"",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 4229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = [1, 2]\n    fizz_count = 0\n    buzz_count = 0\n    fizz_buzz_count = 0\n\n    while len(sequence) < n:\n        if sequence[-1] % 3 == 0 and sequence[-1] % 5 == 0:\n            sequence.append(\"FizzBuzz\")\n            fizz_buzz_count += 1\n        elif sequence[-1] % 3 == 0:\n            sequence.append(\"Fizz\")\n            fizz_count += 1\n        elif sequence[-1] % 5 == 0:\n            sequence.append(\"Buzz\")\n            buzz_count += 1\n        else:\n            sequence.append(sequence[-1])\n\n    return str(fizz_buzz_count + fizz_count + buzz_count)",
        "test": "assert solution(\"15\") == \"60\"",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 4230,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Split input and read values\n    x, n = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n\n    # Find nearest integer\n    p_set = set(p)\n    p_set.discard(x)\n    nearest_int = min(p_set, key=lambda x: abs(x - x))\n\n    # Print result\n    return str(nearest_int)",
        "test": "assert solution(\"6 5\\n4 7 10 6 5\\n\") == \"8\", \"Test case failed\"",
        "num_ids": 423,
        "indeed": false
    },
    {
        "number": 4231,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    rows, cols = [], []\n    for i in range(h):\n        for j in range(w):\n            rows.append(i + 1)\n            cols.append(j + 1)\n    if h <= 2:\n        return \"0\"\n    if w <= 2:\n        return \"0\"\n\n    for i in range(h):\n        for j in range(w):\n            for k in range(i + 1):\n                for l in range(j + 1):\n                    if (k, l) in rows or (i, l) in cols or (k, j) in rows or (i, j) in cols:\n                        continue\n                    rows.append(k)\n                    rows.append(l)\n                    cols.append(i)\n                    cols.append(j)\n\n    count = 0\n    for i in range(h):\n        for j in range(w):\n            if (i + 1, j + 1) in rows or (h - i, w - j) in cols:\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"20 20\\n2 2\") == \"0\"",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 4232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    x = 1\n    while x <= 10**9:\n        count = 0\n        for i in range(n):\n            if a[i] <= x:\n                count += 1\n        if count == k:\n            return str(x)\n        x += 1\n    return \"-1\"",
        "test": "assert solution('7 2\\n3 7 5 1 10 3 20\\n') == '-1\\n'",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 4233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for _ in range(n):\n        line = stdin.readline()[:-1]\n        grid.append(list(line))\n\n    def dfs(x, y, s, stack):\n        if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == '.' or (x, y, s) in stack:\n            return\n        stack.add((x, y, s))\n        dfs(x + 1, y, s, stack)\n        dfs(x - 1, y, s, stack)\n        dfs(x, y + 1, s, stack)\n        dfs(x, y - 1, s, stack)\n\n    stars = set()\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                dfs(i, j, 1, stars)\n\n    if len(stars) > n * m:\n        return \"-1\"\n\n    result = []\n    for x, y, s in stars:\n        result.append(f\"{x} {y} {s}\")\n    return f\"{len(stars)}\\n{' '.join(result)}\\n\"\n",
        "test": "assert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"",
        "num_ids": 1501,
        "indeed": false
    },
    {
        "number": 4234,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    s = s.lower()\n\n    odd = [False] * n\n    odd[0] = True\n\n    for i in range(1, n - 1):\n        if s[i] == s[i - 1]:\n            odd[i] = True\n\n    count = 0\n    for i in range(n - 1, 0, -1):\n        if odd[i]:\n            if s[i] == s[i - 1]:\n                count += 1\n            else:\n                break\n\n    k = count\n    if k == 0:\n        s = \"\"\n\n    return str(k), s",
        "test": "assert solution(\"aaa\") == (3, \"def\")",
        "num_ids": 461,
        "indeed": false
    },
    {
        "number": 4235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, stdin.split())) for _ in range(m)]\n\n    graph = {i: [] for i in range(n + 1)}\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    visited = {i: False for i in range(n + 1)}\n    path = [0] * (n + 1)\n    path[0] = path[n] = -1\n\n    def bfs(vertex: int) -> None:\n        nonlocal visited, path\n        if visited[vertex]:\n            return\n\n        visited[vertex] = True\n        for neighbor in graph[vertex]:\n            if neighbor!= path[vertex]:\n                path[neighbor] = vertex\n                bfs(neighbor)\n\n    for i in range(1, n + 1):\n        if not visited[i]:\n            bfs(i)\n\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if path[i]!= path[j] and i!= j:\n                for k in range(i, j + 1):\n                    if path[i] < path[k] < path[j]:\n                        return \"NO\"\n\n    return \"YES\"\n",
        "test": "assert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == \"YES\\n10100\"",
        "num_ids": 2535,
        "indeed": false
    },
    {
        "number": 4236,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = [list(map(int, stdin.split())) for _ in range(n)]\n\n    points = [i for i in range(1, m+1) if not any(any(l <= i <= r for l, r in s) for s in segments)]\n\n    print(len(points))\n    print(*points)\n\n    if not points:\n        print(0)\n\n    return \"\"\n\n\ndef",
        "test": "assert solution(input(\"\"\"",
        "num_ids": 480,
        "indeed": false
    },
    {
        "number": 4237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for i in range(A, B+1):\n        if i % C!= 0 and i % D!= 0:\n            count += 1\n    return str(count)\n\nwith open(\"input.txt\", \"r\") as file:\n    stdin = file.read()\n\nprint(solution(stdin))",
        "test": "assert solution(\"4 9 2 3\") == \"2\\n\"",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 4238,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(n))\n    if digits_sum % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"123456789\") == \"Yes\"",
        "num_ids": 319,
        "indeed": false
    },
    {
        "number": 4239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    yen_count = 1\n    operations_count = 1\n    while yen_count < N:\n        yen_count += yen_count ** operations_count\n        operations_count += 1\n    return str(operations_count - 1)",
        "test": "assert solution(\"100001\") == \"1\"",
        "num_ids": 297,
        "indeed": false
    },
    {
        "number": 4240,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if s == t:\n        return \"Yes\"\n    for i in range(len(s)):\n        s1 = s[i:] + s[:i]\n        s2 = s1[i:] + s1[:i]\n        if s2 == t:\n            return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"hello\\nworld\\n\") == \"No\", \"Sample Input 3\"",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 4241,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s, t = s.lower(), t.lower()\n    s_t = s + t\n    count = 0\n    for i in range(len(s_t) - len(t) + 1):\n        if s_t[i:i + len(t)] == t:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"cabacc\\nabc\") == \"1\"",
        "num_ids": 1330,
        "indeed": false
    },
    {
        "number": 4242,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    divisors = []\n\n    for num in range(1, max(A, B) + 1):\n        if A % num == 0 and B % num == 0:\n            divisors.append(num)\n\n    return str(divisors[K - 1])\n\n\ndef",
        "test": "assert solution(\"8 12 2\") == \"2\"",
        "num_ids": 502,
        "indeed": false
    },
    {
        "number": 4243,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n\n    happiness_points = []\n    for coin in [500, 100, 50, 10, 5, 1]:\n        points = X // coin\n        happiness_points.append(points)\n        X %= coin\n\n    return str(max(happiness_points))",
        "test": "assert solution(\"1024\") == \"2020\"",
        "num_ids": 1330,
        "indeed": false
    },
    {
        "number": 4244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, *x = map(int, stdin.split())\n    x.sort()\n    total = sum(x[i] - x[i - 1] for i in range(1, n))\n    return str(total)\n",
        "test": "assert solution(\"5\\n1 2 3 4 5\\n\") == \"1729\"",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 4245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return str(b) + \" power strips\"\n    elif a < b:\n        return str(a) + \" power strips\"\n    else:\n        return \"1 power strip\"\n\ndef",
        "test": "assert solution(\"4 10\") == \"3\\n\"",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 4246,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s_weather = list(s)\n    t_weather = list(t)\n\n    cloudy_count = 0\n    sunny_count = 0\n    rainy_count = 0\n\n    for i in range(3):\n        if s_weather[i] == 'C' and t_weather[i] == 'C':\n            cloudy_count += 1\n        elif s_weather[i] == 'S' and t_weather[i] == 'S':\n            sunny_count += 1\n        elif s_weather[i] == 'R' and t_weather[i] == 'R':\n            rainy_count += 1\n\n    if cloudy_count == 3 or sunny_count == 3 or rainy_count == 3:\n        return str(1)\n    else:\n        return str(0)",
        "test": "assert solution('RRS') == '1'",
        "num_ids": 358,
        "indeed": false
    },
    {
        "number": 4247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *p = map(int, stdin.split())\n    p.sort()\n    \n    count = 0\n    for i in range(1, n - 1):\n        if (p[i - 1] + p[i] + p[i + 1]) % 3 == 2:\n            count += 1\n            \n    return str(count)",
        "test": "assert solution(\"5\\n1 3 5 4 2\") == \"2\\np_2 = 3 is the second smallest number among p_1 = 1, p_2 = 3, and p_3 = 5. Also, p_4 = 4 is the second smallest number among p_3 = 5, p_4 = 4, and p_5 = 2. These two elements satisfy the condition.\"",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 4248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    points = [tuple(map(float, line.strip().split())) for line in stdin.split('\\n')[1:]]\n    a = [point[0] for point in points]\n    b = [point[1] for point in points]\n\n    x_mean = sum(a) / len(a)\n    y_mean = sum(b) / len(b)\n\n    a_mean = sum(a * (a - x_mean) * (a - y_mean)) / (sum(a * (a - x_mean)) * sum(a * (a - y_mean)))\n    b_mean = sum(b * (b - y_mean) * (b - x_mean)) / (sum(b * (b - y_mean)) * sum(b * (b - x_mean)))\n\n    c_mean = (x_mean ** 2 * y_mean ** 2) + (x_mean ** 2 * a_mean) + (y_mean ** 2 * b_mean) - (x_mean ** 2 * b_mean) - (y_mean ** 2 * a_mean) + (a_mean * b_mean)\n\n    c = (x_mean ** 2 * y_mean ** 2) - (x_mean ** 2 * a_mean) - (y_mean ** 2 * b_mean) + (x_mean ** 2 * b_mean) + (y_mean ** 2 * a_mean)\n\n    theta = 180 / 3.1415926535 * (2 * atan2(c, c_mean) - pi)\n\n    return f\"{theta:.2f}\"\n\n\ninput_1 = \"\"\"\n-2.14 2.06\n-1.14 2.04\n-2.16 1.46\n-2.14 0.70\n-1.42 0.40\n-0.94 -0.48\n-1.42 -1.28\n-2.16 -1.62\n\"\"\"\ninput_2 = \"\"\"\n2.26 1.44\n2.28 0.64\n2.30 -0.30\n1.58 0.66\n3.24 0.66\n\"\"\"\ninput_3 = \"\"\"\n6.98 2.06\n6.40 1.12\n5.98 0.24\n5.54 -0.60\n7.16 0.30\n7.82 1.24\n8.34 0.24\n8.74 -0.76\n\"\"\"\ninput_4 = \"\"\"\n10.44 2.06\n10.90 0.80\n11.48 -0.48\n12.06 0.76\n12.54 2.06\n\"\"\"\ninput_5 = \"\"\"\n16.94 2.42\n15.72 2.38\n14.82 1.58\n14.88 0.50\n15.76 -0.16\n16.86 -0.20\n17.00 0.88\n16.40 0.92\n\"\"\"\ninput_6 = \"\"\"\n20.62 3.00\n21.06 2.28\n21.56 1.36\n21.66 0.56\n21.64 -0.52\n22.14 2.32\n22.62 3.04\n\"\"\"\n\ntest_cases = [input_1, input_2, input_3, input_4, input_5, input_6]\n\nfor test_case in test_cases:\n    print(f\"Test case:\\n{test_case}\\nExpected output: 5.41\\nOutput: {solution(test_case)}\\n\")\n",
        "test": "assert solution(input()) == '6.040'",
        "num_ids": 1299,
        "indeed": false
    },
    {
        "number": 4249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    days = 0\n    cups = []\n\n    for i in range(n):\n        cups.append(0)\n\n    for _ in range(m):\n        k = min(days, n)\n        for i in range(k):\n            for j in range(i, k):\n                cups[i] += min(0, a[j] - cups[j])\n                cups[i] %= 1000000007\n\n    for i in range(n):\n        days += max(0, cups[i] - a[i])\n\n    return days\n\n\ndef",
        "test": "assert solution(open(\"test_case4.txt\").read()) == \"-1\\n\"",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 4250,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    s.sort()\n    t = []\n    max_count = 0\n    for i in range(n - k + 1):\n        current_t = s[i:i + k]\n        count = 1\n        for j in range(i + 1, i + k):\n            if current_t == s[j:j + k]:\n                count += 1\n            else:\n                break\n        max_count = max(max_count, count)\n        t.append(current_t)\n    return \" \".join(map(str, t)) + \" \" + str(max_count)",
        "test": "assert solution(\"\"\"",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 4251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, stdin.split()[i + 1].split())))\n\n    for j in range(m):\n        matrix[j] = sorted(matrix[j])\n\n    max_k = 0\n    for i in range(n):\n        if i > 0 and matrix[i] == matrix[i - 1]:\n            continue\n        if i + 1 < n and matrix[i] == matrix[i + 1]:\n            continue\n        for k in range(1, min(len(matrix[i]), max_k) + 1):\n            if all(abs(matrix[i][j] - matrix[i][j + 1]) >= k for j in range(len(matrix[i]) - 1)):\n                max_k = max(max_k, k)\n\n    return str(max_k)",
        "test": "assert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\\n\") == \"3\"",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 4252,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    file_name = stdin.split()[1]\n    \n    # Check if the file name contains three or more \"x\" (lowercase Latin letters \"x\") in a row\n    forbidden_substring = \"xxx\"\n    if forbidden_substring in file_name:\n        # Count the number of \"x\" in the file name\n        count = file_name.count(forbidden_substring)\n        # Remove the number of \"x\" from the length of the file name\n        n -= count\n        # If the length of the file name becomes 0, then the file name does not contain a forbidden substring\n        if n == 0:\n            return str(count)\n        else:\n            return \"0\"\n    else:\n        return \"0\"",
        "test": "assert solution(\"5\\nxxoxx\") == \"0\"",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 4253,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    if r < 1 or r > 100:\n        return \"Invalid input\"\n\n    area = 3 * r * r\n    return str(area)",
        "test": "assert solution(\"4\") == \"48\", \"The area of the regular dodecagon is 3 \\times 4^2 = 48.\"",
        "num_ids": 180,
        "indeed": true
    },
    {
        "number": 4254,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, w = map(int, stdin.split())\n\n    if w >= s:\n        return \"unsafe\"\n    else:\n        return \"safe\"",
        "test": "assert solution(\"4 5\") == \"unsafe\"",
        "num_ids": 139,
        "indeed": true
    },
    {
        "number": 4255,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    # Calculate the semi-perimeter of the triangle\n    s = (a + b + c) / 2\n\n    # Calculate the area of the triangle using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    # Return the area of the triangle\n    return str(int(area))\n",
        "test": "assert solution(\"3 4 5\") == \"6\"",
        "num_ids": 330,
        "indeed": true
    },
    {
        "number": 4256,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    A, B, C = map(int, stdin.split())\n\n    # calculate the number of times he will hear the sound\n    times = min(B // A, C)\n\n    # print the result\n    return str(times)",
        "test": "assert solution(\"2 11 4\") == \"4\"",
        "num_ids": 203,
        "indeed": true
    },
    {
        "number": 4257,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        A, B = map(int, stdin.strip().split())\n        result = A * B\n    except ValueError:\n        return \"Invalid Input\"\n\n    return str(result)",
        "test": "assert solution(\"2 5\") == \"10\", \"Solution is incorrect.\"",
        "num_ids": 162,
        "indeed": true
    },
    {
        "number": 4258,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input string to integers\n    A, B, T = map(int, stdin.split())\n    \n    # Calculate number of biscuits\n    biscuits = (T + 0.5) // A + (T + 0.5) // (2 * A) + (T + 0.5) // (3 * A)\n    \n    # Return the number of biscuits as a string\n    return str(biscuits)",
        "test": "assert solution(\"3 5 7\") == \"10\"",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 4259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    carry_distance = (b - a + 1) // k * k\n    if a <= carry_distance <= b:\n        print(\"OK\")\n    else:\n        print(\"NG\")",
        "test": "assert solution(input(\"7\\n500 600\\n\")) == \"NG\", \"Incorrect output for sample input 3\"",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 4260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    t = X * T\n\n    return f\"{t:.3f}\"",
        "test": "assert solution(\"8 3\") == \"2.6666666667\"",
        "num_ids": 208,
        "indeed": false
    },
    {
        "number": 4261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    min_a, max_b = min(b, a), max(b, a)\n    transfer_amount = min(max_b - min_a, c)\n    return str(min_a + transfer_amount)",
        "test": "assert solution(\"6 4 3\") == \"1\", \"Sample input does not match the expected output.\"",
        "num_ids": 252,
        "indeed": false
    },
    {
        "number": 4262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    P = list(map(int, stdin.split()[1].split()))\n    Q = list(map(int, stdin.split()[2].split()))\n\n    def permute(nums):\n        results = []\n        nums = list(nums)\n        nums.sort()\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                results.append((nums[i], nums[j]))\n        return results\n\n    def find_smallest_permutation(nums):\n        results = []\n        nums = list(nums)\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                results.append((nums[i], nums[j]))\n        return sorted(results, key=lambda x: x[1])[0][1]\n\n    P_permutations = permute(P)\n    Q_permutations = permute(Q)\n\n    smallest_P = find_smallest_permutation(P)\n    smallest_Q = find_smallest_permutation(Q)\n\n    print(abs(smallest_P - smallest_Q))\n\n    return \"\"",
        "test": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\\n\"",
        "num_ids": 746,
        "indeed": false
    },
    {
        "number": 4263,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    n = len(S)\n    max_length = 0\n    max_substring = \"\"\n\n    for i in range(n - 3):\n        if S[i:i+4].count('ACGT') == 4 and S[i:i+4] not in max_substring:\n            max_substring = S[i:i+4]\n            max_length = max(max_length, 4)\n\n    return str(max_length)",
        "test": "assert solution(\"ATCODER\") == \"3\"",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 4264,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if len(str(i)) % 2!= 0:\n            count += 1\n    return str(count)",
        "test": "assert solution('11') == '9'",
        "num_ids": 203,
        "indeed": true
    },
    {
        "number": 4265,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    result = 0\n\n    for i in range(len(S)):\n        if S[i]!= T[i]:\n            result += 1\n            if i < len(S) // 2:\n                S = S[:i] + T[i] + S[i+1:]\n            else:\n                S = S[:i] + T[i] + S[i+1:]\n\n    return str(result)",
        "test": "assert solution(\"cupofcoffee\\ncupofhottea\\n\") == \"4\"",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 4266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.strip().split())\n    black_stones = set()\n    white_stones = set()\n\n    for i in range(-1000000, 1000001):\n        if i >= -k and i <= k:\n            black_stones.add(i)\n\n    for stone in black_stones:\n        if stone + k in black_stones and stone - k in black_stones:\n            white_stones.add(stone)\n            white_stones.add(stone + k)\n            white_stones.add(stone - k)\n\n    result = sorted(list(white_stones))\n    return \" \".join(map(str, result))",
        "test": "assert solution(\"3 7\") == \"5 6 7 8 9\", \"Test case 1 failed\"",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 4267,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if 30 <= x <= 40:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"10\") == \"No\"",
        "num_ids": 242,
        "indeed": true
    },
    {
        "number": 4268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    points = []\n    for _ in range(n):\n        point = list(map(int, input().split()))\n        points.append(point)\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = sum((p[i] - p[j]) ** 2 for p in points) ** 0.5\n            if distance.is_integer():\n                count += 1\n\n    return str(count)",
        "test": "assert solution(input()) == \"1\"",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 4269,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    code = int(S)\n    for i in range(len(S)):\n        if S[i] == S[i + 1]:\n            return \"Bad\"\n    return \"Good\"",
        "test": "assert solution(\"3776\") == \"Bad\"",
        "num_ids": 227,
        "indeed": false
    },
    {
        "number": 4270,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    values = list(map(float, stdin.split()[1:]))\n\n    max_value = float('-inf')\n    for i in range(N):\n        for j in range(i+1, N):\n            new_value = (values[i] + values[j]) / 2\n            if new_value > max_value:\n                max_value = new_value\n\n    return str(max_value)",
        "test": "assert solution(\"2\\n3 4\") == \"3.5\"",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 4271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *A, *B, *C = map(int, stdin.split())\n    A.sort()\n    B.sort()\n    C.sort()\n    \n    def eat(i: int) -> int:\n        if i == n:\n            return 0\n        elif i == n - 1:\n            return C[i] + eat(i + 1)\n        else:\n            return B[i] + C[i] + eat(i + 2)\n    \n    total_satisfaction_points = eat(0)\n    return str(total_satisfaction_points)",
        "test": "assert solution(\"3\\n3 1 2\\n2 5 4\\n3 6\") == \"14\"",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 4272,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    S = stdin.split()[1]\n\n    count = 0\n    for i in range(len(S)):\n        if S[i:i+3] == \"ABC\":\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"10\\nZABCDBABCQ\\n\") == \"2\"",
        "num_ids": 365,
        "indeed": true
    },
    {
        "number": 4273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    people = [s.upper() for s in stdin.split()[1:n+1]]\n    result = 0\n\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if people[i][:2] == people[j][:2] == people[k][:2]:\n                    break\n            else:\n                result += 1\n\n    return str(result)",
        "test": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\\n\") == \"2\\n\"",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 4274,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"3 3\\n\") == \"Yes\"",
        "num_ids": 203,
        "indeed": true
    },
    {
        "number": 4275,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S[2] == S[3] and S[4] == S[5]:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution('sippuu') == 'Yes'",
        "num_ids": 203,
        "indeed": true
    },
    {
        "number": 4276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    c_t_list = []\n    for _ in range(N):\n        c, t = map(int, input().split())\n        c_t_list.append((c, t))\n\n    c_t_list.sort(key=lambda x: x[1])\n\n    total_cost = 0\n    start_time = c_t_list[0][1]\n\n    for i, (c, t) in enumerate(c_t_list):\n        if t <= T:\n            total_cost += c\n            start_time = t\n        else:\n            break\n\n    if total_cost == 0:\n        return 'TLE'\n    else:\n        return total_cost\n\ninput_data = \"\"\"\n3 70\n7 60\n1 80\n4 50\n\"\"\"\n\nprint(solution(input_data))",
        "test": "assert solution(\"5 10\\n2 5\\n8 10\\n1 10\\n6 10\\n\") == \"6\"",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 4277,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n > 10:\n        return \"ERROR\"\n    train_cost = n * a\n    taxi_cost = b\n    min_cost = min(train_cost, taxi_cost)\n    return str(min_cost)",
        "test": "assert solution(\"4 2 9\") == \"8\"",
        "num_ids": 257,
        "indeed": false
    },
    {
        "number": 4278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    strings = []\n    for i in range(N):\n        strings.append(stdin.split()[i+1])\n\n    pairs = set()\n    for i in range(N):\n        for j in range(i+1, N):\n            if sorted(strings[i]) == sorted(strings[j]):\n                pairs.add((i+1, j+1))\n\n    return str(len(pairs))\n\nwith open('anagram_pairs.in', 'r') as f:\n    input_data = f.read().strip()\n\noutput_data = solution(input_data)\n\nwith open('anagram_pairs.out', 'w') as f:\n    f.write(output_data)\n",
        "test": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"",
        "num_ids": 383,
        "indeed": false
    },
    {
        "number": 4279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    q = int(stdin.split()[0])\n    queries = [int(x) for x in stdin.split()[1:]]\n    \n    sequence = '1' + '1'.join(map(str, range(2, n+1)))\n    \n    for k in queries:\n        digit = sequence[k-1]\n        print(digit)",
        "test": "assert solution('4\\n2132\\n506\\n999999999\\n1000000000\\n') == '8\\n2\\n9\\n8\\n'",
        "num_ids": 1511,
        "indeed": false
    },
    {
        "number": 4280,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    roads = []\n    for _ in range(n-1):\n        u, v = map(int, stdin.split())\n        roads.append((u, v))\n\n    def dfs(u: int, visited: set) -> int:\n        visited.add(u)\n        count = 0\n        for v, w in roads:\n            if v == u or v in visited:\n                continue\n            count += dfs(v, visited)\n        count += 1\n        if u in visited or count > 2 * k:\n            return 0\n        return count\n\n    res = dfs(1, set())\n    if res == 0:\n        print(-1)\n        return\n\n    print(res)\n\n    companies = []\n    for i in range(1, n+1):\n        if dfs(i, set()) > 2 * k:\n            companies.append(i)\n\n    print(\" \".join(map(str, companies)))\n    return",
        "test": "assert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\\n\") == \"3\\n1 1 2 3 2 3 1 3 1\"",
        "num_ids": 1112,
        "indeed": false
    },
    {
        "number": 4281,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, *x = map(int, stdin.split())\n    x.sort()\n    total_houses = n + 1\n\n    for i in range(n):\n        if x[i] - 1 < 0:\n            total_houses = max(total_houses, x[i])\n        elif x[i] + 1 > total_houses:\n            total_houses = max(total_houses, x[i])\n        else:\n            total_houses = max(total_houses, x[i] + 1, x[i] - 1)\n\n    return f\"{min(total_houses, total_houses - 1)} {max(total_houses, total_houses - 1)}\"\n",
        "test": "assert solution(",
        "num_ids": 877,
        "indeed": false
    },
    {
        "number": 4282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [[int(x) for x in stdin.split()[i].split()] for i in range(1, 2 * n + 1, 2)]\n    p = [i + 1 for i in range(n)]\n    x = 1\n    x_next = 2\n    count = 0\n\n    while True:\n        for i in range(1, n):\n            if a[i][0] == p[i]:\n                a[i][1], a[i][0] = a[i][0], a[i][1]\n                if a[i][0] == x:\n                    a[i][0] = p[i + 1]\n                elif a[i][0] == x_next:\n                    a[i][0] = p[i - 1]\n        if count == n:\n            break\n        count += 1\n\n    return''.join(str(p[i - 1]) for i in range(1, n + 1))\n\ndef",
        "test": "assert solution(\"\"\"\\",
        "num_ids": 908,
        "indeed": false
    },
    {
        "number": 4283,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    result = 0\n    count = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if abs(a[i] - a[j]) <= 5:\n                count += 1\n                if count > result:\n                    result = count\n            else:\n                count = 0\n    return str(result)",
        "test": "assert solution('6\\n1 10 17 12 15 2\\n') == '3'",
        "num_ids": 776,
        "indeed": false
    },
    {
        "number": 4284,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    queries = [list(map(int, input().split())) for _ in range(int(stdin.split()[0]))]\n    \n    def play_turn(a, b, k, n, turns):\n        if k <= a:\n            return max(turns, 0)\n        if k <= b:\n            return max(turns + 1, 0)\n        return turns\n    \n    def solve_queries(queries):\n        result = []\n        for query in queries:\n            k, n, a, b = query\n            max_turns = 0\n            for i in range(n):\n                current_turns = play_turn(a, b, k, n, max_turns)\n                if current_turns == n:\n                    return -1\n                max_turns = current_turns\n            result.append(max_turns)\n        return result\n    \n    return str(solve_queries(queries))\n\ndef",
        "test": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\"",
        "num_ids": 691,
        "indeed": false
    },
    {
        "number": 4285,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin.strip())\n    n = len(s)\n    MOD = 10**9 + 7\n    \n    def count_subsequences(index: int, curr: str, mod: int = MOD) -> int:\n        if index == n:\n            if curr == 'abc':\n                return 1\n            return 0\n        \n        count = 0\n        if s[index] == 'a':\n            count += count_subsequences(index + 1, curr + 'a', mod)\n            count %= mod\n        if s[index] == 'b':\n            count += count_subsequences(index + 1, curr + 'b', mod)\n            count %= mod\n        if s[index] == 'c':\n            count += count_subsequences(index + 1, curr + 'c', mod)\n            count %= mod\n        \n        return count\n    \n    return str(count_subsequences(0, '', MOD))",
        "test": "assert solution(\"cccbbbaaa\") == \"0\"",
        "num_ids": 1500,
        "indeed": false
    },
    {
        "number": 4286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def dijkstra(graph: List[List[int]], start: int) -> List[int]:\n        inf = 10 ** 9\n        dist = [inf] * len(graph)\n        dist[start] = 0\n        visited = set()\n        q = []\n        q.append(start)\n        while q:\n            u = q.pop(0)\n            visited.add(u)\n            for v, w in graph[u]:\n                if v not in visited:\n                    alt = dist[u] + w\n                    if alt < dist[v]:\n                        dist[v] = alt\n                        q.append(v)\n        return dist\n\n    def bellman_ford(graph: List[List[int]], start: int) -> bool:\n        n = len(graph)\n        dist = [inf] * n\n        dist[start] = 0\n        for i in range(1, n):\n            for u in range(n):\n                for v, w in graph[u]:\n                    if v!= u:\n                        alt = dist[u] + w\n                        if alt < dist[v]:\n                            dist[v] = alt\n        for u in range(n):\n            for v, w in graph[u]:\n                if v!= u:\n                    alt = dist[u] + w\n                    if alt < dist[v]:\n                        return False\n        return True\n\n    def dfs(graph: List[List[int]], start: int) -> bool:\n        visited = set()\n        visited.add(start)\n        for u, edges in enumerate(graph):\n            for v, w in edges:\n                if v!= start and v not in visited:\n                    return False\n        return True\n\n    def is_connected(graph: List[List[int]]) -> bool:\n        return dfs(graph, 0)\n\n    def bellman_ford_cycle(graph: List[List[int]], start: int) -> bool:\n        n = len(graph)\n        dist = [inf] * n\n        dist[start] = 0\n        for i in range(1, n):\n            for u in range(n):\n                for v, w in graph[u]:\n                    if v!= u:\n                        alt = dist[u] + w\n                        if alt < dist[v]:\n                            dist[v] = alt\n                for v, w in graph[u]:\n                    if v!= u and dist[u] + w < dist[v]:\n                        return True\n        return False\n\n    def make_graph(stdin: str) -> Tuple[List[List[int]], List[List[int]], List[int]]:\n        n, m = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        graph = [[] for _ in range(n)]\n        for i in range(m):\n            x, y, w = map(int, stdin.readline().split())\n            graph[x - 1].append((y - 1, w))\n            graph[y - 1].append((x - 1, w))\n\n        return graph, a, n\n\n    graph, a, n = make_graph(stdin)\n    min_coins = 10 ** 9\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_connected(graph):\n                min_coins = min(min_coins, a[i] + a[j])\n\n    return str(min_coins)\n\n\nprint(solution(input()))",
        "test": "assert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\\n\") == \"18\"",
        "num_ids": 1445,
        "indeed": false
    },
    {
        "number": 4287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = [tuple(map(int, stdin.split())) for _ in range(n)]\n    umbrellas = [tuple(map(int, stdin.split())) for _ in range(m)]\n    segments.sort()\n    umbrellas.sort()\n    max_weight = max(umbrella[1] for umbrella in umbrellas)\n    \n    total_fatigue = 0\n    total_weight = 0\n    current_segment = segments[0]\n    current_umbrella = 0\n    for i in range(1, len(segments)):\n        if segments[i][0] < current_segment[1]:\n            total_fatigue += abs(current_segment[0] - current_umbrella[0]) + total_weight\n            total_weight = 0\n            current_segment = segments[i]\n            current_umbrella = 0\n        elif segments[i][0] == current_segment[1]:\n            total_fatigue += abs(current_segment[0] - current_umbrella[0]) + total_weight\n            total_weight = 0\n            current_segment = segments[i]\n        else:\n            total_fatigue += abs(current_segment[0] - current_umbrella[0])\n            total_weight = 0\n            current_segment = segments[i]\n            current_umbrella = 0\n            \n    total_fatigue += abs(current_segment[0] - current_umbrella[0]) + total_weight\n    \n    if total_weight >= max_weight:\n        return -1\n    return total_fatigue",
        "test": "assert solution(\"\"\"",
        "num_ids": 1187,
        "indeed": false
    },
    {
        "number": 4288,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n\n    if A == C and B!= A and B!= C:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"1 3 5\") == \"No\", \"Sample input: 1 3 5, Expected: No\"",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 4289,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # convert input to integer values\n    N, T, A = map(int, stdin.split())\n    H = list(map(int, stdin.split()))\n\n    # calculate the average temperature of each place\n    T_place = []\n    for h in H:\n        T_place.append(T - h * 0.006)\n\n    # calculate the distance between the proposed place and the average temperature of the other places\n    distance = [abs(T_place[i] - A) for i in range(N)]\n\n    # find the index of the place with the smallest distance\n    index_min = distance.index(min(distance))\n\n    return str(index_min + 1)",
        "test": "assert solution('2\\n12 5\\n1000 2000\\n') == '1\\n'",
        "num_ids": 546,
        "indeed": false
    },
    {
        "number": 4290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n\n    odd_numbers = [i for i in range(N+M, N+M*2, 2)]\n    even_numbers = [i for i in range(N+M, N+M*2, 2)]\n\n    odd_numbers = odd_numbers[:N] + odd_numbers[N+M:]\n    even_numbers = even_numbers[:N] + even_numbers[N+M:]\n\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if odd_numbers[i] + odd_numbers[j] == even_numbers[N-1]:\n                count += 1\n\n    return str(count)\n\nsample_input = '2 1\\n'\nprint(solution(sample_input)) # Output: 1",
        "test": "assert solution('1 1\\n') == '0\\n'",
        "num_ids": 584,
        "indeed": false
    },
    {
        "number": 4291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    S = stdin.strip().splitlines()[1]\n    queries = []\n    for i in range(Q):\n        l, r = map(int, stdin.strip().split())\n        queries.append((l - 1, r - 1))\n\n    result = [0] * Q\n    for l, r in queries:\n        count = S[l:r + 1].count(\"AC\")\n        result[l - 1] = count\n\n    return \"\\n\".join(map(str, result))\n\n\ndef",
        "test": "assert solution(\"8 3\\nACACTACG\\n3 7\\n2 3\\n1 8\") == \"2\\n0\\n3\"",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 4292,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n\n    if K > N or K <= 0 or N <= 0:\n        return \"Invalid input\"\n\n    total_price = sum(prices[:K])\n    min_price = min(prices)\n\n    if total_price < min_price:\n        return \"Invalid input\"\n\n    return str(total_price)",
        "test": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\\n\"",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 4293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input values from stdin\n    p, q, r = map(int, stdin.split())\n\n    # create a list of tuples (airport, flight time)\n    flights = [\n        (\"A\", p),\n        (\"B\", q),\n        (\"C\", r),\n        (\"A\", 4 + p),\n        (\"C\", 4 + r),\n        (\"B\", 4 + q),\n        (\"A\", 4 + 4 + p),\n        (\"C\", 4 + 4 + r),\n        (\"B\", 4 + 4 + q),\n    ]\n\n    # sort the flights by flight time\n    flights.sort(key=lambda x: x[1])\n\n    # calculate the total flight time\n    total_flight_time = sum(flight[1] for flight in flights)\n\n    # print the total flight time\n    print(total_flight_time)\n\n    return str(total_flight_time)\n",
        "test": "assert solution(\"1 3 4\") == \"4\"",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 4294,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    x, a = int(inputs[0]), int(inputs[1])\n    if x < a:\n        return \"0\"\n    else:\n        return \"10\"",
        "test": "assert solution(\"3 5\") == \"0\"",
        "num_ids": 194,
        "indeed": true
    },
    {
        "number": 4295,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 0:\n        n = -n\n    x = n\n    for _ in range(k):\n        x = abs(x - k)\n    return str(x)",
        "test": "assert solution(\"5 0\") == \"5\"",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 4296,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3 = map(int, stdin.split())\n\n    if a1 + a2 + a3 >= 22:\n        return \"bust\"\n    else:\n        return \"win\"",
        "test": "assert solution(\"5 7 9\") == \"win\"",
        "num_ids": 304,
        "indeed": true
    },
    {
        "number": 4297,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n):\n        if i % 2 == 0 and i % n == 0:\n            return str(i)\n    return str(n)",
        "test": "assert solution(\"10\") == \"20\\n\"",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 4298,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    inspectors = []\n    for i in range(N):\n        for j in range(i-D+1, i+D+1):\n            if 1 <= j <= N and j not in inspectors:\n                inspectors.append(j)\n    return str(len(inspectors))",
        "test": "assert solution(\"6 2\") == \"2\"",
        "num_ids": 469,
        "indeed": false
    },
    {
        "number": 4299,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    pronunciation = \"\"\n\n    # hon when the digit in the one's place of N is 2, 4, 5, 7, or 9\n    if N // 100 >= 2 and N // 100 <= 5:\n        pronunciation += \"hon\"\n    # pon when the digit in the one's place of N is 0, 1, 6 or 8\n    elif N // 100 == 0:\n        pronunciation += \"pon\"\n    elif N // 100 == 1:\n        pronunciation += \"bon\"\n    elif N // 100 == 6:\n        pronunciation += \"hon\"\n    elif N // 100 == 8:\n        pronunciation += \"pon\"\n    elif N // 100 == 3:\n        pronunciation += \"bon\"\n\n    # the remaining digits in the number\n    if N % 10 == 2:\n        pronunciation += \"hon\"\n    elif N % 10 == 4:\n        pronunciation += \"pon\"\n    elif N % 10 == 5:\n        pronunciation += \"bon\"\n    elif N % 10 == 7:\n        pronunciation += \"hon\"\n    elif N % 10 == 9:\n        pronunciation += \"hon\"\n    elif N % 10 == 0:\n        pronunciation += \"pon\"\n    elif N % 10 == 1:\n        pronunciation += \"bon\"\n    elif N % 10 == 6:\n        pronunciation += \"hon\"\n    elif N % 10 == 8:\n        pronunciation += \"pon\"\n    elif N % 10 == 3:\n        pronunciation += \"bon\"\n\n    return pronunciation",
        "test": "assert solution(\"999\") == \"hon\"",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 4300,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, *d = map(int, stdin.split())\n    d = set(d)\n\n    def get_restoration(a: int, b: int) -> int:\n        return a * d.pop() + b * d.pop()\n\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total += get_restoration(i + 1, j + 1)\n\n    return str(total)",
        "test": "assert solution(\"3 2 3 1\") == \"12\"",
        "num_ids": 585,
        "indeed": false
    },
    {
        "number": 4301,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    nums = list(map(int, stdin.split()[1:]))\n    \n    max_value = max(nums)\n    max_elements = []\n    \n    for num in nums:\n        if num!= max_value:\n            max_elements.append(num)\n    \n    max_elements.sort(reverse=True)\n    \n    output = \"\"\n    for i in range(n):\n        output += f\"{max_elements[i]}\\n\"\n    \n    return output",
        "test": "assert solution(\"200000\\n1\\n200000\\n200000\") == \"200000\"",
        "num_ids": 652,
        "indeed": false
    },
    {
        "number": 4302,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if A > B:\n        A, B = B, A\n\n    max_coins = 0\n\n    for _ in range(2):\n        coins = 0\n        while A > 0:\n            coins += A\n            A -= 1\n\n        max_coins = max(max_coins, coins)\n\n    return str(max_coins)\n",
        "test": "assert solution(\"5 3\") == \"9\"",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 4303,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    candles = list(map(int, stdin.split()))\n\n    # sort the candles by their x-coordinates\n    candles.sort()\n\n    # initialize variables\n    left_x, left_candle = float('inf'), 0\n    right_x, right_candle = float('-inf'), 0\n\n    time = 0\n    for i in range(k):\n        time += abs(candles[i] - left_x)\n\n        # update left and right bounds\n        if candles[i] < left_x:\n            left_x = candles[i]\n            left_candle = i\n        if candles[i] > right_x:\n            right_x = candles[i]\n            right_candle = i\n\n    return str(time)",
        "test": "assert solution(input()) == '40'",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 4304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    if a < 1 or b < 1 or a > b:\n        return \"Invalid input.\"\n\n    # Calculate the number of meters covered by snow\n    snow_cover_meters = 0\n    for i in range(1, a+1):\n        snow_cover_meters += (i * (i + 1)) // 2\n\n    # Calculate the number of meters covered by the towers\n    tower_meters = 0\n    for i in range(1, b+1):\n        tower_meters += (i * (i + 1)) // 2\n\n    # Calculate the snow cover amount\n    snow_cover_amount = snow_cover_meters - tower_meters\n\n    # Print the result\n    return str(snow_cover_amount)",
        "test": "assert solution(\"5 5\") == \"1\", \"Sample Input: 5 5\"",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 4305,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    count = 0\n    health = H\n    while health > 0:\n        count += 1\n        health -= A\n    return str(count)",
        "test": "assert solution(\"10 4\") == \"3\"",
        "num_ids": 166,
        "indeed": true
    },
    {
        "number": 4306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    time_A = A + C\n    time_B = B + D\n    return str(time_B - time_A)\n\ndef",
        "test": "assert solution(\"0 75 25 100\") == \"50\", \"Sample Input/Output failed\"",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 4307,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    count = 0\n    for num in range(1, N + 1):\n        if num % 2!= 0:\n            if len({i for i in range(1, num)}) == 8:\n                count += 1\n                \n    print(count)\n    \n    return str(count)",
        "test": "assert solution(\"105\") == \"1\"",
        "num_ids": 319,
        "indeed": false
    },
    {
        "number": 4308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    crackers = list(map(int, stdin.split()))\n    max_crackers = [0] * k\n    min_crackers = [10**9] * k\n\n    for cracker in crackers:\n        for i in range(k):\n            max_crackers[i] = max(max_crackers[i], cracker)\n            min_crackers[i] = min(min_crackers[i], cracker)\n\n    min_diff = 10**9\n    for i in range(k):\n        max_diff = max_crackers[i] - min_crackers[i]\n        min_diff = min(min_diff, max_diff)\n\n    return str(min_diff)\n\nwith open(\"input.txt\", \"r\") as file:\n    input_data = file.read()\n\noutput_data = solution(input_data)\nprint(output_data)",
        "test": "assert solution('7 3\\n') == '1'",
        "num_ids": 538,
        "indeed": false
    },
    {
        "number": 4309,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10 or n > 999:\n        return \"Invalid input\"\n    return str(n)",
        "test": "assert solution(\"111\") == \"111\"",
        "num_ids": 259,
        "indeed": false
    },
    {
        "number": 4310,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, stdin.split()))\n    A_1, A_2, A_3 = input_data\n\n    tasks = [\n        (0, A_1),\n        (A_2 - A_1, A_2),\n        (A_3 - A_2, A_3)\n    ]\n\n    total_cost = sum(cost for cost, _ in tasks)\n\n    return str(total_cost)\n\nwith open(\"input.txt\", \"r\") as file:\n    stdin = file.read()\n\nprint(solution(stdin))\n",
        "test": "assert solution(\"1 6 3\") == \"5\"",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 4311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin.strip())\n    a = [s]\n    for i in range(1, 1000000):\n        if i % 2 == 0:\n            a.append(i)\n        else:\n            a.append(3 * i + 1)\n    min_m = 1000001\n    for i in range(1, 1000000):\n        if a[i] == a[i - 1]:\n            min_m = min(min_m, i)\n    return str(min_m)",
        "test": "assert solution(input().strip()) == \"5\"",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 4312,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    health = [A, B, C, D]\n    attacker = 0\n    loser = 1\n    while any(health):\n        if health[attacker] > 0:\n            health[attacker] -= min(B, C, D)\n        else:\n            health[attacker] = 0\n        attacker = (attacker + 1) % 4\n        if health[attacker] <= 0:\n            health[attacker] = 0\n            loser = attacker\n        if not any(health):\n            return \"Yes\" if attacker == 0 else \"No\"\n    return \"No\"",
        "test": "assert solution('10 9 10 10') == 'No'",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 4313,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *v_c = map(int, stdin.split())\n    v = sorted(v_c[:n])\n    c = sorted(v_c[n:])\n\n    max_value = 0\n    max_x = 0\n    for i in range(n):\n        x = v[i]\n        y = 0\n        for j in range(i + 1, n):\n            y += c[j - i - 1]\n            max_value = max(max_value, x - y)\n            max_x = max(max_x, x)\n\n    return str(max_value)",
        "test": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 4314,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split())\n    grid = []\n    for _ in range(rows):\n        row = list(map(str, stdin.split()))\n        grid.append(row)\n    grid = [list(map(lambda x: '.' if x == '#' else '#', row)) for row in grid]\n    \n    def compress(i: int, j: int) -> None:\n        nonlocal grid\n        if grid[i][j] == '#':\n            return\n        for k in range(i + 1, rows):\n            if grid[k][j] == '#':\n                grid[i:k, j] = ['#' for _ in range(k - i)]\n                rows = min(rows, k)\n                return\n        for k in range(j + 1, cols):\n            if grid[i][k] == '#':\n                grid[i, j:k] = ['#' for _ in range(k - j)]\n                cols = min(cols, k)\n                return\n        for k in range(i - 1, -1, -1):\n            if grid[k][j] == '#':\n                grid[i:k, j] = ['#' for _ in range(k - i + 1)]\n                rows = min(rows, k + 1)\n                return\n        for k in range(j - 1, -1, -1):\n            if grid[i][k] == '#':\n                grid[i, j:k] = ['#' for _ in range(k - j + 1)]\n                cols = min(cols, k + 1)\n                return\n    \n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == '#':\n                compress(i, j)\n    \n    final_grid = []\n    for row in grid:\n        final_grid.append(''.join(row))\n    return '\\n'.join(final_grid)",
        "test": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\\n\") == \"###\\n###\\n.##\\n\"",
        "num_ids": 1273,
        "indeed": false
    },
    {
        "number": 4315,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    circumference = 2 * 3.1415926535897931 * r\n    return str(circumference)",
        "test": "assert abs(float(solution(\"1\")) - 6.28318530717958623200) <= 10 ** -2",
        "num_ids": 324,
        "indeed": false
    },
    {
        "number": 4316,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s)!= 4:\n        return \"No\"\n\n    count_a = 0\n    count_s = 0\n\n    for c in s:\n        if c == \"A\":\n            count_a += 1\n        elif c == \"S\":\n            count_s += 1\n\n    if count_a!= count_s or count_a < 2 or count_s < 2:\n        return \"No\"\n    else:\n        return \"Yes\"",
        "test": "assert solution(\"ASSA\") == \"Yes\"",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 4317,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    result = max(a + b, a - b, a * b)\n    return str(result)",
        "test": "assert solution(\"-13 3\") == \"-10\"",
        "num_ids": 221,
        "indeed": true
    },
    {
        "number": 4318,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    heights = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(N):\n        if all(heights[0] <= heights[j] <= heights[i] for j in range(1, i+1)):\n            count += 1\n    return str(count)",
        "test": "assert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"10\"",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 4319,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    t = 0\n    prev = 1\n    steps = []\n    for i in range(len(a)):\n        steps.append(0)\n        while a[i] == prev + 1:\n            steps[-1] += 1\n            prev += 1\n        if steps[-1] == 0:\n            t += 1\n    return f\"{t}\\n{t} {' '.join(str(s) for s in steps)}\"",
        "test": "assert solution(\"5\\n1 2 1 2 1\\n\") == \"3\\n2 2 1\\n\"",
        "num_ids": 764,
        "indeed": false
    },
    {
        "number": 4320,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        if n % 2 == 0:\n            x = n//2\n        else:\n            x = n//2 + 1\n        k = 0\n        while n - x >= 0:\n            n -= x\n            k += 1\n        print(x)\n",
        "test": "assert solution(\"7\\n3\\n6\\n7\\n21\\n28\\n999999999\\n999999984\") == \"7\"",
        "num_ids": 755,
        "indeed": false
    },
    {
        "number": 4321,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    result = n\n    for i in range(k):\n        if result % 10 == 0:\n            result //= 10\n        else:\n            result -= 1\n    return str(result)\n\ninput_str = \"512 4\"\noutput = solution(input_str)\nprint(output)  # Output: 50\n\ninput_str = \"1000000000 9\"\noutput = solution(input_str)\nprint(output)  # Output: 1",
        "test": "assert solution(\"512 4\") == \"50\"",
        "num_ids": 421,
        "indeed": true
    },
    {
        "number": 4322,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    a.sort()\n\n    k = 1\n    i = 0\n    j = 0\n    while i < n:\n        j = 0\n        while a[i] - a[j] <= 1:\n            j += 1\n        if j == 0:\n            j = 1\n        i += j\n        k = max(k, j)\n\n    res = [a[0]] * k\n    for i in range(n):\n        while a[i] - res[-1] <= 1:\n            res.pop()\n        res.append(a[i])\n\n    return f\"{k}\\n{k} {' '.join(map(str, res))}\"",
        "test": "assert solution(\"7\\n2 2 3 2 1 2 2\") == \"7\\n1 2 2 2 2 3 2\"",
        "num_ids": 900,
        "indeed": false
    },
    {
        "number": 4323,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    songs = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        songs.append((a, b))\n\n    songs.sort(key=lambda x: x[0])\n\n    current_size = 0\n    compressed_songs = 0\n\n    for a, b in songs:\n        if b <= m - current_size:\n            compressed_songs += 1\n            current_size += b\n        else:\n            break\n\n    if compressed_songs == n:\n        return str(compressed_songs)\n    else:\n        return \"-1\"",
        "test": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"-1\\n\"",
        "num_ids": 556,
        "indeed": false
    },
    {
        "number": 4324,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def generate_strings(n: int, a: int, b: int) -> List[str]:\n        result = []\n        for i in range(n):\n            for j in range(n - i):\n                substring = ''.join(random.sample(string.ascii_lowercase, a))\n                if len(set(substring)) == b:\n                    result.append(substring)\n        return result\n\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, a, b = map(int, stdin.split()[1:])\n        strings = generate_strings(n, a, b)\n        random.shuffle(strings)\n        print(''.join(strings))",
        "test": "assert solution(\"10 5 3\\n5 2 2\\n5 1 2\") == \"aaabbbcccde\"",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 4325,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = map(int, stdin.split())\n    \n    # Calculate the maximum number of pieces that can be made in T minutes\n    max_pieces = T // X\n    \n    # Calculate the minimum number of pieces that can be made in the remaining T minutes\n    min_pieces = (T % X) + 1\n    \n    # If there are more pieces to be made than can be made in T minutes, return the minimum number of pieces\n    if N > max_pieces:\n        return str(min_pieces)\n    \n    # If there are fewer pieces to be made than can be made in T minutes, return the maximum number of pieces\n    if N < min_pieces:\n        return str(max_pieces)\n    \n    # If there are equal number of pieces to be made, return the minimum number of pieces\n    return str(min_pieces)\n\ndef",
        "test": "assert solution(\"20 12 6\") == \"12\", \"Test case #1 failed\"",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 4326,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N + 1):\n        groups = 1\n        for j in range(2, i + 1):\n            if i % j == 0:\n                groups += 1\n                if groups >= 3:\n                    break\n        else:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"8\") == \"2\"",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 4327,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    \n    # we can make one apple pie by simmering two pieces of apple\n    max_apples = A // 3\n    # we can make two more apples by simmering the remaining apple and cutting it into three pieces\n    max_apples += P // 3\n    # we can make one apple pie by simmering the whole apple\n    max_apples += 1\n    \n    return str(max_apples)",
        "test": "assert solution(\"1 1\") == \"1\"",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 4328,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    a, b = int(inputs[0]), int(inputs[1])\n\n    if a % b == 0:\n        return str(a + b)\n    else:\n        return str(b - a)\n",
        "test": "assert solution(\"10 20\") == \"10\"",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 4329,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n\n    if len(T)!= len(S) + 1:\n        return \"No\"\n\n    for i in range(len(S)):\n        if S[i]!= T[i]:\n            return \"No\"\n\n    return \"Yes\"",
        "test": "assert solution(\"chokudai\\nchokudaiz\") == \"Yes\", \"chokudaiz can be obtained by appending z at the end of chokudai.\"",
        "num_ids": 284,
        "indeed": true
    },
    {
        "number": 4330,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    a, b = map(int, stdin.split())\n\n    if a == b:\n        return str(a)\n\n    if a > b:\n        a, b = b, a\n\n    for k in range(a + 1, b):\n        if gcd(a - k, b - k) == 1:\n            return str(k)\n\n    return \"IMPOSSIBLE\"",
        "test": "assert solution(input()) == '9'",
        "num_ids": 363,
        "indeed": false
    },
    {
        "number": 4331,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if str(n)[-1] == '7':\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution(\"117\") == \"Yes\"",
        "num_ids": 254,
        "indeed": false
    },
    {
        "number": 4332,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"Yes\"\n    \n    s = sum(map(int, str(N)))\n    if N % s == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"12\") == \"Yes\"",
        "num_ids": 239,
        "indeed": true
    },
    {
        "number": 4333,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    return f\"{x1 - x2}, {y1 + y2}, {-x1 + x2}, {-y1 - y2}\"",
        "test": "assert solution(input()) == '-1 1 -1 0'",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 4334,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    a, b = map(int, stdin.split())\n    u = stdin.split()[0]\n\n    s_count = t_count = 0\n    for i in range(a):\n        if s[i] == u:\n            s_count += 1\n        elif t[i] == u:\n            t_count += 1\n\n    for i in range(b):\n        if s[i] == u:\n            s_count -= 1\n        elif t[i] == u:\n            t_count -= 1\n\n    return f\"{s_count} {t_count}\"",
        "test": "assert solution(\"red blue\\n3 4\\nred\") == \"2 4\\n\"",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 4335,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    s = str(s)\n\n    for i in range(n - 1):\n        if s[i]!= s[i + 1]:\n            break\n    else:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"6\\nabcabc\") == \"Yes\", \"Test failed\"",
        "num_ids": 215,
        "indeed": false
    },
    {
        "number": 4336,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    w, h, x, y = map(int, stdin.split())\n\n    # Calculate the area of the rectangle\n    area = w * h\n\n    # Check if the point is on the border\n    if x == 0 or y == 0 or x == w or y == h:\n        print(0)\n        return \"0\"\n\n    # Check if the point is within the rectangle\n    if 0 <= x <= w and 0 <= y <= h:\n        print(0)\n        return \"0\"\n\n    # Calculate the distance of the point from the rectangle border\n    dx = max(0, min(x, w) - w)\n    dy = max(0, min(y, h) - h)\n\n    # Calculate the maximum possible area of the rectangle\n    max_area = area - dx * dy\n\n    # Calculate the area of the cut\n    area_cut = dx * dy\n\n    # Check if the area of the cut is not larger than the maximum possible area\n    if area_cut <= max_area:\n        print(area_cut)\n        return \"1\"\n    else:\n        print(max_area)\n        return \"0\"",
        "test": "assert solution(\"2 3 1 2\") == \"3.000000 0\\n\"",
        "num_ids": 792,
        "indeed": false
    },
    {
        "number": 4337,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    colors = list(map(str, stdin.split()[1:]))\n\n    # check if there exists i, j and k such that colors[i] == \"P\", colors[j] == \"W\", and colors[k] == \"G\"\n    if all(colors[i] == \"P\" and colors[j] == \"W\" and colors[k] == \"G\" for i in range(n-2) for j in range(i+1, n-1) for k in range(j+1, n)):\n        return \"Four\"\n    else:\n        return \"Three\"",
        "test": "assert solution(\"6\\nP W Y G G\") == \"Three\"",
        "num_ids": 416,
        "indeed": false
    },
    {
        "number": 4338,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    def max_doors_with_zero_durability(doors: List[int], durability: int) -> int:\n        count = 0\n        for door in doors:\n            if door == 0:\n                count += 1\n                if durability > 0:\n                    durability = 0\n        return count\n\n    n, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    durability = max(0, max(a))\n    if max_doors_with_zero_durability(a, durability) == 0:\n        return \"0\"\n\n    for i in range(n):\n        if a[i] == durability:\n            a[i] = max(0, durability - x)\n            durability -= x\n        else:\n            a[i] = max(0, durability + y)\n            durability += y\n\n        if max_doors_with_zero_durability(a, durability) == 0:\n            return \" \".join(map(str, a))\n\n    return \" \".join(map(str, a))\n",
        "test": "assert solution(\"5 5 6\\n1 2 6 10 3\") == \"2\"",
        "num_ids": 610,
        "indeed": false
    },
    {
        "number": 4339,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *a, *b = map(int, stdin.split())\n    pairs = [(a[i], b[j]) for i in range(n) for j in range(i+1, n) if a[i] + a[j] > b[i] + b[j]]\n    return str(len(pairs))",
        "test": "assert solution(\"4\\n1 3 2 4\\n1 3 2 4\") == \"0\"",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 4340,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    for i in range(50000):\n        a = [b if b in [1, 3, 5, 7, 9] else a[j] for j, b in enumerate(a)]\n        a = [b if b in [2, 4, 6, 8, 10] else a[j] for j, b in enumerate(a)]\n\n    return \" \".join(map(str, a))",
        "test": "assert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"",
        "num_ids": 635,
        "indeed": false
    },
    {
        "number": 4341,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = set()\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        edges.add((a, b))\n        edges.add((b, a))\n    cycles = set()\n\n    def dfs(u: int, visited: set) -> None:\n        visited.add(u)\n        for v in edges.union(set(c for c in cycles if c[0] == u or c[-1] == u)):\n            if v not in visited:\n                dfs(v, visited)\n        cycles.add((u, *visited))\n\n    for u in range(1, n + 1):\n        if u not in visited:\n            dfs(u, visited)\n\n    return str(len(cycles))",
        "test": "assert solution(\"1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n11 12\\n13 14\\n15 16\\n\") == \"2\"",
        "num_ids": 1146,
        "indeed": false
    },
    {
        "number": 4342,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    colors = list(map(int, stdin.split()[1:]))\n\n    red = [i for i, c in enumerate(colors) if c == 1]\n    blue = [i for i, c in enumerate(colors) if c == 2]\n\n    edges = []\n    for i in range(n - 1):\n        edges.append(tuple(map(int, stdin.split()[n - 1 + i].split())))\n\n    nice_edges = 0\n    red_edges = 0\n    blue_edges = 0\n\n    for edge in edges:\n        vertex1, vertex2 = edge\n        if colors[vertex1 - 1]!= colors[vertex2 - 1]:\n            nice_edges += 1\n            if colors[vertex1 - 1] == 1:\n                red_edges += 1\n            elif colors[vertex1 - 1] == 2:\n                blue_edges += 1\n\n    return str(nice_edges)\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 4343,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n\n    # create a list of all strings consisting of exactly k lowercase Latin letters, lexicographically not less than s and not greater than t (including s and t) in lexicographical order\n    strings = sorted(set(list(s) + list(t) + [\"\".join(sorted(s)) + \"\".join(sorted(t))]))\n\n    # calculate the median (the middle element) of the list\n    mid = len(strings) // 2\n\n    # print the median (the middle element) of the list\n    print(strings[mid])",
        "test": "assert solution(\"6\\nijfvj\\ntvhqwp\") == \"qoztvz\"",
        "num_ids": 734,
        "indeed": false
    },
    {
        "number": 4344,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n\n    ratings = set(a)\n    if len(ratings) == k:\n        return \"YES\\n\" + \" \".join(map(str, sorted(ratings)))\n    return \"NO\"",
        "test": "assert solution(open(\"input3.txt\").readline().strip()) == \"YES\\n1 2 3 4\\n\"",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 4345,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    increasing = True\n    for i in range(1, len(a)):\n        if a[i] < a[i - 1]:\n            increasing = False\n            break\n\n    decreasing = True\n    for i in range(1, len(a)):\n        if a[i] > a[i - 1]:\n            decreasing = False\n            break\n\n    if not (increasing and decreasing):\n        return \"NO\"\n\n    res = [0] * n\n    for i in range(n):\n        if a[i] < a[0]:\n            res[i] = 1\n        else:\n            res[i] = 0\n\n    return \"YES\\n\" + \" \".join(map(str, res))\n",
        "test": "assert solution(\"5\\n1 2 4 0 2\") == \"NO\"",
        "num_ids": 887,
        "indeed": false
    },
    {
        "number": 4346,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_lanterns(v, l, r):\n        return sum(1 for p in range(l, r + 1, v) if p not in range(l, r + 1, v) or p == l)\n\n    def get_train_position(l, r):\n        return l - 1 if l % v == 0 else r\n\n    def check_train(l, r):\n        train_position = get_train_position(l, r)\n        return 1 if l <= train_position < r else 0\n\n    n, v, l, r = map(int, stdin.split())\n    queries = int(stdin.split()[0])\n\n    result = [0] * queries\n\n    for i in range(queries):\n        L, v, l, r = map(int, stdin.split())\n        result[i] = get_lanterns(v, l, r)\n\n    for i in range(queries):\n        L, v, l, r = map(int, stdin.split())\n        result[i] += check_train(l, r)\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(open('input.txt').read()) == '3\\n0\\n1134\\n0\\n'",
        "num_ids": 584,
        "indeed": false
    },
    {
        "number": 4347,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ways = 1\n    for i in range(1, n // 2 + 1):\n        ways = ways * (n - i) // (i * 2)\n    return str(ways)",
        "test": "assert solution(\"20\") == \"12164510040883200\"",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 4348,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    s = ''.join(sorted(s, reverse=True))\n\n    for i in range(k):\n        for letter in 'abcdefghijklmnopqrstuvwxyz':\n            if s.count(letter) >= 1:\n                s = s.replace(letter, '')\n                break\n        else:\n            return ''\n\n    return s",
        "test": "assert solution(\"u\") == \"def\", \"Example 3\"",
        "num_ids": 594,
        "indeed": false
    },
    {
        "number": 4349,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n    buy_price = [2] * n\n    sale_price = [1] * n\n    for j in range(m):\n        d, t = map(int, stdin.split())\n        buy_price[t - 1] = 1\n        sale_price[t - 1] = 2\n\n    days = 0\n    while days < n * k.count(0):\n        days += 1\n        if days % 2 == 0:\n            for i in range(n):\n                if k[i] > 0:\n                    k[i] -= 1\n        else:\n            for i in range(n):\n                if k[i] > 0:\n                    k[i] -= 1\n\n    if min(k)!= 0:\n        return \"No solution\"\n\n    for i in range(n):\n        if k[i] == 0:\n            continue\n        if i == 0 and k[i] == 1:\n            return days + 1\n        if sale_price[i - 1] <= buy_price[i - 1]:\n            return days + 1\n        if sale_price[i - 1] > buy_price[i - 1]:\n            return days + 1\n\n    return \"No solution\"\n\n\ndef",
        "test": "assert solution(",
        "num_ids": 941,
        "indeed": false
    },
    {
        "number": 4350,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0].split())\n    grid = [list(row) for row in stdin.split()[1:]]\n\n    def dfs(x, y, size):\n        if size == 1:\n            return [(x, y)]\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        result = []\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == '.':\n                result.extend(dfs(nx, ny, size - 1))\n        return result\n\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and dfs(i, j, 1):\n                stars.extend(dfs(i, j, 1))\n\n    if not stars:\n        return \"-1\"\n    stars.sort(key=lambda s: (s[0], s[1]))\n    return f\"{len(stars)}\\n\" + \"\\n\".join(f\"{star[0]} {star[1]} {star[2]}\" for star in stars)\n",
        "test": "assert solution(\"3 3\\n*.*\\n.*.\\n*.*\\n\") == \"-1\\n\"",
        "num_ids": 1412,
        "indeed": false
    },
    {
        "number": 4351,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 10 == 0:\n        return \"Yes\"\n    else:\n        reverse = 0\n        temp = N\n        while temp > 0:\n            reverse = reverse * 10 + temp % 10\n            temp //= 10\n        if N == reverse:\n            return \"Yes\"\n        else:\n            return \"No\"",
        "test": "assert solution(\"575\") == \"Yes\"",
        "num_ids": 297,
        "indeed": false
    },
    {
        "number": 4352,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    alice_card, bob_card = map(int, stdin.split())\n\n    if alice_card > bob_card:\n        return \"Alice\"\n    elif bob_card > alice_card:\n        return \"Bob\"\n    else:\n        return \"Draw\"",
        "test": "assert solution(\"8 6\") == \"Alice\"",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 4353,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string by comma\n    s = stdin.split(',')\n    \n    # Join the elements of the list with spaces\n    s =''.join(s)\n    \n    # Return the output string\n    return s",
        "test": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 4354,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    students = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        students.append((a, b))\n\n    checkpoints = []\n    for _ in range(m):\n        c, d = map(int, stdin.split())\n        checkpoints.append((c, d))\n\n    distances = [[None] * m for _ in range(n)]\n\n    for i, student in enumerate(students):\n        min_distance = float('inf')\n        min_checkpoint_index = -1\n\n        for j, checkpoint in enumerate(checkpoints):\n            distance = abs(student[0] - checkpoint[0]) + abs(student[1] - checkpoint[1])\n            if distance < min_distance:\n                min_distance = distance\n                min_checkpoint_index = j\n\n        distances[i][min_checkpoint_index] = min_distance\n\n    result = []\n    for student in students:\n        min_distance = float('inf')\n        min_checkpoint_index = -1\n\n        for j, checkpoint in enumerate(checkpoints):\n            distance = abs(student[0] - checkpoint[0]) + abs(student[1] - checkpoint[1])\n            if distance < min_distance:\n                min_distance = distance\n                min_checkpoint_index = j\n\n        result.append(min_checkpoint_index + 1)\n\n    return '\\n'.join(map(str, result))\n",
        "test": "assert solution(",
        "num_ids": 676,
        "indeed": false
    },
    {
        "number": 4355,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    result = a + a ** 2 + a ** 3\n    return str(result)",
        "test": "assert solution(\"2\") == \"14\"",
        "num_ids": 146,
        "indeed": true
    },
    {
        "number": 4356,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = list(stdin.split()[1:])\n    B = list(stdin.split()[1:])\n\n    def shift(image: List[str], row_shift: int, col_shift: int) -> List[str]:\n        result = []\n        for row in range(len(image)):\n            row_shifted = row_shift + row\n            col_shifted = col_shift + range(len(image[row]))\n            result.append(''.join([image[row_shifted][col] for col in col_shifted]))\n        return result\n\n    def check_subimage(image: List[str], subimage: List[str]) -> bool:\n        if len(image) < len(subimage) or len(subimage) < len(image[0]):\n            return False\n        for i in range(len(subimage)):\n            if image[i]!= subimage[i]:\n                return False\n        return True\n\n    def find_subimage(image: List[str], target_subimage: List[str]) -> bool:\n        for row_shift in range(-(len(image) - len(target_subimage)), len(image) - len(target_subimage) + 1):\n            for col_shift in range(-(len(image[0]) - len(target_subimage[0])):len(image[0]) - len(target_subimage[0]) + 1):\n                if check_subimage(image, shift(target_subimage, row_shift, col_shift)):\n                    return True\n        return False\n\n    for i in range(m):\n        if not find_subimage(A, B):\n            return \"No\"\n\n    return \"Yes\"",
        "test": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\\\n.#\\n\") == \"Yes\"",
        "num_ids": 894,
        "indeed": false
    },
    {
        "number": 4357,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    values = list(map(int, stdin.split()))\n\n    # Calculate the maximum possible amount of the allowance\n    max_amount = 1000\n    for a in values:\n        for b in values:\n            for c in values:\n                max_amount = max(max_amount, a + b + c)\n\n    return str(max_amount)\n",
        "test": "assert solution('1 5 2') == '53'",
        "num_ids": 1334,
        "indeed": false
    },
    {
        "number": 4358,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    prices = [int(x) for x in stdin.split()[1:]]\n    prices.sort(reverse=True)\n    total = 0\n\n    for i in range(n):\n        if i == n - 1:\n            total += prices[i]\n        else:\n            total += prices[i] / 2 + prices[i + 1]\n\n    return str(total)",
        "test": "assert solution(input()) == \"15950\"",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 4359,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    dishes = [int(x) for x in stdin.split()]\n    orders = []\n    for i in range(len(dishes)):\n        orders.append(i)\n\n    times = [0] * (len(dishes) + 1)\n    orders.sort()\n\n    for order in orders:\n        times[order + 1] = times[order] + dishes[order]\n\n    for i in range(len(dishes) + 1):\n        print(times[i], end=\" \")\n\n    return str(times[-1])",
        "test": "assert solution(\"12\\n10\\n14\\n16\\n18\\n22\\n24\\n26\\n28\\n30\\n32\\n34\\n36\\n38\\n40\\n42\\n44\\n46\\n48\\n50\\n52\\n54\\n56\\n58\\n60\\n62\\n64\\n66\\n68\\n70\\n72\\n74\\n76\\n78\\n80\\n82\\n84\\n86\\n88\\n90\\n92\\n94\\n96\\n98\\n100\\n102\\n104\\n106\\n108\\n110\\n112\\n114\\n116\\n118\\n120\") == \"330\"",
        "num_ids": 649,
        "indeed": false
    },
    {
        "number": 4360,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = [1/float(x) for x in a]\n    inverse_sum = 1/sum(a)\n    return str(1/inverse_sum)",
        "test": "assert solution(\"2\\n10 30\\n\") == \"7.5\"",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 4361,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h = [int(h) for h in stdin.split()[1:]]\n    \n    h_max = max(h)\n    h_min = min(h)\n    \n    result = h_max - h_min\n    \n    return str(result)\n\nwith open('input.txt', 'r') as input_file:\n    stdin = input_file.read()\n\nprint(solution(stdin))",
        "test": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n\") == \"2\"",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 4362,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin.strip().upper()\n    if alpha in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        return 'A'\n    else:\n        return 'a'",
        "test": "assert solution(\"\u03b2\") == \"a\"",
        "num_ids": 237,
        "indeed": false
    },
    {
        "number": 4363,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.split())\n    result = 0\n    for x in range(k + 1):\n        for y in range(k + 1):\n            for z in range(k + 1):\n                if x + y + z == s:\n                    result += 1\n\n    return str(result)\n\n\nstdin = \"2 2\\n\"\nprint(solution(stdin))",
        "test": "assert solution(\"2 2\") == \"6\"",
        "num_ids": 364,
        "indeed": false
    },
    {
        "number": 4364,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    for i in range(1, len(S)):\n        if S[i] == '0':\n            continue\n        if S[i]!= '0':\n            S[i] = int(S[i])\n    S = ''.join(map(str, S))\n\n    if len(S) == 4:\n        S = int(S)\n        if 1000 <= S <= 9999:\n            year = S // 1000\n            month = S % 1000 // 10\n            day = S % 100 // 1\n            if 1 <= month <= 12 and 1 <= day <= 31:\n                if S < 10000:\n                    return f'{year:02d}{month:02d}'\n                else:\n                    return f'{month:02d}{year:02d}'\n            else:\n                print('This string is only valid in YYMM format.')\n        else:\n            print('This string is only valid in MMYY format.')\n    else:\n        print('This string is only valid in YYMM or MMYY format.')\n\n    return 'NA'",
        "test": "assert solution(\"01\") == \"NA\", \"Solution did not work for input 01\"",
        "num_ids": 843,
        "indeed": false
    },
    {
        "number": 4365,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 2 or k > 100:\n        return \"Invalid input.\"\n    num_ways = 0\n    for i in range(1, k + 1, 2):\n        num_ways += 1\n    for i in range(3, k + 1, 2):\n        num_ways += 1\n    return str(num_ways)",
        "test": "assert solution(\"3\") == \"2\"",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 4366,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    A, B = int(inputs[0]), int(inputs[1])\n    \n    if A == 0:\n        if B <= 12:\n            time = 12\n        else:\n            time = 24 - B\n    else:\n        time = A + B\n    \n    return str(time)",
        "test": "assert solution(\"9 12\") == \"21\"",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 4367,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n\n    if R < 100:\n        R = R + 1000\n\n    return str(R - 100 * (10 - N))",
        "test": "assert solution(\"2 2919\") == \"3719\"",
        "num_ids": 228,
        "indeed": false
    },
    {
        "number": 4368,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(len(bin(n)[2:].zfill(k)))",
        "test": "assert solution(\"11 2\") == \"4\"",
        "num_ids": 1203,
        "indeed": false
    },
    {
        "number": 4369,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    sheets = 1\n    for i in range(1, n + 1, 2):\n        sheets += n // i\n\n    print(sheets)\n\n    return \"\"\n\nstdin = \"5\\n\"\nstdout = solution(stdin)\nprint(stdout)",
        "test": "assert solution(\"5\") == \"3\"",
        "num_ids": 223,
        "indeed": false
    },
    {
        "number": 4370,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a + b <= 16:\n        return \"Yay!\"\n    else:\n        return \":\"",
        "test": "assert solution(\"5 4\") == \"Yay!\"",
        "num_ids": 154,
        "indeed": false
    },
    {
        "number": 4371,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    N = len(S)\n\n    # Check that the string length is between 4 and 10 (inclusive)\n    if 4 <= N <= 10:\n        # Initialize the minimum difference to infinity\n        min_diff = float('inf')\n\n        # Loop through all possible combinations of three consecutive digits\n        for i in range(N - 3):\n            x = int(S[i:i+3])\n\n            # Check if the sum of the digits is 753\n            if sum(x) == 753:\n                # Calculate the difference between X and 753\n                diff = 753 - x\n\n                # Check if the difference is smaller than the current minimum\n                if diff < min_diff:\n                    min_diff = diff\n\n        # Print the minimum difference\n        print(min_diff)\n\n    else:\n        print(\"Invalid input\")\n",
        "test": "assert solution('123456') == '34'",
        "num_ids": 659,
        "indeed": false
    },
    {
        "number": 4372,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    count = [0] * n\n    for i in range(len(a)):\n        count[a[i] - 1] += 1\n\n    x = max(count)\n    y = len(count) // x\n\n    result = 0\n    for i in range(x):\n        result += (count[i] * (y + 1))\n\n    print(result)\n    print(y)\n\nsolution(input())",
        "test": "assert solution(\"6\\n13 52 0 13 26 52\\n\") == \"12 13\\n\"",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 4373,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n, *contests = map(int, stdin.split())\n    a = [sorted(list(set(map(int, input().split())))) for _ in range(n)]\n    dp = [[0] * (a[i][-1] + 1) for i in range(n)]\n\n    def dfs(i, curr, res):\n        if i == n:\n            return res\n\n        if dp[i][curr]!= 0:\n            return dp[i][curr]\n\n        max_val = -1\n        for j in range(len(a[i])):\n            if a[i][j] <= curr:\n                max_val = max(max_val, dfs(i + 1, curr + a[i][j], res + 1))\n\n        dp[i][curr] = max_val\n        return dp[i][curr]\n\n    return str(dfs(0, 0, 0))\n",
        "test": "assert solution(\"5\\n1 1 1 2 2\") == \"2\"",
        "num_ids": 592,
        "indeed": false
    },
    {
        "number": 4374,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [(int(v), int(u)) for v, u in [line.split() for line in stdin.split('\\n')[1:]]]\n    graph = [[] for _ in range(n)]\n    for v, u in edges:\n        graph[v - 1].append(u - 1)\n        graph[u - 1].append(v - 1)\n    visited = [False] * n\n    queue = [(0, 0, 1)]\n    diameter = 0\n\n    while queue:\n        depth, current_vertex, current_length = queue.pop(0)\n        if visited[current_vertex]:\n            continue\n        visited[current_vertex] = True\n        if current_vertex == n - 1:\n            diameter = max(diameter, current_length)\n        for neighbor in graph[current_vertex]:\n            queue.append((depth + 1, neighbor, current_length + 1))\n\n    return str(diameter)",
        "test": "assert solution(\"3 2\\n1 3\\n2 3\\n\") == \"2\\n4 2\\n\"",
        "num_ids": 944,
        "indeed": false
    },
    {
        "number": 4375,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    edges = [list(map(int, stdin.split())) for _ in range(n - 1)]\n\n    def dfs(v, seen=None, depth=0, total_weight=0):\n        if seen is None:\n            seen = set()\n        if v in seen:\n            return\n        seen.add(v)\n\n        for u, weight in zip(edges[v - 1], a[v - 1:v + 1]):\n            if depth + 1 - k < u <= depth + k:\n                total_weight += weight\n\n        for u in edges[v - 1]:\n            dfs(u, seen, depth + 1, total_weight)\n\n        return total_weight\n\n    return str(dfs(1))\n\n\ndef",
        "test": "assert solution(\"7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\") == \"4\"",
        "num_ids": 1068,
        "indeed": false
    },
    {
        "number": 4376,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    result = []\n    for j in range(m):\n        f, k = b[j] - 1, k = 0, 0\n        for i in range(n):\n            if a[i] > 0:\n                if k + a[i] > k:\n                    f = i + 1\n                    k = k + a[i]\n        result.append(str(f) +'' + str(k))\n    return '\\n'.join(result)",
        "test": "assert solution(input_2) == output_2",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 4377,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    arr = sorted([input_list[0]+input_list[1], input_list[0]+input_list[2], input_list[1]+input_list[2], input_list[0]+input_list[1]+input_list[2]])\n    for i in range(3):\n        print(arr[i], end=' ')",
        "test": "assert solution(\"201 101 101 200\") == \"1 100 100\"",
        "num_ids": 931,
        "indeed": false
    },
    {
        "number": 4378,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    garland = [s for s in stdin.split()[1]]\n\n    def is_diverse(t: list) -> bool:\n        for i in range(len(t) - 1):\n            if t[i] == t[i + 1]:\n                return False\n        return True\n\n    def min_recolors(t: list, color: str, garland: list) -> int:\n        recolors = 0\n        for lamp in t:\n            if lamp == color:\n                recolors += 1\n                garland[t.index(lamp)] = garland[garland.index(color)]\n        return recolors\n\n    def min_recolors_helper(start: int, end: int, t: list, color: str, garland: list) -> int:\n        if end - start == 1:\n            return min_recolors(t, color, garland)\n\n        mid = (start + end) // 2\n\n        t1 = t[:mid] + [garland[garland.index(color)]] + t[mid:]\n        recolor_1 = min_recolors_helper(start, mid, t1, color, garland)\n\n        t2 = t[:mid] + [garland[garland.index(garland[garland.index(color)])]] + t[mid + 1:]\n        recolor_2 = min_recolors_helper(mid, end, t2, color, garland)\n\n        return min(recolor_1, recolor_2)\n\n    color_count = Counter(garland)\n    min_recolors_helper_result = min_recolors_helper(0, n - 1, garland, garland[0], garland)\n\n    min_recolors_needed = min_recolors_helper_result\n    min_recolor_solution = []\n    min_recolor_solution.extend([garland[i] for i in range(n) if garland[i] == garland[0]])\n\n    for i in range(1, n):\n        if min_recolors(min_recolor_solution, garland[i], garland) < min_recolors_needed:\n            min_recolors_needed = min_recolors(min_recolor_solution, garland[i], garland)\n            min_recolor_solution.append(garland[i])\n\n    if is_diverse(min_recolor_solution):\n        print(min_recolors_needed)\n        print(''.join(min_recolor_solution))\n    else:\n        print(\"No solution\")\n\n\ndef",
        "test": "assert solution(\"13\\nBBRRRRGGGGGRR\\n\") == \"6\\nBGRBRBGBGBGRG\"",
        "num_ids": 1184,
        "indeed": false
    },
    {
        "number": 4379,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    \n    def is_increasing_sequence(arr: list, length: int) -> bool:\n        if length <= 1:\n            return True\n        \n        for i in range(length - 1):\n            if arr[i] > arr[i + 1]:\n                return False\n        return True\n    \n    max_length = 0\n    max_seq = []\n    \n    for i in range(n):\n        for length in range(1, n + 1):\n            if is_increasing_sequence(arr[:i] + arr[i + 1:i + length], length):\n                if length > max_length:\n                    max_length = length\n                    max_seq = arr[:i] + arr[i + 1:i + length]\n    \n    return f\"{max_length}\\n{max_seq}\"",
        "test": "assert solution(open(\"input.txt\", \"r\").readline().strip()) == \"Output:\\n2\\n2 3\\n1 4\\n1\\n1\"",
        "num_ids": 856,
        "indeed": false
    },
    {
        "number": 4380,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    C = 1\n\n    while C <= 3:\n        if A * B * C % 2!= 0:\n            return \"Yes\"\n        C += 1\n\n    return \"No\"",
        "test": "assert solution(\"3 1\") == \"Yes\"",
        "num_ids": 345,
        "indeed": true
    },
    {
        "number": 4381,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if X % 2 == 1:\n        return \"Invalid input\"\n    elif X % Y == 0:\n        return (X * Y) // 2\n    else:\n        return (X * Y) // Y\n\nstdin = input()\nprint(solution(stdin))",
        "test": "assert solution(input()) == \"110\", \"Incorrect output\"",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 4382,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 9:\n        return \"Invalid input. N should be between 1 and 9.\"\n\n    digits = list(range(1, n+1))\n    result = []\n\n    def backtrack(combination, password):\n        if len(combination) == 3:\n            result.append(password)\n            return\n        for digit in digits:\n            backtrack(combination+[digit], password+str(digit))\n\n    backtrack([], [])\n    return str(len(result))",
        "test": "assert solution(\"9\") == \"36\"",
        "num_ids": 276,
        "indeed": false
    },
    {
        "number": 4383,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    \n    if X < 1 or X > 9:\n        return \"NO\"\n    \n    if X == 1:\n        return \"YES\"\n    \n    if X == 2 or X == 3:\n        return \"NO\"\n    \n    if X == 4:\n        return \"YES\"\n    \n    if X == 5:\n        return \"YES\"\n    \n    if X == 6:\n        return \"YES\"\n    \n    if X == 7:\n        return \"YES\"\n    \n    if X == 8:\n        return \"YES\"\n    \n    if X == 9:\n        return \"NO\"",
        "test": "assert solution(\"5\") == \"YES\", \"Test Case 1 Failed\"",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 4384,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rounds = [f\"{n+i:03d}\" for i in range(1, 1000)] + [\"ABC999\"]\n    return rounds[n]",
        "test": "assert solution(\"999\") == \"ABC\"",
        "num_ids": 1155,
        "indeed": false
    },
    {
        "number": 4385,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    if k > abs(a - b) + abs(a - c) + abs(a - d) + abs(a - e) + abs(b - c) + abs(b - d) + abs(b - e) + abs(c - d) + abs(c - e) + abs(d - e):\n        return \"Yay!\"\n    else:\n        return \":(\\n\"",
        "test": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n\") == \":(\\n\"",
        "num_ids": 621,
        "indeed": false
    },
    {
        "number": 4386,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, s = map(int, stdin.split())\n    if a >= 3200:\n        print(s)\n    else:\n        print(\"red\")",
        "test": "assert solution('3200\\npink\\n') == 'pink\\n'",
        "num_ids": 206,
        "indeed": false
    },
    {
        "number": 4387,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    if r < 1200:\n        return \"ABC\"\n    elif r < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\"",
        "test": "assert solution(\"1199\") == \"ABC\"",
        "num_ids": 193,
        "indeed": true
    },
    {
        "number": 4388,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = \"\"\n    for digit in str(n):\n        if digit == \"1\":\n            result += \"9\"\n        elif digit == \"9\":\n            result += \"1\"\n        else:\n            result += digit\n    return result\n\ndef",
        "test": "assert solution(\"119\") == \"991\"",
        "num_ids": 208,
        "indeed": false
    },
    {
        "number": 4389,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split('\\n')[0])\n    results = []\n\n    for _ in range(test_cases):\n        b = input()\n        a = ''.join(sorted(b))\n        results.append(a)\n\n    return '\\n'.join(results)",
        "test": "assert solution('zzzzzzzzzz') == 'zzzzzz'",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 4390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    moves = 0\n    while m % n!= 0:\n        moves += 1\n        m += 1\n    return str(moves)\n\ndef",
        "test": "assert solution(\"10 4\\n13 9\\n100 13\\n123 456\\n92 46\\n\") == \"2\\n5\\n4\\n333\\n0\\n\"",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 4391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    max_temp = 0\n    for i in range(n-k+1):\n        temp_sum = sum(a[i:i+k])\n        max_temp = max(max_temp, temp_sum/k)\n    \n    return str(max_temp)",
        "test": "assert solution(\"4 3\\n3 4 1 2\\n\") == \"2.666666666666667\"",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 4392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        n, m = map(int, stdin.split()[1:])\n        a = list(map(int, stdin.split()[2:2+n]))\n        p = list(map(int, stdin.split()[2+n:2+n+m]))\n        \n        for i in p:\n            a[i], a[i+1] = a[i+1], a[i]\n            \n        if sorted(a) == a:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n\ndef",
        "test": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"YES\\nNO\\nYES\\nYES\\nNO\\nYES\\n\"",
        "num_ids": 916,
        "indeed": false
    },
    {
        "number": 4393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = stdin.split()[1]\n    count = [0] * 26\n    for c in t:\n        count[ord(c) - ord('a')] += 1\n    s = \"\"\n    for i in range(n):\n        if count[i] == 0:\n            continue\n        for j in range(count[i]):\n            s += chr(ord('a') + i)\n        count[i] = 0\n    return s",
        "test": "assert solution(input()) == \"z\"",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 4394,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def read_integer_array(stdin: str, n: int) -> List[int]:\n        return list(map(int, stdin.split()))\n\n    def read_edges(stdin: str) -> List[Tuple[int, int, int]]:\n        return [(tuple(read_integer_array(stdin, 3))) for _ in range(int(stdin.split()[1]))]\n\n    def union_find_set(parent: List[int], rank: List[int], num_sets: int) -> int:\n        if parent[node] == parent[root]:\n            return root\n\n        if rank[parent[node]] == rank[parent[root]]:\n            rank[parent[node]] += 1\n\n        parent[node] = union_find_set(parent, rank, num_sets)\n        return parent[node]\n\n    def union_find_union(parent: List[int], rank: List[int], num_sets: int, u: int, v: int) -> None:\n        u_root = union_find_set(parent, rank, num_sets)\n        v_root = union_find_set(parent, rank, num_sets)\n\n        if u_root!= v_root:\n            if rank[u_root] < rank[v_root]:\n                parent[u_root] = v_root\n            elif rank[u_root] > rank[v_root]:\n                parent[v_root] = u_root\n            else:\n                parent[v_root] = u_root\n                rank[u_root] += 1\n\n            num_sets -= 1\n\n    n, m = map(int, stdin.split()[0].split())\n\n    edges = read_edges(stdin)\n    edges.sort(key=lambda x: x[2])\n\n    parent = [i for i in range(n)]\n    rank = [0] * n\n    num_sets = n\n\n    ans = 0\n\n    for u, v, _ in edges:\n        u_root = union_find_set(parent, rank, num_sets)\n        v_root = union_find_set(parent, rank, num_sets)\n\n        if u_root!= v_root:\n            ans += 1\n            union_find_union(parent, rank, num_sets, u_root, v_root)\n\n    return str(ans)\n",
        "test": "assert solution(",
        "num_ids": 1368,
        "indeed": false
    },
    {
        "number": 4395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    s = [c.upper() for c in s]\n    s_dict = {'R': 0, 'G': 1, 'B': 2}\n\n    # Find the number of recolors needed to obtain a nice garland\n    def find_recolors(curr_color):\n        recolors = 0\n        for lamp in s_dict:\n            if lamp == curr_color:\n                continue\n            if abs(s_dict[lamp] - s_dict[curr_color]) % 3 == 0:\n                recolors += 1\n        return recolors\n\n    recolors = [find_recolors(c) for c in 'RGB']\n    min_recolors = min(recolors)\n    nice_garland = ''\n\n    # Check if a nice garland exists for the current color combination\n    for curr_color in 'RGB':\n        if find_recolors(curr_color) == min_recolors:\n            for i in range(n):\n                if s[i] == curr_color:\n                    nice_garland += 'B'\n                else:\n                    nice_garland += 'R'\n\n    print(min_recolors)\n    print(nice_garland)",
        "test": "assert solution(\"7\\nRGBGRBB\") == \"3\\nRGBRGBR\"",
        "num_ids": 794,
        "indeed": false
    },
    {
        "number": 4396,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    relatives = []\n    for _ in range(N):\n        x, u = stdin.split()\n        x, u = float(x), u[0]\n        relatives.append((x, u))\n    \n    total = sum(rel[0] * 380000.0 if rel[1] == 'JPY' else rel[0] for rel in relatives)\n    \n    return f\"{total:.5f}\"",
        "test": "assert solution(\"5\\n10000 JPY\\n0.10000000 BTC\\n10000 JPY\\n100 BTC\\n1000000 BTC\") == \"348000.0\"",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 4397,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    j = 1\n    while i > 1:\n        j += 1\n        i -= 1\n    return str(j)",
        "test": "assert solution(\"4 2\") == \"3\"",
        "num_ids": 133,
        "indeed": false
    },
    {
        "number": 4398,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(str, stdin.split())\n    s = s.lower()\n    t = t.lower()\n    return s[0] + t[0] + ''.join(s[1:] + t[1:])\n\ndef",
        "test": "assert solution(\"2\\nip cc\") == \"icpc\"",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 4399,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin.strip())\n    if len(S)!= 3 or not all(c in {'A', 'B'} for c in S):\n        return \"No\"\n\n    A, B, C = S\n    bus_services = {\n        (1, 3),\n        (2, 2),\n        (1, 2),\n        (2, 3)\n    }\n\n    for a, b in bus_services:\n        if (S[a-1] == A) ^ (S[b-1] == A) and (S[a-1] == B) ^ (S[b-1] == B):\n            return \"Yes\"\n\n    return \"No\"",
        "test": "assert solution(\"BAC\") == \"No\"",
        "num_ids": 340,
        "indeed": true
    },
    {
        "number": 4400,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    \n    # Initialize variables\n    max_consecutive_rainy_days = 0\n    current_consecutive_rainy_days = 0\n    is_sunny = True\n    \n    # Iterate through the list and count consecutive rainy days\n    for i, s in enumerate(S):\n        if s == \"R\":\n            is_sunny = False\n            current_consecutive_rainy_days += 1\n            \n            # Update max_consecutive_rainy_days if needed\n            if current_consecutive_rainy_days > max_consecutive_rainy_days:\n                max_consecutive_rainy_days = current_consecutive_rainy_days\n            \n            # Reset current_consecutive_rainy_days if it reaches the end of the rainy days\n            if i == 2:\n                current_consecutive_rainy_days = 0\n    \n    return str(max_consecutive_rainy_days)",
        "test": "assert solution(\"RRS\") == \"2\"",
        "num_ids": 1474,
        "indeed": false
    },
    {
        "number": 4401,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n\n    a, b = x, y\n    c = z\n\n    a, b = b, a\n    c, a = a, c\n\n    return f\"{a} {b} {c}\"\n",
        "test": "assert solution(\"1 2 3\") == \"3 1 2\"",
        "num_ids": 423,
        "indeed": true
    },
    {
        "number": 4402,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    age, price = map(int, stdin.split())\n    \n    if age >= 13:\n        cost = price\n    elif age >= 6 and age <= 12:\n        cost = price / 2\n    else:\n        cost = 0\n    \n    return str(cost)",
        "test": "assert solution(\"30 100\") == \"100\"",
        "num_ids": 293,
        "indeed": false
    },
    {
        "number": 4403,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    count = 0\n    num = 0\n    for symbol in S:\n        if symbol == \"+\":\n            num += 1\n        elif symbol == \"-\":\n            num -= 1\n        count += 1\n        if count == 4:\n            break\n    return str(num)",
        "test": "assert solution(\"+-++\") == \"2\"",
        "num_ids": 300,
        "indeed": true
    },
    {
        "number": 4404,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    year, month, day = map(int, stdin.split(\"/\"))\n    if month == 4 and day > 30:\n        return \"Heisei\"\n    else:\n        return \"TBD\"",
        "test": "assert solution(\"2019/04/29\") == \"TBD\"",
        "num_ids": 368,
        "indeed": false
    },
    {
        "number": 4405,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    topics = list(map(int, stdin.split()[1:]))\n\n    # Count the number of problems for each topic\n    topic_counts = {}\n    for topic in topics:\n        topic_counts[topic] = topic_counts.get(topic, 0) + 1\n\n    # Calculate the maximum number of problems in each contest\n    max_problems_in_contest = 2 * topic_counts.get(min(topics), 0)\n\n    # Calculate the total number of problems\n    total_problems = sum(topic_counts.values())\n\n    # Calculate the maximum number of problems in all the contests\n    max_problems = max(max_problems_in_contest, 2 * total_problems - 1)\n\n    return str(max_problems)\n",
        "test": "assert solution(\"3\\n1337 1337 1337\") == \"3\"",
        "num_ids": 657,
        "indeed": false
    },
    {
        "number": 4406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    id_list = list(map(int, stdin.split()))\n    \n    # sort the id_list in ascending order\n    id_list.sort()\n    \n    # find the maximum number of conversations that can be displayed\n    max_conversations = min(n, k)\n    \n    # find the number of conversations that will be shown\n    shown_conversations = 0\n    for i in range(max_conversations):\n        if shown_conversations == k:\n            break\n        for j in range(i + 1, len(id_list)):\n            if id_list[i] == id_list[j]:\n                shown_conversations += 1\n                break\n        else:\n            shown_conversations += 1\n    \n    # display the conversations\n    print(shown_conversations)\n    for i in range(shown_conversations):\n        print(id_list[i])\n    \n    return \" \".join(map(str, [shown_conversations] + id_list[:shown_conversations]))\n",
        "test": "assert solution(\"5 2\\n2 3 1 2 3\") == \"2\\n2 1\"",
        "num_ids": 987,
        "indeed": false
    },
    {
        "number": 4407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    coins = list(map(int, stdin.split()))\n    queries = list(map(int, stdin.split()))\n    \n    coins.sort(reverse=True)\n    \n    min_coins = float('inf')\n    for coin in coins:\n        if coin <= queries[0]:\n            min_coins = min(min_coins, 1)\n            queries.pop(0)\n        else:\n            break\n    \n    if min_coins == float('inf'):\n        return '-1'\n    else:\n        return str(min_coins)\n\nwith open('polycarp_coins.in', 'r') as f:\n    stdin = f.read()\n\nwith open('polycarp_coins.out', 'w') as f:\n    f.write(solution(stdin))",
        "test": "assert solution(\"\"\"",
        "num_ids": 782,
        "indeed": false
    },
    {
        "number": 4408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Read input values\n    n, k = map(int, stdin.split())\n    cards = list(map(int, stdin.split()))\n    favorite_numbers = list(map(int, stdin.split()))\n    h = list(map(int, stdin.split()))\n\n    # Calculate the number of cards each player gets\n    cards_per_player = [0] * k\n    for i in range(k * n):\n        cards_per_player[cards[i] // favorite_numbers[i % n] % k] += 1\n\n    # Calculate the maximum possible total joy levels\n    max_total_joy_levels = 0\n    for i in range(k):\n        max_total_joy_levels += h[i] * cards_per_player[i]\n    max_total_joy_levels += (k - sum(cards_per_player)) * h[-1]\n\n    return str(max_total_joy_levels)",
        "test": "assert solution(\"3 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\\n0\"",
        "num_ids": 1153,
        "indeed": false
    },
    {
        "number": 4409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def dfs(i: int, count: int, operations: list) -> int:\n        if i == n:\n            return count\n\n        min_count = dfs(i + 1, count, operations)\n\n        if count < min_count:\n            min_count = count\n\n        for j in range(i + 1, n):\n            if abs(a[i] - a[j]) == 1:\n                if count + 1 < min_count:\n                    min_count = count + 1\n                    operations.append((1, i, j))\n                if count - 1 < min_count:\n                    min_count = count - 1\n                    operations.append((2, i, j))\n\n        return min_count\n\n    min_count = dfs(0, 0, [])\n    return str(min_count) + '\\n' + '\\n'.join([' '.join(str(x) for x in o) for o in operations])\n\nwith open(\"input.txt\", \"r\") as file:\n    input_data = file.read()\n\nprint(solution(input_data))",
        "test": "assert solution(input()) == '0\\n'",
        "num_ids": 859,
        "indeed": false
    },
    {
        "number": 4410,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split('\\n')[0])\n    for _ in range(test_cases):\n        n, k = map(int, stdin.split('\\n')[1].split())\n        s = stdin.split('\\n')[2]\n\n        if sum(1 for x in s if x == '1') < n:\n            print(0)\n        else:\n            occupied_tables = [0] * n\n            for i, c in enumerate(s):\n                if c == '1':\n                    occupied_tables[i] = 1\n\n            max_free_tables = 0\n            for i in range(n - 1):\n                if occupied_tables[i] == 1:\n                    for j in range(i + 1, i + k + 1):\n                        if occupied_tables[j] == 0:\n                            max_free_tables = max(max_free_tables, j - i)\n                            break\n\n            print(max_free_tables)",
        "test": "assert solution(\"3 1\\n001\") == \"1\\n\"",
        "num_ids": 892,
        "indeed": false
    },
    {
        "number": 4411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = [(int(x.split()[0]), int(x.split()[1])) for x in stdin.split(\"\\n\")[1:n+1]]\n\n    segments.sort(key=lambda x: (x[1], x[0]))\n    bad_points = []\n    for segment in segments:\n        if segment[0] in bad_points or segment[1] in bad_points:\n            continue\n        if len(set([segment[0], segment[1]])) > k:\n            bad_points.append(segment[0])\n            bad_points.append(segment[1])\n        else:\n            for point in range(segment[0], segment[1] + 1):\n                if point not in bad_points:\n                    bad_points.append(point)\n\n    return str(len(bad_points)) + \" \" + \" \".join(map(str, bad_points))\n",
        "test": "assert solution('''",
        "num_ids": 835,
        "indeed": false
    },
    {
        "number": 4412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    queries = [int(x) for x in stdin.split()]\n    n = queries.pop(0)\n    pool = [int(x) for x in stdin.split()[1:]]\n\n    def is_valid_pair(x, y):\n        return not (x % y == 0 or y % x == 0)\n\n    def get_max_cumprettyiness(problems):\n        max_cumprettyiness = 0\n        for i in range(len(problems) - 1):\n            for j in range(i + 1, len(problems)):\n                if is_valid_pair(problems[i], problems[j]):\n                    max_cumprettyiness = max(max_cumprettyiness, problems[i] + problems[j])\n        return max_cumprettyiness\n\n    def max_cumprettyiness_for_three_problems(pool):\n        n = len(pool)\n        if n < 3:\n            return 0\n\n        max_cumprettyiness = 0\n        for i in range(n - 2):\n            for j in range(i + 2, n):\n                if is_valid_pair(pool[i], pool[j]):\n                    max_cumprettyiness = max(max_cumprettyiness, pool[i] + pool[j])\n\n        return max_cumprettyiness\n\n    def max_cumprettyiness_for_three_problems_from_list(pool):\n        n = len(pool)\n        if n < 3:\n            return 0\n\n        max_cumprettyiness = 0\n        for i in range(n - 2):\n            for j in range(i + 2, n):\n                if is_valid_pair(pool[i], pool[j]):\n                    max_cumprettyiness = max(max_cumprettyiness, pool[i] + pool[j])\n\n        return max_cumprettyiness\n\n    for _ in range(queries[0]):\n        num_problems = queries.pop(0)\n        problem_pretties = queries.pop(0)[:num_problems]\n        max_cumprettyiness = max_cumprettyiness_for_three_problems(problem_pretties)\n        print(max_cumprettyiness)\n\n    return \"\"\n\n\ndef",
        "test": "assert solution(",
        "num_ids": 915,
        "indeed": false
    },
    {
        "number": 4413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = list(map(int, a))\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    def divisors(n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        for i in range(3, n+1, 2):\n            if n % i == 0:\n                return i + divisors(n // i)\n        return n\n    def min_teams(a, b, k):\n        n = len(a)\n        a = [gcd(abs(a[i] - a[j]), b) for i in range(n) for j in range(i+1, n) if abs(a[i] - a[j]) == 1]\n        b = sorted(set(a))\n        return len(b) + 1\n\n    queries = int(stdin.split()[0])\n    for _ in range(queries):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2:]))\n        k = divisors(sum(a)) - 1\n        print(min_teams(a, k, k))",
        "test": "assert solution(\"7\\n1 2 3 4 5 6 7\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\\n3\\n5 10 20\\n4\\n6 7 8 9\") == \"2\\n1\\n2\\n1\\n2\\n2\\n1\\n2\\n2\\n2\"",
        "num_ids": 956,
        "indeed": false
    },
    {
        "number": 4414,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def count_coins(n, a, b):\n        count = 0\n        for i in range(a + 1):\n            for j in range(b + 1):\n                if n >= i * n and i * n >= j * 1:\n                    count += 1\n        return count\n\n    def check_solution(x, y, n, a, b, s):\n        if count_coins(n, a, b) >= x and count_coins(n, a, b) >= y:\n            total = x * n + y * 1\n            return total == s\n        else:\n            return False\n\n    q = int(stdin.split()[0])\n    for _ in range(q):\n        a, b, n, s = map(int, stdin.split()[1:])\n        x = count_coins(n, a, b)\n        for y in range(x + 1):\n            if check_solution(x, y, n, a, b, s):\n                print(\"YES\")\n                break\n        else:\n            print(\"NO\")\n\ndef",
        "test": "assert solution(\"1 2 3 4\\n1 2 3 6\\n5 2 6 27\\n3 3 5 18\") == \"YES\\nNO\\nNO\\nYES\"",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 4415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a.sort()\n    \n    def find_strictly_increasing(seq: list) -> int:\n        for i in range(len(seq) - 1):\n            if seq[i] + 1!= seq[i + 1]:\n                return i\n        return len(seq) - 1\n\n    def find_strictly_decreasing(seq: list) -> int:\n        for i in range(len(seq) - 1):\n            if seq[i] - 1!= seq[i + 1]:\n                return i\n        return len(seq) - 1\n\n    inc_seq = []\n    dec_seq = []\n\n    for i in range(n):\n        if a[i] == a[n - i - 1]:\n            if i % 2 == 0:\n                inc_seq.append(a[i])\n            else:\n                dec_seq.append(a[i])\n\n    if not inc_seq or not dec_seq:\n        return \"NO\"\n\n    inc_seq.sort()\n    dec_seq.sort(reverse=True)\n\n    for i in range(min(len(inc_seq), len(dec_seq))):\n        if inc_seq[i]!= dec_seq[i]:\n            return \"NO\"\n\n    inc_n = len(inc_seq)\n    dec_n = len(dec_seq)\n\n    print(\"YES\")\n    print(inc_n)\n    print(\" \".join(map(str, inc_seq)))\n    print(dec_n)\n    print(\" \".join(map(str, dec_seq)))\n\n    return \"YES\"\n",
        "test": "assert solution('''",
        "num_ids": 959,
        "indeed": false
    },
    {
        "number": 4416,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    books = []\n    for _ in range(n):\n        t, a, b = map(int, stdin.split()[1:4])\n        books.append((t, a, b))\n\n    def read_books(books, k):\n        res = []\n        total_time = 0\n        for i, book in enumerate(books):\n            if book[1] and len(res) < k:\n                res.append((i, book))\n                total_time += book[0]\n            if book[2] and len(res) >= k:\n                return -1, total_time\n        return total_time, total_time\n\n    alice_likes, bob_likes = 0, 0\n    for book in books:\n        if book[1]:\n            alice_likes += 1\n        if book[2]:\n            bob_likes += 1\n\n    alice_books, bob_books = [], []\n    for book in books:\n        if book[1]:\n            alice_books.append(book)\n        if book[2]:\n            bob_books.append(book)\n\n    alice_time, alice_total_time = read_books(alice_books, k)\n    if alice_time < 0:\n        alice_time, alice_total_time = read_books(alice_books, n)\n\n    bob_time, bob_total_time = read_books(bob_books, k)\n    if bob_time < 0:\n        bob_time, bob_total_time = read_books(bob_books, n)\n\n    if alice_time < bob_time:\n        return str(alice_total_time)\n    elif alice_time > bob_time:\n        return str(bob_total_time)\n    else:\n        return str(-1)\n",
        "test": "assert solution(input()) == \"-1\"",
        "num_ids": 1014,
        "indeed": false
    },
    {
        "number": 4417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split()[0])\n    for i in range(queries):\n        n, k = map(int, stdin.split()[1:])\n        a = list(map(int, stdin.split()[2:]))\n        stdout.write(str(solve(n, k, a)) + '\\n')\n\ndef",
        "test": "assert solution(\"\"\"4",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 4418,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    count = 0\n    while True:\n        if n % 6 == 0:\n            break\n        a.pop(0)\n        count += 1\n\n    return str(count)\n",
        "test": "assert solution('12\\n4 8 4 15 16 8 23 15 16 42 23 42\\n') == '0'",
        "num_ids": 646,
        "indeed": false
    },
    {
        "number": 4419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    result = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        count = 0\n        while a!= b:\n            if a > b:\n                a += 1\n            else:\n                a -= 1\n            count += 1\n        result.append(count)\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(input()) == '92'",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 4420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        x, y, n = map(int, stdin.split()[1:])\n        k = 0\n        while k <= n:\n            if k % x == y:\n                return str(k)\n            k += 1\n    return \"None\"",
        "test": "assert solution(\"7\\n7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\\n\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\\n\"",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 4421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    candies = list(map(int, stdin.split()[1:]))\n\n    boxes_per_gift = min(k, n)\n\n    max_boxes = 0\n    for i in range(n - boxes_per_gift + 1):\n        current_boxes = 0\n        for j in range(boxes_per_gift):\n            current_boxes += (candies[i + j] + candies[i + j + 1]) // k\n\n        max_boxes = max(max_boxes, current_boxes)\n\n    return str(max_boxes)",
        "test": "assert solution(\"7 3\\n1 2 2 3 2 4 5\\n\") == \"4\"",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 4422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    S = stdin.split()[1]\n    \n    return S[K-1].lower() + S[:K-1] + S[K-1].upper()",
        "test": "assert solution(\"6 4\\nABCDEF\\n\") == \"abcDeF\\n\"",
        "num_ids": 323,
        "indeed": false
    },
    {
        "number": 4423,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *input_data = stdin.split('\\n')\n    n = int(n)\n\n    restaurants = {}\n    for i in range(n):\n        city, score = input_data[i].split()\n        restaurants[city] = (restaurants.get(city, []) + [int(score)]).sort(reverse=True)\n\n    result = []\n    for city in sorted(restaurants):\n        result.extend(str(i) for i, _ in enumerate(restaurants[city], 1))\n\n    return '\\n'.join(result)",
        "test": "assert solution('6\\nmoscow 10\\nkhabarovsk 20\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40') == '3\\n4\\n6\\n1\\n5\\n2\\n'",
        "num_ids": 873,
        "indeed": false
    },
    {
        "number": 4424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    if K >= 2 and (X - 1) % 500 == 0:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"2 900\") == \"Yes\"",
        "num_ids": 249,
        "indeed": false
    },
    {
        "number": 4425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    probability = 0.0\n    for i in range(1, N+1):\n        if i >= K:\n            break\n        heads = 0\n        for j in range(4):\n            if i+j == K:\n                heads += 1\n                i += j\n                break\n        probability += heads / 48.0\n    probability *= 3 / 48.0\n    print(probability)\n    return \"\"",
        "test": "assert solution(\"3 10\") == \"0.145833333333\"",
        "num_ids": 641,
        "indeed": false
    },
    {
        "number": 4426,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    days = {\n        \"SUN\": 0,\n        \"MON\": 1,\n        \"TUE\": 2,\n        \"WED\": 3,\n        \"THU\": 4,\n        \"FRI\": 5,\n        \"SAT\": 6,\n    }\n    today = stdin.strip().upper()\n    today_num = days[today]\n    next_week = today_num + 1\n\n    while next_week < 7:\n        if next_week in days:\n            next_day = list(days.keys())[list(days.values()).index(next_week)]\n            break\n        next_week += 1\n\n    return str(next_week - days[next_day])",
        "test": "assert solution(\"SAT\") == \"1\"",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 4427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x0 = map(int, stdin.split())\n    x1 = r * x0 - D\n    print(x1)\n    for i in range(2, 11):\n        x2 = r * x1 - D\n        print(x2)\n        x1, x2 = x2, x1",
        "test": "assert solution(input()) == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\\n\"",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 4428,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = list(map(int, stdin.split()[1:]))\n    \n    max_sum = 0\n    \n    for i in range(1, n):\n        if sum(d[:i]) <= sum(d[i:]) and (sum(d[:i]) > max_sum or (sum(d[:i]) == max_sum and sum(d[i:]) < max_sum)):\n            max_sum = sum(d[:i])\n    \n    return str(max_sum)\n\nprint(solution(\"5\\n1 3 1 1 4\"))  # Output: 5\nprint(solution(\"5\\n1 3 2 1 4\"))  # Output: 4\nprint(solution(\"3\\n4 1 2\"))  # Output: 0",
        "test": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"",
        "num_ids": 826,
        "indeed": true
    },
    {
        "number": 4429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for _ in range(t):\n        x, y, z = map(int, stdin.split('\\n')[1].split())\n        \n        if x == max(x, y) and y == max(x, z) and z == max(y, z):\n            return 'YES\\n{}\\n{}\\n{}'.format(max(x, y, z), max(x, z, y), min(x, y, z))\n        else:\n            return 'NO'\n\nwith open('output.txt', 'w') as f:\n    for test_case in ['3 2 3\\n100 100 100', '50 49 49\\n10 30 20', '1 1000000000 1000000000']:\n        f.write(solution(test_case) + '\\n')",
        "test": "assert solution('1000 1000 1000\\n2 2 2\\n100 100 100\\n1000 1000 1000\\n1000000000 1000000000 1000000000\\n1 1 1\\n') == 'NO\\nNO\\nNO\\nNO\\nNO'",
        "num_ids": 1151,
        "indeed": false
    },
    {
        "number": 4430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    max_objects = 0\n    boxes = []\n    boxes_size = [0] * m\n\n    for obj in range(1, n + 1):\n        for i in range(m):\n            if boxes_size[i] + a[obj - 1] <= k:\n                boxes_size[i] += a[obj - 1]\n                max_objects = max(max_objects, obj)\n                break\n            else:\n                boxes.append(i)\n                boxes_size[i] = 0\n\n    if max_objects == 0:\n        return \"0\"\n    else:\n        return str(max_objects)",
        "test": "assert solution(\"5 3 3\\n1 2 3 1 1\\n\") == \"5\"",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 4431,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[2]\n    c = stdin.split()[3].split()\n    count = 0\n\n    for i in range(n):\n        if i == 0:\n            for j in range(1, k + 1):\n                if s[i:i + j] in c:\n                    count += 1\n        else:\n            for j in range(i + 1, k + 1):\n                if s[i:i + j] in c:\n                    count += 1\n\n    return str(count)\n\nprint(solution(input()))",
        "test": "assert solution(\"7 1\\naaaaaaa\\nb\\n\") == \"0\"",
        "num_ids": 617,
        "indeed": false
    },
    {
        "number": 4432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    t = int(stdin.split('\\n')[0])\n    for _ in range(t):\n        n = int(stdin.split('\\n')[1].split()[0])\n        a = [int(x) for x in stdin.split('\\n')[2].split()[1:]]\n\n        # Calculate max_sum_length\n        max_sum_length = 0\n        for i in range(2, n+1, 2):\n            if max_sum_length < i:\n                max_sum_length = i\n\n        # Find maximum sum\n        max_sum = float('-inf')\n        for i in range(len(a)):\n            subseq = a[i:i+max_sum_length]\n            if subseq[0] * subseq[-1] < 0:\n                subseq = subseq[::-1]\n            subseq_sum = sum(subseq)\n            if subseq_sum > max_sum:\n                max_sum = subseq_sum\n\n        print(max_sum)\n\ndef",
        "test": "assert solution(input()) == \"0\\n-3\"",
        "num_ids": 1161,
        "indeed": false
    },
    {
        "number": 4433,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    edges = [tuple(map(int, line.split()[1:])) for line in stdin.split()[2:2*n+1]]\n    max_degree = 0\n    max_spanning_tree = []\n    \n    def dfs(u, visited, stack, tree):\n        if u in visited:\n            return\n        visited.add(u)\n        for v in graph[u]:\n            if v not in visited:\n                dfs(v, visited, stack, tree)\n        tree.append(u)\n        visited.remove(u)\n        stack.pop()\n\n    for u in range(1, n):\n        visited = set()\n        graph = [[] for _ in range(n)]\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n        stack = [u]\n        tree = []\n        dfs(u, visited, stack, tree)\n        degree = len(tree)\n        if degree > max_degree:\n            max_degree = degree\n            max_spanning_tree = tree.copy()\n    \n    print(len(max_spanning_tree) - 1)\n    for u in range(1, n):\n        for v in range(1, n):\n            if max_spanning_tree.count(u) < max_spanning_tree.count(v):\n                print(u, v)\n            else:\n                print(v, u)",
        "test": "assert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\\n\"",
        "num_ids": 1449,
        "indeed": false
    },
    {
        "number": 4434,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[1])\n    board = [[0] * n for _ in range(n)]\n    \n    for _ in range(n):\n        line = stdin.split()[1]\n        for i, num in enumerate(line):\n            board[i][int(num)] -= 1\n    \n    def count_zeros(board: list) -> int:\n        return sum(1 for row in board if sum(row) == 0)\n    \n    def count_figures(board: list) -> int:\n        return sum(sum(row) for row in board)\n    \n    moves = 0\n    while count_figures(board)!= n ** 2:\n        moves += 1\n        row, col = min([(i, j) for i in range(n) for j in range(n)], key=lambda x: (board[x[0]][x[1]], x[1]))\n        for neighbor in [(i, j) for i in range(row - 1, row + 2) for j in range(col - 1, col + 2) if 0 <= i < n and 0 <= j < n]:\n            if neighbor!= (row, col) and board[neighbor[0]][neighbor[1]] > 0 and (row - neighbor[0]) % 2 == (col - neighbor[1]) % 2:\n                board[neighbor[0]][neighbor[1]] -= 1\n                board[row][col] += 1\n                break\n    \n    print(moves)\n    return moves\n\ndef",
        "test": "assert solution(\"3\\n1\\n5\\n1000000\\n\") == \"0\\n39\\n2524795627177348480\"",
        "num_ids": 2108,
        "indeed": false
    },
    {
        "number": 4435,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    dp = [0] * (2 * n + 1)\n    dp[0] = -1\n    \n    for i in range(1, 2 * n + 1):\n        if i >= n:\n            dp[i] = dp[i - n]\n        elif i >= a[i]:\n            dp[i] = dp[i - a[i]] + 1\n        else:\n            dp[i] = max(dp[i - a[i]] + 1, dp[i - n] + 1)\n    \n    return \" \".join(map(str, dp[2 * n:]))",
        "test": "assert solution(\"10\\n3 3 3 3 3 3 3 3 3 3\") == \"1 1 1 1 1 1 1 1 1 1\"",
        "num_ids": 893,
        "indeed": false
    },
    {
        "number": 4436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    test_cases = [int(x.strip()) for x in stdin.strip().split('\\n')[1:]]\n\n    for test_case in test_cases:\n        if test_case == 2:\n            continue\n        for a in range(2, test_case):\n            for b in range(a, test_case):\n                for c in range(b, test_case):\n                    if a*b*c == test_case:\n                        print(\"YES\")\n                        print(f\"{a} {b} {c}\")\n                        break\n                else:\n                    continue\n                break\n            else:\n                continue\n            break\n        else:\n            print(\"NO\")\n\nsolution(input())",
        "test": "assert solution(\"\"\"",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 4437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    operations = 0\n    result = \"\"\n\n    for i in range(1, n, 2):\n        if s[i] == 'a':\n            s = s[:i] + 'b' + s[i + 1:]\n            operations += 1\n        else:\n            s = s[:i] + 'a' + s[i + 1:]\n            operations += 1\n\n    return str(operations) + \"\\n\" + s\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 894,
        "indeed": false
    },
    {
        "number": 4438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    key_points = [(int(x.split()[0]), int(x.split()[1])) for x in stdin.split()[1:]]\n    min_level = min(len(x) for x in key_points)\n    total_distance = 0\n\n    for level in range(min_level, -1, -1):\n        for i in range(len(key_points[level])):\n            for j in range(i + 1, len(key_points[level])):\n                distance = abs(key_points[level][i][0] - key_points[level][j][0]) + abs(key_points[level][i][1] - key_points[level][j][1])\n                total_distance += distance\n\n    return str(total_distance)",
        "test": "assert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\") == \"9\"",
        "num_ids": 1207,
        "indeed": false
    },
    {
        "number": 4439,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        return \"1\"\n    elif A == 1 and B == 2:\n        return \"2\"\n    elif A == 2 and B == 3:\n        return \"3\"\n    else:\n        return \"1\"\n\nstdin = input()\nprint(solution(stdin))\n",
        "test": "assert solution(\"3\\n1\") == \"2\"",
        "num_ids": 253,
        "indeed": false
    },
    {
        "number": 4440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    if L <= 0 or L > 1000:\n        return \"Invalid input\"\n\n    # Calculate the dimensions\n    a = 1.0\n    b = 1.0\n    c = 1.0\n\n    # Calculate the maximum possible volume\n    volume = a * b * c\n    return f\"{volume:.6f}\"",
        "test": "assert solution(\"3\") == \"1.000000000000\"",
        "num_ids": 383,
        "indeed": false
    },
    {
        "number": 4441,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"Hello World\"\n    else:\n        a = int(stdin.split()[1])\n        b = int(stdin.split()[2])\n        return str(a + b)",
        "test": "assert solution(\"1\") == \"Hello World\"",
        "num_ids": 276,
        "indeed": false
    },
    {
        "number": 4442,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a_str = str(a)\n    b_str = str(b)\n    min_str = None\n\n    for i in range(max(len(a_str), len(b_str))+1):\n        for j in range(i+1):\n            str_a = a_str * i + b_str * j\n            str_b = b_str * i + a_str * j\n\n            if (min_str is None) or (str_a < min_str):\n                min_str = str_a\n            if (min_str is None) or (str_b < min_str):\n                min_str = str_b\n\n    return min_str\n\nsample_input = \"4 3\\n\"\nsample_output = solution(sample_input)\nprint(sample_output)  # Output: 3333",
        "test": "assert solution(\"4 3\") == \"3333\"",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 4443,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.strip()\n    if c == 'z':\n        return 'a'\n    elif c == 'y':\n        return 'b'\n    else:\n        c = ord(c)\n        if c == ord('z') + 1:\n            return chr(c + 1)\n        else:\n            return chr(c + 1)",
        "test": "assert solution(\"a\") == \"b\"",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 4444,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    result = T + S\n    return result",
        "test": "assert solution(\"oder atc\") == \"atcoder\"",
        "num_ids": 142,
        "indeed": true
    },
    {
        "number": 4445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n\n    def sum_of_elements(arr: list[int]) -> int:\n        return sum(arr) - sum(1 for i in arr if i % 2 == 0)\n\n    def is_valid(arr: list[int], i: int, j: int) -> bool:\n        if j == len(arr) - 1:\n            return False\n\n        parity = arr[i] % 2\n        parity_j = arr[j] % 2\n\n        if parity!= parity_j:\n            return False\n\n        if i == j:\n            return True\n\n        return is_valid(arr, i + 1, j)\n\n    def min_sum(arr: list[int]) -> int:\n        if arr[0] % 2 == 0:\n            return arr[0]\n        else:\n            return arr[1]\n\n    min_sum_arr = [min_sum(a)]\n\n    for i in range(1, n):\n        min_sum_arr.append(min(min_sum_arr[i - 1], min_sum_arr[i - 1] + a[i]))\n\n    return str(min_sum_arr[n - 1])\n\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 854,
        "indeed": false
    },
    {
        "number": 4446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()[1:]))\n    player_health = a\n    opponent_health = b\n    player_points = opponent_points = 0\n\n    for _ in range(k):\n        for i in range(1, n + 1):\n            if h[i - 1] <= player_health:\n                player_health -= a\n                opponent_points += 1\n            elif h[i - 1] <= opponent_health:\n                opponent_health -= b\n                player_points += 1\n\n    return str(max(player_points, opponent_points))",
        "test": "assert solution('7 4 2 1\\n1 3 5 4 2 7 6\\n') == '6'",
        "num_ids": 797,
        "indeed": false
    },
    {
        "number": 4447,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    moves = 0\n    c = [0] * m\n    \n    for i in range(n):\n        c[a[i] % m] += 1\n        if c[a[i] % m] == (n // m):\n            moves += 1\n            c[a[i] % m] = 0\n    \n    return str(moves) + \" \" + \" \".join(map(str, a))",
        "test": "assert solution(stdin) == expected_output",
        "num_ids": 953,
        "indeed": false
    },
    {
        "number": 4448,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n    offers = []\n    for _ in range(m):\n        d, t = map(int, stdin.split())\n        offers.append((d, t))\n\n    days = [0] * 1001\n    days[0] = 0\n\n    for microtransaction_type in range(n):\n        for _ in range(k[microtransaction_type]):\n            days[days[-1] + 1] = min(days[days[-1] + 1], days[-1])\n            days[days[-1] + 2] = min(days[days[-1] + 2], days[-1] + 1)\n\n    result = days[len(k) + 1]\n    if result == 1000:\n        return \"1000\"\n    return str(result)",
        "test": "assert solution(",
        "num_ids": 1148,
        "indeed": false
    },
    {
        "number": 4449,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    q = int(stdin.split()[2])\n\n    for i in range(q):\n        n = int(stdin.split()[0])\n        a = list(map(int, stdin.split()[1].split()))\n        if not is_possible(a, n):\n            return \"NO\"\n    return \"YES\"\n\ndef",
        "test": "assert solution(open(\"input4.txt\").read()) == \"YES\"",
        "num_ids": 649,
        "indeed": false
    },
    {
        "number": 4450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    g = [[] for _ in range(n + 1)]\n    for i in range(m):\n        x, y, w = map(int, stdin.split())\n        g[x].append((y, w))\n        g[y].append((x, w))\n\n    def dijkstra(src):\n        dist = [float('inf')] * (n + 1)\n        dist[src] = 0\n        heap = [(0, src)]\n        while heap:\n            d, u = heappop(heap)\n            if d > dist[u]:\n                continue\n            for v, w in g[u]:\n                if d + w < dist[v]:\n                    dist[v] = d + w\n                    heappush(heap, (dist[v], v))\n        return dist\n\n    def floyd_warshall(graph):\n        n = len(graph)\n        dist = [[float('inf')] * (n + 1) for _ in range(n)]\n        for k in range(n):\n            for i in range(n):\n                for j in range(n):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n        return dist\n\n    def kth_smallest_shortest_path(d):\n        k_smallest = []\n        for i in range(n + 1):\n            for j in range(n + 1):\n                k_smallest.append(d[i][j])\n        k_smallest.sort()\n        return k_smallest[k - 1]\n\n    d = dijkstra(1)\n    d_prime = floyd_warshall(d)\n    k_smallest_shortest_path = kth_smallest_shortest_path(d_prime)\n\n    return str(k_smallest_shortest_path)\n\nwith open('input.txt', 'r') as file:\n    test_cases = [test_case.strip() for test_case in file.readlines()]\n\noutput = ''\nfor test_case in test_cases:\n    output += solution(test_case) + '\\n'\n\nwith open('output.txt', 'w') as file:\n    file.write(output)",
        "test": "assert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\\n\") == \"9\\n\"",
        "num_ids": 1342,
        "indeed": false
    },
    {
        "number": 4451,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n\n    def divide_students(k: int) -> int:\n        team_sizes = [0] * k\n        max_diversity = 0\n        max_team = -1\n        for i in range(n):\n            j = 0\n            while j < k and team_sizes[j] < 3:\n                j += 1\n            if j == k:\n                continue\n            team_sizes[j] += 1\n            max_diversity = max(max_diversity, a[i] - a[team_sizes[j] - 1])\n            max_team = j\n        return max_diversity\n\n    res, k = min(map(divide_students, range(1, k + 1)))\n\n    print(res, k)\n\n    for i in range(n):\n        t = max(1, min(k, team_sizes[i]))\n        print(t, team_sizes[i], i + 1)\n\n    return \"\"",
        "test": "assert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"",
        "num_ids": 991,
        "indeed": false
    },
    {
        "number": 4452,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split()[0])\n\n    for test_case in range(1, test_cases + 1):\n        n = int(stdin.split()[test_case])\n\n        if sum_of_round_numbers(n) == n:\n            print(f\"{test_case} {sum_of_round_numbers(n)}\")\n        else:\n            print(f\"{test_case} {sum_of_round_numbers(n)}\")\n\n    return \"\"\n\n\ndef",
        "test": "assert solution('5\\n110\\n707\\n222\\n1001\\n') == '2\\n110\\n707\\n222\\n1001'",
        "num_ids": 708,
        "indeed": false
    },
    {
        "number": 4453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    p = list(map(int, p.split()))\n    p.sort()\n    k = len(p)\n    a = [0] * n\n    for i in range(k):\n        a[p[i] - 1] += 1\n    return''.join(map(str, a))",
        "test": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\"",
        "num_ids": 607,
        "indeed": false
    },
    {
        "number": 4454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split('\\n')[0])\n    for _ in range(queries):\n        n = int(stdin.split('\\n')[1].split()[0])\n        prices = list(map(int, stdin.split('\\n')[1].split()[1:]))\n        min_price = min(prices)\n        result = 1e9\n        for price in prices:\n            result = min(result, price - min_price)\n        print(result)",
        "test": "assert solution('5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1') == '3\\n2\\n1'",
        "num_ids": 1002,
        "indeed": false
    },
    {
        "number": 4455,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = list(map(int, stdin.split()))\n    pairs = set()\n\n    for _ in range(k):\n        x, y = map(int, stdin.split())\n        pairs.add((x, y))\n        pairs.add((y, x))\n\n    mentors = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            if i!= j:\n                if skills[i] > skills[j]:\n                    mentors[i].append(j)\n                    mentors[j].append(i)\n\n    for i in range(n):\n        mentors[i] = set(mentors[i])\n\n    result = [0] * n\n    visited = [False] * n\n\n    def is_visited(i: int) -> bool:\n        nonlocal visited\n        return visited[i]\n\n    def dfs(i: int) -> None:\n        nonlocal result, visited\n        if is_visited(i):\n            return\n        visited[i] = True\n        result[i] += 1\n        for j in mentors[i]:\n            dfs(j)\n\n    for i in range(n):\n        if result[i] == 0:\n            dfs(i)\n\n    return \" \".join(str(x) for x in result)\n",
        "test": "assert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5 \"",
        "num_ids": 1063,
        "indeed": false
    },
    {
        "number": 4456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()[2:]))\n    q = list(map(int, stdin.split()[5:]))\n\n    def backtrack(indices, current, ans, char_count):\n        if char_count == k:\n            return\n        if len(set(current)) == k:\n            s = ''.join(str(i) for i in current)\n            if s not in ans:\n                ans.add(s)\n            return\n        for i in range(len(indices)):\n            if indices[i]!= current[i]:\n                backtrack(indices, current[:i] + indices[i] + current[i + 1:], ans, char_count + 1)\n\n    ans = set()\n    backtrack(p, list(range(1, n + 1)), ans, 0)\n    backtrack(q, list(range(1, n + 1)), ans, 0)\n    if ans:\n        print(\"YES\")\n        for s in ans:\n            print(s)\n    else:\n        print(\"NO\")",
        "test": "assert solution(input()) == \"NO\"",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 4457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n\n    def min_shot(a, i):\n        dur = a[i]\n        shots = 0\n        for j in range(i):\n            shots += (a[j] * j + 1)\n        return shots\n\n    min_a = min(a)\n    min_i = a.index(min_a)\n\n    shots = min_shot(a, min_i)\n\n    for i in range(min_i + 1, n):\n        shots = min(shots, min_shot(a, i))\n\n    return str(shots) + \" \" + \" \".join(map(str, range(min_i + 1, n)))\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 653,
        "indeed": false
    },
    {
        "number": 4458,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, *p = map(int, stdin.split())\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i):\n            if p[i - 1] > p[j - 1]:\n                break\n        else:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"3\\n1 2 3\") == \"1\"",
        "num_ids": 1327,
        "indeed": false
    },
    {
        "number": 4459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    removed_count = 0\n    for i in range(N):\n        a.remove(a[i])\n        removed_count += 1\n\n    return str(removed_count)",
        "test": "assert solution(\"7\\n1 2 3 4 5 6 7\") == \"0\"",
        "num_ids": 413,
        "indeed": false
    },
    {
        "number": 4460,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n    \n    # Find the first variable x_i that was assigned 0\n    x_i = None\n    for i, x in enumerate([x_1, x_2, x_3, x_4, x_5]):\n        if x == 0:\n            x_i = i\n            break\n    \n    if x_i is not None:\n        return str(x_i + 1)\n    else:\n        return \"None\"",
        "test": "assert solution(\"0 2 3 4 5\") == \"1\", \"Test case not working\"",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 4461,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    if H < 2 or W < 2 or H > 10**5 or W > 10**5:\n        return \"INVALID INPUT\"\n    \n    max_area = 0\n    for i in range(0, H-W+1, W):\n        for j in range(0, H-W+1, W):\n            area = H*W - i*W - j*H\n            if area > max_area:\n                max_area = area\n                \n    min_area = 0\n    for i in range(1, H-W+1):\n        for j in range(1, H-W+1):\n            area = i*W + j*H\n            if area < min_area:\n                min_area = area\n                \n    return str(max_area - min_area)",
        "test": "assert solution(\"3 5\") == \"0\"",
        "num_ids": 433,
        "indeed": false
    },
    {
        "number": 4462,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    \n    a = [x for x in a if 1 <= x <= 10**9]\n    \n    if sum(a[:-1]) % 4 == 0:\n        for i in range(N - 1):\n            if a[i] * a[i + 1] % 4!= 0:\n                return \"No\"\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"3\\n1 2 3\") == \"No\"",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 4463,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    s, t = map(str.strip, stdin.split())\n    s_sorted = sorted(s)\n    t_sorted = sorted(t)\n    \n    if s_sorted < t_sorted:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"xyz\\nxyz\\n\") == \"No\", \"Sample Input 2\"",
        "num_ids": 318,
        "indeed": false
    },
    {
        "number": 4464,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n\n    if A < 1 or A > 100 or B < 1 or B > 100 or C < 0 or C >= B:\n        return \"NO\"\n\n    is_cong = True\n    selected = 0\n    remaining = B\n\n    while selected < A:\n        if remaining % A == 0:\n            selected += 1\n            remaining -= A\n        else:\n            is_cong = False\n            break\n\n    if selected < A or selected > A + 1 or not is_cong:\n        return \"NO\"\n    else:\n        return \"YES\"",
        "test": "assert solution(\"8 7 3\") == \"NO\"",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 4465,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    area = A * B\n    return str(area)",
        "test": "assert solution(\"2 2\") == \"1\"",
        "num_ids": 159,
        "indeed": false
    },
    {
        "number": 4466,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    if Y + 2 * Z > X:\n        return \"not enough space\"\n    else:\n        return str(Y // (X // Y)) + \"\\n\" + str(X // (Y // (X // Y))) + \"\\n\" + str(X // (Y // (X // Y)) - 1)\n\nprint(solution(input()))",
        "test": "assert solution(\"13 3 1\") == \"3\", \"Test case failed\"",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 4467,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *points = map(int, stdin.split())\n    red = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    blue = []\n    for a, b in red:\n        for c, d in red:\n            if a < c and b < d:\n                blue.append((a, b))\n                blue.append((c, d))\n\n    return str(len(blue))\n",
        "test": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\\n\") == \"2\"",
        "num_ids": 920,
        "indeed": false
    },
    {
        "number": 4468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    t_list = list(map(int, stdin.split()))\n    t_list.append(t)\n    t_list.sort()\n    water_time = 0\n    for i in range(1, n+1):\n        water_time += t_list[i] - t_list[i-1]\n    return str(water_time)",
        "test": "assert solution(\"2 4\\n0 3\") == \"7\"",
        "num_ids": 319,
        "indeed": false
    },
    {
        "number": 4469,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    queries = list(map(int, stdin.split()))\n\n    shelf = [None] * 200001\n\n    for query in queries:\n        if query % 3 == 1:  # left\n            if shelf[query] is None:\n                shelf[query] = query\n            else:\n                shelf[query - 1] = query\n        elif query % 3 == 2:  # right\n            if shelf[query] is None:\n                shelf[query] = query\n            else:\n                shelf[query + 1] = query\n        else:  # 3\n            print(min(shelf[x] - query for x in range(query + 1, 200001)) + max(shelf[x] - query for x in range(query - 1, -1, -1)) + 1)\n\n    return \"\"\n",
        "test": "assert solution(input()) == \"1\\n1\\n2\\n0\\n2\\n1\\n\"",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 4470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    q = int(stdin.split()[1])\n    operations = {\n        \"replace\": [lambda n: n // 2 if n % 2 == 0 else n // 3 if n % 3 == 0 else n // 5 if n % 5 == 0 else n, 1],\n        \"move\": [lambda n: n - 1, 1],\n        \"nop\": [lambda n: n, 0]\n    }\n    min_moves = 1000000\n    for _ in range(q):\n        operation, num = stdin.split()\n        num = int(num)\n        if operation not in operations:\n            print(\"-1\")\n            continue\n        moves, cost = operations[operation]\n        if moves(n) == num:\n            min_moves = min(min_moves, cost)\n        else:\n            print(\"-1\")\n    if min_moves == 1000000:\n        print(\"-1\")\n    else:\n        print(min_moves)",
        "test": "assert solution(input()) == \"0\\n4\\n6\\n6\\n-1\\n6\\n72\"",
        "num_ids": 781,
        "indeed": false
    },
    {
        "number": 4471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(a: int) -> bool:\n        return 0 <= a <= 100\n\n    def place_figure(i: int) -> None:\n        nonlocal heights\n        if heights[i] >= 1:\n            heights[i] -= 2\n        else:\n            heights[i] += 2\n            heights[i + 1] -= 1\n\n    heights = list(map(int, stdin.strip().split()))\n\n    for _ in range(2):\n        for i in range(len(heights) - 1, -1, -1):\n            place_figure(i)\n\n    return \"YES\" if all(height == 0 for height in heights) else \"NO\"",
        "test": "assert solution(open('example3.txt').read()) == 'YES'",
        "num_ids": 931,
        "indeed": false
    },
    {
        "number": 4472,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1]\n    b = stdin.split()[2]\n\n    def preprocess_move(index: int, char: str) -> int:\n        return 0\n\n    def swap(a: str, b: str, index: int) -> None:\n        a[index], b[index] = b[index], a[index]\n\n    def preprocess_moves(a: str, b: str, moves: int) -> None:\n        for _ in range(moves):\n            move = min(preprocess_move(i, a[i]) + preprocess_move(i, b[i]) for i in range(1, n))\n            if move == 0:\n                continue\n            swap(a, b, move)\n\n    moves = preprocess_move(1, a[0]) + preprocess_move(n - 1, b[0])\n    preprocess_moves(a, b, moves)\n\n    return str(moves)\n\n\ndef",
        "test": "assert solution(\"\"\"\\",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 4473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def frog_jumps(a: int, b: int, k: int, pos: int) -> int:\n        if k % 2 == 0:\n            return pos + a\n        else:\n            return pos - b\n\n    queries = []\n    for _ in range(int(stdin.split('\\n')[0])):\n        a, b, k = map(int, stdin.split('\\n')[1].split())\n        queries.append((a, b, k))\n\n    results = []\n    for a, b, k in queries:\n        results.append(frog_jumps(a, b, k, 0))\n\n    return '\\n'.join(map(str, results))\n\nwith open('frog_jumps.in', 'r') as f:\n    stdin = f.read()\n\nprint(solution(stdin))",
        "test": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\\n\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\\n\", \"Test case failed\"",
        "num_ids": 674,
        "indeed": false
    },
    {
        "number": 4474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    queries = list(map(int, stdin.split()))\n    for query in queries:\n        print(query)",
        "test": "assert solution(\"8\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089\\n\"",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 4475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split()[0])\n    for _ in range(test_cases):\n        a, b, x, y, n = map(int, stdin.split())\n        result = a * b\n        for _ in range(n):\n            a -= 1\n            b -= 1\n            if a < x:\n                a = x\n            if b < y:\n                b = y\n            result = min(result, a * b)\n        print(result)\n",
        "test": "assert solution(\"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n\") == \"70\\n77\\n177177\\n999999999000000000\\n999999999\\n55\\n10\"",
        "num_ids": 1790,
        "indeed": false
    },
    {
        "number": 4476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        a, b = map(int, stdin.split()[1:3])\n        moves = 0\n        while a!= b:\n            if a % 2 == 1:\n                a += 1\n            else:\n                a -= 1\n            moves += 1\n        print(moves)",
        "test": "assert solution(\"5\\n2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == \"1\\n0\\n2\\n2\\n1\"",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 4477,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        x = int(stdin.split()[1])\n        count = 0\n        while x > 0:\n            count += x % 10\n            x //= 10\n        print(count)",
        "test": "assert solution(\"4\\n22\\n9999\\n1\\n777\\n\") == \"13\\n90\\n1\\n66\"",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 4478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split()[0])\n    sequences = []\n    for _ in range(k):\n        n = int(stdin.split()[1])\n        seq = list(map(int, stdin.split()[2:n+2]))\n        sequences.append(seq)\n    \n    sums = [sum(seq) for seq in sequences]\n    if max(sums) == 0:\n        return \"NO\"\n    \n    for i in range(k):\n        for j in range(i+1, k):\n            if sums[i] == sums[j] - 1:\n                i_seq = sequences[i]\n                j_seq = sequences[j]\n                for x in range(n):\n                    if x!= i:\n                        i_seq[x] -= 1\n                for y in range(n):\n                    if y!= j:\n                        j_seq[y] -= 1\n                for x in range(n):\n                    if x!= i:\n                        i_seq[x] += 1\n                for y in range(n):\n                    if y!= j:\n                        j_seq[y] += 1\n                if max(sum(seq) for seq in [i_seq, j_seq]) == sums[i]:\n                    return \"YES\", i + 1, j + 1\n                break\n    \n    return \"NO\"\n\ndef",
        "test": "assert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\\n5\\n2 2 2 2 2\\n\") == \"YES\\n2 2\\n4 1\\n\"",
        "num_ids": 1214,
        "indeed": false
    },
    {
        "number": 4479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    A, K = map(int, stdin.split())\n    A_length = len(A)\n    \n    # Replace the negative numbers with the positive numbers\n    for i in range(A_length):\n        A[i] = -A[i]\n    \n    # Initialize the maximum sum\n    max_sum = float('-inf')\n    \n    # Try all possible combinations of positive and negative numbers\n    for i in range(A_length):\n        for j in range(A_length):\n            if i!= j:\n                # Calculate the sum of the chosen numbers\n                sum_ = A[i] + A[j]\n                \n                # Update the maximum sum if the sum is larger\n                max_sum = max(max_sum, sum_)\n                \n                # Check if the sum exceeds the maximum limit\n                if sum_ > 10000:\n                    return \"0\"\n    \n    return str(max_sum)",
        "test": "assert solution([2,-3,-1,5,-4], 2) == 13",
        "num_ids": 667,
        "indeed": false
    },
    {
        "number": 4480,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    A.sort()\n    n = len(A)\n\n    # If the array is already divisible by 3, return True\n    if n % 3 == 0:\n        return 'true'\n\n    # We can try to find three parts with equal sums\n    for i in range(n-2):\n        if A[i] + A[i+1] + A[i+2] == A[n-1] + A[n-2] + A[n-3]:\n            return 'true'\n\n    return 'false'\n",
        "test": "assert solution(\"[[3,3,6,5,-2,2,5,1,-9,4]]\") == \"true\"",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 4481,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    votes = [set() for _ in range(N)]\n    for i in range(N):\n        votes[i] = set(stdin.split()[i + 1])\n\n    max_votes = 0\n    max_strings = set()\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            for string in votes[i] & votes[j]:\n                if len(string) > max_votes:\n                    max_votes = len(string)\n                    max_strings = set()\n                if len(string) == max_votes:\n                    max_strings.add(string)\n\n    return ''.join(sorted(max_strings))",
        "test": "assert solution(\"7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet\\n\") == \"beet\\nvet\\n\"",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 4482,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    # Sort the array in descending order\n    a.sort(reverse=True)\n    \n    # Initialize the total cost\n    total_cost = 0\n    \n    # Iterate through the sorted array\n    for i in range(n):\n        # Check if the element is equal to the next element\n        if i < n-1 and a[i] == a[i+1]:\n            # If yes, calculate the cost and add it to the total cost\n            cost = (a[i+1] - a[i])**2\n            total_cost += cost\n        # If no, transform the current element into a number that is greater than the previous elements\n        else:\n            cost = (a[i] - a[i-1])**2\n            total_cost += cost\n    \n    return str(total_cost)",
        "test": "assert solution(\"2\\n1 1\") == \"0\", \"Sample Input 4\"",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 4483,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    left = X - A - B\n    if left >= 0:\n        print(left)\n    else:\n        print(0)",
        "test": "assert solution(\"1234\\n150\\n100\") == \"84\"",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 4484,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # We need to use the modulo 10^9+7 as the number of arrangements can be large and we need to handle large inputs\n    MOD = 10**9 + 7\n    \n    # Initialize the list of permutations\n    permutations = []\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            # Permutations of dogs\n            dog_permutations = [''.join(sorted(p)) for p in itertools.permutations(['A', 'B'])]\n            # Permutations of monkeys\n            monkey_permutations = [''.join(sorted(p)) for p in itertools.permutations(['C', 'D'])]\n            # Combine the permutations\n            permutations.extend(dog_permutations)\n            permutations.extend(monkey_permutations)\n    \n    # Count the number of possible arrangements\n    count = 0\n    for permutation in permutations:\n        # Check if the arrangement is valid\n        valid = True\n        for i in range(1, n+1):\n            if permutation[i-1] == permutation[i] or permutation[i-1] == permutation[n-i]:\n                valid = False\n                break\n        if valid:\n            count += 1\n    \n    # Return the modulo 10^9+7 count\n    return str(count % MOD)",
        "test": "assert solution(\"2 2\") == \"8\"",
        "num_ids": 1246,
        "indeed": false
    },
    {
        "number": 4485,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    islands = [1] * (n + 1)\n    islands[1] = 0\n    stack = [(1, 0)]\n    while stack:\n        current_node, current_level = stack.pop()\n        if islands[current_node]:\n            continue\n        for neighbor in graph[current_node]:\n            if islands[neighbor]:\n                continue\n            islands[neighbor] = 1 - islands[current_level]\n            stack.append((neighbor, 1 - current_level))\n    if sum(islands) == 1:\n        return \"POSSIBLE\"\n    return \"IMPOSSIBLE\"",
        "test": "assert solution(\"\"\"",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 4486,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    result = ''\n    \n    for i in range(1, len(s), 2):\n        result += s[i]\n    \n    return result",
        "test": "assert solution('atcoder') == 'acdr'",
        "num_ids": 255,
        "indeed": false
    },
    {
        "number": 4487,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.strip().split()\n    if a[-1] == b[0] and b[-1] == c[0]:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"aaa bbb ccc\") == \"NO\"",
        "num_ids": 331,
        "indeed": true
    },
    {
        "number": 4488,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Input\n    a, b = map(int, stdin.split())\n\n    # Check constraints\n    if a == 0 or b == 0:\n        return \"INCORRECT_INPUT\"\n\n    # Compare magnitudes\n    if a > b:\n        return \"GREATER\"\n    elif a < b:\n        return \"LESS\"\n    else:\n        return \"EQUAL\"",
        "test": "assert solution(\"36\\n24\") == \"GREATER\"",
        "num_ids": 285,
        "indeed": true
    },
    {
        "number": 4489,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *s_list = stdin.split('\\n')\n    m, *t_list = stdin.split('\\n')\n    \n    # concatenate all strings\n    s_list = [''.join(s_list)]\n    t_list = [''.join(t_list)]\n    \n    # concatenate all strings\n    s_t_list = s_list + t_list\n    \n    # initialize scores\n    scores = [0] * len(s_t_list)\n    \n    # check if a string can be announced\n    for s_t in s_t_list:\n        for i, s in enumerate(s_list):\n            if s_t == s:\n                scores[i] += 1\n                break\n    \n    # check if Takahashi can earn at most X yen on balance\n    result = 0\n    for i, s_t in enumerate(s_t_list):\n        if scores[i] > 0:\n            result += 1\n    \n    return str(result)",
        "test": "assert solution(input().split()) == '2'",
        "num_ids": 641,
        "indeed": false
    },
    {
        "number": 4490,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.lower() == \"a\":\n        return \"T\"\n    elif stdin.lower() == \"c\":\n        return \"G\"\n    elif stdin.lower() == \"g\":\n        return \"C\"\n    else:\n        return \"A\"",
        "test": "assert solution(\"A\") == \"T\"",
        "num_ids": 241,
        "indeed": true
    },
    {
        "number": 4491,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a11, a12, *a21, a22 = map(int, stdin.split()[1:])\n    visited = {(1, 1)}\n    max_candies = 0\n\n    def dfs(i, j, k):\n        nonlocal max_candies\n        if (i, j) == (2, n):\n            return\n        if (i, j) in visited:\n            return\n        visited.add((i, j))\n        candies = max(a11, a12) + a22\n        max_candies = max(max_candies, candies)\n        if i < 3:\n            dfs(i + 1, j, k)\n        if i > 1:\n            dfs(i - 1, j, k)\n        if j < n:\n            dfs(i, j + 1, k)\n        if j > 1:\n            dfs(i, j - 1, k)\n        if k:\n            dfs(i, j, k - 1)\n        visited.remove((i, j))\n\n    dfs(1, 1, 3)\n    return str(max_candies)\n\n\nsample_input = '''\n5\n3 2 2 4 1\n1 2 2 2 1\n'''\n\nprint(solution(sample_input))",
        "test": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == \"14\"",
        "num_ids": 991,
        "indeed": false
    },
    {
        "number": 4492,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    N, *args = map(int, stdin.split())\n    a = list(map(int, args))\n    x = sum(a) // N\n\n    def min_operations(i: int, j: int) -> int:\n        # Eat the candy in the box\n        if i < j:\n            return 1\n        else:\n            return 0\n\n    ans = float('inf')\n    for i in range(N):\n        for j in range(i + 1, N):\n            operations = min_operations(i, j)\n            if a[i] + a[j] <= x:\n                operations += 1\n            if operations < ans:\n                ans = operations\n\n    return str(ans)",
        "test": "assert solution(\"3 3\\n2 2 2\") == \"1\"",
        "num_ids": 606,
        "indeed": false
    },
    {
        "number": 4493,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows = 3\n    cols = 3\n    c_grid = list(map(lambda x: list(map(int, x.split())), stdin.split('\\n')))\n\n    # Check if the given grid is valid\n    for i in range(1, rows + 1):\n        for j in range(1, cols + 1):\n            if c_grid[i - 1][j - 1] not in range(0, 101):\n                return \"No\"\n\n    # Check if Takahashi's statement is correct\n    for i in range(1, rows + 1):\n        for j in range(1, cols + 1):\n            if c_grid[i - 1][j - 1] + i + j!= 6:\n                return \"No\"\n\n    return \"Yes\"",
        "test": "assert solution(input()) == \"Yes\"",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 4494,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S == 'ABC':\n        return 'ARC'\n    else:\n        return 'ABC'",
        "test": "assert solution(\"ABC\") == \"ARC\"",
        "num_ids": 160,
        "indeed": true
    },
    {
        "number": 4495,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n\n    for i in range(a, b + 1):\n        if i % x == 0:\n            count += 1\n\n    return str(count)\n\nsample_input = \"4 8 2\\n\"\nprint(solution(sample_input)) # Output: 3",
        "test": "assert solution('4 8 2') == '3', 'Sample Input: 4 8 2, Expected Output: 3'",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 4496,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    day = int(stdin)\n\n    if day == 25:\n        return \"Christmas\"\n    elif day == 24:\n        return \"Christmas Eve\"\n    elif day == 23:\n        return \"Christmas Eve Eve\"\n    else:\n        return \"Christmas Eve Eve Eve\"",
        "test": "assert solution(\"25\") == \"Christmas\"",
        "num_ids": 285,
        "indeed": true
    },
    {
        "number": 4497,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    numbers = [i for i in range(1, N+1)]\n    result = numbers[0]\n    max_count = 0\n    \n    for num in numbers:\n        count = 0\n        while num % 2 == 0:\n            num //= 2\n            count += 1\n        if count > max_count:\n            max_count = count\n            result = num\n    \n    print(result)",
        "test": "assert solution(input()) == \"4\", \"4 can be divided by 2 twice, which is the most number of times among 1, 2,..., 7.\"",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 4498,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n\n    # Check if A can communicate directly with C\n    if b < c and b + d > a and c + d > a:\n        return \"Yes\"\n    elif a < b and a + d > c and b + d > c:\n        return \"Yes\"\n\n    return \"No\"\n",
        "test": "assert solution(\"4 7 9 3\") == \"Yes\"",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 4499,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3 = stdin.split()\n    acronym = s1[0].upper() + s2[0].upper() + s3[0].upper()\n    return acronym",
        "test": "assert solution(\"atcoder beginner contest\") == \"ABC\", \"Sample input not passed\"",
        "num_ids": 201,
        "indeed": true
    },
    {
        "number": 4500,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b >= c:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"100 50 1000\") == \"No\"",
        "num_ids": 242,
        "indeed": true
    },
    {
        "number": 4501,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n\n    def count_combinations(n: int, k: int, total: int) -> int:\n        if k == 0:\n            return 1\n        if n == 0 or k > n:\n            return 0\n\n        return count_combinations(n - 1, k - 1, total) + count_combinations(n - 1, k, total)\n\n    def dfs(idx: int, total: int, ans: int) -> int:\n        if total >= A:\n            return ans\n\n        if idx == N:\n            return 0\n\n        return dfs(idx + 1, total + x[idx], ans) + dfs(idx + 1, total, ans)\n\n    count = 0\n    for i in range(1, N + 1):\n        for j in range(1, i + 1):\n            count += count_combinations(i, j, A) * dfs(0, 0, 0)\n\n    return str(count)",
        "test": "assert solution(\"5 10\\n1 1 2 3 4\") == \"10\"",
        "num_ids": 1191,
        "indeed": false
    },
    {
        "number": 4502,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    b = []\n    for _ in range(n):\n        b.append(a[-1])\n        b = b[::-1]\n    return''.join(str(x) for x in b)",
        "test": "assert solution(\"\"\"4",
        "num_ids": 259,
        "indeed": false
    },
    {
        "number": 4503,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    h, n = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n\n    def helper(i: int, index: int, moves: int, max_moves: int) -> str:\n        if index == n:\n            return \"Yes\" if moves <= max_moves else \"No\"\n\n        if moves == max_moves:\n            return helper(i + 1, index, 0, max_moves)\n\n        if h - a[i] >= 0:\n            return helper(i + 1, index, moves + 1, max_moves)\n\n        return \"No\"\n\n    return helper(0, 0, 0, n)",
        "test": "assert solution(\"10 3\\n4 5 6\\n\") == \"Yes\"",
        "num_ids": 653,
        "indeed": false
    },
    {
        "number": 4504,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    odd_string = S\n    even_string = S\n    \n    while len(odd_string) > 1 and len(even_string) % 2 == 0:\n        if odd_string == even_string[::-1]:\n            even_string = even_string[:-1]\n        else:\n            odd_string = odd_string[:-1]\n    \n    if len(even_string) % 2 == 0:\n        return str(len(even_string))\n    else:\n        return \"IMPOSSIBLE\"",
        "test": "assert solution(\"abaababaab\") == \"6\"",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 4505,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s)!= 3 or s[0] not in {'a', 'b', 'c'} or s[1] not in {'a', 'b', 'c'} or s[2] not in {'a', 'b', 'c'}:\n        return 'No'\n    s = ''.join(sorted(s))\n    if s == 'abc' or s == 'bac' or s == 'cab' or s == 'cba':\n        return 'Yes'\n    return 'No'\n\ninput_string = '''\nbac\n'''\n\nprint(solution(input_string))",
        "test": "assert solution(\"abb\") == \"No\"",
        "num_ids": 403,
        "indeed": true
    },
    {
        "number": 4506,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:n+1]))\n    b = list(map(int, stdin.split()[n+1:]))\n    \n    def f(l, r):\n        return sum(a[i] * b[i] for i in range(l, r+1))\n    \n    def min_value(l, r):\n        return f(l, r) - f(r+1, n)\n    \n    def min_remainder(l, r):\n        return ((f(l, r) - f(r+1, n)) % (998244353 * (r-l+1)))\n    \n    l, r = 0, n-1\n    while l < r:\n        mid = (l + r) // 2\n        if min_value(l, r) < min_value(l, mid):\n            l = mid + 1\n        else:\n            r = mid\n    \n    print(min_remainder(l, r))\n    \n    return \"\"",
        "test": "assert solution(\"\"\"",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 4507,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0].split(','))\n    a = list(map(int, stdin.split()[1].split(',')))\n    offers = []\n    for _ in range(m):\n        x, y = map(int, stdin.split()[1].split(','))\n        offers.append((x, [a[x-1]]*y))\n    offers.sort(key=lambda x: x[1])\n\n    def get_price(remain):\n        if not remain:\n            return 0\n        x, y = offers[0]\n        if x > remain:\n            return get_price(remain)\n        return get_price(remain - x) + y[remain-x]\n\n    min_price = float('inf')\n    for i in range(min(k, n), -1, -1):\n        min_price = min(min_price, get_price(i))\n\n    return str(min_price)",
        "test": "assert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"",
        "num_ids": 944,
        "indeed": false
    },
    {
        "number": 4508,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    edges = stdin.split()[1:]\n    \n    def bfs(start: int, visited: set) -> int:\n        queue = [(start, 0)]\n        visited.add(start)\n        min_cost = float('inf')\n        min_cost_path = []\n        \n        while queue:\n            curr, curr_cost = queue.pop(0)\n            \n            if curr == n - 1:\n                min_cost = min(min_cost, curr_cost)\n                min_cost_path = [curr]\n                continue\n            \n            for neighbor in graph[curr]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append((neighbor, curr_cost + 1))\n        \n        return min_cost, min_cost_path\n    \n    graph = [[] for _ in range(n)]\n    \n    for edge in edges:\n        u, v = map(int, edge.split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    \n    visited = set()\n    min_cost, min_cost_path = bfs(0, visited)\n    \n    if min_cost <= 2:\n        return str(min_cost)\n    else:\n        return str(min_cost + 1)",
        "test": "assert solution(input(\"\"\"7",
        "num_ids": 1752,
        "indeed": false
    },
    {
        "number": 4509,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        n, k = map(int, stdin.split()[1:])\n        kth_not_divisible_by_n = 0\n        for num in range(2, kth_not_divisible_by_n):\n            if num % n == 0:\n                kth_not_divisible_by_n = num\n                break\n        print(kth_not_divisible_by_n)",
        "test": "assert solution(\"3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\") == \"10\\n15\\n1999999999\\n113\\n1000000001\\n1\"",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 4510,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ids = list(map(int, stdin.split()[1:]))\n\n    if len(ids) > k:\n        ids.sort(reverse=True)\n        ids = ids[:k]\n\n    return f\"{len(ids)} \" + \" \".join(map(str, ids))",
        "test": "assert solution(input().split()) == \"3\\n1 3 2\"",
        "num_ids": 889,
        "indeed": false
    },
    {
        "number": 4511,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    cards = []\n    \n    for _ in range(n):\n        k = int(stdin.split('\\n')[1])\n        cards.append([int(card.split()[0]), int(card.split()[1])] for card in stdin.split('\\n')[2:2+k])\n    \n    def get_cost(card):\n        return card[0] * (card[0] + 1) // 2 + card[1]\n    \n    max_damage = 0\n    for turn in range(n):\n        damage_sum = 0\n        for card in cards[turn]:\n            if turn % 10 == 0:\n                damage_sum += card[1] * 2\n            else:\n                damage_sum += card[1]\n        if damage_sum > max_damage:\n            max_damage = damage_sum\n    \n    return str(max_damage)",
        "test": "assert solution(\"\"\"",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 4512,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    queries = []\n    for i in range(n // 2):\n        l, r, c = map(int, stdin.split())\n        queries.append((l, r, c))\n\n    def count_distinct_chars(s: str) -> int:\n        char_count = {}\n        for char in s:\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n        return len(char_count)\n\n    results = []\n    for query in queries:\n        if query[0] == 1:\n            index = query[1] - 1\n            stdin = stdin[:index] + query[2] + stdin[index + 1:]\n        elif query[0] == 2:\n            l, r = query[1], query[2]\n            s = stdin[l - 1:r]\n            results.append(count_distinct_chars(s))\n\n    return \"\\n\".join(map(str, results))\n",
        "test": "assert solution(\"dfcbbcfeeedbaea\") == \"5\\n2\\n5\\n2\\n6\\ndef solution(stdin: str) -> str:\\n    pass\\n\"",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 4513,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = 9\n    blocks = [[[] for _ in range(3)] for _ in range(3)]\n\n    for i in range(n):\n        for j in range(n):\n            blocks[i // 3][j // 3].append(int(stdin[i][j]))\n\n    for i in range(n):\n        for j in range(n):\n            if len(blocks[i // 3][j // 3]) == 2 and len(blocks[j // 3][i // 3]) == 2:\n                blocks[i // 3][j // 3] = blocks[j // 3][i // 3] = set()\n\n    for i in range(n):\n        for j in range(n):\n            if len(blocks[i // 3][j // 3]) == 2:\n                blocks[i // 3][j // 3] = set(range(1, 10))\n\n    for i in range(n):\n        for j in range(n):\n            if len(blocks[j // 3][i // 3]) == 2:\n                blocks[j // 3][i // 3] = set(range(1, 10))\n\n    for i in range(3):\n        for j in range(3):\n            if len(blocks[i][j]) == 2:\n                blocks[i][j] = set(range(1, 10))\n\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if len(blocks[i][k]) == 2 and len(blocks[k][j]) == 2:\n                    blocks[i][j].update(blocks[i][k])\n                    blocks[k][j].update(blocks[k][j])\n\n    for i in range(n):\n        for j in range(n):\n            if len(blocks[i][j]) == 2:\n                blocks[i][j] = set(range(1, 10))\n\n    blocks = [[list(b) for b in block] for block in blocks]\n\n    result = []\n    for i in range(n):\n        for j in range(n):\n            result.append(str(blocks[i][j][0]))\n\n    return '\\n'.join(result)\n\nstdin = \"\"\"\n1\n154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\n\"\"\"\n\nfor _ in range(int(stdin.split('\\n')[0])):\n    print(solution(stdin))",
        "test": "assert solution(open(\"sample_input.txt\").read()) == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\\n\"",
        "num_ids": 1477,
        "indeed": false
    },
    {
        "number": 4514,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for i in range(1, n):\n        p = int(stdin.readline().strip())\n        graph[i].append(p)\n        graph[p].append(i)\n\n    parents = [1] * (n + 1)\n    for i in range(1, n):\n        parent = stdin.readline().strip()\n        parents[int(parent)] = i\n\n    def dfs(node, visited, result):\n        visited[node] = True\n        for child in graph[node]:\n            if not visited[child]:\n                dfs(child, visited, result)\n        result.append(node)\n\n    for i in range(1, n):\n        if parents[i] == 1:\n            dfs(i, [False] * (n + 1), [])\n\n    for i, query in enumerate(map(lambda x: map(int, x.split()), stdin.readlines()[n + 1:])):\n        u, k = query\n        target = parents[u]\n        sequence = []\n\n        while True:\n            if parents[target] == 1:\n                dfs(target, [False] * (n + 1), sequence)\n                if len(sequence) < k:\n                    return \"-1\"\n                else:\n                    break\n            else:\n                sequence.append(target)\n                target = parents[target]\n\n    return \" \".join(map(str, sequence))\n\nstdin = \"\"\"\n9 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n\"\"\"\n\nprint(solution(stdin))",
        "test": "assert solution(open('input.txt').read()) == open('output.txt').read().strip()",
        "num_ids": 936,
        "indeed": false
    },
    {
        "number": 4515,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split('\\n')[0])\n    for _ in range(test_cases):\n        a, b, c, n = map(int, stdin.split('\\n')[1].split())\n        if a + b + c == n and a == b == c:\n            return \"YES\"\n        elif a + b + c < n and (a + b) / 2 == c:\n            return \"YES\"\n        else:\n            return \"NO\"",
        "test": "assert solution(\"5\\n5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"NO\"",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 4516,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    p = list(range(1, n + 1))\n    \n    distances = [abs(pos(p[i], x[i]) - pos(p[i + 1], x[i + 1])) for i in range(m - 1)]\n    \n    print(*distances)\n    \n    return '\\n'.join(map(str, distances))\n\ndef",
        "test": "assert solution(\"\"\"5 5",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 4517,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(parent, u, depth):\n        nonlocal answer\n        nonlocal path\n        nonlocal depth_list\n        nonlocal visited\n\n        if u in visited:\n            return False\n\n        visited.add(u)\n        path.append(u)\n        depth_list[u] = depth\n\n        for v in adj_list[u]:\n            if dfs(u, v, depth + 1):\n                return True\n            elif depth_list[v] == depth + 1:\n                answer = \"YES\"\n                return True\n\n        path.pop()\n        visited.remove(u)\n        return False\n\n    n, m = map(int, stdin.split())\n    adj_list = [[] for _ in range(n + 1)]\n    depth_list = [0] * (n + 1)\n    visited = set()\n    answer = \"NO\"\n    path = []\n\n    for line in stdin.split(\"\\n\")[2:]:\n        u, *vs = map(int, line.split())\n        for v in vs:\n            adj_list[u].append(v)\n            adj_list[v].append(u)\n\n    for i in range(m):\n        k, *vs = map(int, stdin.split())\n        if solution(stdin):\n            print(\"YES\")\n        else:\n            print(\"NO\")",
        "test": "assert solution(input()) == \"YES\"",
        "num_ids": 1066,
        "indeed": false
    },
    {
        "number": 4518,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    gangs = set(a)\n    if len(gangs)!= len(a):\n        return \"NO\"\n    \n    def dfs(cur_dist: int, dists: List[int]) -> bool:\n        if cur_dist == n:\n            return True\n        \n        if not set(dists) - set(range(cur_dist, n)):\n            return True\n        \n        for neighbor in range(cur_dist + 1, n):\n            if a[cur_dist]!= a[neighbor] and (cur_dist, neighbor) not in dists:\n                dists.append((cur_dist, neighbor))\n                if dfs(neighbor, dists):\n                    return True\n                dists.pop()\n        return False\n    \n    connected = dfs(0, [])\n    if not connected:\n        return \"NO\"\n    \n    for i in range(len(a) - 1):\n        if a[i] == a[i + 1] and i!= 0:\n            return \"NO\"\n    \n    roads = []\n    for i in range(len(a) - 1):\n        for j in range(i + 1, len(a)):\n            if a[i]!= a[j] and i!= j:\n                roads.append((i, j))\n    \n    for x, y in roads:\n        print(x, y)\n    \n    return \"YES\"",
        "test": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\\nYES\\n1 2\\n2 3\\n3 4\"",
        "num_ids": 1352,
        "indeed": false
    },
    {
        "number": 4519,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin.split()[1])\n    s = ''.join(map(str, sorted([int(x) for x in s])))\n    min_s = ''\n    for i in range(n):\n        min_s += '0' if s[i] == '0' else '1'\n    return min_s\n\ndef",
        "test": "assert solution(r'''",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 4520,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    segments = sorted(segments, key=lambda x: (x[0], x[1]))\n\n    m = 0\n    start = 0\n    index = []\n    removed = []\n    for end in range(1, n + 1):\n        while start < n and segments[start][1] <= end:\n            start += 1\n        m += 1\n        if m == k:\n            break\n        removed.append(index[start - 1])\n        index.append(end)\n\n    return str(m) + '\\n' +''.join(map(str, removed))",
        "test": "assert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 3 5 6\\n\"",
        "num_ids": 969,
        "indeed": false
    },
    {
        "number": 4521,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, *xs, *vs = map(int, stdin.split())\n    x_points, v_points = [], []\n    for i in range(n):\n        x_points.append(xs[i])\n        v_points.append(vs[i])\n\n    x_points.sort()\n    v_points.sort()\n    dp = [0] * n\n\n    for i in range(n):\n        j = bisect_left(x_points, x_points[i])\n        if j == 0:\n            j = 1\n        elif j == n:\n            j -= 1\n\n        k = bisect_left(v_points, v_points[i])\n        if k == 0:\n            k = 1\n        elif k == n:\n            k -= 1\n\n        dp[i] = min(dp[i], dp[j-1] + dp[k-1] - dp[j-1] - dp[k-1] + d(i, j) + d(i, k))\n\n    return str(dp[-1])\n\n\ndef",
        "test": "assert solution(\"2\\n2 1\\n-3 0\\n\") == \"0\\n\"",
        "num_ids": 720,
        "indeed": false
    },
    {
        "number": 4522,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(n - 1):\n        u, v, w = map(int, stdin.split())\n        edges.append((u, v, w))\n    queries = map(int, stdin.split())\n    graph = {i + 1: [] for i in range(n)}\n    for u, v, w in edges:\n        graph[u].append((v, w))\n\n    def dfs(u, visited, res):\n        if u not in visited:\n            visited.add(u)\n            for v, w in graph[u]:\n                if w > res:\n                    res = w\n                    res_v = v\n            for v, w in graph[u]:\n                if w > res:\n                    res = w\n                    res_v = v\n            dfs(res_v, visited, res)\n\n    max_weight = max(queries)\n    visited = set()\n    res = 0\n    for u in range(1, n + 1):\n        if u not in visited:\n            dfs(u, visited, res)\n    return '\\n'.join(map(str, [res] * m))\n\ntest_cases = [\n    '7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\\n',\n    '1 2\\n1 2\\n',\n    '3 3\\n1 2 1\\n2 3 2\\n1 3 2\\n'\n]\n\nfor test_case in test_cases:\n    print(solution(test_case))",
        "test": "assert solution(",
        "num_ids": 1282,
        "indeed": false
    },
    {
        "number": 4523,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2:n+2]))\n\n        moves = 0\n        while len(a) > 1:\n            min_diff = 10**10\n            min_i, min_j = -1, -1\n            for i in range(len(a)):\n                for j in range(i+1, len(a)):\n                    diff = abs(a[i] - a[j])\n                    if diff <= min_diff:\n                        min_diff = diff\n                        min_i, min_j = i, j\n\n            if min_diff > 1:\n                return \"NO\"\n\n            a.pop(min_i)\n            a.pop(min_j)\n            moves += 1\n\n        if len(a) == 1:\n            return \"YES\"\n\n    return \"YES\"",
        "test": "assert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100\\n\") == \"YES\\nYES\\nNO\\nNO\\nYES\\n\"",
        "num_ids": 847,
        "indeed": false
    },
    {
        "number": 4524,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a, b = int(stdin.split()[1]), int(stdin.split()[2])\n    a = bin(a)[2:].zfill(n)\n    b = bin(b)[2:].zfill(m)\n    \n    while b!= '0':\n        if b[0] == '1':\n            a = (int(a) & int(b)) % 998244353\n            a = f'{a:0{n}b}'\n        else:\n            a = (int(a) & int(b)) % 998244353\n            a = f'{a:0{n}b}'\n        b = int(b) // 2\n    \n    return a",
        "test": "assert solution(\"4 5\\n1001\\n10101\\n\") == \"11\\n\"",
        "num_ids": 936,
        "indeed": false
    },
    {
        "number": 4525,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        n = int(stdin.split()[1])\n        a = []\n        first_half_sum = 0\n        second_half_sum = 0\n        for j in range(n//2):\n            a.append(2*j+1)\n            first_half_sum += 2*j+1\n        for j in range(n//2, n):\n            a.append(2*j+2)\n            second_half_sum += 2*j+2\n        if first_half_sum!= second_half_sum:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            print(\" \".join(map(str, a)))\n    return \"YES\"",
        "test": "assert solution(\"\"\"",
        "num_ids": 643,
        "indeed": false
    },
    {
        "number": 4526,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    import bisect\n\n    n, *a = map(int, stdin.split())\n    a.sort()\n\n    count = 0\n    for i, x in enumerate(a):\n        if x - a[i - 1] == 1:\n            count += 1\n        else:\n            bisect.insort(a, x)\n\n    print(count)\n    return \"\"\n",
        "test": "assert solution(\"5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\\n5\\n1 1 1 1 1\\n8\\n8 7 6 5 4 3 2 1\\n1\\n1\") == \"5\\n1\\n0\\n4\\n0\"",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 4527,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for i in range(t):\n        n = int(stdin.split('\\n')[i+1])\n        segments = []\n        for j in range(n):\n            l, r = map(int, stdin.split('\\n')[i+2+j].split())\n            segments.append([l, r])\n        print(solve(segments))\n\ndef",
        "test": "assert solution(\"4\\n4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\\n\") == \"3\\n4\\n2\\n7\\n\"",
        "num_ids": 1158,
        "indeed": false
    },
    {
        "number": 4528,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    outputs = []\n\n    for input in inputs:\n        h, m = map(int, input.split())\n        minutes_left = (24 - h) * 60 + m\n\n        if minutes_left < 0:\n            minutes_left += 1440\n\n        outputs.append(str(minutes_left))\n\n    return \"\\n\".join(outputs)",
        "test": "assert solution(\"\"\"",
        "num_ids": 452,
        "indeed": false
    },
    {
        "number": 4529,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, s = map(int, stdin.readline().split())\n        s = s.strip()\n        for i in range(n):\n            if s[i] == 'L':\n                s = 'L' + s[i:]\n            elif s[i] == 'R':\n                s = s[:i] + 'R' + s[i+1:]\n            elif s[i] == 'U':\n                s = s[:i] + 'U' + s[i+1:]\n            elif s[i] == 'D':\n                s = s[:i] + 'D' + s[i+1:]\n        if s:\n            for i in range(n-len(s)+1):\n                if s[i:i+len(s)] == s:\n                    l, r = i, i+len(s)-1\n                    break\n            else:\n                print(-1)\n            print(l+1, r+1)\n        else:\n            print(1, 1)\n\nwith open(\"input.txt\", \"r\") as f:\n    for test_case in f:\n        solution(test_case)",
        "test": "assert solution('''",
        "num_ids": 900,
        "indeed": false
    },
    {
        "number": 4530,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split('\\n')[0])\n    for _ in range(test_cases):\n        n = int(stdin.split('\\n')[1])\n        skills = list(map(int, stdin.split('\\n')[2].split()))\n        skills_set = set(skills)\n        if len(skills_set) == len(skills):\n            for skill in skills:\n                if skills.count(skill) > 1:\n                    return '0'\n            return '1'\n        else:\n            return '2'\n    return '0'",
        "test": "assert solution(\"4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == \"2\"",
        "num_ids": 705,
        "indeed": false
    },
    {
        "number": 4531,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n    edges = [tuple(map(int, line.split())) for line in stdin.split()[2:]]\n\n    # build graph\n    graph = [[] for _ in range(n + 1)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    # bellman-ford algorithm\n    dist = [float('inf')] * (n + 1)\n    dist[1] = 0\n    for _ in range(n - 1):\n        for u in range(1, n + 1):\n            for v in graph[u]:\n                if dist[u]!= float('inf') and dist[u] + 1 < dist[v]:\n                    dist[v] = dist[u] + 1\n\n    # calculate cost\n    cost = sum(dist[i] * a[i] for i in range(1, n + 1))\n\n    # calculate maximum possible cost\n    max_cost = 0\n    for u in range(1, n + 1):\n        for v in graph[u]:\n            max_cost = max(max_cost, dist[u] + dist[v] - 1)\n\n    return str(max(cost, max_cost))\n",
        "test": "assert solution(\"1\\n1337\") == \"0\"",
        "num_ids": 1558,
        "indeed": false
    },
    {
        "number": 4532,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, k = map(int, stdin.split()[1:3])\n        a = list(map(int, stdin.split()[3:]))\n\n        min_moves = float('inf')\n        for x in range(1, 10001):\n            new_a = [a[i] + x if i % 2 == 0 else a[i] for i in range(n)]\n            if sum(new_a) % k == 0:\n                min_moves = min(min_moves, x)\n\n        print(min_moves)",
        "test": "assert solution(\"5\\n4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\\n8 8\\n1 2 3 4 5 6 7 8\") == \"6\\n18\\n0\\n227\\n8\"",
        "num_ids": 918,
        "indeed": false
    },
    {
        "number": 4533,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    children, cookies = map(int, stdin.split())\n    \n    max_content = 0\n    for i in range(children):\n        max_content = max(max_content, cookies.count(i+1))\n    \n    return str(max_content)",
        "test": "assert solution(\"Example 2: \\nInput: [1,2], [1,2,3]\\nOutput: 2\\nExplanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. You have 3 cookies and their sizes are big enough to gratify all of the children, You need to output 2.\\n\") == \"2\"",
        "num_ids": 662,
        "indeed": false
    },
    {
        "number": 4534,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 0:\n        return \"[]\"\n    if k == 1:\n        return \"[1]\"\n    triangle = [1] * k\n    for i in range(2, k):\n        next_triangle = [1] * (k - i)\n        for j in range(len(next_triangle) - 1):\n            next_triangle[j] = triangle[j] + triangle[j + 1]\n        triangle = next_triangle\n    return str(triangle)\n\nprint(solution(\"3\"))  # Output: \"[1,3,3,1]\"",
        "test": "assert solution(3) == [1,3,3,1]",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 4535,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for i in range(len(stdin)):\n        if stdin[i] == '1':\n            count += 1\n    return str(count)",
        "test": "assert solution(\"00000000000000000000000000001011\") == \"3\"",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 4536,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    num = int(''.join(stdin))\n    num += 1\n    return [str(i) for i in str(num)]",
        "test": "assert solution(\"4,3,2,1\") == \"[4,3,2,2]\"",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 4537,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(a + b, a - b, a * b))",
        "test": "assert solution(\"3 1\") == \"4\"",
        "num_ids": 150,
        "indeed": true
    },
    {
        "number": 4538,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    points.sort(key=lambda p: (p[0]**2 + p[1]**2))\n    count = 0\n    for p in points:\n        if abs(p[0])**2 + abs(p[1])**2 <= d**2:\n            count += 1\n            if count == n:\n                break\n    return str(count)",
        "test": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\\n\") == \"3\\n\"",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 4539,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits = [int(digit) for digit in str(n)]\n    sum_of_digits = sum(digits)\n    base = 10\n    f = sum_of_digits\n    if n % f == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('12') == 'Yes'",
        "num_ids": 259,
        "indeed": true
    },
    {
        "number": 4540,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = [list(map(int, stdin.split()[1:])) for _ in range(n)]\n    costs = [abs(points[i][0] - points[i - 1][0]) * (abs(points[i][1] - points[i - 1][1])) for i in range(1, n)]\n    total_cost = sum(costs)\n    canceled_cost = total_cost / n\n    return \"\\n\".join(str(canceled_cost) for _ in range(n))",
        "test": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\\n\"",
        "num_ids": 666,
        "indeed": false
    },
    {
        "number": 4541,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.lower() in ['a', 'e', 'i', 'o', 'u']:\n        return 'vowel'\n    else:\n        return 'consonant'",
        "test": "assert solution(\"a\") == \"vowel\"",
        "num_ids": 226,
        "indeed": true
    },
    {
        "number": 4542,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    row = ''\n    count = 0\n    for i in range(len(S)):\n        if S[i] == 'B':\n            row += 'B'\n        elif S[i] == 'W':\n            row += 'W'\n        else:\n            row += '-'\n    row_stones = [row[i:i+2] for i in range(0, len(row), 2)]\n    row_stones = [row_stones[0], row_stones[1], row_stones[2], row_stones[3]]\n    row_stones.reverse()\n    for stone in row_stones:\n        if stone == 'B':\n            count += 2\n        elif stone == 'W':\n            count += 1\n        else:\n            count += 0\n    return str(count)",
        "test": "assert solution(\"BBBWW\") == \"1\"",
        "num_ids": 2027,
        "indeed": false
    },
    {
        "number": 4543,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    result = a * a + b * b\n    if result == a * a + b * b:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"1 21\") == \"Yes\"",
        "num_ids": 189,
        "indeed": false
    },
    {
        "number": 4544,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    count = 0\n    a_dict = {}\n    \n    for i in range(N):\n        a_dict[a[i]] = i\n        \n    for x in range(max(a), min(a_dict.keys()) - 1):\n        if x not in a_dict:\n            continue\n        count = max(count, a_dict[x] + 1)\n        count = max(count, a_dict[x] - 1)\n        \n    return str(count)",
        "test": "assert solution(\"7 3 1 4 1 5 9 2\") == \"4\"",
        "num_ids": 376,
        "indeed": false
    },
    {
        "number": 4545,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    \n    # Calculate the number of squares that will be painted black\n    black_squares = (N * (N - 1)) // 2 - A\n    \n    return str(black_squares)",
        "test": "assert solution(\"3\\n4\") == \"5\"",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 4546,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b - a == c - b:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"2 4 6\") == \"YES\"",
        "num_ids": 190,
        "indeed": true
    },
    {
        "number": 4547,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    # Check if 9 is contained in the decimal notation of N\n    if str(n).count('9') > 0:\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution('29') == 'Yes', 'Test failed: Input 29, expected Yes, received {}'.format(solution('29'))",
        "num_ids": 341,
        "indeed": true
    },
    {
        "number": 4548,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.remove(x)\n\n    costs = [0] * n\n    costs[x] = 1\n    for i in range(m):\n        j = a[i]\n        costs[j] = 1\n\n    def min_cost(s):\n        if s == n:\n            return 0\n        if s in visited:\n            return visited[s]\n\n        visited[s] = min(visited[s], costs[s] + min_cost(s + 1))\n        visited[s] = min(visited[s], visited[s - 1] + costs[s] + min_cost(s + 1))\n\n        return visited[s]\n\n    visited = {0: 0}\n    return str(min_cost(0))\n",
        "test": "assert solution(\"5 3 3\\n2 3 4\") == \"0\"",
        "num_ids": 640,
        "indeed": false
    },
    {
        "number": 4549,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    canvas = [list(row) for row in stdin.split('\\n')][1:]\n    \n    white_squares = set()\n    for i in range(H):\n        for j in range(W):\n            if canvas[i][j] == '.':\n                white_squares.add((i, j))\n    \n    def paint_adjacent_squares(square: tuple, color: str, times: int) -> bool:\n        painted = set()\n        for i in range(square[0] - 1, square[0] + 2):\n            if 0 <= i < H and (i, square[1]) not in painted:\n                canvas[i][square[1]] = color\n                painted.add((i, square[1]))\n        for j in range(square[1] - 1, square[1] + 2):\n            if 0 <= j < W and (square[0], j) not in painted:\n                canvas[square[0]][j] = color\n                painted.add((square[0], j))\n        return all(canvas[i][j] == color for i in range(H) for j in range(W))\n    \n    result = []\n    for square in white_squares:\n        if paint_adjacent_squares(square, '#', 2):\n            result.append('Yes')\n            break\n        elif paint_adjacent_squares(square, '.', 2):\n            result.append('No')\n            break\n    return '\\n'.join(result)",
        "test": "assert solution(\"3 3\\n.#.\\n###\\n\") == \"Yes\"",
        "num_ids": 1577,
        "indeed": false
    },
    {
        "number": 4550,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b + c == 30:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"20 20 20\") == \"No\"",
        "num_ids": 232,
        "indeed": false
    },
    {
        "number": 4551,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def balanced(l: int, r: int) -> bool:\n        return l == r\n\n    def left(l: int, r: int) -> bool:\n        return l > r\n\n    def right(l: int, r: int) -> bool:\n        return l < r\n\n    a, b, c, d = map(int, stdin.split())\n\n    if balanced(a + b, c + d):\n        return \"Balanced\"\n    elif left(a + b, c + d):\n        return \"Left\"\n    else:\n        return \"Right\"",
        "test": "assert solution(\"3 8 7 1\") == \"Left\"",
        "num_ids": 327,
        "indeed": true
    },
    {
        "number": 4552,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    shops_info = []\n\n    for i in range(1, N + 1):\n        days_info = list(map(int, stdin.split()[i].split()))\n        shops_info.append(days_info)\n\n    profit_matrix = []\n\n    for i in range(1, N + 1):\n        profit_matrix.append(list(map(int, stdin.split()[i].split())))\n\n    max_profit = float('-inf')\n    for i in range(5):\n        for j in range(2):\n            for k in range(2):\n                profit = 0\n                for shop in range(N):\n                    if shops_info[shop][i + j] == 1 and shops_info[shop][i + 5 + j] == k:\n                        profit += profit_matrix[shop][j]\n                if profit > max_profit:\n                    max_profit = profit\n\n    return str(max_profit)\n\ninput_data = '''1\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n3 2 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n1 1 1 1 1 1 1 1 1 1\n0 0 0 0 0 0 0 0 0 0\n'''\n\noutput = solution(input_data)\nprint(output)",
        "test": "assert solution(\"1\\n1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n\") == \"8\"",
        "num_ids": 1380,
        "indeed": false
    },
    {
        "number": 4553,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def is_postal_code(s: str) -> bool:\n        if len(s)!= 11:\n            return False\n        \n        if s[0]!= '-' or not s[1:].isdigit():\n            return False\n        \n        for c in s[1:]:\n            if not c.isdigit():\n                return False\n        \n        return True\n    \n    a, b = map(int, stdin.split())\n    s = stdin.split()[1]\n    \n    if is_postal_code(s):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"3 4\\n269-6650\") == \"Yes\"",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 4554,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split())\n    \n    min_distance = abs(a - b)\n    if W < abs(a - b):\n        min_distance = abs(a + W - b)\n    \n    return str(min_distance)",
        "test": "assert solution(\"3 2 6\") == \"1\"",
        "num_ids": 232,
        "indeed": false
    },
    {
        "number": 4555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    def find_smallest(arr, k):\n        return heapq.nsmallest(k, arr)\n\n    def find_largest(arr, k):\n        return heapq.nlargest(k, arr)\n\n    def is_within_k_smallest(arr, k):\n        return len(find_smallest(arr, k)) <= k\n\n    def is_within_k_largest(arr, k):\n        return len(find_largest(arr, k)) <= k\n\n    A, B, K = map(int, stdin.split())\n\n    for i in range(A, B + 1):\n        if is_within_k_smallest([i], K) or is_within_k_largest([i], K):\n            print(i)",
        "test": "assert solution(\"5 8 3\") == \"5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n",
        "num_ids": 2041,
        "indeed": false
    },
    {
        "number": 4556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    contest_name = stdin.strip()\n    first_letter = contest_name[0]\n    second_letter = contest_name[1].upper()\n    abbreviation = first_letter + second_letter\n    return abbreviation",
        "test": "assert solution(\"AtCoder s Contest\") == \"ABC\"",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 4557,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    A, B, X = map(int, stdin.split())\n\n    # Check if it is possible to have X cats among A + B animals\n    possible = True\n    cats = 0\n    dogs = 0\n\n    for i in range(1, A + 1):\n        if cats < X:\n            cats += 1\n        else:\n            dogs += 1\n            cats = 1\n\n    if cats < X:\n        possible = False\n\n    # Return result\n    return \"YES\" if possible else \"NO\"",
        "test": "assert solution(\"3 5 5\") == \"NO\"",
        "num_ids": 1028,
        "indeed": false
    },
    {
        "number": 4558,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    current_sand = X\n    for i in range(t):\n        current_sand -= 1\n        if current_sand < 0:\n            current_sand = 0\n    return str(current_sand)",
        "test": "assert solution(\"100 17\") == \"83\"",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 4559,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    result = 1\n    for i in range(n):\n        result *= a[i]\n    if result > 10**18:\n        return \"-1\"\n    else:\n        return str(result)",
        "test": "assert solution(\"2\\n1000000000 1000000000\") == \"1000000000000000000\"",
        "num_ids": 774,
        "indeed": true
    },
    {
        "number": 4560,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n\n    if n <= a:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"110\\n1\") == \"No\"",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 4561,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    \n    if A - X < 0 or B - X < 0:\n        return \"safe\"\n    \n    if A - X < B - X:\n        return \"delicious\"\n    \n    return \"dangerous\"",
        "test": "assert solution(\"4 3 6\") == \"safe\"",
        "num_ids": 253,
        "indeed": false
    },
    {
        "number": 4562,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    max_square = 0\n    i = 1\n    while i * i <= N:\n        j = 1\n        while i * i + j * j <= N:\n            if i * i + j * j == N:\n                max_square = i * i\n            j += 1\n        i += 1\n    return str(max_square)",
        "test": "assert solution(\"10\") == \"9\", \"Expected 9\"",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 4563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    tallies = [0] * n\n    ratios = []\n    for i in range(n):\n        ratio, total = map(int, stdin.split()[i+1:])\n        ratios.append(ratio)\n        tallies[i] = total\n\n    total_votes = sum(tallies)\n    if total_votes % 2 == 1:\n        total_votes += 1\n\n    result = total_votes\n    for i in range(n-1, -1, -1):\n        if ratios[i] > 0:\n            result -= tallies[i]\n            break\n\n    return str(result)",
        "test": "assert solution(input()) == '10', 'Sample Output not found'",
        "num_ids": 501,
        "indeed": false
    },
    {
        "number": 4564,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.lower()\n    if len(set(s)) == len(s):\n        return \"yes\"\n    else:\n        return \"no\"",
        "test": "assert solution(\"uncopyrightable\") == \"yes\"",
        "num_ids": 226,
        "indeed": true
    },
    {
        "number": 4565,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    S = stdin.split()[1]\n    leader = 2  # Assume the third person from the west is the leader\n    directions = [True] * N  # Initialize direction as True for all people\n    directions[leader - 1] = False  # Set leader's direction to False\n\n    for person in range(N):\n        if S[person] == 'E':\n            directions[person] = False\n        else:\n            directions[person] = True\n\n    count = 0\n    for direction in directions:\n        if direction is True:\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"5\\nEEWEW\") == \"2\"",
        "num_ids": 476,
        "indeed": false
    },
    {
        "number": 4566,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[0] * n for _ in range(n)]\n\n    for _ in range(m):\n        a, b = map(int, input().split())\n        a -= 1\n        b -= 1\n        graph[a][b] = 1\n        graph[b][a] = 1\n\n    count = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if graph[i][j]:\n                count[j] += 1\n\n    return \"\\n\".join(map(str, count))\n\nstdin = \"\"\"4 3\n1 2\n2 3\n1 4\n\"\"\"\nprint(solution(stdin))",
        "test": "assert solution(\"\"\"4 3",
        "num_ids": 529,
        "indeed": false
    },
    {
        "number": 4567,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N = int(stdin.split()[0])\n    s = [int(x) for x in stdin.split()[1:]]\n    \n    # Calculate the maximum grade\n    max_grade = max(s)\n    \n    # Check if the maximum grade is divisible by 10\n    if max_grade % 10 == 0:\n        max_grade = 0\n    \n    # Return the maximum grade\n    return str(max_grade)",
        "test": "assert solution(\"3\\n5\\n10\\n15\") == \"25\", \"Sample Input should return 25\"",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 4568,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    X, Y = '', ''\n    for i in range(N):\n        if S[i] in X:\n            X += S[i]\n        elif S[i] in Y:\n            Y += S[i]\n        else:\n            X += S[i]\n            Y += S[i]\n    return max(len(X), len(Y))\n\nwith open(\"input.txt\", \"r\") as file:\n    data = file.readline().strip()\n    N, S = map(int, data.split())\n    print(solution(data))",
        "test": "assert solution('6\\naabbca') == '2'",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 4569,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    weather = stdin.strip()\n    if weather == \"Sunny\":\n        return \"Cloudy\"\n    elif weather == \"Cloudy\":\n        return \"Rainy\"\n    elif weather == \"Rainy\":\n        return \"Sunny\"",
        "test": "assert solution(\"Sunny\") == \"Cloudy\"",
        "num_ids": 238,
        "indeed": true
    },
    {
        "number": 4570,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n\n    if n * a <= b:\n        return str(n * a)\n    else:\n        return str(b)",
        "test": "assert solution(\"7 17 120\") == \"119\"",
        "num_ids": 229,
        "indeed": true
    },
    {
        "number": 4571,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n\n    def correct(count: int) -> bool:\n        return (count - 1) % 4 == 0\n\n    expected = 1900 * 1 / (M + 1)\n    actual = 0\n\n    for i in range(1, N + 1):\n        if correct(i):\n            actual += 1900 * 1 / (i + 1)\n\n    if correct(N + 1):\n        actual += 1900 * 1 / (N + 1)\n\n    return str(int(expected + actual))\n",
        "test": "assert solution(\"\"\"1 1\"\"\") == '3800'",
        "num_ids": 385,
        "indeed": false
    },
    {
        "number": 4572,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.lower()\n    for letter in \"abcdefghijklmnopqrstuvwxyz\":\n        if letter not in s:\n            return letter\n    return None",
        "test": "assert solution(\"abcdefghijklmnopqrstuvwxyz\") == None",
        "num_ids": 249,
        "indeed": false
    },
    {
        "number": 4573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n    result = []\n    for i in range(n):\n        medians = sorted([max(x[:i], key=x.count), min(x[i:], key=x.count)])\n        result.append(medians[1])\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"10\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n\"",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 4574,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    max_area = 0\n    for i in range(n - 3):\n        for j in range(i + 1, n - 2):\n            for k in range(j + 1, n - 1):\n                for l in range(k + 1, n):\n                    area = a[i] * a[j] * a[k] * a[l]\n                    if area > max_area:\n                        max_area = area\n                        \n    if max_area == 0:\n        return \"0\"\n    else:\n        return str(max_area)",
        "test": "assert solution(\"3\\n3 2 1\") == \"0\"",
        "num_ids": 556,
        "indeed": false
    },
    {
        "number": 4575,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Read input values\n    N, D, X = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    # Calculate the number of chocolates prepared\n    prepared = 0\n    for i in range(N):\n        prepared += A[i]\n\n    # Calculate the number of chocolates left\n    left = X - prepared\n\n    # Calculate the number of chocolates prepared at the beginning\n    prepared_at_beginning = 0\n    for i in range(N):\n        for j in range(D + 1):\n            prepared_at_beginning += left // (D + 1)\n            left %= (D + 1)\n\n    return str(prepared_at_beginning)",
        "test": "assert solution(\"3\\n7 1\\n2\\n5\\n10\\n\") == \"8\"",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 4576,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n\n    def count_ways(coins, target):\n        if not coins:\n            return 1\n        if target == 0:\n            return 0\n        if coins[0] > target:\n            return count_ways(coins[1:], target)\n        return count_ways(coins[1:], target) + count_ways(coins, target - coins[0])\n\n    ways = 0\n    for coin in [A, B, C]:\n        ways += count_ways([coin], X // coin)\n\n    return str(ways)\n",
        "test": "assert solution(input()) == '2\\n'",
        "num_ids": 586,
        "indeed": false
    },
    {
        "number": 4577,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C >= A and C <= B:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('1 3 2') == 'Yes'",
        "num_ids": 220,
        "indeed": true
    },
    {
        "number": 4578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    m_list = list(map(int, stdin.split()))\n\n    m_sum = sum(m_list)\n    if m_sum > x:\n        return \"Impossible\"\n\n    def max_doughnuts(m_i: int) -> int:\n        return x // m_i\n\n    def sum_doughnuts(m_i: int, d_i: int) -> int:\n        return m_i * d_i\n\n    def make_doughnuts(m_i: int, d_i: int) -> int:\n        max_d = max_doughnuts(m_i)\n        return min(max_d, d_i)\n\n    m_d_dict = {}\n    for m_i in m_list:\n        if m_i in m_d_dict:\n            m_d_dict[m_i] += 1\n        else:\n            m_d_dict[m_i] = 1\n\n    result = 0\n    for d_i in range(1, n + 1):\n        if d_i in m_d_dict:\n            max_m = max(m_i for m_i in m_list if d_i > m_d_dict[m_i])\n            result += sum_doughnuts(max_m, make_doughnuts(max_m, d_i))\n\n    return str(result)\n",
        "test": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"",
        "num_ids": 616,
        "indeed": false
    },
    {
        "number": 4579,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    items = stdin.split()[1:]\n    kinds = set()\n    \n    for item in items:\n        kinds.add(item[0])\n    \n    return str(len(kinds))",
        "test": "assert solution(\"3\\napple\\norange\\napple\") == \"2\"",
        "num_ids": 215,
        "indeed": false
    },
    {
        "number": 4580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *ratings = map(int, stdin.split())\n    colors = set()\n    \n    for rating in ratings:\n        if rating < 400:\n            colors.add(\"gray\")\n        elif rating < 800:\n            colors.add(\"brown\")\n        elif rating < 1200:\n            colors.add(\"green\")\n        elif rating < 1600:\n            colors.add(\"cyan\")\n        elif rating < 2000:\n            colors.add(\"blue\")\n        elif rating < 2400:\n            colors.add(\"yellow\")\n        elif rating < 2800:\n            colors.add(\"orange\")\n        else:\n            colors.add(\"red\")\n    \n    return \" \".join(sorted(colors))\n\nstdin = \"4\\n2100 2500 2700 2700\"\nprint(solution(stdin))  # Output: \"2 2\"",
        "test": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"",
        "num_ids": 1064,
        "indeed": false
    },
    {
        "number": 4581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    ramen_price = 700\n    if stdin[0] == 'o':\n        ramen_price += 100\n    if stdin[1] == 'x':\n        ramen_price -= 100\n    if stdin[2] == 'o':\n        ramen_price += 100\n    return str(ramen_price)",
        "test": "assert solution(\"xxo\") == \"700\"",
        "num_ids": 482,
        "indeed": false
    },
    {
        "number": 4582,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(str.strip, stdin.split())\n    if a == \"H\" and b == \"H\":\n        return \"H\"\n    elif a == \"D\" and b == \"D\":\n        return \"D\"\n    elif a == \"D\" and b == \"H\":\n        return \"H\"\n    else:\n        return \"D\"",
        "test": "assert solution(\"H D\") == \"D\"",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 4583,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    ticket = list(map(int, stdin.split()))\n    ticket.sort(reverse=True)\n    return f\"{ticket[0]}{'+-'[ticket[1] < ticket[0]]}{ticket[1]}{'+-'[ticket[2] < ticket[1]]}{ticket[2]}{'+-'[ticket[3] < ticket[2]]}{ticket[3]}\"",
        "test": "assert solution(\"1222\") == \"1+2+2+2=7\"",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 4584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n    count = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        count[i] = count[A[i - 1]] + 1\n\n    result = []\n    for i in range(1, n + 1):\n        if count[i] == 1:\n            result.append(i)\n\n    return \"\\n\".join(map(str, result))\n",
        "test": "assert solution(\"5\\n1 1 2 2\\n2 2 4 4\\n3 3 5 5\\n4 4 6 6\\n5 5 7 7\") == \"2\\n2\\n1\\n2\\n0\"",
        "num_ids": 632,
        "indeed": false
    },
    {
        "number": 4585,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    left_position, right_position = 0, x\n\n    for i in range(1000000):\n        left_position += i\n        right_position -= i\n\n        if left_position == x:\n            return str(i)\n\n    return str(-1)",
        "test": "assert solution(\"6\") == \"3\"",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 4586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1000 or n > 9999:\n        return \"No\"\n    count = 0\n    num = n\n    while num > 0:\n        digit = num % 10\n        if digit == 1:\n            count += 1\n        else:\n            break\n        num //= 10\n    if count >= 3:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"1118\") == \"Yes\"",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 4587,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:N+1]))\n    B = list(map(int, stdin.split()[N+1:2*N+1]))\n    C = list(map(int, stdin.split()[2*N+1:]))\n    \n    altars = set()\n    \n    def dfs(parts: list, index: int, size: int, used: set) -> None:\n        if len(used) == 3:\n            altars.add(\" \".join(map(str, parts)))\n            return\n        \n        for i in range(index, N):\n            if i not in used:\n                if i == index or size < A[i]:\n                    dfs(parts + [i], i + 1, size + A[i], used.union(set([i])))\n                if i == index or size < B[i]:\n                    dfs(parts + [i], i + 1, size + B[i], used.union(set([i])))\n                if i == index or size < C[i]:\n                    dfs(parts + [i], i + 1, size + C[i], used.union(set([i])))\n    \n    dfs([], 0, 0, set())\n    \n    return str(len(altars))",
        "test": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == \"3\"",
        "num_ids": 843,
        "indeed": false
    },
    {
        "number": 4588,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x = int(x, 16)\n    y = int(y, 16)\n    if x < y:\n        return \"<\"\n    elif x > y:\n        return \">\"\n    else:\n        return \"=\"",
        "test": "assert solution(stdin=\"A B\") == \"<\"",
        "num_ids": 259,
        "indeed": true
    },
    {
        "number": 4589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    grid = []\n    for i in range(H):\n        row = input()\n        grid.append(row)\n\n    def get_neighbors(row: int, col: int) -> set:\n        neighbors = set()\n        for i in range(row - 1, row + 2):\n            for j in range(col - 1, col + 2):\n                if i!= row or j!= col and 0 <= i < H and 0 <= j < W:\n                    neighbors.add((i, j))\n        return neighbors\n\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '.':\n                num_neighbors = len(get_neighbors(i, j))\n                grid[i][j] = str(num_neighbors)\n\n    result = []\n    for row in grid:\n        result.append(''.join(row))\n    return '\\n'.join(result)",
        "test": "assert solution(\"\"\"",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 4590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n\n    def process_desk(desk, books_read):\n        for i in range(len(desk)):\n            if books_read > K:\n                return -1\n            book_read = desk.pop(0)\n            if i in A:\n                minutes = A[i]\n            elif i in B:\n                minutes = B[i]\n            else:\n                continue\n            if minutes > books_read:\n                minutes = books_read\n            books_read += minutes\n        return books_read\n\n    desk_a_books = process_desk(A, 0)\n    if desk_a_books == -1:\n        return -1\n\n    desk_b_books = process_desk(B, 0)\n    if desk_b_books == -1:\n        return -1\n\n    return max(desk_a_books, desk_b_books)",
        "test": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\\n\"",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 4591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x, y = map(int, stdin.split())\n    max_price = a * x + b * y\n    min_pizza = min(x, y)\n\n    if min_pizza % 2 == 1:\n        min_pizza -= 1\n\n    max_pizza = min_pizza + 1\n\n    if max_pizza * 2 > min_pizza:\n        max_pizza = min_pizza + 2\n\n    min_ab_pizza = max(min_pizza // 2, 1)\n    max_ab_pizza = min_ab_pizza + 1\n\n    min_price = a * min_pizza * min_ab_pizza + b * max_pizza * max_ab_pizza + c * (min_pizza + max_pizza)\n\n    return str(min_price)\n\n\nwith open(\"input.txt\", \"r\") as file:\n    input_data = file.read().strip()\n\noutput = solution(input_data)\n\nprint(output)",
        "test": "assert solution(\"\"\"",
        "num_ids": 860,
        "indeed": false
    },
    {
        "number": 4592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    mod = 10**9 + 7\n    result = 0\n    \n    for i in range(1, n+1):\n        if i * i > n:\n            break\n        count = 0\n        while n % i == 0:\n            count += 1\n            n //= i\n        result = (result + count) % mod\n    \n    return str(result)",
        "test": "assert solution(\"3\") == \"4\", \"Sample Input 3\"",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 4593,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    \n    # Check if X is a positive integer\n    if x <= 0:\n        raise ValueError(\"X must be a positive integer\")\n    \n    # Check if X is less than 1000\n    if x > 1000:\n        raise ValueError(\"X must be at most 1000\")\n    \n    # Initialize variables\n    largest_perfect_power = 0\n    current_perfect_power = 1\n    \n    # Loop through all possible perfect powers\n    while current_perfect_power <= x:\n        # If the current perfect power is greater than the largest so far, update the largest\n        if current_perfect_power > largest_perfect_power:\n            largest_perfect_power = current_perfect_power\n        \n        # Compute the next perfect power\n        current_perfect_power *= 4\n    \n    return str(largest_perfect_power)",
        "test": "assert solution(\"10\") == \"9\"",
        "num_ids": 330,
        "indeed": false
    },
    {
        "number": 4594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = map(int, stdin.split())\n    \n    def max_layers(layer, height, diameter):\n        if layer == N:\n            return 1\n        if layer % 2 == 0:\n            return max_layers(layer + 1, height, diameter) + max_layers(layer + 2, height, diameter)\n        else:\n            return max_layers(layer + 1, height, diameter)\n    \n    return str(max_layers(1, 0, 0))",
        "test": "assert solution(\"1\\n10\\n\") == \"1\"",
        "num_ids": 593,
        "indeed": false
    },
    {
        "number": 4595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    length = len(s)\n    max_length = 1\n\n    for i in range(length - 1):\n        for j in range(i + 1, length - 1):\n            substring = s[i:j + 2]\n            if substring[0].isupper() and substring[-1].isupper():\n                max_length = max(max_length, j - i + 1)\n\n    return str(max_length)\n\ninput_ = \"\"\"\nQWERTYASDFZXCV\n\"\"\"\noutput = solution(input_)\nprint(output)",
        "test": "assert solution(\"QWERTYASDFZXCV\") == \"5\"",
        "num_ids": 377,
        "indeed": false
    },
    {
        "number": 4596,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n\n    count = 0\n    even_count = 0\n    for a in A:\n        if a % 2 == 0:\n            even_count += 1\n        else:\n            count += 1\n\n    if even_count == N:\n        return str(count)\n    else:\n        return str(count + 1)",
        "test": "assert solution(\"4\\n2 4 6 8\") == \"0\"",
        "num_ids": 735,
        "indeed": false
    },
    {
        "number": 4597,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    power = 1\n    for i in range(N):\n        power *= (i + 1)\n    return str((power % (10**9 + 7)))",
        "test": "assert solution(\"3\") == \"6\"",
        "num_ids": 176,
        "indeed": true
    },
    {
        "number": 4598,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    candies = 1\n    for i in range(1, N+1):\n        candies += i\n    return str(candies)",
        "test": "assert solution(\"3\") == \"6\", \"Sample Output: 6\"",
        "num_ids": 145,
        "indeed": false
    },
    {
        "number": 4599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n\n    alice_cards = []\n    bob_cards = []\n\n    for ai in a:\n        if ai % 2 == 1:\n            alice_cards.append(ai)\n        else:\n            bob_cards.append(ai)\n\n    alice_cards.sort()\n    bob_cards.sort()\n\n    alice_score = sum(alice_cards)\n    bob_score = sum(bob_cards)\n\n    return str(alice_score - bob_score)",
        "test": "assert solution(\"2\\n3 1\") == \"2\"",
        "num_ids": 382,
        "indeed": false
    },
    {
        "number": 4600,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p, *s = map(str, stdin.split())\n    p = list(map(int, p.split()))\n    s = list(map(str, s))\n\n    correct_answers = 0\n    penalties = 0\n\n    for i in range(len(s)):\n        if s[i] == 'AC':\n            correct_answers += 1\n            if i == 0:\n                penalties += 1\n\n    return f\"{correct_answers} {penalties}\"",
        "test": "assert solution(",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 4601,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n\n    def f(health):\n        return health <= 0\n\n    def b(health):\n        return health > 0\n\n    # Special Move\n    attack_count = 0\n    for i, h_i in enumerate(h):\n        if f(h_i):\n            attack_count += 1\n            if attack_count == k:\n                return attack_count\n            h[i] = 0\n\n    # Attack\n    for i, h_i in enumerate(h):\n        if b(h_i):\n            attack_count += 1\n            if attack_count == k:\n                return attack_count\n\n    # No winning condition met\n    return attack_count",
        "test": "assert solution(\"3 1\\n4 1 5\\n\") == \"5\"",
        "num_ids": 647,
        "indeed": false
    },
    {
        "number": 4602,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    balls = [tuple(map(int, stdin.split())) for _ in range(N)]\n\n    type_a_robots = [(0, x) for x in range(1, N + 1)]\n    type_b_robots = [(K, x) for x in range(1, N + 1)]\n\n    total_distance = 0\n\n    while type_a_robots and type_b_robots:\n        a = min(type_a_robots, key=lambda x: abs(x[1] - balls[0][1]))[0]\n        b = min(type_b_robots, key=lambda x: abs(x[1] - balls[0][1]))[0]\n\n        total_distance += abs(a - balls[0][1])\n\n        if a == 0:\n            type_a_robots.remove(a)\n            balls.pop(0)\n        else:\n            type_a_robots.remove(a)\n\n        if b == K:\n            type_b_robots.remove(b)\n            balls.pop(0)\n        else:\n            type_b_robots.remove(b)\n\n    return str(total_distance)",
        "test": "assert solution(\"\"\"1",
        "num_ids": 715,
        "indeed": false
    },
    {
        "number": 4603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    train_price = int(stdin.split()[0])\n    bus_price = int(stdin.split()[1])\n    train_tickets = int(stdin.split()[2])\n    bus_tickets = int(stdin.split()[3])\n\n    min_train_fare = train_price * train_tickets\n    min_bus_fare = bus_price * bus_tickets\n\n    if min_train_fare < min_bus_fare:\n        min_fare = min_train_fare\n    else:\n        min_fare = min_bus_fare\n\n    print(min_fare)\n\n    return \"\"",
        "test": "assert solution(\"600\\n300\\n220\\n420\") == \"520\"",
        "num_ids": 448,
        "indeed": false
    },
    {
        "number": 4604,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n    A.sort()\n    MOD = 10**9 + 7\n    ans = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if abs(A[i]-A[j]) <= i:\n                ans = (ans + 1) % MOD\n    return str(ans)",
        "test": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"",
        "num_ids": 745,
        "indeed": false
    },
    {
        "number": 4605,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    count = 0\n    sum_of_digits = 0\n\n    for i in range(1, N+1):\n        digits = sum(int(digit) for digit in str(i))\n        if A <= digits <= B:\n            count += 1\n            sum_of_digits += i\n\n    print(sum_of_digits)\n    return str(sum_of_digits)",
        "test": "assert solution(\"20 2 5\") == \"84\"",
        "num_ids": 422,
        "indeed": true
    },
    {
        "number": 4606,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return f\"ABC{N:03d}\"",
        "test": "assert solution('100') == 'ABC100'",
        "num_ids": 137,
        "indeed": true
    },
    {
        "number": 4607,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    takahashi_days = 0\n    for i in range(1, 32):\n        if (a, i) == (1, 1):\n            takahashi_days += 1\n        if (a, i) == (a, b):\n            takahashi_days += 1\n    return str(takahashi_days)",
        "test": "assert solution(\"12 25\") == \"1\", \"12 25\"",
        "num_ids": 794,
        "indeed": false
    },
    {
        "number": 4608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n    a.sort()\n\n    result = -1\n    last_pressed = None\n\n    for i in range(1, n + 1):\n        if a[i - 1] > i:\n            if a[i - 1] > last_pressed:\n                result = i\n                break\n            else:\n                last_pressed = a[i - 1]\n\n    if result == -1:\n        print(-1)\n    else:\n        print(result)\n\ndef",
        "test": "assert solution(\"3\\n3\\n1\\n2\") == \"2\\nPress Button 1, then Button 3.\"",
        "num_ids": 456,
        "indeed": false
    },
    {
        "number": 4609,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    \n    written_numbers = 0\n    for a in A:\n        if a not in written_numbers:\n            written_numbers += 1\n    \n    return str(written_numbers)",
        "test": "assert solution(\"3\\n7\\n2\\n6\") == \"0\"",
        "num_ids": 398,
        "indeed": false
    },
    {
        "number": 4610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    for i in range(n):\n        if a.count(a[i]) > k:\n            a.remove(a[i])\n\n    return str(len(a))",
        "test": "assert solution(\"\"\"",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 4611,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n, *t_xy = [int(x) for x in stdin.split()]\n    t_xy = [(x_i, y_i, t_i) for t_i, x_i, y_i in zip(t_xy[::2], t_xy[1::2], t_xy[2::2])]\n    x, y, t = t_xy[0]\n    queue = [(x, y, 0)]\n    visited = set()\n    visited.add((x, y))\n\n    while queue:\n        x, y, t = queue.pop(0)\n\n        if (x, y) == (n - 1, n - 1):\n            return \"Yes\"\n\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n\n            if (nx, ny) in visited:\n                continue\n\n            visited.add((nx, ny))\n            queue.append((nx, ny, t + 1))\n\n    return \"No\"",
        "test": "assert solution(\"2\\n3 1 2\\n6 1 1\\n\") == \"Yes\"",
        "num_ids": 964,
        "indeed": false
    },
    {
        "number": 4612,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = (a + b) / 2\n    return str(int(x + 0.5))\n\ninput_data = \"1 3\\n\"\nprint(solution(input_data)) # Output: 2",
        "test": "assert solution(\"1 3\") == \"2\"",
        "num_ids": 175,
        "indeed": true
    },
    {
        "number": 4613,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        edges.append((a, b))\n    adj = [[] for _ in range(n + 1)]\n    for a, b in edges:\n        adj[a].append(b)\n        adj[b].append(a)\n\n    def is_connected(v: int) -> bool:\n        visited = [False] * (n + 1)\n        stack = [(v, [v])]\n        while stack:\n            u, path = stack.pop()\n            if visited[u]:\n                return False\n            visited[u] = True\n            for v in adj[u]:\n                if v not in path:\n                    stack.append((v, path + [v]))\n        return True\n\n    bridge_edges = 0\n    for i in range(1, n + 1):\n        if is_connected(i) and i not in {edge[0] for edge in edges} and i not in {edge[1] for edge in edges}:\n            bridge_edges += 1\n\n    return str(bridge_edges)\n\nwith open(\"input.txt\", \"r\") as file:\n    stdin = file.read()\n\nprint(solution(stdin))",
        "test": "assert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"4\"",
        "num_ids": 690,
        "indeed": false
    },
    {
        "number": 4614,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B or A == C or B == C:\n        return str(A if A!= B and A!= C and A!= B or B == C else B)\n    else:\n        return str(A if A!= B and A!= C else C)",
        "test": "assert solution(\"5 7 5\") == \"7\"",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 4615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n    if e > 100:\n        return \"Error: E should not exceed 100.\"\n    if a + b > f or c + d > f:\n        return \"Error: The beaker cannot contain more than F grams of substances.\"\n    if a + b + c + d > 100:\n        return \"Error: The beaker cannot contain more than F grams of substances.\"\n\n    mass = 0\n    for i in range(1, 5):\n        if a >= 100:\n            mass += 100 * b / (a + b)\n        a -= 100\n        b -= 100\n    mass += c + d\n    return f\"{mass} {mass * e // (a + b + c + d) * 100 // 100:.2f}\"\n",
        "test": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"",
        "num_ids": 1283,
        "indeed": false
    },
    {
        "number": 4616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    i18n_index = s.index('internationalization')\n    i18n = s[:i18n_index] + s[i18n_index:i18n_index+3] + s[i18n_index+3:]\n    print(i18n)\n    return i18n",
        "test": "assert solution(\"internationalization\") == \"i18n\"",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 4617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_char(row: int, col: int) -> str:\n        row -= 1\n        col -= 1\n        if row < 0 or col < 0 or row >= 2 or col >= 3:\n            return''\n        return stdin[row][col]\n\n    def is_valid_char(c: str) -> bool:\n        return c.isalpha() and c.islower() and c in 'abcde'\n\n    grid = [\n        [get_char(1, i), get_char(2, i), get_char(3, i)]\n        for i in range(1, 4)\n    ]\n\n    for i in range(3):\n        for j in range(i + 1, 4):\n            grid[i][j], grid[j][i] = grid[j][i], grid[i][j]\n\n    for row in grid:\n        for col in row:\n            if not is_valid_char(col):\n                return 'NO'\n\n    return 'YES'",
        "test": "assert solution(\"pot\\ntop\") == \"YES\\nThis grid remains the same when rotated 180 degrees.\"",
        "num_ids": 586,
        "indeed": false
    },
    {
        "number": 4618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split()\n    s = list(s)\n    k = int(k)\n    substrings = [\"\".join(s[i:j]) for i in range(len(s)) for j in range(i + 1, len(s) + 1)]\n    substrings.remove(\"\")\n    substrings.sort()\n    return substrings[k - 1]",
        "test": "assert solution(\"aba\\n4\") == \"b\\n\"",
        "num_ids": 323,
        "indeed": false
    },
    {
        "number": 4619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    w, h, n = map(int, stdin.split())\n    points = []\n    for _ in range(n):\n        x, y, a = map(int, stdin.split())\n        points.append((x, y, a))\n\n    white_area = 0\n    for x1, y1, a1 in points:\n        if a1 == 1:\n            white_area += w * (min(y1, h) - max(y1, h))\n        elif a1 == 2:\n            white_area += w * (max(y1, h) - min(y1, h))\n        elif a1 == 3:\n            white_area += (min(x1, w) - max(x1, w)) * h\n        elif a1 == 4:\n            white_area += (max(x1, w) - min(x1, w)) * h\n\n    return str(white_area)\n\nwith open(\"sample_input.txt\", \"r\") as f:\n    sample_input = f.read()\n\nwith open(\"sample_output.txt\", \"w\") as f:\n    f.write(solution(sample_input))",
        "test": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"",
        "num_ids": 671,
        "indeed": false
    },
    {
        "number": 4620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    trains = [tuple(map(int, line.split())) for line in stdin.split()[1:]]\n    trains.sort(key=lambda x: x[1])\n    \n    def earliest_arrival(station: int) -> int:\n        res = 0\n        for time, train_time, train_length in trains:\n            if time <= station < time + train_length:\n                res = max(res, time + train_time)\n        return res\n    \n    return \"\\n\".join(map(str, [earliest_arrival(i) for i in range(1, n+1)]))",
        "test": "assert solution(\"3\\n6 5 1\\n1 10 1\") == \"12\\n11\\n0\\n\"",
        "num_ids": 898,
        "indeed": false
    },
    {
        "number": 4621,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string to a list of strings, where each string represents a row of the image\n    rows = stdin.split('\\n')\n\n    # Calculate the height and width of the image\n    H = len(rows)\n    W = len(rows[0])\n\n    # Create a new image with twice the height and width of the original\n    new_rows = []\n    for i in range(0, H * 2):\n        row = []\n        for j in range(0, W):\n            if i == H:\n                row.append('.')\n            else:\n                row.append(rows[i // 2][j])\n        new_rows.append(''.join(row))\n\n    # Print the new image\n    for row in new_rows:\n        print(row)\n\n    return ''\n",
        "test": "assert solution(\"2 2\\n*.\\n.*\\n\") == \".*\\n.*\\n.*\\n.*\\n\"",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 4622,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    if len(set(arr)) == n:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"",
        "num_ids": 1273,
        "indeed": true
    },
    {
        "number": 4623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def find_teams(weights):\n        n = len(weights)\n        a, b = float('inf'), float('inf')\n        for weight in weights:\n            a = min(a, weight)\n            b = max(b, weight)\n        a, b = min(a, b), max(a, b)\n        return [(a, b)]\n\n    def compare_teams(a, b):\n        total_a = sum(a[0]), sum(a[1])\n        total_b = sum(b[0]), sum(b[1])\n        return total_a > total_b\n\n    def max_teams(total_weight, participants):\n        teams = find_teams(participants)\n        n = len(teams)\n        while True:\n            current_teams = teams.copy()\n            for team in current_teams:\n                for i in range(len(participants)):\n                    if i not in team:\n                        new_team = list(team)\n                        new_team.append(i)\n                        if sum(sum(new_team)) == total_weight:\n                            teams.append(new_team)\n            if len(teams) == n:\n                break\n        return len(teams)\n\n    n, *weights = map(int, stdin.split())\n    total_weight = sum(weights)\n    teams = find_teams(weights)\n    n = len(teams)\n    while True:\n        current_teams = teams.copy()\n        for team in current_teams:\n            for i in range(len(weights)):\n                if i not in team:\n                    new_team = list(team)\n                    new_team.append(i)\n                    if sum(sum(new_team)) == total_weight:\n                        teams.append(new_team)\n        if len(teams) == n:\n            break\n\n    return str(max_teams(total_weight, weights))\n\nt = int(input())\nfor i in range(t):\n    stdin = input()\n    print(solution(stdin))",
        "test": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\\n3\\n4\\n1\\n2\"",
        "num_ids": 1631,
        "indeed": false
    },
    {
        "number": 4624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, x = map(int, stdin.split()[1:])\n        if n < x:\n            print(\"1\")\n        else:\n            print(1 + (n // x))",
        "test": "assert solution(\"4\\n7 3\\n1 5\\n22 5\\n987 13\") == \"3\\n1\\n5\\n77\"",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 4625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        n, m = map(int, stdin.split()[1:3])\n        s = stdin.split()[3]\n        p = list(map(int, stdin.split()[4:4+m]))\n        \n        button_count = [0] * 26\n        \n        for j in range(m):\n            for k in range(p[j]):\n                button_count[ord(s[j]) - ord('a')] += 1\n                \n        for button in 'abcdefghijklmnopqrstuvwxyz':\n            print(button_count.count(ord(button) - ord('a')))\n\ndef",
        "test": "assert solution('''10 5",
        "num_ids": 1325,
        "indeed": false
    },
    {
        "number": 4626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    tests = int(stdin.split('\\n')[0])\n    for i in range(tests):\n        a, b, c = map(int, stdin.split('\\n')[i+1].split())\n        if a == b and b == c:\n            print(0)\n        else:\n            x = [a, b, c]\n            for i in range(1, 4):\n                if x[i] < x[i-1]:\n                    x[i], x[i-1] = x[i-1], x[i]\n                elif x[i] > x[i-1]:\n                    x[i], x[i-1] = x[i], x[i-1]\n            print(abs(x[0]-x[1]) + abs(x[0]-x[2]) + abs(x[1]-x[2]))\n\nstdin = \"\"\"\n8\n3 3 4\n10 20 30\n5 5 5\n2 4 3\n1 1000000000 1000000000\n1 1000000000 999999999\n3 2 5\n3 2 6\n\"\"\"\n\nsolution(stdin)",
        "test": "assert solution(\"3 2 5\\n1 2 3\\n3 4 5\\n4 5 6\\n5 6 7\\n6 7 8\\n7 8 9\\n8 9 10\\n9 10 11\\n10 11 12\\n11 12 13\\n12 13 14\\n13 14 15\\n14 15 16\\n15 16 17\\n16 17 18\\n17 18 19\\n18 19 20\\n19 20 21\\n20 21 22\\n21 22 23\\n22 23 24\\n23 24 25\\n24 25 26\\n25 26 27\\n26 27 28\\n27 28 29\\n28 29 30\\n29 30 31\\n30 31 32\\n31 32 33\\n32 33 34\\n33 34 35\\n34 35 36\\n35 36 37\\n36 37 38\\n37 38 39\\n38 39 40\\n39 40 41\\n40 41 42\\n41 42 43\\n42 43 44\\n43 44 45\\n44 45 46\\n45 46 47\\n46 47 48\\n47 48 49\\n48 49 50\\n49 50 51\\n50 51 52\\n51 52 53\\n52 53 54\\n53 54 55\\n54 55 56\\n55 56 57\\n56 57 58\\n57 58 59\\n58 59 60\\n59 60 61\\n60 61 62\\n61 62 63\\n62 63 64\\n63 64 65\\n64 65 66\\n65 66 67\\n66 67 68\\n67 68 69\\n68 69 70\\n69 70 71\\n70 71 72\\n71 72 73\\n72 73 74\\n73 74 75\\n74 75 76\\n",
        "num_ids": 2071,
        "indeed": false
    },
    {
        "number": 4627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2:2+n]))\n        a.sort()\n\n        flag = True\n        for i in range(len(a)-1):\n            if abs(a[i]-a[i+1]) == 1:\n                continue\n            if a[i] % 2 == a[i+1] % 2:\n                flag = False\n                break\n        if flag:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
        "test": "assert solution(input().strip()) == \"YES\"",
        "num_ids": 937,
        "indeed": false
    },
    {
        "number": 4628,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def dijkstra(graph, start, end):\n        visited = set()\n        heap = [(0, start)]\n        while heap:\n            cost, current = heapq.heappop(heap)\n            if current not in visited:\n                visited.add(current)\n                if current == end:\n                    return cost\n                for neighbor, weight in graph[current]:\n                    heapq.heappush(heap, (cost + weight, neighbor))\n        return float('inf')\n\n    n, m, k = map(int, stdin.split())\n    graph = [[(j, w) for j, w in enumerate(stdin.split()[2:], start=3) if j!= i] for i in range(n)]\n    routes = [list(map(int, stdin.split()[2:])) for _ in range(k)]\n\n    def get_route_cost(a, b):\n        return min(d(routes[i][0], routes[i][1]) for i in range(k) if a in routes[i] and b in routes[i])\n\n    total_cost = 0\n    for i in range(k):\n        for j in range(k):\n            if i!= j:\n                total_cost += d(routes[i][0], routes[j][1])\n                total_cost += get_route_cost(routes[i][0], routes[j][1])\n                total_cost += get_route_cost(routes[j][0], routes[i][1])\n\n    cheapest_roads = [dijkstra(graph, i, j) for i in range(n) for j in range(n) if d(i, j)!= 0]\n    total_cost += sum(cheapest_roads)\n\n    return str(total_cost)\n\nimport heapq\nimport sys\n\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n\nprint(solution(stdin))\n",
        "test": "assert solution(open(\"input2.txt\").read()) == \"13\"",
        "num_ids": 1421,
        "indeed": false
    },
    {
        "number": 4629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    queries = [int(stdin.split()[i + 1]) for i in range(q)]\n\n    def is_good(num):\n        n = 0\n        while num > 0:\n            n += num % 3\n            num //= 3\n        return n == num\n\n    def get_next_good_number(start):\n        num = start + 1\n        while not is_good(num):\n            num += 1\n        return num\n\n    result = []\n    for n in queries:\n        result.append(get_next_good_number(n))\n\n    return \"\\n\".join(map(str, result))\n\n\ninput = \"7\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\"\noutput = solution(input)\nprint(output)",
        "test": "assert solution(\"1\\n2\\n6\\n13\\n14\\n3620\\n10000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\"",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 4630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def get_day(p: List[int]) -> int:\n        n = len(p)\n        kids = [None] * n\n        books = [None] * n\n\n        for i, p_i in enumerate(p):\n            kids[p_i - 1] = i + 1\n\n        for i in range(1, n + 1):\n            kid = kids.pop(0)\n            books[kid - 1] = i\n            if kid == 1:\n                books[0] = i\n\n        return max(books)\n\n    def get_day_query(n: int, p: List[int]) -> List[int]:\n        return [get_day(p) for _ in range(n)]\n\n    queries = [int(x) for x in stdin.split()]\n    queries.pop(0)\n\n    result = []\n    for n, p in queries:\n        result.append(get_day_query(n, [int(x) for x in p.split()]))\n\n    return '\\n'.join([str(x) for x in result])",
        "test": "assert solution(",
        "num_ids": 1703,
        "indeed": false
    },
    {
        "number": 4631,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n\n    x.sort()\n    d = []\n    for i in range(1, n + 1):\n        d.append(abs(x[i] - x[0]))\n    d.sort()\n\n    res = sum(d[:m])\n    y = [x[0]]\n    for i in range(m, n):\n        d.append(abs(x[i] - x[0]))\n        d.sort()\n        res += d[i] - d[m]\n        y.append(x[i])\n        m += 1\n\n    return str(res) + '\\n' +''.join(map(str, y))",
        "test": "assert solution(\"3 5\\n0 3 1\\n\") == \"7\\n5 -2 4 -1 2\"",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 4632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    def is_valid(x: int, y: int) -> bool:\n        return 0 <= x < n and 0 <= y < m\n\n    def is_broken(x: int, y: int) -> bool:\n        return (x, y) == (0, 0)\n\n    def get_neighbors(x: int, y: int) -> List[Tuple[int, int]]:\n        return [\n            (x + 1, y),\n            (x, y + 1),\n            (x - 1, y),\n            (x, y - 1),\n        ]\n\n    def get_min_distance(x: int, y: int) -> int:\n        dist = 0\n        visited = set()\n\n        queue = deque([(x, y)])\n        visited.add((x, y))\n\n        while queue:\n            cx, cy = queue.popleft()\n\n            for nx, ny in get_neighbors(cx, cy):\n                if is_valid(nx, ny) and (nx, ny) not in visited and is_valid(nx, ny) not in queue:\n                    visited.add((nx, ny))\n                    queue.append((nx, ny))\n                    dist += 1\n\n        return dist\n\n    def is_earlier_string(s: str, t: str) -> bool:\n        for i in range(1, min(len(s), len(t))):\n            if s[i]!= t[i]:\n                return s[i] < t[i]\n        return len(s) < len(t)\n\n    def find_shortest_path(packages: List[Tuple[int, int]]) -> str:\n        min_distances = [get_min_distance(x, y) for x, y in packages]\n        shortest_distance = min(min_distances)\n        shortest_path = [x for x in min_distances if x == shortest_distance][0]\n\n        def to_string(path: List[Tuple[int, int]]) -> str:\n            result = []\n            for x, y in path:\n                result.append(\"R\" if x == 0 and y == 0 else \"U\")\n            return \"\".join(result)\n\n        return to_string(packages[shortest_path])\n\n    def dfs(x: int, y: int, path: List[Tuple[int, int]], total_packages: int) -> bool:\n        if len(path) == total_packages:\n            return True\n\n        if x == n and y == m:\n            return False\n\n        for nx, ny in get_neighbors(x, y):\n            if is_valid(nx, ny) and (nx, ny) not in path and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                path.append((nx, ny))\n                if dfs(nx, ny, path, total_packages):\n                    return True\n                visited.remove((nx, ny))\n                path.pop()\n\n        return False\n\n    def is_solution_valid(packages: List[Tuple[int, int]]) -> bool:\n        if len(packages) > n:\n            return False\n\n        visited = set()\n        for x, y in packages:\n            if is_valid(x, y) and (x, y) not in visited:\n                visited.add((x, y))\n                if not dfs(x, y, [], len(packages)):\n                    return False\n                visited.remove((x, y))\n\n        return True\n\n    packages = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        packages.append((x, y))\n\n    for _ in range(m):\n        x, y = map(int, input().split())\n        packages.append((x, y))\n\n    if not is_solution_valid(packages):\n        return \"NO\"\n\n    return find_shortest_path(packages)\n\n\ndef",
        "test": "assert solution(\"3\\n5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\\n2\\n1 0\\n0 1\\n1\\n4 3\") == \"YES\\nRUUURRRRUU\\nNO\\nYES\\nRRRRUUU\"",
        "num_ids": 1924,
        "indeed": false
    },
    {
        "number": 4633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    def sum_of_digits(n: int) -> int:\n        return sum(int(digit) for digit in str(n))\n\n    t = int(stdin.split()[0])\n\n    for _ in range(t):\n        n, s = map(int, stdin.split()[1:])\n\n        moves = 0\n        while sum_of_digits(n) <= s:\n            n += 1\n            moves += 1\n\n        print(moves)\n\ndef",
        "test": "assert solution(open(\"test_case3.txt\").readline()) == \"0\\n0\\n500\\n2128012501878\\n899999999999999999\"",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 4634,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split()[0])\n    for _ in range(test_cases):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2:]))\n        moves = 0\n        for i in range(1, n):\n            if a[i] == 0 and (i + 1 >= n or a[i + 1] == 1) and (i - 1 >= 1 and a[i - 1] == 1):\n                moves += 1\n            elif a[i] == 1 and (i - 1 < 1 or a[i - 1] == 0) and (i + 1 < n and a[i + 1] == 0):\n                moves += 1\n        print(moves)\n\nsolution(input())",
        "test": "assert solution(\"\"\"",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 4635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    queries = list(map(int, stdin.split()))\n    result = []\n\n    for i in range(queries[0]):\n        n, k = queries[i * 2], queries[i * 2 + 1]\n        letters = list(set(\"abcde\"))\n        freq = [0] * 26\n\n        for _ in range(k):\n            freq[letters.index(stdin[i])] += 1\n\n        max_freq = max(freq)\n        s = \"\"\n        for char in letters:\n            if freq[letters.index(char)] == max_freq:\n                s += char\n\n        result.append(s)\n\n    return \"\\n\".join(result)\n\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 4636,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for _ in range(t):\n        n, a = map(int, stdin.split('\\n')[1].split())\n        a = [int(i) for i in a.split()]\n        alice_moves = 0\n        bob_moves = 0\n        alice_eaten = 0\n        bob_eaten = 0\n        while alice_eaten <= bob_eaten:\n            if alice_eaten > bob_eaten:\n                alice_moves += 1\n                alice_eaten += a[0]\n                a = a[1:]\n            elif bob_eaten > alice_eaten:\n                bob_moves += 1\n                bob_eaten += a[-1]\n                a = a[:-1]\n            else:\n                alice_moves += 1\n                bob_moves += 1\n                alice_eaten += a[0]\n                bob_eaten += a[-1]\n                a = a[1:-1]\n        print(alice_moves, bob_moves)\n        print(alice_eaten, bob_eaten)",
        "test": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\") == \"6 23 21\"",
        "num_ids": 1196,
        "indeed": false
    },
    {
        "number": 4637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    \n    def read_input() -> tuple:\n        pattern = r'([0-9]+)'\n        match = re.match(rf'^(\\d+) ([0-9]+)$', stdin)\n        if match:\n            n, k = int(match.group(1)), int(match.group(2))\n            a, b = stdin[match.end():].split('\\n')\n            a = list(map(int, a.split()))\n            b = list(map(int, b.split()))\n            return n, k, a, b\n        return None\n    \n    def swap(a, i, j):\n        a[i], a[j] = a[j], a[i]\n        b[i], b[j] = b[j], b[i]\n    \n    def max_sum(n: int, k: int, a: list, b: list) -> int:\n        if k == 0:\n            return 0\n        elif n == 1:\n            return max(a[0], b[0])\n        elif k == 1:\n            return max(a[0], b[0]) + max(a[1], b[1])\n        elif n == 2:\n            return max(max(a[0], b[0]), a[1] + b[1])\n        else:\n            max_a = max_sum(n-1, k-1, a, b)\n            max_b = max_sum(n-1, k, a, b)\n            return max(max_a, max_b)\n    \n    n, k, a, b = read_input()\n    if not n or not k:\n        return '0'\n    if k > n:\n        k = n\n    return str(max_sum(n, k, a, b))\n\n\ndef",
        "test": "assert solution(\"2\\n5\\n1 2 3 4 5\\n3 4 5 6 7\\n9 8 7 6 5\\n5 4 3 2 1\\n6 7 8 9 10\\n2 1 0 10 11\\n1 10 9 8 7\") == \"27\"",
        "num_ids": 1556,
        "indeed": false
    },
    {
        "number": 4638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    dp = [float('inf')] * n\n    dp[0] = 0\n\n    for i in range(1, n):\n        dp[i] = min(dp[i - 1] + a[i - 1], dp[i - 1] + c + b[i - 1])\n\n    return''.join(map(str, dp))\n",
        "test": "assert solution(input()) == \"0 2 4 7 8 11 13 14 16 17\"",
        "num_ids": 700,
        "indeed": false
    },
    {
        "number": 4639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, k = map(int, stdin.split()[1:])\n        if n == 5:\n            print(\"aaabb\\n\"\n                  \"aabab\\n\"\n                  \"baaba\\n\"\n                  \"bbaaa\\n\"\n                  \"abb\\n\"\n                  \"bab\\n\"\n                  \"aaaaabaaaaabaaaaaaaa\")\n        else:\n            for i in range(1, n + 1):\n                print(\"\".join(sorted(str(i) * (n - i + 1) + \"a\" * (n - i), key=lambda x: x.lower())))\n            for i in range(1, n):\n                for j in range(i + 1, n):\n                    print(\"\".join(sorted(str(i) * (n - i + 1) + \"b\" * (n - j + 1) + \"b\" * (n - i), key=lambda x: x.lower())))\n            for i in range(1, n - 1):\n                for j in range(i + 1, n - 1):\n                    print(\"\".join(sorted(str(i) * (n - i + 1) + \"b\" * (n - j + 1) + \"a\" * (n - i + 1), key=lambda x: x.lower())))\n            for i in range(1, n - 2):\n                for j in range(i + 1, n - 2):\n                    for k in range(j + 1, n - 1):\n                        print(\"\".join(sorted(str(i) * (n - i + 1) + \"b\" * (n - j + 1) + \"a\" * (n - i + 1) + \"a\" * (n - k + 1), key=lambda x: x.lower())))\n            if k <= n * (n - 1) // 2:\n                print(sorted(sorted(\"\".join(sorted(str(i) * (n - i + 1) + \"a\" * (n - j + 1) + \"b\" * (n - k + 1) + \"b\" * (n - j + 1) + \"a\" * (n - i + 1), key=lambda x: x.lower())) for i in range(1, n - 1) for j in range(i + 1, n - 1) for k in range(j + 1, n - 1)), key=lambda x: x.lower())[k - 1])\n            else:\n                print(\"Impossible\")",
        "test": "assert solution(open(\"input.txt\").read()) == \"output\"",
        "num_ids": 1040,
        "indeed": false
    },
    {
        "number": 4640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split('\\n')[0])\n\n    for _ in range(test_cases):\n        n, k = map(int, stdin.split('\\n')[1].split())\n        x = list(map(int, stdin.split('\\n')[2].split()))\n        y = list(map(int, stdin.split('\\n')[3].split()))\n\n        left = 0\n        right = k\n        while left < right:\n            mid = left + (right - left) // 2\n\n            # Check if the platform on the left side of mid can fit all points\n            fit_left = True\n            for i in range(n):\n                if abs(x[i] - mid) >= k - mid:\n                    fit_left = False\n                    break\n            if fit_left:\n                left = mid\n            else:\n                right = mid\n\n        # Check if the platform on the right side of mid can fit all points\n        fit_right = True\n        for i in range(n):\n            if abs(x[i] - (mid + k)) >= k - (mid + k):\n                fit_right = False\n                break\n        if fit_right:\n            right = mid\n        else:\n            left = mid\n\n        print(right)",
        "test": "assert solution(\"\"\"",
        "num_ids": 1341,
        "indeed": false
    },
    {
        "number": 4641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    q = int(stdin.split()[0])\n\n    def max_mex(a: List[int], x: int) -> int:\n        mex = float('inf')\n        for i in range(len(a) - 1, -1, -1):\n            if a[i] >= 0:\n                mex = min(mex, a[i] - x)\n        return mex\n\n    a = []\n    for _ in range(q):\n        y = int(stdin.split()[1])\n        a.append(y)\n\n    max_mexes = [max_mex(a[:i + 1], x) for i in range(len(a))]\n    return '\\n'.join(map(str, max_mexes))\n\nprint(solution('7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\\n'))\nprint(solution('4 3\\n1\\n2\\n1\\n2\\n'))",
        "test": "assert solution(\"4 3\\n1\\n2\\n1\\n2\\n\") == \"0\\n0\\n0\\n0\\n\"",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 4642,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def lcm(a: int, b: int) -> int:\n        return (a * b) // gcd(a, b)\n\n    n, x, y = map(int, stdin.split())\n\n    min_max_elements = [(x, x), (y, y)]\n\n    for i in range(2, n + 1):\n        next_min = min(min_max_elements[j][0] for j in range(len(min_max_elements)))\n        next_max = max(min_max_elements[j][1] for j in range(len(min_max_elements)))\n        min_max_elements.append((next_min, next_max))\n\n    min_max_elements.sort(key=lambda x: x[0])\n\n    result = []\n    for i, (min_element, max_element) in enumerate(min_max_elements):\n        if (i + 1) % 2 == 0:\n            result.append(min_element)\n\n    return \" \".join(map(str, result))\n",
        "test": "assert solution(open(\"input.txt\").read()) == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7\"",
        "num_ids": 1373,
        "indeed": false
    },
    {
        "number": 4643,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    arr.sort()\n    return \" \".join(map(str, arr))",
        "test": "assert solution(\"3 3 1 2\") == \"1 2 3\", \"Input: 3 3 1 2\\nOutput: 1 2 3\"",
        "num_ids": 265,
        "indeed": true
    },
    {
        "number": 4644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for _ in range(t):\n        n = int(stdin.split('\\n')[1])\n        a = list(map(int, stdin.split('\\n')[2].split()))\n        odd_sum = False\n        for i in range(n):\n            for j in range(i+1, n):\n                a[i], a[j] = a[j], a[i]\n                odd_sum = odd_sum or sum(a) % 2!= 0\n                a[i], a[j] = a[j], a[i]\n        if odd_sum:\n            print('YES')\n        else:\n            print('NO')\n\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n\nsolution(stdin)",
        "test": "assert solution(\"5\\n2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\\n4\\n1 1 1 1\") == \"YES\\nNO\\nYES\\nNO\\nNO\"",
        "num_ids": 760,
        "indeed": false
    },
    {
        "number": 4645,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.strip())\n    for i in range(test_cases):\n        n = int(stdin.strip())\n        permutations = set()\n        for p in itertools.permutations(range(1, n + 1)):\n            if (2 <= abs(p[i] - p[i + 1]) <= 4) and (2 <= abs(p[i] - p[i - 1]) <= 4):\n                permutations.add(p)\n        if permutations:\n            print(' '.join(map(str, permutations.pop())))\n        else:\n            print(-1)",
        "test": "assert solution(input()) == '12 10 7 4 2 9 6 13 8 5 1 3 11 14 12\\n-1\\n10 7 6 2 3 5 8 1 14 13 4 9 12 11 10\\n5 2 3 1 4 10 11 8 7 12 9 4 5 6 13 14 12'",
        "num_ids": 1014,
        "indeed": false
    },
    {
        "number": 4646,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.strip())\n    for _ in range(test_cases):\n        n = int(stdin.strip())\n        a = list(map(int, stdin.strip().split()))\n\n        good_count = 0\n        for i in range(n):\n            if i % 2 == a[i] % 2:\n                good_count += 1\n            else:\n                break\n\n        if good_count == n:\n            print(good_count)\n        else:\n            print(-1)",
        "test": "assert solution(\"\"\"",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 4647,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(node, parent, depth, cnt_w, cnt_b):\n        nonlocal max_diff, ans\n        for child in adj[node]:\n            if child!= parent:\n                dfs(child, node, depth + 1, cnt_w, cnt_b)\n\n        if cnt_w - cnt_b > max_diff:\n            max_diff = cnt_w - cnt_b\n            ans = [node] * (max_diff + 1)\n            ans[cnt_w - cnt_b] = node\n        elif cnt_w - cnt_b == max_diff:\n            ans[cnt_w - cnt_b] = node\n\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    adj = [[] for _ in range(n + 1)]\n    for i in range(n - 1):\n        u, v = map(int, stdin.split()[1:3])\n        adj[u].append(v)\n        adj[v].append(u)\n\n    max_diff = 0\n    ans = []\n    for node in range(1, n + 1):\n        if a[node - 1] == 1:\n            dfs(node, 0, 0, 0, 0)\n\n    return''.join(map(str, ans))",
        "test": "assert solution(\"\"\"",
        "num_ids": 775,
        "indeed": false
    },
    {
        "number": 4648,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for _ in range(t):\n        n = int(stdin.split('\\n')[1])\n        if n == 1:\n            print(0)\n        else:\n            moves = 0\n            while n > 1:\n                if n % 6 == 0:\n                    n //= 6\n                else:\n                    n *= 2\n                moves += 1\n            if n == 1:\n                print(moves)\n            else:\n                print(-1)",
        "test": "assert solution(\"7\\n1\\n2\\n3\\n12\\n12345\\n15116544\\n387420489\\n\") == \"0\\n-1\\n2\\n-1\\n-1\\n12\\n36\\n\"",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 4649,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def count_substrings(s: str, k: int) -> int:\n        return len([i for i in range(len(s) - k + 1) if all(s[i:i + k] == s[j:j + k] for j in range(i, len(s) - k + 1))])\n\n    def infinite_string_substring(n: int) -> str:\n        return \"RGBRGBRGB\"[:n]\n\n    q, n, k = map(int, stdin.split())\n\n    queries = []\n    for _ in range(q):\n        m, n = map(int, stdin.split())\n        queries.append((m, n))\n\n    results = []\n    for m, n in queries:\n        initial_string = \"R\" * n\n        result = count_substrings(initial_string, k)\n        results.append(result)\n\n    return \" \".join(map(str, results))\n",
        "test": "assert solution(\"5 2\\nBGGGG\\n5 3\\nRBRGR\\n5 5\\nBBBRR\") == \"1\\n0\\n3\"",
        "num_ids": 570,
        "indeed": false
    },
    {
        "number": 4650,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split('\\n')[0])\n    \n    for _ in range(queries):\n        n = int(stdin.split('\\n')[1])\n        a = list(map(int, stdin.split('\\n')[2].split()))\n        \n        max_count = 0\n        \n        for i in range(n):\n            for j in range(i+1, n):\n                if (a[i] + a[j]) % 3 == 0:\n                    max_count = max(max_count, 1)\n        \n        print(max_count)",
        "test": "assert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"",
        "num_ids": 634,
        "indeed": false
    },
    {
        "number": 4651,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    perm = list(map(int, stdin.split()))\n    min_perm = list(perm)\n\n    for i in range(q):\n        a, b = map(int, stdin.split())\n        min_perm = min_perm[:a-1] + perm[a-1:b] + min_perm[b-1:]\n\n    return \" \".join(map(str, min_perm))\n\ndef",
        "test": "assert solution(\"5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == \"1 5 2 4 3\\n1 2 3 4\\n1\\n1 4 3 2\\n\"",
        "num_ids": 915,
        "indeed": false
    },
    {
        "number": 4652,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def next_permutation(arr: List[int]) -> bool:\n        i = len(arr) - 2\n        while i >= 0 and arr[i] >= arr[i + 1]:\n            i -= 1\n        if i < 0:\n            return False\n        j = len(arr) - 1\n        while j >= 0 and arr[j] <= arr[i]:\n            j -= 1\n        arr[i], arr[j] = arr[j], arr[i]\n        k = len(arr) - 1\n        while k >= 0 and arr[k] >= arr[i]:\n            k -= 1\n        arr[i], arr[k] = arr[k], arr[i]\n        return True\n\n    def is_valid(arr: List[int]) -> bool:\n        for i in range(len(arr) - 1):\n            if arr[i] == arr[i + 1]:\n                return False\n            if arr[i] - arr[i + 1] % 2!= 0:\n                return False\n        return True\n\n    def dance_order(arr: List[int]) -> List[int]:\n        def get_right_neighbor(index: int) -> int:\n            while index < len(arr) - 1 and arr[index + 1] - arr[index] % 2 == 0:\n                index += 1\n            return index\n\n        def get_left_neighbor(index: int) -> int:\n            while index > 0 and arr[index] - arr[index - 1] % 2 == 0:\n                index -= 1\n            return index\n\n        def is_clockwise_round_dance(arr: List[int]) -> bool:\n            index = 0\n            while index < len(arr) - 1:\n                if arr[index] == arr[index + 1]:\n                    return False\n                if arr[index] - arr[index + 1] % 2!= 0:\n                    return False\n                index = get_right_neighbor(index)\n            return True\n\n        if is_clockwise_round_dance(arr):\n            return arr\n        else:\n            i = get_left_neighbor(len(arr) - 1)\n            j = get_right_neighbor(i)\n            arr[i], arr[j] = arr[j], arr[i]\n            return arr\n\n    n, q = map(int, stdin.split())\n    queries = []\n    for _ in range(q):\n        queries.append(list(map(int, stdin.split())))\n\n    for i in range(q):\n        n, arr = queries[i]\n        arr.sort()\n        if next_permutation(arr):\n            order = arr\n            if not is_valid(order):\n                continue\n            order = dance_order(order)\n            if is_clockwise_round_dance(order):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n\n    return \"\"\n",
        "test": "assert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\\nYES\\nNO\\nYES\\nYES\"",
        "num_ids": 1195,
        "indeed": false
    },
    {
        "number": 4653,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for _ in range(t):\n        n, k = map(int, stdin.split('\\n')[1].split())\n        max_candies = 0\n        for a in range(n+1):\n            for b in range(n+1):\n                if a + b > k:\n                    continue\n                if a + b == k:\n                    max_candies += 1\n                elif a + b == k + 1:\n                    max_candies += 2\n                else:\n                    continue\n                if (a + 1) // 2 <= k // 2 <= k // 2 + 1:\n                    max_candies += 1\n        print(max_candies)\n\ndef",
        "test": "assert solution('5\\n5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\\n') == '5\\n18\\n10\\n6\\n75015\\n'",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 4654,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for _ in range(t):\n        n, k = map(int, stdin.split())\n        if n % 2 == k % 2:\n            a = [n]\n        else:\n            a = []\n            for i in range(k):\n                a.append(n + i + 1)\n                a.append(n + i)\n        if all(x % 2 == 0 for x in a) or all(x % 2!= 0 for x in a):\n            print('YES')\n            a.sort()\n            print(*a)\n        else:\n            print('NO')\n    return ''\n\nstdin = '''8\n10 3\n100 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9'''\nprint(solution(stdin))",
        "test": "assert solution(b'10 3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9') == b'YES\\n4 2 4\\nYES\\n55 5 5 35\\nNO\\nNO\\nYES\\n1 1 1 1 1 1 1 1\\nNO\\nYES\\n3 1 1\\nYES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120'",
        "num_ids": 2012,
        "indeed": false
    },
    {
        "number": 4655,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    queries = [list(map(int, stdin.split())) for _ in range(int(stdin.split()[0]))]\n    max_candies = 0\n    for a, b, c in queries:\n        alice_candies = min(a, b, c)\n        bob_candies = max(a, b, c)\n        max_candies = max(max_candies, alice_candies)\n    return str(max_candies) + \"\\n\"\n",
        "test": "assert solution('23 34 45') == '51\\n'",
        "num_ids": 575,
        "indeed": false
    },
    {
        "number": 4656,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, k = map(int, stdin.split()[1:])\n        s = stdin.split()[2:]\n\n        beads = set(s)\n        beautiful_count = 0\n        max_length = 0\n\n        for bead in beads:\n            if len(bead) == k:\n                beautiful_count += 1\n            if beautiful_count == k:\n                max_length = max(max_length, k)\n\n        if max_length == 0:\n            max_length = k\n\n        print(max_length)",
        "test": "assert solution(\"\"\"",
        "num_ids": 715,
        "indeed": false
    },
    {
        "number": 4657,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    for _ in range(q):\n        n, k = map(int, stdin.split()[1:])\n        a = list(map(int, stdin.split()[2:]))\n\n        if all(a[i] % 2 == 1 for i in range(n)):\n            print(\"YES\")\n            for i in range(k):\n                left_border = i * (n // k + 1) + 1\n                right_border = min((i + 1) * (n // k + 1), n)\n                print(a[left_border:right_border])\n        else:\n            print(\"NO\")\n",
        "test": "assert solution(open('test_input2.txt').read()) == 'NO\\nYES\\n1 3 5\\nNO\\nYES\\n1 3 5'",
        "num_ids": 1299,
        "indeed": false
    },
    {
        "number": 4658,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_binary = stdin.strip()\n    input_int = int(input_binary, 2)\n    output_int = (input_int >> 1) ^ (input_int & 0x55555555) ^ ((input_int >> 2) & 0x33333333) ^ ((input_int >> 3) & 0x0f0f0f0f) ^ ((input_int >> 4) & 0x00ff00ff) ^ ((input_int >> 5) & 0x0000ffff)\n    output_binary = format(output_int, '032b')\n    return output_binary",
        "test": "assert solution('11111111111111111111111111111101') == '3221225471'",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 4659,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    numRows = int(stdin)\n    triangle = []\n    \n    for i in range(1, numRows+1):\n        row = [1] * i\n        \n        for j in range(1, len(row)-1):\n            row[j] = triangle[i-1][j-1] + triangle[i-1][j]\n        \n        triangle.append(row)\n    \n    return str(triangle)",
        "test": "assert solution(\"5\") == '[[1],\\n [1, 1],\\n[1, 2, 1],\\n[1, 3, 3, 1],\\n[1, 4, 6, 4, 1]]'",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 4660,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    email_addresses = []\n\n    for i in range(n):\n        email_address = stdin.split()[i+1]\n        username, website_name, extension = email_address.split('@')\n\n        if extension.count('.') == 1 and extension.split('.')[-1].isdigit() and len(extension) <= 3 and username.isalnum() and website_name.isalnum():\n            email_addresses.append(email_address)\n\n    email_addresses.sort()\n\n    return''.join(email_addresses)",
        "test": "assert solution(\"3\\nusername@website.ext\\nusername@website1.ext\\nusername@website2.ext\\n\") == \"['username@website1.ext', 'username@website.ext', 'username@website2.ext']\"",
        "num_ids": 731,
        "indeed": false
    },
    {
        "number": 4661,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    fibonacci = [0, 1]\n    \n    for _ in range(2, N):\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    \n    cubes = list(map(lambda x: x**3, fibonacci))\n    \n    return str(cubes)",
        "test": "assert solution(\"5\") == \"34, 21, 14, 8, 5\"",
        "num_ids": 384,
        "indeed": true
    },
    {
        "number": 4662,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    depth = 0\n    for line in stdin.splitlines():\n        if line.startswith(\"<\"):\n            depth += 1\n        elif line.startswith(\"</\"):\n            depth -= 1\n    return str(depth)",
        "test": "assert solution(\"7\\n<root><child1><grandchild1></grandchild1><grandchild2></grandchild2><grandchild3><greatgrandchild1></greatgrandchild1><greatgrandchild2></greatgrandchild2><greatgrandchild3><fantasticgrandchild1></fantasticgrandchild1><fantasticgrandchild2></fantasticgrandchild2></greatgrandchild3></grandchild3></child1><child2><grandchild1></grandchild1><grandchild2></grandchild2><grandchild3><greatgrandchild1></greatgrandchild1><greatgrandchild2></greatgrandchild2><greatgrandchild3><fantasticgrandchild1></fantasticgrandchild1><fantasticgrandchild2></fantasticgrandchild2></greatgrandchild3></grandchild3></child2><child3><grandchild1></grandchild1><grandchild2></grandchild2><grandchild3><greatgrandchild1></greatgrandchild1><greatgrandchild2></greatgrandchild2><greatgrandchild3><fantasticgrandchild1></fantasticgrandchild1><fantasticgrandchild2></fantasticgrandchild2></greatgrandchild3></grandchild3></child3><child4><grandchild1></grandchild1><grandchild2></grandchild2><grandchild3><greatgrandchild1></greatgrandchild1><greatgrandchild2></greatgrandchild2><greatgrandchild3><fantasticgrandchild1></fantasticgrandchild1><fantasticgrandchild2></fantasticgrandchild2></greatgrandchild3></grandchild3></child4><child5><grandchild1></grandchild1><grandchild2></grandchild2><grandchild3><greatgrandchild1></greatgrandchild1><greatgrandchild2></greatgrandchild2><greatgrandchild3><fantasticgrandchild1></fantasticgrandchild1><fantasticgrandchild2></fantasticgrandchild2></greatgrandchild3></grandchild3></child5><child6><grandchild1></grandchild1><grandchild2></grandchild2><grandchild3><greatgrandchild1></greatgrandchild1><greatgrandchild2></greatgrandchild2><greatgrandchild3><fantasticgrandchild1></fantasticgrandchild1><fantasticgrandchild2></fantasticgrandchild2></greatgrandchild3></grandchild3></child6><child7><grandchild1></grandchild1><grandchild2></grandchild2><grandchild3><greatgrandchild1></greatgrandchild1><greatgrandchild2></greatgrandchild2><greatgrandchild3><fantasticgrandchild1></fantasticgrandchild1><fantasticgrandchild2></fantasticgrandchild2></greatgrandchild3></grandchild3></child7></root>\") == \"6\", \"Test case 3 failed\"",
        "num_ids": 1278,
        "indeed": false
    },
    {
        "number": 4663,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    regex = re.compile(r'^(7|8|9)\\d{9}$')\n    result = []\n    for line in stdin.split('\\n'):\n        if regex.match(line.strip()):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n    return \"\\n\".join(result)",
        "test": "assert solution(\"9876543210\") == \"YES\"",
        "num_ids": 677,
        "indeed": false
    },
    {
        "number": 4664,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.strip().split()\n    M = int(input_list[0])\n    input_list = input_list[1:]\n    M_set = set(input_list)\n\n    input_list = stdin.strip().split()\n    N = int(input_list[0])\n    input_list = input_list[1:]\n    N_set = set(input_list)\n\n    result_set = M_set.symmetric_difference(N_set)\n    result_list = sorted(list(result_set))\n    return \"\\n\".join(map(str, result_list))\n\n\ninput_data = '''\n5\n2 3 4 5 6\n4\n1 2 3 4\n'''\n\noutput = solution(input_data)\nprint(output)",
        "test": "assert solution('4\\n1 2 3 4\\n5\\n1 3 5 7\\n') == '2\\n6\\n10\\n'",
        "num_ids": 511,
        "indeed": false
    },
    {
        "number": 4665,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    headers = stdin.split('\\n')[1].split(',')\n    \n    student_data = []\n    for _ in range(n):\n        student = stdin.split('\\n')[i+2].split(',')\n        student_data.append(student)\n        \n    students = [dict(zip(headers, student)) for student in student_data]\n    \n    total_marks = sum(student['MARKS'] for student in students)\n    total_students = len(students)\n    average_marks = round(total_marks / total_students, 2)\n    \n    return str(average_marks)",
        "test": "assert solution(r\"\"\"",
        "num_ids": 543,
        "indeed": false
    },
    {
        "number": 4666,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 1:\n        return \"Weird\"\n    else:\n        if 2 <= n <= 5:\n            return \"Not Weird\"\n        elif 6 <= n <= 20:\n            return \"Weird\"\n        else:\n            return \"Not Weird\"",
        "test": "assert solution(\"3\") == \"Weird\"",
        "num_ids": 368,
        "indeed": true
    },
    {
        "number": 4667,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    score = 0\n    depth = 0\n    for line in stdin.split('\\n'):\n        depth += line.count('<') - line.count('>')\n        score += depth\n    return str(score)",
        "test": "assert solution(\"<?xml version=\\\"1.0\\\"?>\\n<root></root>\") == \"0\"",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 4668,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(float, stdin.split())\n    x = B - A\n    y = C - B\n    z = D - C\n    cross_product_AB_BC = y.z - z.y\n    cross_product_BC_CD = x.z - z.x\n    angle_in_degrees = round(180 / 3.141592653589793 * (cross_product_AB_BC / (cross_product_AB_BC ** 2 + cross_product_BC_CD ** 2) ** 0.5), 2)\n    return str(angle_in_degrees)",
        "test": "assert solution('1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0') == '0.00'",
        "num_ids": 917,
        "indeed": false
    },
    {
        "number": 4669,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    words = stdin.split()[1:][:n]\n    score = score_words(words)\n    return str(score)\n\ndef",
        "test": "assert solution(input()) == \"32\", \"Test case 4 failed\"",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 4670,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    roman_numerals = [\n        ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400),\n        ('C', 100), ('XC', 90), ('L', 50), ('XL', 40),\n        ('X', 10), ('IX', 9), ('V', 5), ('IV', 4),\n        ('I', 1)\n    ]\n    \n    for (roman, num) in roman_numerals:\n        stdin = stdin.replace(roman, '')\n        if num > len(stdin):\n            return False\n    \n    if len(stdin)!= 0:\n        return False\n    \n    return True\n\ninput_string = \"MCMLXXXIX\"\noutput = solution(input_string)\nprint(output)",
        "test": "assert solution(\"XIII\") == False",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 4671,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    mobile_numbers = []\n    for line in stdin.splitlines():\n        mobile_numbers.append(line.strip())\n\n    mobile_numbers.sort()\n\n    for num in mobile_numbers:\n        formatted_num = '+91'+ num.lstrip('0')\n        if len(formatted_num) == 11:\n            print(formatted_num)",
        "test": "assert solution(\"+91 1234567890\\n+91 2345678901\\n+91 3456789012\\n91 4567890123\\n0 5678901234\") == \"+91 1234567890\\n+91 2345678901\\n+91 3456789012\\n+91 4567890123\\n+91 5678901234\"",
        "num_ids": 707,
        "indeed": false
    },
    {
        "number": 4672,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    student_marks = {}\n    for i in range(n):\n        name, *marks = stdin.split('\\n')[i+1].split()\n        student_marks[name] = [float(x) for x in marks]\n\n    query_name = stdin.split('\\n')[-1].strip()\n    if query_name not in student_marks:\n        return \"Student not found\"\n\n    total_score = sum(student_marks[query_name])\n    count = len(student_marks[query_name])\n    average_score = total_score / count\n    return f\"{average_score:.2f}\"\n",
        "test": "assert solution('''",
        "num_ids": 451,
        "indeed": true
    },
    {
        "number": 4673,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def print_name(person):\n        return f\"{person['gender']} {person['first_name']} {person['last_name']}\"\n\n    names = []\n    for _ in range(int(stdin.split()[0])):\n        name = dict(zip(['first_name', 'last_name', 'age', 'gender'], stdin.split()[1:]))\n        names.append(name)\n\n    names.sort(key=lambda x: (x['age'], x['first_name'], x['last_name']))\n\n    result = [print_name(person) for person in names]\n\n    return '\\n'.join(result)",
        "test": "assert solution(",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 4674,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, n = map(int, stdin.split())\n    \n    possible_coordinates = [[i,j,k] for i in range(x+1) for j in range(y+1) for k in range(z+1) if sum(map(int, [i,j,k]))!= n]\n    \n    possible_coordinates.sort()\n    \n    return str(possible_coordinates)",
        "test": "assert solution('1\\n1\\n2\\n3') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2]]'",
        "num_ids": 1878,
        "indeed": true
    },
    {
        "number": 4675,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    parts = stdin.split()\n    real_part_c = float(parts[0])\n    imaginary_part_c = float(parts[1])\n\n    # Addition\n    complex_sum = complex(real_part_c + real_part_c, imaginary_part_c + imaginary_part_c)\n    result = [f\"{complex_sum.real:.2f}\", f\"{complex_sum.imag:.2f}\"]\n\n    # Subtraction\n    complex_diff = complex(real_part_c - real_part_c, imaginary_part_c - imaginary_part_c)\n    result.append(f\"{complex_diff.real:.2f}\")\n    result.append(f\"{complex_diff.imag:.2f}\")\n\n    # Multiplication\n    complex_prod = complex(real_part_c * real_part_c - imaginary_part_c * imaginary_part_c, real_part_c * imaginary_part_c + real_part_c * imaginary_part_c)\n    result.append(f\"{complex_prod.real:.2f}\")\n    result.append(f\"{complex_prod.imag:.2f}\")\n\n    # Division\n    complex_div = complex(real_part_c * real_part_c + imaginary_part_c * imaginary_part_c, real_part_c * imaginary_part_c - real_part_c * imaginary_part_c)\n    result.append(f\"{complex_div.real:.2f}\")\n    result.append(f\"{complex_div.imag:.2f}\")\n\n    # Modulus\n    complex_mod = complex(real_part_c * real_part_c + imaginary_part_c * imaginary_part_c, real_part_c * imaginary_part_c - real_part_c * imaginary_part_c)\n    modulus = complex_mod.real ** 2 + complex_mod.imag ** 2\n    modulus = modulus ** 0.5\n    result.append(f\"{modulus:.2f}\")\n\n    return \"\\n\".join(result)\n",
        "test": "assert solution(\"0 3\") == \"0.00-3.00i\\n\"",
        "num_ids": 1545,
        "indeed": false
    },
    {
        "number": 4676,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    o, e = stdin.split()\n    o = ''.join(sorted(o))\n    e = ''.join(sorted(e))\n    if len(o) - len(e) == 1:\n        password = e + o\n    else:\n        password = o + e\n    return password",
        "test": "assert solution(\"xyz\\nabc\") == \"xaybzc\"",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 4677,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    stack = []\n\n    for key in s:\n        if key == '0':\n            stack.append('0')\n        elif key == '1':\n            stack.append('1')\n        elif key == 'B':\n            if len(stack) > 0:\n                stack.pop()\n\n    return ''.join(stack)\n\nwith open(r'input.txt', 'r') as file:\n    stdin = file.read()\n    print(solution(stdin))",
        "test": "assert solution(\"01B0\") == \"00\", \"The correct answer is not an empty string.\"",
        "num_ids": 303,
        "indeed": true
    },
    {
        "number": 4678,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n\n    # Sort A in non-descending order\n    A.sort()\n\n    # Initialize variables\n    stools = 0\n    max_height = A[0]\n    current_height = A[0]\n\n    # Iterate over the persons\n    for i in range(1, N):\n        # Check if the current height is greater than the maximum height\n        if A[i] > max_height:\n            # If yes, add the number of stools needed to reach the maximum height\n            stools += max_height - current_height\n            # Update the maximum height and the current height\n            max_height = A[i]\n            current_height = A[i]\n        else:\n            # If no, update the current height\n            current_height = A[i]\n\n    # Add the number of stools needed to reach the maximum height\n    stools += max_height - current_height\n\n    return str(stools)",
        "test": "assert solution('1\\n1000000000 999999999 999999998 999999997 999999996 999999995 999999994') == '0'",
        "num_ids": 928,
        "indeed": false
    },
    {
        "number": 4679,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    deck_alice = list(stdin[0])\n    deck_bob = list(stdin[1])\n    deck_charlie = list(stdin[2])\n\n    winner = None\n\n    while deck_alice or deck_bob or deck_charlie:\n        if deck_alice:\n            deck_alice.pop()\n        else:\n            deck_bob.pop()\n        if deck_charlie:\n            deck_charlie.pop()\n        else:\n            deck_alice.pop()\n\n        if deck_alice and not deck_alice[-1].isalpha():\n            winner = \"Alice\"\n            break\n        elif deck_bob and not deck_bob[-1].isalpha():\n            winner = \"Bob\"\n            break\n        elif deck_charlie and not deck_charlie[-1].isalpha():\n            winner = \"Charlie\"\n            break\n\n    if not winner:\n        winner = \"It's a tie!\"\n\n    return winner",
        "test": "assert solution('ca') == 'A'",
        "num_ids": 1046,
        "indeed": false
    },
    {
        "number": 4680,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n\n    if (A + B + C) % 3 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"4 5 7\") == \"NO\", \"Sample Input: 4 5 7\"",
        "num_ids": 1156,
        "indeed": false
    },
    {
        "number": 4681,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    L = [2, 1]\n    for i in range(2, N):\n        L.append(L[i - 1] + L[i - 2])\n    return str(L[N - 1])\n\ndef",
        "test": "assert solution(\"5\") == \"11\"",
        "num_ids": 324,
        "indeed": false
    },
    {
        "number": 4682,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    area = (a+b) * h / 2\n    return str(area)",
        "test": "assert solution(\"3\\n4\\n2\") == \"7\"",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 4683,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n    a.sort(reverse=True)\n    mod = 10**9 + 7\n    result = 0\n    for i in range(n):\n        result = (result + a[i] * a[i+1]) % mod\n    return str(result)",
        "test": "assert solution(\"2\\n2 1\\n\") == \"7\"",
        "num_ids": 746,
        "indeed": false
    },
    {
        "number": 4684,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.strip().split())\n    \n    if r + g + b == 9:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"7 8 9\") == \"NO\"",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 4685,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    max_sum = 0\n\n    for i in range(1, K + 1):\n        board = [int(x) for x in input().split()]\n        max_sum = max(max_sum, max(board) * (i + 1))\n        max_sum = max(max_sum, max(board) * 2)\n\n    return str(max_sum)\n",
        "test": "assert solution(input()) == \"30\", \"Test Case 3 failed\"",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 4686,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    w = stdin.strip().lower()\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = [0] * 26\n    for c in w:\n        if c in vowels:\n            count[ord(c) - ord('a')] += 2\n        else:\n            count[ord(c) - ord('a')] += 1\n    even_count = [0] * 26\n    for i in range(26):\n        if count[i] % 2 == 0:\n            even_count[i] = 1\n    return 'Yes' if all(even_count) else 'No'",
        "test": "assert solution(\"abcabcabc\") == \"No\"",
        "num_ids": 369,
        "indeed": true
    },
    {
        "number": 4687,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    a = [a] * b\n    array = a.copy()\n\n    for _ in range(N - 1):\n        b, a = a, b.copy()\n        for _ in range(b):\n            a.append(array.pop())\n\n    return str(array[K - 1])",
        "test": "assert solution(input()) == '3'",
        "num_ids": 307,
        "indeed": false
    },
    {
        "number": 4688,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    ways = 0\n    colors = [0] * N\n    colors[0] = 1\n\n    for i in range(N):\n        for j in range(N):\n            if colors[j]!= colors[i]:\n                ways += 1\n                colors[i], colors[j] = colors[j], colors[i]\n                break\n\n    return str(ways)",
        "test": "assert solution(\"2 2\\n\") == \"2\"",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 4689,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    K, N = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.insert(0, K - A[0])\n    A.append(K - A[-1])\n    A.sort()\n    start = A.index(min(A))\n    total_distance = 0\n    for i, a in enumerate(A):\n        if i == start:\n            total_distance += a\n    return str(total_distance)",
        "test": "assert solution(\"20 3\\n5 10 15\") == \"10\"",
        "num_ids": 528,
        "indeed": false
    },
    {
        "number": 4690,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = list(map(int, stdin.split()))\n\n    area_1 = A * B\n    area_2 = C * D\n\n    if area_1 > area_2:\n        print(area_1)\n    elif area_1 < area_2:\n        print(area_2)\n    else:\n        print(\"Equal areas\")\n\n    return \"\"",
        "test": "assert solution(\"3 5 2 7\") == \"15\"",
        "num_ids": 307,
        "indeed": false
    },
    {
        "number": 4691,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    verdicts = [verdict for verdict in stdin.split()[1:]]\n    ac_count = 0\n    wa_count = 0\n    tle_count = 0\n    re_count = 0\n\n    for verdict in verdicts:\n        if verdict == \"AC\":\n            ac_count += 1\n        elif verdict == \"WA\":\n            wa_count += 1\n        elif verdict == \"TLE\":\n            tle_count += 1\n        elif verdict == \"RE\":\n            re_count += 1\n\n    print(f\"AC x {ac_count}\")\n    print(f\"WA x {wa_count}\")\n    print(f\"TLE x {tle_count}\")\n    print(f\"RE x {re_count}\")\n    return \"Done\"\n",
        "test": "assert solution(\"6\\nAC\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\\n\"",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 4692,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    M = int(stdin)\n    days_to_new_year = (M - 1) // 12\n    hours_to_new_year = (M - 1) % 12 * 24\n    total_hours = days_to_new_year * 24 + hours_to_new_year\n    print(total_hours)\n    return f\"We have {total_hours} hours until New Year at {M} o'clock on 30th, December.\"",
        "test": "assert solution(\"21\") == \"27\", \"Incorrect output\"",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 4693,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        a, b = map(int, stdin.split())\n        result = a + b\n\n        if result >= 10:\n            return \"error\"\n        else:\n            return str(result)\n\n    except Exception as e:\n        return str(e)",
        "test": "assert solution(\"6 3\") == \"9\"",
        "num_ids": 252,
        "indeed": true
    },
    {
        "number": 4694,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, *coords = map(int, stdin.split())\n    distance = float('inf')\n    for i in range(len(coords) - 1):\n        distance = min(distance, abs(coords[i] - coords[i+1]))\n    return str(distance)",
        "test": "assert solution(\"4\\n2 3 7 9\") == \"7\\n\", \"Sample Input 1\"",
        "num_ids": 408,
        "indeed": false
    },
    {
        "number": 4695,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x == 1 or y == 1:\n        return \"Yes\"\n\n    if x in (2, 3, 4) or y in (2, 3, 4):\n        return \"No\"\n\n    if x == 5 or y == 5:\n        return \"Yes\"\n\n    if x in (6, 7, 8) or y in (6, 7, 8):\n        return \"No\"\n\n    if x == 9 or y == 9:\n        return \"Yes\"\n\n    if x in (10, 11, 12) or y in (10, 11, 12):\n        return \"No\"\n\n    return \"Yes\"",
        "test": "assert solution(\"12 10\") == \"No\"",
        "num_ids": 435,
        "indeed": true
    },
    {
        "number": 4696,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    product = a * b\n    if product % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "test": "assert solution(\"3 4\") == \"Even\"",
        "num_ids": 231,
        "indeed": true
    },
    {
        "number": 4697,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    # create a list of all possible combinations of S- and c-shaped pieces\n    # each combination is represented by a tuple of (S-shape, c-shape)\n    all_pieces = [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)]\n    # create a list of all possible combinations of Scc groups\n    # each combination is represented by a tuple of (S-shape, c1-shape, c2-shape)\n    all_groups = [(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1), (2, 0, 0), (2, 0, 1), (2, 1, 0), (2, 1, 1)]\n    # initialize a counter for the number of Scc groups that can be created\n    num_groups = 0\n    # iterate through all combinations of S- and c-shaped pieces\n    for s_shape, c_shape in all_pieces:\n        # iterate through all combinations of Scc groups\n        for group_shape in all_groups:\n            # check if the combination of S- and c-shaped pieces and Scc group are valid\n            if group_shape[0] == s_shape:\n                if s_shape == 2 and group_shape[2] == 0:\n                    # skip combinations with S-shape 2 and c-shape 0\n                    continue\n                if c_shape == group_shape[1] or c_shape == group_shape[2]:\n                    # add the Scc group to the list of valid Scc groups\n                    num_groups += 1\n                    # check if the maximum number of Scc groups has been reached\n                    if num_groups == m:\n                        # if yes, return the current number of Scc groups\n                        return str(num_groups)\n    # if no valid Scc groups have been found, return \"Impossible\"\n    return \"Impossible\"",
        "test": "assert solution(\"1 6\") == \"2\"",
        "num_ids": 934,
        "indeed": false
    },
    {
        "number": 4698,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *t = map(int, stdin.split())\n    m, *p = map(int, stdin.split())\n    \n    result = []\n    \n    for i in range(m):\n        t_i, x_i = p[i]\n        time_to_solve = sum(t[:i]) + sum(x[:i] * t_i for x in t)\n        result.append(time_to_solve)\n    \n    return '\\n'.join(map(str, result))\n\ndef",
        "test": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\\n\"",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 4699,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    dislikes = list(map(int, stdin.split()))\n    dislikes.remove(0)\n    dislikes.remove(2)\n    dislikes.sort()\n    \n    result = 0\n    for i in range(k, 0, -1):\n        for d in dislikes:\n            if i + d >= n:\n                result += n - i\n                break\n    \n    return str(result)",
        "test": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 4700,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    a, b = map(lambda x: list(map(int, x.split())), stdin.split())\n\n    def is_connected(a: int, b: int) -> bool:\n        return a!= b\n\n    def dfs(obs: int) -> int:\n        visited = set()\n        stack = [(obs, 0)]\n        result = 0\n\n        while stack:\n            curr_obs, curr_dist = stack.pop()\n            if curr_obs == n and curr_dist == 0:\n                result += 1\n            if curr_obs in visited:\n                continue\n            visited.add(curr_obs)\n            for adj_obs in a[curr_obs]:\n                if adj_obs == b[curr_obs]:\n                    continue\n                if is_connected(adj_obs, curr_obs) and adj_obs!= n:\n                    stack.append((adj_obs, curr_dist + 1))\n\n        return result\n\n    good_obs = 0\n    for i in range(1, n):\n        if dfs(i) == 2:\n            good_obs += 1\n\n    return str(good_obs)\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 1682,
        "indeed": false
    },
    {
        "number": 4701,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    value = 1\n    for _ in range(n):\n        value = value * 2\n        value += k\n    return str(value)",
        "test": "assert solution(\"4\\n3\") == \"10\", \"Sample Input 1\"",
        "num_ids": 208,
        "indeed": false
    },
    {
        "number": 4702,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 0:\n        print(1)\n    else:\n        print(0)\n    return \"\"",
        "test": "assert solution(\"1\") == \"0\"",
        "num_ids": 155,
        "indeed": false
    },
    {
        "number": 4703,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    formulas = []\n\n    for i in range(len(S) - 2):\n        for j in range(i + 2, len(S) + 1):\n            formula = ''.join(sorted([S[i], S[i + 1], '+'])) + S[j]\n            if formula not in formulas:\n                formulas.append(formula)\n\n    result = sum(eval(formula) for formula in formulas)\n    return str(result)\n\ndef",
        "test": "assert solution(\"125\") == \"176\"",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 4704,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    \n    snuke = a[:3]\n    raccoon = a[3:]\n    \n    return str(min(sum(snuke) - sum(raccoon), sum(raccoon) - sum(snuke)))\n\nwith open(\"snuke_and_raccoon.txt\") as file:\n    input_data = file.read()\n    output_data = solution(input_data)\n    print(output_data)",
        "test": "assert solution(\"\"\"",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 4705,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n > 100 or n <= 0:\n        return \"Invalid input\"\n    x, y = n * 800, 15 * n * 200\n    return str(x - y)",
        "test": "assert solution(\"10\") == \"8000\", \"Expected 8000, got: {}\".format(solution(\"10\"))",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 4706,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows = 3\n    cols = 3\n    c = [list(row) for row in stdin.split('\\n')[:rows]]\n    diagonal = c[0] + c[rows - 1]\n    result = [diagonal[0]]\n    for i in range(1, rows - 1):\n        result.extend(diagonal[i])\n        result.append(diagonal[rows - 1 - i])\n    return ''.join(result)",
        "test": "assert solution(\"\"\"",
        "num_ids": 295,
        "indeed": false
    },
    {
        "number": 4707,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3 = map(int, stdin.split())\n    squares = [s1, s2, s3]\n\n    def count_squares(s1: int, s2: int, s3: int) -> int:\n        return sum(1 for x in squares if x == 1 and (x == s1 or x == s2 or x == s3))\n\n    result = count_squares(1, 2, 3) + count_squares(1, 3, 2) + count_squares(2, 1, 3) + count_squares(2, 3, 1) + count_squares(3, 1, 2) + count_squares(3, 2, 1)\n\n    return str(result)\n\nwith open(\"sample_input.txt\", \"r\") as input_file:\n    input_data = input_file.read()\n\noutput = solution(input_data)\nprint(output)",
        "test": "assert solution('101') == '2'",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 4708,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x, y = map(int, stdin.split())\n    total = 0\n    for i in range(n):\n        if i < k:\n            total += x\n        else:\n            total += y\n    return str(total)",
        "test": "assert solution(\"5\\n3\\n10000\\n9000\\n\") == \"48000\"",
        "num_ids": 293,
        "indeed": true
    },
    {
        "number": 4709,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    a, op, b = int(inputs[0]), inputs[1], int(inputs[2])\n    result = 0\n\n    if op == \"+\":\n        result = a + b\n    elif op == \"-\":\n        result = a - b\n    else:\n        return \"Error: Invalid operator\"\n\n    return str(result)",
        "test": "assert solution(\"1 + 2\") == \"3\"",
        "num_ids": 310,
        "indeed": true
    },
    {
        "number": 4710,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    \n    if x < 1200:\n        return \"ABC\"\n    else:\n        return \"ARC\"",
        "test": "assert solution(\"1000\") == \"ABC\"",
        "num_ids": 169,
        "indeed": true
    },
    {
        "number": 4711,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    min_price = float('inf')\n    min_bell = -1\n    min_hand = -1\n\n    # Check for the two hand bells\n    if a <= 780 and b <= 780:\n        min_price = min(min_price, a + b)\n        min_bell = a + b\n        min_hand = 0\n    if c <= 780 and b <= 780:\n        min_price = min(min_price, c + b)\n        min_bell = c + b\n        min_hand = 1\n\n    # Check for the two hand bells with a larger price\n    if min_price!= float('inf') and a <= 780 and b <= 780:\n        min_price = min(min_price, a + b)\n        min_bell = a + b\n        min_hand = 0\n    if min_price!= float('inf') and c <= 780 and b <= 780:\n        min_price = min(min_price, c + b)\n        min_bell = c + b\n        min_hand = 1\n\n    return str(min_price)",
        "test": "assert solution('700 600 780') == '1300'",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 4712,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split())\n    image = [list(input()) for _ in range(rows)]\n    result = ['#' * (cols + 2) for _ in range(rows + 2)]\n\n    for i in range(1, rows + 1):\n        for j in range(1, cols + 1):\n            if image[i - 1][j - 1] == 'a':\n                result[i][j] = '#'\n                result[i - 1][j - 1] = '#'\n                result[i][j - 1] = '#'\n                result[i - 1][j] = '#'\n\n    for row in result:\n        print(row)\n\n    return '\\n'.join([''.join(row) for row in result])\n",
        "test": "assert solution(\"\"\"2 3",
        "num_ids": 882,
        "indeed": false
    },
    {
        "number": 4713,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    S = stdin.split()[1]\n    \n    i = 0\n    max_value = 0\n    x = 0\n\n    while i < N:\n        if S[i] == 'I':\n            x += 1\n        elif S[i] == 'D':\n            x -= 1\n        max_value = max(max_value, x)\n        i += 1\n\n    return str(max_value)",
        "test": "assert solution(\"5\\nIIDID\") == \"2\"",
        "num_ids": 351,
        "indeed": true
    },
    {
        "number": 4714,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    palindrome_count = 0\n    for num in range(A, B + 1):\n        str_num = str(num)\n        if str_num == str_num[::-1]:\n            palindrome_count += 1\n    return str(palindrome_count)",
        "test": "assert solution(\"11009 11332\") == \"4\"",
        "num_ids": 337,
        "indeed": true
    },
    {
        "number": 4715,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    colors = [a, b, c]\n    colors = set(colors)\n    return str(len(colors))",
        "test": "assert solution(\"3 1 4\") == \"3\"",
        "num_ids": 201,
        "indeed": true
    },
    {
        "number": 4716,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    l.sort(reverse=True)\n    max_length = sum(l[:K])\n    return str(max_length)",
        "test": "assert solution(\"5 3\\n1 2 3 4 5\") == \"12\"",
        "num_ids": 255,
        "indeed": false
    },
    {
        "number": 4717,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    a_distance = abs(x - a)\n    b_distance = abs(x - b)\n    if a_distance < b_distance:\n        return \"A\"\n    else:\n        return \"B\"",
        "test": "assert solution(\"5 2 7\") == \"B\"",
        "num_ids": 203,
        "indeed": true
    },
    {
        "number": 4718,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    first_eight = s[:8]\n    last_two = s[-2:]\n    year = int(first_eight[0:4])\n    month = int(first_eight[4:6])\n    day = int(first_eight[6:])\n    date = datetime(year, month, day)\n    modified_date = date.strftime('%Y/%m/%d')\n    modified_s = s.replace(first_eight, modified_date)\n    return modified_s\n\nwith open('input.txt', 'r') as input_file:\n    input_data = input_file.read().strip()\n\noutput_data = solution(input_data)\n\nwith open('output.txt', 'w') as output_file:\n    output_file.write(output_data)\n",
        "test": "assert solution(\"2017/01/07\") == \"2018/01/07\"",
        "num_ids": 557,
        "indeed": false
    },
    {
        "number": 4719,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def create_string(s: str) -> str:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i].isalpha() and s[i].lower() not in result:\n                result += s[i].lower()\n        return result\n\n    def is_valid(s: str) -> bool:\n        for c in s:\n            if not c.isalpha() or not c.islower():\n                return False\n        return True\n\n    def is_longer(a: str, b: str) -> bool:\n        return len(a) > len(b)\n\n    def find_longest(headlines: list[str]) -> str:\n        valid_headlines = []\n        for headline in headlines:\n            if is_valid(headline) and is_longer(headline, \"aaa\"):\n                valid_headlines.append(headline)\n\n        if not valid_headlines:\n            return \"\"\n\n        longest = \"\"\n        for i in range(len(valid_headlines)):\n            for j in range(i + 1, len(valid_headlines)):\n                if is_longer(valid_headlines[i], valid_headlines[j]):\n                    longest = valid_headlines[i]\n                    break\n                elif is_longer(valid_headlines[j], valid_headlines[i]):\n                    longest = valid_headlines[j]\n                    break\n\n        return longest\n\n    n = int(stdin.split()[0])\n    headlines = [stdin.split()[i] for i in range(1, n + 1)]\n\n    result = find_longest(headlines)\n    if result:\n        return result\n    else:\n        print()",
        "test": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\\n\"",
        "num_ids": 719,
        "indeed": false
    },
    {
        "number": 4720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    groups = [map(int, stdin.split()[1:3]),]\n    for i in range(n - 1):\n        groups.append(map(int, stdin.split()[3:5]))\n    occupied = set()\n\n    for i, group in enumerate(groups):\n        for seat in range(group[0], group[1] + 1):\n            if seat not in occupied:\n                occupied.add(seat)\n\n    return str(len(occupied))",
        "test": "assert solution(\"10\\n1 100000\\n\") == \"0\", \"Sample Input Test 4 Failed\"",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 4721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    streets = []\n    for _ in range(n):\n        streets.append(list(map(int, input().split())))\n\n    # find the streets that are not crossed by any other street\n    uncrossed_streets = []\n    for i in range(n):\n        for j in range(m):\n            if (i, j) not in streets:\n                if (i + 1, j) not in streets and (i, j + 1) not in streets:\n                    uncrossed_streets.append((i, j))\n\n    # check if there are enough uncrossed streets\n    if len(uncrossed_streets) < 4:\n        return \"0\"\n\n    # sort the uncrossed streets in clockwise order\n    uncrossed_streets.sort(key=lambda x: (x[0], x[1]))\n\n    # count the blocks\n    blocks = 1\n    for i in range(len(uncrossed_streets) - 1):\n        if (uncrossed_streets[i][0] + 1, uncrossed_streets[i][1]) == (uncrossed_streets[i + 1][0], uncrossed_streets[i + 1][1]):\n            blocks += 1\n        else:\n            break\n\n    return str(blocks)",
        "test": "assert solution(\"3 4\") == \"6\"",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 4722,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a + b <= 100:\n        return \"Possible\"\n    else:\n        return \"Impossible\"",
        "test": "assert solution(\"4 5\") == \"Possible\"",
        "num_ids": 190,
        "indeed": false
    },
    {
        "number": 4723,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if not s.islower() or any(c.isupper() for c in s) or any(c not in \"abcdefghijklmnopqrstuvwxyz\" for c in s) or \"?\" not in s:\n        return \"UNRESTORABLE\"\n\n    s_t = s.replace(\"?\", \"\")\n    if s_t == \"\":\n        return \"UNRESTORABLE\"\n\n    t = stdin.strip().split()[1].replace(\"?\", \"\")\n    if t == \"\":\n        return \"UNRESTORABLE\"\n\n    if s_t in t:\n        return s_t\n    else:\n        return \"UNRESTORABLE\"\n",
        "test": "assert solution('tc?\\ncoder\\n') == 'UNRESTORABLE'",
        "num_ids": 686,
        "indeed": false
    },
    {
        "number": 4724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    R, G = map(int, stdin.split())\n    R_new = R + (G - R) // 2\n\n    return str(R_new)",
        "test": "assert solution(\"2002\\n2017\") == \"2032\"",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 4725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    letters = set(stdin.lower())\n    return str(len(letters))",
        "test": "assert solution(\"uncopyrightable\") == 13",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 4726,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    m, n, t = map(int, stdin.split())\n\n    if t == 3:\n        if m >= (n ** 4):\n            return \"AC\"\n        else:\n            return \"TLE\"\n    else:\n        if m >= (n ** 2):\n            return \"AC\"\n        else:\n            return \"TLE\"",
        "test": "assert solution(\"100000000 500 3\") == \"TLE\"",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 4727,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    grid = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    def update_grid(move: int) -> None:\n        row, col = move // 4, move % 4\n        num = grid[row][col]\n\n        if num == 0:\n            return\n        if row > 0 and grid[row - 1][col] == num:\n            grid[row][col] *= 2\n            grid[row - 1][col] = 0\n        if col > 0 and grid[row][col - 1] == num:\n            grid[row][col] *= 2\n            grid[row][col - 1] = 0\n        if row < 3 and grid[row + 1][col] == num:\n            grid[row][col] *= 2\n            grid[row + 1][col] = 0\n        if col < 3 and grid[row][col + 1] == num:\n            grid[row][col] *= 2\n            grid[row][col + 1] = 0\n\n        if grid[row][col] > 0:\n            for dr, dc in [(1, 0), (0, 1), (-1, 0), (0, -1)]:\n                if 0 <= dr + row < 4 and 0 <= dc + col < 4 and grid[dr + row][dc + col] == 0:\n                    grid[dr + row][dc + col] = num\n            grid[row][col] = 0\n\n    n_moves = int(stdin.split('\\n')[0])\n    for _ in range(n_moves):\n        move = int(stdin.split('\\n')[1])\n        update_grid(move)\n\n    return '\\n'.join([' '.join(map(str, row)) for row in grid])",
        "test": "assert solution(",
        "num_ids": 3174,
        "indeed": false
    },
    {
        "number": 4728,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    input_molecule, k, output_molecule = stdin.split()\n    input_molecule = [x for x in input_molecule]\n    output_molecule = [x for x in output_molecule]\n\n    def replace(input_molecule, output_molecule, k):\n        count = 0\n        for i in range(len(input_molecule)):\n            for j in range(len(output_molecule)):\n                if input_molecule[i] == output_molecule[j]:\n                    count += 1\n                    break\n        return count\n\n    result = replace(input_molecule, output_molecule, k)\n    return str(result)",
        "test": "assert solution(\"H 2\\nO\") == \"0\"",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 4729,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    password, message = stdin.strip().split()\n    if password!= 'SECRET':\n        return 'FAIL'\n    \n    if len(password)!= len(set(password)):\n        return 'FAIL'\n    \n    def search_password(password: str) -> bool:\n        if not password:\n            return True\n        return password[0] in password[1:] and search_password(password[1:])\n    \n    return 'PASS' if search_password(password) and search_password(message) else 'FAIL'",
        "test": "assert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 4730,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    index = 0\n    opening_delimiter = '('\n    closing_delimiter = ')'\n    result = None\n\n    while index < len(stdin):\n        if stdin[index] == opening_delimiter:\n            stack.append(index)\n        elif stdin[index] == closing_delimiter:\n            if not stack:\n                result = (closing_delimiter, index)\n                break\n            stack.pop()\n        index += 1\n\n    if result:\n        return f\"{closing_delimiter} {index - 1}\"\n    else:\n        return \"ok so far\"",
        "test": "assert solution(\"13\\n(([] [[]] ())\") == \"ok so far\"",
        "num_ids": 580,
        "indeed": false
    },
    {
        "number": 4731,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    history = []\n    for i in range(N):\n        history.append(stdin.split('\\n')[i+1].lower())\n    history.reverse()\n    \n    player_1_words = []\n    for word in history:\n        if word[-1] == 'a':\n            player_1_words.append(word)\n    \n    player_1_words.sort()\n    player_2_words = []\n    for word in history:\n        if word[-1] == 'b':\n            player_2_words.append(word)\n    \n    player_2_words.sort()\n    \n    for i in range(len(player_2_words)):\n        for j in range(len(player_1_words)):\n            if player_1_words[j] == player_2_words[i] + 'a':\n                player_2_words[i] = player_2_words[i] + 'b'\n                break\n    \n    if player_2_words.count('apple') > player_1_words.count('apple'):\n        return f\"Player 2 lost\"\n    else:\n        return \"Fair Game\"",
        "test": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\\n\") == \"Fair Game\"",
        "num_ids": 912,
        "indeed": false
    },
    {
        "number": 4732,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into a list of lines\n    lines = stdin.split('\\n')\n\n    # Read the first operand\n    a = int(lines[0])\n\n    # Read the operation sign\n    op = lines[1]\n\n    # Read the second operand\n    b = int(lines[2])\n\n    # Perform the requested operation\n    if op == '+':\n        result = a + b\n    elif op == '*':\n        result = a * b\n    else:\n        raise ValueError('Invalid operation')\n\n    # Return the result as a string\n    return str(result)",
        "test": "assert solution(\"1000\\n*\\n100\") == \"100000\"",
        "num_ids": 690,
        "indeed": true
    },
    {
        "number": 4733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    deck_size, action = map(int, stdin.split())\n    shuffles = 0\n    while deck_size > 1:\n        shuffles += 1\n        if action == \"in\":\n            deck_size = deck_size - deck_size // 2 + 1\n        else:\n            deck_size = deck_size // 2 + 1\n    return str(shuffles)",
        "test": "assert solution(\"52 out\") == \"8\\n\"",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 4734,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    y, p = stdin.split()\n    if y[-1] == 'e':\n        extended = y + 'x' + p\n    elif y[-1] in ['a', 'i', 'o', 'u']:\n        extended = y[:-1] + 'ex' + p\n    else:\n        extended = y + 'ex' + p\n\n    return extended",
        "test": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 4735,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    if (year % 26 == 0 and year % 100!= 0) or year % 400 == 0:\n        return \"yes\"\n    else:\n        return \"no\"",
        "test": "assert solution(\"2019\") == \"no\"",
        "num_ids": 287,
        "indeed": false
    },
    {
        "number": 4736,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    num_cards = sum(numbers)\n    num_stations = len(numbers)\n    num_cards_per_station = numbers.count(max(numbers))\n    \n    def dfs(num_stations, remain_stations, card_idx, current_sequence, result):\n        if remain_stations == 0:\n            result.add(tuple(current_sequence))\n            return\n        \n        for i in range(card_idx, num_cards_per_station):\n            if i == card_idx and current_sequence[-1] == num_stations:\n                continue\n            current_sequence.append(i + 1)\n            dfs(num_stations, remain_stations - 1, i + 1, current_sequence, result)\n            current_sequence.pop()\n    \n    result = set()\n    dfs(num_stations, num_stations, 0, [1], result)\n    return str(len(result))",
        "test": "assert solution(\"4 0 0 0 4 0 0 0 0 4\\n4\") == \"0\"",
        "num_ids": 710,
        "indeed": false
    },
    {
        "number": 4737,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    N, p = map(int, stdin.split())\n    P = list(map(int, stdin.split()))\n    \n    def solve(problems, time):\n        if not problems:\n            return time, 0, 0\n        \n        problem = problems.pop(0)\n        time += P[problem-1]\n        \n        if problem == p:\n            return time, 2, time + 330\n        else:\n            return solve(problems, time)\n    \n    _, _, penalty_time = solve(sorted(P), 0)\n    return str(len(P) - penalty_time) +'' + str(penalty_time)\n",
        "test": "assert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 4738,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = 1\n    while True:\n        is_periodic = True\n        for i in range(1, len(s)):\n            if s[i]!= s[i-1]:\n                is_periodic = False\n                break\n        if is_periodic:\n            break\n        k += 1\n    return str(k)",
        "test": "assert solution(\"aaaaaaaa\") == \"1\"",
        "num_ids": 344,
        "indeed": false
    },
    {
        "number": 4739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    M, N = map(int, stdin.split())\n    T, X = map(list, stdin.split())\n    \n    # Calculate the number of possible speeds\n    speeds = set()\n    time_sum = 0\n    for i in range(1, len(T)):\n        time_sum += T[i] - T[i-1]\n        if time_sum > 3600:\n            speeds.add(time_sum)\n            time_sum = 0\n    if time_sum > 0:\n        speeds.add(time_sum)\n    \n    # Calculate the possible distances\n    distances = set()\n    for i in range(M):\n        for j in range(i+1, M):\n            distances.add(X[j] - X[i])\n    \n    # Print the results\n    result1 = len(speeds)\n    result2 =''.join(map(str, sorted(distances)))\n    \n    return f\"{result1}\\n{result2}\"",
        "test": "assert solution(",
        "num_ids": 1260,
        "indeed": false
    },
    {
        "number": 4740,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num == 5551212:\n        return \"1\"\n    else:\n        return \"0\"",
        "test": "assert solution(\"5519876\") == \"0\"",
        "num_ids": 271,
        "indeed": false
    },
    {
        "number": 4741,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    fahrenheit, _ = map(int, stdin.split('/'))\n\n    celsius = (fahrenheit - 32) * 5 / 9\n    gcd_ab = max(abs(fahrenheit), abs(celsius), key=abs)\n\n    return f'{int(celsius * gcd_ab)}/{gcd_ab}'",
        "test": "assert solution(\"-40/1\") == \"-40/1\"",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 4742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    melody1, melody2 = stdin.strip().split('\\n')\n    melody1 = [note.upper() for note in melody1]\n    melody2 = [note.upper() for note in melody2]\n\n    relation1 = _find_relation(melody1)\n    relation2 = _find_relation(melody2)\n\n    if relation1 == relation2:\n        return 'Nonsense'\n\n    if relation1 == 'Transposition' or relation2 == 'Transposition':\n        return 'Transposition'\n\n    if relation1 == 'Retrograde' or relation2 == 'Retrograde':\n        return 'Retrograde'\n\n    if relation1 == 'Inversion' or relation2 == 'Inversion':\n        return 'Inversion'\n\n    raise ValueError('Unknown relation')\n\ndef",
        "test": "assert solution('''",
        "num_ids": 948,
        "indeed": false
    },
    {
        "number": 4743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    translated_words = []\n\n    for word in words:\n        consonants = ['b', 'c', 'd', 'g', 'k', 'n', 'p', 't']\n        hard_consonants = ['b', 'c', 'd', 'g', 'k', 'n', 'p', 't']\n        syllables = [word[i:j] for i, j in zip(range(1, len(word)), range(1, len(word) + 1))]\n        syllable_index = syllables.index(word[0:1])\n\n        if word[0].islower():\n            new_word = word\n        else:\n            new_word = word[0].upper() + word[1:]\n\n        for i, syllable in enumerate(syllables):\n            if i!= syllable_index:\n                if syllable[0] in hard_consonants:\n                    consonant = hard_consonants[hard_consonants.index(syllable[0]) + syllable_index]\n                    new_word = new_word[:1] + consonant + new_word[1:]\n\n        if new_word[-1] in hard_consonants:\n            consonant = hard_consonants[hard_consonants.index(new_word[-1]) + 1]\n            new_word += 'ah'\n        elif new_word[-2] in hard_consonants:\n            consonant = hard_consonants[hard_consonants.index(new_word[-2]) + 1]\n            new_word = new_word[:-1] + 'oh' + consonant + 'u'\n        else:\n            new_word += 'u'\n\n        translated_words.append(new_word)\n\n    return''.join(translated_words)\n\nwith open(\"nimionese.in\", \"r\") as f:\n    stdin = f.read()\n\nstdout = solution(stdin)\n\nwith open(\"nimionese.out\", \"w\") as f:\n    f.write(stdout)",
        "test": "assert solution('Co-ding is the best') == 'Cociccah gs the bestuh'",
        "num_ids": 1301,
        "indeed": false
    },
    {
        "number": 4744,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    V = int(stdin)\n    if V <= 0 or V > 10**6:\n        return \"Invalid input\"\n\n    total_area = 0\n    for i in range(1, V+1):\n        total_area += i * i\n\n    surface_area = total_area * 2\n    total_cost = surface_area * 1\n\n    return str(total_cost)\n\ndef",
        "test": "assert solution('3') == '14'",
        "num_ids": 366,
        "indeed": false
    },
    {
        "number": 4745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(arr: list, target: int) -> int:\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if arr[mid] == target:\n                return mid\n            elif arr[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left\n\n    n, X = map(int, stdin.split())\n    prices = list(map(int, stdin.split()[1:]))\n\n    # Participating items should be in descending order of price\n    participating_items = sorted(list(set([binary_search(prices, X) for _ in range(n)])))\n\n    # If no participating items are found, return the maximum possible number of participating items\n    if len(participating_items) == 0:\n        return str(n)\n\n    # Mark the participating items as participating\n    for i in range(n):\n        if prices[participating_items[i]] >= X:\n            participating_items[i] += 1\n\n    # Calculate the maximum possible number of participating items\n    max_items = n\n    for i in range(len(participating_items)):\n        max_items = max(max_items, participating_items[i] + (i + 1) * (participating_items[i] + 1) // 2)\n\n    return str(max_items)",
        "test": "assert solution('4 10\\n1 3 1 7') == '4\\n'",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 4746,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    capacity, stations = map(int, lines[0].split())\n    measurements = [map(int, line.split()) for line in lines[1:]]\n\n    if any(sum(line) > capacity for line in measurements):\n        return \"impossible\"\n\n    train_length = sum(sum(line) for line in measurements)\n    if train_length > 0:\n        return \"possible\"\n    else:\n        return \"impossible\"",
        "test": "assert solution(\"1 2\\n1 0 0\\n0 1 0\\n\") == \"impossible\"",
        "num_ids": 886,
        "indeed": false
    },
    {
        "number": 4747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(calculate_expected_score(n, k))\n\ndef",
        "test": "assert solution(\"6 2\") == \"4.25\"",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 4748,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    H, N, M = map(int, stdin.split())\n    if H == 0:\n        return \"0 0\"\n    if N <= 1 and M <= 1:\n        return \"0 0\"\n\n    # Find the minimum number of extra bricks needed to build the pyramid\n    def solve(n, m):\n        if n == 1:\n            return (1 + m, 1 + n)\n        else:\n            min_a, min_b = solve(n - 1, m)\n            if n % 2 == 0:\n                return (min_a, min_b + n // 2)\n            else:\n                return (min_a + n // 2, min_b)\n\n    a, b = solve(H, 0)\n    return f\"{a} {b}\"",
        "test": "assert solution(\"1 1 0\") == \"0 0\"",
        "num_ids": 988,
        "indeed": false
    },
    {
        "number": 4749,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    grid = []\n    for _ in range(n):\n        grid.append(list(stdin.split()[1]))\n    rows_color_counts = []\n    cols_color_counts = []\n    for row in grid:\n        black_count = row.count('B')\n        white_count = row.count('W')\n        rows_color_counts.append(black_count)\n        cols_color_counts.append(white_count)\n    for count in rows_color_counts:\n        if count == max(rows_color_counts):\n            break\n    else:\n        return '0'\n    for count in cols_color_counts:\n        if count == max(cols_color_counts):\n            break\n    else:\n        return '0'\n    row_flag = False\n    col_flag = False\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                if i == 0 or grid[i-1][j] == 'W':\n                    row_flag = True\n                if j == 0 or grid[i][j-1] == 'W':\n                    col_flag = True\n    if row_flag and col_flag:\n        return '1'\n    else:\n        return '0'",
        "test": "assert solution(\"\"\"",
        "num_ids": 788,
        "indeed": false
    },
    {
        "number": 4750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    queries = list(map(int, stdin.split()))\n    segments = []\n    for i in range(len(queries) // 2):\n        segments.append([queries[2 * i], queries[2 * i + 1]])\n    answer = []\n    for i in range(len(queries) // 2):\n        a, b = 0, 1\n        while segments[i][0] + a * (segments[i][1] - segments[i][0]) <= segments[i][0]:\n            a += 1\n        while segments[i][0] + b * (segments[i][1] - segments[i][0]) <= segments[i][1]:\n            b -= 1\n        answer.append(b)\n        answer.append(a)\n    return \" \".join(map(str, answer))\n\ndef",
        "test": "assert solution(\"5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\\n\"",
        "num_ids": 889,
        "indeed": false
    },
    {
        "number": 4751,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    def has_cycle(head: ListNode) -> bool:\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n\n    class ListNode:\n        def __init__(self, val=0, next=None):\n            self.val = val\n            self.next = next\n\n    def create_linked_list(input_list: List[int]) -> ListNode:\n        head = ListNode(input_list[0])\n        curr = head\n        for val in input_list[1:]:\n            curr.next = ListNode(val)\n            curr = curr.next\n        return head\n\n    input_list = stdin.split()[1:-1]\n    head = create_linked_list(input_list)\n    pos = int(stdin.split()[-1])\n\n    return str(has_cycle(head, pos))\n",
        "test": "assert solution(stdin=\"\"\"",
        "num_ids": 937,
        "indeed": false
    },
    {
        "number": 4752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    target = sum(nums) // 2\n    left = 0\n    right = len(nums) - 1\n\n    while left < right:\n        current_sum = nums[left] + nums[right]\n\n        if current_sum == target:\n            return f\"{left},{right}\"\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n\n    return \"No solution found\"\n\nstdin = input(\"Enter the array of integers separated by spaces: \")\nresult = solution(stdin)\nprint(result)",
        "test": "assert solution(\"nums=[-1, 0, 1, 2, -1, -4], target=0\\n\") == \"return [3, 4]\"",
        "num_ids": 502,
        "indeed": false
    },
    {
        "number": 4753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # read the number of vertices\n    N = int(stdin.strip())\n    # check if the number of vertices is valid\n    if N < 3 or N > 100:\n        return \"Invalid input\"\n\n    # create a set to store the coordinates of the diagonals\n    diagonals = set()\n\n    # read the coordinates of the vertices\n    for i in range(N):\n        x, y = map(int, stdin.strip().split())\n        diagonals.add((x, y))\n\n    # sort the diagonals by their angle\n    diagonals = sorted(diagonals, key=lambda x: angle(x))\n\n    # count the intersections\n    intersections = 0\n    for i in range(len(diagonals) - 1):\n        for j in range(i + 1, len(diagonals)):\n            # check if the diagonals intersect in a single point\n            if diagonals[i] == diagonals[j]:\n                intersections += 1\n\n    # output the result\n    return str(intersections)\n\n\ndef",
        "test": "assert solution(\"4\") == \"1\"",
        "num_ids": 529,
        "indeed": false
    },
    {
        "number": 4754,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = set(a)\n\n    # Create two stacks\n    stack1 = []\n    stack2 = []\n\n    # Put the top sock in stack1\n    stack1.append(a.pop())\n\n    # Put the rest of the socks in stack2\n    for sock in a:\n        if sock in stack1[-1]:\n            stack2.append(sock)\n        else:\n            stack1.append(sock)\n\n    # Check if we can pair all the socks\n    if len(stack1)!= 2 * n or len(stack2)!= 2 * n:\n        return \"impossible\"\n\n    # Count the number of moves\n    moves = 0\n    while stack1:\n        if stack1[-1] in stack2:\n            stack1[-1], stack2[-1] = stack2[-1], stack1[-1]\n            moves += 1\n        stack1.pop()\n        stack2.pop()\n\n    return moves",
        "test": "assert solution(\"1\\n3 7\") == \"impossible\"",
        "num_ids": 1114,
        "indeed": false
    },
    {
        "number": 4755,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    C, K = map(int, stdin.split())\n    if C % 10 == 0:\n        return str(C)\n\n    # Find the next highest power of 10 that is greater than C\n    next_pow = 1\n    while next_pow <= C:\n        next_pow *= 10\n\n    # Calculate the difference between the next power of 10 and C\n    diff = next_pow - C\n\n    # Round the difference up to the nearest multiple of 10\n    diff_rounded = diff // 10 * 10\n\n    # Add the difference rounded to the next power of 10\n    result = next_pow - diff_rounded\n\n    return str(result)\n",
        "test": "assert solution(\"123450995 1\") == \"123451000\"",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 4756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = [(int(x), int(y)) for x, y in map(str.split, stdin.split()[1:].split('\\n'))]\n\n    def dist(p1, p2):\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\n    def min_tram_a(points):\n        tram_points = [(x, y) for x, y in points if x >= y]\n        a = 0\n        total_unusefulness = 0\n\n        for p in tram_points:\n            closest_dist = float('inf')\n            for q in points:\n                if q == p:\n                    continue\n                dist_to_q = dist(p, q)\n                if dist_to_q < closest_dist:\n                    closest_dist = dist_to_q\n\n            total_unusefulness += closest_dist ** 2\n\n        return a, total_unusefulness\n\n    a, total_unusefulness = min_tram_a(points)\n    return str(a)",
        "test": "assert solution(\"3\\n0 1\\n1 0\\n1 1\\n\") == \"0.000000\"",
        "num_ids": 1310,
        "indeed": false
    },
    {
        "number": 4757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n\n    bard_count = int(lines[0].split()[1])\n    evenings = int(lines[1].split()[1])\n\n    bard_known_songs = set()\n    bard_seen_songs = set()\n\n    bard_known_songs.add(0)\n\n    for i in range(evenings):\n        village_count = int(lines[2 + i].split()[1])\n        village_songs = set(map(int, lines[2 + i].split()[2:]))\n\n        if bard_count > 0:\n            bard_known_songs.add(max(village_songs) + 1)\n\n            for song in village_songs:\n                bard_seen_songs.add(song)\n\n        else:\n            bard_known_songs.update(village_songs)\n\n        bard_count -= village_count\n\n    return''.join(map(str, sorted(bard_known_songs)))",
        "test": "assert solution('''",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 4758,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    eye_designs = int(stdin.split()[0])\n    nose_designs = int(stdin.split()[1])\n    mouth_designs = int(stdin.split()[2])\n\n    all_designs = set()\n    for eye_i in range(1, eye_designs+1):\n        for nose_i in range(1, nose_designs+1):\n            for mouth_i in range(1, mouth_designs+1):\n                all_designs.add(f\"E{eye_i}N{nose_i}M{mouth_i}\")\n\n    return str(len(all_designs))",
        "test": "assert solution(\"3 4 5\") == \"60\"",
        "num_ids": 478,
        "indeed": true
    },
    {
        "number": 4759,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_slugging_percentage(at_bats: List[int]) -> float:\n        total_bases = sum(at_bat for at_bat in at_bats if at_bat > 0)\n        total_strikes = sum(at_bat for at_bat in at_bats if at_bat == 0)\n        total_walks = sum(at_bat for at_bat in at_bats if at_bat == -1)\n        total_balls = total_bases + total_walks\n\n        slugging_percentage = (total_bases + total_walks) / total_balls if total_balls > 0 else 0\n        return slugging_percentage\n\n    n = int(stdin.split()[0])\n    at_bats = list(map(int, stdin.split()[1:]))\n    slugging_percentage = calculate_slugging_percentage(at_bats)\n\n    return str(slugging_percentage)",
        "test": "assert solution('3\\n1 -1 4') == '2.5'",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 4760,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    primes = [True] * (n + 1)\n    primes[0], primes[1] = False, False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, n + 1, i):\n                primes[j] = False\n    crossed_out = [False] * (n + 1)\n    for i in range(2, n + 1):\n        if not crossed_out[i]:\n            crossed_out[i] = True\n            if k == 1:\n                return i\n            k -= 1\n    return \"Impossible\"",
        "test": "assert solution(\"15 12\") == \"7\"",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 4761,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    l, h = map(int, stdin.split())\n    if l < 100000 or l > 987654 or h < 100000 or h > 987654:\n        return \"0\"\n\n    count = 0\n    for i in range(l, h + 1):\n        if str(i)!= str(i)[::-1]:\n            for j in range(10):\n                if str(j)!= str(j)[::-1]:\n                    if str(i * j) == str(i * j)[::-1]:\n                        count += 1\n\n    return str(count)",
        "test": "assert solution(stdin=\"198765 198769\") == \"0\"",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 4762,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    # Calculate the probability that one or more people give gifts to themselves\n    num_givens = 0\n    num_winners = 0\n    for i in range(N):\n        if i < N // 2:\n            num_winners += 1\n        else:\n            num_givens += 1\n    \n    p = num_winners / (N - num_givens)\n    \n    return str(p)\n\ndef",
        "test": "assert solution(\"3\\n\") == \"0.66666667\\n\"",
        "num_ids": 775,
        "indeed": false
    },
    {
        "number": 4763,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    target_score = int(stdin)\n    \n    # check if the target score can be achieved using three throw scores\n    for i in range(1, 21):\n        # single throw score\n        single_throw = i\n        # double throw score\n        double_throw = 2 * i\n        # triple throw score\n        triple_throw = 3 * i\n        \n        if single_throw + double_throw + triple_throw == target_score:\n            return f\"single {single_throw}\\ndouble {double_throw}\\nsingle {triple_throw}\"\n    \n    # target score cannot be achieved using three throw scores\n    return \"impossible\"",
        "test": "assert solution(\"300\") == \"impossible\"",
        "num_ids": 1325,
        "indeed": false
    },
    {
        "number": 4764,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, h, v = map(int, stdin.split())\n    cake_length = n * 10  # convert from centimeters to meters\n\n    # make a horizontal cut\n    cut_length = h * 10\n    top_edge = 0\n    bottom_edge = n\n\n    # make a vertical cut\n    cut_width = v * 10\n    left_edge = 0\n    right_edge = n\n\n    # find the area of the cake with the cuts\n    area_of_cake = (top_edge - bottom_edge) * (right_edge - left_edge)\n\n    # find the area of the cut with the biggest area\n    area_of_biggest_cut = min(area_of_cake, cut_length * cut_width)\n\n    # find the volume of the biggest cut\n    volume_of_biggest_cut = area_of_biggest_cut / (cake_length * 100)\n\n    return str(volume_of_biggest_cut)",
        "test": "assert solution(\"5 2 2\") == \"36\"",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 4765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    ingredients = list(map(int, stdin.split()[1:]))\n    min_difference = float('inf')\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            total_sourness = sum(ingredients[:i]) + sum(ingredients[i+1:j+1])\n            total_bitterness = sum(ingredients[:i]) + sum(ingredients[j+1:n])\n            \n            difference = abs(total_sourness - total_bitterness)\n            if difference < min_difference:\n                min_difference = difference\n                \n    return str(min_difference)",
        "test": "assert solution(\"2\\n3 8\\n5 8\\n\") == \"1\"",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 4766,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    commands = stdin.split('\\n')\n\n    result = []\n\n    for command in commands:\n        words = command.split()\n\n        if words[0].lower() =='simon says':\n            result.append(' '.join(words[1:]))\n        else:\n            pass\n\n    return '\\n'.join(result)",
        "test": "assert solution(\"3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\nSample Output 2:\\n raise your right hand.\\n raise your left hand.\\ndef solution(stdin: str) -> str:\\n\\tpass\" == \" raise your right hand.\\n raise your left hand.\\ndef solution(stdin: str) -> str:\\n\\tpass\")",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 4767,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    registers = list(map(int, stdin.split()))\n\n    i = 0\n    operations = 0\n\n    while registers[i] < 19:\n        operations += 1\n        registers[i] = (registers[i] + 1) % 20\n        i += 1\n\n    while registers[i] < 19:\n        operations += 1\n        registers[i] = (registers[i] + 1) % 20\n        i += 1\n\n    while registers[i] < 19:\n        operations += 1\n        registers[i] = (registers[i] + 1) % 20\n        i += 1\n\n    while registers[i] < 19:\n        operations += 1\n        registers[i] = (registers[i] + 1) % 20\n        i += 1\n\n    while registers[i] < 19:\n        operations += 1\n        registers[i] = (registers[i] + 1) % 20\n        i += 1\n\n    while registers[i] < 19:\n        operations += 1\n        registers[i] = (registers[i] + 1) % 20\n        i += 1\n\n    while registers[i] < 19:\n        operations += 1\n        registers[i] = (registers[i] + 1) % 20\n        i += 1\n\n    return str(operations)",
        "test": "assert solution(\"1 2 4 6 10 12 16 18\") == \"0\"",
        "num_ids": 915,
        "indeed": false
    },
    {
        "number": 4768,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    samples = [list(sample.strip()) for sample in stdin.split(\"\\n\")[1:]]\n\n    def dfs(current_node, current_path, edges_dict, unlikeliness):\n        nonlocal min_unlikeliness\n        nonlocal unlikeliness_dict\n\n        min_unlikeliness = min(min_unlikeliness, unlikeliness)\n        if min_unlikeliness == unlikeliness:\n            if unlikeliness not in unlikeliness_dict:\n                unlikeliness_dict[unlikeliness] = []\n            unlikeliness_dict[unlikeliness].append(current_path)\n\n        for next_node in range(n):\n            if next_node == current_node:\n                continue\n            if edges_dict[current_node][next_node]!= 0:\n                edges_dict[current_node][next_node] -= 1\n                edges_dict[next_node][current_node] -= 1\n                dfs(next_node, current_path + [next_node], edges_dict, unlikeliness)\n                edges_dict[current_node][next_node] += 1\n                edges_dict[next_node][current_node] += 1\n\n    min_unlikeliness = float('inf')\n    unlikeliness_dict = {}\n    edges_dict = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                edges_dict[i][j] = 1\n                edges_dict[j][i] = 1\n\n    dfs(0, [0], edges_dict, 0)\n    return str(min_unlikeliness)",
        "test": "assert solution(\"\"\"\\",
        "num_ids": 1226,
        "indeed": false
    },
    {
        "number": 4769,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.lower()\n    if len(word) <= 2:\n        return -1\n\n    roots = set()\n    anagram_map = {}\n    for i in range(len(word)):\n        for j in range(i + 1, len(word) + 1):\n            anagram = word[i:j]\n            if anagram not in anagram_map:\n                anagram_map[anagram] = 1\n            else:\n                anagram_map[anagram] += 1\n\n    for anagram, count in anagram_map.items():\n        for i in range(len(anagram) + 1):\n            for j in range(i + 1, len(anagram) + 1):\n                root = anagram[i:j]\n                if anagram == root and anagram not in roots:\n                    roots.add(anagram)\n\n    if not roots:\n        return -1\n\n    roots = sorted(roots, key=len)\n    return roots[0]\n",
        "test": "assert solution(\"aaaa\") == \"a\"",
        "num_ids": 511,
        "indeed": false
    },
    {
        "number": 4770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"Dr. Chaz will have {} pieces of chicken left over!\".format(m * 1 - 1)\n    else:\n        return \"Dr. Chaz needs {} more piece[s] of chicken!\".format(m - n * 1)",
        "test": "assert solution(\"\"\"",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 4771,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, V = map(int, stdin.split())\n    boxes = []\n    for i in range(n):\n        l, w, h = map(int, input().split())\n        boxes.append((l, w, h))\n    boxes.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    max_box_volume = boxes[0][2] * boxes[0][1] * boxes[0][0]\n    result = max_box_volume - V\n    if result >= 0:\n        return str(result)\n    else:\n        return \"0\"",
        "test": "assert solution('''\\",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 4772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split()[0].split())\n    board = []\n    for row in range(R):\n        row_board = []\n        for col in range(C):\n            row_board.append(stdin[row][col])\n        board.append(row_board)\n\n    def find_word(board, word):\n        def is_valid(row, col, word, direction, i):\n            if row < 0 or row >= R or col < 0 or col >= C:\n                return False\n            if board[row][col] == '#':\n                return False\n            if direction =='vertical':\n                if i > 0 and board[row][col]!= word[i - 1]:\n                    return False\n                if i < len(word) - 1 and board[row][col]!= word[i + 1]:\n                    return False\n            else:\n                if i > 0 and board[row][col]!= word[i]:\n                    return False\n                if i < len(word) - 1 and board[row][col]!= word[i + 1]:\n                    return False\n            return True\n\n        def search_word(board, word, direction, start, end):\n            result = []\n            for i in range(start, end):\n                if is_valid(start, i, word, direction, i):\n                    result.append(word[i])\n                    if direction =='vertical':\n                        if i + 1 == len(word):\n                            result.append(word[0])\n                    else:\n                        if i + 1 < len(word):\n                            result.append(word[i + 1])\n                    search_word(board, result, direction, start + 1, end)\n                    result.pop()\n            return result\n\n        return search_word(board, word,'vertical', 0, len(word))\n\n    def is_valid_word(board, word):\n        if len(word) < 2:\n            return False\n        row_board = [row[j] for row in board for j in range(C) if row[j] in word]\n        return row_board!= ['#'] * C\n\n    def find_valid_word(board):\n        for row in range(R):\n            for col in range(C):\n                if board[row][col] in 'abcdefghijklmnopqrstuvwxyz':\n                    word = board[row][col]\n                    if is_valid_word(board, word):\n                        return word\n\n    return min(find_word(board, word) for word in [''.join(row) for row in board if all(row[i] == '#' for i in range(C))][1:]) or find_valid_word(board)",
        "test": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == \"as\"",
        "num_ids": 1711,
        "indeed": false
    },
    {
        "number": 4773,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    route = stdin.upper()\n    min_chars = 0\n    \n    if route.count('M') == 1:\n        min_chars += 2\n    else:\n        for char in route:\n            if char in 'NESW':\n                min_chars += 1\n            else:\n                min_chars += 2\n    \n    return str(min_chars)",
        "test": "assert solution(\"NSEW\") == \"4\"",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 4774,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n\n    # Check if a, b, c, d are valid expressions\n    if not (a + b + c + d == 0 or a - b + c - d == 0 or a * b - c * d == 0 or a / b + c / d == 0):\n        return \"problems ahead\"\n\n    # Narrow the equation space\n    operators = ['+', '-', '*', '/']\n    expressions = []\n    for i in range(len(operators)):\n        for j in range(len(operators)):\n            for k in range(len(operators)):\n                for l in range(len(operators)):\n                    if i!= j and j!= k and k!= l and l!= i:\n                        # Construct an expression\n                        expression = f\"{a} {operators[i]} {b} {operators[j]} {c} {operators[k]} {d} {operators[l]} {operators[i]}\"\n                        expressions.append(expression)\n\n    # Sort expressions\n    expressions.sort()\n\n    # Print out expressions\n    for expression in expressions:\n        print(expression)\n\n    return \"\\n\".join(expressions)\n",
        "test": "assert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n\"",
        "num_ids": 1277,
        "indeed": false
    },
    {
        "number": 4775,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.strip().split()\n    def cross(a, b):\n        i, j = 0, 0\n        while i < len(a) and j < len(b):\n            if a[i] == b[j]:\n                return a[i], i, j\n            elif a[i] < b[j]:\n                i += 1\n            else:\n                j += 1\n        return None\n\n    res = []\n    for _ in range(len(B)):\n        res.append('.' * len(A))\n    for i in range(len(A)):\n        for j in range(len(B)):\n            c = cross(A, B)\n            if c is None:\n                c = '.'\n            res[j][i] = c\n\n    return '\\n'.join(res)",
        "test": "assert solution(\"BANANA PIDZAMA\") == (\".P....\\n\"",
        "num_ids": 742,
        "indeed": false
    },
    {
        "number": 4776,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    events = [list(map(int, stdin.split('\\n')[i+1].split())) for i in range(N)]\n    days = set()\n    for event in events:\n        for day in range(event[0], event[1]+1):\n            days.add(day)\n    return str(len(days))",
        "test": "assert solution(\"3\\n10 14\\n13 17\\n25 26\\n\") == \"10\"",
        "num_ids": 417,
        "indeed": true
    },
    {
        "number": 4777,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = 0\n    B = 0\n    count = 0\n\n    for i in range(n):\n        count += 1\n        if count % 2 == 0:\n            A += 1\n        else:\n            B += 1\n\n    return f\"{A} {B}\"",
        "test": "assert solution(\"1\") == \"0 1\"",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 4778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n_districts, n_precincts = map(int, stdin.split()[0:2])\n    precinct_data = []\n    for i in range(1, n_precincts + 1):\n        district, a, b = map(int, stdin.split()[1:4])\n        precinct_data.append((district, a, b))\n    \n    # Group precincts into districts\n    district_data = []\n    for i, precinct in enumerate(precinct_data):\n        for j, data in enumerate(district_data):\n            if data[1] + data[2] <= precinct[1] + precinct[2]:\n                district_data[j] = (data[0], data[1] + precinct[1], data[2] + precinct[2])\n                break\n        else:\n            district_data.append((i + 1, precinct[0], precinct[1]))\n    \n    # Compute wasted votes and efficiency gap\n    results = []\n    for district, a, b in district_data:\n        winning_party = 'A'\n        wasted_a = 0\n        wasted_b = 0\n        for i, precinct in enumerate(precinct_data):\n            if district == precinct[0]:\n                if precinct[1] <= a <= precinct[1] + precinct[2]:\n                    wasted_a += precinct[1] - a\n                else:\n                    wasted_a += precinct[1] + precinct[2] - a\n                if precinct[1] <= b <= precinct[1] + precinct[2]:\n                    wasted_b += precinct[1] - b\n                else:\n                    wasted_b += precinct[1] + precinct[2] - b\n        if wasted_a > wasted_b:\n            winning_party = 'A'\n        else:\n            winning_party = 'B'\n        results.append((winning_party, wasted_a, wasted_b))\n    \n    # Print results\n    for winning_party, wasted_a, wasted_b in results:\n        print(winning_party, wasted_a, wasted_b)\n    \n    # Compute efficiency gap\n    V = sum(precinct[1] + precinct[2] for precinct in precinct_data)\n    efficiency_gap = sum(abs(wasted_a - wasted_b) for _, wasted_a, wasted_b in results) / V\n    print(efficiency_gap)\n    \n    return ''",
        "test": "assert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\\n\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\\n\"",
        "num_ids": 1710,
        "indeed": false
    },
    {
        "number": 4779,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    max_val = max(a[0]**2, a[-1]**2)\n    for i in range(1, n-1):\n        max_val = max(max_val, a[i]**2 + a[i+1]**2)\n    return str(max_val)",
        "test": "assert solution(\"2\\n1\\n1\") == \"1\"",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 4780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N1, N2 = map(int, stdin.split()[0:2])\n    ants1, ants2 = stdin.split()[2:4]\n    T = int(stdin.split()[4])\n\n    ant1 = ants1[0]\n    ant2 = ants2[0]\n\n    result = ''\n    while T > 0:\n        if T >= 1:\n            ant1 = ants1[int(T % N1)]\n            T -= 1\n        if T >= 1:\n            ant2 = ants2[int(T % N2)]\n            T -= 1\n\n        if ant1!= ant2 and abs(ant1.lower() - ant2.lower()) % 2 == 0:\n            result += ant1.lower() + ant2.lower()\n        else:\n            result += ant1.lower()\n\n        if T > 0:\n            result += ant2.lower()\n\n    return result",
        "test": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"",
        "num_ids": 1099,
        "indeed": false
    },
    {
        "number": 4781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def get_time(line: str) -> int:\n        return int(line.split()[1])\n\n    players = list(range(1, 9))\n    player_boxes = {1: 1}\n    player_index = get_player(stdin)\n    player_boxes[player_index] = 1\n\n    for i, line in enumerate(stdin.split('\\n')[1:], start=2):\n        time, answer = line.split()\n        if answer == 'T':\n            player_index = get_player(stdin)\n            player_boxes[player_index] = 1\n        elif answer == 'N':\n            player_index = get_player(stdin)\n            player_boxes[player_index] = 1\n\n    for player in players:\n        if player not in player_boxes or player_boxes[player]!= 1:\n            return player\n\n    return None\n\ndef",
        "test": "assert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"4\"",
        "num_ids": 872,
        "indeed": false
    },
    {
        "number": 4782,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == n * (n - 1) // 2:\n        return '6'\n    elif m > n * (n - 1) // 2:\n        return '22'\n    else:\n        return '6'",
        "test": "assert solution(\"4 3\") == \"6\"",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 4783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.split())\n    coins = [list(map(int, stdin.split())) for _ in range(M)]\n    \n    def dfs(i, j, current_height):\n        if i == M - 1 and j == N - 1:\n            return current_height\n        elif i == M - 1:\n            return dfs(i, j + 1, current_height + coins[i][j])\n        elif j == N - 1:\n            return dfs(i + 1, j, current_height + coins[i][j])\n        else:\n            return min(dfs(i, j + 1, current_height + coins[i][j]), dfs(i + 1, j, current_height + coins[i][j]))\n    \n    result = dfs(0, 0, 0)\n    return str(result) if result!= float('inf') else '0'",
        "test": "assert solution(\"\"\"",
        "num_ids": 1011,
        "indeed": false
    },
    {
        "number": 4784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n\n    p.append(0)\n    p.sort()\n\n    total_spent = 0\n    available_space = x\n\n    for i in range(n - 1, -1, -1):\n        if total_spent + p[i] <= available_space:\n            available_space -= total_spent + p[i]\n            total_spent += p[i]\n        else:\n            available_space += (available_space - total_spent) + p[i]\n            total_spent = p[i]\n            break\n\n    return available_space",
        "test": "assert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\"",
        "num_ids": 443,
        "indeed": false
    },
    {
        "number": 4785,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)-1):\n        if stdin[i] =='s' and stdin[i+1] =='s':\n            return 'hiss'\n    return 'no hiss'",
        "test": "assert solution(\"amiss\") == \"hiss\", \"Test 1 failed\"",
        "num_ids": 277,
        "indeed": true
    },
    {
        "number": 4786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    keyword_count = int(stdin.split('\\n')[0])\n    keywords = [line.split()[0] for line in stdin.split('\\n')[1:]]\n    similar_keywords = set()\n\n    for i in range(len(keywords)):\n        for j in range(i + 1, len(keywords)):\n            if keywords[i] == keywords[j]:\n                similar_keywords.add(keywords[i])\n\n    return str(len(similar_keywords))",
        "test": "assert solution(\"\"\"",
        "num_ids": 377,
        "indeed": false
    },
    {
        "number": 4787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    points = {\n        'T': 3,\n        'C': 2,\n        'G': 1,\n    }\n\n    card_count = 0\n    scientific_points = 0\n\n    for card in stdin:\n        if card in points:\n            scientific_points += points[card] ** 2\n            card_count += 1\n            if card_count == 3:\n                scientific_points += 7\n                card_count = 0\n\n    return str(scientific_points)",
        "test": "assert solution('CCC') == '9'",
        "num_ids": 366,
        "indeed": false
    },
    {
        "number": 4788,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2 = map(int, stdin.split())\n    if n1 - n2 >= 180:\n        return str(-1 * (n1 - n2 - 360))\n    else:\n        return str(-1 * (n1 - n2))",
        "test": "assert solution(\"315\\n45\") == \"90\"",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 4789,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    num_signatures = int(lines.pop(0))\n    desk_numbers = [int(x) for x in lines]\n    desk_numbers.sort()\n    \n    passes = 0\n    current_desk = 0\n    for desk_number in desk_numbers:\n        current_desk = desk_number\n        passes += 1\n    \n    return str(passes)",
        "test": "assert solution(\"5\\n11\\n20\\n33\\n40\\n55\\n\") == \"1\"",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 4790,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    stones = list(stdin)\n\n    def is_valid_balance(seq):\n        count_black = count_white = 0\n        for stone in seq:\n            if stone == 'W':\n                count_white += 1\n            elif stone == 'B':\n                count_black += 1\n            if count_black > count_white:\n                return False\n            elif count_white > count_black:\n                return True\n        return True\n\n    def find_valid_sequences(start, end):\n        seqs = []\n        for i in range(start, end + 1):\n            seq = stones[i:i + 4]\n            if is_valid_balance(seq):\n                seqs.append(seq)\n        return seqs\n\n    def find_valid_combinations(start, end):\n        seqs1 = find_valid_sequences(start, end)\n        seqs2 = find_valid_sequences(end, start)\n        seqs = []\n        for seq1 in seqs1:\n            for seq2 in seqs2:\n                seq = seq1 + seq2\n                if is_valid_balance(seq):\n                    seqs.append(seq)\n        return seqs\n\n    valid_combinations = find_valid_combinations(0, n - 3)\n    for i in range(len(valid_combinations)):\n        if is_valid_balance(valid_combinations[i]):\n            return '1'\n    return '0'",
        "test": "assert solution(\"WWWWBBW\") == \"0\"",
        "num_ids": 702,
        "indeed": false
    },
    {
        "number": 4791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    s1, s2, s3, s4 = map(int, stdin.split())\n\n    # calculate area using Heron's formula\n    a = 0.5 * (s1 + s2 + s3 + s4)\n    b = max(s1, s2, s3, s4)\n    c = min(s1, s2, s3, s4)\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    # output answer\n    return str(area)",
        "test": "assert round(float(solution(\"1 2 1 1\")), 6) == 1.299038",
        "num_ids": 767,
        "indeed": false
    },
    {
        "number": 4792,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    name = stdin.lower()\n    result = \"\"\n\n    for i in range(len(name)):\n        if name[i] == name[i + 1]:\n            if i > 0 and name[i - 1] == name[i]:\n                continue\n            result += name[i]\n        else:\n            result += name[i]\n\n    return result",
        "test": "assert solution(\"robertapalaxiamethostenes\") == \"robert\"",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 4793,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, v1, v2 = map(int, stdin.split())\n\n    if v1 >= v2:\n        return \"Impossible\"\n\n    # Find the minimum number of bottles to store the shipment\n    total_volume = s + v1 + v2\n    num_bottles = total_volume // v1\n    num_small_bottles = total_volume % v1\n\n    # Check if the bottles can be filled\n    if num_small_bottles > 0:\n        return \"0 0\"\n\n    # Check if the bottles can be filled using all bottles\n    if num_bottles > 0 and num_bottles * v2 <= total_volume:\n        return f\"{num_bottles} {num_bottles}\"\n\n    # If not, find the minimum number of bottles to store the oil\n    oil_volume = total_volume - num_bottles * v1\n    num_oil_bottles = oil_volume // v2\n    num_large_oil_bottles = oil_volume % v2\n\n    # Check if the oil can be stored in the bottles\n    if num_large_oil_bottles > 0:\n        return \"0 0\"\n\n    # Check if the oil can be stored in the bottles using all bottles\n    if num_oil_bottles > 0 and num_oil_bottles * v1 <= total_volume:\n        return f\"{num_oil_bottles} {num_oil_bottles}\"\n\n    return \"Impossible\"",
        "test": "assert solution(\"1000 900 7\") == \"Impossible\"",
        "num_ids": 743,
        "indeed": false
    },
    {
        "number": 4794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split()[0].split())\n    grid = []\n    for _ in range(R):\n        line = stdin.readline()\n        grid.append(line.strip())\n    \n    def count_cars(row: int, col: int, cars: int) -> int:\n        if row < 0 or row >= R or col < 0 or col >= C:\n            return 0\n        if grid[row][col] == 'X':\n            return min(cars, 2)\n        if grid[row][col] == '#':\n            return 0\n        return count_cars(row + 1, col, cars) + count_cars(row - 1, col, cars) + count_cars(row, col + 1, cars) + count_cars(row, col - 1, cars)\n    \n    res = []\n    for cars in range(5):\n        spaces = count_cars(0, 0, cars)\n        res.append(spaces)\n    return \"\\n\".join(map(str, res))\n\ndef",
        "test": "assert solution(stdin=\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\\n\"",
        "num_ids": 1886,
        "indeed": false
    },
    {
        "number": 4795,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(x) for x in stdin.split()]\n    total = sum(numbers)\n    return str(total)",
        "test": "assert solution(\"5\\n23\\n17\\n43\\n52\\n22\\n\") == \"102\"",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 4796,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Input\n    data = stdin.split()\n    a, b, c = int(data[0]), int(data[1]), int(data[2])\n    i, j, k = int(data[3]), int(data[4]), int(data[5])\n\n    # Calculate leftover amounts\n    o_leftover = a * k\n    a_leftover = b * k\n    p_leftover = c * i\n\n    # Output\n    output = f\"{o_leftover:.4f} {a_leftover:.4f} {p_leftover:.4f}\"\n    return output",
        "test": "assert solution(\"9 9 9\\n3 2 1\") == \"0.000000 3.000000 6.000000\"",
        "num_ids": 678,
        "indeed": false
    },
    {
        "number": 4797,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    output = \"\"\n    backspaces = 0\n    \n    for i, c in enumerate(stdin):\n        if c == \"<\":\n            backspaces += 1\n        else:\n            output += c * backspaces\n            backspaces = 0\n    \n    return output",
        "test": "assert solution(\"a<bc<\") == \"b\"",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 4798,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    first_char, *long_names = stdin.split(\"-\")\n    short_names = [name[0].upper() + name[1:] for name in long_names]\n    return \"-\".join(short_names)",
        "test": "assert solution(\"Mirko-Slavko\") == \"MS\"",
        "num_ids": 336,
        "indeed": false
    },
    {
        "number": 4799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    G, S, C = map(int, stdin.split())\n    \n    # Gold\n    if G >= 3:\n        return \"Gold\"\n    \n    # Silver\n    if S >= 2:\n        return \"Silver\"\n    \n    # Copper\n    return \"Copper\"",
        "test": "assert solution(\"2 1 0\") == \"Province or Gold\", \"Test case 2 failed\"",
        "num_ids": 849,
        "indeed": false
    },
    {
        "number": 4800,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0].split())\n    d, s = map(int, stdin.split()[1].split())\n    \n    if n <= k:\n        return \"impossible\"\n    \n    return str(d * (k - 1) + s * (n - k))",
        "test": "assert solution(\"10 3\\n80 90\") == \"75.7142857\"",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 4801,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    A = [int(x) for x in stdin.split()[1:]]\n    \n    left_indices = [A.index(x) for x in sorted(A)]\n    gis = []\n    for i in range(1, n):\n        j = left_indices.index(i)\n        gis.append(A[j])\n        if j!= 0 and A[j - 1] < A[j]:\n            left_indices[j] = left_indices[j - 1]\n        else:\n            left_indices[j] = j\n            \n    return str(len(gis)) +'' +''.join(map(str, gis))",
        "test": "assert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"",
        "num_ids": 694,
        "indeed": false
    },
    {
        "number": 4802,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    hours, minutes = map(int, stdin.split())\n\n    # Adjust the time for 45 minutes before\n    new_minutes = (minutes - 45) % 60\n    new_hours = (hours - 1) % 24\n    new_minutes += 60 if new_minutes > 59 else 0\n\n    # Format the output\n    return f\"{new_hours:02d} {new_minutes:02d}\"\n",
        "test": "assert solution(\"0 30\") == \"23 45\"",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 4803,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = float(stdin)\n    if 0.36788 <= N <= 2.718281:\n        a = 1\n        for i in range(2, int(N.log10()) + 1):\n            a *= (i * (2 ** (i - 1)))\n        return str(a)\n    else:\n        return \"Invalid input\"\n\ndef",
        "test": "assert solution(\"1.000000\") == \"1.000000\"",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 4804,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    S = int(stdin)\n    rows = [0, 0]\n    for i in range(S):\n        rows[i % 2] += (i + 1) // 2 + 1\n    rows.sort()\n    result = []\n    for i in range(1, len(rows)):\n        for j in range(rows[i - 1], rows[i]):\n            if j % 2 == 0:\n                result.append(str(j) + ',1')\n            else:\n                result.append(str(j) + ',2')\n    return ':'.join(result)",
        "test": "assert solution(\"50\") == \"50:\\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\\n\"",
        "num_ids": 965,
        "indeed": false
    },
    {
        "number": 4805,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.strip().split()\n    repeated = []\n\n    for word in words:\n        if word.lower() in repeated:\n            return \"no\"\n        repeated.append(word.lower())\n\n    return \"yes\"",
        "test": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\", \"The function should return 'yes' if no word is repeated\"",
        "num_ids": 375,
        "indeed": true
    },
    {
        "number": 4806,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    moves = []\n    i = 0\n    while i < len(stdin):\n        if stdin[i] == 'R':\n            moves.append('S')\n        elif stdin[i] == 'B':\n            moves.append('K')\n        elif stdin[i] == 'L':\n            moves.append('H')\n        elif stdin[i] == 'C':\n            break\n        i += 1\n    moves = ''.join(moves)\n    i = 0\n    while i < len(moves):\n        if moves[i:i+3] == 'RKB':\n            moves = moves[:i] + 'C' + moves[i+3:]\n        elif moves[i:i+3] == 'RBL':\n            moves = moves[:i] + 'C' + moves[i+3:]\n        elif moves[i:i+3] == 'RKB':\n            moves = moves[:i] + 'C' + moves[i+3:]\n        i += 1\n    return moves",
        "test": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 4807,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.split())\n    result = []\n\n    for i in range(1, n+1):\n        fizz = \"\"\n        buzz = \"\"\n        fizzbuzz = \"\"\n\n        if i % x == 0:\n            fizz = \"Fizz\"\n        if i % y == 0:\n            buzz = \"Buzz\"\n        if i % (x + y) == 0:\n            fizzbuzz = \"FizzBuzz\"\n\n        result.append((fizz + buzz + fizzbuzz).lstrip() or str(i))\n\n    return \"\\n\".join(result)\n",
        "test": "assert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n\"",
        "num_ids": 697,
        "indeed": false
    },
    {
        "number": 4808,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n\n    k = 0\n    while k < n and d[m - k - 1] < d[m]:\n        k += 1\n\n    if k == n:\n        return \"It had never snowed this early!\"\n    else:\n        return f\"It hadn't snowed this early in {k} years!\"",
        "test": "assert solution(\"\"\"2 10",
        "num_ids": 516,
        "indeed": false
    },
    {
        "number": 4809,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, n = map(int, stdin.split())\n    rhyme = [int(x) for x in stdin.split()]\n    \n    def count_syllables(n: int) -> int:\n        return n * (n + 1) // 2\n    \n    def count_coconut_splat(syllables: int) -> int:\n        total = syllables * 10\n        total += syllables // 2\n        total += syllables // 5\n        total -= syllables // 7\n        return total\n    \n    count = count_coconut_splat(sum(rhyme))\n    winner = count % n + 1\n    \n    return str(winner)\n",
        "test": "assert solution(\"10 2\") == \"2\"",
        "num_ids": 1717,
        "indeed": false
    },
    {
        "number": 4810,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    message = \"\"\n    for char in stdin:\n        if char.isalpha() and char.islower():\n            message += char.upper()\n    rows, cols = len(message), len(set(message))\n    if rows > cols:\n        rows, cols = cols, rows\n    matrix = [message[i:i + rows] for i in range(0, len(message), rows)]\n    encrypted = \"\"\n    for i, row in enumerate(matrix):\n        for j, col in enumerate(row):\n            encrypted += matrix[j][i]\n    return encrypted",
        "test": "assert solution(\"koaski\") == \"kakosi\"",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 4811,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    min_size = 1\n    min_breaks = 0\n    for i in range(1, 1000):\n        if i ** 2 == k:\n            min_size = i\n            min_breaks = 1\n            break\n        elif i ** 2 > k:\n            break\n        else:\n            min_size = i\n            min_breaks = i\n\n    if min_size == 1:\n        min_size = 2\n\n    return f\"{min_size} {min_breaks}\"",
        "test": "assert solution(\"7\") == \"8 3\"",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 4812,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    s = stdin.strip().split()[0]\n    n_endings = int(stdin.strip().split()[1])\n    endings = [line.strip().split() for line in stdin.strip().split()[2:2+n_endings]]\n    n_phrases = int(stdin.strip().split()[2+n_endings])\n    phrases = [line.strip() for line in stdin.strip().split()[2+n_endings+1:2+n_endings+1+n_phrases]]\n    \n    # Create lists of endings and phrases\n    endings = set([tuple(sorted(ending)) for ending in endings])\n    phrases = set([tuple(sorted(phrase.split())) for phrase in phrases])\n    \n    # Check if phrases rhyme with the common word\n    rhyming_phrases = []\n    for phrase in phrases:\n        if (s, tuple(sorted(phrase[-1:]))) in endings and (tuple(sorted(phrase[:-1])), s) in endings:\n            rhyming_phrases.append(phrase)\n    \n    # Output\n    if rhyming_phrases:\n        return '\\n'.join(['YES' if phrase in rhyming_phrases else 'NO' for phrase in phrases])\n    else:\n        return '\\n'.join(['YES' for phrase in phrases])",
        "test": "assert solution('stairs\\n2\\nerres airs ears ares aires\\neet eat\\n2\\napples and pears\\nplates of meat\\n') == 'YES\\nNO\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\",
        "num_ids": 2252,
        "indeed": false
    },
    {
        "number": 4813,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    word, permutation = stdin.strip().split()\n    word = list(word)\n    permutation = list(permutation)\n    if word!= permutation:\n        return \"LOSE\"\n\n    hanging_man = \"   \"\n    current_guess = 0\n    won = False\n\n    while not won:\n        print(\"Hanging man:\", hanging_man)\n        print(\"Current guess:\", current_guess)\n        print(\"Word:\", \"\".join(word))\n        for i, letter in enumerate(word):\n            if letter in permutation:\n                index = permutation.index(letter)\n                hanging_man = hanging_man[:index] + letter + hanging_man[index + 1:]\n            else:\n                hanging_man = hanging_man[:i] + \" \" + hanging_man[i + 1:]\n\n        guess = input(\"Guess a letter: \")\n        if len(guess)!= 1 or guess.upper() not in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n            print(\"Invalid input. Please enter a letter.\")\n            continue\n\n        if guess.upper() in word:\n            index = word.index(guess.upper())\n            word[index] = \"_\"\n            print(\"You guessed:\", guess)\n        else:\n            index = permutation.index(guess.upper())\n            hanging_man = hanging_man[:index] + \" \" + hanging_man[index + 1:]\n            print(\"You guessed:\", guess)\n\n        current_guess += 1\n        if current_guess == len(word):\n            print(\"Congratulations! You guessed the word!\")\n            won = True\n        elif all(letter == \"_\" for letter in word):\n            print(\"You Lost! The word was:\", \"\".join(word))\n            won = True\n\n    return \"WIN\" if all(letter == \"_\" for letter in word) else \"LOSE\"\n",
        "test": "assert solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"LOSE\"",
        "num_ids": 1209,
        "indeed": false
    },
    {
        "number": 4814,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    names = list(map(str.strip, stdin.split('\\n')))\n\n    def compare_names(name1: str, name2: str) -> int:\n        return (name1.lower() < name2.lower()) - (name1.lower() > name2.lower())\n\n    def find_order(names: List[str]) -> str:\n        if len(names) == 1:\n            return 'NEITHER'\n\n        names.sort(key=lambda name: name.lower())\n\n        for i in range(1, len(names)):\n            if compare_names(names[i], names[i - 1])!= 0:\n                return 'NEITHER'\n\n        if compare_names(names[0], names[-1])!= 0:\n            return 'DECREASING'\n        else:\n            return 'INCREASING'\n\n    return find_order(names)\n\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 4815,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, p, m = map(int, stdin.split())\n    players = {}\n    for _ in range(m):\n        name, points = stdin.split()\n        players[name] = int(points)\n\n    winners = []\n    for player, points in players.items():\n        if points >= p:\n            winners.append(player)\n\n    if not winners:\n        return \"No winner!\"\n\n    return \"\\n\".join(winners) + \"\\n\" + \", \".join(winners[:-1]) + \" wins!\"\n\n\ndef",
        "test": "assert solution(\"\"\"\\",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 4816,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    x, y, x1, y1, x2, y2 = map(int, stdin.split())\n    goat_distance = abs(x - x1) + abs(y - y1)\n    house_distance = abs(x2 - x1) + abs(y2 - y1)\n    min_distance = min(goat_distance, house_distance)\n    return f\"{min_distance:.4f}\"",
        "test": "assert solution(input()) == \"2.0\"",
        "num_ids": 535,
        "indeed": false
    },
    {
        "number": 4817,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    \n    # check if x is a zero\n    if str(x)[0] == '0':\n        return '0'\n    \n    # get the number of digits in x\n    num_digits = len(str(x))\n    \n    # loop through all possible digits in the range 1 to 9\n    for digit in range(1, 10):\n        \n        # check if the digits match\n        if digit == int(str(x)[-1]):\n            \n            # check if the new number is larger than x\n            new_x = x * 10 + digit\n            \n            # check if the new number has the same number of digits as x\n            if len(str(new_x)) == num_digits:\n                \n                # if the new number is larger, return it\n                return str(new_x)\n    \n    # if no number is found, return 0\n    return '0'",
        "test": "assert solution(\"330\") == \"0\"",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 4818,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tasks = list(map(int, stdin.split()))\n    intervals = list(map(int, stdin.split()))\n\n    tasks.sort()\n    intervals.sort()\n\n    count = 0\n    current = 0\n\n    for task in tasks:\n        if current + task <= intervals[0]:\n            count += 1\n            current += task\n        else:\n            current = task\n\n    return str(count)",
        "test": "assert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\") == \"3\\n\"",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 4819,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    numbers = []\n    for line in stdin.splitlines():\n        num = int(line)\n        if num % 42 not in numbers:\n            numbers.append(num % 42)\n            count += 1\n    return str(count)",
        "test": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\", \"Test 1 failed.\"",
        "num_ids": 613,
        "indeed": true
    },
    {
        "number": 4820,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, b = map(int, stdin.split())\n    \n    if N > 10**4:\n        return \"no\"\n    \n    if b > 50:\n        return \"no\"\n    \n    # count the number of bits in the first file\n    file1_bits = sum(map(int, list(open(\"input.txt\").read())))\n    \n    # check if we can compress all the files\n    if file1_bits <= b:\n        return \"yes\"\n    \n    return \"no\"",
        "test": "assert solution(\"1 0\") == \"yes\"",
        "num_ids": 413,
        "indeed": false
    },
    {
        "number": 4821,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    cards = stdin.split()\n    suits = {'P', 'K', 'H', 'T'}\n    missing_cards = {'P': 0, 'K': 0, 'H': 0, 'T': 0}\n\n    for card in cards:\n        suit, number = card[0], int(card[1:])\n        if suit in suits and 1 <= number <= 13:\n            missing_cards[suit] -= 1\n\n    return''.join(str(missing) for missing in missing_cards.values())",
        "test": "assert solution(\"T04C04D03S03C02D02\") == \"11 11 11 11\"",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 4822,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def count_flies(picture: List[str]) -> int:\n        flies = 0\n        for row in picture:\n            for pixel in row:\n                if pixel == '*':\n                    flies += 1\n        return flies\n\n    def paint_racket(picture: List[str], racket_length: int) -> str:\n        racket = '-' * racket_length + '|' * (racket_length + 1)\n        for i in range(len(picture)):\n            if i < len(picture) - 1:\n                picture[i] = racket + picture[i] + racket\n            else:\n                picture[i] = racket + picture[i] + racket + '\\n'\n        return picture\n\n    r, s, k = map(int, stdin.split())\n    picture = []\n    for _ in range(r):\n        line = input()\n        picture.append(line)\n\n    max_flies = count_flies(picture)\n    if max_flies <= k:\n        return str(max_flies)\n\n    racket_length = k\n    painted_picture = paint_racket(picture, racket_length)\n    return''.join(painted_picture)\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 985,
        "indeed": false
    },
    {
        "number": 4823,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    hand = stdin.strip().split()\n    strength = 0\n    rank_count = {}\n\n    for card in hand:\n        rank, suit = card\n        if rank in rank_count:\n            rank_count[rank] += 1\n        else:\n            rank_count[rank] = 1\n\n    for rank, count in rank_count.items():\n        if count > 1:\n            strength = max(strength, 13 - (ord(rank) - ord('A')))\n\n    return str(strength)",
        "test": "assert solution(\"2C 4D 4H 2D 2H\") == \"3\"",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 4824,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    C, P = map(int, stdin.split())\n    initial_heights = list(map(int, stdin.split()))\n\n    def get_heights(n: int) -> list:\n        return [heights[n] for heights in initial_heights]\n\n    def get_field(heights: list) -> str:\n        field = []\n        for height in heights:\n            row = \".\" * height\n            field.append(row)\n        return \"\\n\".join(field)\n\n    def drop_piece(heights: list, piece_number: int) -> int:\n        # Rotate the piece\n        if piece_number in [1, 2]:\n            heights[piece_number - 1], heights[8] = heights[8], heights[piece_number - 1]\n        elif piece_number in [3, 4]:\n            heights[piece_number - 1], heights[8] = heights[8], heights[piece_number - 1]\n            heights[8], heights[9] = heights[9], heights[8]\n        elif piece_number in [5, 6]:\n            heights[piece_number - 1], heights[8] = heights[8], heights[piece_number - 1]\n            heights[8], heights[9] = heights[9], heights[8]\n            heights[9], heights[10] = heights[10], heights[9]\n\n        # Drop the piece\n        position = 8\n        for _ in range(4):\n            position -= 1\n            if heights[position] == 0:\n                heights[position] = 1\n            else:\n                heights[position] += 1\n\n        # Check for free spaces\n        free_spaces = []\n        for position in range(1, len(heights) - 1):\n            if heights[position] == 0:\n                free_spaces.append(position)\n        return free_spaces\n\n    def get_possible_fields(heights: list, piece_number: int) -> int:\n        possible_fields = []\n        for _ in range(4):\n            heights = drop_piece(heights, piece_number)\n            free_spaces = drop_piece(heights, 0)\n            heights = drop_piece(heights, 0)\n            possible_fields.append(get_field(heights))\n            heights = drop_piece(heights, 0)\n            heights = drop_piece(heights, 0)\n            free_spaces = drop_piece(heights, 0)\n        return possible_fields\n\n    field = get_field(initial_heights)\n    possible_fields = get_possible_fields(initial_heights, P)\n    return str(len(possible_fields))",
        "test": "assert solution(\"\"\"5 1",
        "num_ids": 1321,
        "indeed": false
    },
    {
        "number": 4825,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def translate(c: str) -> str:\n        if c.isalpha():\n            if c.isupper():\n                return chr(ord(c) + 13)\n            else:\n                return chr(ord(c) + 10)\n        else:\n            return c\n\n    return \"\".join(translate(c) for c in stdin)",
        "test": "assert solution(\"A New Alphabet has been developed for Internet communications. While the glyphs of the new alphabet don\u2019t necessarily improve communications in any meaningful way, they certainly make us feel cooler.\\n\\nYou are tasked with creating a translation program to speed up the switch to our more elite New Alphabet by automatically translating ASCII plaintext symbols to our new symbol set. The new alphabet is a one-to-many translation (one character of the English alphabet translates to anywhere between $1$ and $6$ other characters), with each character translation as follows:\\n\\nOriginal\\n\\nNew\\n\\nEnglish Description\\n\\nOriginal\\n\\nNew\\n\\nEnglish Description\\na\\n@at symbol\\nn\\n[]\\\\[\\[]brackets, backslash, brackets\\nb\\n8digit eight\\no\\n0digit zero\\nc\\n(open parenthesis\\np\\n|Dbar, capital D\\nd\\|)|close parenthesis\\nq\\n(,)parenthesis, comma, parenthesis\\ne\\n3digit three\\nr\\n|Zbar\\nf\\n#number sign (hash)\\ns\\n$dollar sign\\ng\\n6digit six\\nt\\n']['quote, brackets, quote\\nh\\n[-]bracket, hyphen, bracket\\nu\\n|_|bar, underscore, bar\\ni\\n|bar\\nv\\n\\/backslash, forward slash\\nj\\n_|underscore, bar\\nw\\n\\/\\/four slashes\\nk\\n|<bar, less than\\nx\\n}{curly braces\\nl\\n1digit one\\ny\\n`/backtick, forward slash\\nm\\n[]\\/[]brackets, slashes, brackets\\nz\\n2digit two\\n\\nFor instance, translating the string \\\"Hello World!\\\" would result in:[-]3110 \\/\\/0|Z1|)!\\n\\nNote that uppercase and lowercase letters are both converted, and any other characters remain the same (the exclamation point and space in this example).\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.What's the Frequency, Kenneth?\"",
        "num_ids": 822,
        "indeed": false
    },
    {
        "number": 4826,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2 == 1:\n        return \"Alice\"\n    else:\n        return \"Bob\"",
        "test": "assert solution(\"1\\n\") == \"Alice\"",
        "num_ids": 328,
        "indeed": true
    },
    {
        "number": 4827,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    total_letters = sum(len(word) for word in words)\n    numbers = []\n\n    for word in words:\n        if word.isdigit():\n            numbers.append(word)\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if int(numbers[i]) + int(numbers[j]) == total_letters:\n                numbers[i] += numbers[j]\n                numbers.remove(numbers[j])\n                total_letters -= int(numbers[i])\n                break\n\n    sentence = \" \".join(words)\n    for i, num in enumerate(numbers):\n        if num.isdigit():\n            num = \"\".join(reversed([chr(ord(\"zero\") + i) if int(num[1:]) < 10 else chr(ord(\"ten\") + int(num[1:]) - 10)] + [chr(ord(\"a\") + int(num[1:]) - 1) for j in range(int(num[0]) - 1)]))\n            num = \"and \" + num if i > 0 else num\n            sentence = sentence.replace(num, \"$\" + num)\n\n    return sentence.replace(\"$\", \"\")",
        "test": "assert solution(\"7\\n$\\nis\\nthe\\nnumber\\nof\\nletters\\nhere\\n\") == \"thirty is the number of letters here\"",
        "num_ids": 1002,
        "indeed": false
    },
    {
        "number": 4828,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    machine_code = ''.join(lines).lower()\n    machine_code = machine_code.replace('a', 'nop').replace('b', 'nop').replace('c', 'nop').replace('d', 'nop')\n    memory_size = int(len(machine_code) / 4) * 4\n    if memory_size % 4!= 0:\n        memory_size += 4 - memory_size % 4\n    program_size = len(machine_code)\n    nop_count = 0\n    for i in range(program_size, 0, -4):\n        if machine_code[i:i+4] == 'nop':\n            nop_count += 1\n        else:\n            break\n    return str(nop_count)",
        "test": "assert solution(\"Abcd\") == \"0\"",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 4829,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    left, right = map(int, stdin.split())\n    if left + right == 0:\n        return \"Not a moose\"\n    \n    if left == right:\n        return f\"Even {left}\"\n    \n    odd_points = 2 * right\n    even_points = left + left\n    \n    if odd_points == even_points:\n        return f\"Even {odd_points}\"\n    \n    return f\"Odd {odd_points}\"",
        "test": "assert solution(\"2 3\") == \"Odd 6\"",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 4830,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split(\"\\n\")\n    dictionary = {}\n    for word in words:\n        dictionary[word] = None\n    return str(len(dictionary))",
        "test": "assert solution(\"2\\nja\\nla\\n52\") == \"2\"",
        "num_ids": 324,
        "indeed": false
    },
    {
        "number": 4831,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    lines = []\n\n    for i in range(n):\n        line = ''\n        if i % 3 == 0:\n            for char in stdin[i:i + 3]:\n                line += char + 'Wendy'\n            line = line[:-3] + 'Wendy'\n        else:\n            for char in stdin[i:i + 3]:\n                line += char + 'PeterPan'\n            line = line[:-3] + 'PeterPan'\n        lines.append(line)\n\n    return '\\n'.join(lines)",
        "test": "assert solution(\"Hello World\") == \"..#..#..#..\\n.#.#.#.#.#.\\n#.H#.#.#.#\\n.#.#.#.#.#.\\n..#..#..#..\\n..#..#..#..\\n.#.#.#.#.#.\\n#.W#.#.#.#\\n.#.#.#.#.#.\\n..#..#..#..\\n..#..#..#..\\n.#.#.#.#.#.\\n#.L#.#.#.#\\n.#.#.#.#.#.\\n..#..#..#..\\n..#..#..#..\\n.#.#.#.#.#.\\n#.o#.#.#.#\\n.#.#.#.#.#.\\n..#..#..#..\\n..#..#..#..\\n.#.#.#.#.#.\\n#.r#.#.#.#\\n.#.#.#.#.#.\\n..#..#..#..\\n..#..#..#..\\n.#.#.#.#.#.\\n#.l#.#.#.#\\n.#.#.#.#.#.\\n..#..#..#..\\n..#..#..#..\\n.#.#.#.#.#.\\n#.l#.#.#.#\\n.#.#.#.#.#.\\n..#..#..#..\\n..#..#..#..\\n.#.#.#.#.#.\\n#.l#.#.#.#\\n.#.#.#.#.#.\\n..#..#..#..\\n..#..#..#..\\n.#.#.#.#.#.\\n#.l#.#.#.#\\n.#.#.#.#.#.\\n..#..#..#..\\n..#..#..#..\\n.#.#.#.#.#.\\n#.l#.#.#.#\\n.#.#.#.#.#.\\n..#..#..#..\\n..#..#..#..\\n.#.#.#.#.#.\\n#.l#.#.#.#\\n.#.#.#.#.#.\\n..#..#..#..\\n..#..#..#..\\n.#.#.#.#.#.\\n#.l#.#.#.#\\n.#.#.#.#.#.\\n..#..#..#..\\n..#..#..#..\\n.#.#.#.#.#.\\n#.l#.#.#.#\\n.#.#.#.#.#.\\n..#..#..#..\\n..#..#..#..\\n.#.#.#.#.#.\\n#.l#.#.#.#\\n.#.#.#.#.#.\\n..#..#..#..\\n..#..#..#..\\n.#.#.#.#.#.\\n#.l#.#.#.#\\n.#.#.#.#.#.\\n..#..#..#..\\n..#..#..#..\\n.#.#.#.#.#.\\n#.l#.#.#.#\\n.#.#.#.#.#.\\n..#..#..#..\\n..#..#..#..\\n.#.#.#.#.#.\\n#.l#.#.#.#\\n.#.#.#.#.#.\\n..#..#..#..\\n..#..#..#..\\n.#.#.#.#.#.\\n#.l#.#.#.#\\n.#.#.#.#.#.\\n..#..#..#..\\n..#..#..#..\\n.#.#.#.#.#.\\n#.l#.#.#.#\\n.#.#.#.#.#.\\n..#..#..#..\\n..#..#..#..\\n.#.#.#.#.#.\\n#.l#.#.#.#\\n.#.#.#.#.#.\\n..#..#..#..\\n..#..#..#..\\n.#.#.#.#.#.\\n#.l#.#.#.#\\n.#.#.#.#.#.\\n..#..#..#..\\n..#..#..#..\\n.#.#.#.#.#.\\n#.l#.#.#.#\\n.#.#.#.#.#.\\n..#..#..#..\\n..#..#..#..\\n.#.#.#.#.#.\\n#.l#.#.#.#\\n.#.#.#.#.#.\\n..#..#..#..\\n..#..#..#..\\n.#.#.#.#.#.\\n#.l#.#.#.#\\n.#.#.#.#.#.\\n..#..#..#..\\n..#..#..#..\\n.#.#.#.#.#.\\n#.l#.#.#.#\\n.#.#.#.#.#.\\n",
        "num_ids": 2045,
        "indeed": false
    },
    {
        "number": 4832,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if R > 10000:\n        raise ValueError(\"Radius should be less than or equal to 10000.\")\n\n    from math import pi\n\n    # Solution for normal geometry\n    area_normal = pi * R * R\n    # Solution for taxicab geometry\n    area_taxicab = (2 * R + 1) * (2 * R + 1)\n\n    return str(area_normal) + \"\\n\" + str(area_taxicab)\n\n\ndef",
        "test": "assert solution(\"21\") == \"1385.442360\\n882.000000\\n\"",
        "num_ids": 1409,
        "indeed": false
    },
    {
        "number": 4833,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *k = map(int, stdin.split())\n    expenses = [x for x in k if x!= 0]\n    expenses.sort()\n    total_expenses = sum(expenses)\n    return str(total_expenses)",
        "test": "assert solution(\"3\\n1 -2 3\\n\") == \"2\"",
        "num_ids": 360,
        "indeed": false
    },
    {
        "number": 4834,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, *t = map(int, stdin.strip().split())\n    t = [0] + t\n    t = t + [t[-1]] + [0] * (n - 1)\n    t = sorted(t)\n    total_time = sum(t)\n    min_time = 0\n    for i in range(1, n):\n        if t[i] > t[i - 1] + 1:\n            min_time += t[i] - t[i - 1] - 1\n        else:\n            min_time += t[i] - t[i - 1]\n    return str(min_time)",
        "test": "assert solution(r\"\"\"",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 4835,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    t, N, M = map(int, stdin.split())\n    grid = []\n    for _ in range(N):\n        grid.append(list(stdin.strip()))\n    start = (0, 0)\n    for x in range(1, N):\n        if grid[x][0] == 'S':\n            start = (x, 0)\n            break\n    end = (0, 0)\n    for x in range(1, N):\n        if grid[x][M - 1] == 'S':\n            end = (x, M - 1)\n            break\n\n    dx = [0, 0, 1, -1]\n    dy = [1, -1, 0, 0]\n    min_zones = float('inf')\n\n    def can_pass(x, y, dir):\n        nx = x + dx[dir]\n        ny = y + dy[dir]\n        if 0 <= nx < N and 0 <= ny < M:\n            return grid[nx][ny] == '0'\n        return False\n\n    for dir in range(4):\n        x, y = start\n        zone = 1\n        while True:\n            if dir in [0, 1, 2, 3]:\n                if can_pass(x, y, dir):\n                    x += dx[dir]\n                    y += dy[dir]\n                    zone += 1\n                else:\n                    break\n            else:\n                if can_pass(x, y, dir):\n                    x += dx[dir]\n                    y += dy[dir]\n                    zone += 1\n                else:\n                    break\n            if x == end[0] and y == end[1]:\n                min_zones = min(min_zones, zone)\n                break\n\n    if min_zones == float('inf'):\n        return 'NOT POSSIBLE'\n    return str(min_zones)",
        "test": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0R11\") == \"NOT POSSIBLE\"",
        "num_ids": 2223,
        "indeed": false
    },
    {
        "number": 4836,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    weights = list(map(int, stdin.split()))\n    weights.sort(reverse=True)\n    \n    max_weight = 0\n    current_fruit = 0\n    count = 0\n    \n    for i in range(n):\n        if max_weight + weights[i] <= c:\n            max_weight += weights[i]\n            count += 1\n        else:\n            break\n    \n    return str(count)",
        "test": "assert solution(\"7 5\\n1 5 4 3 2 1 1\") == \"3\"",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 4837,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    rounds, symbols_by_player = parse_input(stdin)\n    \n    # Calculate scores\n    scores = calculate_scores(symbols_by_player)\n    \n    # Output results\n    return f\"{scores[0]}\\n{scores[1]}\"\n\ndef",
        "test": "assert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\") == \"10\\n15\"",
        "num_ids": 809,
        "indeed": false
    },
    {
        "number": 4838,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    times = [int(x) for x in stdin.split()]\n    current_time = 0\n    still_running = True\n\n    for time in times:\n        current_time += time\n        if current_time % 60 == 0:\n            current_time //= 60\n            still_running = False\n\n    if still_running:\n        return'still running'\n    else:\n        return str(current_time)\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 4839,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, *canister_data = map(int, stdin.split())\n    canisters = [canister for canister in canister_data if canister > 0]\n    balloons = [1] * n\n    max_fraction = 0\n    min_fraction = 1\n\n    while canisters:\n        min_balloon_index = min(range(n), key=lambda i: balloons[i] / canisters[0])\n        max_balloon_index = balloons.index(max(balloons))\n        if min_balloon_index == max_balloon_index:\n            return \"impossible\"\n        balloons[min_balloon_index] += canisters.pop(0)\n        max_fraction = min(max_fraction, balloons[max_balloon_index] / canisters[0])\n        min_fraction = max(min_fraction, balloons[min_balloon_index] / canisters[0])\n\n    return f\"{max_fraction:.6f}\"\n\n\ndef",
        "test": "assert solution(input()) == \"impossible\"",
        "num_ids": 596,
        "indeed": false
    },
    {
        "number": 4840,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    gunnar_dice = [int(x) for x in stdin.split()]\n    emma_dice = [int(x) for x in stdin.split()]\n\n    def get_probability(die: list, target: int) -> float:\n        total = sum(die)\n        count = sum(1 for num in die if num == target)\n        return count / total\n\n    gunnar_prob = get_probability(gunnar_dice, 50)\n    emma_prob = get_probability(emma_dice, 50)\n\n    if gunnar_prob > emma_prob:\n        return \"Gunnar\"\n    elif gunnar_prob < emma_prob:\n        return \"Emma\"\n    else:\n        return \"Tie\"",
        "test": "assert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"",
        "num_ids": 776,
        "indeed": false
    },
    {
        "number": 4841,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def process_word(word: str) -> int:\n        if word == \"mumble\":\n            return 0\n        else:\n            return int(word)\n\n    bites = int(stdin.split()[0])\n    words = stdin.split()[1:]\n    count = 0\n\n    for i in range(len(words)):\n        if isinstance(words[i], int):\n            count += words[i]\n        else:\n            count = 0\n\n    if count >= bites:\n        return \"makes sense\"\n    else:\n        return \"something is fishy\"",
        "test": "assert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"",
        "num_ids": 437,
        "indeed": false
    },
    {
        "number": 4842,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *vs = map(int, stdin.split())\n    vs = list(vs)\n    vs.append(vs[-1])\n    derivatives = []\n    for i in range(len(vs) - 1):\n        diff = vs[i + 1] - vs[i]\n        derivatives.append(diff)\n    min_degree = min(len(derivatives), 2)\n    polynomial = [1] + [0] * (min_degree - 1)\n    while min_degree > 1:\n        for i in range(1, len(derivatives) - 1):\n            derivatives[i] = derivatives[i - 1] + derivatives[i + 1]\n        polynomial.append(derivatives[1])\n        min_degree -= 1\n    degree = min_degree\n    polynomial = polynomial[:degree + 1]\n    polynomial = [int(v) for v in polynomial]\n    min_polynomial = [1] + [0] * (degree - 1)\n    for i in range(degree - 1):\n        min_polynomial[i] = min(derivatives)\n        derivatives.remove(min_polynomial[i])\n    min_polynomial.append(min(derivatives))\n    output = f\"{degree} \" + \" \".join(str(x) for x in min_polynomial)\n    return output.strip()",
        "test": "assert solution(\"4 9 25 49 81\") == \"2 121\\n\"",
        "num_ids": 1070,
        "indeed": false
    },
    {
        "number": 4843,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    queens = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    queens_positions = set()\n    \n    def is_valid(row: int, col: int, queens_positions: set) -> bool:\n        if (row, col) in queens_positions:\n            return False\n        \n        for r, c in queens:\n            if abs(r - row) == abs(c - col) or abs(r - row) + abs(c - col) == abs(r - c):\n                return False\n        \n        queens_positions.add((row, col))\n        return True\n    \n    def is_valid_board(board: list, queens_positions: set) -> bool:\n        return all(is_valid(row, col, queens_positions) for row, col in board)\n    \n    def find_valid_solution(board: list, queens_positions: set) -> None:\n        for row in range(len(board)):\n            for col in range(len(board)):\n                if is_valid(row, col, queens_positions):\n                    board[row][col] = '.'\n                    find_valid_solution(board, queens_positions)\n                    board[row][col] = 'Q'\n    \n    for queen in queens:\n        is_valid_board([queen], queens_positions)\n        if not is_valid_board(queens, queens_positions):\n            return \"INCORRECT\"\n    \n    find_valid_solution(queens, queens_positions)\n    return \"CORRECT\"",
        "test": "assert solution(\"8\\n0 0\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5\\n0 6\\n0 7\\n1 0\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 0\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\\n3 5\\n3 6\\n3 7\\n4 0\\n4 1\\n4 2\\n4 3\\n4 4\\n4 5\\n4 6\\n4 7\\n5 0\\n5 1\\n5 2\\n5 3\\n5 4\\n5 5\\n5 6\\n5 7\\n6 0\\n6 1\\n6 2\\n6 3\\n6 4\\n6 5\\n6 6\\n6 7\\n7 0\\n7 1\\n7 2\\n7 3\\n7 4\\n7 5\\n7 6\\n7 7\\n\") == \"INCORRECT\"",
        "num_ids": 1236,
        "indeed": false
    },
    {
        "number": 4844,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    matrix = []\n    for _ in range(N):\n        row = list(map(int, stdin.split()[1:]))\n        matrix.append(row)\n    \n    def is_valid(row):\n        for i in range(N):\n            for j in range(i+1, N):\n                if row[i] & row[j] == 0:\n                    return False\n        return True\n    \n    def find_valid_rows(matrix):\n        valid_rows = []\n        for row in matrix:\n            if is_valid(row):\n                valid_rows.append(row)\n        return valid_rows\n    \n    valid_rows = find_valid_rows(matrix)\n    \n    if len(valid_rows) == 1:\n        result = []\n        for row in valid_rows[0]:\n            result.append(row)\n        return \" \".join(map(str, result))\n    \n    result = []\n    for i in range(1, N):\n        for row in valid_rows[i]:\n            if not any(row & row_i == row for row_i in valid_rows[:i]):\n                result.append(row)\n    return \" \".join(map(str, result))",
        "test": "assert solution(\"\"\"3",
        "num_ids": 992,
        "indeed": false
    },
    {
        "number": 4845,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    day, month = map(int, stdin.split())\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if month == 2 and (day == 29 or (day == 28 and not (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)))):\n        days_in_month[1] = 29\n\n    if day < 1 or day > days_in_month[month - 1]:\n        return \"Invalid input\"\n\n    weekday = (day + (month - 1) * 10) % 7\n\n    return [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"][weekday]",
        "test": "assert solution(\"17 1\") == \"Saturday\"",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 4846,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    L, D, X = map(int, stdin.split())\n\n    def is_valid(n: int) -> bool:\n        digits_sum = sum(int(digit) for digit in str(n))\n        return L <= n <= D and digits_sum == X\n\n    N = max(L, D)\n    M = 0\n\n    while N <= M:\n        if is_valid(N):\n            M = N\n        else:\n            N -= 1\n\n    if not is_valid(M):\n        M = 0\n\n    return f\"{N}\\n{M}\"",
        "test": "assert solution('100\\n500\\n12') == '129\\n480\\n'",
        "num_ids": 682,
        "indeed": false
    },
    {
        "number": 4847,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    x_A, y_A, x_B, y_B, x_C, y_C = map(int, stdin.split())\n    N = int(stdin.split()[2])\n    apple_trees = []\n    for i in range(N):\n        x, y = map(int, stdin.split()[2 + i*3:2 + (i+1)*3])\n        apple_trees.append((x, y))\n    \n    # Calculate the area of land belonging to Ante\n    area = abs(x_A * (y_B - y_C) + x_B * (y_C - y_A) + x_C * (y_A - y_B)) / 2\n    \n    # Count the number of trees belonging to Ante\n    count = 0\n    for apple_tree in apple_trees:\n        if abs(apple_tree[0] - x_A) <= 1 and abs(apple_tree[1] - y_A) <= 1:\n            count += 1\n        if abs(apple_tree[0] - x_B) <= 1 and abs(apple_tree[1] - y_B) <= 1:\n            count += 1\n        if abs(apple_tree[0] - x_C) <= 1 and abs(apple_tree[1] - y_C) <= 1:\n            count += 1\n    \n    # Output the area and count\n    return f\"{area:.1f}\\n{count}\"",
        "test": "assert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\\n\"",
        "num_ids": 1194,
        "indeed": false
    },
    {
        "number": 4848,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n % 4 == 0:\n        return \"2\"\n\n    for i in range(1, n):\n        if n % i == 0:\n            return \"2\"\n\n    return str(n)",
        "test": "assert solution(\"3\") == \"2\"",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 4849,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split('\\n')\n    result = []\n\n    for row in rows:\n        if 'FBI' in row:\n            result.append(int(rows.index(row)))\n\n    if result:\n        result.sort()\n        return''.join(map(str, result))\n    else:\n        return 'HE GOT AWAY!'",
        "test": "assert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\\n\"",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 4850,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    triangles = []\n    for _ in range(n):\n        a, b, c = map(int, stdin.split()[1:])\n        triangles.append((a, b, c))\n    total_area = sum(a * b * c for a, b, c in triangles)\n    min_length = 0\n    for a, b, c in triangles:\n        for length in range(1, max(a, b, c)):\n            area = length ** 2 * 0.5\n            if area > 0 and area < total_area:\n                min_length = max(min_length, length)\n    return f\"{min_length:.4f}\"",
        "test": "assert solution(input()) == \"6.843530573929037\"",
        "num_ids": 766,
        "indeed": false
    },
    {
        "number": 4851,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 2\n    while True:\n        if i % sum(int(d) for d in str(i)) == 0:\n            yield i\n        i += 1",
        "test": "assert solution(\"25\") == \"27\"",
        "num_ids": 237,
        "indeed": false
    },
    {
        "number": 4852,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input as a list of (sign, num) pairs\n    nums = []\n    current_num = 0\n    current_sign = 1\n    for char in stdin:\n        if char == '+':\n            if current_sign == 1:\n                current_sign = -1\n            else:\n                nums.append((current_sign, current_num))\n                current_sign = 1\n                current_num = 0\n        else:\n            current_num = current_num * 10 + ord(char) - ord('0')\n    nums.append((current_sign, current_num))\n    \n    # Create a list of all possible integers from 0 to 9\n    all_ints = [i for i in range(10)]\n    \n    # Evaluate the expression using the given rule\n    result = 0\n    for sign, num in nums:\n        for int_ in all_ints:\n            if sign == -1:\n                result -= int_\n            else:\n                result += int_\n            if result == num:\n                break\n        else:\n            return \"No solution\"\n    \n    return str(result)",
        "test": "assert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 4853,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    p = a[0]\n    for i in range(1, n):\n        p = p + a[i] * i\n\n    constants = []\n    for i in range(n):\n        constants.append(p)\n        p = p + a[n]\n\n    print(*constants, sep=' ')\n    return ''\n",
        "test": "assert solution(\"2 2 -4 5\") == \"5 -2 4\"",
        "num_ids": 419,
        "indeed": false
    },
    {
        "number": 4854,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    message = list(map(int, stdin.split()))\n    \n    # Frequency Analysis\n    freq_dict = {}\n    for num in message:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    sorted_message = sorted(freq_dict.items(), key=lambda x: (-x[1], -x[0]))\n    \n    # Print sorted sequence\n    print(*[num for _, num in sorted_message])\n    \n    return \"\"",
        "test": "assert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\\n\") == \"1 1 1 3 3 3 2 2 2\\n\"",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 4855,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    articles, impact = map(int, stdin.split())\n\n    # Calculate the impact factor\n    citations = articles * impact\n    total_articles = articles\n\n    # Calculate the minimal number of bribed scientists\n    bribed_scientists = int(citations // total_articles)\n\n    return str(bribed_scientists)",
        "test": "assert solution(\"1 100\") == \"100\"",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 4856,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    reversed_a = str(b)[::-1]\n    reversed_b = str(a)[::-1]\n    return max(reversed_a, reversed_b)",
        "test": "assert solution(\"734 893\") == \"437\"",
        "num_ids": 268,
        "indeed": true
    },
    {
        "number": 4857,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    l, w = map(int, stdin.split())\n    # generate all possible words of length l\n    words = [''.join(sorted(word)) for word in itertools.permutations(string.ascii_lowercase, l)]\n    # filter words with weight <= w\n    words = [word for word in words if sum(ord(char) - ord('a') + 1 for char in word) <= w]\n    # if there is no word with weight <= w, return impossible\n    if not words:\n        return 'impossible'\n    # select the first word\n    return words[0]",
        "test": "assert solution(\"7 96\") == \"contest\"",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 4858,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    M, N, C = map(int, stdin.split())\n    frame1 = [list(input()) for _ in range(M)]\n    frame2 = [list(input()) for _ in range(M)]\n    \n    # shift the silhouette of the falcon in frame2 to match the position of the silhouette in frame1\n    shift_x, shift_y = 0, 0\n    if frame1[0][0] == C and frame2[0][0] == C:\n        shift_x = frame1[0].index(C)\n    if frame1[0][N-1] == C and frame2[0][N-1] == C:\n        shift_x = frame1[0].index(C) + N\n    if frame1[M-1][0] == C and frame2[M-1][0] == C:\n        shift_y = frame1[M-1].index(C)\n    if frame1[M-1][N-1] == C and frame2[M-1][N-1] == C:\n        shift_y = frame1[M-1].index(C) + N\n    \n    # extrapolate the falcon movement based on the two input frames\n    for i in range(M):\n        if i == M-1:\n            break\n        for j in range(N):\n            if frame1[i][j] == C:\n                frame1[i][j] = C\n            elif frame2[i][j] == C:\n                frame1[i][j] = frame2[i][j]\n            else:\n                if abs(frame1[i][j] - frame2[i][j]) > 1:\n                    # the falcon is moving in a non-straight line\n                    shift_x_rate, shift_y_rate = abs(frame1[i][j] - frame2[i][j]), abs(frame1[i][j] - frame2[i][j]) / 2\n                    frame1[i][j] = C\n                else:\n                    # the falcon is moving in a straight line\n                    shift_x_rate, shift_y_rate = 1, 1\n    \n    # move the silhouette of the falcon back to its original position\n    for i in range(M):\n        if i == M-1:\n            break\n        for j in range(N):\n            if frame1[i][j] == C:\n                frame1[i][j] = C\n            else:\n                frame1[i][j] = frame1[i][j] + shift_x\n                if frame1[i][j] >= N:\n                    frame1[i][j] -= N\n                frame1[i][j] = frame1[i][j] + shift_y\n                if frame1[i][j] >= N:\n                    frame1[i][j] -= N\n                \n    # print the extrapolated frame\n    result = []\n    for row in frame1:\n        result.append(''.join(row))\n    return '\\n'.join(result)",
        "test": "assert solution(\"2 2 'X'\\nX^\\n--\\n\\n.X\\n--\\n\") == \"\"\".^",
        "num_ids": 1939,
        "indeed": false
    },
    {
        "number": 4859,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    b, d, c, l = map(int, stdin.split())\n    \n    if l % 2 == 1 or l < b + c + d:\n        return \"impossible\"\n    \n    def helper(i, j, k):\n        if i >= len(animals) or j >= len(animals) or k >= len(animals):\n            return True\n        \n        if animals[i][0] + animals[j][0] + animals[k][0] > l:\n            return helper(i+1, j+1, k+1)\n        \n        if animals[i][0] + animals[j][0] + animals[k][0] == l:\n            return helper(i+1, j+1, k+1) or helper(i+1, j+1, k) or helper(i+1, j, k+1) or helper(i+1, j, k) or helper(i, j+1, k+1) or helper(i, j+1, k) or helper(i, j, k+1) or helper(i, j, k)\n        \n        return helper(i+1, j+1, k) or helper(i+1, j, k) or helper(i, j+1, k) or helper(i, j, k)\n    \n    animals = [(b, \"b\"), (d, \"d\"), (c, \"c\")]\n    result = \"\"\n    \n    for i in range(len(animals)):\n        for j in range(len(animals)):\n            for k in range(len(animals)):\n                if helper(i, j, k):\n                    result += f\"{animals[i][1]} {animals[j][1]} {animals[k][1]}\" + \"\\n\"\n                    break\n    \n    return result[:-1]",
        "test": "assert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\"",
        "num_ids": 1420,
        "indeed": false
    },
    {
        "number": 4860,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    recited_numbers = list(map(int, stdin.split()))\n    last_number = max(recited_numbers)\n\n    missing_numbers = [num for num in range(1, last_number + 1) if num not in recited_numbers]\n    missing_numbers.sort()\n\n    if missing_numbers:\n        return \"\\n\".join(map(str, missing_numbers))\n    else:\n        return \"good job\"",
        "test": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"1\\n3\\n6\\n12\"",
        "num_ids": 504,
        "indeed": true
    },
    {
        "number": 4861,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, p, s, v = map(int, stdin.split())\n    c = (1 + 1 / p) ** (1 / (2 * p))\n    t = (n * (np.log2(n)) ** (2 * p)) / (p * 1e9)\n    return f'{t:.10f} {c:.10f}'",
        "test": "assert solution(input()) == \"157079.04857106 15.598261092309\"",
        "num_ids": 1316,
        "indeed": false
    },
    {
        "number": 4862,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    if N == 1:\n        return \"0\"\n\n    relationships = []\n\n    if N == 2:\n        relationships.append((\"Character 1\", \"Character 2\"))\n        relationships.append((\"Character 2\", \"Character 1\"))\n    elif N == 3:\n        relationships.append((\"Character 1\", \"Character 2\"))\n        relationships.append((\"Character 1\", \"Character 3\"))\n        relationships.append((\"Character 2\", \"Character 3\"))\n        relationships.append((\"Character 1\", \"Character 2\", \"Character 3\"))\n    elif N == 4:\n        relationships.append((\"Character 1\", \"Character 2\"))\n        relationships.append((\"Character 1\", \"Character 3\"))\n        relationships.append((\"Character 1\", \"Character 4\"))\n        relationships.append((\"Character 2\", \"Character 3\"))\n        relationships.append((\"Character 2\", \"Character 4\"))\n        relationships.append((\"Character 3\", \"Character 4\"))\n        relationships.append((\"Character 1\", \"Character 2\", \"Character 3\", \"Character 4\"))\n\n    return str(len(relationships))",
        "test": "assert solution(\"1\") == \"0\"",
        "num_ids": 398,
        "indeed": true
    },
    {
        "number": 4863,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    answers = stdin.split()[1:]\n    score = 0\n\n    for i in range(n):\n        if answers[i] == 'A':\n            score += 4\n        elif answers[i] == 'B':\n            score += 3\n        elif answers[i] == 'C':\n            score += 2\n        elif answers[i] == 'D':\n            score += 1\n\n    return str(score)\n\nstdin = \"\"\"4\nA\nA\nA\nA\"\"\"\n\nprint(solution(stdin))",
        "test": "assert solution(\"4\\nA\\nA\\nA\\nC\") == \"3\"",
        "num_ids": 463,
        "indeed": false
    },
    {
        "number": 4864,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols, z_rows, z_cols = map(int, stdin.split())\n\n    article = []\n    for i in range(rows):\n        article.append(\"\".join(input().replace(\".\", \"Z\").replace(\"x\", \"y\") for _ in range(cols)))\n\n    result = [[None for _ in range(cols * z_cols)] for _ in range(rows * z_rows)]\n    for i in range(rows * z_rows):\n        for j in range(cols * z_cols):\n            if j < cols:\n                result[i][j] = article[i // z_rows][j]\n            else:\n                result[i][j] = article[i // z_rows][j % cols]\n\n    return \"\".join(\"\".join(map(str, row)) for row in result)\n",
        "test": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\\ndef solution(stdin: str) -> str:\\n    pass\"",
        "num_ids": 621,
        "indeed": false
    },
    {
        "number": 4865,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.strip())\n    for _ in range(cases):\n        direction, d, h, m = map(int, stdin.strip().split())\n        if direction == 1:\n            h += d // 60\n            m += d % 60\n            if m >= 60:\n                h += 1\n                m -= 60\n        else:\n            h -= d // 60\n            m -= d % 60\n            if m < 0:\n                h -= 1\n                m += 60\n        h = h % 24\n        m = m % 60\n        print(f\"{h:02d} {m:02d}\")",
        "test": "assert solution(\"2\\nB 10 12 00\\nB 20 12 30\\nB 30 12 00\\nB 40 12 30\") == \"0 0 0 10 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 1",
        "num_ids": 1785,
        "indeed": false
    },
    {
        "number": 4866,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    date_str = stdin.strip()\n    date_parts = date_str.split()\n    month = date_parts[0]\n    day = int(date_parts[1])\n\n    if month == \"JAN\" or month == \"MAR\" or month == \"MAY\" or month == \"JUL\" or month == \"AUG\" or month == \"OCT\":\n        if day == 31:\n            return \"yup\"\n        else:\n            return \"nope\"\n    elif month == \"APR\" or month == \"JUN\" or month == \"SEP\" or month == \"NOV\":\n        if day == 30:\n            return \"yup\"\n        else:\n            return \"nope\"\n    elif month == \"DEC\" or month == \"FEB\":\n        if day == 25:\n            return \"yup\"\n        else:\n            return \"nope\"",
        "test": "assert solution(\"JAN 1\") == \"nope\"",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 4867,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.split()[0].split())\n    U, L, R, D = map(int, stdin.split()[1].split())\n\n    board = [''for _ in range(M * N)]\n\n    for line in stdin.split()[2:]:\n        for i in range(N):\n            board[i + M * (L - 1):i + M * (L + R + 1)] = line.split()[i]\n\n    result = ['#'] * (M + 2 * U + 1) + ['.'] * U\n    result.extend(['#'] * L)\n    result.extend(['.'] * (M * (L + R + 1) - 1))\n    result.extend(['#'] * D)\n    result.extend(['.'] * U)\n    result.extend(['#'] * L)\n\n    return '\\n'.join(result)",
        "test": "assert solution(",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 4868,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Splitting the input string into lines\n    lines = stdin.split(\"\\n\")\n\n    # Creating a 8x8 board with empty cells\n    board = [['' for j in range(8)] for i in range(8)]\n\n    # Setting up the board from the input string\n    for i in range(8):\n        line = lines[i].split(':')\n        for j in range(8):\n            board[i][j] = line[j].replace(' ', '')\n\n    # Reversing each row of the board\n    for i in range(8):\n        board[i] = board[i][::-1]\n\n    # Reversing each column of the board\n    for i in range(8):\n        board[j][i] = board[i][j] for j in range(8)\n\n    # Reversing the board from top to bottom and left to right\n    board = board[::-1] for i in range(8)\n\n    # Reversing each row of the board\n    for i in range(8):\n        board[i] = board[i][::-1]\n\n    # Joining each row of the board into a single string\n    board = [\":\".join(row) for row in board]\n\n    # Joining each column of the board into a single string\n    board = [\":\".join(row) for row in zip(*board)]\n\n    # Joining the board into a single string\n    result = \"\\n\".join(board)\n\n    return result",
        "test": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\ndef solution(stdin: str) -> str:\\n\\tpass\\n\\n\"",
        "num_ids": 2138,
        "indeed": false
    },
    {
        "number": 4869,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, N = map(float, stdin.split())\n    if A > 100 or A <= 0:\n        return \"Need more materials!\"\n    elif N > 1000 or N <= 0:\n        return \"Need more materials!\"\n    else:\n        return \"Diablo is happy!\"",
        "test": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\\n\"",
        "num_ids": 334,
        "indeed": true
    },
    {
        "number": 4870,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    f, s, g, u, d = map(int, stdin.split())\n\n    # check if we can get from s to g by the given elevator\n    if s > g:\n        return \"use the stairs\"\n\n    # variables to keep track of the current and previous floors\n    current_floor = s\n    previous_floor = s\n\n    # variables to keep track of the number of up and down pushes needed\n    up_pushes = 0\n    down_pushes = 0\n\n    # keep track of the number of possible elevator pushes\n    possible_pushes = 0\n\n    # loop through all floors\n    while current_floor <= g:\n        # update the number of possible elevator pushes\n        possible_pushes += 1\n\n        # if we can reach the current floor by pressing up-button\n        if current_floor == previous_floor + 1:\n            up_pushes += 1\n            previous_floor += 1\n        # if we can reach the current floor by pressing down-button\n        elif current_floor == previous_floor - 1:\n            down_pushes += 1\n            previous_floor -= 1\n        # if we cannot reach the current floor by either button\n        else:\n            possible_pushes -= 1\n            break\n\n        # if we can reach the goal floor by either button, break the loop\n        if current_floor == g:\n            break\n\n        # update the current floor and previous floor\n        current_floor += 1\n        previous_floor = current_floor - 1\n\n    # if we cannot reach the goal floor by the given elevator, return \"use the stairs\"\n    if possible_pushes == 0:\n        return \"use the stairs\"\n\n    # return the minimum number of pushes needed\n    return min(up_pushes, down_pushes)",
        "test": "assert solution(\"10 1 10 10 1\") == \"use the stairs\", \"Test Case 3 failed\"",
        "num_ids": 851,
        "indeed": false
    },
    {
        "number": 4871,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    scores = list(map(int, stdin.split()[1:]))\n    \n    group_score = 0\n    for i, score in enumerate(scores):\n        group_score += score * (4/5) ** i\n        \n    return str(group_score) + '\\n' + str(sum(group_score for _ in range(n)) / n)",
        "test": "assert solution(stdin=\"\"\"3",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 4872,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    days = [int(x) for x in stdin.split()[1:]]\n    total_dirtiness = 0\n\n    for i in range(1, n):\n        total_dirtiness += (days[i] - days[i - 1]) * (n - i)\n\n    return str(total_dirtiness)\n\nprint(solution(\"5 1 45 65 84 346\"))  # Output: \"4\"",
        "test": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 4873,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_move(x: int, y: int) -> bool:\n        if x < 0 or x >= width or y < 0 or y >= height:\n            return False\n        return grid[x][y]!= \"#\"\n\n    width, height = map(int, stdin.split()[0].split())\n    grid = [list(row.strip()) for row in stdin.split()[1:]]\n\n    player_x, player_y = width // 2, height // 2\n    gold_count = 0\n\n    while True:\n        direction = input(\"Enter your move (up, down, left, right): \")\n        if direction not in {\"up\", \"down\", \"left\", \"right\"}:\n            continue\n\n        new_x, new_y = player_x, player_y\n        if direction == \"up\":\n            new_y -= 1\n        elif direction == \"down\":\n            new_y += 1\n        elif direction == \"left\":\n            new_x -= 1\n        elif direction == \"right\":\n            new_x += 1\n\n        if is_valid_move(new_x, new_y) and grid[new_x][new_y] in {\"G\", \"T\"}:\n            gold_count += 1\n            grid[new_x][new_y] = \".\"\n\n        player_x, player_y = new_x, new_y\n\n        if grid[player_x][player_y] == \"#\":\n            break\n\n    return str(gold_count)",
        "test": "assert solution(input(\"Sample Input\\n\")) == \"Sample Output\"",
        "num_ids": 1600,
        "indeed": false
    },
    {
        "number": 4874,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0].split())\n    grid = []\n    for _ in range(n):\n        grid.append(stdin.strip())\n\n    def get_moves(grid):\n        moves = 0\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '$':\n                    moves += 1\n        return moves\n\n    moves = get_moves(grid)\n    return str(moves)",
        "test": "assert solution('''13 50",
        "num_ids": 890,
        "indeed": false
    },
    {
        "number": 4875,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    result = \"\"\n    \n    for word in words:\n        if word[0].lower() in \"aeiouy\":\n            result += word + \"yay \"\n        else:\n            result += word[1:] + word[0].lower() + \"ay \"\n    \n    return result.strip()\n\nwith open(\"pig_latin_input.txt\") as f:\n    input_data = f.read()\n\noutput_data = solution(input_data)\nwith open(\"pig_latin_output.txt\", \"w\") as f:\n    f.write(output_data)",
        "test": "assert solution(\"not pig latin\") == \"not pig latin\"",
        "num_ids": 603,
        "indeed": false
    },
    {
        "number": 4876,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    menus = []\n    for _ in range(int(stdin.split()[0])):\n        restaurant, *menu_items = stdin.split()[1:].split('\\n')\n        menus.append((restaurant, menu_items))\n    for restaurant, menu_items in menus:\n        if 'pea soup' in menu_items and 'pancakes' in menu_items:\n            return restaurant\n    return 'Anywhere is fine I guess'",
        "test": "assert solution(input_str) == expected_output",
        "num_ids": 437,
        "indeed": false
    },
    {
        "number": 4877,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    steps = 0\n    while h > 0:\n        steps += 1\n        h -= a - b\n    return str(steps)\n\nprint(solution(\"5 0 15\"))  # Output: 3",
        "test": "assert solution(\"5 0 15\") == \"3\"",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 4878,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R1, S = map(int, stdin.split())\n    \n    if R1!= S:\n        return str(R1 - S)\n    else:\n        return str(S)",
        "test": "assert solution(\"10 10\") == \"10\", \"Incorrect output for example 3.\"",
        "num_ids": 316,
        "indeed": false
    },
    {
        "number": 4879,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    if a == 'South' and b == 'West' and c == 'East':\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution(\"South East West\") == \"No\"",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 4880,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.split())\n    k = stdin.split()[n+1:n+1+m]\n    a = stdin.split()[n+1+m:]\n\n    # encrypt with autokey\n    b = ['a'[i%26] for i in range(26)]\n    for i in range(m):\n        b[i] = chr(((ord(a[i]) - ord('a') + ord(k[i])) % 26) + ord('a'))\n\n    # decrypt\n    plaintext = ''.join(b)\n\n    return plaintext",
        "test": "assert solution('''",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 4881,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    if N == 1:\n        return 'Either'\n    elif N % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'",
        "test": "assert solution(\"10\") == \"Even\"",
        "num_ids": 282,
        "indeed": false
    },
    {
        "number": 4882,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = [int(line.strip()) for line in stdin.split('\\n')]\n    output_list = []\n    for cost in input_list:\n        output_list.append(len(str(cost)))\n    return '\\n'.join([str(x) for x in output_list])",
        "test": "assert solution(\"314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 4883,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    translations = list(map(str.strip, stdin.split('\\n')[1:]))\n    word_pairs = list(map(str.strip, stdin.split('\\n')[1 + len(translations):]))\n\n    for word_pair in word_pairs:\n        original, deciphered = word_pair.split(' ', 1)\n        original = [char.lower() for char in original]\n        deciphered = [char.lower() for char in deciphered]\n\n        def can_be_translated(char: str, translations: List[str]) -> bool:\n            for translation in translations:\n                if translation[0] == char:\n                    return True\n            return False\n\n        def translate(char: str, translations: List[str]) -> str:\n            for translation in translations:\n                if translation[0] == char:\n                    return translation[1]\n            return char\n\n        def can_be_translated_and_translated(char: str, translations: List[str]) -> bool:\n            if can_be_translated(char, translations):\n                return can_be_translated(translate(char, translations), translations)\n            return False\n\n        for i in range(len(original)):\n            if not can_be_translated_and_translated(original[i], translations):\n                return 'no'\n\n        if original!= deciphered:\n            return 'yes'\n\n    return 'yes'\n\ndef",
        "test": "assert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"yes\\nno\\nno\\nyes\\nyes\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\",
        "num_ids": 2280,
        "indeed": false
    },
    {
        "number": 4884,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, P = map(int, stdin.split())\n    contestants = []\n    for i in range(N):\n        contestants.append(stdin.split()[1])\n\n    carrots_handed_out = 0\n    for puff in range(P):\n        carrots_handed_out += (contestants.index('carrots?') + 1)\n\n    return str(carrots_handed_out)\n\ninput_text = '''\n2 1\ncarrots?\nbunnies\n'''\n\noutput = solution(input_text)\nprint(output)",
        "test": "assert solution(input()) == \"1\"",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 4885,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    board = [line.strip() for line in lines]\n    white_positions = []\n    black_positions = []\n    for row in board:\n        for col, piece in enumerate(row):\n            if piece == '+':\n                white_positions.append(f\"{piece.upper()}{8-col}\")\n            elif piece == '-':\n                white_positions.append(f\"{piece.lower()}{8-col}\")\n            elif piece == '|':\n                white_positions.append(f\"{piece.lower()}{8-col}\")\n            elif piece == ':':\n                black_positions.append(f\"{piece.upper()}{8-col}\")\n            elif piece == '.':\n                black_positions.append(f\"{piece.lower()}{8-col}\")\n    white_pieces = ','.join(white_positions)\n    black_pieces = ','.join(black_positions)\n    return f\"White: {white_pieces}\\nBlack: {black_pieces}\"",
        "test": "assert solution(input()) == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"",
        "num_ids": 1238,
        "indeed": false
    },
    {
        "number": 4886,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    def ask_question(i: int) -> str:\n        return \"Is the number prime? (true/false)\"\n\n    def answer_question(i: int, is_prime: bool) -> str:\n        return \"true\" if is_prime else \"false\"\n\n    def is_secret_number(num: int) -> bool:\n        return num == n\n\n    def is_correct(secret_number: int, num: int) -> bool:\n        for i in range(1, k):\n            is_prime = is_prime(num)\n            question = ask_question(i)\n            answer = answer_question(i, is_prime)\n            if is_prime:\n                is_prime = answer == \"true\"\n            elif is_secret_number(num):\n                is_prime = answer == \"true\"\n            else:\n                is_prime = is_prime(num) and answer == \"true\"\n            if is_prime!= eval(question):\n                return False\n        return True\n\n    secret_number = 0\n    while not is_correct(secret_number, secret_number):\n        if is_correct(secret_number + 1, secret_number + 1):\n            secret_number += 1\n        elif is_correct(secret_number - 1, secret_number - 1):\n            secret_number -= 1\n        else:\n            return \"You will become a flying monkey!\"\n\n    return \"Your wish is granted!\"\n",
        "test": "assert solution(\"8 3\") == \"Your wish is granted!\\n\"",
        "num_ids": 952,
        "indeed": false
    },
    {
        "number": 4887,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    fence_length = 2 * a + 2\n    return str(fence_length)\n\nprint(solution(\"16\"))",
        "test": "assert solution(\"16\") == \"16\"",
        "num_ids": 182,
        "indeed": false
    },
    {
        "number": 4888,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    tasks = list(map(int, stdin.split()[1:]))\n    tasks.sort(reverse=True)\n    count = 0\n    total_time = 0\n    for task in tasks:\n        total_time += task\n        if total_time <= T:\n            count += 1\n        else:\n            break\n    return str(count)",
        "test": "assert solution(\"6 180\\n45 30 55 20 80 20\") == \"4\\n\"",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 4889,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    rods = [int(l) for l in stdin.split()[1:]]\n    \n    rod_length = sum(rods)\n    javelin_length = rod_length * 2\n    \n    print(javelin_length)\n    \n    return \"\"",
        "test": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"",
        "num_ids": 293,
        "indeed": false
    },
    {
        "number": 4890,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    c = [int(x) for x in stdin.split()[1:s+1]]\n\n    # Calculate probabilities of getting a cold soda\n    p_cold = [sum(c[i:i+m]) for i in range(len(c)-m+1)]\n    p_cold = [p/sum(p_cold) for p in p_cold]\n\n    # Find the slots with the highest probabilities of getting a cold soda\n    max_prob = max(p_cold)\n    max_probs = []\n    for i in range(len(c)):\n        if p_cold[i] == max_prob:\n            max_probs.append(i)\n\n    # Refill the fridge in the optimal way\n    refill_scheme = [0]*s\n    for i in max_probs:\n        for j in range(m):\n            refill_scheme[i+j] += c[i]\n            if refill_scheme[i+j] >= d:\n                refill_scheme[i+j] = d\n                break\n    return \" \".join(map(str, refill_scheme))",
        "test": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"",
        "num_ids": 933,
        "indeed": false
    },
    {
        "number": 4891,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    king, queen, rook, bishop, knight, pawn = map(int, stdin.split())\n\n    if king + queen + rook + bishop + knight + pawn == 0:\n        return \"1 0 0 0 0 1\"\n\n    white_pieces = [king, queen, rook, bishop, knight]\n    black_pieces = [pawn]\n\n    if king > 0:\n        white_pieces.append(king)\n    if queen > 0:\n        white_pieces.append(queen)\n    if rook > 0:\n        white_pieces.append(rook)\n    if bishop > 0:\n        white_pieces.append(bishop)\n    if knight > 0:\n        white_pieces.append(knight)\n\n    total_white_pieces = sum(white_pieces)\n    total_black_pieces = sum(black_pieces)\n\n    min_white_pieces = max(white_pieces) + 1\n    max_black_pieces = 8 - min(black_pieces)\n\n    if total_white_pieces > max_black_pieces:\n        return str(-total_white_pieces) + \" \" * 5 + str(total_white_pieces - max_black_pieces)\n    else:\n        return str(-total_white_pieces) + \" \" * 5 + str(total_black_pieces - min_white_pieces)",
        "test": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"",
        "num_ids": 1133,
        "indeed": false
    },
    {
        "number": 4892,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, *passwords = stdin.split('\\n')[0].split()\n    n = int(n)\n    passwords = [(p.split()[0], float(p.split()[1])) for p in passwords]\n    passwords.sort(key=lambda x: x[1])\n    \n    correct_password = passwords[0][0]\n    count = 0\n    for i in range(1, n):\n        if passwords[i][0] == correct_password:\n            count += 1\n        else:\n            break\n    \n    return f\"{count:.4f}\"\n\nwith open(\"input.txt\", \"r\") as file:\n    input_data = file.read()\n\nprint(solution(input_data))",
        "test": "assert solution(input()) == \"1.3334\"",
        "num_ids": 1495,
        "indeed": false
    },
    {
        "number": 4893,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def get_line(stdin: str) -> List[int]:\n        return list(map(int, stdin.split()))\n\n    def min_distance(p: int, distances: List[int]) -> int:\n        def f(x: int) -> int:\n            return x * (x + 1) // 2 + 2 * x\n\n        return max(1, f(min(distances) + 1) - p * (f(len(distances)) - f(1)))\n\n    inputs = get_line(stdin)\n    n = inputs[0]\n    p = inputs[1]\n    distances = get_line(stdin)\n\n    return str(min_distance(p, distances))\n",
        "test": "assert solution(\"3 1\\n1 2 4\") == \"1\"",
        "num_ids": 609,
        "indeed": false
    },
    {
        "number": 4894,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    notes = stdin.split('\\n')[1].split()\n    notes = [(p, int(d)) for p, d in notes]\n    notes.sort(key=lambda x: (x[1], x[0].lower(), x[0].islower()))\n    \n    clefs = {'C': 'F', 'D': 'E', 'E': 'D', 'F': 'C', 'G': 'B', 'A': 'G', 'B': 'F'}\n    clef = clefs[notes[0][0]]\n    \n    result = f\"{clef}:\\n\"\n    for p in notes:\n        note = p[0]\n        duration = p[1]\n        num_stars = 1 + 2 * (duration - 1)\n        result += f\"{note:>2}: {\"*\" * num_stars}\\n\"\n    \n    return result",
        "test": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"G:F:E:D:C:B:A:g:f:e:d:c:b:a:def solution(stdin: str) -> str:\\n\\tpass\\n\"",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 4895,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    sticks = list(map(int, stdin.split()))\n    if len(sticks)!= 3:\n        return \"impossible\"\n\n    def is_triangle(a, b, c):\n        return a + b > c and a + c > b and b + c > a\n\n    a, b, c = sticks\n    if not is_triangle(a, b, c) and not is_triangle(a, c, b) and not is_triangle(b, a, c):\n        return \"possible\"\n    else:\n        return \"impossible\"",
        "test": "assert solution(\"10\\n1 1 1 1 1 1 1 1 1 1\\n\") == \"impossible\"",
        "num_ids": 603,
        "indeed": false
    },
    {
        "number": 4896,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    brick_widths = [int(x) for x in stdin.split()[1:]]\n\n    tower_count = 0\n    current_tower = []\n\n    for brick_width in brick_widths:\n        if brick_width <= len(current_tower):\n            tower_count += 1\n        else:\n            tower_count += 1\n            current_tower = []\n\n    return str(tower_count)",
        "test": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == \"3\\n\"",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 4897,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def runner_to_leg(runner_name: str, leg: int) -> str:\n        if leg == 1:\n            return runner_name\n        if leg == 2:\n            return runner_to_leg(runner_name, 1)\n        if leg == 3:\n            return runner_to_leg(runner_name, 1)\n        if leg == 4:\n            return runner_to_leg(runner_name, 1)\n\n    runners = []\n    for _ in range(int(stdin.split('\\n')[0])):\n        name, a, b = stdin.split('\\n')[1:5]\n        runners.append((name, float(a), float(b)))\n\n    times = [runner[2] for runner in runners]\n    times.sort(reverse=True)\n    best_time = times[0]\n\n    result = f\"{best_time:.10f}\\n\"\n    for runner in runners:\n        leg = 4 - runner[2:].index(max(runner[2:]))\n        result += f\"{runner[0]}\\n\"\n\n    return result\n",
        "test": "assert solution(\"6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE\"",
        "num_ids": 995,
        "indeed": false
    },
    {
        "number": 4898,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    minion_preferences = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    \n    def find_min_distance(preferences: list[int]) -> int:\n        min_diff = 2 * n + 1\n        for i in range(len(preferences)):\n            for j in range(i + 1, len(preferences)):\n                if preferences[i][0] > preferences[j][0]:\n                    diff = preferences[i][0] - preferences[j][0]\n                else:\n                    diff = preferences[j][0] - preferences[i][0]\n                min_diff = min(min_diff, diff)\n        return min_diff\n\n    min_distance = min([find_min_distance(prefs) for prefs in minion_preferences])\n    min_rooms = min_distance // 2 + (min_distance % 2)\n\n    return str(min_rooms)",
        "test": "assert solution(\"3\\n1 2\\n2 4\\n5 6\") == \"2\"",
        "num_ids": 709,
        "indeed": false
    },
    {
        "number": 4899,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return s + s.replace('e', 'ee')",
        "test": "assert solution(\"hey\") == \"heey\"",
        "num_ids": 196,
        "indeed": false
    },
    {
        "number": 4900,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    distances = list(map(int, stdin.split('\\n')[1:]))\n    table = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                table[i][j] = distances[n*i+j]\n\n    def reconstruct_roads(table):\n        visited = set()\n        road = []\n        for village in range(n):\n            if table[0][village] == 0:\n                continue\n            if table[village][n-1] == 0:\n                continue\n            path = [village]\n            while path[-1]!= n-1:\n                for neighbor in range(n):\n                    if neighbor == n-1:\n                        continue\n                    if table[path[-1]][neighbor] > 0 and neighbor not in visited:\n                        visited.add(neighbor)\n                        path.append(neighbor)\n            road.append(path)\n        return road\n\n    road_paths = reconstruct_roads(table)\n    result = ''\n    for i in range(len(road_paths) - 1):\n        for j in range(i + 1, len(road_paths)):\n            result += f\"{road_paths[i][-1]} {road_paths[j][-1]}\\n\"\n\n    return result",
        "test": "assert solution(\"5\\n1 2 3 4 5\\n2 3 4 5 6\\n3 4 5 6 7\\n4 5 6 7 8\\n5 6 7 8 9\\n\") == \"1 2\\n2 3\\n3 4\\n4 5\\n1 5\\n2 4\\n3 5\\n4 6\\n5 6\\n1 3\\n2 3\\n3 4\\n4 5\\n5 6\\n1 4\\n2 4\\n3 5\\n4 6\\n5 6\\n1 5\\n2 5\\n3 6\\n4 6\\n5 6\\n1 6\\n2 6\\n3 6\\n4 6\\n5 6\\n\"",
        "num_ids": 1020,
        "indeed": false
    },
    {
        "number": 4901,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Divide\n    message = list(stdin)\n    half_len = len(message) // 2\n    first_half = message[:half_len]\n    second_half = message[half_len:]\n\n    # Rotate\n    rotation = 0\n    for char in first_half:\n        rotation += ord(char) - ord('A') + 1\n        rotation %= 26\n    for char in second_half:\n        rotation += ord(char) - ord('A') + 1\n        rotation %= 26\n\n    # Merge\n    merged = [chr((ord(first_half[i]) - rotation + ord(second_half[i])) % 26 + ord('A')) for i in range(len(first_half))]\n\n    return ''.join(merged)",
        "test": "assert solution(\"EWPGAJRB\") == \"ABCD\"",
        "num_ids": 609,
        "indeed": false
    },
    {
        "number": 4902,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    def is_anagram(s1: str, s2: str) -> bool:\n        if len(s1)!= len(s2):\n            return False\n        counts = [0] * 26\n        for c in s1:\n            counts[ord(c) - ord('a')] += 1\n        for c in s2:\n            counts[ord(c) - ord('a')] -= 1\n        for count in counts:\n            if count!= 0:\n                return False\n        return True\n\n    def count_peragrams(s: str) -> int:\n        peragrams = 0\n        for i in range(len(s)):\n            for j in range(i + 1, len(s) + 1):\n                if is_palindrome(s[i:j]) and is_anagram(s, s[i:j]):\n                    peragrams += 1\n        return peragrams\n\n    s = stdin.strip()\n    if not s:\n        return \"0\"\n\n    min_count = float('inf')\n    for i in range(len(s) + 1):\n        for j in range(len(s) + 1 - i):\n            count = count_peragrams(s[j:j + i])\n            if count < min_count:\n                min_count = count\n\n    return str(min_count)\n",
        "test": "assert solution(\"racecar\") == \"0\"",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 4903,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    aahs = stdin.split()[0]\n    doctor_aah = stdin.split()[1]\n\n    if len(aahs)!= len(doctor_aah):\n        return \"no\"\n\n    for aah, doctor_aah_char in zip(aahs, doctor_aah):\n        if aah.lower()!= doctor_aah_char.lower():\n            return \"no\"\n\n    return \"go\"\n\ndef",
        "test": "assert solution(\"aaah\\naaaaah\") == \"no\"",
        "num_ids": 419,
        "indeed": false
    },
    {
        "number": 4904,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    alice_scores = []\n    barbara_scores = []\n    for c in stdin:\n        if c.isalpha():\n            if c == 'A':\n                alice_scores.append(int(stdin[1]))\n            elif c == 'B':\n                barbara_scores.append(int(stdin[1]))\n        else:\n            alice_scores.append(int(c))\n            barbara_scores.append(int(stdin[1]))\n            stdin = stdin[2:]\n    alice_scores.sort()\n    barbara_scores.sort()\n    if alice_scores == barbara_scores:\n        if alice_scores[0] + 2 == barbara_scores[-1]:\n            return 'B'\n        else:\n            return 'A'\n    elif alice_scores > barbara_scores:\n        return 'A'\n    else:\n        return 'B'",
        "test": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"",
        "num_ids": 1751,
        "indeed": false
    },
    {
        "number": 4905,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    intersections = list(map(int, stdin.split()))\n    a, b, k, g = map(int, stdin.split())\n    mister_georges_route = list(map(int, stdin.split()))\n\n    blocked_streets = []\n    for intersection, mister_georges_route_length in zip(intersections, mister_georges_route):\n        if intersection == a:\n            blocked_streets.append((intersection, mister_georges_route_length))\n        elif intersection == b:\n            blocked_streets.append((intersection, 240))\n        else:\n            blocked_streets.append((intersection, 240))\n\n    blocked_streets.sort(key=lambda x: x[1])\n\n    time_spent = 0\n    for blocked_street in blocked_streets:\n        time_spent += blocked_street[1]\n        if time_spent > k:\n            break\n\n    return str(time_spent)\n\ntest_input = '''\n6 5\n1 6 20 4\n5 3 2 4\n1 2 2\n2 3 8\n2 4 3\n3 6 10\n3 5 15\n'''\n\nprint(solution(test_input))\n",
        "test": "assert solution(input()) == \"21\"",
        "num_ids": 967,
        "indeed": false
    },
    {
        "number": 4906,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    if input_list[0] == 'E':\n        message = input_list[1]\n        compressed_message = ''\n        encoded_string = ''\n        i = 0\n        while i < len(message):\n            if i + 1 < len(message) and message[i] == message[i+1]:\n                encoded_string += str(message.count(message[i])) + message[i]\n                i += 1\n            else:\n                encoded_string += message[i]\n                i += 1\n        return encoded_string\n    elif input_list[0] == 'D':\n        compressed_message = input_list[1]\n        original_string = ''\n        i = 0\n        while i < len(compressed_message):\n            run_length = int(compressed_message[i])\n            if i + run_length < len(compressed_message):\n                original_string += compressed_message[i:i+run_length]\n                i += run_length + 1\n            else:\n                original_string += compressed_message[i:]\n                break\n        return original_string\n    else:\n        return 'Error: Invalid input'",
        "test": "assert solution(\"D H3e2l3o1W1o3r4l2d1!2\") == \"HHHeellloWooorrrrlld!!\"",
        "num_ids": 704,
        "indeed": false
    },
    {
        "number": 4907,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    alice_win = False\n    alice_break = 1\n    bob_break = n\n\n    while not alice_win:\n        if alice_break > bob_break:\n            alice_win = True\n            break\n        else:\n            alice_break += 1\n\n    if alice_win:\n        return \"Alice\"\n    else:\n        return \"Bob\"",
        "test": "assert solution(\"2\") == \"Alice\"",
        "num_ids": 407,
        "indeed": false
    },
    {
        "number": 4908,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] == nums[k]:\n                    return f\"{nums[i]}+{nums[j]}={nums[k]}\"\n    return \"No valid solution found\"\n",
        "test": "assert solution(\"5 3 8\") == \"5+3=8\"",
        "num_ids": 641,
        "indeed": false
    },
    {
        "number": 4909,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, *D = map(int, stdin.split())\n    graph = [[] for _ in range(N)]\n    for i, d in enumerate(D):\n        for j in range(d):\n            graph[i].append(j)\n\n    def bfs(start: int, visited: set) -> bool:\n        queue = deque([start])\n        visited.add(start)\n        while queue:\n            current = queue.popleft()\n            for neighbor in graph[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append(neighbor)\n            if len(visited) == N:\n                return True\n        return False\n\n    result = \"NO\"\n    for start in range(N):\n        visited = set()\n        if bfs(start, visited):\n            result = \"YES\"\n            break\n\n    return result\n",
        "test": "assert solution(\"8 3 2 2 1 1 3 1 3\") == \"NO\", \"Test case 4\"",
        "num_ids": 728,
        "indeed": false
    },
    {
        "number": 4910,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    categories = []\n    for _ in range(n):\n        categories.append(stdin.split()[1])\n    categories = list(set(categories))\n    categories.sort()\n    return \" \".join(categories)\n\nsample_input = \"\"\"10\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\"\"\"\n\nprint(solution(sample_input)) # Output: mummy ghost witch",
        "test": "assert solution(open(\"test_input.txt\").read()) == \"ghostmummywitch\"",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 4911,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Initialize variables\n    attributes = stdin.split()[1:]\n    song_list = []\n\n    # Parse input\n    for line in stdin.splitlines()[2:]:\n        song_attributes = line.split()\n        song = {}\n        for i in range(len(song_attributes)):\n            song[attributes[i]] = song_attributes[i]\n        song_list.append(song)\n\n    # Sort songs\n    for attribute in stdin.split()[1:]:\n        if attribute in [\"Artist\", \"Album\", \"Song_Title\", \"Length_seconds\"]:\n            song_list.sort(key=lambda x: (x[attribute], x[\"Artist\"], x[\"Song_Title\"]))\n        elif attribute == \"Artist\":\n            song_list.sort(key=lambda x: (x[attribute], x[\"Song_Title\"], x[\"Length_seconds\"]))\n        elif attribute == \"Song_Title\":\n            song_list.sort(key=lambda x: (x[attribute], x[\"Artist\"], x[\"Length_seconds\"]))\n        elif attribute == \"Length_seconds\":\n            song_list.sort(key=lambda x: (x[attribute], x[\"Artist\"], x[\"Song_Title\"]))\n\n    # Print results\n    for i in range(len(song_list)):\n        song = song_list[i]\n        for attribute in attributes:\n            print(song[attribute], end=\" \")\n        print()\n\n    return \"\"\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 723,
        "indeed": false
    },
    {
        "number": 4912,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    h, w, n = map(int, stdin.split())\n    x = list(map(int, stdin.split()[1:]))\n\n    def subset_sum(piles: List[List[int]], target: int) -> int:\n        dp = [[0] * (target + 1) for _ in range(len(piles) + 1)]\n        for i in range(1, len(piles) + 1):\n            for j in range(1, target + 1):\n                if i == 1:\n                    dp[i][j] = 1\n                else:\n                    for k in range(1, len(piles[i - 1]) + 1):\n                        dp[i][j] += dp[i - 1][j - k]\n                        if j - k >= 0:\n                            dp[i][j] += dp[i - 1][j - k] * piles[i - 1][k - 1]\n        return dp[len(piles)][target]\n\n    def bricks_needed(piles: List[List[int]]) -> int:\n        total_length = sum(piles[0])\n        return total_length - subset_sum(piles, total_length)\n\n    piles = [[x[i] for x in x] for i in range(n)]\n\n    if bricks_needed(piles) <= 0:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"3 10 10\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n\") == \"NO\"",
        "num_ids": 1807,
        "indeed": false
    },
    {
        "number": 4913,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    participants = [list(line) for line in stdin.split(\"\\n\")[1:]]\n    num_a, num_b, num_c = 0, 0, 0\n    for participant in participants:\n        if participant[0] == 'Y':\n            if participant[1] == 'A':\n                num_a += 1\n            elif participant[1] == 'B':\n                num_b += 1\n            else:\n                num_c += 1\n    a_efficacy = (1 - 0.666667) / 0.666667\n    b_efficacy = (1 - 0.5) / 0.5\n    c_efficacy = (1 - 0.333333) / 0.333333\n\n    return f\"{a_efficacy:.2f}\\n{b_efficacy:.2f}\\n{c_efficacy:.2f}\"",
        "test": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\\nYYNY\") == \"Not Effective\\n66.666667\\n50.000000\"",
        "num_ids": 1312,
        "indeed": false
    },
    {
        "number": 4914,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    correct_answers = stdin.split()[1]\n    boys = [\"Adrian\", \"Bruno\", \"Goran\"]\n    max_correct_answers = 0\n    winner = \"\"\n\n    for boy in boys:\n        sequence = [correct_answers[i] for i in range(N)]\n        correct_sequence = [sequence[i] for i in range(N)]\n        for i in range(1, N):\n            if sequence[i] == correct_answers[i]:\n                correct_sequence.remove(correct_answers[i])\n\n        if len(correct_sequence) > max_correct_answers:\n            max_correct_answers = len(correct_sequence)\n            winner = boy\n\n    return str(max_correct_answers) + \"\\n\" + winner",
        "test": "assert solution(\"5\\nBAACC\") == \"3\\nBruno\"",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 4915,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    submissions = []\n    for line in lines:\n        parts = line.split()\n        minutes, letter, result = int(parts[0]), parts[1], parts[2]\n        submissions.append((minutes, letter, result))\n    submissions.sort(key=lambda x: (-x[0], x[1]))\n    right = 0\n    time_score = 0\n    for minutes, letter, result in submissions:\n        if result == \"right\":\n            right += 1\n        if letter == \"E\":\n            time_score += minutes * 4\n        elif letter == \"A\":\n            time_score += minutes * 4 + 40\n        elif letter == \"B\":\n            time_score += minutes * 3\n        elif letter == \"C\":\n            time_score += minutes * 3 + 20\n        elif letter == \"D\":\n            time_score += minutes * 2\n        if right > 0:\n            break\n    return f\"{right} {time_score}\"",
        "test": "assert solution('7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n-1') == '4 502'",
        "num_ids": 1119,
        "indeed": false
    },
    {
        "number": 4916,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    matrix = []\n    for i in range(n):\n        row = list(map(int, stdin.split()))\n        matrix.append(row)\n\n    visited = [False] * (k + 1)\n    visited[1] = True\n\n    start = 1\n    end = k\n    distance = 0\n    while not visited[end]:\n        for num in range(1, k + 1):\n            if not visited[num] and manhattan_distance(matrix, start, num, end) < distance:\n                distance = manhattan_distance(matrix, start, num, end)\n                end = num\n\n    if end == k:\n        return str(distance)\n    else:\n        return \"-1\"\n\n\ndef",
        "test": "assert solution(\"\"\"10 5",
        "num_ids": 925,
        "indeed": false
    },
    {
        "number": 4917,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, *intervals = [int(x) for x in stdin.split()]\n    \n    def count_intervals(start, end):\n        count = 0\n        while start <= end:\n            start += 1\n            count += 1\n        return count\n    \n    total_intervals = sum(count_intervals(a, b) for a, b in intervals)\n    if total_intervals % 2 == 1:\n        return \"gunilla has a point\"\n    else:\n        return \"edward is right\"",
        "test": "assert solution(\"2\\n5 9\\n1 2\\n3 5\\n9 11\") == \"edward is right\", \"Failed test 2\"",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 4918,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n\n    def merge(a: int, b: int):\n        a = find(a)\n        b = find(b)\n\n        if a!= b:\n            ranks[a] += ranks[b]\n            parent[b] = a\n\n    def find(x: int) -> int:\n        if parent[x] == x:\n            return x\n        else:\n            return find(parent[x])\n\n    for _ in range(q):\n        line = stdin.split()\n        if line[0] == \"t\":\n            a, b = map(int, line[1:])\n            merge(a, b)\n        elif line[0] == \"s\":\n            x = int(line[1])\n            print(find(x))\n\n    return \"\"\n\n\nsample_input = \"\"\"10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10\"\"\"\n\nprint(solution(sample_input))",
        "test": "assert solution(\"10 11\\nt 1 10\\nt 1 2\\nt 1 3\\ns 1\\ns 2\\ns 3\\ns 4\\nt 5 6\\ns 5\\ns 6\\ns 10\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"",
        "num_ids": 883,
        "indeed": false
    },
    {
        "number": 4919,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    trips = {line.split()[0]: int(line.split()[1]) for line in stdin.split('\\n') if line.split()[0]!= 'Country'}\n    queries = {line.split()[0]: int(line.split()[1]) for line in stdin.split('\\n') if line.split()[0] == 'Country'}\n    \n    for year, trip_count in trips.items():\n        if trip_count > queries[year]:\n            del queries[year]\n            break\n            \n    return''.join(str(year) for year in sorted(queries.values()))\n\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n\nprint(solution(stdin))",
        "test": "assert solution(open('sample_input.txt').read()) == '''\\",
        "num_ids": 620,
        "indeed": false
    },
    {
        "number": 4920,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    types = list(set(stdin))\n    event_types = {}\n    for i, type in enumerate(types):\n        event_types[type] = i\n\n    n = len(stdin)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i):\n            if dp[j] and stdin[j]!= stdin[i]:\n                dp[i] += dp[j]\n                break\n\n    return str(dp[-1])",
        "test": "assert solution('abbcccddddeeeee') == '10'",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 4921,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    words = set()\n    for line in stdin.split('\\n'):\n        for word in line.split():\n            words.add(word.lower())\n    output = []\n    for word in words:\n        output.append(word)\n        if output.count(word) == 1:\n            output[-1] = '.'\n    return''.join(output)",
        "test": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nHumanity\\n\") == \"Engineering will save the world from inefficiency.\\nis a blight on.. and its\\nhumanity.\"",
        "num_ids": 469,
        "indeed": false
    },
    {
        "number": 4922,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    clauses = stdin.split('\\n')\n    clauses = [tuple(map(int, clause.split())) for clause in clauses]\n    n = len(clauses[0])\n\n    def is_satisfiable(clause: tuple) -> bool:\n        literals, assignment = clause\n        for literal in literals:\n            if literal > 0:\n                if assignment[literal - 1]!= False:\n                    return False\n            elif literal < 0:\n                if assignment[n + literal]!= True:\n                    return False\n        return True\n\n    satisfactory = True\n    for clause in clauses:\n        if len(clause) == 8 and is_satisfiable(clause):\n            satisfactory = False\n            break\n    return \"satisfactory\" if satisfactory else \"unsatisfactory\"",
        "test": "assert solution(\"10 4\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n-1 2 -3\\n-1 2 3\\n1 2 -3\\n1 2 3\") == \"satisfactory\"",
        "num_ids": 1114,
        "indeed": false
    },
    {
        "number": 4923,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = list(set(a))\n    if not a:\n        return \"none\"\n    elif len(a) == 1:\n        return str(a[0])\n    else:\n        return str(max(a))",
        "test": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\", \"Test 1 failed\"",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 4924,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    current_time, explosion_time = stdin.split('\\n')\n    \n    # Convert strings to datetime objects\n    current_time = datetime.datetime.strptime(current_time, '%H:%M:%S')\n    explosion_time = datetime.datetime.strptime(explosion_time, '%H:%M:%S')\n    \n    # Calculate time to the explosion\n    time_to_explosion = explosion_time - current_time\n    \n    # Check if time to explosion is within valid range\n    if time_to_explosion.total_seconds() < 1 or time_to_explosion.total_seconds() > 86400:\n        return \"Invalid input\"\n    \n    # Convert time to hh:mm:ss format\n    time_to_explosion_str = time_to_explosion.strftime('%H:%M:%S')\n    \n    return time_to_explosion_str",
        "test": "assert solution('23:59:59\\n00:00:00') == '00:00:00'",
        "num_ids": 700,
        "indeed": false
    },
    {
        "number": 4925,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, n = map(int, stdin.split())\n    if n > l:\n        return \"0\"\n\n    # find the smallest possible number of layers\n    k = 1\n    while True:\n        # if the regular roll runs out, we can use the backup roll\n        if l - n >= k * l:\n            break\n        # otherwise, we need to use more layers\n        k += 1\n\n    # calculate the total amount of paper we need to buy\n    total_paper = k * l * (k + 1) // 2\n\n    # if we have enough paper, the crises will never happen\n    if total_paper >= n:\n        return str(k)\n\n    # otherwise, we need to find the next layer that has enough paper\n    next_layer = 0\n    while total_paper < n:\n        next_layer += 1\n        total_paper += k * l * (k + 1) // 2\n\n    return str(next_layer)",
        "test": "assert solution(\"31 6\") == \"4\"",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 4926,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    def factorial(n: int) -> int:\n        return 1 if n == 0 else n * factorial(n - 1)\n\n    e = 0\n    for i in range(n + 1):\n        e += 1 / factorial(i)\n\n    return str(e)",
        "test": "assert solution('3') == '2.6666666666666665'",
        "num_ids": 231,
        "indeed": true
    },
    {
        "number": 4927,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    N, P, Q = map(int, stdin.split())\n    if N % 2 == 0:\n        return 'opponent'\n    elif P > Q:\n        return 'opponent'\n    elif P < Q:\n        return 'paul'\n    else:\n        return 'opponent'",
        "test": "assert solution(\"1 5 2\") == \"opponent\"",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 4928,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    cuts = 0\n    pieces = 0\n\n    while pieces < n and cuts < n:\n        cuts += 1\n        pieces = ((cuts - 1) // 2) * 2 + 2\n\n    if pieces < n:\n        return \"NO\"\n    else:\n        return str(pieces)",
        "test": "assert solution(\"1\") == \"2\"",
        "num_ids": 776,
        "indeed": false
    },
    {
        "number": 4929,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    S, P = stdin.split('\\n')\n    S, P = S.strip(), P.strip()\n    \n    def is_valid(password: str) -> bool:\n        if password == S or password.islower() == S.islower():\n            return True\n        \n        for digit in '0123456789':\n            if digit in password and digit + digit in password and digit + digit + digit + digit in password:\n                password = password.replace(digit, '')\n                password = password.replace(digit, '').lower()\n                if password == S or password.islower() == S.islower():\n                    return True\n        \n        return False\n    \n    return 'Yes' if is_valid(P) else 'No'",
        "test": "assert solution(\"123\\n123a\") == \"No\"",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 4930,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    decoded_words = []\n    \n    for word in words:\n        decoded_word = \"\"\n        for char in word:\n            if char.lower() in 'aeiou':\n                decoded_word += char.lower() + 'p' + char.lower()\n            else:\n                decoded_word += char\n        decoded_words.append(decoded_word)\n    \n    return \" \".join(decoded_words)",
        "test": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"",
        "num_ids": 1356,
        "indeed": false
    },
    {
        "number": 4931,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    X, Y = map(int, stdin.split())\n\n    possible_temps = []\n    for a in range(1, 101):\n        temp = (a * X + Y) / lcm(X, a)\n        possible_temps.append(temp)\n\n    if len(possible_temps) == 0:\n        return \"IMPOSSIBLE\"\n\n    if len(possible_temps) == 1:\n        return str(possible_temps[0])\n\n    if all(possible_temps[0] <= temp <= possible_temps[-1] for temp in possible_temps):\n        return \"ALL GOOD\"\n\n    return \"IMPOSSIBLE\"",
        "test": "assert solution(\"32 2\") == \"-32\"",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 4932,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    a, b, c, d = map(int, stdin.split())\n    p, m, g = map(int, input().split())\n\n    # Calculate attacking dogs\n    dogs = []\n    if a > 0:\n        dogs.append('one')\n    if b > 0:\n        dogs.append('both')\n    if c > 0:\n        dogs.append('both')\n    if d > 0:\n        dogs.append('both')\n\n    # Determine the winner\n    winner = 'none'\n    if 'both' in dogs and 'one' in dogs:\n        winner = 'both'\n    elif 'one' in dogs:\n        winner = 'one'\n\n    # Output the winner\n    print(winner)\n    return winner",
        "test": "assert solution(\"2 2 3 3\\n1 3 4\") == \"both\\none\\none\"",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 4933,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    numbers.sort()\n    \n    for i in range(len(numbers) - 2):\n        diff = numbers[i + 2] - numbers[i + 1]\n        if diff == numbers[i + 1] - numbers[i]:\n            return str(numbers[i + 2])\n    \n    return \"No solution found.\"",
        "test": "assert solution('4 6 8') == '10'",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 4934,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    h, v = map(int, stdin.split())\n    if v > 89:\n        raise ValueError(\"Invalid input: v should be at most 89\")\n    \n    ladder_length = h * (1 + (v/100))\n    \n    return str(int(ladder_length) + 1)",
        "test": "assert solution(\"500 70\") == \"533\"",
        "num_ids": 264,
        "indeed": false
    },
    {
        "number": 4935,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    g, n = map(int, stdin.split())\n    lines = []\n    for _ in range(n):\n        distance, angle = map(int, input().split())\n        lines.append((distance, math.radians(angle)))\n\n    def height(d, angle):\n        return d * math.tan(angle)\n\n    def distance(height, angle):\n        return height / math.tan(angle)\n\n    segments = [(0, 0)]\n    for distance, angle in lines:\n        height_above_top = height(0, angle)\n        for i, (height, angle) in enumerate(segments):\n            if height_above_top <= height:\n                segments[i] = (height, angle)\n                break\n            else:\n                segments.append((height, angle))\n        else:\n            segments.append((height_above_top, angle))\n\n    speeds = []\n    for height, _ in segments:\n        speeds.append(math.sqrt(2 * g * height))\n\n    return \"\\n\".join(map(str, speeds))\n\nwith open(\"input.txt\", \"r\") as f:\n    input_data = f.read()\n\noutput_data = solution(input_data)\n\nwith open(\"output.txt\", \"w\") as f:\n    f.write(output_data)",
        "test": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"",
        "num_ids": 704,
        "indeed": false
    },
    {
        "number": 4936,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = list(map(int, stdin.split()[1:]))\n    t.sort()\n    d = 1\n    t1 = t[0]\n    t2 = t[-1]\n    t_prev = t[0]\n    t_next = t[-1]\n\n    while d < n:\n        if t_next - t_prev <= 2:\n            break\n        t_prev = t_next\n        t_next = t[d + 1]\n        d += 1\n\n    return str(d) + \" \" + str(t_next)",
        "test": "assert solution('5\\n23 27 31 28 30\\n') == '2 28'",
        "num_ids": 883,
        "indeed": false
    },
    {
        "number": 4937,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    e = list(map(int, stdin.split()))\n\n    def find_winner(total_ships: int) -> int:\n        def is_valid(ships: int) -> bool:\n            return total_ships - ships >= 0\n\n        def is_winner(ships: int) -> bool:\n            return is_valid(ships) and all(is_valid(ships - e[i]) for i in range(n))\n\n        for ships in range(total_ships + 1):\n            if is_winner(ships):\n                return ships\n\n    def is_valid(ships: int) -> bool:\n        return ships <= a\n\n    def is_winner(ships: int) -> bool:\n        return is_valid(ships) and all(is_valid(ships - e[i]) for i in range(n))\n\n    result = max(find_winner(a), find_winner(a - e[0]))\n\n    return str(result)",
        "test": "assert solution('1 2 3\\n3 4 5\\n6 7 8\\n') == '3'",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 4938,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.split()[0])\n    genders = stdin.split()[1]\n\n    women = genders.count('W')\n    men = genders.count('M')\n    diff = abs(women - men)\n\n    if diff <= X:\n        return str(diff)\n    elif diff <= 2 * X:\n        return str(2 * X)\n    else:\n        return \"1\"",
        "test": "assert solution(\"1\\nMWWMWMMWM\") == \"9\"",
        "num_ids": 448,
        "indeed": false
    },
    {
        "number": 4939,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    throw_commands = stdin.split()[1:]\n\n    def throw(positions: int) -> int:\n        child = (egg_holder_child + positions) % n\n        return child\n\n    def undo(positions: int, undo_count: int) -> None:\n        nonlocal egg_holder_child\n        undo_count -= 1\n        if undo_count > 0:\n            return\n        egg_holder_child = throw(-positions)\n\n    egg_holder_child = 0\n    for command in throw_commands:\n        if command.startswith(\"undo\"):\n            positions, undo_count = map(int, command.split()[1:])\n            undo(positions, undo_count)\n        else:\n            positions = int(command)\n            child = throw(positions)\n            egg_holder_child = child\n\n    return str(egg_holder_child)\n",
        "test": "assert solution(\"3 2\\n-1 0 1 2\") == \"2\"",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 4940,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    stages = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n    stages_with_times = [(i, j, t) for i in range(n) for j in range(1, m) for t in stages[i][j]]\n    stages_with_times.sort(key=lambda x: x[2])\n    total_time = 0\n    completed_swathers = [False] * n\n\n    for stage, swather, time in stages_with_times:\n        if not completed_swathers[swather - 1]:\n            total_time += time\n            completed_swathers[swather - 1] = True\n\n    return \" \".join(map(str, total_time))\n",
        "test": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"",
        "num_ids": 516,
        "indeed": false
    },
    {
        "number": 4941,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    d = {}\n    for _ in range(int(stdin.split()[0])):\n        d[stdin.split()[2]] = (stdin.split()[3], stdin.split()[4])\n\n    words = s.split()\n    count_correct = 0\n    count_incorrect = 0\n    for word in words:\n        correct = d.get(word.lower())\n        if correct:\n            if correct[0] == \"correct\":\n                count_correct += 1\n            else:\n                count_incorrect += 1\n        else:\n            count_incorrect += 1\n\n    if count_correct == 1 and count_incorrect == 0:\n        return f\"{count_correct} correct\"\n    elif count_correct == 1 and count_incorrect == 1:\n        return f\"{count_correct} correct\\n{count_incorrect} incorrect\"\n    else:\n        return f\"{count_correct} correct\\n{count_incorrect} incorrect\"",
        "test": "assert solution(",
        "num_ids": 1009,
        "indeed": false
    },
    {
        "number": 4942,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n, *t = map(int, stdin.split())\n    t = [t[i] for i in range(n)]\n    t.sort()\n    last_grow = 0\n    while last_grow < n - 1:\n        last_grow += t[last_grow] + 1\n        last_grow -= t[last_grow]\n        t[last_grow] = 0\n    return str(1 + last_grow)",
        "test": "assert solution(\"1\\n1\") == \"1\"",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 4943,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def polygon_area(points: List[Tuple[float, float]]) -> float:\n        return 0.5 * sum(a * b for a, b in zip(points[1:], points))\n\n    def is_polygon_convex(points: List[Tuple[float, float]]) -> bool:\n        return polygon_area(points) >= 0\n\n    def resize_polygon(points: List[Tuple[float, float]], area: float) -> List[Tuple[float, float]]:\n        width = max(x - x1 for x, x1 in zip(points[-1], points[0]))\n        height = max(y - y1 for y, y1 in zip(points[-1], points[0]))\n\n        if width > height:\n            height = area / width\n        else:\n            width = area / height\n\n        x_shift = 0.5 * width\n        y_shift = 0.5 * height\n\n        return [(x + x_shift, y + y_shift) for x, y in points]\n\n    N, A = map(int, stdin.split())\n    points = []\n    for _ in range(N):\n        x, y = map(float, stdin.split())\n        points.append((x, y))\n    x1, y1 = points[0]\n    x2, y2 = points[1]\n    x3, y3 = points[2]\n\n    if x1 * y2 + x2 * y3 + x3 * y1 <= 0:\n        points.append((x1, -y1))\n\n    polygon = points\n\n    if not is_polygon_convex(polygon):\n        polygon = resize_polygon(polygon, A)\n\n    return '\\n'.join(f'{x:.6f} {y:.6f}' for x, y in polygon)",
        "test": "assert solution(\"\"\"",
        "num_ids": 1604,
        "indeed": false
    },
    {
        "number": 4944,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 1:\n        return \"1\"\n    else:\n        return \"inf\"",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 254,
        "indeed": false
    },
    {
        "number": 4945,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_apartment(x: int, y: int, m: int, sigma: int) -> bool:\n        return x >= 1 and y >= 1 and x + y <= m and 2 * x + y >= sigma\n\n    a, b, m, sigma = map(int, stdin.split())\n\n    max_rent = -1\n\n    for x in range(1, m):\n        for y in range(1, min(x, sigma)):\n            if is_valid_apartment(x, y, m, sigma):\n                rent = a * x + b * y\n                max_rent = max(max_rent, rent)\n\n    return str(max_rent)\n",
        "test": "assert solution(\"3 1\\n12 16\") == \"34\"",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 4946,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    languages = [int(x) for x in stdin.split()[1:]]\n\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_awkwardness_level(languages: list) -> int:\n        min_awkwardness = n\n        max_awkwardness = 0\n\n        for i in range(len(languages)):\n            for j in range(i + 1, len(languages)):\n                if gcd(languages[i], languages[j]) == 1:\n                    if languages[i] < languages[j]:\n                        if max_awkwardness < i - j + 1:\n                            max_awkwardness = i - j + 1\n                    else:\n                        if min_awkwardness > j - i + 1:\n                            min_awkwardness = j - i + 1\n\n        return min(min_awkwardness, max_awkwardness)\n\n    return str(find_awkwardness_level(languages))\n",
        "test": "assert solution(\"4\\n1 2 3 1\") == \"3\"",
        "num_ids": 639,
        "indeed": false
    },
    {
        "number": 4947,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    english_mile = 5280\n    roman_mile = 4854\n    paces = x * english_mile / roman_mile\n    return round(paces)",
        "test": "assert solution(\"1.0\") == \"1088\"",
        "num_ids": 245,
        "indeed": false
    },
    {
        "number": 4948,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    holes = []\n    for i in range(n):\n        radius, x, y, z = map(int, stdin.split())\n        holes.append((radius, (x, y, z)))\n    cheese = []\n    for z in range(100000):\n        for y in range(100000):\n            for x in range(100000):\n                cheese.append((x, y, z))\n\n    def cut_slice(center, radius):\n        top_left = (center[0] - radius, center[1] - radius, center[2] - radius)\n        top_right = (center[0] + radius, center[1] - radius, center[2] - radius)\n        bottom_left = (center[0] - radius, center[1] + radius, center[2] - radius)\n        bottom_right = (center[0] + radius, center[1] + radius, center[2] - radius)\n        return [top_left, top_right, bottom_left, bottom_right]\n\n    cuts = []\n    for i in range(s):\n        cuts.append(cut_slice(cheese[0], max(hole[0] for hole in holes)))\n        cheese = cheese[1:]\n\n    def calculate_thickness(center, radius):\n        cuts = cut_slice(center, radius)\n        thickness = 0\n        for cut in cuts:\n            thickness += abs(cut[1][0] - cut[2][0]) + abs(cut[0][1] - cut[3][1])\n        return thickness / (4 * radius)\n\n    thicknesses = []\n    for hole in holes:\n        thicknesses.append(calculate_thickness(hole[1], hole[0]))\n\n    return \"\\n\".join(map(str, thicknesses))\n\ntest_case = \"0 4\\n\"\nprint(solution(test_case))",
        "test": "assert solution(\"2 3\\n5 3 3 3\\n3 3 5 3\\n3 5 3 3\\n5 5 5 5\\n1 1 1 1\\n\") == \"33.333333333\\n33.333333333\\n33.333333333\\n33.333333333\\n\"",
        "num_ids": 1017,
        "indeed": false
    },
    {
        "number": 4949,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, w, h = map(int, stdin.split())\n    matches = list(map(int, stdin.split()[1:]))\n    \n    fit = []\n    for match in matches:\n        if match <= h:\n            fit.append(match)\n    \n    if fit:\n        for match in matches:\n            if match not in fit:\n                return \"NE\"\n        \n        return \"DA\"\n    \n    return \"NE\"",
        "test": "assert solution(\"5 5 5\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"DA\\nDA\\nNE\\nDA\\nNE\\nDA\\nNE\\nNE\\nNE\"",
        "num_ids": 775,
        "indeed": false
    },
    {
        "number": 4950,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    n = int(stdin.split()[0])\n    times = [list(map(int, line.split())) for line in stdin.split()[1:]]\n\n    # Sort the photographs by time and distance\n    sorted_times = sorted(times)\n\n    # Initialize the fastest speed\n    fastest_speed = 0\n\n    # Iterate over the sorted photographs\n    for i, (t, d) in enumerate(sorted_times):\n        # If the current photograph is the fastest so far, update the fastest speed\n        if i == 0 or d < sorted_times[i - 1][1]:\n            fastest_speed = max(fastest_speed, (t + 7) * 60 * 60 / d)\n\n    # Return the fastest speed\n    return str(fastest_speed)",
        "test": "assert solution(\"2\\n0 0\\n7 42\") == \"6\"",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 4951,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    proof = stdin.split('\\n')[1:]\n    for i, line in enumerate(proof):\n        line = line.strip().split()\n        assumptions = []\n        for j in range(len(line) // 3):\n            assumptions.append(line[3 * j].upper())\n        arrow, conclusion = line[-1].upper(), line[-2].upper()\n        if not all(assumption in conclusion for assumption in assumptions):\n            return str(i + 1)\n    return \"correct\"\n",
        "test": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> ALICE\") == \"3\"",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 4952,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Initialize empty dictionary to store count of each candidate\n    count_dict = {}\n    \n    # Parse input\n    for line in stdin.split('\\n'):\n        if line.strip() == '***':\n            break\n        for word in line.split():\n            if word.isalpha():\n                if word.islower():\n                    word = word.upper()\n                word = word.replace('-', '')\n                if word not in count_dict:\n                    count_dict[word] = 0\n                count_dict[word] += 1\n    \n    # Calculate simple or absolute majority\n    candidate = None\n    max_count = 0\n    for word, count in count_dict.items():\n        if count > max_count:\n            max_count = count\n            candidate = word\n    \n    # Output result\n    if max_count > len(count_dict) // 2:\n        return candidate\n    else:\n        return 'Runoff!'",
        "test": "assert solution(\"\"\"",
        "num_ids": 690,
        "indeed": false
    },
    {
        "number": 4953,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    char_languages = {}\n    for i in range(n):\n        line = stdin.split()\n        char_name, char_language = line[0],''.join(line[1:])\n        char_languages[char_name] = char_language\n\n    def can_converse(languages: set) -> bool:\n        for i, lang in enumerate(languages):\n            for j, other_lang in enumerate(languages):\n                if i!= j and char_languages[f\"{char_name}{i+1}\"] == other_lang:\n                    return True\n        return False\n\n    def converse_for_all(languages: set) -> set:\n        result = set()\n        for i, lang in enumerate(languages):\n            if char_languages[f\"{char_name}{i+1}\"] in languages:\n                result.add(char_languages[f\"{char_name}{i+1}\"])\n        return result\n\n    def is_empty(languages: set) -> bool:\n        return len(languages) == 0\n\n    def all_but(languages: set, other: set) -> set:\n        return languages - other\n\n    def smallest_set(candidates: set) -> set:\n        min_set = None\n        min_size = float('inf')\n        for candidate in candidates:\n            if len(candidate) < min_size:\n                min_size = len(candidate)\n                min_set = candidate\n        return min_set\n\n    def combinations(candidates: set) -> set:\n        result = set()\n        for i in range(len(candidates)):\n            for j in range(i + 1, len(candidates)):\n                result.add(frozenset((candidates[i], candidates[j])))\n        return result\n\n    def groups(languages: set) -> set:\n        groups = []\n        for i in range(len(languages)):\n            for j in range(i + 1, len(languages)):\n                groups.append(frozenset((languages[i], languages[j])))\n        return set(groups)\n\n    def remove_self_converse(languages: set) -> set:\n        return all_but(languages, converse_for_all(languages))\n\n    char_names = list(char_languages.keys())\n    languages = set(char_languages.values())\n\n    while not is_empty(languages):\n        candidates = set(combinations(char_names)) - set(groups(languages))\n        smallest = smallest_set(candidates)\n        if smallest is None or can_converse(smallest):\n            return len(smallest)\n        languages = remove_self_converse(languages)\n\n    return \"IMPOSSIBLE\"",
        "test": "assert solution(open(\"input.txt\").read()) == \"2\"",
        "num_ids": 1255,
        "indeed": false
    },
    {
        "number": 4954,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def min_cost(beds: List[int], hotel_prices: List[int], n: int) -> int:\n        min_cost = float('inf')\n        for i in range(1, n + 1):\n            cost = 0\n            for j in range(len(hotel_prices)):\n                cost += hotel_prices[j] * (beds[j] - i)\n            min_cost = min(min_cost, cost)\n        return min_cost\n\n    def min_cost_stay_home(hotel_prices: List[int], n: int) -> int:\n        min_cost = float('inf')\n        for i in range(1, n + 1):\n            for j in range(len(hotel_prices)):\n                min_cost = min(min_cost, hotel_prices[j] * i)\n        return min_cost\n\n    n, budget, h, w = map(int, stdin.split())\n    hotel_prices = [int(x) for x in stdin.split()[1:].split()]\n    hotel_beds = [list(map(int, line.split())) for line in stdin.split()[2:].split('\\n')[1:]]\n\n    min_cost_hotel = min_cost(hotel_beds[0], hotel_prices, n)\n    min_cost_home = min_cost_stay_home(hotel_prices, n)\n    min_cost_total = min_cost_hotel + min_cost_home\n\n    if min_cost_total <= budget:\n        return str(min_cost_total)\n    else:\n        return \"stay home\"",
        "test": "assert solution(",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 4955,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    notes = [line.strip() for line in lines[1].split()]\n    scales = []\n    \n    # Initialize the scales\n    for i in range(len(notes)):\n        note = notes[i]\n        if i == 0:\n            scales.append(note)\n        elif note == notes[i-1]:\n            scales[-1] += note\n        else:\n            scales.append(note)\n    \n    # Identify the major scales\n    major_scales = []\n    for scale in scales:\n        if scale in ['A', 'B', 'C', 'D', 'E', 'F', 'G']:\n            major_scales.append(scale)\n    \n    # Sort the scales\n    major_scales.sort()\n    \n    # Output the result\n    if not major_scales:\n        return 'none'\n    return''.join(major_scales)",
        "test": "assert solution(\"15 A B E G B A C D E F G G F A C D E F G G F A C D E F G G F A C D E F\") == \"A# C D# F# G# B C\"",
        "num_ids": 796,
        "indeed": false
    },
    {
        "number": 4956,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    ae_count = 0\n    in_ae = False\n    for word in words:\n        if 'ae' in word:\n            ae_count += word.count('ae')\n            in_ae = True\n        elif in_ae:\n            return \"dae ae ju traeligt va\"\n    if ae_count >= len(words) * 0.4:\n        return \"dae ae ju traeligt va\"\n    return \"haer talar vi rikssvenska\"",
        "test": "assert solution(\"The quick brown fox jumps over the lazy dog\") == \"haer talar vi rikssvenska\"",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 4957,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(row) for row in stdin.splitlines()]\n\n    def is_adjacent(i: int, j: int) -> bool:\n        return (i - 1, j) in edges or (i + 1, j) in edges or (i, j - 1) in edges or (i, j + 1) in edges\n\n    def is_valid(i: int, j: int, current_coffee_shop: bool) -> bool:\n        if grid[i][j] == '.' and is_adjacent(i, j):\n            return not current_coffee_shop\n        return True\n\n    def is_valid_placement(i: int, j: int) -> bool:\n        for k in range(4):\n            new_i, new_j = i + x_moves[k], j + y_moves[k]\n            if not (0 <= new_i < n and 0 <= new_j < m):\n                continue\n            if not is_valid(new_i, new_j, grid[new_i][new_j] == '.'):\n                return False\n        return True\n\n    edges = set()\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#' or (i == 0 and j == 0):\n                continue\n            if i == 0:\n                edges.add((i, j - 1))\n            if i == n - 1:\n                edges.add((i, j + 1))\n            if j == 0:\n                edges.add((i - 1, j))\n            if j == m - 1:\n                edges.add((i + 1, j))\n            if i!= 0 and i!= n - 1 and j!= 0 and j!= m - 1:\n                edges.add((i - 1, j))\n                edges.add((i + 1, j))\n                edges.add((i, j - 1))\n                edges.add((i, j + 1))\n\n    x_moves = [0, 0, 1, -1]\n    y_moves = [1, -1, 0, 0]\n    current_coffee_shop = False\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#' or (i == 0 and j == 0):\n                continue\n            if is_valid(i, j, current_coffee_shop):\n                current_coffee_shop = not current_coffee_shop\n                if is_valid_placement(i, j):\n                    grid[i][j] = 'E'\n                    if not current_coffee_shop:\n                        edges.add((i, j))\n    return '\\n'.join(''.join(row) for row in grid)",
        "test": "assert solution(",
        "num_ids": 1590,
        "indeed": false
    },
    {
        "number": 4958,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    box_heights = list(map(int, lines[0].split()))\n    tower_height = int(lines[-1])\n    \n    # sort the box heights in decreasing order\n    box_heights.sort(reverse=True)\n    \n    # find the height of the largest box\n    max_height = box_heights.pop()\n    \n    # find the height of the smallest box\n    min_height = box_heights.pop()\n    \n    # find the height of the second tower\n    second_tower_height = box_heights.pop()\n    \n    # find the height of the first tower\n    first_tower_height = max_height + min_height\n    \n    # find the height of the third tower\n    third_tower_height = second_tower_height - min_height\n    \n    # output the heights of the boxes in the first tower\n    print(f\"{first_tower_height} {max_height} {min_height}\")\n    \n    # output the heights of the boxes in the second tower\n    print(f\"{second_tower_height} {min_height} {third_tower_height}\")\n    \n    return \"\"\n\ninput_str = \"12 8 2 4 10 3 25 14\"\nprint(solution(input_str))",
        "test": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"",
        "num_ids": 1060,
        "indeed": false
    },
    {
        "number": 4959,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    e, f, c = map(int, stdin.split())\n\n    empty_bottles = e + f\n\n    if empty_bottles >= c:\n        return str(empty_bottles // c)\n    else:\n        return \"Insufficient empty bottles\"",
        "test": "assert solution('9 0 3') == '4'",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 4960,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    binary = stdin.strip()\n    octal = \"\"\n\n    for i in range(len(binary)):\n        digit = binary[i]\n        if digit == \"0\":\n            octal += \"0\"\n        elif digit == \"1\":\n            octal += \"1\"\n        else:\n            raise ValueError(\"Invalid input: Only 0 and 1 are allowed.\")\n\n    while len(octal) % 3!= 0:\n        octal = \"0\" + octal\n\n    groups = [octal[i:i+3] for i in range(0, len(octal), 3)]\n    octal_digits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n\n    for group in groups:\n        octal_group = \"\"\n        for digit in group:\n            octal_group += octal_digits.index(digit)\n        octal = octal.replace(group, octal_group)\n\n    return octal",
        "test": "assert solution(\"1010\") == \"12\"",
        "num_ids": 476,
        "indeed": false
    },
    {
        "number": 4961,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    R, S = map(int, stdin.split())\n    seating_order = [list(row) for row in stdin.split()]\n    seating_order.remove(seating_order[0])  # remove the initial row\n\n    total_handshakes = 0\n    row = 0\n\n    while row < R:\n        for col in range(S):\n            if seating_order[row][col] == \"o\":\n                # if the seat is occupied, there must be a neighbor\n                neighbours = []\n                for i in range(row - 1, -1, -1):\n                    if seating_order[i][col]!= \".\":\n                        neighbours.append((i, col))\n                for i in range(row + 1, R):\n                    if seating_order[i][col]!= \".\":\n                        neighbours.append((i, col))\n                for i in range(col - 1, -1, -1):\n                    if seating_order[row][i]!= \".\":\n                        neighbours.append((row, i))\n                for i in range(col + 1, S):\n                    if seating_order[row][i]!= \".\":\n                        neighbours.append((row, i))\n\n                if len(neighbours) > 0:\n                    # the seat is occupied, we can give it to someone\n                    person = seating_order[row][col]\n                    seating_order[row][col] = \".\"\n                    total_handshakes += 1\n                    for neighbour in neighbours:\n                        seating_order[neighbour[0]][neighbour[1]] = person\n\n    return str(total_handshakes)\n",
        "test": "assert solution(\"2 3\\n..o\\no..\\n\") == \"2\"",
        "num_ids": 880,
        "indeed": false
    },
    {
        "number": 4962,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    drawers = [set() for _ in range(l)]\n    items = [0] * n\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        drawers[a - 1].add(i)\n        drawers[b - 1].add(i)\n        items[i] = 1\n\n    result = []\n    for i in range(n):\n        try:\n            d = next(iter(drawers[i % l]))\n            drawers[i % l].remove(d)\n            result.append(\"LADICA\")\n            items[i] = 1\n        except StopIteration:\n            result.append(\"SMECE\")\n            items[i] = 0\n\n    return \" \".join(map(str, result))",
        "test": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"",
        "num_ids": 750,
        "indeed": false
    },
    {
        "number": 4963,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = list(map(int, stdin.split()[1:]))\n    d.insert(0, 0)\n    d.append(0)\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if j + 1 + d[j] <= n and j + 1 + d[j] + 1 >= i:\n                dp[i] += dp[j]\n        if i == n - 1:\n            dp[i] += 1\n    return''.join(map(str, dp))",
        "test": "assert solution(\"\"\"",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 4964,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, H, L = map(int, stdin.split())\n    horror_list = set(map(int, stdin.split()))\n\n    similarity_matrix = [[0] * N for _ in range(N)]\n    for a, b in map(lambda x: map(int, x.split()), stdin.split()[L+1:]):\n        similarity_matrix[a][b] = similarity_matrix[b][a] = 1\n\n    def horror_index(movie_id):\n        if movie_id in horror_list:\n            return 0\n\n        min_similarity = float('inf')\n        for b in range(N):\n            if similarity_matrix[movie_id][b] < min_similarity:\n                min_similarity = similarity_matrix[movie_id][b]\n\n        if min_similarity == 0:\n            return 0\n\n        return Q + 1\n\n    Q = max(similarity_matrix.index(row).index(max(row)) for row in similarity_matrix)\n\n    def max_horror_index(movie_id, movie_horror_index):\n        if movie_horror_index < 0:\n            return -1\n\n        for b in range(N):\n            if similarity_matrix[movie_id][b] < similarity_matrix[movie_id][movie_horror_index] and similarity_matrix[b][movie_id] < similarity_matrix[b][movie_horror_index]:\n                return max_horror_index(b, horror_index(b))\n\n        return movie_horror_index\n\n    movie_horror_index = max_horror_index(0, horror_index(0))\n    return str(movie_horror_index)\n",
        "test": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n\") == \"1\"",
        "num_ids": 1074,
        "indeed": false
    },
    {
        "number": 4965,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n, *t = map(int, stdin.split())\n    t.sort()\n    for i in range(1, n):\n        if abs(t[i - 1] - t[i]) > abs(t[i] - t[i + 1]):\n            t[i], t[i + 1] = t[i + 1], t[i]\n    if all(t[i] < t[i + 1] for i in range(n - 1)):\n        return''.join(map(str, t))\n    else:\n        return 'impossible'\n",
        "test": "assert solution(\"5\\n1 2 3 4 5\\n2 3 4 5 6\\n3 4 5 6 7\\n4 5 6 7 8\\n5 6 7 8 9\") == \"impossible\"",
        "num_ids": 883,
        "indeed": false
    },
    {
        "number": 4966,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, p, k = map(int, stdin.split())\n    t = list(map(float, stdin.split()))\n\n    # compute the speed up at each timestamp\n    speed_up = [(100 + p) / 100 * (1 - t) for t in t]\n\n    # compute the cumulative sum of speed up\n    cum_speed_up = [sum(speed_up[:i + 1]) for i in range(n)]\n\n    # compute the sum of time played\n    time_played = cum_speed_up[-1]\n\n    # compute the length of the original video\n    original_length = k + sum([t * cum_speed_up[i] for i in range(n)])\n\n    # print the result\n    print(original_length)\n\n    return \"\"\n",
        "test": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 4967,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split())\n    grid = [list(row) for row in stdin.splitlines()]\n    \n    spies = [coord for coord in find_spies(grid) if coord in find_safe_houses(grid)]\n    \n    def find_safe_houses(grid: List[List[str]]) -> List[Tuple[int, int]]:\n        safe_houses = []\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 'H':\n                    safe_houses.append((i, j))\n        return safe_houses\n    \n    def find_spies(grid: List[List[str]]) -> List[Tuple[int, int]]:\n        spies = []\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 'S':\n                    spies.append((i, j))\n        return spies\n    \n    def manhattan_distance(loc1: Tuple[int, int], loc2: Tuple[int, int]) -> int:\n        return abs(loc1[0] - loc2[0]) + abs(loc1[1] - loc2[1])\n    \n    max_distance = 0\n    for i, j in spies:\n        safe_house = find_nearest_safe_house(grid, (i, j))\n        if safe_house:\n            distance = manhattan_distance(safe_house, (i, j))\n            max_distance = max(max_distance, distance)\n    \n    return str(max_distance)",
        "test": "assert solution(\"\"\"",
        "num_ids": 1037,
        "indeed": false
    },
    {
        "number": 4968,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(arr: list, target: int) -> int:\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == target:\n                return mid\n            elif arr[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left\n\n    def lend_reserve_kayak(teams: list, reserve_teams: list, starting_number: int) -> int:\n        starting_number -= 1  # Subtract 1 to make it start counting from 0\n        for i, team in enumerate(teams):\n            if team == starting_number:\n                return i\n        return -1\n\n    def find_starting_teams(starting_numbers: list) -> list:\n        starting_teams = set()\n        for starting_number in starting_numbers:\n            starting_team_index = binary_search(starting_numbers, starting_number)\n            starting_teams.add(starting_team_index)\n        return starting_teams\n\n    n, s, r = map(int, stdin.split())\n    damaged_kayaks = list(map(int, stdin.split()[1].split()))[1:]\n    reserve_kayaks = list(map(int, stdin.split()[2].split()))[1:]\n\n    starting_teams = find_starting_teams(reserve_kayaks)\n    starting_teams.update(find_starting_teams(damaged_kayaks))\n\n    starting_numbers = [i + 1 for i in range(n) if i + 1 not in starting_teams]\n    min_teams = len(starting_numbers)\n\n    for starting_number in starting_numbers:\n        starting_team_index = binary_search(starting_numbers, starting_number)\n        if starting_team_index == 0:\n            min_teams -= 1\n        elif starting_team_index == len(starting_numbers) - 1:\n            min_teams -= 1\n        else:\n            min_teams -= 2\n\n    return str(min_teams)\n\ntest_input = \"\"\"5 2 3\n2 4\n1 3 5\"\"\"\n\nprint(solution(test_input))",
        "test": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == \"0\"",
        "num_ids": 1105,
        "indeed": false
    },
    {
        "number": 4969,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    \n    if C >= R:\n        return \"0.000000000\"\n    \n    cheese_radius = R - C\n    cheese_area = 3.14159 * (cheese_radius ** 2)\n    pizza_area = 3.14159 * (R ** 2)\n    \n    return f\"{100 * cheese_area / pizza_area:.6f}\"",
        "test": "assert solution(\"1 1\") == \"0.000000000\"",
        "num_ids": 368,
        "indeed": true
    },
    {
        "number": 4970,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    frosh = []\n\n    for _ in range(n):\n        course_set = set(map(int, stdin.split()[1:]))\n        frosh.append(course_set)\n\n    frosh_sorted = sorted(frosh, key=lambda x: len(x), reverse=True)\n\n    max_popularity = 0\n    max_combination = None\n\n    for i in range(len(frosh_sorted)):\n        combination = frosh_sorted[i]\n        for j in range(i + 1, len(frosh_sorted)):\n            if combination == frosh_sorted[j]:\n                continue\n            else:\n                popularity = len(set.intersection(*[course_set for course_set in combination]))\n                if popularity > max_popularity:\n                    max_popularity = popularity\n                    max_combination = combination\n                elif popularity == max_popularity:\n                    if len(set.union(*[course_set for course_set in combination])) > len(set.union(*[course_set for course_set in max_combination])):\n                        max_popularity = popularity\n                        max_combination = combination\n\n    return str(max_popularity)\n\nprint(solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\"))  # Output: \"2\"",
        "test": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 4971,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    bus_numbers = [0] * (m + 1)\n    bus_numbers[0] = -1\n    bus_numbers[1] = 0\n    bus_numbers[2] = 1\n    bus_numbers[3] = 2\n\n    for i in range(4, m + 1):\n        if bus_numbers[i - 1] + 1 < m:\n            bus_numbers[i] = bus_numbers[i - 1] + 1\n        else:\n            bus_numbers[i] = bus_numbers[i - 1] + 2\n\n    return str(bus_numbers[m])",
        "test": "assert solution(\"1730\") == \"1729\"",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 4972,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    k = 1\n    Y = [1]\n    total = X\n    while Y[k-1] + Y[k] <= total:\n        Y.append(Y[k-1] + Y[k])\n        k += 1\n    return str(k - 1)",
        "test": "assert solution(65536) == '16'",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 4973,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    board = [list(row) for row in stdin.split()[1:].split('\\n')]\n    blocked = [row.index('#') for row in board if '#' in row]\n    \n    if '#' in blocked:\n        return '-'\n    \n    knight = board.index(['.', '#'][board.index('K')])\n    directions = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (-1, 2), (1, -2), (-1, -2)]\n    visited = [False] * len(board)\n    \n    def dfs(row: int, col: int, steps: int) -> int:\n        nonlocal visited\n        if (row, col) == (1, 1):\n            return steps\n        \n        visited[row * N + col] = True\n        \n        for dr, dc in directions:\n            new_row, new_col = row + dr, col + dc\n            if 1 <= new_row <= N and 1 <= new_col <= N and not visited[new_row * N + new_col] and board[new_row - 1][new_col - 1]!= '.':\n                visited[new_row * N + new_col] = True\n                steps = dfs(new_row, new_col, steps + 1)\n        \n        visited[row * N + col] = False\n        return steps\n    \n    return str(dfs(1, 1, 0))",
        "test": "assert solution(input()) == '2'",
        "num_ids": 1115,
        "indeed": false
    },
    {
        "number": 4974,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    r, n = map(int, stdin.split())\n    rooms = [i for i in range(1, r + 1)]\n    booked = [int(x) for x in stdin.split()[1:]]\n\n    # Remove the booked rooms from the list of available rooms\n    available = [room for room in rooms if room not in booked]\n\n    # If there are available rooms, return the first available room\n    if available:\n        return str(available[0])\n    # If there are no available rooms, output \"too late\"\n    else:\n        return \"too late\"",
        "test": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 4975,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read key phrase\n    key_phrase = stdin.split()[0]\n    # Read plaintext\n    plaintext = stdin.split()[1]\n    \n    # Initialize table\n    table = [' '] * 5\n    # Fill table with key phrase\n    for i, letter in enumerate(key_phrase):\n        if letter!='':\n            table[i] = letter\n    \n    # Encrypt plaintext\n    ciphertext = ''\n    for i in range(len(plaintext)):\n        # Check for two \u2019x\u2019s following each other\n        if i > 0 and plaintext[i] == 'x' and plaintext[i-1] == 'x':\n            continue\n        \n        # Check for \u2019x\u2019 as the last character\n        if i == len(plaintext)-1 and plaintext[i] == 'x':\n            continue\n        \n        # Break plaintext into digraphs\n        digraph1 = plaintext[i:i+2]\n        # Map digraph1 to table\n        row1, col1 = map(int, ''.join(sorted(digraph1)))\n        if table[row1][col1] == digraph1[0]:\n            table[row1][col1] = 'X'\n            table[(row1+1)%5][(col1+1)%5] = 'X'\n        elif table[row1][col1] == digraph1[1]:\n            table[row1][col1] = 'X'\n            table[(row1+1)%5][col1] = 'X'\n        elif table[row1][col1] =='':\n            table[row1][col1] = 'X'\n        else:\n            row2, col2 = (row1+1)%5, (col1+1)%5\n            if table[row1][col1] == table[row2][col2]:\n                table[row1][col1] = 'X'\n                table[row2][col2] = 'X'\n            else:\n                table[row1][col1] = table[row2][col2]\n        \n        # Break plaintext into digraphs\n        digraph2 = plaintext[i+1:i+3]\n        # Map digraph2 to table\n        row2, col2 = map(int, ''.join(sorted(digraph2)))\n        if table[row2][col2] == digraph2[0]:\n            table[row2][col2] = 'X'\n            table[(row2+1)%5][(col2+1)%5] = 'X'\n        elif table[row2][col2] == digraph2[1]:\n            table[row2][col2] = 'X'\n            table[(row2+1)%5][col2] = 'X'\n        elif table[row2][col2] =='':\n            table[row2][col2] = 'X'\n        else:\n            row3, col3 = (row2+1)%5, (col2+1)%5\n            if table[row2][col2] == table[row3][col3]:\n                table[row2][col2] = 'X'\n                table[row3][col3] = 'X'\n            else:\n                table[row2][col2] = table[row3][col3]\n        \n        # Encrypt digraph1,2\n        ciphertext += table[row1][col1] + table[row2][col2]\n    \n    # Remove spaces from ciphertext\n    return ''.join(c for c in ciphertext if c!='')",
        "test": "assert solution(\"playfair example\\nhide the gold in the tree stump\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"",
        "num_ids": 1779,
        "indeed": false
    },
    {
        "number": 4976,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    gopher = list(map(float, stdin.split()))[0:4]\n    dog = list(map(float, stdin.split()))[4:6]\n\n    gopher_holes = []\n    for _ in range(int(stdin.split()[6])):\n        gopher_hole = list(map(float, stdin.split()))[7 + i * 2:7 + (i + 1) * 2]\n        gopher_holes.append(gopher_hole)\n\n    min_distance = float('inf')\n    best_hole = None\n\n    for i in range(len(gopher_holes)):\n        for j in range(i + 1, len(gopher_holes)):\n            x1, y1 = gopher\n            x2, y2 = gopher_holes[i]\n            x3, y3 = gopher_holes[j]\n            dx = x2 - x1\n            dy = y2 - y1\n            dist1 = abs(x1 * dy - y1 * dx) / sqrt(dx * dx + dy * dy)\n            dx = x3 - x2\n            dy = y3 - y2\n            dist2 = abs(x2 * dy - y2 * dx) / sqrt(dx * dx + dy * dy)\n            if dist1 + dist2 < min_distance:\n                min_distance = dist1 + dist2\n                best_hole = (x2, y2)\n\n    if best_hole:\n        return f\"The gopher can escape through the hole at ({best_hole[0]:.3f},{best_hole[1]:.3f}).\"\n    else:\n        return \"The gopher cannot escape.\"",
        "test": "assert solution(\"1.000 1.000 2.000 2.000\\n1.000 1.000\\n1.500 1.500\") == \"The gopher can escape through the hole at (1.500, 1.500).\"",
        "num_ids": 1420,
        "indeed": false
    },
    {
        "number": 4977,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing input\n    a, b = map(int, stdin.split()[0].split())\n    c, d = map(int, stdin.split()[1].split())\n    t = int(stdin.split()[2])\n\n    # Starting point\n    if abs(a - c) + abs(b - d) == abs(a - b) + abs(b - c):\n        return \"Y\"\n    else:\n        return \"N\"\n",
        "test": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"",
        "num_ids": 967,
        "indeed": false
    },
    {
        "number": 4978,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for _ in range(n):\n        row = list(stdin.readline())\n        grid.append(row)\n\n    spreading = False\n    for second in range(1, 101):\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'V':\n                    if i == 0 or grid[i-1][j] == '.':\n                        grid[i][j] = 'W'\n                    elif j == 0 or grid[i][j-1] == '.':\n                        grid[i][j] = 'W'\n                    elif i == n-1 or grid[i+1][j] == '.' or j == m-1 or grid[i][j+1] == '.':\n                        grid[i][j] = 'W'\n                    else:\n                        if grid[i-1][j] == '#' or grid[i+1][j] == '#' or grid[i][j-1] == '#' or grid[i][j+1] == '#':\n                            grid[i][j] = 'W'\n\n    result = ''\n    for row in grid:\n        result += ''.join(row) + '\\n'\n\n    return result",
        "test": "assert solution(\"\"\"\\",
        "num_ids": 931,
        "indeed": false
    },
    {
        "number": 4979,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    binary = format(N, 'b')\n    reversed_binary = binary[::-1]\n    reversed_int = int(reversed_binary, 2)\n    return str(reversed_int)",
        "test": "assert solution(\"13\") == \"11\"",
        "num_ids": 154,
        "indeed": true
    },
    {
        "number": 4980,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    packages = stdin.split()[1:]\n    pink_buttons = 0\n    pink_count = 0\n    \n    for package in packages:\n        pink_count += package.lower().count(\"pink\")\n        if package.lower().count(\"pink\") > 0:\n            pink_buttons += 1\n            if pink_buttons > 1:\n                return \"I must watch Star Wars with my daughter\"\n    \n    if pink_count == 0:\n        return \"I must watch Star Wars with my daughter\"\n    else:\n        return pink_count",
        "test": "assert solution(\"\"\"",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 4981,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    A, B, C = map(int, inputs[0].split())\n    order = inputs[1].upper()\n    \n    if order == 'ABC':\n        return f'{A} {B} {C}'\n    elif order == 'ACB':\n        return f'{A} {C} {B}'\n    elif order == 'BAC':\n        return f'{B} {A} {C}'\n    elif order == 'BCA':\n        return f'{B} {C} {A}'\n    elif order == 'CAB':\n        return f'{C} {A} {B}'\n    else:\n        return f'{C} {B} {A}'",
        "test": "assert solution(\"5 3 7\\nACB\") == \"3 5 7\"",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 4982,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    events = [line.strip() for line in stdin.split('\\n')]\n    total_shares = 0\n    total_value = 0\n    tax = 0.3\n    for event in events:\n        if event.startswith('buy'):\n            shares, value = map(int, event.split())\n            total_shares += shares\n            total_value += value\n        elif event.startswith('sell'):\n            shares, value = map(int, event.split())\n            total_shares -= shares\n            total_value -= value\n            tax_amount = shares * value * tax\n            if tax_amount > 0:\n                tax += tax_amount / shares\n                total_value -= tax_amount\n        elif event.startswith('split'):\n            x = int(event.split()[-1])\n            total_shares = (total_shares + x - 1) // x * x\n        elif event.startswith('merge'):\n            x = int(event.split()[-1])\n            total_shares = (total_shares + x - 1) // x * x\n    return round(total_value, 1)\n\ninput = \"\"\"buy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\"\nprint(solution(input))",
        "test": "assert solution(input_string) == expected_output",
        "num_ids": 991,
        "indeed": false
    },
    {
        "number": 4983,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    y = 0\n\n    while x > 0:\n        y += x % 10\n        x //= 10\n\n    return str(y)",
        "test": "assert solution(\"2\") == \"2\", \"Sample Input: 2, Sample Output: 2\"",
        "num_ids": 223,
        "indeed": false
    },
    {
        "number": 4984,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split()[0].split())\n    matrix = [list(stdin[i:i+cols]) for i in range(0, len(stdin), cols)]\n\n    def island_count(i, j):\n        if i < 0 or i >= rows or j < 0 or j >= cols:\n            return 0\n\n        if matrix[i][j] == 'L':\n            return 1\n\n        if matrix[i][j] == 'W':\n            return 1\n\n        if matrix[i][j] == 'C':\n            return 0\n\n        count = 0\n        count += island_count(i-1, j)\n        count += island_count(i+1, j)\n        count += island_count(i, j-1)\n        count += island_count(i, j+1)\n        return count\n\n    islands = 0\n    for i in range(rows):\n        for j in range(cols):\n            islands += island_count(i, j)\n\n    return str(islands)",
        "test": "assert solution(\"4 5\\nCCLLC\\nLLLLL\\nLLLLL\\nLLLLL\\n\") == \"2\"",
        "num_ids": 1390,
        "indeed": false
    },
    {
        "number": 4985,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, suit = map(int, stdin.split())\n    dominant_suit = int(suit)\n    points = [0] * 14\n    \n    for i in range(n):\n        card_number, card_suit = input().split()\n        card_number = int(card_number)\n        card_suit = int(card_suit)\n        \n        if card_suit == dominant_suit:\n            points[card_number - 1] += 10\n        else:\n            points[card_number - 1] += 1\n        \n    return str(sum(points))",
        "test": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"",
        "num_ids": 727,
        "indeed": false
    },
    {
        "number": 4986,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[0]\n    t = stdin.splitlines()[1]\n\n    sticky_keys = set()\n\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            sticky_keys.add(s[i])\n\n    return \"\".join(sticky_keys)\n",
        "test": "assert solution(\"thiss iss veery annoying\") == \"se\"",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 4987,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    n, c, k = map(int, stdin.split())\n    socks = list(map(int, stdin.split()[1:]))\n\n    # Calculate the GCD of all socks\n    gcd_value = gcd(max(socks), min(socks))\n\n    # Calculate the number of machines needed\n    machines = (max(socks) - min(socks)) // gcd_value\n\n    # Round down to the nearest multiple of the capacity\n    machines = machines // c * c\n\n    # Check if the number of machines is less than the number of machines needed\n    if machines < machines_needed:\n        return str(machines_needed)\n    else:\n        return str(machines)",
        "test": "assert solution(input(\"Sample Input:\\n5 3 0\\n0 0 1 1 2\\nSample Output:\\n3\\n\")) == \"3\\n\"",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 4988,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.split()[0])\n    for _ in range(T):\n        N = int(stdin.split()[1])\n        result = 0\n        while N > 0:\n            result += N % 10\n            N //= 10\n        print(result)",
        "test": "assert solution(\"3\\n1\\n2\\n3\") == \"1\\n2\\n6\\n\"",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 4989,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    n, *pieces = map(int, stdin.split())\n\n    # Sort the pieces in descending order\n    pieces.sort(reverse=True)\n\n    # Split the pieces into Alice and Bob\n    alice_pieces = pieces[:n//2]\n    bob_pieces = pieces[n//2:]\n\n    # Calculate the combined value of Alice's and Bob's pieces\n    alice_value = sum(alice_pieces)\n    bob_value = sum(bob_pieces)\n\n    # Return the combined value of Alice's and Bob's pieces\n    return f\"{alice_value} {bob_value}\"\n",
        "test": "assert solution(\"3 3 1 2\") == \"4 2\"",
        "num_ids": 832,
        "indeed": false
    },
    {
        "number": 4990,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    b, k, g = map(int, stdin.split())\n    days = 0\n    while days < b * 2:\n        days += 1\n        groups = 0\n        while groups < b * 2:\n            groups += 1\n            if groups % k == 0:\n                if days == b * 2:\n                    break\n    return str(days)\n\ndef",
        "test": "assert solution(\"5 2 1\") == \"2\"",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 4991,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h_n = [1]\n\n    def h_n_func(n: int) -> int:\n        if n == 1:\n            return 1\n        elif n % 2 == 0:\n            return h_n_func(n // 2) + n\n        else:\n            return h_n_func(3 * n + 1) + n\n\n    while h_n_func(n)!= 1:\n        h_n.append(h_n_func(n))\n        n = h_n_func(n)\n\n    return str(sum(h_n))\n\nprint(solution(\"5\")) # Output: 36",
        "test": "assert solution('5') == '36'",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 4992,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    students = list(map(int, stdin.split()[1:]))\n    \n    # find the maximum number of exams in each room\n    max_exams_in_room = max(students)\n    if max_exams_in_room > 2:\n        return \"impossible\"\n    \n    # find a safe order in which to visit the rooms\n    visited = [False] * n\n    order = []\n    queue = [(0, [])]\n    while queue:\n        room_index, room_exams = queue.pop(0)\n        for exam in room_exams:\n            if not visited[exam]:\n                visited[exam] = True\n                if exam == max_exams_in_room:\n                    order.append(exam)\n                else:\n                    queue.append((exam, room_exams + [exam]))\n    \n    # output the safe order\n    return \" \".join(map(str, order))",
        "test": "assert solution(\"\"\"4",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 4993,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    parts, days = map(int, stdin.split())\n    parts_dict = {}\n    for _ in range(parts):\n        word = stdin.readline().strip().lower()\n        parts_dict[word] = parts_dict.get(word, 0) + 1\n\n    for _ in range(days):\n        word = stdin.readline().strip().lower()\n        parts_dict[word] -= 1\n        if parts_dict[word] == 0:\n            del parts_dict[word]\n\n    for word in parts_dict:\n        if parts_dict[word] > 0:\n            return word\n\n    return \"paradox avoided\"",
        "test": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"",
        "num_ids": 416,
        "indeed": false
    },
    {
        "number": 4994,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    points = list(map(int, stdin.split()))\n    x1, y1 = points[0], points[1]\n    x2, y2 = points[2], points[3]\n    x3, y3 = points[4], points[5]\n\n    if x1 == x2 or x1 == x3 or x2 == x3:\n        x4 = 0\n    elif y1 == y2 or y1 == y3 or y2 == y3:\n        x4 = 0\n    else:\n        x4 = -x1 * (y2 - y3) // (x2 - x3)\n\n    if y1 == y2 or y1 == y3 or y2 == y3:\n        y4 = 0\n    elif x1 == x2 or x1 == x3 or x2 == x3:\n        y4 = 0\n    else:\n        y4 = -y1 * (x2 - x3) // (y2 - y3)\n\n    return f\"{x4} {y4}\"",
        "test": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"",
        "num_ids": 617,
        "indeed": false
    },
    {
        "number": 4995,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    observations = [list(map(int, stdin.split()[1].split())) for _ in range(N)]\n    \n    total_seconds = 0\n    total_minutes = 0\n    count = 0\n    for minute, seconds in observations:\n        total_seconds += seconds\n        total_minutes += minute\n        count += 1\n    \n    if count == 0:\n        return \"measurement error\"\n    \n    average_seconds = total_seconds / count\n    average_minutes = average_seconds / 60\n    \n    if average_minutes <= 0.5:\n        return \"measurement error\"\n    \n    return f\"{average_minutes:.7f}\"\n\ntest_case = \"1 1 61\"\nprint(solution(test_case))",
        "test": "assert solution('1\\n1 61') == '1.016666667'",
        "num_ids": 705,
        "indeed": false
    },
    {
        "number": 4996,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    C, K = stdin.split()\n    n = len(C)\n\n    # Encrypt\n    encrypted = ''\n    for i in range(n):\n        if i % 2 == 0:\n            encrypted += chr((ord(C[i]) - ord('A') + ord(K[i % len(K)]) - ord('A')) % 26 + ord('A'))\n        else:\n            encrypted += chr((ord(C[i]) - ord('A') - ord(K[i % len(K)]) + ord('A')) % 26 + ord('A'))\n\n    return encrypted\n\n\ndef",
        "test": "assert solution(\"ALBERTA\") == \"CALGARY\", \"Solution failed for input ALBERTA\"",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 4997,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    moves = stdin.upper()\n    moves = [int(c) for c in moves]\n    ball_under = moves[2] if moves[2] in [1, 3] else moves[0]\n    return str(ball_under)",
        "test": "assert solution('AB') == '3', \"Incorrect output\"",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 4998,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    A, B, C, D = map(int, stdin.split())\n    \n    # calculate areas\n    areas = [0] * 4\n    areas[0] = (A ** 2) * D\n    areas[1] = (B ** 2) * C\n    areas[2] = (C ** 2) * B\n    areas[3] = (D ** 2) * A\n    \n    # calculate maximum area\n    max_area = max(areas)\n    \n    return str(max_area)",
        "test": "assert solution(\"7 5 10 20\") == \"20\"",
        "num_ids": 694,
        "indeed": false
    },
    {
        "number": 4999,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    count = 0\n    while a!= b:\n        if a % 2 == 0:\n            a //= 2\n        else:\n            a += 1\n        count += 1\n        \n    return str(count)",
        "test": "assert solution('103 27') == '4'",
        "num_ids": 235,
        "indeed": false
    }
]